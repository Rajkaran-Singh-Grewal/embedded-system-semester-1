
rgrewalassignment4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000af2c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001224  0800b0c0  0800b0c0  0001b0c0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c2e4  0800c2e4  000201e0  2**0
                  CONTENTS
  4 .ARM          00000008  0800c2e4  0800c2e4  0001c2e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c2ec  0800c2ec  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c2ec  0800c2ec  0001c2ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c2f0  0800c2f0  0001c2f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  0800c2f4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000168  200001e0  0800c4d4  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000348  0800c4d4  00020348  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001438f  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002924  00000000  00000000  0003459f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000012a0  00000000  00000000  00036ec8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001180  00000000  00000000  00038168  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000230e7  00000000  00000000  000392e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015355  00000000  00000000  0005c3cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cf476  00000000  00000000  00071724  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00140b9a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000067a0  00000000  00000000  00140bec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e0 	.word	0x200001e0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800b0a4 	.word	0x0800b0a4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e4 	.word	0x200001e4
 80001cc:	0800b0a4 	.word	0x0800b0a4

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b9aa 	b.w	8000ff4 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	; (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	; (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9d08      	ldr	r5, [sp, #32]
 8000d2a:	4604      	mov	r4, r0
 8000d2c:	468e      	mov	lr, r1
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d14d      	bne.n	8000dce <__udivmoddi4+0xaa>
 8000d32:	428a      	cmp	r2, r1
 8000d34:	4694      	mov	ip, r2
 8000d36:	d969      	bls.n	8000e0c <__udivmoddi4+0xe8>
 8000d38:	fab2 f282 	clz	r2, r2
 8000d3c:	b152      	cbz	r2, 8000d54 <__udivmoddi4+0x30>
 8000d3e:	fa01 f302 	lsl.w	r3, r1, r2
 8000d42:	f1c2 0120 	rsb	r1, r2, #32
 8000d46:	fa20 f101 	lsr.w	r1, r0, r1
 8000d4a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d4e:	ea41 0e03 	orr.w	lr, r1, r3
 8000d52:	4094      	lsls	r4, r2
 8000d54:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d58:	0c21      	lsrs	r1, r4, #16
 8000d5a:	fbbe f6f8 	udiv	r6, lr, r8
 8000d5e:	fa1f f78c 	uxth.w	r7, ip
 8000d62:	fb08 e316 	mls	r3, r8, r6, lr
 8000d66:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d6a:	fb06 f107 	mul.w	r1, r6, r7
 8000d6e:	4299      	cmp	r1, r3
 8000d70:	d90a      	bls.n	8000d88 <__udivmoddi4+0x64>
 8000d72:	eb1c 0303 	adds.w	r3, ip, r3
 8000d76:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d7a:	f080 811f 	bcs.w	8000fbc <__udivmoddi4+0x298>
 8000d7e:	4299      	cmp	r1, r3
 8000d80:	f240 811c 	bls.w	8000fbc <__udivmoddi4+0x298>
 8000d84:	3e02      	subs	r6, #2
 8000d86:	4463      	add	r3, ip
 8000d88:	1a5b      	subs	r3, r3, r1
 8000d8a:	b2a4      	uxth	r4, r4
 8000d8c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d90:	fb08 3310 	mls	r3, r8, r0, r3
 8000d94:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d98:	fb00 f707 	mul.w	r7, r0, r7
 8000d9c:	42a7      	cmp	r7, r4
 8000d9e:	d90a      	bls.n	8000db6 <__udivmoddi4+0x92>
 8000da0:	eb1c 0404 	adds.w	r4, ip, r4
 8000da4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000da8:	f080 810a 	bcs.w	8000fc0 <__udivmoddi4+0x29c>
 8000dac:	42a7      	cmp	r7, r4
 8000dae:	f240 8107 	bls.w	8000fc0 <__udivmoddi4+0x29c>
 8000db2:	4464      	add	r4, ip
 8000db4:	3802      	subs	r0, #2
 8000db6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dba:	1be4      	subs	r4, r4, r7
 8000dbc:	2600      	movs	r6, #0
 8000dbe:	b11d      	cbz	r5, 8000dc8 <__udivmoddi4+0xa4>
 8000dc0:	40d4      	lsrs	r4, r2
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	e9c5 4300 	strd	r4, r3, [r5]
 8000dc8:	4631      	mov	r1, r6
 8000dca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dce:	428b      	cmp	r3, r1
 8000dd0:	d909      	bls.n	8000de6 <__udivmoddi4+0xc2>
 8000dd2:	2d00      	cmp	r5, #0
 8000dd4:	f000 80ef 	beq.w	8000fb6 <__udivmoddi4+0x292>
 8000dd8:	2600      	movs	r6, #0
 8000dda:	e9c5 0100 	strd	r0, r1, [r5]
 8000dde:	4630      	mov	r0, r6
 8000de0:	4631      	mov	r1, r6
 8000de2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000de6:	fab3 f683 	clz	r6, r3
 8000dea:	2e00      	cmp	r6, #0
 8000dec:	d14a      	bne.n	8000e84 <__udivmoddi4+0x160>
 8000dee:	428b      	cmp	r3, r1
 8000df0:	d302      	bcc.n	8000df8 <__udivmoddi4+0xd4>
 8000df2:	4282      	cmp	r2, r0
 8000df4:	f200 80f9 	bhi.w	8000fea <__udivmoddi4+0x2c6>
 8000df8:	1a84      	subs	r4, r0, r2
 8000dfa:	eb61 0303 	sbc.w	r3, r1, r3
 8000dfe:	2001      	movs	r0, #1
 8000e00:	469e      	mov	lr, r3
 8000e02:	2d00      	cmp	r5, #0
 8000e04:	d0e0      	beq.n	8000dc8 <__udivmoddi4+0xa4>
 8000e06:	e9c5 4e00 	strd	r4, lr, [r5]
 8000e0a:	e7dd      	b.n	8000dc8 <__udivmoddi4+0xa4>
 8000e0c:	b902      	cbnz	r2, 8000e10 <__udivmoddi4+0xec>
 8000e0e:	deff      	udf	#255	; 0xff
 8000e10:	fab2 f282 	clz	r2, r2
 8000e14:	2a00      	cmp	r2, #0
 8000e16:	f040 8092 	bne.w	8000f3e <__udivmoddi4+0x21a>
 8000e1a:	eba1 010c 	sub.w	r1, r1, ip
 8000e1e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e22:	fa1f fe8c 	uxth.w	lr, ip
 8000e26:	2601      	movs	r6, #1
 8000e28:	0c20      	lsrs	r0, r4, #16
 8000e2a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e2e:	fb07 1113 	mls	r1, r7, r3, r1
 8000e32:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e36:	fb0e f003 	mul.w	r0, lr, r3
 8000e3a:	4288      	cmp	r0, r1
 8000e3c:	d908      	bls.n	8000e50 <__udivmoddi4+0x12c>
 8000e3e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e42:	f103 38ff 	add.w	r8, r3, #4294967295
 8000e46:	d202      	bcs.n	8000e4e <__udivmoddi4+0x12a>
 8000e48:	4288      	cmp	r0, r1
 8000e4a:	f200 80cb 	bhi.w	8000fe4 <__udivmoddi4+0x2c0>
 8000e4e:	4643      	mov	r3, r8
 8000e50:	1a09      	subs	r1, r1, r0
 8000e52:	b2a4      	uxth	r4, r4
 8000e54:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e58:	fb07 1110 	mls	r1, r7, r0, r1
 8000e5c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e60:	fb0e fe00 	mul.w	lr, lr, r0
 8000e64:	45a6      	cmp	lr, r4
 8000e66:	d908      	bls.n	8000e7a <__udivmoddi4+0x156>
 8000e68:	eb1c 0404 	adds.w	r4, ip, r4
 8000e6c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e70:	d202      	bcs.n	8000e78 <__udivmoddi4+0x154>
 8000e72:	45a6      	cmp	lr, r4
 8000e74:	f200 80bb 	bhi.w	8000fee <__udivmoddi4+0x2ca>
 8000e78:	4608      	mov	r0, r1
 8000e7a:	eba4 040e 	sub.w	r4, r4, lr
 8000e7e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e82:	e79c      	b.n	8000dbe <__udivmoddi4+0x9a>
 8000e84:	f1c6 0720 	rsb	r7, r6, #32
 8000e88:	40b3      	lsls	r3, r6
 8000e8a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e8e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e92:	fa20 f407 	lsr.w	r4, r0, r7
 8000e96:	fa01 f306 	lsl.w	r3, r1, r6
 8000e9a:	431c      	orrs	r4, r3
 8000e9c:	40f9      	lsrs	r1, r7
 8000e9e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ea2:	fa00 f306 	lsl.w	r3, r0, r6
 8000ea6:	fbb1 f8f9 	udiv	r8, r1, r9
 8000eaa:	0c20      	lsrs	r0, r4, #16
 8000eac:	fa1f fe8c 	uxth.w	lr, ip
 8000eb0:	fb09 1118 	mls	r1, r9, r8, r1
 8000eb4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000eb8:	fb08 f00e 	mul.w	r0, r8, lr
 8000ebc:	4288      	cmp	r0, r1
 8000ebe:	fa02 f206 	lsl.w	r2, r2, r6
 8000ec2:	d90b      	bls.n	8000edc <__udivmoddi4+0x1b8>
 8000ec4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ec8:	f108 3aff 	add.w	sl, r8, #4294967295
 8000ecc:	f080 8088 	bcs.w	8000fe0 <__udivmoddi4+0x2bc>
 8000ed0:	4288      	cmp	r0, r1
 8000ed2:	f240 8085 	bls.w	8000fe0 <__udivmoddi4+0x2bc>
 8000ed6:	f1a8 0802 	sub.w	r8, r8, #2
 8000eda:	4461      	add	r1, ip
 8000edc:	1a09      	subs	r1, r1, r0
 8000ede:	b2a4      	uxth	r4, r4
 8000ee0:	fbb1 f0f9 	udiv	r0, r1, r9
 8000ee4:	fb09 1110 	mls	r1, r9, r0, r1
 8000ee8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000eec:	fb00 fe0e 	mul.w	lr, r0, lr
 8000ef0:	458e      	cmp	lr, r1
 8000ef2:	d908      	bls.n	8000f06 <__udivmoddi4+0x1e2>
 8000ef4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ef8:	f100 34ff 	add.w	r4, r0, #4294967295
 8000efc:	d26c      	bcs.n	8000fd8 <__udivmoddi4+0x2b4>
 8000efe:	458e      	cmp	lr, r1
 8000f00:	d96a      	bls.n	8000fd8 <__udivmoddi4+0x2b4>
 8000f02:	3802      	subs	r0, #2
 8000f04:	4461      	add	r1, ip
 8000f06:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000f0a:	fba0 9402 	umull	r9, r4, r0, r2
 8000f0e:	eba1 010e 	sub.w	r1, r1, lr
 8000f12:	42a1      	cmp	r1, r4
 8000f14:	46c8      	mov	r8, r9
 8000f16:	46a6      	mov	lr, r4
 8000f18:	d356      	bcc.n	8000fc8 <__udivmoddi4+0x2a4>
 8000f1a:	d053      	beq.n	8000fc4 <__udivmoddi4+0x2a0>
 8000f1c:	b15d      	cbz	r5, 8000f36 <__udivmoddi4+0x212>
 8000f1e:	ebb3 0208 	subs.w	r2, r3, r8
 8000f22:	eb61 010e 	sbc.w	r1, r1, lr
 8000f26:	fa01 f707 	lsl.w	r7, r1, r7
 8000f2a:	fa22 f306 	lsr.w	r3, r2, r6
 8000f2e:	40f1      	lsrs	r1, r6
 8000f30:	431f      	orrs	r7, r3
 8000f32:	e9c5 7100 	strd	r7, r1, [r5]
 8000f36:	2600      	movs	r6, #0
 8000f38:	4631      	mov	r1, r6
 8000f3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f3e:	f1c2 0320 	rsb	r3, r2, #32
 8000f42:	40d8      	lsrs	r0, r3
 8000f44:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f48:	fa21 f303 	lsr.w	r3, r1, r3
 8000f4c:	4091      	lsls	r1, r2
 8000f4e:	4301      	orrs	r1, r0
 8000f50:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f54:	fa1f fe8c 	uxth.w	lr, ip
 8000f58:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f5c:	fb07 3610 	mls	r6, r7, r0, r3
 8000f60:	0c0b      	lsrs	r3, r1, #16
 8000f62:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f66:	fb00 f60e 	mul.w	r6, r0, lr
 8000f6a:	429e      	cmp	r6, r3
 8000f6c:	fa04 f402 	lsl.w	r4, r4, r2
 8000f70:	d908      	bls.n	8000f84 <__udivmoddi4+0x260>
 8000f72:	eb1c 0303 	adds.w	r3, ip, r3
 8000f76:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f7a:	d22f      	bcs.n	8000fdc <__udivmoddi4+0x2b8>
 8000f7c:	429e      	cmp	r6, r3
 8000f7e:	d92d      	bls.n	8000fdc <__udivmoddi4+0x2b8>
 8000f80:	3802      	subs	r0, #2
 8000f82:	4463      	add	r3, ip
 8000f84:	1b9b      	subs	r3, r3, r6
 8000f86:	b289      	uxth	r1, r1
 8000f88:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f8c:	fb07 3316 	mls	r3, r7, r6, r3
 8000f90:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f94:	fb06 f30e 	mul.w	r3, r6, lr
 8000f98:	428b      	cmp	r3, r1
 8000f9a:	d908      	bls.n	8000fae <__udivmoddi4+0x28a>
 8000f9c:	eb1c 0101 	adds.w	r1, ip, r1
 8000fa0:	f106 38ff 	add.w	r8, r6, #4294967295
 8000fa4:	d216      	bcs.n	8000fd4 <__udivmoddi4+0x2b0>
 8000fa6:	428b      	cmp	r3, r1
 8000fa8:	d914      	bls.n	8000fd4 <__udivmoddi4+0x2b0>
 8000faa:	3e02      	subs	r6, #2
 8000fac:	4461      	add	r1, ip
 8000fae:	1ac9      	subs	r1, r1, r3
 8000fb0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000fb4:	e738      	b.n	8000e28 <__udivmoddi4+0x104>
 8000fb6:	462e      	mov	r6, r5
 8000fb8:	4628      	mov	r0, r5
 8000fba:	e705      	b.n	8000dc8 <__udivmoddi4+0xa4>
 8000fbc:	4606      	mov	r6, r0
 8000fbe:	e6e3      	b.n	8000d88 <__udivmoddi4+0x64>
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	e6f8      	b.n	8000db6 <__udivmoddi4+0x92>
 8000fc4:	454b      	cmp	r3, r9
 8000fc6:	d2a9      	bcs.n	8000f1c <__udivmoddi4+0x1f8>
 8000fc8:	ebb9 0802 	subs.w	r8, r9, r2
 8000fcc:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000fd0:	3801      	subs	r0, #1
 8000fd2:	e7a3      	b.n	8000f1c <__udivmoddi4+0x1f8>
 8000fd4:	4646      	mov	r6, r8
 8000fd6:	e7ea      	b.n	8000fae <__udivmoddi4+0x28a>
 8000fd8:	4620      	mov	r0, r4
 8000fda:	e794      	b.n	8000f06 <__udivmoddi4+0x1e2>
 8000fdc:	4640      	mov	r0, r8
 8000fde:	e7d1      	b.n	8000f84 <__udivmoddi4+0x260>
 8000fe0:	46d0      	mov	r8, sl
 8000fe2:	e77b      	b.n	8000edc <__udivmoddi4+0x1b8>
 8000fe4:	3b02      	subs	r3, #2
 8000fe6:	4461      	add	r1, ip
 8000fe8:	e732      	b.n	8000e50 <__udivmoddi4+0x12c>
 8000fea:	4630      	mov	r0, r6
 8000fec:	e709      	b.n	8000e02 <__udivmoddi4+0xde>
 8000fee:	4464      	add	r4, ip
 8000ff0:	3802      	subs	r0, #2
 8000ff2:	e742      	b.n	8000e7a <__udivmoddi4+0x156>

08000ff4 <__aeabi_idiv0>:
 8000ff4:	4770      	bx	lr
 8000ff6:	bf00      	nop

08000ff8 <deBounceInit>:
#include <stdio.h>
#include "stm32l4xx_hal.h"
#include "stm32l4xx_hal_gpio.h"

void deBounceInit(int16_t pin, char port, int8_t mode)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b088      	sub	sp, #32
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	4603      	mov	r3, r0
 8001000:	80fb      	strh	r3, [r7, #6]
 8001002:	460b      	mov	r3, r1
 8001004:	717b      	strb	r3, [r7, #5]
 8001006:	4613      	mov	r3, r2
 8001008:	713b      	strb	r3, [r7, #4]
	GPIO_InitTypeDef GPIO_InitStruct;
	/*Configure GPIO pin : */
	GPIO_InitStruct.Pin = GPIO_PIN_0;
 800100a:	2301      	movs	r3, #1
 800100c:	60fb      	str	r3, [r7, #12]
	switch(pin)
 800100e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001012:	2b0f      	cmp	r3, #15
 8001014:	d85a      	bhi.n	80010cc <deBounceInit+0xd4>
 8001016:	a201      	add	r2, pc, #4	; (adr r2, 800101c <deBounceInit+0x24>)
 8001018:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800101c:	0800105d 	.word	0x0800105d
 8001020:	08001063 	.word	0x08001063
 8001024:	08001069 	.word	0x08001069
 8001028:	0800106f 	.word	0x0800106f
 800102c:	08001075 	.word	0x08001075
 8001030:	0800107b 	.word	0x0800107b
 8001034:	08001081 	.word	0x08001081
 8001038:	08001087 	.word	0x08001087
 800103c:	0800108d 	.word	0x0800108d
 8001040:	08001095 	.word	0x08001095
 8001044:	0800109d 	.word	0x0800109d
 8001048:	080010a5 	.word	0x080010a5
 800104c:	080010ad 	.word	0x080010ad
 8001050:	080010b5 	.word	0x080010b5
 8001054:	080010bd 	.word	0x080010bd
 8001058:	080010c5 	.word	0x080010c5
	{
		case 0: GPIO_InitStruct.Pin = GPIO_PIN_0; break;
 800105c:	2301      	movs	r3, #1
 800105e:	60fb      	str	r3, [r7, #12]
 8001060:	e038      	b.n	80010d4 <deBounceInit+0xdc>
		case 1: GPIO_InitStruct.Pin = GPIO_PIN_1; break;
 8001062:	2302      	movs	r3, #2
 8001064:	60fb      	str	r3, [r7, #12]
 8001066:	e035      	b.n	80010d4 <deBounceInit+0xdc>
		case 2: GPIO_InitStruct.Pin = GPIO_PIN_2; break;
 8001068:	2304      	movs	r3, #4
 800106a:	60fb      	str	r3, [r7, #12]
 800106c:	e032      	b.n	80010d4 <deBounceInit+0xdc>
		case 3: GPIO_InitStruct.Pin = GPIO_PIN_3; break;
 800106e:	2308      	movs	r3, #8
 8001070:	60fb      	str	r3, [r7, #12]
 8001072:	e02f      	b.n	80010d4 <deBounceInit+0xdc>
		case 4: GPIO_InitStruct.Pin = GPIO_PIN_4; break;
 8001074:	2310      	movs	r3, #16
 8001076:	60fb      	str	r3, [r7, #12]
 8001078:	e02c      	b.n	80010d4 <deBounceInit+0xdc>
		case 5: GPIO_InitStruct.Pin = GPIO_PIN_5; break;
 800107a:	2320      	movs	r3, #32
 800107c:	60fb      	str	r3, [r7, #12]
 800107e:	e029      	b.n	80010d4 <deBounceInit+0xdc>
		case 6: GPIO_InitStruct.Pin = GPIO_PIN_6; break;
 8001080:	2340      	movs	r3, #64	; 0x40
 8001082:	60fb      	str	r3, [r7, #12]
 8001084:	e026      	b.n	80010d4 <deBounceInit+0xdc>
		case 7: GPIO_InitStruct.Pin = GPIO_PIN_7; break;
 8001086:	2380      	movs	r3, #128	; 0x80
 8001088:	60fb      	str	r3, [r7, #12]
 800108a:	e023      	b.n	80010d4 <deBounceInit+0xdc>
		case 8: GPIO_InitStruct.Pin = GPIO_PIN_8; break;
 800108c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001090:	60fb      	str	r3, [r7, #12]
 8001092:	e01f      	b.n	80010d4 <deBounceInit+0xdc>
		case 9: GPIO_InitStruct.Pin = GPIO_PIN_9; break;
 8001094:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001098:	60fb      	str	r3, [r7, #12]
 800109a:	e01b      	b.n	80010d4 <deBounceInit+0xdc>
		case 10: GPIO_InitStruct.Pin = GPIO_PIN_10; break;
 800109c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80010a0:	60fb      	str	r3, [r7, #12]
 80010a2:	e017      	b.n	80010d4 <deBounceInit+0xdc>
		case 11: GPIO_InitStruct.Pin = GPIO_PIN_11; break;
 80010a4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80010a8:	60fb      	str	r3, [r7, #12]
 80010aa:	e013      	b.n	80010d4 <deBounceInit+0xdc>
		case 12: GPIO_InitStruct.Pin = GPIO_PIN_12; break;
 80010ac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80010b0:	60fb      	str	r3, [r7, #12]
 80010b2:	e00f      	b.n	80010d4 <deBounceInit+0xdc>
		case 13: GPIO_InitStruct.Pin = GPIO_PIN_13; break;
 80010b4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80010b8:	60fb      	str	r3, [r7, #12]
 80010ba:	e00b      	b.n	80010d4 <deBounceInit+0xdc>
		case 14: GPIO_InitStruct.Pin = GPIO_PIN_14; break;
 80010bc:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80010c0:	60fb      	str	r3, [r7, #12]
 80010c2:	e007      	b.n	80010d4 <deBounceInit+0xdc>
		case 15: GPIO_InitStruct.Pin = GPIO_PIN_15; break;
 80010c4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80010c8:	60fb      	str	r3, [r7, #12]
 80010ca:	e003      	b.n	80010d4 <deBounceInit+0xdc>
		default:
			printf( "bad gpio pin number in init\n\r");
 80010cc:	4821      	ldr	r0, [pc, #132]	; (8001154 <deBounceInit+0x15c>)
 80010ce:	f005 fbb7 	bl	8006840 <iprintf>
			break;
 80010d2:	bf00      	nop
	}
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010d4:	2300      	movs	r3, #0
 80010d6:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80010d8:	2302      	movs	r3, #2
 80010da:	617b      	str	r3, [r7, #20]
	switch (mode)
 80010dc:	f997 3004 	ldrsb.w	r3, [r7, #4]
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d002      	beq.n	80010ea <deBounceInit+0xf2>
 80010e4:	2b01      	cmp	r3, #1
 80010e6:	d003      	beq.n	80010f0 <deBounceInit+0xf8>
 80010e8:	e005      	b.n	80010f6 <deBounceInit+0xfe>
	{
		case 0: GPIO_InitStruct.Pull = GPIO_PULLDOWN; break;
 80010ea:	2302      	movs	r3, #2
 80010ec:	617b      	str	r3, [r7, #20]
 80010ee:	e002      	b.n	80010f6 <deBounceInit+0xfe>
		case 1: GPIO_InitStruct.Pull = GPIO_PULLUP; break;
 80010f0:	2301      	movs	r3, #1
 80010f2:	617b      	str	r3, [r7, #20]
 80010f4:	bf00      	nop
	}
	switch (port)
 80010f6:	797b      	ldrb	r3, [r7, #5]
 80010f8:	2b43      	cmp	r3, #67	; 0x43
 80010fa:	d015      	beq.n	8001128 <deBounceInit+0x130>
 80010fc:	2b43      	cmp	r3, #67	; 0x43
 80010fe:	dc1a      	bgt.n	8001136 <deBounceInit+0x13e>
 8001100:	2b41      	cmp	r3, #65	; 0x41
 8001102:	d002      	beq.n	800110a <deBounceInit+0x112>
 8001104:	2b42      	cmp	r3, #66	; 0x42
 8001106:	d008      	beq.n	800111a <deBounceInit+0x122>
 8001108:	e015      	b.n	8001136 <deBounceInit+0x13e>
	{
		case 'A': HAL_GPIO_Init(GPIOA, &GPIO_InitStruct); break;
 800110a:	f107 030c 	add.w	r3, r7, #12
 800110e:	4619      	mov	r1, r3
 8001110:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001114:	f001 fb78 	bl	8002808 <HAL_GPIO_Init>
 8001118:	e011      	b.n	800113e <deBounceInit+0x146>
		case 'B': HAL_GPIO_Init(GPIOB, &GPIO_InitStruct); break;
 800111a:	f107 030c 	add.w	r3, r7, #12
 800111e:	4619      	mov	r1, r3
 8001120:	480d      	ldr	r0, [pc, #52]	; (8001158 <deBounceInit+0x160>)
 8001122:	f001 fb71 	bl	8002808 <HAL_GPIO_Init>
 8001126:	e00a      	b.n	800113e <deBounceInit+0x146>
		case 'C': HAL_GPIO_Init(GPIOC, &GPIO_InitStruct); break;
 8001128:	f107 030c 	add.w	r3, r7, #12
 800112c:	4619      	mov	r1, r3
 800112e:	480b      	ldr	r0, [pc, #44]	; (800115c <deBounceInit+0x164>)
 8001130:	f001 fb6a 	bl	8002808 <HAL_GPIO_Init>
 8001134:	e003      	b.n	800113e <deBounceInit+0x146>
		default:
			printf( "bad gpio port number\n\r");
 8001136:	480a      	ldr	r0, [pc, #40]	; (8001160 <deBounceInit+0x168>)
 8001138:	f005 fb82 	bl	8006840 <iprintf>
			break;
 800113c:	bf00      	nop
	}
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800113e:	f107 030c 	add.w	r3, r7, #12
 8001142:	4619      	mov	r1, r3
 8001144:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001148:	f001 fb5e 	bl	8002808 <HAL_GPIO_Init>
}
 800114c:	bf00      	nop
 800114e:	3720      	adds	r7, #32
 8001150:	46bd      	mov	sp, r7
 8001152:	bd80      	pop	{r7, pc}
 8001154:	0800b0c0 	.word	0x0800b0c0
 8001158:	48000400 	.word	0x48000400
 800115c:	48000800 	.word	0x48000800
 8001160:	0800b0e0 	.word	0x0800b0e0

08001164 <deBounceReadPin>:

int8_t deBounceReadPin(int16_t pin, char port, int8_t stableInterval)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	b08a      	sub	sp, #40	; 0x28
 8001168:	af00      	add	r7, sp, #0
 800116a:	4603      	mov	r3, r0
 800116c:	80fb      	strh	r3, [r7, #6]
 800116e:	460b      	mov	r3, r1
 8001170:	717b      	strb	r3, [r7, #5]
 8001172:	4613      	mov	r3, r2
 8001174:	713b      	strb	r3, [r7, #4]
	GPIO_PinState pinState = GPIO_PIN_RESET;	//remember variables should be initialized
 8001176:	2300      	movs	r3, #0
 8001178:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	int8_t pinStateWeAreLookingFor = 0;
 800117c:	2300      	movs	r3, #0
 800117e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	int32_t msTimeStamp = HAL_GetTick();		//get a timeStamp in ms
 8001182:	f001 fa2b 	bl	80025dc <HAL_GetTick>
 8001186:	4603      	mov	r3, r0
 8001188:	623b      	str	r3, [r7, #32]

	GPIO_InitTypeDef GPIO_InitStruct;
	GPIO_InitStruct.Pin = GPIO_PIN_0;
 800118a:	2301      	movs	r3, #1
 800118c:	60fb      	str	r3, [r7, #12]
		/*Configure GPIO pin : */
		switch(pin)
 800118e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001192:	2b0f      	cmp	r3, #15
 8001194:	d85a      	bhi.n	800124c <deBounceReadPin+0xe8>
 8001196:	a201      	add	r2, pc, #4	; (adr r2, 800119c <deBounceReadPin+0x38>)
 8001198:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800119c:	080011dd 	.word	0x080011dd
 80011a0:	080011e3 	.word	0x080011e3
 80011a4:	080011e9 	.word	0x080011e9
 80011a8:	080011ef 	.word	0x080011ef
 80011ac:	080011f5 	.word	0x080011f5
 80011b0:	080011fb 	.word	0x080011fb
 80011b4:	08001201 	.word	0x08001201
 80011b8:	08001207 	.word	0x08001207
 80011bc:	0800120d 	.word	0x0800120d
 80011c0:	08001215 	.word	0x08001215
 80011c4:	0800121d 	.word	0x0800121d
 80011c8:	08001225 	.word	0x08001225
 80011cc:	0800122d 	.word	0x0800122d
 80011d0:	08001235 	.word	0x08001235
 80011d4:	0800123d 	.word	0x0800123d
 80011d8:	08001245 	.word	0x08001245
		{
			case 0: GPIO_InitStruct.Pin = GPIO_PIN_0; break;
 80011dc:	2301      	movs	r3, #1
 80011de:	60fb      	str	r3, [r7, #12]
 80011e0:	e038      	b.n	8001254 <deBounceReadPin+0xf0>
			case 1: GPIO_InitStruct.Pin = GPIO_PIN_1; break;
 80011e2:	2302      	movs	r3, #2
 80011e4:	60fb      	str	r3, [r7, #12]
 80011e6:	e035      	b.n	8001254 <deBounceReadPin+0xf0>
			case 2: GPIO_InitStruct.Pin = GPIO_PIN_2; break;
 80011e8:	2304      	movs	r3, #4
 80011ea:	60fb      	str	r3, [r7, #12]
 80011ec:	e032      	b.n	8001254 <deBounceReadPin+0xf0>
			case 3: GPIO_InitStruct.Pin = GPIO_PIN_3; break;
 80011ee:	2308      	movs	r3, #8
 80011f0:	60fb      	str	r3, [r7, #12]
 80011f2:	e02f      	b.n	8001254 <deBounceReadPin+0xf0>
			case 4: GPIO_InitStruct.Pin = GPIO_PIN_4; break;
 80011f4:	2310      	movs	r3, #16
 80011f6:	60fb      	str	r3, [r7, #12]
 80011f8:	e02c      	b.n	8001254 <deBounceReadPin+0xf0>
			case 5: GPIO_InitStruct.Pin = GPIO_PIN_5; break;
 80011fa:	2320      	movs	r3, #32
 80011fc:	60fb      	str	r3, [r7, #12]
 80011fe:	e029      	b.n	8001254 <deBounceReadPin+0xf0>
			case 6: GPIO_InitStruct.Pin = GPIO_PIN_6; break;
 8001200:	2340      	movs	r3, #64	; 0x40
 8001202:	60fb      	str	r3, [r7, #12]
 8001204:	e026      	b.n	8001254 <deBounceReadPin+0xf0>
			case 7: GPIO_InitStruct.Pin = GPIO_PIN_7; break;
 8001206:	2380      	movs	r3, #128	; 0x80
 8001208:	60fb      	str	r3, [r7, #12]
 800120a:	e023      	b.n	8001254 <deBounceReadPin+0xf0>
			case 8: GPIO_InitStruct.Pin = GPIO_PIN_8; break;
 800120c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001210:	60fb      	str	r3, [r7, #12]
 8001212:	e01f      	b.n	8001254 <deBounceReadPin+0xf0>
			case 9: GPIO_InitStruct.Pin = GPIO_PIN_9; break;
 8001214:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001218:	60fb      	str	r3, [r7, #12]
 800121a:	e01b      	b.n	8001254 <deBounceReadPin+0xf0>
			case 10: GPIO_InitStruct.Pin = GPIO_PIN_10; break;
 800121c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001220:	60fb      	str	r3, [r7, #12]
 8001222:	e017      	b.n	8001254 <deBounceReadPin+0xf0>
			case 11: GPIO_InitStruct.Pin = GPIO_PIN_11; break;
 8001224:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001228:	60fb      	str	r3, [r7, #12]
 800122a:	e013      	b.n	8001254 <deBounceReadPin+0xf0>
			case 12: GPIO_InitStruct.Pin = GPIO_PIN_12; break;
 800122c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001230:	60fb      	str	r3, [r7, #12]
 8001232:	e00f      	b.n	8001254 <deBounceReadPin+0xf0>
			case 13: GPIO_InitStruct.Pin = GPIO_PIN_13; break;
 8001234:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001238:	60fb      	str	r3, [r7, #12]
 800123a:	e00b      	b.n	8001254 <deBounceReadPin+0xf0>
			case 14: GPIO_InitStruct.Pin = GPIO_PIN_14; break;
 800123c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001240:	60fb      	str	r3, [r7, #12]
 8001242:	e007      	b.n	8001254 <deBounceReadPin+0xf0>
			case 15: GPIO_InitStruct.Pin = GPIO_PIN_15; break;
 8001244:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001248:	60fb      	str	r3, [r7, #12]
 800124a:	e003      	b.n	8001254 <deBounceReadPin+0xf0>
			default:
				printf( "bad gpio pin number in read pin\n\r");
 800124c:	4847      	ldr	r0, [pc, #284]	; (800136c <deBounceReadPin+0x208>)
 800124e:	f005 faf7 	bl	8006840 <iprintf>
				break;
 8001252:	bf00      	nop
		}


	/* let's do our first read of the pin
	 * and to do that we need to incorporate the port we're going to read*/
	pinState = 0 ;
 8001254:	2300      	movs	r3, #0
 8001256:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	switch (port)
 800125a:	797b      	ldrb	r3, [r7, #5]
 800125c:	2b43      	cmp	r3, #67	; 0x43
 800125e:	d01b      	beq.n	8001298 <deBounceReadPin+0x134>
 8001260:	2b43      	cmp	r3, #67	; 0x43
 8001262:	dc23      	bgt.n	80012ac <deBounceReadPin+0x148>
 8001264:	2b41      	cmp	r3, #65	; 0x41
 8001266:	d002      	beq.n	800126e <deBounceReadPin+0x10a>
 8001268:	2b42      	cmp	r3, #66	; 0x42
 800126a:	d00b      	beq.n	8001284 <deBounceReadPin+0x120>
 800126c:	e01e      	b.n	80012ac <deBounceReadPin+0x148>
	{
		case 'A': pinState = HAL_GPIO_ReadPin(GPIOA, GPIO_InitStruct.Pin); break;
 800126e:	68fb      	ldr	r3, [r7, #12]
 8001270:	b29b      	uxth	r3, r3
 8001272:	4619      	mov	r1, r3
 8001274:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001278:	f001 fc30 	bl	8002adc <HAL_GPIO_ReadPin>
 800127c:	4603      	mov	r3, r0
 800127e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001282:	e017      	b.n	80012b4 <deBounceReadPin+0x150>
		case 'B': pinState = HAL_GPIO_ReadPin(GPIOB, GPIO_InitStruct.Pin); break;
 8001284:	68fb      	ldr	r3, [r7, #12]
 8001286:	b29b      	uxth	r3, r3
 8001288:	4619      	mov	r1, r3
 800128a:	4839      	ldr	r0, [pc, #228]	; (8001370 <deBounceReadPin+0x20c>)
 800128c:	f001 fc26 	bl	8002adc <HAL_GPIO_ReadPin>
 8001290:	4603      	mov	r3, r0
 8001292:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001296:	e00d      	b.n	80012b4 <deBounceReadPin+0x150>
		case 'C': pinState = HAL_GPIO_ReadPin(GPIOC, GPIO_InitStruct.Pin); break;
 8001298:	68fb      	ldr	r3, [r7, #12]
 800129a:	b29b      	uxth	r3, r3
 800129c:	4619      	mov	r1, r3
 800129e:	4835      	ldr	r0, [pc, #212]	; (8001374 <deBounceReadPin+0x210>)
 80012a0:	f001 fc1c 	bl	8002adc <HAL_GPIO_ReadPin>
 80012a4:	4603      	mov	r3, r0
 80012a6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80012aa:	e003      	b.n	80012b4 <deBounceReadPin+0x150>
		default:
			printf( "bad gpio port name in read pin\n\r");
 80012ac:	4832      	ldr	r0, [pc, #200]	; (8001378 <deBounceReadPin+0x214>)
 80012ae:	f005 fac7 	bl	8006840 <iprintf>
			break;
 80012b2:	bf00      	nop
	}
	/* is the GPIO pin high or low 	 */
	if(pinState == GPIO_PIN_RESET )		// if low we're looking for more 0's
 80012b4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d103      	bne.n	80012c4 <deBounceReadPin+0x160>
	{
		pinStateWeAreLookingFor = 0;
 80012bc:	2300      	movs	r3, #0
 80012be:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80012c2:	e043      	b.n	800134c <deBounceReadPin+0x1e8>
	}
	else
	{//we're looking for more 1's
		pinStateWeAreLookingFor = 1;
 80012c4:	2301      	movs	r3, #1
 80012c6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	}

	/* now, let's read the pin again until x stable ms have elapsed */
	while (HAL_GetTick() < (msTimeStamp + stableInterval))
 80012ca:	e03f      	b.n	800134c <deBounceReadPin+0x1e8>
	{

		switch (port)
 80012cc:	797b      	ldrb	r3, [r7, #5]
 80012ce:	2b43      	cmp	r3, #67	; 0x43
 80012d0:	d01b      	beq.n	800130a <deBounceReadPin+0x1a6>
 80012d2:	2b43      	cmp	r3, #67	; 0x43
 80012d4:	dc23      	bgt.n	800131e <deBounceReadPin+0x1ba>
 80012d6:	2b41      	cmp	r3, #65	; 0x41
 80012d8:	d002      	beq.n	80012e0 <deBounceReadPin+0x17c>
 80012da:	2b42      	cmp	r3, #66	; 0x42
 80012dc:	d00b      	beq.n	80012f6 <deBounceReadPin+0x192>
 80012de:	e01e      	b.n	800131e <deBounceReadPin+0x1ba>
		{
			case 'A': pinState = HAL_GPIO_ReadPin(GPIOA, GPIO_InitStruct.Pin); break;
 80012e0:	68fb      	ldr	r3, [r7, #12]
 80012e2:	b29b      	uxth	r3, r3
 80012e4:	4619      	mov	r1, r3
 80012e6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80012ea:	f001 fbf7 	bl	8002adc <HAL_GPIO_ReadPin>
 80012ee:	4603      	mov	r3, r0
 80012f0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80012f4:	e017      	b.n	8001326 <deBounceReadPin+0x1c2>
			case 'B': pinState = HAL_GPIO_ReadPin(GPIOB, GPIO_InitStruct.Pin); break;
 80012f6:	68fb      	ldr	r3, [r7, #12]
 80012f8:	b29b      	uxth	r3, r3
 80012fa:	4619      	mov	r1, r3
 80012fc:	481c      	ldr	r0, [pc, #112]	; (8001370 <deBounceReadPin+0x20c>)
 80012fe:	f001 fbed 	bl	8002adc <HAL_GPIO_ReadPin>
 8001302:	4603      	mov	r3, r0
 8001304:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001308:	e00d      	b.n	8001326 <deBounceReadPin+0x1c2>
			case 'C': pinState = HAL_GPIO_ReadPin(GPIOC, GPIO_InitStruct.Pin); break;
 800130a:	68fb      	ldr	r3, [r7, #12]
 800130c:	b29b      	uxth	r3, r3
 800130e:	4619      	mov	r1, r3
 8001310:	4818      	ldr	r0, [pc, #96]	; (8001374 <deBounceReadPin+0x210>)
 8001312:	f001 fbe3 	bl	8002adc <HAL_GPIO_ReadPin>
 8001316:	4603      	mov	r3, r0
 8001318:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800131c:	e003      	b.n	8001326 <deBounceReadPin+0x1c2>
			default:
				printf( "bad gpio port letter in read pin\n\r");
 800131e:	4817      	ldr	r0, [pc, #92]	; (800137c <deBounceReadPin+0x218>)
 8001320:	f005 fa8e 	bl	8006840 <iprintf>
				break;
 8001324:	bf00      	nop
		}
		if(pinState != pinStateWeAreLookingFor)
 8001326:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800132a:	f997 3026 	ldrsb.w	r3, [r7, #38]	; 0x26
 800132e:	429a      	cmp	r2, r3
 8001330:	d00c      	beq.n	800134c <deBounceReadPin+0x1e8>
		{
			pinStateWeAreLookingFor = !pinStateWeAreLookingFor;
 8001332:	f997 3026 	ldrsb.w	r3, [r7, #38]	; 0x26
 8001336:	2b00      	cmp	r3, #0
 8001338:	bf0c      	ite	eq
 800133a:	2301      	moveq	r3, #1
 800133c:	2300      	movne	r3, #0
 800133e:	b2db      	uxtb	r3, r3
 8001340:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
			/* reset the timeStamp as we've had a change in state			 */
			msTimeStamp = HAL_GetTick();
 8001344:	f001 f94a 	bl	80025dc <HAL_GetTick>
 8001348:	4603      	mov	r3, r0
 800134a:	623b      	str	r3, [r7, #32]
	while (HAL_GetTick() < (msTimeStamp + stableInterval))
 800134c:	f001 f946 	bl	80025dc <HAL_GetTick>
 8001350:	4601      	mov	r1, r0
 8001352:	f997 2004 	ldrsb.w	r2, [r7, #4]
 8001356:	6a3b      	ldr	r3, [r7, #32]
 8001358:	4413      	add	r3, r2
 800135a:	4299      	cmp	r1, r3
 800135c:	d3b6      	bcc.n	80012cc <deBounceReadPin+0x168>
		}
	}
	return (pinStateWeAreLookingFor);
 800135e:	f997 3026 	ldrsb.w	r3, [r7, #38]	; 0x26
}
 8001362:	4618      	mov	r0, r3
 8001364:	3728      	adds	r7, #40	; 0x28
 8001366:	46bd      	mov	sp, r7
 8001368:	bd80      	pop	{r7, pc}
 800136a:	bf00      	nop
 800136c:	0800b0f8 	.word	0x0800b0f8
 8001370:	48000400 	.word	0x48000400
 8001374:	48000800 	.word	0x48000800
 8001378:	0800b11c 	.word	0x0800b11c
 800137c:	0800b140 	.word	0x0800b140

08001380 <pushButtonInit>:
void pulsePWM(TIM_HandleTypeDef *htim1, int32_t pulseTime){
	HAL_TIMEx_PWMN_Start(htim1, TIM_CHANNEL_1);
	HAL_Delay(pulseTime);
	HAL_TIMEx_PWMN_Stop(htim1, TIM_CHANNEL_1);
}
void pushButtonInit(){
 8001380:	b580      	push	{r7, lr}
 8001382:	af00      	add	r7, sp, #0
	deBounceInit(chequingPbPin, 'A', 1);
 8001384:	2300      	movs	r3, #0
 8001386:	2201      	movs	r2, #1
 8001388:	2141      	movs	r1, #65	; 0x41
 800138a:	4618      	mov	r0, r3
 800138c:	f7ff fe34 	bl	8000ff8 <deBounceInit>
	deBounceInit(savingsPbPin,'A',1);
 8001390:	2301      	movs	r3, #1
 8001392:	2201      	movs	r2, #1
 8001394:	2141      	movs	r1, #65	; 0x41
 8001396:	4618      	mov	r0, r3
 8001398:	f7ff fe2e 	bl	8000ff8 <deBounceInit>
	deBounceInit(okPbPin, 'A',1);
 800139c:	2303      	movs	r3, #3
 800139e:	2201      	movs	r2, #1
 80013a0:	2141      	movs	r1, #65	; 0x41
 80013a2:	4618      	mov	r0, r3
 80013a4:	f7ff fe28 	bl	8000ff8 <deBounceInit>
	deBounceInit(cancelPbPin,'A',1);
 80013a8:	2304      	movs	r3, #4
 80013aa:	2201      	movs	r2, #1
 80013ac:	2141      	movs	r1, #65	; 0x41
 80013ae:	4618      	mov	r0, r3
 80013b0:	f7ff fe22 	bl	8000ff8 <deBounceInit>
}
 80013b4:	bf00      	nop
 80013b6:	bd80      	pop	{r7, pc}

080013b8 <displayWelcome>:
void displayWelcome(void) {
 80013b8:	b580      	push	{r7, lr}
 80013ba:	b086      	sub	sp, #24
 80013bc:	af02      	add	r7, sp, #8
	char stringBuffer[16] = { 0 };
 80013be:	2300      	movs	r3, #0
 80013c0:	603b      	str	r3, [r7, #0]
 80013c2:	1d3b      	adds	r3, r7, #4
 80013c4:	2200      	movs	r2, #0
 80013c6:	601a      	str	r2, [r3, #0]
 80013c8:	605a      	str	r2, [r3, #4]
 80013ca:	609a      	str	r2, [r3, #8]
	ssd1331_clear_screen(BLACK);
 80013cc:	2000      	movs	r0, #0
 80013ce:	f000 fd6a 	bl	8001ea6 <ssd1331_clear_screen>
	snprintf(stringBuffer, 16, "Welcome ");
 80013d2:	463b      	mov	r3, r7
 80013d4:	4a08      	ldr	r2, [pc, #32]	; (80013f8 <displayWelcome+0x40>)
 80013d6:	2110      	movs	r1, #16
 80013d8:	4618      	mov	r0, r3
 80013da:	f005 fadd 	bl	8006998 <sniprintf>
	ssd1331_display_string(0, 0, stringBuffer, FONT_1206, WHITE);
 80013de:	463a      	mov	r2, r7
 80013e0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80013e4:	9300      	str	r3, [sp, #0]
 80013e6:	230c      	movs	r3, #12
 80013e8:	2100      	movs	r1, #0
 80013ea:	2000      	movs	r0, #0
 80013ec:	f000 fd12 	bl	8001e14 <ssd1331_display_string>
}
 80013f0:	bf00      	nop
 80013f2:	3710      	adds	r7, #16
 80013f4:	46bd      	mov	sp, r7
 80013f6:	bd80      	pop	{r7, pc}
 80013f8:	0800b170 	.word	0x0800b170

080013fc <displayAmount>:
void displayAmount(float amount){
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b088      	sub	sp, #32
 8001400:	af02      	add	r7, sp, #8
 8001402:	ed87 0a01 	vstr	s0, [r7, #4]
	char stringBuffer[16];
	ssd1331_clear_screen(BLACK);
 8001406:	2000      	movs	r0, #0
 8001408:	f000 fd4d 	bl	8001ea6 <ssd1331_clear_screen>
	snprintf(stringBuffer,16, "$%.2f", amount);
 800140c:	6878      	ldr	r0, [r7, #4]
 800140e:	f7ff f89b 	bl	8000548 <__aeabi_f2d>
 8001412:	4602      	mov	r2, r0
 8001414:	460b      	mov	r3, r1
 8001416:	f107 0008 	add.w	r0, r7, #8
 800141a:	e9cd 2300 	strd	r2, r3, [sp]
 800141e:	4a09      	ldr	r2, [pc, #36]	; (8001444 <displayAmount+0x48>)
 8001420:	2110      	movs	r1, #16
 8001422:	f005 fab9 	bl	8006998 <sniprintf>
	ssd1331_display_string(0,0, stringBuffer, FONT_1206, WHITE);
 8001426:	f107 0208 	add.w	r2, r7, #8
 800142a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800142e:	9300      	str	r3, [sp, #0]
 8001430:	230c      	movs	r3, #12
 8001432:	2100      	movs	r1, #0
 8001434:	2000      	movs	r0, #0
 8001436:	f000 fced 	bl	8001e14 <ssd1331_display_string>
}
 800143a:	bf00      	nop
 800143c:	3718      	adds	r7, #24
 800143e:	46bd      	mov	sp, r7
 8001440:	bd80      	pop	{r7, pc}
 8001442:	bf00      	nop
 8001444:	0800b17c 	.word	0x0800b17c

08001448 <displayChequingOrSaving>:
void displayChequingOrSaving(){
 8001448:	b580      	push	{r7, lr}
 800144a:	b08a      	sub	sp, #40	; 0x28
 800144c:	af02      	add	r7, sp, #8
  char stringBuffer[32];
  ssd1331_clear_screen(BLACK);
 800144e:	2000      	movs	r0, #0
 8001450:	f000 fd29 	bl	8001ea6 <ssd1331_clear_screen>
  snprintf(stringBuffer,32,"Chequing Or Saving\r\n");
 8001454:	463b      	mov	r3, r7
 8001456:	4a09      	ldr	r2, [pc, #36]	; (800147c <displayChequingOrSaving+0x34>)
 8001458:	2120      	movs	r1, #32
 800145a:	4618      	mov	r0, r3
 800145c:	f005 fa9c 	bl	8006998 <sniprintf>
  ssd1331_display_string(0,0,stringBuffer,FONT_1206,WHITE);
 8001460:	463a      	mov	r2, r7
 8001462:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001466:	9300      	str	r3, [sp, #0]
 8001468:	230c      	movs	r3, #12
 800146a:	2100      	movs	r1, #0
 800146c:	2000      	movs	r0, #0
 800146e:	f000 fcd1 	bl	8001e14 <ssd1331_display_string>
}
 8001472:	bf00      	nop
 8001474:	3720      	adds	r7, #32
 8001476:	46bd      	mov	sp, r7
 8001478:	bd80      	pop	{r7, pc}
 800147a:	bf00      	nop
 800147c:	0800b184 	.word	0x0800b184

08001480 <displayTransactionCancel>:
void displayTransactionCancel(){
 8001480:	b580      	push	{r7, lr}
 8001482:	b08a      	sub	sp, #40	; 0x28
 8001484:	af02      	add	r7, sp, #8
  char stringBuffer[32];
  ssd1331_clear_screen(BLACK);
 8001486:	2000      	movs	r0, #0
 8001488:	f000 fd0d 	bl	8001ea6 <ssd1331_clear_screen>
  snprintf(stringBuffer,32,"Transaction Cancelled ");
 800148c:	463b      	mov	r3, r7
 800148e:	4a09      	ldr	r2, [pc, #36]	; (80014b4 <displayTransactionCancel+0x34>)
 8001490:	2120      	movs	r1, #32
 8001492:	4618      	mov	r0, r3
 8001494:	f005 fa80 	bl	8006998 <sniprintf>
  ssd1331_display_string(0,0,stringBuffer,FONT_1206,WHITE);
 8001498:	463a      	mov	r2, r7
 800149a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800149e:	9300      	str	r3, [sp, #0]
 80014a0:	230c      	movs	r3, #12
 80014a2:	2100      	movs	r1, #0
 80014a4:	2000      	movs	r0, #0
 80014a6:	f000 fcb5 	bl	8001e14 <ssd1331_display_string>
}
 80014aa:	bf00      	nop
 80014ac:	3720      	adds	r7, #32
 80014ae:	46bd      	mov	sp, r7
 80014b0:	bd80      	pop	{r7, pc}
 80014b2:	bf00      	nop
 80014b4:	0800b19c 	.word	0x0800b19c

080014b8 <displayEnterPin>:
void displayEnterPin(){
 80014b8:	b580      	push	{r7, lr}
 80014ba:	b086      	sub	sp, #24
 80014bc:	af02      	add	r7, sp, #8
  char stringBuffer[16];
  ssd1331_clear_screen(BLACK);
 80014be:	2000      	movs	r0, #0
 80014c0:	f000 fcf1 	bl	8001ea6 <ssd1331_clear_screen>
  snprintf(stringBuffer, 16,"Enter PIN....\r\n");
 80014c4:	463b      	mov	r3, r7
 80014c6:	4a09      	ldr	r2, [pc, #36]	; (80014ec <displayEnterPin+0x34>)
 80014c8:	2110      	movs	r1, #16
 80014ca:	4618      	mov	r0, r3
 80014cc:	f005 fa64 	bl	8006998 <sniprintf>
  ssd1331_display_string(0,0,stringBuffer,FONT_1206,WHITE);
 80014d0:	463a      	mov	r2, r7
 80014d2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80014d6:	9300      	str	r3, [sp, #0]
 80014d8:	230c      	movs	r3, #12
 80014da:	2100      	movs	r1, #0
 80014dc:	2000      	movs	r0, #0
 80014de:	f000 fc99 	bl	8001e14 <ssd1331_display_string>
}
 80014e2:	bf00      	nop
 80014e4:	3710      	adds	r7, #16
 80014e6:	46bd      	mov	sp, r7
 80014e8:	bd80      	pop	{r7, pc}
 80014ea:	bf00      	nop
 80014ec:	0800b1b4 	.word	0x0800b1b4

080014f0 <checkIfAmountRecord>:
float checkIfAmountRecord(){
 80014f0:	b580      	push	{r7, lr}
 80014f2:	b082      	sub	sp, #8
 80014f4:	af00      	add	r7, sp, #0
	float debitAmount = 0;
 80014f6:	f04f 0300 	mov.w	r3, #0
 80014fa:	603b      	str	r3, [r7, #0]
	int16_t result = 0;
 80014fc:	2300      	movs	r3, #0
 80014fe:	80fb      	strh	r3, [r7, #6]
	printf("Waiting for Debit Amount to be recieved on Serial Port\r\n");
 8001500:	480c      	ldr	r0, [pc, #48]	; (8001534 <checkIfAmountRecord+0x44>)
 8001502:	f005 fa23 	bl	800694c <puts>
	result = scanf("%f", &debitAmount);
 8001506:	463b      	mov	r3, r7
 8001508:	4619      	mov	r1, r3
 800150a:	480b      	ldr	r0, [pc, #44]	; (8001538 <checkIfAmountRecord+0x48>)
 800150c:	f005 fa26 	bl	800695c <iscanf>
 8001510:	4603      	mov	r3, r0
 8001512:	80fb      	strh	r3, [r7, #6]
	if(result == 0){
 8001514:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001518:	2b00      	cmp	r3, #0
 800151a:	d102      	bne.n	8001522 <checkIfAmountRecord+0x32>
		return 0.0f;
 800151c:	f04f 0300 	mov.w	r3, #0
 8001520:	e000      	b.n	8001524 <checkIfAmountRecord+0x34>
	}
	return debitAmount;
 8001522:	683b      	ldr	r3, [r7, #0]
}
 8001524:	ee07 3a90 	vmov	s15, r3
 8001528:	eeb0 0a67 	vmov.f32	s0, s15
 800152c:	3708      	adds	r7, #8
 800152e:	46bd      	mov	sp, r7
 8001530:	bd80      	pop	{r7, pc}
 8001532:	bf00      	nop
 8001534:	0800b1c4 	.word	0x0800b1c4
 8001538:	0800b1fc 	.word	0x0800b1fc

0800153c <checkOkOrCancel>:
enum pushButton checkOkOrCancel(){
 800153c:	b580      	push	{r7, lr}
 800153e:	af00      	add	r7, sp, #0
	if(deBounceReadPin(cancelPbPin, 'A', 10) == 0){
 8001540:	2304      	movs	r3, #4
 8001542:	220a      	movs	r2, #10
 8001544:	2141      	movs	r1, #65	; 0x41
 8001546:	4618      	mov	r0, r3
 8001548:	f7ff fe0c 	bl	8001164 <deBounceReadPin>
 800154c:	4603      	mov	r3, r0
 800154e:	2b00      	cmp	r3, #0
 8001550:	d101      	bne.n	8001556 <checkOkOrCancel+0x1a>
		return cancel;
 8001552:	2304      	movs	r3, #4
 8001554:	e00b      	b.n	800156e <checkOkOrCancel+0x32>
	}else if(deBounceReadPin(okPbPin,'A',10) == 0){
 8001556:	2303      	movs	r3, #3
 8001558:	220a      	movs	r2, #10
 800155a:	2141      	movs	r1, #65	; 0x41
 800155c:	4618      	mov	r0, r3
 800155e:	f7ff fe01 	bl	8001164 <deBounceReadPin>
 8001562:	4603      	mov	r3, r0
 8001564:	2b00      	cmp	r3, #0
 8001566:	d101      	bne.n	800156c <checkOkOrCancel+0x30>
		return ok;
 8001568:	2303      	movs	r3, #3
 800156a:	e000      	b.n	800156e <checkOkOrCancel+0x32>
	}
	return none;
 800156c:	2300      	movs	r3, #0
}
 800156e:	4618      	mov	r0, r3
 8001570:	bd80      	pop	{r7, pc}

08001572 <BankResponse>:
enum bankResponse BankResponse(uint pin){
 8001572:	b480      	push	{r7}
 8001574:	b083      	sub	sp, #12
 8001576:	af00      	add	r7, sp, #0
 8001578:	6078      	str	r0, [r7, #4]
  if(pin == 1234){
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	f240 42d2 	movw	r2, #1234	; 0x4d2
 8001580:	4293      	cmp	r3, r2
 8001582:	d101      	bne.n	8001588 <BankResponse+0x16>
    return confirm;
 8001584:	2301      	movs	r3, #1
 8001586:	e000      	b.n	800158a <BankResponse+0x18>
  }else{
    return denied;
 8001588:	2300      	movs	r3, #0
  }
}
 800158a:	4618      	mov	r0, r3
 800158c:	370c      	adds	r7, #12
 800158e:	46bd      	mov	sp, r7
 8001590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001594:	4770      	bx	lr
	...

08001598 <printReciet>:
void printReciet(float amount){
 8001598:	b580      	push	{r7, lr}
 800159a:	b082      	sub	sp, #8
 800159c:	af00      	add	r7, sp, #0
 800159e:	ed87 0a01 	vstr	s0, [r7, #4]
	printf("\n\n\n");
 80015a2:	4816      	ldr	r0, [pc, #88]	; (80015fc <printReciet+0x64>)
 80015a4:	f005 f9d2 	bl	800694c <puts>
	printf("***********************\r\n");
 80015a8:	4815      	ldr	r0, [pc, #84]	; (8001600 <printReciet+0x68>)
 80015aa:	f005 f9cf 	bl	800694c <puts>
	printf("Shopping Center\r\n");
 80015ae:	4815      	ldr	r0, [pc, #84]	; (8001604 <printReciet+0x6c>)
 80015b0:	f005 f9cc 	bl	800694c <puts>
	printf("***********************\r\n");
 80015b4:	4812      	ldr	r0, [pc, #72]	; (8001600 <printReciet+0x68>)
 80015b6:	f005 f9c9 	bl	800694c <puts>
	printf("Date: 2023-04-01\r\r TIME: 00:00:00\r\n");
 80015ba:	4813      	ldr	r0, [pc, #76]	; (8001608 <printReciet+0x70>)
 80015bc:	f005 f9c6 	bl	800694c <puts>
	printf("TOTAL CAD $%f \r\n",amount);
 80015c0:	6878      	ldr	r0, [r7, #4]
 80015c2:	f7fe ffc1 	bl	8000548 <__aeabi_f2d>
 80015c6:	4602      	mov	r2, r0
 80015c8:	460b      	mov	r3, r1
 80015ca:	4810      	ldr	r0, [pc, #64]	; (800160c <printReciet+0x74>)
 80015cc:	f005 f938 	bl	8006840 <iprintf>
	printf("Approved - Thank You\r\n");
 80015d0:	480f      	ldr	r0, [pc, #60]	; (8001610 <printReciet+0x78>)
 80015d2:	f005 f9bb 	bl	800694c <puts>
	printf("NO SIGNITURE TRANSACTION\r\n");
 80015d6:	480f      	ldr	r0, [pc, #60]	; (8001614 <printReciet+0x7c>)
 80015d8:	f005 f9b8 	bl	800694c <puts>
	printf("-- IMPORTANT --\r\n");
 80015dc:	480e      	ldr	r0, [pc, #56]	; (8001618 <printReciet+0x80>)
 80015de:	f005 f9b5 	bl	800694c <puts>
	printf("Retain This Copy For Your Records\r\n");
 80015e2:	480e      	ldr	r0, [pc, #56]	; (800161c <printReciet+0x84>)
 80015e4:	f005 f9b2 	bl	800694c <puts>
	printf("-- Customer Copy --\r\n");
 80015e8:	480d      	ldr	r0, [pc, #52]	; (8001620 <printReciet+0x88>)
 80015ea:	f005 f9af 	bl	800694c <puts>
	printf("\n\n\n");
 80015ee:	4803      	ldr	r0, [pc, #12]	; (80015fc <printReciet+0x64>)
 80015f0:	f005 f9ac 	bl	800694c <puts>
}
 80015f4:	bf00      	nop
 80015f6:	3708      	adds	r7, #8
 80015f8:	46bd      	mov	sp, r7
 80015fa:	bd80      	pop	{r7, pc}
 80015fc:	0800b200 	.word	0x0800b200
 8001600:	0800b204 	.word	0x0800b204
 8001604:	0800b220 	.word	0x0800b220
 8001608:	0800b234 	.word	0x0800b234
 800160c:	0800b258 	.word	0x0800b258
 8001610:	0800b26c 	.word	0x0800b26c
 8001614:	0800b284 	.word	0x0800b284
 8001618:	0800b2a0 	.word	0x0800b2a0
 800161c:	0800b2b4 	.word	0x0800b2b4
 8001620:	0800b2d8 	.word	0x0800b2d8

08001624 <checkChequingOrSavingPressed>:
enum pushButton checkChequingOrSavingPressed(){
 8001624:	b580      	push	{r7, lr}
 8001626:	af00      	add	r7, sp, #0
  if(deBounceReadPin(chequingPbPin, 'A', 10) == 0){
 8001628:	2300      	movs	r3, #0
 800162a:	220a      	movs	r2, #10
 800162c:	2141      	movs	r1, #65	; 0x41
 800162e:	4618      	mov	r0, r3
 8001630:	f7ff fd98 	bl	8001164 <deBounceReadPin>
 8001634:	4603      	mov	r3, r0
 8001636:	2b00      	cmp	r3, #0
 8001638:	d101      	bne.n	800163e <checkChequingOrSavingPressed+0x1a>
    return chequing;
 800163a:	2301      	movs	r3, #1
 800163c:	e016      	b.n	800166c <checkChequingOrSavingPressed+0x48>
  }else if(deBounceReadPin(savingsPbPin, 'A',10) == 0){
 800163e:	2301      	movs	r3, #1
 8001640:	220a      	movs	r2, #10
 8001642:	2141      	movs	r1, #65	; 0x41
 8001644:	4618      	mov	r0, r3
 8001646:	f7ff fd8d 	bl	8001164 <deBounceReadPin>
 800164a:	4603      	mov	r3, r0
 800164c:	2b00      	cmp	r3, #0
 800164e:	d101      	bne.n	8001654 <checkChequingOrSavingPressed+0x30>
    return savings;
 8001650:	2302      	movs	r3, #2
 8001652:	e00b      	b.n	800166c <checkChequingOrSavingPressed+0x48>
  }else if(deBounceReadPin(cancelPbPin,'A',10) == 0){
 8001654:	2304      	movs	r3, #4
 8001656:	220a      	movs	r2, #10
 8001658:	2141      	movs	r1, #65	; 0x41
 800165a:	4618      	mov	r0, r3
 800165c:	f7ff fd82 	bl	8001164 <deBounceReadPin>
 8001660:	4603      	mov	r3, r0
 8001662:	2b00      	cmp	r3, #0
 8001664:	d101      	bne.n	800166a <checkChequingOrSavingPressed+0x46>
    return cancel;
 8001666:	2304      	movs	r3, #4
 8001668:	e000      	b.n	800166c <checkChequingOrSavingPressed+0x48>
  }
  return none;
 800166a:	2300      	movs	r3, #0
}
 800166c:	4618      	mov	r0, r3
 800166e:	bd80      	pop	{r7, pc}

08001670 <displayOkCancel>:
void displayOkCancel(){
 8001670:	b580      	push	{r7, lr}
 8001672:	b086      	sub	sp, #24
 8001674:	af02      	add	r7, sp, #8
	char stringBuffer[16];
	snprintf(stringBuffer, 16,"Ok or Cancel?");
 8001676:	463b      	mov	r3, r7
 8001678:	4a08      	ldr	r2, [pc, #32]	; (800169c <displayOkCancel+0x2c>)
 800167a:	2110      	movs	r1, #16
 800167c:	4618      	mov	r0, r3
 800167e:	f005 f98b 	bl	8006998 <sniprintf>
	ssd1331_display_string(0,10, stringBuffer, FONT_1206, WHITE);
 8001682:	463a      	mov	r2, r7
 8001684:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001688:	9300      	str	r3, [sp, #0]
 800168a:	230c      	movs	r3, #12
 800168c:	210a      	movs	r1, #10
 800168e:	2000      	movs	r0, #0
 8001690:	f000 fbc0 	bl	8001e14 <ssd1331_display_string>
}
 8001694:	bf00      	nop
 8001696:	3710      	adds	r7, #16
 8001698:	46bd      	mov	sp, r7
 800169a:	bd80      	pop	{r7, pc}
 800169c:	0800b2f0 	.word	0x0800b2f0

080016a0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	b084      	sub	sp, #16
 80016a4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80016a6:	f000 ff30 	bl	800250a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80016aa:	f000 f8ef 	bl	800188c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80016ae:	f000 fa4b 	bl	8001b48 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80016b2:	f000 fa19 	bl	8001ae8 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 80016b6:	f000 f989 	bl	80019cc <MX_TIM1_Init>
  MX_SPI1_Init();
 80016ba:	f000 f949 	bl	8001950 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  ssd1331_init();
 80016be:	f000 fc17 	bl	8001ef0 <ssd1331_init>
  pushButtonInit();
 80016c2:	f7ff fe5d 	bl	8001380 <pushButtonInit>
  //displayWelcome();
  int8_t transactionState = 1;
 80016c6:	2301      	movs	r3, #1
 80016c8:	73fb      	strb	r3, [r7, #15]
  uint pin = 0;
 80016ca:	2300      	movs	r3, #0
 80016cc:	603b      	str	r3, [r7, #0]
  float amount = 0;
 80016ce:	f04f 0300 	mov.w	r3, #0
 80016d2:	60bb      	str	r3, [r7, #8]
  printf("Starting Program\r\n");
 80016d4:	4865      	ldr	r0, [pc, #404]	; (800186c <main+0x1cc>)
 80016d6:	f005 f939 	bl	800694c <puts>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	enum pushButton pbPressed = none;
 80016da:	2300      	movs	r3, #0
 80016dc:	71fb      	strb	r3, [r7, #7]
	enum bankResponse bankResponse = denied;
 80016de:	2300      	movs	r3, #0
 80016e0:	71bb      	strb	r3, [r7, #6]
	switch(transactionState){
 80016e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80016e6:	3b01      	subs	r3, #1
 80016e8:	2b05      	cmp	r3, #5
 80016ea:	f200 80b5 	bhi.w	8001858 <main+0x1b8>
 80016ee:	a201      	add	r2, pc, #4	; (adr r2, 80016f4 <main+0x54>)
 80016f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80016f4:	0800170d 	.word	0x0800170d
 80016f8:	08001749 	.word	0x08001749
 80016fc:	08001781 	.word	0x08001781
 8001700:	080017e9 	.word	0x080017e9
 8001704:	0800181b 	.word	0x0800181b
 8001708:	08001847 	.word	0x08001847
	case 1:
		displayWelcome();
 800170c:	f7ff fe54 	bl	80013b8 <displayWelcome>
		amount = checkIfAmountRecord();
 8001710:	f7ff feee 	bl	80014f0 <checkIfAmountRecord>
 8001714:	ed87 0a02 	vstr	s0, [r7, #8]
		if(amount != 0){
 8001718:	edd7 7a02 	vldr	s15, [r7, #8]
 800171c:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001720:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001724:	d007      	beq.n	8001736 <main+0x96>
			displayAmount(amount);
 8001726:	ed97 0a02 	vldr	s0, [r7, #8]
 800172a:	f7ff fe67 	bl	80013fc <displayAmount>
			displayOkCancel();
 800172e:	f7ff ff9f 	bl	8001670 <displayOkCancel>
			transactionState = 2;
 8001732:	2302      	movs	r3, #2
 8001734:	73fb      	strb	r3, [r7, #15]
		}
		printf("%f \r\n",amount);
 8001736:	68b8      	ldr	r0, [r7, #8]
 8001738:	f7fe ff06 	bl	8000548 <__aeabi_f2d>
 800173c:	4602      	mov	r2, r0
 800173e:	460b      	mov	r3, r1
 8001740:	484b      	ldr	r0, [pc, #300]	; (8001870 <main+0x1d0>)
 8001742:	f005 f87d 	bl	8006840 <iprintf>
		break;
 8001746:	e090      	b.n	800186a <main+0x1ca>
	case 2:
		pbPressed = checkOkOrCancel();
 8001748:	f7ff fef8 	bl	800153c <checkOkOrCancel>
 800174c:	4603      	mov	r3, r0
 800174e:	71fb      	strb	r3, [r7, #7]
		if(pbPressed != none){
 8001750:	79fb      	ldrb	r3, [r7, #7]
 8001752:	2b00      	cmp	r3, #0
 8001754:	f000 8082 	beq.w	800185c <main+0x1bc>
			if(pbPressed == cancel){
 8001758:	79fb      	ldrb	r3, [r7, #7]
 800175a:	2b04      	cmp	r3, #4
 800175c:	d105      	bne.n	800176a <main+0xca>
				printf("Cancel Pressed\r\n");
 800175e:	4845      	ldr	r0, [pc, #276]	; (8001874 <main+0x1d4>)
 8001760:	f005 f8f4 	bl	800694c <puts>
				transactionState = 6;
 8001764:	2306      	movs	r3, #6
 8001766:	73fb      	strb	r3, [r7, #15]
				printf("OK Pressed\r\n");
				transactionState = 3;
				displayChequingOrSaving();
			}
		}
		break;
 8001768:	e078      	b.n	800185c <main+0x1bc>
			}else if(pbPressed == ok){
 800176a:	79fb      	ldrb	r3, [r7, #7]
 800176c:	2b03      	cmp	r3, #3
 800176e:	d175      	bne.n	800185c <main+0x1bc>
				printf("OK Pressed\r\n");
 8001770:	4841      	ldr	r0, [pc, #260]	; (8001878 <main+0x1d8>)
 8001772:	f005 f8eb 	bl	800694c <puts>
				transactionState = 3;
 8001776:	2303      	movs	r3, #3
 8001778:	73fb      	strb	r3, [r7, #15]
				displayChequingOrSaving();
 800177a:	f7ff fe65 	bl	8001448 <displayChequingOrSaving>
		break;
 800177e:	e06d      	b.n	800185c <main+0x1bc>
	case 3:
		pbPressed = checkChequingOrSavingPressed();
 8001780:	f7ff ff50 	bl	8001624 <checkChequingOrSavingPressed>
 8001784:	4603      	mov	r3, r0
 8001786:	71fb      	strb	r3, [r7, #7]
		if(pbPressed != none){
 8001788:	79fb      	ldrb	r3, [r7, #7]
 800178a:	2b00      	cmp	r3, #0
 800178c:	d068      	beq.n	8001860 <main+0x1c0>
			if(pbPressed == chequing){
 800178e:	79fb      	ldrb	r3, [r7, #7]
 8001790:	2b01      	cmp	r3, #1
 8001792:	d10e      	bne.n	80017b2 <main+0x112>
				printf("Chequing Pressed\r\n");
 8001794:	4839      	ldr	r0, [pc, #228]	; (800187c <main+0x1dc>)
 8001796:	f005 f8d9 	bl	800694c <puts>
				transactionState = 4;
 800179a:	2304      	movs	r3, #4
 800179c:	73fb      	strb	r3, [r7, #15]
				displayEnterPin();
 800179e:	f7ff fe8b 	bl	80014b8 <displayEnterPin>
				scanf("%d",&pin);
 80017a2:	463b      	mov	r3, r7
 80017a4:	4619      	mov	r1, r3
 80017a6:	4836      	ldr	r0, [pc, #216]	; (8001880 <main+0x1e0>)
 80017a8:	f005 f8d8 	bl	800695c <iscanf>
				displayOkCancel();
 80017ac:	f7ff ff60 	bl	8001670 <displayOkCancel>
			}else if(pbPressed == cancel){
				printf("Cancel Pressed\r\n");
				transactionState = 6;
			}
		}
		break;
 80017b0:	e056      	b.n	8001860 <main+0x1c0>
			}else if(pbPressed == savings){
 80017b2:	79fb      	ldrb	r3, [r7, #7]
 80017b4:	2b02      	cmp	r3, #2
 80017b6:	d10e      	bne.n	80017d6 <main+0x136>
				printf("Saving Pressed\r\n");
 80017b8:	4832      	ldr	r0, [pc, #200]	; (8001884 <main+0x1e4>)
 80017ba:	f005 f8c7 	bl	800694c <puts>
				transactionState = 4;
 80017be:	2304      	movs	r3, #4
 80017c0:	73fb      	strb	r3, [r7, #15]
				displayEnterPin();
 80017c2:	f7ff fe79 	bl	80014b8 <displayEnterPin>
				scanf("%d",&pin);
 80017c6:	463b      	mov	r3, r7
 80017c8:	4619      	mov	r1, r3
 80017ca:	482d      	ldr	r0, [pc, #180]	; (8001880 <main+0x1e0>)
 80017cc:	f005 f8c6 	bl	800695c <iscanf>
				displayOkCancel();
 80017d0:	f7ff ff4e 	bl	8001670 <displayOkCancel>
		break;
 80017d4:	e044      	b.n	8001860 <main+0x1c0>
			}else if(pbPressed == cancel){
 80017d6:	79fb      	ldrb	r3, [r7, #7]
 80017d8:	2b04      	cmp	r3, #4
 80017da:	d141      	bne.n	8001860 <main+0x1c0>
				printf("Cancel Pressed\r\n");
 80017dc:	4825      	ldr	r0, [pc, #148]	; (8001874 <main+0x1d4>)
 80017de:	f005 f8b5 	bl	800694c <puts>
				transactionState = 6;
 80017e2:	2306      	movs	r3, #6
 80017e4:	73fb      	strb	r3, [r7, #15]
		break;
 80017e6:	e03b      	b.n	8001860 <main+0x1c0>
	case 4:
		pbPressed = checkOkOrCancel();
 80017e8:	f7ff fea8 	bl	800153c <checkOkOrCancel>
 80017ec:	4603      	mov	r3, r0
 80017ee:	71fb      	strb	r3, [r7, #7]
		if(pbPressed != none){
 80017f0:	79fb      	ldrb	r3, [r7, #7]
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d036      	beq.n	8001864 <main+0x1c4>
			if(pbPressed == cancel){
 80017f6:	79fb      	ldrb	r3, [r7, #7]
 80017f8:	2b04      	cmp	r3, #4
 80017fa:	d105      	bne.n	8001808 <main+0x168>
				printf("Cancel Pressed\r\n");
 80017fc:	481d      	ldr	r0, [pc, #116]	; (8001874 <main+0x1d4>)
 80017fe:	f005 f8a5 	bl	800694c <puts>
				transactionState = 6;
 8001802:	2306      	movs	r3, #6
 8001804:	73fb      	strb	r3, [r7, #15]
			}else if(pbPressed == ok){
				printf("Ok Pressed\r\n");
				transactionState = 5;
			}
		}
		break;
 8001806:	e02d      	b.n	8001864 <main+0x1c4>
			}else if(pbPressed == ok){
 8001808:	79fb      	ldrb	r3, [r7, #7]
 800180a:	2b03      	cmp	r3, #3
 800180c:	d12a      	bne.n	8001864 <main+0x1c4>
				printf("Ok Pressed\r\n");
 800180e:	481e      	ldr	r0, [pc, #120]	; (8001888 <main+0x1e8>)
 8001810:	f005 f89c 	bl	800694c <puts>
				transactionState = 5;
 8001814:	2305      	movs	r3, #5
 8001816:	73fb      	strb	r3, [r7, #15]
		break;
 8001818:	e024      	b.n	8001864 <main+0x1c4>
	case 5:
		bankResponse = BankResponse(pin);
 800181a:	683b      	ldr	r3, [r7, #0]
 800181c:	4618      	mov	r0, r3
 800181e:	f7ff fea8 	bl	8001572 <BankResponse>
 8001822:	4603      	mov	r3, r0
 8001824:	71bb      	strb	r3, [r7, #6]
    	if(bankResponse == confirm){
 8001826:	79bb      	ldrb	r3, [r7, #6]
 8001828:	2b01      	cmp	r3, #1
 800182a:	d106      	bne.n	800183a <main+0x19a>
    		printReciet(amount);
 800182c:	ed97 0a02 	vldr	s0, [r7, #8]
 8001830:	f7ff feb2 	bl	8001598 <printReciet>
    		transactionState = 1;
 8001834:	2301      	movs	r3, #1
 8001836:	73fb      	strb	r3, [r7, #15]
    	}else if(bankResponse == denied){
    		transactionState = 6;
    	}
		break;
 8001838:	e016      	b.n	8001868 <main+0x1c8>
    	}else if(bankResponse == denied){
 800183a:	79bb      	ldrb	r3, [r7, #6]
 800183c:	2b00      	cmp	r3, #0
 800183e:	d113      	bne.n	8001868 <main+0x1c8>
    		transactionState = 6;
 8001840:	2306      	movs	r3, #6
 8001842:	73fb      	strb	r3, [r7, #15]
		break;
 8001844:	e010      	b.n	8001868 <main+0x1c8>
	case 6:
		displayTransactionCancel();
 8001846:	f7ff fe1b 	bl	8001480 <displayTransactionCancel>
		HAL_Delay(1000);
 800184a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800184e:	f000 fed1 	bl	80025f4 <HAL_Delay>
		transactionState = 1;
 8001852:	2301      	movs	r3, #1
 8001854:	73fb      	strb	r3, [r7, #15]
		break;
 8001856:	e008      	b.n	800186a <main+0x1ca>
	default:
		break;
 8001858:	bf00      	nop
 800185a:	e73e      	b.n	80016da <main+0x3a>
		break;
 800185c:	bf00      	nop
 800185e:	e73c      	b.n	80016da <main+0x3a>
		break;
 8001860:	bf00      	nop
 8001862:	e73a      	b.n	80016da <main+0x3a>
		break;
 8001864:	bf00      	nop
 8001866:	e738      	b.n	80016da <main+0x3a>
		break;
 8001868:	bf00      	nop
  {
 800186a:	e736      	b.n	80016da <main+0x3a>
 800186c:	0800b300 	.word	0x0800b300
 8001870:	0800b314 	.word	0x0800b314
 8001874:	0800b31c 	.word	0x0800b31c
 8001878:	0800b32c 	.word	0x0800b32c
 800187c:	0800b338 	.word	0x0800b338
 8001880:	0800b34c 	.word	0x0800b34c
 8001884:	0800b350 	.word	0x0800b350
 8001888:	0800b360 	.word	0x0800b360

0800188c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800188c:	b580      	push	{r7, lr}
 800188e:	b096      	sub	sp, #88	; 0x58
 8001890:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001892:	f107 0314 	add.w	r3, r7, #20
 8001896:	2244      	movs	r2, #68	; 0x44
 8001898:	2100      	movs	r1, #0
 800189a:	4618      	mov	r0, r3
 800189c:	f004 f94e 	bl	8005b3c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80018a0:	463b      	mov	r3, r7
 80018a2:	2200      	movs	r2, #0
 80018a4:	601a      	str	r2, [r3, #0]
 80018a6:	605a      	str	r2, [r3, #4]
 80018a8:	609a      	str	r2, [r3, #8]
 80018aa:	60da      	str	r2, [r3, #12]
 80018ac:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80018ae:	f44f 7000 	mov.w	r0, #512	; 0x200
 80018b2:	f001 f961 	bl	8002b78 <HAL_PWREx_ControlVoltageScaling>
 80018b6:	4603      	mov	r3, r0
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d001      	beq.n	80018c0 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80018bc:	f000 f9be 	bl	8001c3c <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80018c0:	f001 f93c 	bl	8002b3c <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80018c4:	4b21      	ldr	r3, [pc, #132]	; (800194c <SystemClock_Config+0xc0>)
 80018c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80018ca:	4a20      	ldr	r2, [pc, #128]	; (800194c <SystemClock_Config+0xc0>)
 80018cc:	f023 0318 	bic.w	r3, r3, #24
 80018d0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 80018d4:	2314      	movs	r3, #20
 80018d6:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80018d8:	2301      	movs	r3, #1
 80018da:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80018dc:	2301      	movs	r3, #1
 80018de:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80018e0:	2300      	movs	r3, #0
 80018e2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80018e4:	2360      	movs	r3, #96	; 0x60
 80018e6:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80018e8:	2302      	movs	r3, #2
 80018ea:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80018ec:	2301      	movs	r3, #1
 80018ee:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80018f0:	2301      	movs	r3, #1
 80018f2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 16;
 80018f4:	2310      	movs	r3, #16
 80018f6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80018f8:	2307      	movs	r3, #7
 80018fa:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80018fc:	2302      	movs	r3, #2
 80018fe:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001900:	2302      	movs	r3, #2
 8001902:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001904:	f107 0314 	add.w	r3, r7, #20
 8001908:	4618      	mov	r0, r3
 800190a:	f001 f98b 	bl	8002c24 <HAL_RCC_OscConfig>
 800190e:	4603      	mov	r3, r0
 8001910:	2b00      	cmp	r3, #0
 8001912:	d001      	beq.n	8001918 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8001914:	f000 f992 	bl	8001c3c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001918:	230f      	movs	r3, #15
 800191a:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800191c:	2303      	movs	r3, #3
 800191e:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001920:	2300      	movs	r3, #0
 8001922:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001924:	2300      	movs	r3, #0
 8001926:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001928:	2300      	movs	r3, #0
 800192a:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800192c:	463b      	mov	r3, r7
 800192e:	2101      	movs	r1, #1
 8001930:	4618      	mov	r0, r3
 8001932:	f001 fd8b 	bl	800344c <HAL_RCC_ClockConfig>
 8001936:	4603      	mov	r3, r0
 8001938:	2b00      	cmp	r3, #0
 800193a:	d001      	beq.n	8001940 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 800193c:	f000 f97e 	bl	8001c3c <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8001940:	f002 f99e 	bl	8003c80 <HAL_RCCEx_EnableMSIPLLMode>
}
 8001944:	bf00      	nop
 8001946:	3758      	adds	r7, #88	; 0x58
 8001948:	46bd      	mov	sp, r7
 800194a:	bd80      	pop	{r7, pc}
 800194c:	40021000 	.word	0x40021000

08001950 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001950:	b580      	push	{r7, lr}
 8001952:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001954:	4b1b      	ldr	r3, [pc, #108]	; (80019c4 <MX_SPI1_Init+0x74>)
 8001956:	4a1c      	ldr	r2, [pc, #112]	; (80019c8 <MX_SPI1_Init+0x78>)
 8001958:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800195a:	4b1a      	ldr	r3, [pc, #104]	; (80019c4 <MX_SPI1_Init+0x74>)
 800195c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001960:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001962:	4b18      	ldr	r3, [pc, #96]	; (80019c4 <MX_SPI1_Init+0x74>)
 8001964:	2200      	movs	r2, #0
 8001966:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001968:	4b16      	ldr	r3, [pc, #88]	; (80019c4 <MX_SPI1_Init+0x74>)
 800196a:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800196e:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001970:	4b14      	ldr	r3, [pc, #80]	; (80019c4 <MX_SPI1_Init+0x74>)
 8001972:	2200      	movs	r2, #0
 8001974:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001976:	4b13      	ldr	r3, [pc, #76]	; (80019c4 <MX_SPI1_Init+0x74>)
 8001978:	2200      	movs	r2, #0
 800197a:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800197c:	4b11      	ldr	r3, [pc, #68]	; (80019c4 <MX_SPI1_Init+0x74>)
 800197e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001982:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8001984:	4b0f      	ldr	r3, [pc, #60]	; (80019c4 <MX_SPI1_Init+0x74>)
 8001986:	2210      	movs	r2, #16
 8001988:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800198a:	4b0e      	ldr	r3, [pc, #56]	; (80019c4 <MX_SPI1_Init+0x74>)
 800198c:	2200      	movs	r2, #0
 800198e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001990:	4b0c      	ldr	r3, [pc, #48]	; (80019c4 <MX_SPI1_Init+0x74>)
 8001992:	2200      	movs	r2, #0
 8001994:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001996:	4b0b      	ldr	r3, [pc, #44]	; (80019c4 <MX_SPI1_Init+0x74>)
 8001998:	2200      	movs	r2, #0
 800199a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 800199c:	4b09      	ldr	r3, [pc, #36]	; (80019c4 <MX_SPI1_Init+0x74>)
 800199e:	2207      	movs	r2, #7
 80019a0:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80019a2:	4b08      	ldr	r3, [pc, #32]	; (80019c4 <MX_SPI1_Init+0x74>)
 80019a4:	2200      	movs	r2, #0
 80019a6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80019a8:	4b06      	ldr	r3, [pc, #24]	; (80019c4 <MX_SPI1_Init+0x74>)
 80019aa:	2208      	movs	r2, #8
 80019ac:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80019ae:	4805      	ldr	r0, [pc, #20]	; (80019c4 <MX_SPI1_Init+0x74>)
 80019b0:	f002 fa68 	bl	8003e84 <HAL_SPI_Init>
 80019b4:	4603      	mov	r3, r0
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d001      	beq.n	80019be <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80019ba:	f000 f93f 	bl	8001c3c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80019be:	bf00      	nop
 80019c0:	bd80      	pop	{r7, pc}
 80019c2:	bf00      	nop
 80019c4:	200001fc 	.word	0x200001fc
 80019c8:	40013000 	.word	0x40013000

080019cc <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80019cc:	b580      	push	{r7, lr}
 80019ce:	b096      	sub	sp, #88	; 0x58
 80019d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80019d2:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80019d6:	2200      	movs	r2, #0
 80019d8:	601a      	str	r2, [r3, #0]
 80019da:	605a      	str	r2, [r3, #4]
 80019dc:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80019de:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80019e2:	2200      	movs	r2, #0
 80019e4:	601a      	str	r2, [r3, #0]
 80019e6:	605a      	str	r2, [r3, #4]
 80019e8:	609a      	str	r2, [r3, #8]
 80019ea:	60da      	str	r2, [r3, #12]
 80019ec:	611a      	str	r2, [r3, #16]
 80019ee:	615a      	str	r2, [r3, #20]
 80019f0:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80019f2:	1d3b      	adds	r3, r7, #4
 80019f4:	222c      	movs	r2, #44	; 0x2c
 80019f6:	2100      	movs	r1, #0
 80019f8:	4618      	mov	r0, r3
 80019fa:	f004 f89f 	bl	8005b3c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80019fe:	4b38      	ldr	r3, [pc, #224]	; (8001ae0 <MX_TIM1_Init+0x114>)
 8001a00:	4a38      	ldr	r2, [pc, #224]	; (8001ae4 <MX_TIM1_Init+0x118>)
 8001a02:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001a04:	4b36      	ldr	r3, [pc, #216]	; (8001ae0 <MX_TIM1_Init+0x114>)
 8001a06:	2200      	movs	r2, #0
 8001a08:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a0a:	4b35      	ldr	r3, [pc, #212]	; (8001ae0 <MX_TIM1_Init+0x114>)
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 100;
 8001a10:	4b33      	ldr	r3, [pc, #204]	; (8001ae0 <MX_TIM1_Init+0x114>)
 8001a12:	2264      	movs	r2, #100	; 0x64
 8001a14:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a16:	4b32      	ldr	r3, [pc, #200]	; (8001ae0 <MX_TIM1_Init+0x114>)
 8001a18:	2200      	movs	r2, #0
 8001a1a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001a1c:	4b30      	ldr	r3, [pc, #192]	; (8001ae0 <MX_TIM1_Init+0x114>)
 8001a1e:	2200      	movs	r2, #0
 8001a20:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a22:	4b2f      	ldr	r3, [pc, #188]	; (8001ae0 <MX_TIM1_Init+0x114>)
 8001a24:	2200      	movs	r2, #0
 8001a26:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001a28:	482d      	ldr	r0, [pc, #180]	; (8001ae0 <MX_TIM1_Init+0x114>)
 8001a2a:	f002 fda1 	bl	8004570 <HAL_TIM_PWM_Init>
 8001a2e:	4603      	mov	r3, r0
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d001      	beq.n	8001a38 <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 8001a34:	f000 f902 	bl	8001c3c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a38:	2300      	movs	r3, #0
 8001a3a:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001a3c:	2300      	movs	r3, #0
 8001a3e:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a40:	2300      	movs	r3, #0
 8001a42:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001a44:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001a48:	4619      	mov	r1, r3
 8001a4a:	4825      	ldr	r0, [pc, #148]	; (8001ae0 <MX_TIM1_Init+0x114>)
 8001a4c:	f003 f9de 	bl	8004e0c <HAL_TIMEx_MasterConfigSynchronization>
 8001a50:	4603      	mov	r3, r0
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d001      	beq.n	8001a5a <MX_TIM1_Init+0x8e>
  {
    Error_Handler();
 8001a56:	f000 f8f1 	bl	8001c3c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001a5a:	2360      	movs	r3, #96	; 0x60
 8001a5c:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 8001a5e:	2300      	movs	r3, #0
 8001a60:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001a62:	2300      	movs	r3, #0
 8001a64:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001a66:	2300      	movs	r3, #0
 8001a68:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001a6e:	2300      	movs	r3, #0
 8001a70:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001a72:	2300      	movs	r3, #0
 8001a74:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001a76:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	4619      	mov	r1, r3
 8001a7e:	4818      	ldr	r0, [pc, #96]	; (8001ae0 <MX_TIM1_Init+0x114>)
 8001a80:	f002 fdce 	bl	8004620 <HAL_TIM_PWM_ConfigChannel>
 8001a84:	4603      	mov	r3, r0
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d001      	beq.n	8001a8e <MX_TIM1_Init+0xc2>
  {
    Error_Handler();
 8001a8a:	f000 f8d7 	bl	8001c3c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001a8e:	2300      	movs	r3, #0
 8001a90:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001a92:	2300      	movs	r3, #0
 8001a94:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001a96:	2300      	movs	r3, #0
 8001a98:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001a9e:	2300      	movs	r3, #0
 8001aa0:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001aa2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001aa6:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001aa8:	2300      	movs	r3, #0
 8001aaa:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001aac:	2300      	movs	r3, #0
 8001aae:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001ab0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001ab4:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001ab6:	2300      	movs	r3, #0
 8001ab8:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001aba:	2300      	movs	r3, #0
 8001abc:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001abe:	1d3b      	adds	r3, r7, #4
 8001ac0:	4619      	mov	r1, r3
 8001ac2:	4807      	ldr	r0, [pc, #28]	; (8001ae0 <MX_TIM1_Init+0x114>)
 8001ac4:	f003 fa08 	bl	8004ed8 <HAL_TIMEx_ConfigBreakDeadTime>
 8001ac8:	4603      	mov	r3, r0
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d001      	beq.n	8001ad2 <MX_TIM1_Init+0x106>
  {
    Error_Handler();
 8001ace:	f000 f8b5 	bl	8001c3c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001ad2:	4803      	ldr	r0, [pc, #12]	; (8001ae0 <MX_TIM1_Init+0x114>)
 8001ad4:	f000 fb40 	bl	8002158 <HAL_TIM_MspPostInit>

}
 8001ad8:	bf00      	nop
 8001ada:	3758      	adds	r7, #88	; 0x58
 8001adc:	46bd      	mov	sp, r7
 8001ade:	bd80      	pop	{r7, pc}
 8001ae0:	20000260 	.word	0x20000260
 8001ae4:	40012c00 	.word	0x40012c00

08001ae8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001aec:	4b14      	ldr	r3, [pc, #80]	; (8001b40 <MX_USART2_UART_Init+0x58>)
 8001aee:	4a15      	ldr	r2, [pc, #84]	; (8001b44 <MX_USART2_UART_Init+0x5c>)
 8001af0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001af2:	4b13      	ldr	r3, [pc, #76]	; (8001b40 <MX_USART2_UART_Init+0x58>)
 8001af4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001af8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001afa:	4b11      	ldr	r3, [pc, #68]	; (8001b40 <MX_USART2_UART_Init+0x58>)
 8001afc:	2200      	movs	r2, #0
 8001afe:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001b00:	4b0f      	ldr	r3, [pc, #60]	; (8001b40 <MX_USART2_UART_Init+0x58>)
 8001b02:	2200      	movs	r2, #0
 8001b04:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001b06:	4b0e      	ldr	r3, [pc, #56]	; (8001b40 <MX_USART2_UART_Init+0x58>)
 8001b08:	2200      	movs	r2, #0
 8001b0a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001b0c:	4b0c      	ldr	r3, [pc, #48]	; (8001b40 <MX_USART2_UART_Init+0x58>)
 8001b0e:	220c      	movs	r2, #12
 8001b10:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001b12:	4b0b      	ldr	r3, [pc, #44]	; (8001b40 <MX_USART2_UART_Init+0x58>)
 8001b14:	2200      	movs	r2, #0
 8001b16:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001b18:	4b09      	ldr	r3, [pc, #36]	; (8001b40 <MX_USART2_UART_Init+0x58>)
 8001b1a:	2200      	movs	r2, #0
 8001b1c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001b1e:	4b08      	ldr	r3, [pc, #32]	; (8001b40 <MX_USART2_UART_Init+0x58>)
 8001b20:	2200      	movs	r2, #0
 8001b22:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001b24:	4b06      	ldr	r3, [pc, #24]	; (8001b40 <MX_USART2_UART_Init+0x58>)
 8001b26:	2200      	movs	r2, #0
 8001b28:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001b2a:	4805      	ldr	r0, [pc, #20]	; (8001b40 <MX_USART2_UART_Init+0x58>)
 8001b2c:	f003 fa4c 	bl	8004fc8 <HAL_UART_Init>
 8001b30:	4603      	mov	r3, r0
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d001      	beq.n	8001b3a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001b36:	f000 f881 	bl	8001c3c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001b3a:	bf00      	nop
 8001b3c:	bd80      	pop	{r7, pc}
 8001b3e:	bf00      	nop
 8001b40:	200002ac 	.word	0x200002ac
 8001b44:	40004400 	.word	0x40004400

08001b48 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	b088      	sub	sp, #32
 8001b4c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b4e:	f107 030c 	add.w	r3, r7, #12
 8001b52:	2200      	movs	r2, #0
 8001b54:	601a      	str	r2, [r3, #0]
 8001b56:	605a      	str	r2, [r3, #4]
 8001b58:	609a      	str	r2, [r3, #8]
 8001b5a:	60da      	str	r2, [r3, #12]
 8001b5c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b5e:	4b35      	ldr	r3, [pc, #212]	; (8001c34 <MX_GPIO_Init+0xec>)
 8001b60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b62:	4a34      	ldr	r2, [pc, #208]	; (8001c34 <MX_GPIO_Init+0xec>)
 8001b64:	f043 0304 	orr.w	r3, r3, #4
 8001b68:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001b6a:	4b32      	ldr	r3, [pc, #200]	; (8001c34 <MX_GPIO_Init+0xec>)
 8001b6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b6e:	f003 0304 	and.w	r3, r3, #4
 8001b72:	60bb      	str	r3, [r7, #8]
 8001b74:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b76:	4b2f      	ldr	r3, [pc, #188]	; (8001c34 <MX_GPIO_Init+0xec>)
 8001b78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b7a:	4a2e      	ldr	r2, [pc, #184]	; (8001c34 <MX_GPIO_Init+0xec>)
 8001b7c:	f043 0301 	orr.w	r3, r3, #1
 8001b80:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001b82:	4b2c      	ldr	r3, [pc, #176]	; (8001c34 <MX_GPIO_Init+0xec>)
 8001b84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b86:	f003 0301 	and.w	r3, r3, #1
 8001b8a:	607b      	str	r3, [r7, #4]
 8001b8c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b8e:	4b29      	ldr	r3, [pc, #164]	; (8001c34 <MX_GPIO_Init+0xec>)
 8001b90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b92:	4a28      	ldr	r2, [pc, #160]	; (8001c34 <MX_GPIO_Init+0xec>)
 8001b94:	f043 0302 	orr.w	r3, r3, #2
 8001b98:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001b9a:	4b26      	ldr	r3, [pc, #152]	; (8001c34 <MX_GPIO_Init+0xec>)
 8001b9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b9e:	f003 0302 	and.w	r3, r3, #2
 8001ba2:	603b      	str	r3, [r7, #0]
 8001ba4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|SSD1331_CS_Pin|SSD1331_DC_Pin|SSD1331_RES_Pin, GPIO_PIN_RESET);
 8001ba6:	2200      	movs	r2, #0
 8001ba8:	2178      	movs	r1, #120	; 0x78
 8001baa:	4823      	ldr	r0, [pc, #140]	; (8001c38 <MX_GPIO_Init+0xf0>)
 8001bac:	f000 ffae 	bl	8002b0c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : chequing_Pin saving_Pin Ok_Pin Cancel_Pin */
  GPIO_InitStruct.Pin = chequing_Pin|saving_Pin|Ok_Pin|Cancel_Pin;
 8001bb0:	231b      	movs	r3, #27
 8001bb2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001bb4:	2300      	movs	r3, #0
 8001bb6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bb8:	2300      	movs	r3, #0
 8001bba:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bbc:	f107 030c 	add.w	r3, r7, #12
 8001bc0:	4619      	mov	r1, r3
 8001bc2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001bc6:	f000 fe1f 	bl	8002808 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA5 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_12;
 8001bca:	f44f 5381 	mov.w	r3, #4128	; 0x1020
 8001bce:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bd0:	2302      	movs	r3, #2
 8001bd2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bd4:	2300      	movs	r3, #0
 8001bd6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bd8:	2303      	movs	r3, #3
 8001bda:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001bdc:	2305      	movs	r3, #5
 8001bde:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001be0:	f107 030c 	add.w	r3, r7, #12
 8001be4:	4619      	mov	r1, r3
 8001be6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001bea:	f000 fe0d 	bl	8002808 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001bee:	2380      	movs	r3, #128	; 0x80
 8001bf0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bf2:	2302      	movs	r3, #2
 8001bf4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bfa:	2300      	movs	r3, #0
 8001bfc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001bfe:	2301      	movs	r3, #1
 8001c00:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c02:	f107 030c 	add.w	r3, r7, #12
 8001c06:	4619      	mov	r1, r3
 8001c08:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001c0c:	f000 fdfc 	bl	8002808 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin SSD1331_CS_Pin SSD1331_DC_Pin SSD1331_RES_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|SSD1331_CS_Pin|SSD1331_DC_Pin|SSD1331_RES_Pin;
 8001c10:	2378      	movs	r3, #120	; 0x78
 8001c12:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c14:	2301      	movs	r3, #1
 8001c16:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c18:	2300      	movs	r3, #0
 8001c1a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c1c:	2300      	movs	r3, #0
 8001c1e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c20:	f107 030c 	add.w	r3, r7, #12
 8001c24:	4619      	mov	r1, r3
 8001c26:	4804      	ldr	r0, [pc, #16]	; (8001c38 <MX_GPIO_Init+0xf0>)
 8001c28:	f000 fdee 	bl	8002808 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001c2c:	bf00      	nop
 8001c2e:	3720      	adds	r7, #32
 8001c30:	46bd      	mov	sp, r7
 8001c32:	bd80      	pop	{r7, pc}
 8001c34:	40021000 	.word	0x40021000
 8001c38:	48000400 	.word	0x48000400

08001c3c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001c3c:	b480      	push	{r7}
 8001c3e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001c40:	b672      	cpsid	i
}
 8001c42:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001c44:	e7fe      	b.n	8001c44 <Error_Handler+0x8>
	...

08001c48 <ssd1331_write_byte>:
   *						   0: Writes to the command register
   *						   1: Writes to the display data ram
   * @retval None
 **/
static void ssd1331_write_byte(uint8_t chData, uint8_t chCmd) 
{
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	b082      	sub	sp, #8
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	4603      	mov	r3, r0
 8001c50:	460a      	mov	r2, r1
 8001c52:	71fb      	strb	r3, [r7, #7]
 8001c54:	4613      	mov	r3, r2
 8001c56:	71bb      	strb	r3, [r7, #6]
	if (chCmd) {
 8001c58:	79bb      	ldrb	r3, [r7, #6]
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d005      	beq.n	8001c6a <ssd1331_write_byte+0x22>
	 	__SSD1331_DC_SET();
 8001c5e:	2201      	movs	r2, #1
 8001c60:	2120      	movs	r1, #32
 8001c62:	4811      	ldr	r0, [pc, #68]	; (8001ca8 <ssd1331_write_byte+0x60>)
 8001c64:	f000 ff52 	bl	8002b0c <HAL_GPIO_WritePin>
 8001c68:	e004      	b.n	8001c74 <ssd1331_write_byte+0x2c>
	} else {
	 	__SSD1331_DC_CLR();
 8001c6a:	2200      	movs	r2, #0
 8001c6c:	2120      	movs	r1, #32
 8001c6e:	480e      	ldr	r0, [pc, #56]	; (8001ca8 <ssd1331_write_byte+0x60>)
 8001c70:	f000 ff4c 	bl	8002b0c <HAL_GPIO_WritePin>
	}
	
	__SSD1331_CS_CLR();
 8001c74:	2200      	movs	r2, #0
 8001c76:	2110      	movs	r1, #16
 8001c78:	480b      	ldr	r0, [pc, #44]	; (8001ca8 <ssd1331_write_byte+0x60>)
 8001c7a:	f000 ff47 	bl	8002b0c <HAL_GPIO_WritePin>
	__SSD1331_WRITE_BYTE(chData);
 8001c7e:	1df9      	adds	r1, r7, #7
 8001c80:	2364      	movs	r3, #100	; 0x64
 8001c82:	2201      	movs	r2, #1
 8001c84:	4809      	ldr	r0, [pc, #36]	; (8001cac <ssd1331_write_byte+0x64>)
 8001c86:	f002 f9a0 	bl	8003fca <HAL_SPI_Transmit>
	
	__SSD1331_CS_SET();
 8001c8a:	2201      	movs	r2, #1
 8001c8c:	2110      	movs	r1, #16
 8001c8e:	4806      	ldr	r0, [pc, #24]	; (8001ca8 <ssd1331_write_byte+0x60>)
 8001c90:	f000 ff3c 	bl	8002b0c <HAL_GPIO_WritePin>
	__SSD1331_DC_SET();
 8001c94:	2201      	movs	r2, #1
 8001c96:	2120      	movs	r1, #32
 8001c98:	4803      	ldr	r0, [pc, #12]	; (8001ca8 <ssd1331_write_byte+0x60>)
 8001c9a:	f000 ff37 	bl	8002b0c <HAL_GPIO_WritePin>
}
 8001c9e:	bf00      	nop
 8001ca0:	3708      	adds	r7, #8
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	bd80      	pop	{r7, pc}
 8001ca6:	bf00      	nop
 8001ca8:	48000400 	.word	0x48000400
 8001cac:	200001fc 	.word	0x200001fc

08001cb0 <ssd1331_draw_point>:

void ssd1331_draw_point(uint8_t chXpos, uint8_t chYpos, uint16_t hwColor) 
{
 8001cb0:	b580      	push	{r7, lr}
 8001cb2:	b082      	sub	sp, #8
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	4603      	mov	r3, r0
 8001cb8:	71fb      	strb	r3, [r7, #7]
 8001cba:	460b      	mov	r3, r1
 8001cbc:	71bb      	strb	r3, [r7, #6]
 8001cbe:	4613      	mov	r3, r2
 8001cc0:	80bb      	strh	r3, [r7, #4]
	if (chXpos >= OLED_WIDTH || chYpos >= OLED_HEIGHT) {
 8001cc2:	79fb      	ldrb	r3, [r7, #7]
 8001cc4:	2b5f      	cmp	r3, #95	; 0x5f
 8001cc6:	d82b      	bhi.n	8001d20 <ssd1331_draw_point+0x70>
 8001cc8:	79bb      	ldrb	r3, [r7, #6]
 8001cca:	2b3f      	cmp	r3, #63	; 0x3f
 8001ccc:	d828      	bhi.n	8001d20 <ssd1331_draw_point+0x70>
		return;
	}

    //set column point
    ssd1331_write_byte(SET_COLUMN_ADDRESS, SSD1331_CMD);
 8001cce:	2100      	movs	r1, #0
 8001cd0:	2015      	movs	r0, #21
 8001cd2:	f7ff ffb9 	bl	8001c48 <ssd1331_write_byte>
    ssd1331_write_byte(chXpos, SSD1331_CMD);
 8001cd6:	79fb      	ldrb	r3, [r7, #7]
 8001cd8:	2100      	movs	r1, #0
 8001cda:	4618      	mov	r0, r3
 8001cdc:	f7ff ffb4 	bl	8001c48 <ssd1331_write_byte>
    ssd1331_write_byte(OLED_WIDTH - 1, SSD1331_CMD);
 8001ce0:	2100      	movs	r1, #0
 8001ce2:	205f      	movs	r0, #95	; 0x5f
 8001ce4:	f7ff ffb0 	bl	8001c48 <ssd1331_write_byte>
    //set row point
    ssd1331_write_byte(SET_ROW_ADDRESS, SSD1331_CMD);
 8001ce8:	2100      	movs	r1, #0
 8001cea:	2075      	movs	r0, #117	; 0x75
 8001cec:	f7ff ffac 	bl	8001c48 <ssd1331_write_byte>
    ssd1331_write_byte(chYpos, SSD1331_CMD);
 8001cf0:	79bb      	ldrb	r3, [r7, #6]
 8001cf2:	2100      	movs	r1, #0
 8001cf4:	4618      	mov	r0, r3
 8001cf6:	f7ff ffa7 	bl	8001c48 <ssd1331_write_byte>
    ssd1331_write_byte(OLED_HEIGHT - 1, SSD1331_CMD);
 8001cfa:	2100      	movs	r1, #0
 8001cfc:	203f      	movs	r0, #63	; 0x3f
 8001cfe:	f7ff ffa3 	bl	8001c48 <ssd1331_write_byte>
    
    //fill 16bit colour
	ssd1331_write_byte(hwColor >> 8, SSD1331_DATA);
 8001d02:	88bb      	ldrh	r3, [r7, #4]
 8001d04:	0a1b      	lsrs	r3, r3, #8
 8001d06:	b29b      	uxth	r3, r3
 8001d08:	b2db      	uxtb	r3, r3
 8001d0a:	2101      	movs	r1, #1
 8001d0c:	4618      	mov	r0, r3
 8001d0e:	f7ff ff9b 	bl	8001c48 <ssd1331_write_byte>
	ssd1331_write_byte(hwColor, SSD1331_DATA);   
 8001d12:	88bb      	ldrh	r3, [r7, #4]
 8001d14:	b2db      	uxtb	r3, r3
 8001d16:	2101      	movs	r1, #1
 8001d18:	4618      	mov	r0, r3
 8001d1a:	f7ff ff95 	bl	8001c48 <ssd1331_write_byte>
 8001d1e:	e000      	b.n	8001d22 <ssd1331_draw_point+0x72>
		return;
 8001d20:	bf00      	nop
}
 8001d22:	3708      	adds	r7, #8
 8001d24:	46bd      	mov	sp, r7
 8001d26:	bd80      	pop	{r7, pc}

08001d28 <ssd1331_display_char>:
  * @param  chSize: 
  * @param  chMode
  * @retval 
**/
void ssd1331_display_char(uint8_t chXpos, uint8_t chYpos, uint8_t chChr, uint8_t chSize, uint16_t hwColor)
{      	
 8001d28:	b590      	push	{r4, r7, lr}
 8001d2a:	b085      	sub	sp, #20
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	4604      	mov	r4, r0
 8001d30:	4608      	mov	r0, r1
 8001d32:	4611      	mov	r1, r2
 8001d34:	461a      	mov	r2, r3
 8001d36:	4623      	mov	r3, r4
 8001d38:	71fb      	strb	r3, [r7, #7]
 8001d3a:	4603      	mov	r3, r0
 8001d3c:	71bb      	strb	r3, [r7, #6]
 8001d3e:	460b      	mov	r3, r1
 8001d40:	717b      	strb	r3, [r7, #5]
 8001d42:	4613      	mov	r3, r2
 8001d44:	713b      	strb	r3, [r7, #4]
	uint8_t i, j, chTemp;
	uint8_t chYpos0 = chYpos;
 8001d46:	79bb      	ldrb	r3, [r7, #6]
 8001d48:	733b      	strb	r3, [r7, #12]

	chTemp = 0;
 8001d4a:	2300      	movs	r3, #0
 8001d4c:	737b      	strb	r3, [r7, #13]
	if (chXpos >= OLED_WIDTH || chYpos >= OLED_HEIGHT) {
 8001d4e:	79fb      	ldrb	r3, [r7, #7]
 8001d50:	2b5f      	cmp	r3, #95	; 0x5f
 8001d52:	d857      	bhi.n	8001e04 <ssd1331_display_char+0xdc>
 8001d54:	79bb      	ldrb	r3, [r7, #6]
 8001d56:	2b3f      	cmp	r3, #63	; 0x3f
 8001d58:	d854      	bhi.n	8001e04 <ssd1331_display_char+0xdc>
		return;
	}
					   
    for (i = 0; i < chSize; i ++) {   
 8001d5a:	2300      	movs	r3, #0
 8001d5c:	73fb      	strb	r3, [r7, #15]
 8001d5e:	e04c      	b.n	8001dfa <ssd1331_display_char+0xd2>
		if (FONT_1206 == chSize) {
 8001d60:	793b      	ldrb	r3, [r7, #4]
 8001d62:	2b0c      	cmp	r3, #12
 8001d64:	d10d      	bne.n	8001d82 <ssd1331_display_char+0x5a>
			chTemp = c_chFont1206[chChr - 0x20][i];  
 8001d66:	797b      	ldrb	r3, [r7, #5]
 8001d68:	f1a3 0220 	sub.w	r2, r3, #32
 8001d6c:	7bf9      	ldrb	r1, [r7, #15]
 8001d6e:	4827      	ldr	r0, [pc, #156]	; (8001e0c <ssd1331_display_char+0xe4>)
 8001d70:	4613      	mov	r3, r2
 8001d72:	005b      	lsls	r3, r3, #1
 8001d74:	4413      	add	r3, r2
 8001d76:	009b      	lsls	r3, r3, #2
 8001d78:	4403      	add	r3, r0
 8001d7a:	440b      	add	r3, r1
 8001d7c:	781b      	ldrb	r3, [r3, #0]
 8001d7e:	737b      	strb	r3, [r7, #13]
 8001d80:	e00c      	b.n	8001d9c <ssd1331_display_char+0x74>
		} else if (FONT_1608 == chSize) { 
 8001d82:	793b      	ldrb	r3, [r7, #4]
 8001d84:	2b10      	cmp	r3, #16
 8001d86:	d109      	bne.n	8001d9c <ssd1331_display_char+0x74>
			chTemp = c_chFont1608[chChr - 0x20][i];
 8001d88:	797b      	ldrb	r3, [r7, #5]
 8001d8a:	f1a3 0220 	sub.w	r2, r3, #32
 8001d8e:	7bfb      	ldrb	r3, [r7, #15]
 8001d90:	491f      	ldr	r1, [pc, #124]	; (8001e10 <ssd1331_display_char+0xe8>)
 8001d92:	0112      	lsls	r2, r2, #4
 8001d94:	440a      	add	r2, r1
 8001d96:	4413      	add	r3, r2
 8001d98:	781b      	ldrb	r3, [r3, #0]
 8001d9a:	737b      	strb	r3, [r7, #13]
		}
		
        for (j = 0; j < 8; j ++) {
 8001d9c:	2300      	movs	r3, #0
 8001d9e:	73bb      	strb	r3, [r7, #14]
 8001da0:	e025      	b.n	8001dee <ssd1331_display_char+0xc6>
    		if (chTemp & 0x80) {
 8001da2:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	da06      	bge.n	8001db8 <ssd1331_display_char+0x90>
		  ssd1331_draw_point(chXpos, chYpos, hwColor);
 8001daa:	8c3a      	ldrh	r2, [r7, #32]
 8001dac:	79b9      	ldrb	r1, [r7, #6]
 8001dae:	79fb      	ldrb	r3, [r7, #7]
 8001db0:	4618      	mov	r0, r3
 8001db2:	f7ff ff7d 	bl	8001cb0 <ssd1331_draw_point>
 8001db6:	e005      	b.n	8001dc4 <ssd1331_display_char+0x9c>
    		} else {
		  ssd1331_draw_point(chXpos, chYpos, 0);
 8001db8:	79b9      	ldrb	r1, [r7, #6]
 8001dba:	79fb      	ldrb	r3, [r7, #7]
 8001dbc:	2200      	movs	r2, #0
 8001dbe:	4618      	mov	r0, r3
 8001dc0:	f7ff ff76 	bl	8001cb0 <ssd1331_draw_point>
		}		  
			chTemp <<= 1;
 8001dc4:	7b7b      	ldrb	r3, [r7, #13]
 8001dc6:	005b      	lsls	r3, r3, #1
 8001dc8:	737b      	strb	r3, [r7, #13]
			chYpos ++;
 8001dca:	79bb      	ldrb	r3, [r7, #6]
 8001dcc:	3301      	adds	r3, #1
 8001dce:	71bb      	strb	r3, [r7, #6]
			if ((chYpos - chYpos0) == chSize) {
 8001dd0:	79ba      	ldrb	r2, [r7, #6]
 8001dd2:	7b3b      	ldrb	r3, [r7, #12]
 8001dd4:	1ad2      	subs	r2, r2, r3
 8001dd6:	793b      	ldrb	r3, [r7, #4]
 8001dd8:	429a      	cmp	r2, r3
 8001dda:	d105      	bne.n	8001de8 <ssd1331_display_char+0xc0>
				chYpos = chYpos0;
 8001ddc:	7b3b      	ldrb	r3, [r7, #12]
 8001dde:	71bb      	strb	r3, [r7, #6]
				chXpos ++;
 8001de0:	79fb      	ldrb	r3, [r7, #7]
 8001de2:	3301      	adds	r3, #1
 8001de4:	71fb      	strb	r3, [r7, #7]
				break;
 8001de6:	e005      	b.n	8001df4 <ssd1331_display_char+0xcc>
        for (j = 0; j < 8; j ++) {
 8001de8:	7bbb      	ldrb	r3, [r7, #14]
 8001dea:	3301      	adds	r3, #1
 8001dec:	73bb      	strb	r3, [r7, #14]
 8001dee:	7bbb      	ldrb	r3, [r7, #14]
 8001df0:	2b07      	cmp	r3, #7
 8001df2:	d9d6      	bls.n	8001da2 <ssd1331_display_char+0x7a>
    for (i = 0; i < chSize; i ++) {   
 8001df4:	7bfb      	ldrb	r3, [r7, #15]
 8001df6:	3301      	adds	r3, #1
 8001df8:	73fb      	strb	r3, [r7, #15]
 8001dfa:	7bfa      	ldrb	r2, [r7, #15]
 8001dfc:	793b      	ldrb	r3, [r7, #4]
 8001dfe:	429a      	cmp	r2, r3
 8001e00:	d3ae      	bcc.n	8001d60 <ssd1331_display_char+0x38>
 8001e02:	e000      	b.n	8001e06 <ssd1331_display_char+0xde>
		return;
 8001e04:	bf00      	nop
			}
		}  	 
    } 
}
 8001e06:	3714      	adds	r7, #20
 8001e08:	46bd      	mov	sp, r7
 8001e0a:	bd90      	pop	{r4, r7, pc}
 8001e0c:	0800b378 	.word	0x0800b378
 8001e10:	0800b7ec 	.word	0x0800b7ec

08001e14 <ssd1331_display_string>:
  * @param  pchString: Pointer to a string to display on the screen 
  *         
  * @retval  None
**/
void ssd1331_display_string(uint8_t chXpos, uint8_t chYpos, const char *pchString, uint8_t chSize, uint16_t hwColor)
{
 8001e14:	b590      	push	{r4, r7, lr}
 8001e16:	b085      	sub	sp, #20
 8001e18:	af02      	add	r7, sp, #8
 8001e1a:	603a      	str	r2, [r7, #0]
 8001e1c:	461a      	mov	r2, r3
 8001e1e:	4603      	mov	r3, r0
 8001e20:	71fb      	strb	r3, [r7, #7]
 8001e22:	460b      	mov	r3, r1
 8001e24:	71bb      	strb	r3, [r7, #6]
 8001e26:	4613      	mov	r3, r2
 8001e28:	717b      	strb	r3, [r7, #5]
	if (chXpos >= OLED_WIDTH || chYpos >= OLED_HEIGHT) {
 8001e2a:	79fb      	ldrb	r3, [r7, #7]
 8001e2c:	2b5f      	cmp	r3, #95	; 0x5f
 8001e2e:	d836      	bhi.n	8001e9e <ssd1331_display_string+0x8a>
 8001e30:	79bb      	ldrb	r3, [r7, #6]
 8001e32:	2b3f      	cmp	r3, #63	; 0x3f
 8001e34:	d833      	bhi.n	8001e9e <ssd1331_display_string+0x8a>
		return;
	}
	
    while (*pchString != '\0') {       
 8001e36:	e02d      	b.n	8001e94 <ssd1331_display_string+0x80>
        if (chXpos > (OLED_WIDTH - chSize / 2)) {
 8001e38:	79fa      	ldrb	r2, [r7, #7]
 8001e3a:	797b      	ldrb	r3, [r7, #5]
 8001e3c:	085b      	lsrs	r3, r3, #1
 8001e3e:	b2db      	uxtb	r3, r3
 8001e40:	f1c3 0360 	rsb	r3, r3, #96	; 0x60
 8001e44:	429a      	cmp	r2, r3
 8001e46:	dd12      	ble.n	8001e6e <ssd1331_display_string+0x5a>
			chXpos = 0;
 8001e48:	2300      	movs	r3, #0
 8001e4a:	71fb      	strb	r3, [r7, #7]
			chYpos += chSize;
 8001e4c:	79ba      	ldrb	r2, [r7, #6]
 8001e4e:	797b      	ldrb	r3, [r7, #5]
 8001e50:	4413      	add	r3, r2
 8001e52:	71bb      	strb	r3, [r7, #6]
			if (chYpos > (OLED_HEIGHT - chSize)) {
 8001e54:	79ba      	ldrb	r2, [r7, #6]
 8001e56:	797b      	ldrb	r3, [r7, #5]
 8001e58:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 8001e5c:	429a      	cmp	r2, r3
 8001e5e:	dd06      	ble.n	8001e6e <ssd1331_display_string+0x5a>
				chYpos = chXpos = 0;
 8001e60:	2300      	movs	r3, #0
 8001e62:	71fb      	strb	r3, [r7, #7]
 8001e64:	79fb      	ldrb	r3, [r7, #7]
 8001e66:	71bb      	strb	r3, [r7, #6]
				ssd1331_clear_screen(0x00);
 8001e68:	2000      	movs	r0, #0
 8001e6a:	f000 f81c 	bl	8001ea6 <ssd1331_clear_screen>
			}
		}
		
        ssd1331_display_char(chXpos, chYpos, *pchString, chSize, hwColor);
 8001e6e:	683b      	ldr	r3, [r7, #0]
 8001e70:	781a      	ldrb	r2, [r3, #0]
 8001e72:	797c      	ldrb	r4, [r7, #5]
 8001e74:	79b9      	ldrb	r1, [r7, #6]
 8001e76:	79f8      	ldrb	r0, [r7, #7]
 8001e78:	8b3b      	ldrh	r3, [r7, #24]
 8001e7a:	9300      	str	r3, [sp, #0]
 8001e7c:	4623      	mov	r3, r4
 8001e7e:	f7ff ff53 	bl	8001d28 <ssd1331_display_char>
        chXpos += chSize / 2;
 8001e82:	797b      	ldrb	r3, [r7, #5]
 8001e84:	085b      	lsrs	r3, r3, #1
 8001e86:	b2da      	uxtb	r2, r3
 8001e88:	79fb      	ldrb	r3, [r7, #7]
 8001e8a:	4413      	add	r3, r2
 8001e8c:	71fb      	strb	r3, [r7, #7]
        pchString ++;
 8001e8e:	683b      	ldr	r3, [r7, #0]
 8001e90:	3301      	adds	r3, #1
 8001e92:	603b      	str	r3, [r7, #0]
    while (*pchString != '\0') {       
 8001e94:	683b      	ldr	r3, [r7, #0]
 8001e96:	781b      	ldrb	r3, [r3, #0]
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d1cd      	bne.n	8001e38 <ssd1331_display_string+0x24>
 8001e9c:	e000      	b.n	8001ea0 <ssd1331_display_string+0x8c>
		return;
 8001e9e:	bf00      	nop
    } 
}
 8001ea0:	370c      	adds	r7, #12
 8001ea2:	46bd      	mov	sp, r7
 8001ea4:	bd90      	pop	{r4, r7, pc}

08001ea6 <ssd1331_clear_screen>:
        }
    }
}

void ssd1331_clear_screen(uint16_t hwColor)  
{
 8001ea6:	b580      	push	{r7, lr}
 8001ea8:	b084      	sub	sp, #16
 8001eaa:	af00      	add	r7, sp, #0
 8001eac:	4603      	mov	r3, r0
 8001eae:	80fb      	strh	r3, [r7, #6]
	uint16_t i, j;
	
	for(i = 0; i < OLED_HEIGHT; i ++){
 8001eb0:	2300      	movs	r3, #0
 8001eb2:	81fb      	strh	r3, [r7, #14]
 8001eb4:	e013      	b.n	8001ede <ssd1331_clear_screen+0x38>
		for(j = 0; j < OLED_WIDTH; j ++){
 8001eb6:	2300      	movs	r3, #0
 8001eb8:	81bb      	strh	r3, [r7, #12]
 8001eba:	e00a      	b.n	8001ed2 <ssd1331_clear_screen+0x2c>
			ssd1331_draw_point(j, i, hwColor);
 8001ebc:	89bb      	ldrh	r3, [r7, #12]
 8001ebe:	b2db      	uxtb	r3, r3
 8001ec0:	89fa      	ldrh	r2, [r7, #14]
 8001ec2:	b2d1      	uxtb	r1, r2
 8001ec4:	88fa      	ldrh	r2, [r7, #6]
 8001ec6:	4618      	mov	r0, r3
 8001ec8:	f7ff fef2 	bl	8001cb0 <ssd1331_draw_point>
		for(j = 0; j < OLED_WIDTH; j ++){
 8001ecc:	89bb      	ldrh	r3, [r7, #12]
 8001ece:	3301      	adds	r3, #1
 8001ed0:	81bb      	strh	r3, [r7, #12]
 8001ed2:	89bb      	ldrh	r3, [r7, #12]
 8001ed4:	2b5f      	cmp	r3, #95	; 0x5f
 8001ed6:	d9f1      	bls.n	8001ebc <ssd1331_clear_screen+0x16>
	for(i = 0; i < OLED_HEIGHT; i ++){
 8001ed8:	89fb      	ldrh	r3, [r7, #14]
 8001eda:	3301      	adds	r3, #1
 8001edc:	81fb      	strh	r3, [r7, #14]
 8001ede:	89fb      	ldrh	r3, [r7, #14]
 8001ee0:	2b3f      	cmp	r3, #63	; 0x3f
 8001ee2:	d9e8      	bls.n	8001eb6 <ssd1331_clear_screen+0x10>
		}
	}
}
 8001ee4:	bf00      	nop
 8001ee6:	bf00      	nop
 8001ee8:	3710      	adds	r7, #16
 8001eea:	46bd      	mov	sp, r7
 8001eec:	bd80      	pop	{r7, pc}
	...

08001ef0 <ssd1331_init>:


void ssd1331_init(void)
{
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	af00      	add	r7, sp, #0
  __SSD1331_RES_SET();  //RES set
 8001ef4:	2201      	movs	r2, #1
 8001ef6:	2140      	movs	r1, #64	; 0x40
 8001ef8:	4852      	ldr	r0, [pc, #328]	; (8002044 <ssd1331_init+0x154>)
 8001efa:	f000 fe07 	bl	8002b0c <HAL_GPIO_WritePin>
  __SSD1331_CS_SET();
 8001efe:	2201      	movs	r2, #1
 8001f00:	2110      	movs	r1, #16
 8001f02:	4850      	ldr	r0, [pc, #320]	; (8002044 <ssd1331_init+0x154>)
 8001f04:	f000 fe02 	bl	8002b0c <HAL_GPIO_WritePin>
	
  ssd1331_write_byte(DISPLAY_OFF, SSD1331_CMD);          //Display Off
 8001f08:	2100      	movs	r1, #0
 8001f0a:	20ae      	movs	r0, #174	; 0xae
 8001f0c:	f7ff fe9c 	bl	8001c48 <ssd1331_write_byte>
  ssd1331_write_byte(SET_CONTRAST_A, SSD1331_CMD);       //Set contrast for color A
 8001f10:	2100      	movs	r1, #0
 8001f12:	2081      	movs	r0, #129	; 0x81
 8001f14:	f7ff fe98 	bl	8001c48 <ssd1331_write_byte>
  ssd1331_write_byte(0xFF, SSD1331_CMD);                     //145 0x91
 8001f18:	2100      	movs	r1, #0
 8001f1a:	20ff      	movs	r0, #255	; 0xff
 8001f1c:	f7ff fe94 	bl	8001c48 <ssd1331_write_byte>
  ssd1331_write_byte(SET_CONTRAST_B, SSD1331_CMD);       //Set contrast for color B
 8001f20:	2100      	movs	r1, #0
 8001f22:	2082      	movs	r0, #130	; 0x82
 8001f24:	f7ff fe90 	bl	8001c48 <ssd1331_write_byte>
  ssd1331_write_byte(0xFF, SSD1331_CMD);                     //80 0x50
 8001f28:	2100      	movs	r1, #0
 8001f2a:	20ff      	movs	r0, #255	; 0xff
 8001f2c:	f7ff fe8c 	bl	8001c48 <ssd1331_write_byte>
  ssd1331_write_byte(SET_CONTRAST_C, SSD1331_CMD);       //Set contrast for color C
 8001f30:	2100      	movs	r1, #0
 8001f32:	2083      	movs	r0, #131	; 0x83
 8001f34:	f7ff fe88 	bl	8001c48 <ssd1331_write_byte>
  ssd1331_write_byte(0xFF, SSD1331_CMD);                     //125 0x7D
 8001f38:	2100      	movs	r1, #0
 8001f3a:	20ff      	movs	r0, #255	; 0xff
 8001f3c:	f7ff fe84 	bl	8001c48 <ssd1331_write_byte>
  ssd1331_write_byte(MASTER_CURRENT_CONTROL, SSD1331_CMD);//master current control
 8001f40:	2100      	movs	r1, #0
 8001f42:	2087      	movs	r0, #135	; 0x87
 8001f44:	f7ff fe80 	bl	8001c48 <ssd1331_write_byte>
  ssd1331_write_byte(0x06, SSD1331_CMD);                     //6
 8001f48:	2100      	movs	r1, #0
 8001f4a:	2006      	movs	r0, #6
 8001f4c:	f7ff fe7c 	bl	8001c48 <ssd1331_write_byte>
  ssd1331_write_byte(SET_PRECHARGE_SPEED_A, SSD1331_CMD);//Set Second Pre-change Speed For ColorA
 8001f50:	2100      	movs	r1, #0
 8001f52:	208a      	movs	r0, #138	; 0x8a
 8001f54:	f7ff fe78 	bl	8001c48 <ssd1331_write_byte>
  ssd1331_write_byte(0x64, SSD1331_CMD);                     //100
 8001f58:	2100      	movs	r1, #0
 8001f5a:	2064      	movs	r0, #100	; 0x64
 8001f5c:	f7ff fe74 	bl	8001c48 <ssd1331_write_byte>
  ssd1331_write_byte(SET_PRECHARGE_SPEED_B, SSD1331_CMD);//Set Second Pre-change Speed For ColorB
 8001f60:	2100      	movs	r1, #0
 8001f62:	208b      	movs	r0, #139	; 0x8b
 8001f64:	f7ff fe70 	bl	8001c48 <ssd1331_write_byte>
  ssd1331_write_byte(0x78, SSD1331_CMD);                     //120
 8001f68:	2100      	movs	r1, #0
 8001f6a:	2078      	movs	r0, #120	; 0x78
 8001f6c:	f7ff fe6c 	bl	8001c48 <ssd1331_write_byte>
  ssd1331_write_byte(SET_PRECHARGE_SPEED_C, SSD1331_CMD);//Set Second Pre-change Speed For ColorC
 8001f70:	2100      	movs	r1, #0
 8001f72:	208c      	movs	r0, #140	; 0x8c
 8001f74:	f7ff fe68 	bl	8001c48 <ssd1331_write_byte>
  ssd1331_write_byte(0x64, SSD1331_CMD);                     //100
 8001f78:	2100      	movs	r1, #0
 8001f7a:	2064      	movs	r0, #100	; 0x64
 8001f7c:	f7ff fe64 	bl	8001c48 <ssd1331_write_byte>
  ssd1331_write_byte(SET_REMAP, SSD1331_CMD);            //set remap & data format
 8001f80:	2100      	movs	r1, #0
 8001f82:	20a0      	movs	r0, #160	; 0xa0
 8001f84:	f7ff fe60 	bl	8001c48 <ssd1331_write_byte>
  ssd1331_write_byte(0x72, SSD1331_CMD);                     //0x72              
 8001f88:	2100      	movs	r1, #0
 8001f8a:	2072      	movs	r0, #114	; 0x72
 8001f8c:	f7ff fe5c 	bl	8001c48 <ssd1331_write_byte>
  ssd1331_write_byte(SET_DISPLAY_START_LINE, SSD1331_CMD);//Set display Start Line
 8001f90:	2100      	movs	r1, #0
 8001f92:	20a1      	movs	r0, #161	; 0xa1
 8001f94:	f7ff fe58 	bl	8001c48 <ssd1331_write_byte>
  ssd1331_write_byte(0x0, SSD1331_CMD);
 8001f98:	2100      	movs	r1, #0
 8001f9a:	2000      	movs	r0, #0
 8001f9c:	f7ff fe54 	bl	8001c48 <ssd1331_write_byte>
  ssd1331_write_byte(SET_DISPLAY_OFFSET, SSD1331_CMD);   //Set display offset
 8001fa0:	2100      	movs	r1, #0
 8001fa2:	20a2      	movs	r0, #162	; 0xa2
 8001fa4:	f7ff fe50 	bl	8001c48 <ssd1331_write_byte>
  ssd1331_write_byte(0x0, SSD1331_CMD);
 8001fa8:	2100      	movs	r1, #0
 8001faa:	2000      	movs	r0, #0
 8001fac:	f7ff fe4c 	bl	8001c48 <ssd1331_write_byte>
  ssd1331_write_byte(NORMAL_DISPLAY, SSD1331_CMD);       //Set display mode
 8001fb0:	2100      	movs	r1, #0
 8001fb2:	20a4      	movs	r0, #164	; 0xa4
 8001fb4:	f7ff fe48 	bl	8001c48 <ssd1331_write_byte>
  ssd1331_write_byte(SET_MULTIPLEX_RATIO, SSD1331_CMD);  //Set multiplex ratio
 8001fb8:	2100      	movs	r1, #0
 8001fba:	20a8      	movs	r0, #168	; 0xa8
 8001fbc:	f7ff fe44 	bl	8001c48 <ssd1331_write_byte>
  ssd1331_write_byte(0x3F, SSD1331_CMD);
 8001fc0:	2100      	movs	r1, #0
 8001fc2:	203f      	movs	r0, #63	; 0x3f
 8001fc4:	f7ff fe40 	bl	8001c48 <ssd1331_write_byte>
  ssd1331_write_byte(SET_MASTER_CONFIGURE, SSD1331_CMD); //Set master configuration
 8001fc8:	2100      	movs	r1, #0
 8001fca:	20ad      	movs	r0, #173	; 0xad
 8001fcc:	f7ff fe3c 	bl	8001c48 <ssd1331_write_byte>
  ssd1331_write_byte(0x8E, SSD1331_CMD);
 8001fd0:	2100      	movs	r1, #0
 8001fd2:	208e      	movs	r0, #142	; 0x8e
 8001fd4:	f7ff fe38 	bl	8001c48 <ssd1331_write_byte>
  ssd1331_write_byte(POWER_SAVE_MODE, SSD1331_CMD);      //Set Power Save Mode
 8001fd8:	2100      	movs	r1, #0
 8001fda:	20b0      	movs	r0, #176	; 0xb0
 8001fdc:	f7ff fe34 	bl	8001c48 <ssd1331_write_byte>
  ssd1331_write_byte(0x00, SSD1331_CMD);                     //0x00
 8001fe0:	2100      	movs	r1, #0
 8001fe2:	2000      	movs	r0, #0
 8001fe4:	f7ff fe30 	bl	8001c48 <ssd1331_write_byte>
  ssd1331_write_byte(PHASE_PERIOD_ADJUSTMENT, SSD1331_CMD);//phase 1 and 2 period adjustment
 8001fe8:	2100      	movs	r1, #0
 8001fea:	20b1      	movs	r0, #177	; 0xb1
 8001fec:	f7ff fe2c 	bl	8001c48 <ssd1331_write_byte>
  ssd1331_write_byte(0x31, SSD1331_CMD);                     //0x31
 8001ff0:	2100      	movs	r1, #0
 8001ff2:	2031      	movs	r0, #49	; 0x31
 8001ff4:	f7ff fe28 	bl	8001c48 <ssd1331_write_byte>
  ssd1331_write_byte(DISPLAY_CLOCK_DIV, SSD1331_CMD);    //display clock divider/oscillator frequency
 8001ff8:	2100      	movs	r1, #0
 8001ffa:	20b3      	movs	r0, #179	; 0xb3
 8001ffc:	f7ff fe24 	bl	8001c48 <ssd1331_write_byte>
  ssd1331_write_byte(0xF0, SSD1331_CMD);
 8002000:	2100      	movs	r1, #0
 8002002:	20f0      	movs	r0, #240	; 0xf0
 8002004:	f7ff fe20 	bl	8001c48 <ssd1331_write_byte>
  ssd1331_write_byte(SET_PRECHARGE_VOLTAGE, SSD1331_CMD);//Set Pre-Change Level
 8002008:	2100      	movs	r1, #0
 800200a:	20bb      	movs	r0, #187	; 0xbb
 800200c:	f7ff fe1c 	bl	8001c48 <ssd1331_write_byte>
  ssd1331_write_byte(0x3A, SSD1331_CMD);
 8002010:	2100      	movs	r1, #0
 8002012:	203a      	movs	r0, #58	; 0x3a
 8002014:	f7ff fe18 	bl	8001c48 <ssd1331_write_byte>
  ssd1331_write_byte(SET_V_VOLTAGE, SSD1331_CMD);        //Set vcomH
 8002018:	2100      	movs	r1, #0
 800201a:	20be      	movs	r0, #190	; 0xbe
 800201c:	f7ff fe14 	bl	8001c48 <ssd1331_write_byte>
  ssd1331_write_byte(0x3E, SSD1331_CMD);
 8002020:	2100      	movs	r1, #0
 8002022:	203e      	movs	r0, #62	; 0x3e
 8002024:	f7ff fe10 	bl	8001c48 <ssd1331_write_byte>
  ssd1331_write_byte(DEACTIVE_SCROLLING, SSD1331_CMD);   //disable scrolling
 8002028:	2100      	movs	r1, #0
 800202a:	202e      	movs	r0, #46	; 0x2e
 800202c:	f7ff fe0c 	bl	8001c48 <ssd1331_write_byte>
  ssd1331_write_byte(NORMAL_BRIGHTNESS_DISPLAY_ON, SSD1331_CMD);//set display on
 8002030:	2100      	movs	r1, #0
 8002032:	20af      	movs	r0, #175	; 0xaf
 8002034:	f7ff fe08 	bl	8001c48 <ssd1331_write_byte>
  
  //ssd1331_fill_rect(0, 0, 96, 64, 0x0000);
  ssd1331_clear_screen(0x0000);
 8002038:	2000      	movs	r0, #0
 800203a:	f7ff ff34 	bl	8001ea6 <ssd1331_clear_screen>
}
 800203e:	bf00      	nop
 8002040:	bd80      	pop	{r7, pc}
 8002042:	bf00      	nop
 8002044:	48000400 	.word	0x48000400

08002048 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002048:	b480      	push	{r7}
 800204a:	b083      	sub	sp, #12
 800204c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800204e:	4b0f      	ldr	r3, [pc, #60]	; (800208c <HAL_MspInit+0x44>)
 8002050:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002052:	4a0e      	ldr	r2, [pc, #56]	; (800208c <HAL_MspInit+0x44>)
 8002054:	f043 0301 	orr.w	r3, r3, #1
 8002058:	6613      	str	r3, [r2, #96]	; 0x60
 800205a:	4b0c      	ldr	r3, [pc, #48]	; (800208c <HAL_MspInit+0x44>)
 800205c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800205e:	f003 0301 	and.w	r3, r3, #1
 8002062:	607b      	str	r3, [r7, #4]
 8002064:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002066:	4b09      	ldr	r3, [pc, #36]	; (800208c <HAL_MspInit+0x44>)
 8002068:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800206a:	4a08      	ldr	r2, [pc, #32]	; (800208c <HAL_MspInit+0x44>)
 800206c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002070:	6593      	str	r3, [r2, #88]	; 0x58
 8002072:	4b06      	ldr	r3, [pc, #24]	; (800208c <HAL_MspInit+0x44>)
 8002074:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002076:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800207a:	603b      	str	r3, [r7, #0]
 800207c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800207e:	bf00      	nop
 8002080:	370c      	adds	r7, #12
 8002082:	46bd      	mov	sp, r7
 8002084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002088:	4770      	bx	lr
 800208a:	bf00      	nop
 800208c:	40021000 	.word	0x40021000

08002090 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002090:	b580      	push	{r7, lr}
 8002092:	b08a      	sub	sp, #40	; 0x28
 8002094:	af00      	add	r7, sp, #0
 8002096:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002098:	f107 0314 	add.w	r3, r7, #20
 800209c:	2200      	movs	r2, #0
 800209e:	601a      	str	r2, [r3, #0]
 80020a0:	605a      	str	r2, [r3, #4]
 80020a2:	609a      	str	r2, [r3, #8]
 80020a4:	60da      	str	r2, [r3, #12]
 80020a6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	4a18      	ldr	r2, [pc, #96]	; (8002110 <HAL_SPI_MspInit+0x80>)
 80020ae:	4293      	cmp	r3, r2
 80020b0:	d129      	bne.n	8002106 <HAL_SPI_MspInit+0x76>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80020b2:	4b18      	ldr	r3, [pc, #96]	; (8002114 <HAL_SPI_MspInit+0x84>)
 80020b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80020b6:	4a17      	ldr	r2, [pc, #92]	; (8002114 <HAL_SPI_MspInit+0x84>)
 80020b8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80020bc:	6613      	str	r3, [r2, #96]	; 0x60
 80020be:	4b15      	ldr	r3, [pc, #84]	; (8002114 <HAL_SPI_MspInit+0x84>)
 80020c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80020c2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80020c6:	613b      	str	r3, [r7, #16]
 80020c8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80020ca:	4b12      	ldr	r3, [pc, #72]	; (8002114 <HAL_SPI_MspInit+0x84>)
 80020cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020ce:	4a11      	ldr	r2, [pc, #68]	; (8002114 <HAL_SPI_MspInit+0x84>)
 80020d0:	f043 0301 	orr.w	r3, r3, #1
 80020d4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80020d6:	4b0f      	ldr	r3, [pc, #60]	; (8002114 <HAL_SPI_MspInit+0x84>)
 80020d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020da:	f003 0301 	and.w	r3, r3, #1
 80020de:	60fb      	str	r3, [r7, #12]
 80020e0:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA12     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_12;
 80020e2:	f44f 5381 	mov.w	r3, #4128	; 0x1020
 80020e6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020e8:	2302      	movs	r3, #2
 80020ea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020ec:	2300      	movs	r3, #0
 80020ee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020f0:	2303      	movs	r3, #3
 80020f2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80020f4:	2305      	movs	r3, #5
 80020f6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020f8:	f107 0314 	add.w	r3, r7, #20
 80020fc:	4619      	mov	r1, r3
 80020fe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002102:	f000 fb81 	bl	8002808 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8002106:	bf00      	nop
 8002108:	3728      	adds	r7, #40	; 0x28
 800210a:	46bd      	mov	sp, r7
 800210c:	bd80      	pop	{r7, pc}
 800210e:	bf00      	nop
 8002110:	40013000 	.word	0x40013000
 8002114:	40021000 	.word	0x40021000

08002118 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8002118:	b480      	push	{r7}
 800211a:	b085      	sub	sp, #20
 800211c:	af00      	add	r7, sp, #0
 800211e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	4a0a      	ldr	r2, [pc, #40]	; (8002150 <HAL_TIM_PWM_MspInit+0x38>)
 8002126:	4293      	cmp	r3, r2
 8002128:	d10b      	bne.n	8002142 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800212a:	4b0a      	ldr	r3, [pc, #40]	; (8002154 <HAL_TIM_PWM_MspInit+0x3c>)
 800212c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800212e:	4a09      	ldr	r2, [pc, #36]	; (8002154 <HAL_TIM_PWM_MspInit+0x3c>)
 8002130:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002134:	6613      	str	r3, [r2, #96]	; 0x60
 8002136:	4b07      	ldr	r3, [pc, #28]	; (8002154 <HAL_TIM_PWM_MspInit+0x3c>)
 8002138:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800213a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800213e:	60fb      	str	r3, [r7, #12]
 8002140:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8002142:	bf00      	nop
 8002144:	3714      	adds	r7, #20
 8002146:	46bd      	mov	sp, r7
 8002148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800214c:	4770      	bx	lr
 800214e:	bf00      	nop
 8002150:	40012c00 	.word	0x40012c00
 8002154:	40021000 	.word	0x40021000

08002158 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002158:	b580      	push	{r7, lr}
 800215a:	b088      	sub	sp, #32
 800215c:	af00      	add	r7, sp, #0
 800215e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002160:	f107 030c 	add.w	r3, r7, #12
 8002164:	2200      	movs	r2, #0
 8002166:	601a      	str	r2, [r3, #0]
 8002168:	605a      	str	r2, [r3, #4]
 800216a:	609a      	str	r2, [r3, #8]
 800216c:	60da      	str	r2, [r3, #12]
 800216e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	4a11      	ldr	r2, [pc, #68]	; (80021bc <HAL_TIM_MspPostInit+0x64>)
 8002176:	4293      	cmp	r3, r2
 8002178:	d11c      	bne.n	80021b4 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800217a:	4b11      	ldr	r3, [pc, #68]	; (80021c0 <HAL_TIM_MspPostInit+0x68>)
 800217c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800217e:	4a10      	ldr	r2, [pc, #64]	; (80021c0 <HAL_TIM_MspPostInit+0x68>)
 8002180:	f043 0301 	orr.w	r3, r3, #1
 8002184:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002186:	4b0e      	ldr	r3, [pc, #56]	; (80021c0 <HAL_TIM_MspPostInit+0x68>)
 8002188:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800218a:	f003 0301 	and.w	r3, r3, #1
 800218e:	60bb      	str	r3, [r7, #8]
 8002190:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA7     ------> TIM1_CH1N
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8002192:	2380      	movs	r3, #128	; 0x80
 8002194:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002196:	2302      	movs	r3, #2
 8002198:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800219a:	2300      	movs	r3, #0
 800219c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800219e:	2300      	movs	r3, #0
 80021a0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80021a2:	2301      	movs	r3, #1
 80021a4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021a6:	f107 030c 	add.w	r3, r7, #12
 80021aa:	4619      	mov	r1, r3
 80021ac:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80021b0:	f000 fb2a 	bl	8002808 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80021b4:	bf00      	nop
 80021b6:	3720      	adds	r7, #32
 80021b8:	46bd      	mov	sp, r7
 80021ba:	bd80      	pop	{r7, pc}
 80021bc:	40012c00 	.word	0x40012c00
 80021c0:	40021000 	.word	0x40021000

080021c4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80021c4:	b580      	push	{r7, lr}
 80021c6:	b09e      	sub	sp, #120	; 0x78
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021cc:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80021d0:	2200      	movs	r2, #0
 80021d2:	601a      	str	r2, [r3, #0]
 80021d4:	605a      	str	r2, [r3, #4]
 80021d6:	609a      	str	r2, [r3, #8]
 80021d8:	60da      	str	r2, [r3, #12]
 80021da:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80021dc:	f107 0310 	add.w	r3, r7, #16
 80021e0:	2254      	movs	r2, #84	; 0x54
 80021e2:	2100      	movs	r1, #0
 80021e4:	4618      	mov	r0, r3
 80021e6:	f003 fca9 	bl	8005b3c <memset>
  if(huart->Instance==USART2)
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	4a28      	ldr	r2, [pc, #160]	; (8002290 <HAL_UART_MspInit+0xcc>)
 80021f0:	4293      	cmp	r3, r2
 80021f2:	d148      	bne.n	8002286 <HAL_UART_MspInit+0xc2>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80021f4:	2302      	movs	r3, #2
 80021f6:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80021f8:	2300      	movs	r3, #0
 80021fa:	637b      	str	r3, [r7, #52]	; 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80021fc:	f107 0310 	add.w	r3, r7, #16
 8002200:	4618      	mov	r0, r3
 8002202:	f001 fb47 	bl	8003894 <HAL_RCCEx_PeriphCLKConfig>
 8002206:	4603      	mov	r3, r0
 8002208:	2b00      	cmp	r3, #0
 800220a:	d001      	beq.n	8002210 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800220c:	f7ff fd16 	bl	8001c3c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002210:	4b20      	ldr	r3, [pc, #128]	; (8002294 <HAL_UART_MspInit+0xd0>)
 8002212:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002214:	4a1f      	ldr	r2, [pc, #124]	; (8002294 <HAL_UART_MspInit+0xd0>)
 8002216:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800221a:	6593      	str	r3, [r2, #88]	; 0x58
 800221c:	4b1d      	ldr	r3, [pc, #116]	; (8002294 <HAL_UART_MspInit+0xd0>)
 800221e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002220:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002224:	60fb      	str	r3, [r7, #12]
 8002226:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002228:	4b1a      	ldr	r3, [pc, #104]	; (8002294 <HAL_UART_MspInit+0xd0>)
 800222a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800222c:	4a19      	ldr	r2, [pc, #100]	; (8002294 <HAL_UART_MspInit+0xd0>)
 800222e:	f043 0301 	orr.w	r3, r3, #1
 8002232:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002234:	4b17      	ldr	r3, [pc, #92]	; (8002294 <HAL_UART_MspInit+0xd0>)
 8002236:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002238:	f003 0301 	and.w	r3, r3, #1
 800223c:	60bb      	str	r3, [r7, #8]
 800223e:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15 (JTDI)     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 8002240:	2304      	movs	r3, #4
 8002242:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002244:	2302      	movs	r3, #2
 8002246:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002248:	2300      	movs	r3, #0
 800224a:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800224c:	2303      	movs	r3, #3
 800224e:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002250:	2307      	movs	r3, #7
 8002252:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8002254:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8002258:	4619      	mov	r1, r3
 800225a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800225e:	f000 fad3 	bl	8002808 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_RX_Pin;
 8002262:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002266:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002268:	2302      	movs	r3, #2
 800226a:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800226c:	2300      	movs	r3, #0
 800226e:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002270:	2303      	movs	r3, #3
 8002272:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 8002274:	2303      	movs	r3, #3
 8002276:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8002278:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800227c:	4619      	mov	r1, r3
 800227e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002282:	f000 fac1 	bl	8002808 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002286:	bf00      	nop
 8002288:	3778      	adds	r7, #120	; 0x78
 800228a:	46bd      	mov	sp, r7
 800228c:	bd80      	pop	{r7, pc}
 800228e:	bf00      	nop
 8002290:	40004400 	.word	0x40004400
 8002294:	40021000 	.word	0x40021000

08002298 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002298:	b480      	push	{r7}
 800229a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800229c:	e7fe      	b.n	800229c <NMI_Handler+0x4>

0800229e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800229e:	b480      	push	{r7}
 80022a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80022a2:	e7fe      	b.n	80022a2 <HardFault_Handler+0x4>

080022a4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80022a4:	b480      	push	{r7}
 80022a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80022a8:	e7fe      	b.n	80022a8 <MemManage_Handler+0x4>

080022aa <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80022aa:	b480      	push	{r7}
 80022ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80022ae:	e7fe      	b.n	80022ae <BusFault_Handler+0x4>

080022b0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80022b0:	b480      	push	{r7}
 80022b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80022b4:	e7fe      	b.n	80022b4 <UsageFault_Handler+0x4>

080022b6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80022b6:	b480      	push	{r7}
 80022b8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80022ba:	bf00      	nop
 80022bc:	46bd      	mov	sp, r7
 80022be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c2:	4770      	bx	lr

080022c4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80022c4:	b480      	push	{r7}
 80022c6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80022c8:	bf00      	nop
 80022ca:	46bd      	mov	sp, r7
 80022cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d0:	4770      	bx	lr

080022d2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80022d2:	b480      	push	{r7}
 80022d4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80022d6:	bf00      	nop
 80022d8:	46bd      	mov	sp, r7
 80022da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022de:	4770      	bx	lr

080022e0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80022e0:	b580      	push	{r7, lr}
 80022e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80022e4:	f000 f966 	bl	80025b4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80022e8:	bf00      	nop
 80022ea:	bd80      	pop	{r7, pc}

080022ec <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80022ec:	b480      	push	{r7}
 80022ee:	af00      	add	r7, sp, #0
	return 1;
 80022f0:	2301      	movs	r3, #1
}
 80022f2:	4618      	mov	r0, r3
 80022f4:	46bd      	mov	sp, r7
 80022f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022fa:	4770      	bx	lr

080022fc <_kill>:

int _kill(int pid, int sig)
{
 80022fc:	b580      	push	{r7, lr}
 80022fe:	b082      	sub	sp, #8
 8002300:	af00      	add	r7, sp, #0
 8002302:	6078      	str	r0, [r7, #4]
 8002304:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002306:	f003 fbef 	bl	8005ae8 <__errno>
 800230a:	4603      	mov	r3, r0
 800230c:	2216      	movs	r2, #22
 800230e:	601a      	str	r2, [r3, #0]
	return -1;
 8002310:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002314:	4618      	mov	r0, r3
 8002316:	3708      	adds	r7, #8
 8002318:	46bd      	mov	sp, r7
 800231a:	bd80      	pop	{r7, pc}

0800231c <_exit>:

void _exit (int status)
{
 800231c:	b580      	push	{r7, lr}
 800231e:	b082      	sub	sp, #8
 8002320:	af00      	add	r7, sp, #0
 8002322:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002324:	f04f 31ff 	mov.w	r1, #4294967295
 8002328:	6878      	ldr	r0, [r7, #4]
 800232a:	f7ff ffe7 	bl	80022fc <_kill>
	while (1) {}		/* Make sure we hang here */
 800232e:	e7fe      	b.n	800232e <_exit+0x12>

08002330 <_read>:
}

int _read (int file, char *ptr, int len)
{
 8002330:	b580      	push	{r7, lr}
 8002332:	b086      	sub	sp, #24
 8002334:	af00      	add	r7, sp, #0
 8002336:	60f8      	str	r0, [r7, #12]
 8002338:	60b9      	str	r1, [r7, #8]
 800233a:	607a      	str	r2, [r7, #4]
//	}

	// Conestoga College implemented change to cause VCP to be used for stdin
	extern UART_HandleTypeDef huart2;

	int returnVal= 0;
 800233c:	2300      	movs	r3, #0
 800233e:	617b      	str	r3, [r7, #20]
	len = 1;						// over ride the read and only get 1 char
 8002340:	2301      	movs	r3, #1
 8002342:	607b      	str	r3, [r7, #4]

	returnVal = HAL_UART_Receive(&huart2, (uint8_t *)ptr, len, 0xffffffff);
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	b29a      	uxth	r2, r3
 8002348:	f04f 33ff 	mov.w	r3, #4294967295
 800234c:	68b9      	ldr	r1, [r7, #8]
 800234e:	480a      	ldr	r0, [pc, #40]	; (8002378 <_read+0x48>)
 8002350:	f002 ff1c 	bl	800518c <HAL_UART_Receive>
 8002354:	4603      	mov	r3, r0
 8002356:	617b      	str	r3, [r7, #20]
	if( returnVal == HAL_OK )
 8002358:	697b      	ldr	r3, [r7, #20]
 800235a:	2b00      	cmp	r3, #0
 800235c:	d101      	bne.n	8002362 <_read+0x32>
		return len;
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	e006      	b.n	8002370 <_read+0x40>
	else if( returnVal == HAL_TIMEOUT )
 8002362:	697b      	ldr	r3, [r7, #20]
 8002364:	2b03      	cmp	r3, #3
 8002366:	d101      	bne.n	800236c <_read+0x3c>
		return 0;
 8002368:	2300      	movs	r3, #0
 800236a:	e001      	b.n	8002370 <_read+0x40>
	else
		return EOF;
 800236c:	f04f 33ff 	mov.w	r3, #4294967295

}
 8002370:	4618      	mov	r0, r3
 8002372:	3718      	adds	r7, #24
 8002374:	46bd      	mov	sp, r7
 8002376:	bd80      	pop	{r7, pc}
 8002378:	200002ac 	.word	0x200002ac

0800237c <_write>:

int _write(int file, char *ptr, int len){
 800237c:	b580      	push	{r7, lr}
 800237e:	b086      	sub	sp, #24
 8002380:	af00      	add	r7, sp, #0
 8002382:	60f8      	str	r0, [r7, #12]
 8002384:	60b9      	str	r1, [r7, #8]
 8002386:	607a      	str	r2, [r7, #4]
	extern UART_HandleTypeDef huart2;
	HAL_StatusTypeDef result = HAL_OK;
 8002388:	2300      	movs	r3, #0
 800238a:	75fb      	strb	r3, [r7, #23]
	result = HAL_UART_Transmit(&huart2, (uint8_t *)ptr, len, HAL_MAX_DELAY);
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	b29a      	uxth	r2, r3
 8002390:	f04f 33ff 	mov.w	r3, #4294967295
 8002394:	68b9      	ldr	r1, [r7, #8]
 8002396:	4809      	ldr	r0, [pc, #36]	; (80023bc <_write+0x40>)
 8002398:	f002 fe64 	bl	8005064 <HAL_UART_Transmit>
 800239c:	4603      	mov	r3, r0
 800239e:	75fb      	strb	r3, [r7, #23]
	if(result == HAL_ERROR || result == HAL_BUSY)
 80023a0:	7dfb      	ldrb	r3, [r7, #23]
 80023a2:	2b01      	cmp	r3, #1
 80023a4:	d002      	beq.n	80023ac <_write+0x30>
 80023a6:	7dfb      	ldrb	r3, [r7, #23]
 80023a8:	2b02      	cmp	r3, #2
 80023aa:	d101      	bne.n	80023b0 <_write+0x34>
	{
		Error_Handler();
 80023ac:	f7ff fc46 	bl	8001c3c <Error_Handler>
	}

	return len;
 80023b0:	687b      	ldr	r3, [r7, #4]
}
 80023b2:	4618      	mov	r0, r3
 80023b4:	3718      	adds	r7, #24
 80023b6:	46bd      	mov	sp, r7
 80023b8:	bd80      	pop	{r7, pc}
 80023ba:	bf00      	nop
 80023bc:	200002ac 	.word	0x200002ac

080023c0 <_close>:



int _close(int file)
{
 80023c0:	b480      	push	{r7}
 80023c2:	b083      	sub	sp, #12
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	6078      	str	r0, [r7, #4]
	return -1;
 80023c8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80023cc:	4618      	mov	r0, r3
 80023ce:	370c      	adds	r7, #12
 80023d0:	46bd      	mov	sp, r7
 80023d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d6:	4770      	bx	lr

080023d8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80023d8:	b480      	push	{r7}
 80023da:	b083      	sub	sp, #12
 80023dc:	af00      	add	r7, sp, #0
 80023de:	6078      	str	r0, [r7, #4]
 80023e0:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80023e2:	683b      	ldr	r3, [r7, #0]
 80023e4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80023e8:	605a      	str	r2, [r3, #4]
	return 0;
 80023ea:	2300      	movs	r3, #0
}
 80023ec:	4618      	mov	r0, r3
 80023ee:	370c      	adds	r7, #12
 80023f0:	46bd      	mov	sp, r7
 80023f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f6:	4770      	bx	lr

080023f8 <_isatty>:

int _isatty(int file)
{
 80023f8:	b480      	push	{r7}
 80023fa:	b083      	sub	sp, #12
 80023fc:	af00      	add	r7, sp, #0
 80023fe:	6078      	str	r0, [r7, #4]
	return 1;
 8002400:	2301      	movs	r3, #1
}
 8002402:	4618      	mov	r0, r3
 8002404:	370c      	adds	r7, #12
 8002406:	46bd      	mov	sp, r7
 8002408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800240c:	4770      	bx	lr

0800240e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800240e:	b480      	push	{r7}
 8002410:	b085      	sub	sp, #20
 8002412:	af00      	add	r7, sp, #0
 8002414:	60f8      	str	r0, [r7, #12]
 8002416:	60b9      	str	r1, [r7, #8]
 8002418:	607a      	str	r2, [r7, #4]
	return 0;
 800241a:	2300      	movs	r3, #0
}
 800241c:	4618      	mov	r0, r3
 800241e:	3714      	adds	r7, #20
 8002420:	46bd      	mov	sp, r7
 8002422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002426:	4770      	bx	lr

08002428 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002428:	b580      	push	{r7, lr}
 800242a:	b086      	sub	sp, #24
 800242c:	af00      	add	r7, sp, #0
 800242e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002430:	4a14      	ldr	r2, [pc, #80]	; (8002484 <_sbrk+0x5c>)
 8002432:	4b15      	ldr	r3, [pc, #84]	; (8002488 <_sbrk+0x60>)
 8002434:	1ad3      	subs	r3, r2, r3
 8002436:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002438:	697b      	ldr	r3, [r7, #20]
 800243a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800243c:	4b13      	ldr	r3, [pc, #76]	; (800248c <_sbrk+0x64>)
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	2b00      	cmp	r3, #0
 8002442:	d102      	bne.n	800244a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002444:	4b11      	ldr	r3, [pc, #68]	; (800248c <_sbrk+0x64>)
 8002446:	4a12      	ldr	r2, [pc, #72]	; (8002490 <_sbrk+0x68>)
 8002448:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800244a:	4b10      	ldr	r3, [pc, #64]	; (800248c <_sbrk+0x64>)
 800244c:	681a      	ldr	r2, [r3, #0]
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	4413      	add	r3, r2
 8002452:	693a      	ldr	r2, [r7, #16]
 8002454:	429a      	cmp	r2, r3
 8002456:	d207      	bcs.n	8002468 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002458:	f003 fb46 	bl	8005ae8 <__errno>
 800245c:	4603      	mov	r3, r0
 800245e:	220c      	movs	r2, #12
 8002460:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002462:	f04f 33ff 	mov.w	r3, #4294967295
 8002466:	e009      	b.n	800247c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002468:	4b08      	ldr	r3, [pc, #32]	; (800248c <_sbrk+0x64>)
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800246e:	4b07      	ldr	r3, [pc, #28]	; (800248c <_sbrk+0x64>)
 8002470:	681a      	ldr	r2, [r3, #0]
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	4413      	add	r3, r2
 8002476:	4a05      	ldr	r2, [pc, #20]	; (800248c <_sbrk+0x64>)
 8002478:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800247a:	68fb      	ldr	r3, [r7, #12]
}
 800247c:	4618      	mov	r0, r3
 800247e:	3718      	adds	r7, #24
 8002480:	46bd      	mov	sp, r7
 8002482:	bd80      	pop	{r7, pc}
 8002484:	20010000 	.word	0x20010000
 8002488:	00000400 	.word	0x00000400
 800248c:	20000330 	.word	0x20000330
 8002490:	20000348 	.word	0x20000348

08002494 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8002494:	b480      	push	{r7}
 8002496:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
  #endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8002498:	4b06      	ldr	r3, [pc, #24]	; (80024b4 <SystemInit+0x20>)
 800249a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800249e:	4a05      	ldr	r2, [pc, #20]	; (80024b4 <SystemInit+0x20>)
 80024a0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80024a4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80024a8:	bf00      	nop
 80024aa:	46bd      	mov	sp, r7
 80024ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b0:	4770      	bx	lr
 80024b2:	bf00      	nop
 80024b4:	e000ed00 	.word	0xe000ed00

080024b8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80024b8:	f8df d034 	ldr.w	sp, [pc, #52]	; 80024f0 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80024bc:	f7ff ffea 	bl	8002494 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80024c0:	480c      	ldr	r0, [pc, #48]	; (80024f4 <LoopForever+0x6>)
  ldr r1, =_edata
 80024c2:	490d      	ldr	r1, [pc, #52]	; (80024f8 <LoopForever+0xa>)
  ldr r2, =_sidata
 80024c4:	4a0d      	ldr	r2, [pc, #52]	; (80024fc <LoopForever+0xe>)
  movs r3, #0
 80024c6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80024c8:	e002      	b.n	80024d0 <LoopCopyDataInit>

080024ca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80024ca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80024cc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80024ce:	3304      	adds	r3, #4

080024d0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80024d0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80024d2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80024d4:	d3f9      	bcc.n	80024ca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80024d6:	4a0a      	ldr	r2, [pc, #40]	; (8002500 <LoopForever+0x12>)
  ldr r4, =_ebss
 80024d8:	4c0a      	ldr	r4, [pc, #40]	; (8002504 <LoopForever+0x16>)
  movs r3, #0
 80024da:	2300      	movs	r3, #0
  b LoopFillZerobss
 80024dc:	e001      	b.n	80024e2 <LoopFillZerobss>

080024de <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80024de:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80024e0:	3204      	adds	r2, #4

080024e2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80024e2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80024e4:	d3fb      	bcc.n	80024de <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80024e6:	f003 fb05 	bl	8005af4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80024ea:	f7ff f8d9 	bl	80016a0 <main>

080024ee <LoopForever>:

LoopForever:
    b LoopForever
 80024ee:	e7fe      	b.n	80024ee <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80024f0:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80024f4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80024f8:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 80024fc:	0800c2f4 	.word	0x0800c2f4
  ldr r2, =_sbss
 8002500:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8002504:	20000348 	.word	0x20000348

08002508 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002508:	e7fe      	b.n	8002508 <ADC1_IRQHandler>

0800250a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800250a:	b580      	push	{r7, lr}
 800250c:	b082      	sub	sp, #8
 800250e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002510:	2300      	movs	r3, #0
 8002512:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002514:	2003      	movs	r0, #3
 8002516:	f000 f943 	bl	80027a0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800251a:	2000      	movs	r0, #0
 800251c:	f000 f80e 	bl	800253c <HAL_InitTick>
 8002520:	4603      	mov	r3, r0
 8002522:	2b00      	cmp	r3, #0
 8002524:	d002      	beq.n	800252c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002526:	2301      	movs	r3, #1
 8002528:	71fb      	strb	r3, [r7, #7]
 800252a:	e001      	b.n	8002530 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800252c:	f7ff fd8c 	bl	8002048 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002530:	79fb      	ldrb	r3, [r7, #7]
}
 8002532:	4618      	mov	r0, r3
 8002534:	3708      	adds	r7, #8
 8002536:	46bd      	mov	sp, r7
 8002538:	bd80      	pop	{r7, pc}
	...

0800253c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800253c:	b580      	push	{r7, lr}
 800253e:	b084      	sub	sp, #16
 8002540:	af00      	add	r7, sp, #0
 8002542:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002544:	2300      	movs	r3, #0
 8002546:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8002548:	4b17      	ldr	r3, [pc, #92]	; (80025a8 <HAL_InitTick+0x6c>)
 800254a:	781b      	ldrb	r3, [r3, #0]
 800254c:	2b00      	cmp	r3, #0
 800254e:	d023      	beq.n	8002598 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8002550:	4b16      	ldr	r3, [pc, #88]	; (80025ac <HAL_InitTick+0x70>)
 8002552:	681a      	ldr	r2, [r3, #0]
 8002554:	4b14      	ldr	r3, [pc, #80]	; (80025a8 <HAL_InitTick+0x6c>)
 8002556:	781b      	ldrb	r3, [r3, #0]
 8002558:	4619      	mov	r1, r3
 800255a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800255e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002562:	fbb2 f3f3 	udiv	r3, r2, r3
 8002566:	4618      	mov	r0, r3
 8002568:	f000 f941 	bl	80027ee <HAL_SYSTICK_Config>
 800256c:	4603      	mov	r3, r0
 800256e:	2b00      	cmp	r3, #0
 8002570:	d10f      	bne.n	8002592 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	2b0f      	cmp	r3, #15
 8002576:	d809      	bhi.n	800258c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002578:	2200      	movs	r2, #0
 800257a:	6879      	ldr	r1, [r7, #4]
 800257c:	f04f 30ff 	mov.w	r0, #4294967295
 8002580:	f000 f919 	bl	80027b6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002584:	4a0a      	ldr	r2, [pc, #40]	; (80025b0 <HAL_InitTick+0x74>)
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	6013      	str	r3, [r2, #0]
 800258a:	e007      	b.n	800259c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 800258c:	2301      	movs	r3, #1
 800258e:	73fb      	strb	r3, [r7, #15]
 8002590:	e004      	b.n	800259c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002592:	2301      	movs	r3, #1
 8002594:	73fb      	strb	r3, [r7, #15]
 8002596:	e001      	b.n	800259c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002598:	2301      	movs	r3, #1
 800259a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800259c:	7bfb      	ldrb	r3, [r7, #15]
}
 800259e:	4618      	mov	r0, r3
 80025a0:	3710      	adds	r7, #16
 80025a2:	46bd      	mov	sp, r7
 80025a4:	bd80      	pop	{r7, pc}
 80025a6:	bf00      	nop
 80025a8:	20000008 	.word	0x20000008
 80025ac:	20000000 	.word	0x20000000
 80025b0:	20000004 	.word	0x20000004

080025b4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80025b4:	b480      	push	{r7}
 80025b6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80025b8:	4b06      	ldr	r3, [pc, #24]	; (80025d4 <HAL_IncTick+0x20>)
 80025ba:	781b      	ldrb	r3, [r3, #0]
 80025bc:	461a      	mov	r2, r3
 80025be:	4b06      	ldr	r3, [pc, #24]	; (80025d8 <HAL_IncTick+0x24>)
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	4413      	add	r3, r2
 80025c4:	4a04      	ldr	r2, [pc, #16]	; (80025d8 <HAL_IncTick+0x24>)
 80025c6:	6013      	str	r3, [r2, #0]
}
 80025c8:	bf00      	nop
 80025ca:	46bd      	mov	sp, r7
 80025cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d0:	4770      	bx	lr
 80025d2:	bf00      	nop
 80025d4:	20000008 	.word	0x20000008
 80025d8:	20000334 	.word	0x20000334

080025dc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80025dc:	b480      	push	{r7}
 80025de:	af00      	add	r7, sp, #0
  return uwTick;
 80025e0:	4b03      	ldr	r3, [pc, #12]	; (80025f0 <HAL_GetTick+0x14>)
 80025e2:	681b      	ldr	r3, [r3, #0]
}
 80025e4:	4618      	mov	r0, r3
 80025e6:	46bd      	mov	sp, r7
 80025e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ec:	4770      	bx	lr
 80025ee:	bf00      	nop
 80025f0:	20000334 	.word	0x20000334

080025f4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80025f4:	b580      	push	{r7, lr}
 80025f6:	b084      	sub	sp, #16
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80025fc:	f7ff ffee 	bl	80025dc <HAL_GetTick>
 8002600:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	f1b3 3fff 	cmp.w	r3, #4294967295
 800260c:	d005      	beq.n	800261a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800260e:	4b0a      	ldr	r3, [pc, #40]	; (8002638 <HAL_Delay+0x44>)
 8002610:	781b      	ldrb	r3, [r3, #0]
 8002612:	461a      	mov	r2, r3
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	4413      	add	r3, r2
 8002618:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800261a:	bf00      	nop
 800261c:	f7ff ffde 	bl	80025dc <HAL_GetTick>
 8002620:	4602      	mov	r2, r0
 8002622:	68bb      	ldr	r3, [r7, #8]
 8002624:	1ad3      	subs	r3, r2, r3
 8002626:	68fa      	ldr	r2, [r7, #12]
 8002628:	429a      	cmp	r2, r3
 800262a:	d8f7      	bhi.n	800261c <HAL_Delay+0x28>
  {
  }
}
 800262c:	bf00      	nop
 800262e:	bf00      	nop
 8002630:	3710      	adds	r7, #16
 8002632:	46bd      	mov	sp, r7
 8002634:	bd80      	pop	{r7, pc}
 8002636:	bf00      	nop
 8002638:	20000008 	.word	0x20000008

0800263c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800263c:	b480      	push	{r7}
 800263e:	b085      	sub	sp, #20
 8002640:	af00      	add	r7, sp, #0
 8002642:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	f003 0307 	and.w	r3, r3, #7
 800264a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800264c:	4b0c      	ldr	r3, [pc, #48]	; (8002680 <__NVIC_SetPriorityGrouping+0x44>)
 800264e:	68db      	ldr	r3, [r3, #12]
 8002650:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002652:	68ba      	ldr	r2, [r7, #8]
 8002654:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002658:	4013      	ands	r3, r2
 800265a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002660:	68bb      	ldr	r3, [r7, #8]
 8002662:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002664:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002668:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800266c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800266e:	4a04      	ldr	r2, [pc, #16]	; (8002680 <__NVIC_SetPriorityGrouping+0x44>)
 8002670:	68bb      	ldr	r3, [r7, #8]
 8002672:	60d3      	str	r3, [r2, #12]
}
 8002674:	bf00      	nop
 8002676:	3714      	adds	r7, #20
 8002678:	46bd      	mov	sp, r7
 800267a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800267e:	4770      	bx	lr
 8002680:	e000ed00 	.word	0xe000ed00

08002684 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002684:	b480      	push	{r7}
 8002686:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002688:	4b04      	ldr	r3, [pc, #16]	; (800269c <__NVIC_GetPriorityGrouping+0x18>)
 800268a:	68db      	ldr	r3, [r3, #12]
 800268c:	0a1b      	lsrs	r3, r3, #8
 800268e:	f003 0307 	and.w	r3, r3, #7
}
 8002692:	4618      	mov	r0, r3
 8002694:	46bd      	mov	sp, r7
 8002696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800269a:	4770      	bx	lr
 800269c:	e000ed00 	.word	0xe000ed00

080026a0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80026a0:	b480      	push	{r7}
 80026a2:	b083      	sub	sp, #12
 80026a4:	af00      	add	r7, sp, #0
 80026a6:	4603      	mov	r3, r0
 80026a8:	6039      	str	r1, [r7, #0]
 80026aa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80026ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	db0a      	blt.n	80026ca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80026b4:	683b      	ldr	r3, [r7, #0]
 80026b6:	b2da      	uxtb	r2, r3
 80026b8:	490c      	ldr	r1, [pc, #48]	; (80026ec <__NVIC_SetPriority+0x4c>)
 80026ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026be:	0112      	lsls	r2, r2, #4
 80026c0:	b2d2      	uxtb	r2, r2
 80026c2:	440b      	add	r3, r1
 80026c4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80026c8:	e00a      	b.n	80026e0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80026ca:	683b      	ldr	r3, [r7, #0]
 80026cc:	b2da      	uxtb	r2, r3
 80026ce:	4908      	ldr	r1, [pc, #32]	; (80026f0 <__NVIC_SetPriority+0x50>)
 80026d0:	79fb      	ldrb	r3, [r7, #7]
 80026d2:	f003 030f 	and.w	r3, r3, #15
 80026d6:	3b04      	subs	r3, #4
 80026d8:	0112      	lsls	r2, r2, #4
 80026da:	b2d2      	uxtb	r2, r2
 80026dc:	440b      	add	r3, r1
 80026de:	761a      	strb	r2, [r3, #24]
}
 80026e0:	bf00      	nop
 80026e2:	370c      	adds	r7, #12
 80026e4:	46bd      	mov	sp, r7
 80026e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ea:	4770      	bx	lr
 80026ec:	e000e100 	.word	0xe000e100
 80026f0:	e000ed00 	.word	0xe000ed00

080026f4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80026f4:	b480      	push	{r7}
 80026f6:	b089      	sub	sp, #36	; 0x24
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	60f8      	str	r0, [r7, #12]
 80026fc:	60b9      	str	r1, [r7, #8]
 80026fe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	f003 0307 	and.w	r3, r3, #7
 8002706:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002708:	69fb      	ldr	r3, [r7, #28]
 800270a:	f1c3 0307 	rsb	r3, r3, #7
 800270e:	2b04      	cmp	r3, #4
 8002710:	bf28      	it	cs
 8002712:	2304      	movcs	r3, #4
 8002714:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002716:	69fb      	ldr	r3, [r7, #28]
 8002718:	3304      	adds	r3, #4
 800271a:	2b06      	cmp	r3, #6
 800271c:	d902      	bls.n	8002724 <NVIC_EncodePriority+0x30>
 800271e:	69fb      	ldr	r3, [r7, #28]
 8002720:	3b03      	subs	r3, #3
 8002722:	e000      	b.n	8002726 <NVIC_EncodePriority+0x32>
 8002724:	2300      	movs	r3, #0
 8002726:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002728:	f04f 32ff 	mov.w	r2, #4294967295
 800272c:	69bb      	ldr	r3, [r7, #24]
 800272e:	fa02 f303 	lsl.w	r3, r2, r3
 8002732:	43da      	mvns	r2, r3
 8002734:	68bb      	ldr	r3, [r7, #8]
 8002736:	401a      	ands	r2, r3
 8002738:	697b      	ldr	r3, [r7, #20]
 800273a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800273c:	f04f 31ff 	mov.w	r1, #4294967295
 8002740:	697b      	ldr	r3, [r7, #20]
 8002742:	fa01 f303 	lsl.w	r3, r1, r3
 8002746:	43d9      	mvns	r1, r3
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800274c:	4313      	orrs	r3, r2
         );
}
 800274e:	4618      	mov	r0, r3
 8002750:	3724      	adds	r7, #36	; 0x24
 8002752:	46bd      	mov	sp, r7
 8002754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002758:	4770      	bx	lr
	...

0800275c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800275c:	b580      	push	{r7, lr}
 800275e:	b082      	sub	sp, #8
 8002760:	af00      	add	r7, sp, #0
 8002762:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	3b01      	subs	r3, #1
 8002768:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800276c:	d301      	bcc.n	8002772 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800276e:	2301      	movs	r3, #1
 8002770:	e00f      	b.n	8002792 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002772:	4a0a      	ldr	r2, [pc, #40]	; (800279c <SysTick_Config+0x40>)
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	3b01      	subs	r3, #1
 8002778:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800277a:	210f      	movs	r1, #15
 800277c:	f04f 30ff 	mov.w	r0, #4294967295
 8002780:	f7ff ff8e 	bl	80026a0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002784:	4b05      	ldr	r3, [pc, #20]	; (800279c <SysTick_Config+0x40>)
 8002786:	2200      	movs	r2, #0
 8002788:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800278a:	4b04      	ldr	r3, [pc, #16]	; (800279c <SysTick_Config+0x40>)
 800278c:	2207      	movs	r2, #7
 800278e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002790:	2300      	movs	r3, #0
}
 8002792:	4618      	mov	r0, r3
 8002794:	3708      	adds	r7, #8
 8002796:	46bd      	mov	sp, r7
 8002798:	bd80      	pop	{r7, pc}
 800279a:	bf00      	nop
 800279c:	e000e010 	.word	0xe000e010

080027a0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80027a0:	b580      	push	{r7, lr}
 80027a2:	b082      	sub	sp, #8
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80027a8:	6878      	ldr	r0, [r7, #4]
 80027aa:	f7ff ff47 	bl	800263c <__NVIC_SetPriorityGrouping>
}
 80027ae:	bf00      	nop
 80027b0:	3708      	adds	r7, #8
 80027b2:	46bd      	mov	sp, r7
 80027b4:	bd80      	pop	{r7, pc}

080027b6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80027b6:	b580      	push	{r7, lr}
 80027b8:	b086      	sub	sp, #24
 80027ba:	af00      	add	r7, sp, #0
 80027bc:	4603      	mov	r3, r0
 80027be:	60b9      	str	r1, [r7, #8]
 80027c0:	607a      	str	r2, [r7, #4]
 80027c2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80027c4:	2300      	movs	r3, #0
 80027c6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80027c8:	f7ff ff5c 	bl	8002684 <__NVIC_GetPriorityGrouping>
 80027cc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80027ce:	687a      	ldr	r2, [r7, #4]
 80027d0:	68b9      	ldr	r1, [r7, #8]
 80027d2:	6978      	ldr	r0, [r7, #20]
 80027d4:	f7ff ff8e 	bl	80026f4 <NVIC_EncodePriority>
 80027d8:	4602      	mov	r2, r0
 80027da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80027de:	4611      	mov	r1, r2
 80027e0:	4618      	mov	r0, r3
 80027e2:	f7ff ff5d 	bl	80026a0 <__NVIC_SetPriority>
}
 80027e6:	bf00      	nop
 80027e8:	3718      	adds	r7, #24
 80027ea:	46bd      	mov	sp, r7
 80027ec:	bd80      	pop	{r7, pc}

080027ee <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80027ee:	b580      	push	{r7, lr}
 80027f0:	b082      	sub	sp, #8
 80027f2:	af00      	add	r7, sp, #0
 80027f4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80027f6:	6878      	ldr	r0, [r7, #4]
 80027f8:	f7ff ffb0 	bl	800275c <SysTick_Config>
 80027fc:	4603      	mov	r3, r0
}
 80027fe:	4618      	mov	r0, r3
 8002800:	3708      	adds	r7, #8
 8002802:	46bd      	mov	sp, r7
 8002804:	bd80      	pop	{r7, pc}
	...

08002808 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002808:	b480      	push	{r7}
 800280a:	b087      	sub	sp, #28
 800280c:	af00      	add	r7, sp, #0
 800280e:	6078      	str	r0, [r7, #4]
 8002810:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002812:	2300      	movs	r3, #0
 8002814:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002816:	e148      	b.n	8002aaa <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002818:	683b      	ldr	r3, [r7, #0]
 800281a:	681a      	ldr	r2, [r3, #0]
 800281c:	2101      	movs	r1, #1
 800281e:	697b      	ldr	r3, [r7, #20]
 8002820:	fa01 f303 	lsl.w	r3, r1, r3
 8002824:	4013      	ands	r3, r2
 8002826:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	2b00      	cmp	r3, #0
 800282c:	f000 813a 	beq.w	8002aa4 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002830:	683b      	ldr	r3, [r7, #0]
 8002832:	685b      	ldr	r3, [r3, #4]
 8002834:	f003 0303 	and.w	r3, r3, #3
 8002838:	2b01      	cmp	r3, #1
 800283a:	d005      	beq.n	8002848 <HAL_GPIO_Init+0x40>
 800283c:	683b      	ldr	r3, [r7, #0]
 800283e:	685b      	ldr	r3, [r3, #4]
 8002840:	f003 0303 	and.w	r3, r3, #3
 8002844:	2b02      	cmp	r3, #2
 8002846:	d130      	bne.n	80028aa <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	689b      	ldr	r3, [r3, #8]
 800284c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800284e:	697b      	ldr	r3, [r7, #20]
 8002850:	005b      	lsls	r3, r3, #1
 8002852:	2203      	movs	r2, #3
 8002854:	fa02 f303 	lsl.w	r3, r2, r3
 8002858:	43db      	mvns	r3, r3
 800285a:	693a      	ldr	r2, [r7, #16]
 800285c:	4013      	ands	r3, r2
 800285e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002860:	683b      	ldr	r3, [r7, #0]
 8002862:	68da      	ldr	r2, [r3, #12]
 8002864:	697b      	ldr	r3, [r7, #20]
 8002866:	005b      	lsls	r3, r3, #1
 8002868:	fa02 f303 	lsl.w	r3, r2, r3
 800286c:	693a      	ldr	r2, [r7, #16]
 800286e:	4313      	orrs	r3, r2
 8002870:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	693a      	ldr	r2, [r7, #16]
 8002876:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	685b      	ldr	r3, [r3, #4]
 800287c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800287e:	2201      	movs	r2, #1
 8002880:	697b      	ldr	r3, [r7, #20]
 8002882:	fa02 f303 	lsl.w	r3, r2, r3
 8002886:	43db      	mvns	r3, r3
 8002888:	693a      	ldr	r2, [r7, #16]
 800288a:	4013      	ands	r3, r2
 800288c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800288e:	683b      	ldr	r3, [r7, #0]
 8002890:	685b      	ldr	r3, [r3, #4]
 8002892:	091b      	lsrs	r3, r3, #4
 8002894:	f003 0201 	and.w	r2, r3, #1
 8002898:	697b      	ldr	r3, [r7, #20]
 800289a:	fa02 f303 	lsl.w	r3, r2, r3
 800289e:	693a      	ldr	r2, [r7, #16]
 80028a0:	4313      	orrs	r3, r2
 80028a2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	693a      	ldr	r2, [r7, #16]
 80028a8:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80028aa:	683b      	ldr	r3, [r7, #0]
 80028ac:	685b      	ldr	r3, [r3, #4]
 80028ae:	f003 0303 	and.w	r3, r3, #3
 80028b2:	2b03      	cmp	r3, #3
 80028b4:	d017      	beq.n	80028e6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	68db      	ldr	r3, [r3, #12]
 80028ba:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80028bc:	697b      	ldr	r3, [r7, #20]
 80028be:	005b      	lsls	r3, r3, #1
 80028c0:	2203      	movs	r2, #3
 80028c2:	fa02 f303 	lsl.w	r3, r2, r3
 80028c6:	43db      	mvns	r3, r3
 80028c8:	693a      	ldr	r2, [r7, #16]
 80028ca:	4013      	ands	r3, r2
 80028cc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80028ce:	683b      	ldr	r3, [r7, #0]
 80028d0:	689a      	ldr	r2, [r3, #8]
 80028d2:	697b      	ldr	r3, [r7, #20]
 80028d4:	005b      	lsls	r3, r3, #1
 80028d6:	fa02 f303 	lsl.w	r3, r2, r3
 80028da:	693a      	ldr	r2, [r7, #16]
 80028dc:	4313      	orrs	r3, r2
 80028de:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	693a      	ldr	r2, [r7, #16]
 80028e4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80028e6:	683b      	ldr	r3, [r7, #0]
 80028e8:	685b      	ldr	r3, [r3, #4]
 80028ea:	f003 0303 	and.w	r3, r3, #3
 80028ee:	2b02      	cmp	r3, #2
 80028f0:	d123      	bne.n	800293a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80028f2:	697b      	ldr	r3, [r7, #20]
 80028f4:	08da      	lsrs	r2, r3, #3
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	3208      	adds	r2, #8
 80028fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80028fe:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002900:	697b      	ldr	r3, [r7, #20]
 8002902:	f003 0307 	and.w	r3, r3, #7
 8002906:	009b      	lsls	r3, r3, #2
 8002908:	220f      	movs	r2, #15
 800290a:	fa02 f303 	lsl.w	r3, r2, r3
 800290e:	43db      	mvns	r3, r3
 8002910:	693a      	ldr	r2, [r7, #16]
 8002912:	4013      	ands	r3, r2
 8002914:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002916:	683b      	ldr	r3, [r7, #0]
 8002918:	691a      	ldr	r2, [r3, #16]
 800291a:	697b      	ldr	r3, [r7, #20]
 800291c:	f003 0307 	and.w	r3, r3, #7
 8002920:	009b      	lsls	r3, r3, #2
 8002922:	fa02 f303 	lsl.w	r3, r2, r3
 8002926:	693a      	ldr	r2, [r7, #16]
 8002928:	4313      	orrs	r3, r2
 800292a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800292c:	697b      	ldr	r3, [r7, #20]
 800292e:	08da      	lsrs	r2, r3, #3
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	3208      	adds	r2, #8
 8002934:	6939      	ldr	r1, [r7, #16]
 8002936:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002940:	697b      	ldr	r3, [r7, #20]
 8002942:	005b      	lsls	r3, r3, #1
 8002944:	2203      	movs	r2, #3
 8002946:	fa02 f303 	lsl.w	r3, r2, r3
 800294a:	43db      	mvns	r3, r3
 800294c:	693a      	ldr	r2, [r7, #16]
 800294e:	4013      	ands	r3, r2
 8002950:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002952:	683b      	ldr	r3, [r7, #0]
 8002954:	685b      	ldr	r3, [r3, #4]
 8002956:	f003 0203 	and.w	r2, r3, #3
 800295a:	697b      	ldr	r3, [r7, #20]
 800295c:	005b      	lsls	r3, r3, #1
 800295e:	fa02 f303 	lsl.w	r3, r2, r3
 8002962:	693a      	ldr	r2, [r7, #16]
 8002964:	4313      	orrs	r3, r2
 8002966:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	693a      	ldr	r2, [r7, #16]
 800296c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800296e:	683b      	ldr	r3, [r7, #0]
 8002970:	685b      	ldr	r3, [r3, #4]
 8002972:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002976:	2b00      	cmp	r3, #0
 8002978:	f000 8094 	beq.w	8002aa4 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800297c:	4b52      	ldr	r3, [pc, #328]	; (8002ac8 <HAL_GPIO_Init+0x2c0>)
 800297e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002980:	4a51      	ldr	r2, [pc, #324]	; (8002ac8 <HAL_GPIO_Init+0x2c0>)
 8002982:	f043 0301 	orr.w	r3, r3, #1
 8002986:	6613      	str	r3, [r2, #96]	; 0x60
 8002988:	4b4f      	ldr	r3, [pc, #316]	; (8002ac8 <HAL_GPIO_Init+0x2c0>)
 800298a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800298c:	f003 0301 	and.w	r3, r3, #1
 8002990:	60bb      	str	r3, [r7, #8]
 8002992:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002994:	4a4d      	ldr	r2, [pc, #308]	; (8002acc <HAL_GPIO_Init+0x2c4>)
 8002996:	697b      	ldr	r3, [r7, #20]
 8002998:	089b      	lsrs	r3, r3, #2
 800299a:	3302      	adds	r3, #2
 800299c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80029a0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80029a2:	697b      	ldr	r3, [r7, #20]
 80029a4:	f003 0303 	and.w	r3, r3, #3
 80029a8:	009b      	lsls	r3, r3, #2
 80029aa:	220f      	movs	r2, #15
 80029ac:	fa02 f303 	lsl.w	r3, r2, r3
 80029b0:	43db      	mvns	r3, r3
 80029b2:	693a      	ldr	r2, [r7, #16]
 80029b4:	4013      	ands	r3, r2
 80029b6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80029be:	d00d      	beq.n	80029dc <HAL_GPIO_Init+0x1d4>
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	4a43      	ldr	r2, [pc, #268]	; (8002ad0 <HAL_GPIO_Init+0x2c8>)
 80029c4:	4293      	cmp	r3, r2
 80029c6:	d007      	beq.n	80029d8 <HAL_GPIO_Init+0x1d0>
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	4a42      	ldr	r2, [pc, #264]	; (8002ad4 <HAL_GPIO_Init+0x2cc>)
 80029cc:	4293      	cmp	r3, r2
 80029ce:	d101      	bne.n	80029d4 <HAL_GPIO_Init+0x1cc>
 80029d0:	2302      	movs	r3, #2
 80029d2:	e004      	b.n	80029de <HAL_GPIO_Init+0x1d6>
 80029d4:	2307      	movs	r3, #7
 80029d6:	e002      	b.n	80029de <HAL_GPIO_Init+0x1d6>
 80029d8:	2301      	movs	r3, #1
 80029da:	e000      	b.n	80029de <HAL_GPIO_Init+0x1d6>
 80029dc:	2300      	movs	r3, #0
 80029de:	697a      	ldr	r2, [r7, #20]
 80029e0:	f002 0203 	and.w	r2, r2, #3
 80029e4:	0092      	lsls	r2, r2, #2
 80029e6:	4093      	lsls	r3, r2
 80029e8:	693a      	ldr	r2, [r7, #16]
 80029ea:	4313      	orrs	r3, r2
 80029ec:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80029ee:	4937      	ldr	r1, [pc, #220]	; (8002acc <HAL_GPIO_Init+0x2c4>)
 80029f0:	697b      	ldr	r3, [r7, #20]
 80029f2:	089b      	lsrs	r3, r3, #2
 80029f4:	3302      	adds	r3, #2
 80029f6:	693a      	ldr	r2, [r7, #16]
 80029f8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80029fc:	4b36      	ldr	r3, [pc, #216]	; (8002ad8 <HAL_GPIO_Init+0x2d0>)
 80029fe:	689b      	ldr	r3, [r3, #8]
 8002a00:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	43db      	mvns	r3, r3
 8002a06:	693a      	ldr	r2, [r7, #16]
 8002a08:	4013      	ands	r3, r2
 8002a0a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002a0c:	683b      	ldr	r3, [r7, #0]
 8002a0e:	685b      	ldr	r3, [r3, #4]
 8002a10:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d003      	beq.n	8002a20 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8002a18:	693a      	ldr	r2, [r7, #16]
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	4313      	orrs	r3, r2
 8002a1e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002a20:	4a2d      	ldr	r2, [pc, #180]	; (8002ad8 <HAL_GPIO_Init+0x2d0>)
 8002a22:	693b      	ldr	r3, [r7, #16]
 8002a24:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002a26:	4b2c      	ldr	r3, [pc, #176]	; (8002ad8 <HAL_GPIO_Init+0x2d0>)
 8002a28:	68db      	ldr	r3, [r3, #12]
 8002a2a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	43db      	mvns	r3, r3
 8002a30:	693a      	ldr	r2, [r7, #16]
 8002a32:	4013      	ands	r3, r2
 8002a34:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002a36:	683b      	ldr	r3, [r7, #0]
 8002a38:	685b      	ldr	r3, [r3, #4]
 8002a3a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d003      	beq.n	8002a4a <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8002a42:	693a      	ldr	r2, [r7, #16]
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	4313      	orrs	r3, r2
 8002a48:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002a4a:	4a23      	ldr	r2, [pc, #140]	; (8002ad8 <HAL_GPIO_Init+0x2d0>)
 8002a4c:	693b      	ldr	r3, [r7, #16]
 8002a4e:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002a50:	4b21      	ldr	r3, [pc, #132]	; (8002ad8 <HAL_GPIO_Init+0x2d0>)
 8002a52:	685b      	ldr	r3, [r3, #4]
 8002a54:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	43db      	mvns	r3, r3
 8002a5a:	693a      	ldr	r2, [r7, #16]
 8002a5c:	4013      	ands	r3, r2
 8002a5e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002a60:	683b      	ldr	r3, [r7, #0]
 8002a62:	685b      	ldr	r3, [r3, #4]
 8002a64:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d003      	beq.n	8002a74 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 8002a6c:	693a      	ldr	r2, [r7, #16]
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	4313      	orrs	r3, r2
 8002a72:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002a74:	4a18      	ldr	r2, [pc, #96]	; (8002ad8 <HAL_GPIO_Init+0x2d0>)
 8002a76:	693b      	ldr	r3, [r7, #16]
 8002a78:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002a7a:	4b17      	ldr	r3, [pc, #92]	; (8002ad8 <HAL_GPIO_Init+0x2d0>)
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	43db      	mvns	r3, r3
 8002a84:	693a      	ldr	r2, [r7, #16]
 8002a86:	4013      	ands	r3, r2
 8002a88:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002a8a:	683b      	ldr	r3, [r7, #0]
 8002a8c:	685b      	ldr	r3, [r3, #4]
 8002a8e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d003      	beq.n	8002a9e <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 8002a96:	693a      	ldr	r2, [r7, #16]
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	4313      	orrs	r3, r2
 8002a9c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002a9e:	4a0e      	ldr	r2, [pc, #56]	; (8002ad8 <HAL_GPIO_Init+0x2d0>)
 8002aa0:	693b      	ldr	r3, [r7, #16]
 8002aa2:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002aa4:	697b      	ldr	r3, [r7, #20]
 8002aa6:	3301      	adds	r3, #1
 8002aa8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002aaa:	683b      	ldr	r3, [r7, #0]
 8002aac:	681a      	ldr	r2, [r3, #0]
 8002aae:	697b      	ldr	r3, [r7, #20]
 8002ab0:	fa22 f303 	lsr.w	r3, r2, r3
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	f47f aeaf 	bne.w	8002818 <HAL_GPIO_Init+0x10>
  }
}
 8002aba:	bf00      	nop
 8002abc:	bf00      	nop
 8002abe:	371c      	adds	r7, #28
 8002ac0:	46bd      	mov	sp, r7
 8002ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac6:	4770      	bx	lr
 8002ac8:	40021000 	.word	0x40021000
 8002acc:	40010000 	.word	0x40010000
 8002ad0:	48000400 	.word	0x48000400
 8002ad4:	48000800 	.word	0x48000800
 8002ad8:	40010400 	.word	0x40010400

08002adc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002adc:	b480      	push	{r7}
 8002ade:	b085      	sub	sp, #20
 8002ae0:	af00      	add	r7, sp, #0
 8002ae2:	6078      	str	r0, [r7, #4]
 8002ae4:	460b      	mov	r3, r1
 8002ae6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	691a      	ldr	r2, [r3, #16]
 8002aec:	887b      	ldrh	r3, [r7, #2]
 8002aee:	4013      	ands	r3, r2
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d002      	beq.n	8002afa <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002af4:	2301      	movs	r3, #1
 8002af6:	73fb      	strb	r3, [r7, #15]
 8002af8:	e001      	b.n	8002afe <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002afa:	2300      	movs	r3, #0
 8002afc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002afe:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b00:	4618      	mov	r0, r3
 8002b02:	3714      	adds	r7, #20
 8002b04:	46bd      	mov	sp, r7
 8002b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b0a:	4770      	bx	lr

08002b0c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002b0c:	b480      	push	{r7}
 8002b0e:	b083      	sub	sp, #12
 8002b10:	af00      	add	r7, sp, #0
 8002b12:	6078      	str	r0, [r7, #4]
 8002b14:	460b      	mov	r3, r1
 8002b16:	807b      	strh	r3, [r7, #2]
 8002b18:	4613      	mov	r3, r2
 8002b1a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002b1c:	787b      	ldrb	r3, [r7, #1]
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d003      	beq.n	8002b2a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002b22:	887a      	ldrh	r2, [r7, #2]
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002b28:	e002      	b.n	8002b30 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002b2a:	887a      	ldrh	r2, [r7, #2]
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002b30:	bf00      	nop
 8002b32:	370c      	adds	r7, #12
 8002b34:	46bd      	mov	sp, r7
 8002b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b3a:	4770      	bx	lr

08002b3c <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002b3c:	b480      	push	{r7}
 8002b3e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002b40:	4b05      	ldr	r3, [pc, #20]	; (8002b58 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	4a04      	ldr	r2, [pc, #16]	; (8002b58 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002b46:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b4a:	6013      	str	r3, [r2, #0]
}
 8002b4c:	bf00      	nop
 8002b4e:	46bd      	mov	sp, r7
 8002b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b54:	4770      	bx	lr
 8002b56:	bf00      	nop
 8002b58:	40007000 	.word	0x40007000

08002b5c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002b5c:	b480      	push	{r7}
 8002b5e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002b60:	4b04      	ldr	r3, [pc, #16]	; (8002b74 <HAL_PWREx_GetVoltageRange+0x18>)
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8002b68:	4618      	mov	r0, r3
 8002b6a:	46bd      	mov	sp, r7
 8002b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b70:	4770      	bx	lr
 8002b72:	bf00      	nop
 8002b74:	40007000 	.word	0x40007000

08002b78 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002b78:	b480      	push	{r7}
 8002b7a:	b085      	sub	sp, #20
 8002b7c:	af00      	add	r7, sp, #0
 8002b7e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002b86:	d130      	bne.n	8002bea <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002b88:	4b23      	ldr	r3, [pc, #140]	; (8002c18 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002b90:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002b94:	d038      	beq.n	8002c08 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002b96:	4b20      	ldr	r3, [pc, #128]	; (8002c18 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002b9e:	4a1e      	ldr	r2, [pc, #120]	; (8002c18 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002ba0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002ba4:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002ba6:	4b1d      	ldr	r3, [pc, #116]	; (8002c1c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	2232      	movs	r2, #50	; 0x32
 8002bac:	fb02 f303 	mul.w	r3, r2, r3
 8002bb0:	4a1b      	ldr	r2, [pc, #108]	; (8002c20 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002bb2:	fba2 2303 	umull	r2, r3, r2, r3
 8002bb6:	0c9b      	lsrs	r3, r3, #18
 8002bb8:	3301      	adds	r3, #1
 8002bba:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002bbc:	e002      	b.n	8002bc4 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	3b01      	subs	r3, #1
 8002bc2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002bc4:	4b14      	ldr	r3, [pc, #80]	; (8002c18 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002bc6:	695b      	ldr	r3, [r3, #20]
 8002bc8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002bcc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002bd0:	d102      	bne.n	8002bd8 <HAL_PWREx_ControlVoltageScaling+0x60>
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d1f2      	bne.n	8002bbe <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002bd8:	4b0f      	ldr	r3, [pc, #60]	; (8002c18 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002bda:	695b      	ldr	r3, [r3, #20]
 8002bdc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002be0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002be4:	d110      	bne.n	8002c08 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002be6:	2303      	movs	r3, #3
 8002be8:	e00f      	b.n	8002c0a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002bea:	4b0b      	ldr	r3, [pc, #44]	; (8002c18 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002bf2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002bf6:	d007      	beq.n	8002c08 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002bf8:	4b07      	ldr	r3, [pc, #28]	; (8002c18 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002c00:	4a05      	ldr	r2, [pc, #20]	; (8002c18 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002c02:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002c06:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002c08:	2300      	movs	r3, #0
}
 8002c0a:	4618      	mov	r0, r3
 8002c0c:	3714      	adds	r7, #20
 8002c0e:	46bd      	mov	sp, r7
 8002c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c14:	4770      	bx	lr
 8002c16:	bf00      	nop
 8002c18:	40007000 	.word	0x40007000
 8002c1c:	20000000 	.word	0x20000000
 8002c20:	431bde83 	.word	0x431bde83

08002c24 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002c24:	b580      	push	{r7, lr}
 8002c26:	b088      	sub	sp, #32
 8002c28:	af00      	add	r7, sp, #0
 8002c2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d102      	bne.n	8002c38 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002c32:	2301      	movs	r3, #1
 8002c34:	f000 bc02 	b.w	800343c <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002c38:	4b96      	ldr	r3, [pc, #600]	; (8002e94 <HAL_RCC_OscConfig+0x270>)
 8002c3a:	689b      	ldr	r3, [r3, #8]
 8002c3c:	f003 030c 	and.w	r3, r3, #12
 8002c40:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002c42:	4b94      	ldr	r3, [pc, #592]	; (8002e94 <HAL_RCC_OscConfig+0x270>)
 8002c44:	68db      	ldr	r3, [r3, #12]
 8002c46:	f003 0303 	and.w	r3, r3, #3
 8002c4a:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	f003 0310 	and.w	r3, r3, #16
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	f000 80e4 	beq.w	8002e22 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002c5a:	69bb      	ldr	r3, [r7, #24]
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d007      	beq.n	8002c70 <HAL_RCC_OscConfig+0x4c>
 8002c60:	69bb      	ldr	r3, [r7, #24]
 8002c62:	2b0c      	cmp	r3, #12
 8002c64:	f040 808b 	bne.w	8002d7e <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002c68:	697b      	ldr	r3, [r7, #20]
 8002c6a:	2b01      	cmp	r3, #1
 8002c6c:	f040 8087 	bne.w	8002d7e <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002c70:	4b88      	ldr	r3, [pc, #544]	; (8002e94 <HAL_RCC_OscConfig+0x270>)
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	f003 0302 	and.w	r3, r3, #2
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d005      	beq.n	8002c88 <HAL_RCC_OscConfig+0x64>
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	699b      	ldr	r3, [r3, #24]
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d101      	bne.n	8002c88 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8002c84:	2301      	movs	r3, #1
 8002c86:	e3d9      	b.n	800343c <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	6a1a      	ldr	r2, [r3, #32]
 8002c8c:	4b81      	ldr	r3, [pc, #516]	; (8002e94 <HAL_RCC_OscConfig+0x270>)
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	f003 0308 	and.w	r3, r3, #8
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d004      	beq.n	8002ca2 <HAL_RCC_OscConfig+0x7e>
 8002c98:	4b7e      	ldr	r3, [pc, #504]	; (8002e94 <HAL_RCC_OscConfig+0x270>)
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002ca0:	e005      	b.n	8002cae <HAL_RCC_OscConfig+0x8a>
 8002ca2:	4b7c      	ldr	r3, [pc, #496]	; (8002e94 <HAL_RCC_OscConfig+0x270>)
 8002ca4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002ca8:	091b      	lsrs	r3, r3, #4
 8002caa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002cae:	4293      	cmp	r3, r2
 8002cb0:	d223      	bcs.n	8002cfa <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	6a1b      	ldr	r3, [r3, #32]
 8002cb6:	4618      	mov	r0, r3
 8002cb8:	f000 fd8c 	bl	80037d4 <RCC_SetFlashLatencyFromMSIRange>
 8002cbc:	4603      	mov	r3, r0
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d001      	beq.n	8002cc6 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8002cc2:	2301      	movs	r3, #1
 8002cc4:	e3ba      	b.n	800343c <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002cc6:	4b73      	ldr	r3, [pc, #460]	; (8002e94 <HAL_RCC_OscConfig+0x270>)
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	4a72      	ldr	r2, [pc, #456]	; (8002e94 <HAL_RCC_OscConfig+0x270>)
 8002ccc:	f043 0308 	orr.w	r3, r3, #8
 8002cd0:	6013      	str	r3, [r2, #0]
 8002cd2:	4b70      	ldr	r3, [pc, #448]	; (8002e94 <HAL_RCC_OscConfig+0x270>)
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	6a1b      	ldr	r3, [r3, #32]
 8002cde:	496d      	ldr	r1, [pc, #436]	; (8002e94 <HAL_RCC_OscConfig+0x270>)
 8002ce0:	4313      	orrs	r3, r2
 8002ce2:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002ce4:	4b6b      	ldr	r3, [pc, #428]	; (8002e94 <HAL_RCC_OscConfig+0x270>)
 8002ce6:	685b      	ldr	r3, [r3, #4]
 8002ce8:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	69db      	ldr	r3, [r3, #28]
 8002cf0:	021b      	lsls	r3, r3, #8
 8002cf2:	4968      	ldr	r1, [pc, #416]	; (8002e94 <HAL_RCC_OscConfig+0x270>)
 8002cf4:	4313      	orrs	r3, r2
 8002cf6:	604b      	str	r3, [r1, #4]
 8002cf8:	e025      	b.n	8002d46 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002cfa:	4b66      	ldr	r3, [pc, #408]	; (8002e94 <HAL_RCC_OscConfig+0x270>)
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	4a65      	ldr	r2, [pc, #404]	; (8002e94 <HAL_RCC_OscConfig+0x270>)
 8002d00:	f043 0308 	orr.w	r3, r3, #8
 8002d04:	6013      	str	r3, [r2, #0]
 8002d06:	4b63      	ldr	r3, [pc, #396]	; (8002e94 <HAL_RCC_OscConfig+0x270>)
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	6a1b      	ldr	r3, [r3, #32]
 8002d12:	4960      	ldr	r1, [pc, #384]	; (8002e94 <HAL_RCC_OscConfig+0x270>)
 8002d14:	4313      	orrs	r3, r2
 8002d16:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002d18:	4b5e      	ldr	r3, [pc, #376]	; (8002e94 <HAL_RCC_OscConfig+0x270>)
 8002d1a:	685b      	ldr	r3, [r3, #4]
 8002d1c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	69db      	ldr	r3, [r3, #28]
 8002d24:	021b      	lsls	r3, r3, #8
 8002d26:	495b      	ldr	r1, [pc, #364]	; (8002e94 <HAL_RCC_OscConfig+0x270>)
 8002d28:	4313      	orrs	r3, r2
 8002d2a:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002d2c:	69bb      	ldr	r3, [r7, #24]
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d109      	bne.n	8002d46 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	6a1b      	ldr	r3, [r3, #32]
 8002d36:	4618      	mov	r0, r3
 8002d38:	f000 fd4c 	bl	80037d4 <RCC_SetFlashLatencyFromMSIRange>
 8002d3c:	4603      	mov	r3, r0
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d001      	beq.n	8002d46 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8002d42:	2301      	movs	r3, #1
 8002d44:	e37a      	b.n	800343c <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002d46:	f000 fc81 	bl	800364c <HAL_RCC_GetSysClockFreq>
 8002d4a:	4602      	mov	r2, r0
 8002d4c:	4b51      	ldr	r3, [pc, #324]	; (8002e94 <HAL_RCC_OscConfig+0x270>)
 8002d4e:	689b      	ldr	r3, [r3, #8]
 8002d50:	091b      	lsrs	r3, r3, #4
 8002d52:	f003 030f 	and.w	r3, r3, #15
 8002d56:	4950      	ldr	r1, [pc, #320]	; (8002e98 <HAL_RCC_OscConfig+0x274>)
 8002d58:	5ccb      	ldrb	r3, [r1, r3]
 8002d5a:	f003 031f 	and.w	r3, r3, #31
 8002d5e:	fa22 f303 	lsr.w	r3, r2, r3
 8002d62:	4a4e      	ldr	r2, [pc, #312]	; (8002e9c <HAL_RCC_OscConfig+0x278>)
 8002d64:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002d66:	4b4e      	ldr	r3, [pc, #312]	; (8002ea0 <HAL_RCC_OscConfig+0x27c>)
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	4618      	mov	r0, r3
 8002d6c:	f7ff fbe6 	bl	800253c <HAL_InitTick>
 8002d70:	4603      	mov	r3, r0
 8002d72:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002d74:	7bfb      	ldrb	r3, [r7, #15]
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d052      	beq.n	8002e20 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8002d7a:	7bfb      	ldrb	r3, [r7, #15]
 8002d7c:	e35e      	b.n	800343c <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	699b      	ldr	r3, [r3, #24]
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d032      	beq.n	8002dec <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002d86:	4b43      	ldr	r3, [pc, #268]	; (8002e94 <HAL_RCC_OscConfig+0x270>)
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	4a42      	ldr	r2, [pc, #264]	; (8002e94 <HAL_RCC_OscConfig+0x270>)
 8002d8c:	f043 0301 	orr.w	r3, r3, #1
 8002d90:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002d92:	f7ff fc23 	bl	80025dc <HAL_GetTick>
 8002d96:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002d98:	e008      	b.n	8002dac <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002d9a:	f7ff fc1f 	bl	80025dc <HAL_GetTick>
 8002d9e:	4602      	mov	r2, r0
 8002da0:	693b      	ldr	r3, [r7, #16]
 8002da2:	1ad3      	subs	r3, r2, r3
 8002da4:	2b02      	cmp	r3, #2
 8002da6:	d901      	bls.n	8002dac <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8002da8:	2303      	movs	r3, #3
 8002daa:	e347      	b.n	800343c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002dac:	4b39      	ldr	r3, [pc, #228]	; (8002e94 <HAL_RCC_OscConfig+0x270>)
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	f003 0302 	and.w	r3, r3, #2
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d0f0      	beq.n	8002d9a <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002db8:	4b36      	ldr	r3, [pc, #216]	; (8002e94 <HAL_RCC_OscConfig+0x270>)
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	4a35      	ldr	r2, [pc, #212]	; (8002e94 <HAL_RCC_OscConfig+0x270>)
 8002dbe:	f043 0308 	orr.w	r3, r3, #8
 8002dc2:	6013      	str	r3, [r2, #0]
 8002dc4:	4b33      	ldr	r3, [pc, #204]	; (8002e94 <HAL_RCC_OscConfig+0x270>)
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	6a1b      	ldr	r3, [r3, #32]
 8002dd0:	4930      	ldr	r1, [pc, #192]	; (8002e94 <HAL_RCC_OscConfig+0x270>)
 8002dd2:	4313      	orrs	r3, r2
 8002dd4:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002dd6:	4b2f      	ldr	r3, [pc, #188]	; (8002e94 <HAL_RCC_OscConfig+0x270>)
 8002dd8:	685b      	ldr	r3, [r3, #4]
 8002dda:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	69db      	ldr	r3, [r3, #28]
 8002de2:	021b      	lsls	r3, r3, #8
 8002de4:	492b      	ldr	r1, [pc, #172]	; (8002e94 <HAL_RCC_OscConfig+0x270>)
 8002de6:	4313      	orrs	r3, r2
 8002de8:	604b      	str	r3, [r1, #4]
 8002dea:	e01a      	b.n	8002e22 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002dec:	4b29      	ldr	r3, [pc, #164]	; (8002e94 <HAL_RCC_OscConfig+0x270>)
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	4a28      	ldr	r2, [pc, #160]	; (8002e94 <HAL_RCC_OscConfig+0x270>)
 8002df2:	f023 0301 	bic.w	r3, r3, #1
 8002df6:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002df8:	f7ff fbf0 	bl	80025dc <HAL_GetTick>
 8002dfc:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002dfe:	e008      	b.n	8002e12 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002e00:	f7ff fbec 	bl	80025dc <HAL_GetTick>
 8002e04:	4602      	mov	r2, r0
 8002e06:	693b      	ldr	r3, [r7, #16]
 8002e08:	1ad3      	subs	r3, r2, r3
 8002e0a:	2b02      	cmp	r3, #2
 8002e0c:	d901      	bls.n	8002e12 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8002e0e:	2303      	movs	r3, #3
 8002e10:	e314      	b.n	800343c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002e12:	4b20      	ldr	r3, [pc, #128]	; (8002e94 <HAL_RCC_OscConfig+0x270>)
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	f003 0302 	and.w	r3, r3, #2
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d1f0      	bne.n	8002e00 <HAL_RCC_OscConfig+0x1dc>
 8002e1e:	e000      	b.n	8002e22 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002e20:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	f003 0301 	and.w	r3, r3, #1
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d073      	beq.n	8002f16 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002e2e:	69bb      	ldr	r3, [r7, #24]
 8002e30:	2b08      	cmp	r3, #8
 8002e32:	d005      	beq.n	8002e40 <HAL_RCC_OscConfig+0x21c>
 8002e34:	69bb      	ldr	r3, [r7, #24]
 8002e36:	2b0c      	cmp	r3, #12
 8002e38:	d10e      	bne.n	8002e58 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002e3a:	697b      	ldr	r3, [r7, #20]
 8002e3c:	2b03      	cmp	r3, #3
 8002e3e:	d10b      	bne.n	8002e58 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e40:	4b14      	ldr	r3, [pc, #80]	; (8002e94 <HAL_RCC_OscConfig+0x270>)
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d063      	beq.n	8002f14 <HAL_RCC_OscConfig+0x2f0>
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	685b      	ldr	r3, [r3, #4]
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d15f      	bne.n	8002f14 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002e54:	2301      	movs	r3, #1
 8002e56:	e2f1      	b.n	800343c <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	685b      	ldr	r3, [r3, #4]
 8002e5c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e60:	d106      	bne.n	8002e70 <HAL_RCC_OscConfig+0x24c>
 8002e62:	4b0c      	ldr	r3, [pc, #48]	; (8002e94 <HAL_RCC_OscConfig+0x270>)
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	4a0b      	ldr	r2, [pc, #44]	; (8002e94 <HAL_RCC_OscConfig+0x270>)
 8002e68:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e6c:	6013      	str	r3, [r2, #0]
 8002e6e:	e025      	b.n	8002ebc <HAL_RCC_OscConfig+0x298>
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	685b      	ldr	r3, [r3, #4]
 8002e74:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002e78:	d114      	bne.n	8002ea4 <HAL_RCC_OscConfig+0x280>
 8002e7a:	4b06      	ldr	r3, [pc, #24]	; (8002e94 <HAL_RCC_OscConfig+0x270>)
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	4a05      	ldr	r2, [pc, #20]	; (8002e94 <HAL_RCC_OscConfig+0x270>)
 8002e80:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002e84:	6013      	str	r3, [r2, #0]
 8002e86:	4b03      	ldr	r3, [pc, #12]	; (8002e94 <HAL_RCC_OscConfig+0x270>)
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	4a02      	ldr	r2, [pc, #8]	; (8002e94 <HAL_RCC_OscConfig+0x270>)
 8002e8c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e90:	6013      	str	r3, [r2, #0]
 8002e92:	e013      	b.n	8002ebc <HAL_RCC_OscConfig+0x298>
 8002e94:	40021000 	.word	0x40021000
 8002e98:	0800bddc 	.word	0x0800bddc
 8002e9c:	20000000 	.word	0x20000000
 8002ea0:	20000004 	.word	0x20000004
 8002ea4:	4ba0      	ldr	r3, [pc, #640]	; (8003128 <HAL_RCC_OscConfig+0x504>)
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	4a9f      	ldr	r2, [pc, #636]	; (8003128 <HAL_RCC_OscConfig+0x504>)
 8002eaa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002eae:	6013      	str	r3, [r2, #0]
 8002eb0:	4b9d      	ldr	r3, [pc, #628]	; (8003128 <HAL_RCC_OscConfig+0x504>)
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	4a9c      	ldr	r2, [pc, #624]	; (8003128 <HAL_RCC_OscConfig+0x504>)
 8002eb6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002eba:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	685b      	ldr	r3, [r3, #4]
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d013      	beq.n	8002eec <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ec4:	f7ff fb8a 	bl	80025dc <HAL_GetTick>
 8002ec8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002eca:	e008      	b.n	8002ede <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002ecc:	f7ff fb86 	bl	80025dc <HAL_GetTick>
 8002ed0:	4602      	mov	r2, r0
 8002ed2:	693b      	ldr	r3, [r7, #16]
 8002ed4:	1ad3      	subs	r3, r2, r3
 8002ed6:	2b64      	cmp	r3, #100	; 0x64
 8002ed8:	d901      	bls.n	8002ede <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002eda:	2303      	movs	r3, #3
 8002edc:	e2ae      	b.n	800343c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002ede:	4b92      	ldr	r3, [pc, #584]	; (8003128 <HAL_RCC_OscConfig+0x504>)
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d0f0      	beq.n	8002ecc <HAL_RCC_OscConfig+0x2a8>
 8002eea:	e014      	b.n	8002f16 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002eec:	f7ff fb76 	bl	80025dc <HAL_GetTick>
 8002ef0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002ef2:	e008      	b.n	8002f06 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002ef4:	f7ff fb72 	bl	80025dc <HAL_GetTick>
 8002ef8:	4602      	mov	r2, r0
 8002efa:	693b      	ldr	r3, [r7, #16]
 8002efc:	1ad3      	subs	r3, r2, r3
 8002efe:	2b64      	cmp	r3, #100	; 0x64
 8002f00:	d901      	bls.n	8002f06 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002f02:	2303      	movs	r3, #3
 8002f04:	e29a      	b.n	800343c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002f06:	4b88      	ldr	r3, [pc, #544]	; (8003128 <HAL_RCC_OscConfig+0x504>)
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d1f0      	bne.n	8002ef4 <HAL_RCC_OscConfig+0x2d0>
 8002f12:	e000      	b.n	8002f16 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f14:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	f003 0302 	and.w	r3, r3, #2
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d060      	beq.n	8002fe4 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002f22:	69bb      	ldr	r3, [r7, #24]
 8002f24:	2b04      	cmp	r3, #4
 8002f26:	d005      	beq.n	8002f34 <HAL_RCC_OscConfig+0x310>
 8002f28:	69bb      	ldr	r3, [r7, #24]
 8002f2a:	2b0c      	cmp	r3, #12
 8002f2c:	d119      	bne.n	8002f62 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002f2e:	697b      	ldr	r3, [r7, #20]
 8002f30:	2b02      	cmp	r3, #2
 8002f32:	d116      	bne.n	8002f62 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002f34:	4b7c      	ldr	r3, [pc, #496]	; (8003128 <HAL_RCC_OscConfig+0x504>)
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d005      	beq.n	8002f4c <HAL_RCC_OscConfig+0x328>
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	68db      	ldr	r3, [r3, #12]
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d101      	bne.n	8002f4c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002f48:	2301      	movs	r3, #1
 8002f4a:	e277      	b.n	800343c <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f4c:	4b76      	ldr	r3, [pc, #472]	; (8003128 <HAL_RCC_OscConfig+0x504>)
 8002f4e:	685b      	ldr	r3, [r3, #4]
 8002f50:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	691b      	ldr	r3, [r3, #16]
 8002f58:	061b      	lsls	r3, r3, #24
 8002f5a:	4973      	ldr	r1, [pc, #460]	; (8003128 <HAL_RCC_OscConfig+0x504>)
 8002f5c:	4313      	orrs	r3, r2
 8002f5e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002f60:	e040      	b.n	8002fe4 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	68db      	ldr	r3, [r3, #12]
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d023      	beq.n	8002fb2 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002f6a:	4b6f      	ldr	r3, [pc, #444]	; (8003128 <HAL_RCC_OscConfig+0x504>)
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	4a6e      	ldr	r2, [pc, #440]	; (8003128 <HAL_RCC_OscConfig+0x504>)
 8002f70:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f74:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f76:	f7ff fb31 	bl	80025dc <HAL_GetTick>
 8002f7a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002f7c:	e008      	b.n	8002f90 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002f7e:	f7ff fb2d 	bl	80025dc <HAL_GetTick>
 8002f82:	4602      	mov	r2, r0
 8002f84:	693b      	ldr	r3, [r7, #16]
 8002f86:	1ad3      	subs	r3, r2, r3
 8002f88:	2b02      	cmp	r3, #2
 8002f8a:	d901      	bls.n	8002f90 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002f8c:	2303      	movs	r3, #3
 8002f8e:	e255      	b.n	800343c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002f90:	4b65      	ldr	r3, [pc, #404]	; (8003128 <HAL_RCC_OscConfig+0x504>)
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d0f0      	beq.n	8002f7e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f9c:	4b62      	ldr	r3, [pc, #392]	; (8003128 <HAL_RCC_OscConfig+0x504>)
 8002f9e:	685b      	ldr	r3, [r3, #4]
 8002fa0:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	691b      	ldr	r3, [r3, #16]
 8002fa8:	061b      	lsls	r3, r3, #24
 8002faa:	495f      	ldr	r1, [pc, #380]	; (8003128 <HAL_RCC_OscConfig+0x504>)
 8002fac:	4313      	orrs	r3, r2
 8002fae:	604b      	str	r3, [r1, #4]
 8002fb0:	e018      	b.n	8002fe4 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002fb2:	4b5d      	ldr	r3, [pc, #372]	; (8003128 <HAL_RCC_OscConfig+0x504>)
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	4a5c      	ldr	r2, [pc, #368]	; (8003128 <HAL_RCC_OscConfig+0x504>)
 8002fb8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002fbc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fbe:	f7ff fb0d 	bl	80025dc <HAL_GetTick>
 8002fc2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002fc4:	e008      	b.n	8002fd8 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002fc6:	f7ff fb09 	bl	80025dc <HAL_GetTick>
 8002fca:	4602      	mov	r2, r0
 8002fcc:	693b      	ldr	r3, [r7, #16]
 8002fce:	1ad3      	subs	r3, r2, r3
 8002fd0:	2b02      	cmp	r3, #2
 8002fd2:	d901      	bls.n	8002fd8 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002fd4:	2303      	movs	r3, #3
 8002fd6:	e231      	b.n	800343c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002fd8:	4b53      	ldr	r3, [pc, #332]	; (8003128 <HAL_RCC_OscConfig+0x504>)
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d1f0      	bne.n	8002fc6 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	f003 0308 	and.w	r3, r3, #8
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d03c      	beq.n	800306a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	695b      	ldr	r3, [r3, #20]
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d01c      	beq.n	8003032 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002ff8:	4b4b      	ldr	r3, [pc, #300]	; (8003128 <HAL_RCC_OscConfig+0x504>)
 8002ffa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002ffe:	4a4a      	ldr	r2, [pc, #296]	; (8003128 <HAL_RCC_OscConfig+0x504>)
 8003000:	f043 0301 	orr.w	r3, r3, #1
 8003004:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003008:	f7ff fae8 	bl	80025dc <HAL_GetTick>
 800300c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800300e:	e008      	b.n	8003022 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003010:	f7ff fae4 	bl	80025dc <HAL_GetTick>
 8003014:	4602      	mov	r2, r0
 8003016:	693b      	ldr	r3, [r7, #16]
 8003018:	1ad3      	subs	r3, r2, r3
 800301a:	2b02      	cmp	r3, #2
 800301c:	d901      	bls.n	8003022 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800301e:	2303      	movs	r3, #3
 8003020:	e20c      	b.n	800343c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003022:	4b41      	ldr	r3, [pc, #260]	; (8003128 <HAL_RCC_OscConfig+0x504>)
 8003024:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003028:	f003 0302 	and.w	r3, r3, #2
 800302c:	2b00      	cmp	r3, #0
 800302e:	d0ef      	beq.n	8003010 <HAL_RCC_OscConfig+0x3ec>
 8003030:	e01b      	b.n	800306a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003032:	4b3d      	ldr	r3, [pc, #244]	; (8003128 <HAL_RCC_OscConfig+0x504>)
 8003034:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003038:	4a3b      	ldr	r2, [pc, #236]	; (8003128 <HAL_RCC_OscConfig+0x504>)
 800303a:	f023 0301 	bic.w	r3, r3, #1
 800303e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003042:	f7ff facb 	bl	80025dc <HAL_GetTick>
 8003046:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003048:	e008      	b.n	800305c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800304a:	f7ff fac7 	bl	80025dc <HAL_GetTick>
 800304e:	4602      	mov	r2, r0
 8003050:	693b      	ldr	r3, [r7, #16]
 8003052:	1ad3      	subs	r3, r2, r3
 8003054:	2b02      	cmp	r3, #2
 8003056:	d901      	bls.n	800305c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003058:	2303      	movs	r3, #3
 800305a:	e1ef      	b.n	800343c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800305c:	4b32      	ldr	r3, [pc, #200]	; (8003128 <HAL_RCC_OscConfig+0x504>)
 800305e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003062:	f003 0302 	and.w	r3, r3, #2
 8003066:	2b00      	cmp	r3, #0
 8003068:	d1ef      	bne.n	800304a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	f003 0304 	and.w	r3, r3, #4
 8003072:	2b00      	cmp	r3, #0
 8003074:	f000 80a6 	beq.w	80031c4 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003078:	2300      	movs	r3, #0
 800307a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800307c:	4b2a      	ldr	r3, [pc, #168]	; (8003128 <HAL_RCC_OscConfig+0x504>)
 800307e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003080:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003084:	2b00      	cmp	r3, #0
 8003086:	d10d      	bne.n	80030a4 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003088:	4b27      	ldr	r3, [pc, #156]	; (8003128 <HAL_RCC_OscConfig+0x504>)
 800308a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800308c:	4a26      	ldr	r2, [pc, #152]	; (8003128 <HAL_RCC_OscConfig+0x504>)
 800308e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003092:	6593      	str	r3, [r2, #88]	; 0x58
 8003094:	4b24      	ldr	r3, [pc, #144]	; (8003128 <HAL_RCC_OscConfig+0x504>)
 8003096:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003098:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800309c:	60bb      	str	r3, [r7, #8]
 800309e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80030a0:	2301      	movs	r3, #1
 80030a2:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80030a4:	4b21      	ldr	r3, [pc, #132]	; (800312c <HAL_RCC_OscConfig+0x508>)
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d118      	bne.n	80030e2 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80030b0:	4b1e      	ldr	r3, [pc, #120]	; (800312c <HAL_RCC_OscConfig+0x508>)
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	4a1d      	ldr	r2, [pc, #116]	; (800312c <HAL_RCC_OscConfig+0x508>)
 80030b6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80030ba:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80030bc:	f7ff fa8e 	bl	80025dc <HAL_GetTick>
 80030c0:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80030c2:	e008      	b.n	80030d6 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80030c4:	f7ff fa8a 	bl	80025dc <HAL_GetTick>
 80030c8:	4602      	mov	r2, r0
 80030ca:	693b      	ldr	r3, [r7, #16]
 80030cc:	1ad3      	subs	r3, r2, r3
 80030ce:	2b02      	cmp	r3, #2
 80030d0:	d901      	bls.n	80030d6 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80030d2:	2303      	movs	r3, #3
 80030d4:	e1b2      	b.n	800343c <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80030d6:	4b15      	ldr	r3, [pc, #84]	; (800312c <HAL_RCC_OscConfig+0x508>)
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d0f0      	beq.n	80030c4 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	689b      	ldr	r3, [r3, #8]
 80030e6:	2b01      	cmp	r3, #1
 80030e8:	d108      	bne.n	80030fc <HAL_RCC_OscConfig+0x4d8>
 80030ea:	4b0f      	ldr	r3, [pc, #60]	; (8003128 <HAL_RCC_OscConfig+0x504>)
 80030ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030f0:	4a0d      	ldr	r2, [pc, #52]	; (8003128 <HAL_RCC_OscConfig+0x504>)
 80030f2:	f043 0301 	orr.w	r3, r3, #1
 80030f6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80030fa:	e029      	b.n	8003150 <HAL_RCC_OscConfig+0x52c>
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	689b      	ldr	r3, [r3, #8]
 8003100:	2b05      	cmp	r3, #5
 8003102:	d115      	bne.n	8003130 <HAL_RCC_OscConfig+0x50c>
 8003104:	4b08      	ldr	r3, [pc, #32]	; (8003128 <HAL_RCC_OscConfig+0x504>)
 8003106:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800310a:	4a07      	ldr	r2, [pc, #28]	; (8003128 <HAL_RCC_OscConfig+0x504>)
 800310c:	f043 0304 	orr.w	r3, r3, #4
 8003110:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003114:	4b04      	ldr	r3, [pc, #16]	; (8003128 <HAL_RCC_OscConfig+0x504>)
 8003116:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800311a:	4a03      	ldr	r2, [pc, #12]	; (8003128 <HAL_RCC_OscConfig+0x504>)
 800311c:	f043 0301 	orr.w	r3, r3, #1
 8003120:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003124:	e014      	b.n	8003150 <HAL_RCC_OscConfig+0x52c>
 8003126:	bf00      	nop
 8003128:	40021000 	.word	0x40021000
 800312c:	40007000 	.word	0x40007000
 8003130:	4b9a      	ldr	r3, [pc, #616]	; (800339c <HAL_RCC_OscConfig+0x778>)
 8003132:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003136:	4a99      	ldr	r2, [pc, #612]	; (800339c <HAL_RCC_OscConfig+0x778>)
 8003138:	f023 0301 	bic.w	r3, r3, #1
 800313c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003140:	4b96      	ldr	r3, [pc, #600]	; (800339c <HAL_RCC_OscConfig+0x778>)
 8003142:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003146:	4a95      	ldr	r2, [pc, #596]	; (800339c <HAL_RCC_OscConfig+0x778>)
 8003148:	f023 0304 	bic.w	r3, r3, #4
 800314c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	689b      	ldr	r3, [r3, #8]
 8003154:	2b00      	cmp	r3, #0
 8003156:	d016      	beq.n	8003186 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003158:	f7ff fa40 	bl	80025dc <HAL_GetTick>
 800315c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800315e:	e00a      	b.n	8003176 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003160:	f7ff fa3c 	bl	80025dc <HAL_GetTick>
 8003164:	4602      	mov	r2, r0
 8003166:	693b      	ldr	r3, [r7, #16]
 8003168:	1ad3      	subs	r3, r2, r3
 800316a:	f241 3288 	movw	r2, #5000	; 0x1388
 800316e:	4293      	cmp	r3, r2
 8003170:	d901      	bls.n	8003176 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8003172:	2303      	movs	r3, #3
 8003174:	e162      	b.n	800343c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003176:	4b89      	ldr	r3, [pc, #548]	; (800339c <HAL_RCC_OscConfig+0x778>)
 8003178:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800317c:	f003 0302 	and.w	r3, r3, #2
 8003180:	2b00      	cmp	r3, #0
 8003182:	d0ed      	beq.n	8003160 <HAL_RCC_OscConfig+0x53c>
 8003184:	e015      	b.n	80031b2 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003186:	f7ff fa29 	bl	80025dc <HAL_GetTick>
 800318a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800318c:	e00a      	b.n	80031a4 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800318e:	f7ff fa25 	bl	80025dc <HAL_GetTick>
 8003192:	4602      	mov	r2, r0
 8003194:	693b      	ldr	r3, [r7, #16]
 8003196:	1ad3      	subs	r3, r2, r3
 8003198:	f241 3288 	movw	r2, #5000	; 0x1388
 800319c:	4293      	cmp	r3, r2
 800319e:	d901      	bls.n	80031a4 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80031a0:	2303      	movs	r3, #3
 80031a2:	e14b      	b.n	800343c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80031a4:	4b7d      	ldr	r3, [pc, #500]	; (800339c <HAL_RCC_OscConfig+0x778>)
 80031a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031aa:	f003 0302 	and.w	r3, r3, #2
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d1ed      	bne.n	800318e <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80031b2:	7ffb      	ldrb	r3, [r7, #31]
 80031b4:	2b01      	cmp	r3, #1
 80031b6:	d105      	bne.n	80031c4 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80031b8:	4b78      	ldr	r3, [pc, #480]	; (800339c <HAL_RCC_OscConfig+0x778>)
 80031ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031bc:	4a77      	ldr	r2, [pc, #476]	; (800339c <HAL_RCC_OscConfig+0x778>)
 80031be:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80031c2:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	f003 0320 	and.w	r3, r3, #32
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d03c      	beq.n	800324a <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d01c      	beq.n	8003212 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80031d8:	4b70      	ldr	r3, [pc, #448]	; (800339c <HAL_RCC_OscConfig+0x778>)
 80031da:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80031de:	4a6f      	ldr	r2, [pc, #444]	; (800339c <HAL_RCC_OscConfig+0x778>)
 80031e0:	f043 0301 	orr.w	r3, r3, #1
 80031e4:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031e8:	f7ff f9f8 	bl	80025dc <HAL_GetTick>
 80031ec:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80031ee:	e008      	b.n	8003202 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80031f0:	f7ff f9f4 	bl	80025dc <HAL_GetTick>
 80031f4:	4602      	mov	r2, r0
 80031f6:	693b      	ldr	r3, [r7, #16]
 80031f8:	1ad3      	subs	r3, r2, r3
 80031fa:	2b02      	cmp	r3, #2
 80031fc:	d901      	bls.n	8003202 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 80031fe:	2303      	movs	r3, #3
 8003200:	e11c      	b.n	800343c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003202:	4b66      	ldr	r3, [pc, #408]	; (800339c <HAL_RCC_OscConfig+0x778>)
 8003204:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003208:	f003 0302 	and.w	r3, r3, #2
 800320c:	2b00      	cmp	r3, #0
 800320e:	d0ef      	beq.n	80031f0 <HAL_RCC_OscConfig+0x5cc>
 8003210:	e01b      	b.n	800324a <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003212:	4b62      	ldr	r3, [pc, #392]	; (800339c <HAL_RCC_OscConfig+0x778>)
 8003214:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003218:	4a60      	ldr	r2, [pc, #384]	; (800339c <HAL_RCC_OscConfig+0x778>)
 800321a:	f023 0301 	bic.w	r3, r3, #1
 800321e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003222:	f7ff f9db 	bl	80025dc <HAL_GetTick>
 8003226:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003228:	e008      	b.n	800323c <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800322a:	f7ff f9d7 	bl	80025dc <HAL_GetTick>
 800322e:	4602      	mov	r2, r0
 8003230:	693b      	ldr	r3, [r7, #16]
 8003232:	1ad3      	subs	r3, r2, r3
 8003234:	2b02      	cmp	r3, #2
 8003236:	d901      	bls.n	800323c <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8003238:	2303      	movs	r3, #3
 800323a:	e0ff      	b.n	800343c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800323c:	4b57      	ldr	r3, [pc, #348]	; (800339c <HAL_RCC_OscConfig+0x778>)
 800323e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003242:	f003 0302 	and.w	r3, r3, #2
 8003246:	2b00      	cmp	r3, #0
 8003248:	d1ef      	bne.n	800322a <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800324e:	2b00      	cmp	r3, #0
 8003250:	f000 80f3 	beq.w	800343a <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003258:	2b02      	cmp	r3, #2
 800325a:	f040 80c9 	bne.w	80033f0 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800325e:	4b4f      	ldr	r3, [pc, #316]	; (800339c <HAL_RCC_OscConfig+0x778>)
 8003260:	68db      	ldr	r3, [r3, #12]
 8003262:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003264:	697b      	ldr	r3, [r7, #20]
 8003266:	f003 0203 	and.w	r2, r3, #3
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800326e:	429a      	cmp	r2, r3
 8003270:	d12c      	bne.n	80032cc <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003272:	697b      	ldr	r3, [r7, #20]
 8003274:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800327c:	3b01      	subs	r3, #1
 800327e:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003280:	429a      	cmp	r2, r3
 8003282:	d123      	bne.n	80032cc <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003284:	697b      	ldr	r3, [r7, #20]
 8003286:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800328e:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003290:	429a      	cmp	r2, r3
 8003292:	d11b      	bne.n	80032cc <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003294:	697b      	ldr	r3, [r7, #20]
 8003296:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800329e:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80032a0:	429a      	cmp	r2, r3
 80032a2:	d113      	bne.n	80032cc <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80032a4:	697b      	ldr	r3, [r7, #20]
 80032a6:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032ae:	085b      	lsrs	r3, r3, #1
 80032b0:	3b01      	subs	r3, #1
 80032b2:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80032b4:	429a      	cmp	r2, r3
 80032b6:	d109      	bne.n	80032cc <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80032b8:	697b      	ldr	r3, [r7, #20]
 80032ba:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032c2:	085b      	lsrs	r3, r3, #1
 80032c4:	3b01      	subs	r3, #1
 80032c6:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80032c8:	429a      	cmp	r2, r3
 80032ca:	d06b      	beq.n	80033a4 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80032cc:	69bb      	ldr	r3, [r7, #24]
 80032ce:	2b0c      	cmp	r3, #12
 80032d0:	d062      	beq.n	8003398 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80032d2:	4b32      	ldr	r3, [pc, #200]	; (800339c <HAL_RCC_OscConfig+0x778>)
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d001      	beq.n	80032e2 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 80032de:	2301      	movs	r3, #1
 80032e0:	e0ac      	b.n	800343c <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80032e2:	4b2e      	ldr	r3, [pc, #184]	; (800339c <HAL_RCC_OscConfig+0x778>)
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	4a2d      	ldr	r2, [pc, #180]	; (800339c <HAL_RCC_OscConfig+0x778>)
 80032e8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80032ec:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80032ee:	f7ff f975 	bl	80025dc <HAL_GetTick>
 80032f2:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80032f4:	e008      	b.n	8003308 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80032f6:	f7ff f971 	bl	80025dc <HAL_GetTick>
 80032fa:	4602      	mov	r2, r0
 80032fc:	693b      	ldr	r3, [r7, #16]
 80032fe:	1ad3      	subs	r3, r2, r3
 8003300:	2b02      	cmp	r3, #2
 8003302:	d901      	bls.n	8003308 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8003304:	2303      	movs	r3, #3
 8003306:	e099      	b.n	800343c <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003308:	4b24      	ldr	r3, [pc, #144]	; (800339c <HAL_RCC_OscConfig+0x778>)
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003310:	2b00      	cmp	r3, #0
 8003312:	d1f0      	bne.n	80032f6 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003314:	4b21      	ldr	r3, [pc, #132]	; (800339c <HAL_RCC_OscConfig+0x778>)
 8003316:	68da      	ldr	r2, [r3, #12]
 8003318:	4b21      	ldr	r3, [pc, #132]	; (80033a0 <HAL_RCC_OscConfig+0x77c>)
 800331a:	4013      	ands	r3, r2
 800331c:	687a      	ldr	r2, [r7, #4]
 800331e:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8003320:	687a      	ldr	r2, [r7, #4]
 8003322:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003324:	3a01      	subs	r2, #1
 8003326:	0112      	lsls	r2, r2, #4
 8003328:	4311      	orrs	r1, r2
 800332a:	687a      	ldr	r2, [r7, #4]
 800332c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800332e:	0212      	lsls	r2, r2, #8
 8003330:	4311      	orrs	r1, r2
 8003332:	687a      	ldr	r2, [r7, #4]
 8003334:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003336:	0852      	lsrs	r2, r2, #1
 8003338:	3a01      	subs	r2, #1
 800333a:	0552      	lsls	r2, r2, #21
 800333c:	4311      	orrs	r1, r2
 800333e:	687a      	ldr	r2, [r7, #4]
 8003340:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003342:	0852      	lsrs	r2, r2, #1
 8003344:	3a01      	subs	r2, #1
 8003346:	0652      	lsls	r2, r2, #25
 8003348:	4311      	orrs	r1, r2
 800334a:	687a      	ldr	r2, [r7, #4]
 800334c:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800334e:	06d2      	lsls	r2, r2, #27
 8003350:	430a      	orrs	r2, r1
 8003352:	4912      	ldr	r1, [pc, #72]	; (800339c <HAL_RCC_OscConfig+0x778>)
 8003354:	4313      	orrs	r3, r2
 8003356:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003358:	4b10      	ldr	r3, [pc, #64]	; (800339c <HAL_RCC_OscConfig+0x778>)
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	4a0f      	ldr	r2, [pc, #60]	; (800339c <HAL_RCC_OscConfig+0x778>)
 800335e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003362:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003364:	4b0d      	ldr	r3, [pc, #52]	; (800339c <HAL_RCC_OscConfig+0x778>)
 8003366:	68db      	ldr	r3, [r3, #12]
 8003368:	4a0c      	ldr	r2, [pc, #48]	; (800339c <HAL_RCC_OscConfig+0x778>)
 800336a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800336e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003370:	f7ff f934 	bl	80025dc <HAL_GetTick>
 8003374:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003376:	e008      	b.n	800338a <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003378:	f7ff f930 	bl	80025dc <HAL_GetTick>
 800337c:	4602      	mov	r2, r0
 800337e:	693b      	ldr	r3, [r7, #16]
 8003380:	1ad3      	subs	r3, r2, r3
 8003382:	2b02      	cmp	r3, #2
 8003384:	d901      	bls.n	800338a <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8003386:	2303      	movs	r3, #3
 8003388:	e058      	b.n	800343c <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800338a:	4b04      	ldr	r3, [pc, #16]	; (800339c <HAL_RCC_OscConfig+0x778>)
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003392:	2b00      	cmp	r3, #0
 8003394:	d0f0      	beq.n	8003378 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003396:	e050      	b.n	800343a <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003398:	2301      	movs	r3, #1
 800339a:	e04f      	b.n	800343c <HAL_RCC_OscConfig+0x818>
 800339c:	40021000 	.word	0x40021000
 80033a0:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80033a4:	4b27      	ldr	r3, [pc, #156]	; (8003444 <HAL_RCC_OscConfig+0x820>)
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d144      	bne.n	800343a <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80033b0:	4b24      	ldr	r3, [pc, #144]	; (8003444 <HAL_RCC_OscConfig+0x820>)
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	4a23      	ldr	r2, [pc, #140]	; (8003444 <HAL_RCC_OscConfig+0x820>)
 80033b6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80033ba:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80033bc:	4b21      	ldr	r3, [pc, #132]	; (8003444 <HAL_RCC_OscConfig+0x820>)
 80033be:	68db      	ldr	r3, [r3, #12]
 80033c0:	4a20      	ldr	r2, [pc, #128]	; (8003444 <HAL_RCC_OscConfig+0x820>)
 80033c2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80033c6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80033c8:	f7ff f908 	bl	80025dc <HAL_GetTick>
 80033cc:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80033ce:	e008      	b.n	80033e2 <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80033d0:	f7ff f904 	bl	80025dc <HAL_GetTick>
 80033d4:	4602      	mov	r2, r0
 80033d6:	693b      	ldr	r3, [r7, #16]
 80033d8:	1ad3      	subs	r3, r2, r3
 80033da:	2b02      	cmp	r3, #2
 80033dc:	d901      	bls.n	80033e2 <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 80033de:	2303      	movs	r3, #3
 80033e0:	e02c      	b.n	800343c <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80033e2:	4b18      	ldr	r3, [pc, #96]	; (8003444 <HAL_RCC_OscConfig+0x820>)
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d0f0      	beq.n	80033d0 <HAL_RCC_OscConfig+0x7ac>
 80033ee:	e024      	b.n	800343a <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80033f0:	69bb      	ldr	r3, [r7, #24]
 80033f2:	2b0c      	cmp	r3, #12
 80033f4:	d01f      	beq.n	8003436 <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80033f6:	4b13      	ldr	r3, [pc, #76]	; (8003444 <HAL_RCC_OscConfig+0x820>)
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	4a12      	ldr	r2, [pc, #72]	; (8003444 <HAL_RCC_OscConfig+0x820>)
 80033fc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003400:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003402:	f7ff f8eb 	bl	80025dc <HAL_GetTick>
 8003406:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003408:	e008      	b.n	800341c <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800340a:	f7ff f8e7 	bl	80025dc <HAL_GetTick>
 800340e:	4602      	mov	r2, r0
 8003410:	693b      	ldr	r3, [r7, #16]
 8003412:	1ad3      	subs	r3, r2, r3
 8003414:	2b02      	cmp	r3, #2
 8003416:	d901      	bls.n	800341c <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8003418:	2303      	movs	r3, #3
 800341a:	e00f      	b.n	800343c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800341c:	4b09      	ldr	r3, [pc, #36]	; (8003444 <HAL_RCC_OscConfig+0x820>)
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003424:	2b00      	cmp	r3, #0
 8003426:	d1f0      	bne.n	800340a <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8003428:	4b06      	ldr	r3, [pc, #24]	; (8003444 <HAL_RCC_OscConfig+0x820>)
 800342a:	68da      	ldr	r2, [r3, #12]
 800342c:	4905      	ldr	r1, [pc, #20]	; (8003444 <HAL_RCC_OscConfig+0x820>)
 800342e:	4b06      	ldr	r3, [pc, #24]	; (8003448 <HAL_RCC_OscConfig+0x824>)
 8003430:	4013      	ands	r3, r2
 8003432:	60cb      	str	r3, [r1, #12]
 8003434:	e001      	b.n	800343a <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003436:	2301      	movs	r3, #1
 8003438:	e000      	b.n	800343c <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 800343a:	2300      	movs	r3, #0
}
 800343c:	4618      	mov	r0, r3
 800343e:	3720      	adds	r7, #32
 8003440:	46bd      	mov	sp, r7
 8003442:	bd80      	pop	{r7, pc}
 8003444:	40021000 	.word	0x40021000
 8003448:	feeefffc 	.word	0xfeeefffc

0800344c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800344c:	b580      	push	{r7, lr}
 800344e:	b084      	sub	sp, #16
 8003450:	af00      	add	r7, sp, #0
 8003452:	6078      	str	r0, [r7, #4]
 8003454:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	2b00      	cmp	r3, #0
 800345a:	d101      	bne.n	8003460 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800345c:	2301      	movs	r3, #1
 800345e:	e0e7      	b.n	8003630 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003460:	4b75      	ldr	r3, [pc, #468]	; (8003638 <HAL_RCC_ClockConfig+0x1ec>)
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	f003 0307 	and.w	r3, r3, #7
 8003468:	683a      	ldr	r2, [r7, #0]
 800346a:	429a      	cmp	r2, r3
 800346c:	d910      	bls.n	8003490 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800346e:	4b72      	ldr	r3, [pc, #456]	; (8003638 <HAL_RCC_ClockConfig+0x1ec>)
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	f023 0207 	bic.w	r2, r3, #7
 8003476:	4970      	ldr	r1, [pc, #448]	; (8003638 <HAL_RCC_ClockConfig+0x1ec>)
 8003478:	683b      	ldr	r3, [r7, #0]
 800347a:	4313      	orrs	r3, r2
 800347c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800347e:	4b6e      	ldr	r3, [pc, #440]	; (8003638 <HAL_RCC_ClockConfig+0x1ec>)
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	f003 0307 	and.w	r3, r3, #7
 8003486:	683a      	ldr	r2, [r7, #0]
 8003488:	429a      	cmp	r2, r3
 800348a:	d001      	beq.n	8003490 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800348c:	2301      	movs	r3, #1
 800348e:	e0cf      	b.n	8003630 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	f003 0302 	and.w	r3, r3, #2
 8003498:	2b00      	cmp	r3, #0
 800349a:	d010      	beq.n	80034be <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	689a      	ldr	r2, [r3, #8]
 80034a0:	4b66      	ldr	r3, [pc, #408]	; (800363c <HAL_RCC_ClockConfig+0x1f0>)
 80034a2:	689b      	ldr	r3, [r3, #8]
 80034a4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80034a8:	429a      	cmp	r2, r3
 80034aa:	d908      	bls.n	80034be <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80034ac:	4b63      	ldr	r3, [pc, #396]	; (800363c <HAL_RCC_ClockConfig+0x1f0>)
 80034ae:	689b      	ldr	r3, [r3, #8]
 80034b0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	689b      	ldr	r3, [r3, #8]
 80034b8:	4960      	ldr	r1, [pc, #384]	; (800363c <HAL_RCC_ClockConfig+0x1f0>)
 80034ba:	4313      	orrs	r3, r2
 80034bc:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	f003 0301 	and.w	r3, r3, #1
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d04c      	beq.n	8003564 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	685b      	ldr	r3, [r3, #4]
 80034ce:	2b03      	cmp	r3, #3
 80034d0:	d107      	bne.n	80034e2 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80034d2:	4b5a      	ldr	r3, [pc, #360]	; (800363c <HAL_RCC_ClockConfig+0x1f0>)
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d121      	bne.n	8003522 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80034de:	2301      	movs	r3, #1
 80034e0:	e0a6      	b.n	8003630 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	685b      	ldr	r3, [r3, #4]
 80034e6:	2b02      	cmp	r3, #2
 80034e8:	d107      	bne.n	80034fa <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80034ea:	4b54      	ldr	r3, [pc, #336]	; (800363c <HAL_RCC_ClockConfig+0x1f0>)
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d115      	bne.n	8003522 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80034f6:	2301      	movs	r3, #1
 80034f8:	e09a      	b.n	8003630 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	685b      	ldr	r3, [r3, #4]
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d107      	bne.n	8003512 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003502:	4b4e      	ldr	r3, [pc, #312]	; (800363c <HAL_RCC_ClockConfig+0x1f0>)
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	f003 0302 	and.w	r3, r3, #2
 800350a:	2b00      	cmp	r3, #0
 800350c:	d109      	bne.n	8003522 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800350e:	2301      	movs	r3, #1
 8003510:	e08e      	b.n	8003630 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003512:	4b4a      	ldr	r3, [pc, #296]	; (800363c <HAL_RCC_ClockConfig+0x1f0>)
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800351a:	2b00      	cmp	r3, #0
 800351c:	d101      	bne.n	8003522 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800351e:	2301      	movs	r3, #1
 8003520:	e086      	b.n	8003630 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003522:	4b46      	ldr	r3, [pc, #280]	; (800363c <HAL_RCC_ClockConfig+0x1f0>)
 8003524:	689b      	ldr	r3, [r3, #8]
 8003526:	f023 0203 	bic.w	r2, r3, #3
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	685b      	ldr	r3, [r3, #4]
 800352e:	4943      	ldr	r1, [pc, #268]	; (800363c <HAL_RCC_ClockConfig+0x1f0>)
 8003530:	4313      	orrs	r3, r2
 8003532:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003534:	f7ff f852 	bl	80025dc <HAL_GetTick>
 8003538:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800353a:	e00a      	b.n	8003552 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800353c:	f7ff f84e 	bl	80025dc <HAL_GetTick>
 8003540:	4602      	mov	r2, r0
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	1ad3      	subs	r3, r2, r3
 8003546:	f241 3288 	movw	r2, #5000	; 0x1388
 800354a:	4293      	cmp	r3, r2
 800354c:	d901      	bls.n	8003552 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800354e:	2303      	movs	r3, #3
 8003550:	e06e      	b.n	8003630 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003552:	4b3a      	ldr	r3, [pc, #232]	; (800363c <HAL_RCC_ClockConfig+0x1f0>)
 8003554:	689b      	ldr	r3, [r3, #8]
 8003556:	f003 020c 	and.w	r2, r3, #12
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	685b      	ldr	r3, [r3, #4]
 800355e:	009b      	lsls	r3, r3, #2
 8003560:	429a      	cmp	r2, r3
 8003562:	d1eb      	bne.n	800353c <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	f003 0302 	and.w	r3, r3, #2
 800356c:	2b00      	cmp	r3, #0
 800356e:	d010      	beq.n	8003592 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	689a      	ldr	r2, [r3, #8]
 8003574:	4b31      	ldr	r3, [pc, #196]	; (800363c <HAL_RCC_ClockConfig+0x1f0>)
 8003576:	689b      	ldr	r3, [r3, #8]
 8003578:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800357c:	429a      	cmp	r2, r3
 800357e:	d208      	bcs.n	8003592 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003580:	4b2e      	ldr	r3, [pc, #184]	; (800363c <HAL_RCC_ClockConfig+0x1f0>)
 8003582:	689b      	ldr	r3, [r3, #8]
 8003584:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	689b      	ldr	r3, [r3, #8]
 800358c:	492b      	ldr	r1, [pc, #172]	; (800363c <HAL_RCC_ClockConfig+0x1f0>)
 800358e:	4313      	orrs	r3, r2
 8003590:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003592:	4b29      	ldr	r3, [pc, #164]	; (8003638 <HAL_RCC_ClockConfig+0x1ec>)
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	f003 0307 	and.w	r3, r3, #7
 800359a:	683a      	ldr	r2, [r7, #0]
 800359c:	429a      	cmp	r2, r3
 800359e:	d210      	bcs.n	80035c2 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80035a0:	4b25      	ldr	r3, [pc, #148]	; (8003638 <HAL_RCC_ClockConfig+0x1ec>)
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	f023 0207 	bic.w	r2, r3, #7
 80035a8:	4923      	ldr	r1, [pc, #140]	; (8003638 <HAL_RCC_ClockConfig+0x1ec>)
 80035aa:	683b      	ldr	r3, [r7, #0]
 80035ac:	4313      	orrs	r3, r2
 80035ae:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80035b0:	4b21      	ldr	r3, [pc, #132]	; (8003638 <HAL_RCC_ClockConfig+0x1ec>)
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	f003 0307 	and.w	r3, r3, #7
 80035b8:	683a      	ldr	r2, [r7, #0]
 80035ba:	429a      	cmp	r2, r3
 80035bc:	d001      	beq.n	80035c2 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80035be:	2301      	movs	r3, #1
 80035c0:	e036      	b.n	8003630 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	f003 0304 	and.w	r3, r3, #4
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d008      	beq.n	80035e0 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80035ce:	4b1b      	ldr	r3, [pc, #108]	; (800363c <HAL_RCC_ClockConfig+0x1f0>)
 80035d0:	689b      	ldr	r3, [r3, #8]
 80035d2:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	68db      	ldr	r3, [r3, #12]
 80035da:	4918      	ldr	r1, [pc, #96]	; (800363c <HAL_RCC_ClockConfig+0x1f0>)
 80035dc:	4313      	orrs	r3, r2
 80035de:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	f003 0308 	and.w	r3, r3, #8
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d009      	beq.n	8003600 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80035ec:	4b13      	ldr	r3, [pc, #76]	; (800363c <HAL_RCC_ClockConfig+0x1f0>)
 80035ee:	689b      	ldr	r3, [r3, #8]
 80035f0:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	691b      	ldr	r3, [r3, #16]
 80035f8:	00db      	lsls	r3, r3, #3
 80035fa:	4910      	ldr	r1, [pc, #64]	; (800363c <HAL_RCC_ClockConfig+0x1f0>)
 80035fc:	4313      	orrs	r3, r2
 80035fe:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003600:	f000 f824 	bl	800364c <HAL_RCC_GetSysClockFreq>
 8003604:	4602      	mov	r2, r0
 8003606:	4b0d      	ldr	r3, [pc, #52]	; (800363c <HAL_RCC_ClockConfig+0x1f0>)
 8003608:	689b      	ldr	r3, [r3, #8]
 800360a:	091b      	lsrs	r3, r3, #4
 800360c:	f003 030f 	and.w	r3, r3, #15
 8003610:	490b      	ldr	r1, [pc, #44]	; (8003640 <HAL_RCC_ClockConfig+0x1f4>)
 8003612:	5ccb      	ldrb	r3, [r1, r3]
 8003614:	f003 031f 	and.w	r3, r3, #31
 8003618:	fa22 f303 	lsr.w	r3, r2, r3
 800361c:	4a09      	ldr	r2, [pc, #36]	; (8003644 <HAL_RCC_ClockConfig+0x1f8>)
 800361e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003620:	4b09      	ldr	r3, [pc, #36]	; (8003648 <HAL_RCC_ClockConfig+0x1fc>)
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	4618      	mov	r0, r3
 8003626:	f7fe ff89 	bl	800253c <HAL_InitTick>
 800362a:	4603      	mov	r3, r0
 800362c:	72fb      	strb	r3, [r7, #11]

  return status;
 800362e:	7afb      	ldrb	r3, [r7, #11]
}
 8003630:	4618      	mov	r0, r3
 8003632:	3710      	adds	r7, #16
 8003634:	46bd      	mov	sp, r7
 8003636:	bd80      	pop	{r7, pc}
 8003638:	40022000 	.word	0x40022000
 800363c:	40021000 	.word	0x40021000
 8003640:	0800bddc 	.word	0x0800bddc
 8003644:	20000000 	.word	0x20000000
 8003648:	20000004 	.word	0x20000004

0800364c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800364c:	b480      	push	{r7}
 800364e:	b089      	sub	sp, #36	; 0x24
 8003650:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003652:	2300      	movs	r3, #0
 8003654:	61fb      	str	r3, [r7, #28]
 8003656:	2300      	movs	r3, #0
 8003658:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800365a:	4b3e      	ldr	r3, [pc, #248]	; (8003754 <HAL_RCC_GetSysClockFreq+0x108>)
 800365c:	689b      	ldr	r3, [r3, #8]
 800365e:	f003 030c 	and.w	r3, r3, #12
 8003662:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003664:	4b3b      	ldr	r3, [pc, #236]	; (8003754 <HAL_RCC_GetSysClockFreq+0x108>)
 8003666:	68db      	ldr	r3, [r3, #12]
 8003668:	f003 0303 	and.w	r3, r3, #3
 800366c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800366e:	693b      	ldr	r3, [r7, #16]
 8003670:	2b00      	cmp	r3, #0
 8003672:	d005      	beq.n	8003680 <HAL_RCC_GetSysClockFreq+0x34>
 8003674:	693b      	ldr	r3, [r7, #16]
 8003676:	2b0c      	cmp	r3, #12
 8003678:	d121      	bne.n	80036be <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	2b01      	cmp	r3, #1
 800367e:	d11e      	bne.n	80036be <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003680:	4b34      	ldr	r3, [pc, #208]	; (8003754 <HAL_RCC_GetSysClockFreq+0x108>)
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	f003 0308 	and.w	r3, r3, #8
 8003688:	2b00      	cmp	r3, #0
 800368a:	d107      	bne.n	800369c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800368c:	4b31      	ldr	r3, [pc, #196]	; (8003754 <HAL_RCC_GetSysClockFreq+0x108>)
 800368e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003692:	0a1b      	lsrs	r3, r3, #8
 8003694:	f003 030f 	and.w	r3, r3, #15
 8003698:	61fb      	str	r3, [r7, #28]
 800369a:	e005      	b.n	80036a8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800369c:	4b2d      	ldr	r3, [pc, #180]	; (8003754 <HAL_RCC_GetSysClockFreq+0x108>)
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	091b      	lsrs	r3, r3, #4
 80036a2:	f003 030f 	and.w	r3, r3, #15
 80036a6:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80036a8:	4a2b      	ldr	r2, [pc, #172]	; (8003758 <HAL_RCC_GetSysClockFreq+0x10c>)
 80036aa:	69fb      	ldr	r3, [r7, #28]
 80036ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80036b0:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80036b2:	693b      	ldr	r3, [r7, #16]
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d10d      	bne.n	80036d4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80036b8:	69fb      	ldr	r3, [r7, #28]
 80036ba:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80036bc:	e00a      	b.n	80036d4 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80036be:	693b      	ldr	r3, [r7, #16]
 80036c0:	2b04      	cmp	r3, #4
 80036c2:	d102      	bne.n	80036ca <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80036c4:	4b25      	ldr	r3, [pc, #148]	; (800375c <HAL_RCC_GetSysClockFreq+0x110>)
 80036c6:	61bb      	str	r3, [r7, #24]
 80036c8:	e004      	b.n	80036d4 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80036ca:	693b      	ldr	r3, [r7, #16]
 80036cc:	2b08      	cmp	r3, #8
 80036ce:	d101      	bne.n	80036d4 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80036d0:	4b23      	ldr	r3, [pc, #140]	; (8003760 <HAL_RCC_GetSysClockFreq+0x114>)
 80036d2:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80036d4:	693b      	ldr	r3, [r7, #16]
 80036d6:	2b0c      	cmp	r3, #12
 80036d8:	d134      	bne.n	8003744 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80036da:	4b1e      	ldr	r3, [pc, #120]	; (8003754 <HAL_RCC_GetSysClockFreq+0x108>)
 80036dc:	68db      	ldr	r3, [r3, #12]
 80036de:	f003 0303 	and.w	r3, r3, #3
 80036e2:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80036e4:	68bb      	ldr	r3, [r7, #8]
 80036e6:	2b02      	cmp	r3, #2
 80036e8:	d003      	beq.n	80036f2 <HAL_RCC_GetSysClockFreq+0xa6>
 80036ea:	68bb      	ldr	r3, [r7, #8]
 80036ec:	2b03      	cmp	r3, #3
 80036ee:	d003      	beq.n	80036f8 <HAL_RCC_GetSysClockFreq+0xac>
 80036f0:	e005      	b.n	80036fe <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80036f2:	4b1a      	ldr	r3, [pc, #104]	; (800375c <HAL_RCC_GetSysClockFreq+0x110>)
 80036f4:	617b      	str	r3, [r7, #20]
      break;
 80036f6:	e005      	b.n	8003704 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80036f8:	4b19      	ldr	r3, [pc, #100]	; (8003760 <HAL_RCC_GetSysClockFreq+0x114>)
 80036fa:	617b      	str	r3, [r7, #20]
      break;
 80036fc:	e002      	b.n	8003704 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80036fe:	69fb      	ldr	r3, [r7, #28]
 8003700:	617b      	str	r3, [r7, #20]
      break;
 8003702:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003704:	4b13      	ldr	r3, [pc, #76]	; (8003754 <HAL_RCC_GetSysClockFreq+0x108>)
 8003706:	68db      	ldr	r3, [r3, #12]
 8003708:	091b      	lsrs	r3, r3, #4
 800370a:	f003 0307 	and.w	r3, r3, #7
 800370e:	3301      	adds	r3, #1
 8003710:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003712:	4b10      	ldr	r3, [pc, #64]	; (8003754 <HAL_RCC_GetSysClockFreq+0x108>)
 8003714:	68db      	ldr	r3, [r3, #12]
 8003716:	0a1b      	lsrs	r3, r3, #8
 8003718:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800371c:	697a      	ldr	r2, [r7, #20]
 800371e:	fb03 f202 	mul.w	r2, r3, r2
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	fbb2 f3f3 	udiv	r3, r2, r3
 8003728:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800372a:	4b0a      	ldr	r3, [pc, #40]	; (8003754 <HAL_RCC_GetSysClockFreq+0x108>)
 800372c:	68db      	ldr	r3, [r3, #12]
 800372e:	0e5b      	lsrs	r3, r3, #25
 8003730:	f003 0303 	and.w	r3, r3, #3
 8003734:	3301      	adds	r3, #1
 8003736:	005b      	lsls	r3, r3, #1
 8003738:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800373a:	697a      	ldr	r2, [r7, #20]
 800373c:	683b      	ldr	r3, [r7, #0]
 800373e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003742:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003744:	69bb      	ldr	r3, [r7, #24]
}
 8003746:	4618      	mov	r0, r3
 8003748:	3724      	adds	r7, #36	; 0x24
 800374a:	46bd      	mov	sp, r7
 800374c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003750:	4770      	bx	lr
 8003752:	bf00      	nop
 8003754:	40021000 	.word	0x40021000
 8003758:	0800bdf4 	.word	0x0800bdf4
 800375c:	00f42400 	.word	0x00f42400
 8003760:	007a1200 	.word	0x007a1200

08003764 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003764:	b480      	push	{r7}
 8003766:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003768:	4b03      	ldr	r3, [pc, #12]	; (8003778 <HAL_RCC_GetHCLKFreq+0x14>)
 800376a:	681b      	ldr	r3, [r3, #0]
}
 800376c:	4618      	mov	r0, r3
 800376e:	46bd      	mov	sp, r7
 8003770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003774:	4770      	bx	lr
 8003776:	bf00      	nop
 8003778:	20000000 	.word	0x20000000

0800377c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800377c:	b580      	push	{r7, lr}
 800377e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003780:	f7ff fff0 	bl	8003764 <HAL_RCC_GetHCLKFreq>
 8003784:	4602      	mov	r2, r0
 8003786:	4b06      	ldr	r3, [pc, #24]	; (80037a0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003788:	689b      	ldr	r3, [r3, #8]
 800378a:	0a1b      	lsrs	r3, r3, #8
 800378c:	f003 0307 	and.w	r3, r3, #7
 8003790:	4904      	ldr	r1, [pc, #16]	; (80037a4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003792:	5ccb      	ldrb	r3, [r1, r3]
 8003794:	f003 031f 	and.w	r3, r3, #31
 8003798:	fa22 f303 	lsr.w	r3, r2, r3
}
 800379c:	4618      	mov	r0, r3
 800379e:	bd80      	pop	{r7, pc}
 80037a0:	40021000 	.word	0x40021000
 80037a4:	0800bdec 	.word	0x0800bdec

080037a8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80037a8:	b580      	push	{r7, lr}
 80037aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80037ac:	f7ff ffda 	bl	8003764 <HAL_RCC_GetHCLKFreq>
 80037b0:	4602      	mov	r2, r0
 80037b2:	4b06      	ldr	r3, [pc, #24]	; (80037cc <HAL_RCC_GetPCLK2Freq+0x24>)
 80037b4:	689b      	ldr	r3, [r3, #8]
 80037b6:	0adb      	lsrs	r3, r3, #11
 80037b8:	f003 0307 	and.w	r3, r3, #7
 80037bc:	4904      	ldr	r1, [pc, #16]	; (80037d0 <HAL_RCC_GetPCLK2Freq+0x28>)
 80037be:	5ccb      	ldrb	r3, [r1, r3]
 80037c0:	f003 031f 	and.w	r3, r3, #31
 80037c4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80037c8:	4618      	mov	r0, r3
 80037ca:	bd80      	pop	{r7, pc}
 80037cc:	40021000 	.word	0x40021000
 80037d0:	0800bdec 	.word	0x0800bdec

080037d4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80037d4:	b580      	push	{r7, lr}
 80037d6:	b086      	sub	sp, #24
 80037d8:	af00      	add	r7, sp, #0
 80037da:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80037dc:	2300      	movs	r3, #0
 80037de:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80037e0:	4b2a      	ldr	r3, [pc, #168]	; (800388c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80037e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d003      	beq.n	80037f4 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80037ec:	f7ff f9b6 	bl	8002b5c <HAL_PWREx_GetVoltageRange>
 80037f0:	6178      	str	r0, [r7, #20]
 80037f2:	e014      	b.n	800381e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80037f4:	4b25      	ldr	r3, [pc, #148]	; (800388c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80037f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037f8:	4a24      	ldr	r2, [pc, #144]	; (800388c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80037fa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80037fe:	6593      	str	r3, [r2, #88]	; 0x58
 8003800:	4b22      	ldr	r3, [pc, #136]	; (800388c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003802:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003804:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003808:	60fb      	str	r3, [r7, #12]
 800380a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800380c:	f7ff f9a6 	bl	8002b5c <HAL_PWREx_GetVoltageRange>
 8003810:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003812:	4b1e      	ldr	r3, [pc, #120]	; (800388c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003814:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003816:	4a1d      	ldr	r2, [pc, #116]	; (800388c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003818:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800381c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800381e:	697b      	ldr	r3, [r7, #20]
 8003820:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003824:	d10b      	bne.n	800383e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	2b80      	cmp	r3, #128	; 0x80
 800382a:	d919      	bls.n	8003860 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	2ba0      	cmp	r3, #160	; 0xa0
 8003830:	d902      	bls.n	8003838 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003832:	2302      	movs	r3, #2
 8003834:	613b      	str	r3, [r7, #16]
 8003836:	e013      	b.n	8003860 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003838:	2301      	movs	r3, #1
 800383a:	613b      	str	r3, [r7, #16]
 800383c:	e010      	b.n	8003860 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	2b80      	cmp	r3, #128	; 0x80
 8003842:	d902      	bls.n	800384a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003844:	2303      	movs	r3, #3
 8003846:	613b      	str	r3, [r7, #16]
 8003848:	e00a      	b.n	8003860 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	2b80      	cmp	r3, #128	; 0x80
 800384e:	d102      	bne.n	8003856 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003850:	2302      	movs	r3, #2
 8003852:	613b      	str	r3, [r7, #16]
 8003854:	e004      	b.n	8003860 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	2b70      	cmp	r3, #112	; 0x70
 800385a:	d101      	bne.n	8003860 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800385c:	2301      	movs	r3, #1
 800385e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003860:	4b0b      	ldr	r3, [pc, #44]	; (8003890 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	f023 0207 	bic.w	r2, r3, #7
 8003868:	4909      	ldr	r1, [pc, #36]	; (8003890 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800386a:	693b      	ldr	r3, [r7, #16]
 800386c:	4313      	orrs	r3, r2
 800386e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003870:	4b07      	ldr	r3, [pc, #28]	; (8003890 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	f003 0307 	and.w	r3, r3, #7
 8003878:	693a      	ldr	r2, [r7, #16]
 800387a:	429a      	cmp	r2, r3
 800387c:	d001      	beq.n	8003882 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800387e:	2301      	movs	r3, #1
 8003880:	e000      	b.n	8003884 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8003882:	2300      	movs	r3, #0
}
 8003884:	4618      	mov	r0, r3
 8003886:	3718      	adds	r7, #24
 8003888:	46bd      	mov	sp, r7
 800388a:	bd80      	pop	{r7, pc}
 800388c:	40021000 	.word	0x40021000
 8003890:	40022000 	.word	0x40022000

08003894 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003894:	b580      	push	{r7, lr}
 8003896:	b086      	sub	sp, #24
 8003898:	af00      	add	r7, sp, #0
 800389a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800389c:	2300      	movs	r3, #0
 800389e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80038a0:	2300      	movs	r3, #0
 80038a2:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d031      	beq.n	8003914 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038b4:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80038b8:	d01a      	beq.n	80038f0 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 80038ba:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80038be:	d814      	bhi.n	80038ea <HAL_RCCEx_PeriphCLKConfig+0x56>
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d009      	beq.n	80038d8 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80038c4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80038c8:	d10f      	bne.n	80038ea <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 80038ca:	4b5d      	ldr	r3, [pc, #372]	; (8003a40 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80038cc:	68db      	ldr	r3, [r3, #12]
 80038ce:	4a5c      	ldr	r2, [pc, #368]	; (8003a40 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80038d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80038d4:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80038d6:	e00c      	b.n	80038f2 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	3304      	adds	r3, #4
 80038dc:	2100      	movs	r1, #0
 80038de:	4618      	mov	r0, r3
 80038e0:	f000 f9de 	bl	8003ca0 <RCCEx_PLLSAI1_Config>
 80038e4:	4603      	mov	r3, r0
 80038e6:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80038e8:	e003      	b.n	80038f2 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80038ea:	2301      	movs	r3, #1
 80038ec:	74fb      	strb	r3, [r7, #19]
      break;
 80038ee:	e000      	b.n	80038f2 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 80038f0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80038f2:	7cfb      	ldrb	r3, [r7, #19]
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d10b      	bne.n	8003910 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80038f8:	4b51      	ldr	r3, [pc, #324]	; (8003a40 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80038fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038fe:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003906:	494e      	ldr	r1, [pc, #312]	; (8003a40 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003908:	4313      	orrs	r3, r2
 800390a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800390e:	e001      	b.n	8003914 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003910:	7cfb      	ldrb	r3, [r7, #19]
 8003912:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800391c:	2b00      	cmp	r3, #0
 800391e:	f000 809e 	beq.w	8003a5e <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003922:	2300      	movs	r3, #0
 8003924:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003926:	4b46      	ldr	r3, [pc, #280]	; (8003a40 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003928:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800392a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800392e:	2b00      	cmp	r3, #0
 8003930:	d101      	bne.n	8003936 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8003932:	2301      	movs	r3, #1
 8003934:	e000      	b.n	8003938 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8003936:	2300      	movs	r3, #0
 8003938:	2b00      	cmp	r3, #0
 800393a:	d00d      	beq.n	8003958 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800393c:	4b40      	ldr	r3, [pc, #256]	; (8003a40 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800393e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003940:	4a3f      	ldr	r2, [pc, #252]	; (8003a40 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003942:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003946:	6593      	str	r3, [r2, #88]	; 0x58
 8003948:	4b3d      	ldr	r3, [pc, #244]	; (8003a40 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800394a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800394c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003950:	60bb      	str	r3, [r7, #8]
 8003952:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003954:	2301      	movs	r3, #1
 8003956:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003958:	4b3a      	ldr	r3, [pc, #232]	; (8003a44 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	4a39      	ldr	r2, [pc, #228]	; (8003a44 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800395e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003962:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003964:	f7fe fe3a 	bl	80025dc <HAL_GetTick>
 8003968:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800396a:	e009      	b.n	8003980 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800396c:	f7fe fe36 	bl	80025dc <HAL_GetTick>
 8003970:	4602      	mov	r2, r0
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	1ad3      	subs	r3, r2, r3
 8003976:	2b02      	cmp	r3, #2
 8003978:	d902      	bls.n	8003980 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 800397a:	2303      	movs	r3, #3
 800397c:	74fb      	strb	r3, [r7, #19]
        break;
 800397e:	e005      	b.n	800398c <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003980:	4b30      	ldr	r3, [pc, #192]	; (8003a44 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003988:	2b00      	cmp	r3, #0
 800398a:	d0ef      	beq.n	800396c <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 800398c:	7cfb      	ldrb	r3, [r7, #19]
 800398e:	2b00      	cmp	r3, #0
 8003990:	d15a      	bne.n	8003a48 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003992:	4b2b      	ldr	r3, [pc, #172]	; (8003a40 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003994:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003998:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800399c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800399e:	697b      	ldr	r3, [r7, #20]
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d01e      	beq.n	80039e2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80039a8:	697a      	ldr	r2, [r7, #20]
 80039aa:	429a      	cmp	r2, r3
 80039ac:	d019      	beq.n	80039e2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80039ae:	4b24      	ldr	r3, [pc, #144]	; (8003a40 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80039b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039b4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80039b8:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80039ba:	4b21      	ldr	r3, [pc, #132]	; (8003a40 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80039bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039c0:	4a1f      	ldr	r2, [pc, #124]	; (8003a40 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80039c2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80039c6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80039ca:	4b1d      	ldr	r3, [pc, #116]	; (8003a40 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80039cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039d0:	4a1b      	ldr	r2, [pc, #108]	; (8003a40 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80039d2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80039d6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80039da:	4a19      	ldr	r2, [pc, #100]	; (8003a40 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80039dc:	697b      	ldr	r3, [r7, #20]
 80039de:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80039e2:	697b      	ldr	r3, [r7, #20]
 80039e4:	f003 0301 	and.w	r3, r3, #1
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d016      	beq.n	8003a1a <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039ec:	f7fe fdf6 	bl	80025dc <HAL_GetTick>
 80039f0:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80039f2:	e00b      	b.n	8003a0c <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80039f4:	f7fe fdf2 	bl	80025dc <HAL_GetTick>
 80039f8:	4602      	mov	r2, r0
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	1ad3      	subs	r3, r2, r3
 80039fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a02:	4293      	cmp	r3, r2
 8003a04:	d902      	bls.n	8003a0c <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8003a06:	2303      	movs	r3, #3
 8003a08:	74fb      	strb	r3, [r7, #19]
            break;
 8003a0a:	e006      	b.n	8003a1a <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003a0c:	4b0c      	ldr	r3, [pc, #48]	; (8003a40 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003a0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a12:	f003 0302 	and.w	r3, r3, #2
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d0ec      	beq.n	80039f4 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8003a1a:	7cfb      	ldrb	r3, [r7, #19]
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d10b      	bne.n	8003a38 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003a20:	4b07      	ldr	r3, [pc, #28]	; (8003a40 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003a22:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a26:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a2e:	4904      	ldr	r1, [pc, #16]	; (8003a40 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003a30:	4313      	orrs	r3, r2
 8003a32:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003a36:	e009      	b.n	8003a4c <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003a38:	7cfb      	ldrb	r3, [r7, #19]
 8003a3a:	74bb      	strb	r3, [r7, #18]
 8003a3c:	e006      	b.n	8003a4c <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8003a3e:	bf00      	nop
 8003a40:	40021000 	.word	0x40021000
 8003a44:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a48:	7cfb      	ldrb	r3, [r7, #19]
 8003a4a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003a4c:	7c7b      	ldrb	r3, [r7, #17]
 8003a4e:	2b01      	cmp	r3, #1
 8003a50:	d105      	bne.n	8003a5e <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003a52:	4b8a      	ldr	r3, [pc, #552]	; (8003c7c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003a54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a56:	4a89      	ldr	r2, [pc, #548]	; (8003c7c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003a58:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003a5c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	f003 0301 	and.w	r3, r3, #1
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d00a      	beq.n	8003a80 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003a6a:	4b84      	ldr	r3, [pc, #528]	; (8003c7c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003a6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a70:	f023 0203 	bic.w	r2, r3, #3
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	6a1b      	ldr	r3, [r3, #32]
 8003a78:	4980      	ldr	r1, [pc, #512]	; (8003c7c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003a7a:	4313      	orrs	r3, r2
 8003a7c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	f003 0302 	and.w	r3, r3, #2
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d00a      	beq.n	8003aa2 <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003a8c:	4b7b      	ldr	r3, [pc, #492]	; (8003c7c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003a8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a92:	f023 020c 	bic.w	r2, r3, #12
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a9a:	4978      	ldr	r1, [pc, #480]	; (8003c7c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003a9c:	4313      	orrs	r3, r2
 8003a9e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	f003 0320 	and.w	r3, r3, #32
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d00a      	beq.n	8003ac4 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003aae:	4b73      	ldr	r3, [pc, #460]	; (8003c7c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003ab0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ab4:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003abc:	496f      	ldr	r1, [pc, #444]	; (8003c7c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003abe:	4313      	orrs	r3, r2
 8003ac0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d00a      	beq.n	8003ae6 <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003ad0:	4b6a      	ldr	r3, [pc, #424]	; (8003c7c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003ad2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ad6:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ade:	4967      	ldr	r1, [pc, #412]	; (8003c7c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003ae0:	4313      	orrs	r3, r2
 8003ae2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d00a      	beq.n	8003b08 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003af2:	4b62      	ldr	r3, [pc, #392]	; (8003c7c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003af4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003af8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b00:	495e      	ldr	r1, [pc, #376]	; (8003c7c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003b02:	4313      	orrs	r3, r2
 8003b04:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d00a      	beq.n	8003b2a <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003b14:	4b59      	ldr	r3, [pc, #356]	; (8003c7c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003b16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b1a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b22:	4956      	ldr	r1, [pc, #344]	; (8003c7c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003b24:	4313      	orrs	r3, r2
 8003b26:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d00a      	beq.n	8003b4c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003b36:	4b51      	ldr	r3, [pc, #324]	; (8003c7c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003b38:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b3c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b44:	494d      	ldr	r1, [pc, #308]	; (8003c7c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003b46:	4313      	orrs	r3, r2
 8003b48:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d028      	beq.n	8003baa <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003b58:	4b48      	ldr	r3, [pc, #288]	; (8003c7c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003b5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b5e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b66:	4945      	ldr	r1, [pc, #276]	; (8003c7c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003b68:	4313      	orrs	r3, r2
 8003b6a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b72:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003b76:	d106      	bne.n	8003b86 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003b78:	4b40      	ldr	r3, [pc, #256]	; (8003c7c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003b7a:	68db      	ldr	r3, [r3, #12]
 8003b7c:	4a3f      	ldr	r2, [pc, #252]	; (8003c7c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003b7e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003b82:	60d3      	str	r3, [r2, #12]
 8003b84:	e011      	b.n	8003baa <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b8a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003b8e:	d10c      	bne.n	8003baa <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	3304      	adds	r3, #4
 8003b94:	2101      	movs	r1, #1
 8003b96:	4618      	mov	r0, r3
 8003b98:	f000 f882 	bl	8003ca0 <RCCEx_PLLSAI1_Config>
 8003b9c:	4603      	mov	r3, r0
 8003b9e:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003ba0:	7cfb      	ldrb	r3, [r7, #19]
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d001      	beq.n	8003baa <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 8003ba6:	7cfb      	ldrb	r3, [r7, #19]
 8003ba8:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d028      	beq.n	8003c08 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003bb6:	4b31      	ldr	r3, [pc, #196]	; (8003c7c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003bb8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003bbc:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bc4:	492d      	ldr	r1, [pc, #180]	; (8003c7c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003bc6:	4313      	orrs	r3, r2
 8003bc8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bd0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003bd4:	d106      	bne.n	8003be4 <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003bd6:	4b29      	ldr	r3, [pc, #164]	; (8003c7c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003bd8:	68db      	ldr	r3, [r3, #12]
 8003bda:	4a28      	ldr	r2, [pc, #160]	; (8003c7c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003bdc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003be0:	60d3      	str	r3, [r2, #12]
 8003be2:	e011      	b.n	8003c08 <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003be8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003bec:	d10c      	bne.n	8003c08 <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	3304      	adds	r3, #4
 8003bf2:	2101      	movs	r1, #1
 8003bf4:	4618      	mov	r0, r3
 8003bf6:	f000 f853 	bl	8003ca0 <RCCEx_PLLSAI1_Config>
 8003bfa:	4603      	mov	r3, r0
 8003bfc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003bfe:	7cfb      	ldrb	r3, [r7, #19]
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d001      	beq.n	8003c08 <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 8003c04:	7cfb      	ldrb	r3, [r7, #19]
 8003c06:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d01c      	beq.n	8003c4e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003c14:	4b19      	ldr	r3, [pc, #100]	; (8003c7c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003c16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c1a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003c22:	4916      	ldr	r1, [pc, #88]	; (8003c7c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003c24:	4313      	orrs	r3, r2
 8003c26:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003c2e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003c32:	d10c      	bne.n	8003c4e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	3304      	adds	r3, #4
 8003c38:	2102      	movs	r1, #2
 8003c3a:	4618      	mov	r0, r3
 8003c3c:	f000 f830 	bl	8003ca0 <RCCEx_PLLSAI1_Config>
 8003c40:	4603      	mov	r3, r0
 8003c42:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003c44:	7cfb      	ldrb	r3, [r7, #19]
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d001      	beq.n	8003c4e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 8003c4a:	7cfb      	ldrb	r3, [r7, #19]
 8003c4c:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d00a      	beq.n	8003c70 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003c5a:	4b08      	ldr	r3, [pc, #32]	; (8003c7c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003c5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c60:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c68:	4904      	ldr	r1, [pc, #16]	; (8003c7c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003c6a:	4313      	orrs	r3, r2
 8003c6c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003c70:	7cbb      	ldrb	r3, [r7, #18]
}
 8003c72:	4618      	mov	r0, r3
 8003c74:	3718      	adds	r7, #24
 8003c76:	46bd      	mov	sp, r7
 8003c78:	bd80      	pop	{r7, pc}
 8003c7a:	bf00      	nop
 8003c7c:	40021000 	.word	0x40021000

08003c80 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8003c80:	b480      	push	{r7}
 8003c82:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8003c84:	4b05      	ldr	r3, [pc, #20]	; (8003c9c <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	4a04      	ldr	r2, [pc, #16]	; (8003c9c <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8003c8a:	f043 0304 	orr.w	r3, r3, #4
 8003c8e:	6013      	str	r3, [r2, #0]
}
 8003c90:	bf00      	nop
 8003c92:	46bd      	mov	sp, r7
 8003c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c98:	4770      	bx	lr
 8003c9a:	bf00      	nop
 8003c9c:	40021000 	.word	0x40021000

08003ca0 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003ca0:	b580      	push	{r7, lr}
 8003ca2:	b084      	sub	sp, #16
 8003ca4:	af00      	add	r7, sp, #0
 8003ca6:	6078      	str	r0, [r7, #4]
 8003ca8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003caa:	2300      	movs	r3, #0
 8003cac:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003cae:	4b74      	ldr	r3, [pc, #464]	; (8003e80 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003cb0:	68db      	ldr	r3, [r3, #12]
 8003cb2:	f003 0303 	and.w	r3, r3, #3
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d018      	beq.n	8003cec <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003cba:	4b71      	ldr	r3, [pc, #452]	; (8003e80 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003cbc:	68db      	ldr	r3, [r3, #12]
 8003cbe:	f003 0203 	and.w	r2, r3, #3
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	429a      	cmp	r2, r3
 8003cc8:	d10d      	bne.n	8003ce6 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
       ||
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d009      	beq.n	8003ce6 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8003cd2:	4b6b      	ldr	r3, [pc, #428]	; (8003e80 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003cd4:	68db      	ldr	r3, [r3, #12]
 8003cd6:	091b      	lsrs	r3, r3, #4
 8003cd8:	f003 0307 	and.w	r3, r3, #7
 8003cdc:	1c5a      	adds	r2, r3, #1
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	685b      	ldr	r3, [r3, #4]
       ||
 8003ce2:	429a      	cmp	r2, r3
 8003ce4:	d047      	beq.n	8003d76 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003ce6:	2301      	movs	r3, #1
 8003ce8:	73fb      	strb	r3, [r7, #15]
 8003cea:	e044      	b.n	8003d76 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	2b03      	cmp	r3, #3
 8003cf2:	d018      	beq.n	8003d26 <RCCEx_PLLSAI1_Config+0x86>
 8003cf4:	2b03      	cmp	r3, #3
 8003cf6:	d825      	bhi.n	8003d44 <RCCEx_PLLSAI1_Config+0xa4>
 8003cf8:	2b01      	cmp	r3, #1
 8003cfa:	d002      	beq.n	8003d02 <RCCEx_PLLSAI1_Config+0x62>
 8003cfc:	2b02      	cmp	r3, #2
 8003cfe:	d009      	beq.n	8003d14 <RCCEx_PLLSAI1_Config+0x74>
 8003d00:	e020      	b.n	8003d44 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003d02:	4b5f      	ldr	r3, [pc, #380]	; (8003e80 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	f003 0302 	and.w	r3, r3, #2
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d11d      	bne.n	8003d4a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8003d0e:	2301      	movs	r3, #1
 8003d10:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003d12:	e01a      	b.n	8003d4a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003d14:	4b5a      	ldr	r3, [pc, #360]	; (8003e80 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d116      	bne.n	8003d4e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8003d20:	2301      	movs	r3, #1
 8003d22:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003d24:	e013      	b.n	8003d4e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003d26:	4b56      	ldr	r3, [pc, #344]	; (8003e80 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d10f      	bne.n	8003d52 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003d32:	4b53      	ldr	r3, [pc, #332]	; (8003e80 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d109      	bne.n	8003d52 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8003d3e:	2301      	movs	r3, #1
 8003d40:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003d42:	e006      	b.n	8003d52 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003d44:	2301      	movs	r3, #1
 8003d46:	73fb      	strb	r3, [r7, #15]
      break;
 8003d48:	e004      	b.n	8003d54 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003d4a:	bf00      	nop
 8003d4c:	e002      	b.n	8003d54 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003d4e:	bf00      	nop
 8003d50:	e000      	b.n	8003d54 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003d52:	bf00      	nop
    }

    if(status == HAL_OK)
 8003d54:	7bfb      	ldrb	r3, [r7, #15]
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d10d      	bne.n	8003d76 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003d5a:	4b49      	ldr	r3, [pc, #292]	; (8003e80 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003d5c:	68db      	ldr	r3, [r3, #12]
 8003d5e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	6819      	ldr	r1, [r3, #0]
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	685b      	ldr	r3, [r3, #4]
 8003d6a:	3b01      	subs	r3, #1
 8003d6c:	011b      	lsls	r3, r3, #4
 8003d6e:	430b      	orrs	r3, r1
 8003d70:	4943      	ldr	r1, [pc, #268]	; (8003e80 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003d72:	4313      	orrs	r3, r2
 8003d74:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003d76:	7bfb      	ldrb	r3, [r7, #15]
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d17c      	bne.n	8003e76 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003d7c:	4b40      	ldr	r3, [pc, #256]	; (8003e80 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	4a3f      	ldr	r2, [pc, #252]	; (8003e80 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003d82:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003d86:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003d88:	f7fe fc28 	bl	80025dc <HAL_GetTick>
 8003d8c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003d8e:	e009      	b.n	8003da4 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003d90:	f7fe fc24 	bl	80025dc <HAL_GetTick>
 8003d94:	4602      	mov	r2, r0
 8003d96:	68bb      	ldr	r3, [r7, #8]
 8003d98:	1ad3      	subs	r3, r2, r3
 8003d9a:	2b02      	cmp	r3, #2
 8003d9c:	d902      	bls.n	8003da4 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003d9e:	2303      	movs	r3, #3
 8003da0:	73fb      	strb	r3, [r7, #15]
        break;
 8003da2:	e005      	b.n	8003db0 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003da4:	4b36      	ldr	r3, [pc, #216]	; (8003e80 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d1ef      	bne.n	8003d90 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003db0:	7bfb      	ldrb	r3, [r7, #15]
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d15f      	bne.n	8003e76 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003db6:	683b      	ldr	r3, [r7, #0]
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d110      	bne.n	8003dde <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003dbc:	4b30      	ldr	r3, [pc, #192]	; (8003e80 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003dbe:	691b      	ldr	r3, [r3, #16]
 8003dc0:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8003dc4:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003dc8:	687a      	ldr	r2, [r7, #4]
 8003dca:	6892      	ldr	r2, [r2, #8]
 8003dcc:	0211      	lsls	r1, r2, #8
 8003dce:	687a      	ldr	r2, [r7, #4]
 8003dd0:	68d2      	ldr	r2, [r2, #12]
 8003dd2:	06d2      	lsls	r2, r2, #27
 8003dd4:	430a      	orrs	r2, r1
 8003dd6:	492a      	ldr	r1, [pc, #168]	; (8003e80 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003dd8:	4313      	orrs	r3, r2
 8003dda:	610b      	str	r3, [r1, #16]
 8003ddc:	e027      	b.n	8003e2e <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003dde:	683b      	ldr	r3, [r7, #0]
 8003de0:	2b01      	cmp	r3, #1
 8003de2:	d112      	bne.n	8003e0a <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003de4:	4b26      	ldr	r3, [pc, #152]	; (8003e80 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003de6:	691b      	ldr	r3, [r3, #16]
 8003de8:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8003dec:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003df0:	687a      	ldr	r2, [r7, #4]
 8003df2:	6892      	ldr	r2, [r2, #8]
 8003df4:	0211      	lsls	r1, r2, #8
 8003df6:	687a      	ldr	r2, [r7, #4]
 8003df8:	6912      	ldr	r2, [r2, #16]
 8003dfa:	0852      	lsrs	r2, r2, #1
 8003dfc:	3a01      	subs	r2, #1
 8003dfe:	0552      	lsls	r2, r2, #21
 8003e00:	430a      	orrs	r2, r1
 8003e02:	491f      	ldr	r1, [pc, #124]	; (8003e80 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003e04:	4313      	orrs	r3, r2
 8003e06:	610b      	str	r3, [r1, #16]
 8003e08:	e011      	b.n	8003e2e <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003e0a:	4b1d      	ldr	r3, [pc, #116]	; (8003e80 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003e0c:	691b      	ldr	r3, [r3, #16]
 8003e0e:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003e12:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003e16:	687a      	ldr	r2, [r7, #4]
 8003e18:	6892      	ldr	r2, [r2, #8]
 8003e1a:	0211      	lsls	r1, r2, #8
 8003e1c:	687a      	ldr	r2, [r7, #4]
 8003e1e:	6952      	ldr	r2, [r2, #20]
 8003e20:	0852      	lsrs	r2, r2, #1
 8003e22:	3a01      	subs	r2, #1
 8003e24:	0652      	lsls	r2, r2, #25
 8003e26:	430a      	orrs	r2, r1
 8003e28:	4915      	ldr	r1, [pc, #84]	; (8003e80 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003e2a:	4313      	orrs	r3, r2
 8003e2c:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003e2e:	4b14      	ldr	r3, [pc, #80]	; (8003e80 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	4a13      	ldr	r2, [pc, #76]	; (8003e80 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003e34:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003e38:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e3a:	f7fe fbcf 	bl	80025dc <HAL_GetTick>
 8003e3e:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003e40:	e009      	b.n	8003e56 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003e42:	f7fe fbcb 	bl	80025dc <HAL_GetTick>
 8003e46:	4602      	mov	r2, r0
 8003e48:	68bb      	ldr	r3, [r7, #8]
 8003e4a:	1ad3      	subs	r3, r2, r3
 8003e4c:	2b02      	cmp	r3, #2
 8003e4e:	d902      	bls.n	8003e56 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8003e50:	2303      	movs	r3, #3
 8003e52:	73fb      	strb	r3, [r7, #15]
          break;
 8003e54:	e005      	b.n	8003e62 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003e56:	4b0a      	ldr	r3, [pc, #40]	; (8003e80 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d0ef      	beq.n	8003e42 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8003e62:	7bfb      	ldrb	r3, [r7, #15]
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d106      	bne.n	8003e76 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003e68:	4b05      	ldr	r3, [pc, #20]	; (8003e80 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003e6a:	691a      	ldr	r2, [r3, #16]
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	699b      	ldr	r3, [r3, #24]
 8003e70:	4903      	ldr	r1, [pc, #12]	; (8003e80 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003e72:	4313      	orrs	r3, r2
 8003e74:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003e76:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e78:	4618      	mov	r0, r3
 8003e7a:	3710      	adds	r7, #16
 8003e7c:	46bd      	mov	sp, r7
 8003e7e:	bd80      	pop	{r7, pc}
 8003e80:	40021000 	.word	0x40021000

08003e84 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003e84:	b580      	push	{r7, lr}
 8003e86:	b084      	sub	sp, #16
 8003e88:	af00      	add	r7, sp, #0
 8003e8a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d101      	bne.n	8003e96 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003e92:	2301      	movs	r3, #1
 8003e94:	e095      	b.n	8003fc2 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d108      	bne.n	8003eb0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	685b      	ldr	r3, [r3, #4]
 8003ea2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003ea6:	d009      	beq.n	8003ebc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	2200      	movs	r2, #0
 8003eac:	61da      	str	r2, [r3, #28]
 8003eae:	e005      	b.n	8003ebc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	2200      	movs	r2, #0
 8003eb4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	2200      	movs	r2, #0
 8003eba:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	2200      	movs	r2, #0
 8003ec0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003ec8:	b2db      	uxtb	r3, r3
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d106      	bne.n	8003edc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	2200      	movs	r2, #0
 8003ed2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003ed6:	6878      	ldr	r0, [r7, #4]
 8003ed8:	f7fe f8da 	bl	8002090 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	2202      	movs	r2, #2
 8003ee0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	681a      	ldr	r2, [r3, #0]
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003ef2:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	68db      	ldr	r3, [r3, #12]
 8003ef8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003efc:	d902      	bls.n	8003f04 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003efe:	2300      	movs	r3, #0
 8003f00:	60fb      	str	r3, [r7, #12]
 8003f02:	e002      	b.n	8003f0a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003f04:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003f08:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	68db      	ldr	r3, [r3, #12]
 8003f0e:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8003f12:	d007      	beq.n	8003f24 <HAL_SPI_Init+0xa0>
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	68db      	ldr	r3, [r3, #12]
 8003f18:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003f1c:	d002      	beq.n	8003f24 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	2200      	movs	r2, #0
 8003f22:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	685b      	ldr	r3, [r3, #4]
 8003f28:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	689b      	ldr	r3, [r3, #8]
 8003f30:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003f34:	431a      	orrs	r2, r3
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	691b      	ldr	r3, [r3, #16]
 8003f3a:	f003 0302 	and.w	r3, r3, #2
 8003f3e:	431a      	orrs	r2, r3
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	695b      	ldr	r3, [r3, #20]
 8003f44:	f003 0301 	and.w	r3, r3, #1
 8003f48:	431a      	orrs	r2, r3
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	699b      	ldr	r3, [r3, #24]
 8003f4e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003f52:	431a      	orrs	r2, r3
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	69db      	ldr	r3, [r3, #28]
 8003f58:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003f5c:	431a      	orrs	r2, r3
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	6a1b      	ldr	r3, [r3, #32]
 8003f62:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f66:	ea42 0103 	orr.w	r1, r2, r3
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f6e:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	430a      	orrs	r2, r1
 8003f78:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	699b      	ldr	r3, [r3, #24]
 8003f7e:	0c1b      	lsrs	r3, r3, #16
 8003f80:	f003 0204 	and.w	r2, r3, #4
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f88:	f003 0310 	and.w	r3, r3, #16
 8003f8c:	431a      	orrs	r2, r3
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f92:	f003 0308 	and.w	r3, r3, #8
 8003f96:	431a      	orrs	r2, r3
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	68db      	ldr	r3, [r3, #12]
 8003f9c:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8003fa0:	ea42 0103 	orr.w	r1, r2, r3
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	430a      	orrs	r2, r1
 8003fb0:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	2200      	movs	r2, #0
 8003fb6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	2201      	movs	r2, #1
 8003fbc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8003fc0:	2300      	movs	r3, #0
}
 8003fc2:	4618      	mov	r0, r3
 8003fc4:	3710      	adds	r7, #16
 8003fc6:	46bd      	mov	sp, r7
 8003fc8:	bd80      	pop	{r7, pc}

08003fca <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003fca:	b580      	push	{r7, lr}
 8003fcc:	b088      	sub	sp, #32
 8003fce:	af00      	add	r7, sp, #0
 8003fd0:	60f8      	str	r0, [r7, #12]
 8003fd2:	60b9      	str	r1, [r7, #8]
 8003fd4:	603b      	str	r3, [r7, #0]
 8003fd6:	4613      	mov	r3, r2
 8003fd8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003fda:	2300      	movs	r3, #0
 8003fdc:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003fe4:	2b01      	cmp	r3, #1
 8003fe6:	d101      	bne.n	8003fec <HAL_SPI_Transmit+0x22>
 8003fe8:	2302      	movs	r3, #2
 8003fea:	e158      	b.n	800429e <HAL_SPI_Transmit+0x2d4>
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	2201      	movs	r2, #1
 8003ff0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003ff4:	f7fe faf2 	bl	80025dc <HAL_GetTick>
 8003ff8:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8003ffa:	88fb      	ldrh	r3, [r7, #6]
 8003ffc:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004004:	b2db      	uxtb	r3, r3
 8004006:	2b01      	cmp	r3, #1
 8004008:	d002      	beq.n	8004010 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800400a:	2302      	movs	r3, #2
 800400c:	77fb      	strb	r3, [r7, #31]
    goto error;
 800400e:	e13d      	b.n	800428c <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 8004010:	68bb      	ldr	r3, [r7, #8]
 8004012:	2b00      	cmp	r3, #0
 8004014:	d002      	beq.n	800401c <HAL_SPI_Transmit+0x52>
 8004016:	88fb      	ldrh	r3, [r7, #6]
 8004018:	2b00      	cmp	r3, #0
 800401a:	d102      	bne.n	8004022 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800401c:	2301      	movs	r3, #1
 800401e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004020:	e134      	b.n	800428c <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	2203      	movs	r2, #3
 8004026:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	2200      	movs	r2, #0
 800402e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	68ba      	ldr	r2, [r7, #8]
 8004034:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	88fa      	ldrh	r2, [r7, #6]
 800403a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	88fa      	ldrh	r2, [r7, #6]
 8004040:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	2200      	movs	r2, #0
 8004046:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	2200      	movs	r2, #0
 800404c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	2200      	movs	r2, #0
 8004054:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	2200      	movs	r2, #0
 800405c:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	2200      	movs	r2, #0
 8004062:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	689b      	ldr	r3, [r3, #8]
 8004068:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800406c:	d10f      	bne.n	800408e <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	681a      	ldr	r2, [r3, #0]
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800407c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	681a      	ldr	r2, [r3, #0]
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800408c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004098:	2b40      	cmp	r3, #64	; 0x40
 800409a:	d007      	beq.n	80040ac <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	681a      	ldr	r2, [r3, #0]
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80040aa:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	68db      	ldr	r3, [r3, #12]
 80040b0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80040b4:	d94b      	bls.n	800414e <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	685b      	ldr	r3, [r3, #4]
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d002      	beq.n	80040c4 <HAL_SPI_Transmit+0xfa>
 80040be:	8afb      	ldrh	r3, [r7, #22]
 80040c0:	2b01      	cmp	r3, #1
 80040c2:	d13e      	bne.n	8004142 <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040c8:	881a      	ldrh	r2, [r3, #0]
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040d4:	1c9a      	adds	r2, r3, #2
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80040de:	b29b      	uxth	r3, r3
 80040e0:	3b01      	subs	r3, #1
 80040e2:	b29a      	uxth	r2, r3
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80040e8:	e02b      	b.n	8004142 <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	689b      	ldr	r3, [r3, #8]
 80040f0:	f003 0302 	and.w	r3, r3, #2
 80040f4:	2b02      	cmp	r3, #2
 80040f6:	d112      	bne.n	800411e <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040fc:	881a      	ldrh	r2, [r3, #0]
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004108:	1c9a      	adds	r2, r3, #2
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004112:	b29b      	uxth	r3, r3
 8004114:	3b01      	subs	r3, #1
 8004116:	b29a      	uxth	r2, r3
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800411c:	e011      	b.n	8004142 <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800411e:	f7fe fa5d 	bl	80025dc <HAL_GetTick>
 8004122:	4602      	mov	r2, r0
 8004124:	69bb      	ldr	r3, [r7, #24]
 8004126:	1ad3      	subs	r3, r2, r3
 8004128:	683a      	ldr	r2, [r7, #0]
 800412a:	429a      	cmp	r2, r3
 800412c:	d803      	bhi.n	8004136 <HAL_SPI_Transmit+0x16c>
 800412e:	683b      	ldr	r3, [r7, #0]
 8004130:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004134:	d102      	bne.n	800413c <HAL_SPI_Transmit+0x172>
 8004136:	683b      	ldr	r3, [r7, #0]
 8004138:	2b00      	cmp	r3, #0
 800413a:	d102      	bne.n	8004142 <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 800413c:	2303      	movs	r3, #3
 800413e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004140:	e0a4      	b.n	800428c <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004146:	b29b      	uxth	r3, r3
 8004148:	2b00      	cmp	r3, #0
 800414a:	d1ce      	bne.n	80040ea <HAL_SPI_Transmit+0x120>
 800414c:	e07c      	b.n	8004248 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	685b      	ldr	r3, [r3, #4]
 8004152:	2b00      	cmp	r3, #0
 8004154:	d002      	beq.n	800415c <HAL_SPI_Transmit+0x192>
 8004156:	8afb      	ldrh	r3, [r7, #22]
 8004158:	2b01      	cmp	r3, #1
 800415a:	d170      	bne.n	800423e <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004160:	b29b      	uxth	r3, r3
 8004162:	2b01      	cmp	r3, #1
 8004164:	d912      	bls.n	800418c <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800416a:	881a      	ldrh	r2, [r3, #0]
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004176:	1c9a      	adds	r2, r3, #2
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004180:	b29b      	uxth	r3, r3
 8004182:	3b02      	subs	r3, #2
 8004184:	b29a      	uxth	r2, r3
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	87da      	strh	r2, [r3, #62]	; 0x3e
 800418a:	e058      	b.n	800423e <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	330c      	adds	r3, #12
 8004196:	7812      	ldrb	r2, [r2, #0]
 8004198:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800419e:	1c5a      	adds	r2, r3, #1
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80041a8:	b29b      	uxth	r3, r3
 80041aa:	3b01      	subs	r3, #1
 80041ac:	b29a      	uxth	r2, r3
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 80041b2:	e044      	b.n	800423e <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	689b      	ldr	r3, [r3, #8]
 80041ba:	f003 0302 	and.w	r3, r3, #2
 80041be:	2b02      	cmp	r3, #2
 80041c0:	d12b      	bne.n	800421a <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80041c6:	b29b      	uxth	r3, r3
 80041c8:	2b01      	cmp	r3, #1
 80041ca:	d912      	bls.n	80041f2 <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041d0:	881a      	ldrh	r2, [r3, #0]
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041dc:	1c9a      	adds	r2, r3, #2
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80041e6:	b29b      	uxth	r3, r3
 80041e8:	3b02      	subs	r3, #2
 80041ea:	b29a      	uxth	r2, r3
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	87da      	strh	r2, [r3, #62]	; 0x3e
 80041f0:	e025      	b.n	800423e <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	330c      	adds	r3, #12
 80041fc:	7812      	ldrb	r2, [r2, #0]
 80041fe:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004204:	1c5a      	adds	r2, r3, #1
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800420e:	b29b      	uxth	r3, r3
 8004210:	3b01      	subs	r3, #1
 8004212:	b29a      	uxth	r2, r3
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004218:	e011      	b.n	800423e <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800421a:	f7fe f9df 	bl	80025dc <HAL_GetTick>
 800421e:	4602      	mov	r2, r0
 8004220:	69bb      	ldr	r3, [r7, #24]
 8004222:	1ad3      	subs	r3, r2, r3
 8004224:	683a      	ldr	r2, [r7, #0]
 8004226:	429a      	cmp	r2, r3
 8004228:	d803      	bhi.n	8004232 <HAL_SPI_Transmit+0x268>
 800422a:	683b      	ldr	r3, [r7, #0]
 800422c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004230:	d102      	bne.n	8004238 <HAL_SPI_Transmit+0x26e>
 8004232:	683b      	ldr	r3, [r7, #0]
 8004234:	2b00      	cmp	r3, #0
 8004236:	d102      	bne.n	800423e <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8004238:	2303      	movs	r3, #3
 800423a:	77fb      	strb	r3, [r7, #31]
          goto error;
 800423c:	e026      	b.n	800428c <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004242:	b29b      	uxth	r3, r3
 8004244:	2b00      	cmp	r3, #0
 8004246:	d1b5      	bne.n	80041b4 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004248:	69ba      	ldr	r2, [r7, #24]
 800424a:	6839      	ldr	r1, [r7, #0]
 800424c:	68f8      	ldr	r0, [r7, #12]
 800424e:	f000 f949 	bl	80044e4 <SPI_EndRxTxTransaction>
 8004252:	4603      	mov	r3, r0
 8004254:	2b00      	cmp	r3, #0
 8004256:	d002      	beq.n	800425e <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	2220      	movs	r2, #32
 800425c:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	689b      	ldr	r3, [r3, #8]
 8004262:	2b00      	cmp	r3, #0
 8004264:	d10a      	bne.n	800427c <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004266:	2300      	movs	r3, #0
 8004268:	613b      	str	r3, [r7, #16]
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	68db      	ldr	r3, [r3, #12]
 8004270:	613b      	str	r3, [r7, #16]
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	689b      	ldr	r3, [r3, #8]
 8004278:	613b      	str	r3, [r7, #16]
 800427a:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004280:	2b00      	cmp	r3, #0
 8004282:	d002      	beq.n	800428a <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8004284:	2301      	movs	r3, #1
 8004286:	77fb      	strb	r3, [r7, #31]
 8004288:	e000      	b.n	800428c <HAL_SPI_Transmit+0x2c2>
  }

error:
 800428a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	2201      	movs	r2, #1
 8004290:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	2200      	movs	r2, #0
 8004298:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800429c:	7ffb      	ldrb	r3, [r7, #31]
}
 800429e:	4618      	mov	r0, r3
 80042a0:	3720      	adds	r7, #32
 80042a2:	46bd      	mov	sp, r7
 80042a4:	bd80      	pop	{r7, pc}
	...

080042a8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80042a8:	b580      	push	{r7, lr}
 80042aa:	b088      	sub	sp, #32
 80042ac:	af00      	add	r7, sp, #0
 80042ae:	60f8      	str	r0, [r7, #12]
 80042b0:	60b9      	str	r1, [r7, #8]
 80042b2:	603b      	str	r3, [r7, #0]
 80042b4:	4613      	mov	r3, r2
 80042b6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80042b8:	f7fe f990 	bl	80025dc <HAL_GetTick>
 80042bc:	4602      	mov	r2, r0
 80042be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042c0:	1a9b      	subs	r3, r3, r2
 80042c2:	683a      	ldr	r2, [r7, #0]
 80042c4:	4413      	add	r3, r2
 80042c6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80042c8:	f7fe f988 	bl	80025dc <HAL_GetTick>
 80042cc:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80042ce:	4b39      	ldr	r3, [pc, #228]	; (80043b4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	015b      	lsls	r3, r3, #5
 80042d4:	0d1b      	lsrs	r3, r3, #20
 80042d6:	69fa      	ldr	r2, [r7, #28]
 80042d8:	fb02 f303 	mul.w	r3, r2, r3
 80042dc:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80042de:	e054      	b.n	800438a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80042e0:	683b      	ldr	r3, [r7, #0]
 80042e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042e6:	d050      	beq.n	800438a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80042e8:	f7fe f978 	bl	80025dc <HAL_GetTick>
 80042ec:	4602      	mov	r2, r0
 80042ee:	69bb      	ldr	r3, [r7, #24]
 80042f0:	1ad3      	subs	r3, r2, r3
 80042f2:	69fa      	ldr	r2, [r7, #28]
 80042f4:	429a      	cmp	r2, r3
 80042f6:	d902      	bls.n	80042fe <SPI_WaitFlagStateUntilTimeout+0x56>
 80042f8:	69fb      	ldr	r3, [r7, #28]
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d13d      	bne.n	800437a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	685a      	ldr	r2, [r3, #4]
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800430c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	685b      	ldr	r3, [r3, #4]
 8004312:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004316:	d111      	bne.n	800433c <SPI_WaitFlagStateUntilTimeout+0x94>
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	689b      	ldr	r3, [r3, #8]
 800431c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004320:	d004      	beq.n	800432c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	689b      	ldr	r3, [r3, #8]
 8004326:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800432a:	d107      	bne.n	800433c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	681a      	ldr	r2, [r3, #0]
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800433a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004340:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004344:	d10f      	bne.n	8004366 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	681a      	ldr	r2, [r3, #0]
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004354:	601a      	str	r2, [r3, #0]
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	681a      	ldr	r2, [r3, #0]
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004364:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	2201      	movs	r2, #1
 800436a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	2200      	movs	r2, #0
 8004372:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8004376:	2303      	movs	r3, #3
 8004378:	e017      	b.n	80043aa <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800437a:	697b      	ldr	r3, [r7, #20]
 800437c:	2b00      	cmp	r3, #0
 800437e:	d101      	bne.n	8004384 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004380:	2300      	movs	r3, #0
 8004382:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004384:	697b      	ldr	r3, [r7, #20]
 8004386:	3b01      	subs	r3, #1
 8004388:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	689a      	ldr	r2, [r3, #8]
 8004390:	68bb      	ldr	r3, [r7, #8]
 8004392:	4013      	ands	r3, r2
 8004394:	68ba      	ldr	r2, [r7, #8]
 8004396:	429a      	cmp	r2, r3
 8004398:	bf0c      	ite	eq
 800439a:	2301      	moveq	r3, #1
 800439c:	2300      	movne	r3, #0
 800439e:	b2db      	uxtb	r3, r3
 80043a0:	461a      	mov	r2, r3
 80043a2:	79fb      	ldrb	r3, [r7, #7]
 80043a4:	429a      	cmp	r2, r3
 80043a6:	d19b      	bne.n	80042e0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80043a8:	2300      	movs	r3, #0
}
 80043aa:	4618      	mov	r0, r3
 80043ac:	3720      	adds	r7, #32
 80043ae:	46bd      	mov	sp, r7
 80043b0:	bd80      	pop	{r7, pc}
 80043b2:	bf00      	nop
 80043b4:	20000000 	.word	0x20000000

080043b8 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80043b8:	b580      	push	{r7, lr}
 80043ba:	b08a      	sub	sp, #40	; 0x28
 80043bc:	af00      	add	r7, sp, #0
 80043be:	60f8      	str	r0, [r7, #12]
 80043c0:	60b9      	str	r1, [r7, #8]
 80043c2:	607a      	str	r2, [r7, #4]
 80043c4:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80043c6:	2300      	movs	r3, #0
 80043c8:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80043ca:	f7fe f907 	bl	80025dc <HAL_GetTick>
 80043ce:	4602      	mov	r2, r0
 80043d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043d2:	1a9b      	subs	r3, r3, r2
 80043d4:	683a      	ldr	r2, [r7, #0]
 80043d6:	4413      	add	r3, r2
 80043d8:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 80043da:	f7fe f8ff 	bl	80025dc <HAL_GetTick>
 80043de:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	330c      	adds	r3, #12
 80043e6:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80043e8:	4b3d      	ldr	r3, [pc, #244]	; (80044e0 <SPI_WaitFifoStateUntilTimeout+0x128>)
 80043ea:	681a      	ldr	r2, [r3, #0]
 80043ec:	4613      	mov	r3, r2
 80043ee:	009b      	lsls	r3, r3, #2
 80043f0:	4413      	add	r3, r2
 80043f2:	00da      	lsls	r2, r3, #3
 80043f4:	1ad3      	subs	r3, r2, r3
 80043f6:	0d1b      	lsrs	r3, r3, #20
 80043f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80043fa:	fb02 f303 	mul.w	r3, r2, r3
 80043fe:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8004400:	e060      	b.n	80044c4 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8004402:	68bb      	ldr	r3, [r7, #8]
 8004404:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8004408:	d107      	bne.n	800441a <SPI_WaitFifoStateUntilTimeout+0x62>
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	2b00      	cmp	r3, #0
 800440e:	d104      	bne.n	800441a <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8004410:	69fb      	ldr	r3, [r7, #28]
 8004412:	781b      	ldrb	r3, [r3, #0]
 8004414:	b2db      	uxtb	r3, r3
 8004416:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8004418:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800441a:	683b      	ldr	r3, [r7, #0]
 800441c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004420:	d050      	beq.n	80044c4 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004422:	f7fe f8db 	bl	80025dc <HAL_GetTick>
 8004426:	4602      	mov	r2, r0
 8004428:	6a3b      	ldr	r3, [r7, #32]
 800442a:	1ad3      	subs	r3, r2, r3
 800442c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800442e:	429a      	cmp	r2, r3
 8004430:	d902      	bls.n	8004438 <SPI_WaitFifoStateUntilTimeout+0x80>
 8004432:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004434:	2b00      	cmp	r3, #0
 8004436:	d13d      	bne.n	80044b4 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	685a      	ldr	r2, [r3, #4]
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004446:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	685b      	ldr	r3, [r3, #4]
 800444c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004450:	d111      	bne.n	8004476 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	689b      	ldr	r3, [r3, #8]
 8004456:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800445a:	d004      	beq.n	8004466 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	689b      	ldr	r3, [r3, #8]
 8004460:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004464:	d107      	bne.n	8004476 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	681a      	ldr	r2, [r3, #0]
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004474:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800447a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800447e:	d10f      	bne.n	80044a0 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	681a      	ldr	r2, [r3, #0]
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800448e:	601a      	str	r2, [r3, #0]
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	681a      	ldr	r2, [r3, #0]
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800449e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	2201      	movs	r2, #1
 80044a4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	2200      	movs	r2, #0
 80044ac:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80044b0:	2303      	movs	r3, #3
 80044b2:	e010      	b.n	80044d6 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80044b4:	69bb      	ldr	r3, [r7, #24]
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d101      	bne.n	80044be <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 80044ba:	2300      	movs	r3, #0
 80044bc:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 80044be:	69bb      	ldr	r3, [r7, #24]
 80044c0:	3b01      	subs	r3, #1
 80044c2:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	689a      	ldr	r2, [r3, #8]
 80044ca:	68bb      	ldr	r3, [r7, #8]
 80044cc:	4013      	ands	r3, r2
 80044ce:	687a      	ldr	r2, [r7, #4]
 80044d0:	429a      	cmp	r2, r3
 80044d2:	d196      	bne.n	8004402 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 80044d4:	2300      	movs	r3, #0
}
 80044d6:	4618      	mov	r0, r3
 80044d8:	3728      	adds	r7, #40	; 0x28
 80044da:	46bd      	mov	sp, r7
 80044dc:	bd80      	pop	{r7, pc}
 80044de:	bf00      	nop
 80044e0:	20000000 	.word	0x20000000

080044e4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80044e4:	b580      	push	{r7, lr}
 80044e6:	b086      	sub	sp, #24
 80044e8:	af02      	add	r7, sp, #8
 80044ea:	60f8      	str	r0, [r7, #12]
 80044ec:	60b9      	str	r1, [r7, #8]
 80044ee:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	9300      	str	r3, [sp, #0]
 80044f4:	68bb      	ldr	r3, [r7, #8]
 80044f6:	2200      	movs	r2, #0
 80044f8:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 80044fc:	68f8      	ldr	r0, [r7, #12]
 80044fe:	f7ff ff5b 	bl	80043b8 <SPI_WaitFifoStateUntilTimeout>
 8004502:	4603      	mov	r3, r0
 8004504:	2b00      	cmp	r3, #0
 8004506:	d007      	beq.n	8004518 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800450c:	f043 0220 	orr.w	r2, r3, #32
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004514:	2303      	movs	r3, #3
 8004516:	e027      	b.n	8004568 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	9300      	str	r3, [sp, #0]
 800451c:	68bb      	ldr	r3, [r7, #8]
 800451e:	2200      	movs	r2, #0
 8004520:	2180      	movs	r1, #128	; 0x80
 8004522:	68f8      	ldr	r0, [r7, #12]
 8004524:	f7ff fec0 	bl	80042a8 <SPI_WaitFlagStateUntilTimeout>
 8004528:	4603      	mov	r3, r0
 800452a:	2b00      	cmp	r3, #0
 800452c:	d007      	beq.n	800453e <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004532:	f043 0220 	orr.w	r2, r3, #32
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800453a:	2303      	movs	r3, #3
 800453c:	e014      	b.n	8004568 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	9300      	str	r3, [sp, #0]
 8004542:	68bb      	ldr	r3, [r7, #8]
 8004544:	2200      	movs	r2, #0
 8004546:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800454a:	68f8      	ldr	r0, [r7, #12]
 800454c:	f7ff ff34 	bl	80043b8 <SPI_WaitFifoStateUntilTimeout>
 8004550:	4603      	mov	r3, r0
 8004552:	2b00      	cmp	r3, #0
 8004554:	d007      	beq.n	8004566 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800455a:	f043 0220 	orr.w	r2, r3, #32
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004562:	2303      	movs	r3, #3
 8004564:	e000      	b.n	8004568 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8004566:	2300      	movs	r3, #0
}
 8004568:	4618      	mov	r0, r3
 800456a:	3710      	adds	r7, #16
 800456c:	46bd      	mov	sp, r7
 800456e:	bd80      	pop	{r7, pc}

08004570 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004570:	b580      	push	{r7, lr}
 8004572:	b082      	sub	sp, #8
 8004574:	af00      	add	r7, sp, #0
 8004576:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	2b00      	cmp	r3, #0
 800457c:	d101      	bne.n	8004582 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800457e:	2301      	movs	r3, #1
 8004580:	e049      	b.n	8004616 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004588:	b2db      	uxtb	r3, r3
 800458a:	2b00      	cmp	r3, #0
 800458c:	d106      	bne.n	800459c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	2200      	movs	r2, #0
 8004592:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004596:	6878      	ldr	r0, [r7, #4]
 8004598:	f7fd fdbe 	bl	8002118 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	2202      	movs	r2, #2
 80045a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681a      	ldr	r2, [r3, #0]
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	3304      	adds	r3, #4
 80045ac:	4619      	mov	r1, r3
 80045ae:	4610      	mov	r0, r2
 80045b0:	f000 f94a 	bl	8004848 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	2201      	movs	r2, #1
 80045b8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	2201      	movs	r2, #1
 80045c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	2201      	movs	r2, #1
 80045c8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	2201      	movs	r2, #1
 80045d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	2201      	movs	r2, #1
 80045d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	2201      	movs	r2, #1
 80045e0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	2201      	movs	r2, #1
 80045e8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	2201      	movs	r2, #1
 80045f0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	2201      	movs	r2, #1
 80045f8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	2201      	movs	r2, #1
 8004600:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	2201      	movs	r2, #1
 8004608:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	2201      	movs	r2, #1
 8004610:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004614:	2300      	movs	r3, #0
}
 8004616:	4618      	mov	r0, r3
 8004618:	3708      	adds	r7, #8
 800461a:	46bd      	mov	sp, r7
 800461c:	bd80      	pop	{r7, pc}
	...

08004620 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004620:	b580      	push	{r7, lr}
 8004622:	b086      	sub	sp, #24
 8004624:	af00      	add	r7, sp, #0
 8004626:	60f8      	str	r0, [r7, #12]
 8004628:	60b9      	str	r1, [r7, #8]
 800462a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800462c:	2300      	movs	r3, #0
 800462e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004636:	2b01      	cmp	r3, #1
 8004638:	d101      	bne.n	800463e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800463a:	2302      	movs	r3, #2
 800463c:	e0ff      	b.n	800483e <HAL_TIM_PWM_ConfigChannel+0x21e>
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	2201      	movs	r2, #1
 8004642:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	2b14      	cmp	r3, #20
 800464a:	f200 80f0 	bhi.w	800482e <HAL_TIM_PWM_ConfigChannel+0x20e>
 800464e:	a201      	add	r2, pc, #4	; (adr r2, 8004654 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004650:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004654:	080046a9 	.word	0x080046a9
 8004658:	0800482f 	.word	0x0800482f
 800465c:	0800482f 	.word	0x0800482f
 8004660:	0800482f 	.word	0x0800482f
 8004664:	080046e9 	.word	0x080046e9
 8004668:	0800482f 	.word	0x0800482f
 800466c:	0800482f 	.word	0x0800482f
 8004670:	0800482f 	.word	0x0800482f
 8004674:	0800472b 	.word	0x0800472b
 8004678:	0800482f 	.word	0x0800482f
 800467c:	0800482f 	.word	0x0800482f
 8004680:	0800482f 	.word	0x0800482f
 8004684:	0800476b 	.word	0x0800476b
 8004688:	0800482f 	.word	0x0800482f
 800468c:	0800482f 	.word	0x0800482f
 8004690:	0800482f 	.word	0x0800482f
 8004694:	080047ad 	.word	0x080047ad
 8004698:	0800482f 	.word	0x0800482f
 800469c:	0800482f 	.word	0x0800482f
 80046a0:	0800482f 	.word	0x0800482f
 80046a4:	080047ed 	.word	0x080047ed
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	68b9      	ldr	r1, [r7, #8]
 80046ae:	4618      	mov	r0, r3
 80046b0:	f000 f92e 	bl	8004910 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	699a      	ldr	r2, [r3, #24]
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	f042 0208 	orr.w	r2, r2, #8
 80046c2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	699a      	ldr	r2, [r3, #24]
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	f022 0204 	bic.w	r2, r2, #4
 80046d2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	6999      	ldr	r1, [r3, #24]
 80046da:	68bb      	ldr	r3, [r7, #8]
 80046dc:	691a      	ldr	r2, [r3, #16]
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	430a      	orrs	r2, r1
 80046e4:	619a      	str	r2, [r3, #24]
      break;
 80046e6:	e0a5      	b.n	8004834 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	68b9      	ldr	r1, [r7, #8]
 80046ee:	4618      	mov	r0, r3
 80046f0:	f000 f98a 	bl	8004a08 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	699a      	ldr	r2, [r3, #24]
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004702:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	699a      	ldr	r2, [r3, #24]
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004712:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	6999      	ldr	r1, [r3, #24]
 800471a:	68bb      	ldr	r3, [r7, #8]
 800471c:	691b      	ldr	r3, [r3, #16]
 800471e:	021a      	lsls	r2, r3, #8
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	430a      	orrs	r2, r1
 8004726:	619a      	str	r2, [r3, #24]
      break;
 8004728:	e084      	b.n	8004834 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	68b9      	ldr	r1, [r7, #8]
 8004730:	4618      	mov	r0, r3
 8004732:	f000 f9e3 	bl	8004afc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	69da      	ldr	r2, [r3, #28]
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	f042 0208 	orr.w	r2, r2, #8
 8004744:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	69da      	ldr	r2, [r3, #28]
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	f022 0204 	bic.w	r2, r2, #4
 8004754:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	69d9      	ldr	r1, [r3, #28]
 800475c:	68bb      	ldr	r3, [r7, #8]
 800475e:	691a      	ldr	r2, [r3, #16]
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	430a      	orrs	r2, r1
 8004766:	61da      	str	r2, [r3, #28]
      break;
 8004768:	e064      	b.n	8004834 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	68b9      	ldr	r1, [r7, #8]
 8004770:	4618      	mov	r0, r3
 8004772:	f000 fa3b 	bl	8004bec <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	69da      	ldr	r2, [r3, #28]
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004784:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	69da      	ldr	r2, [r3, #28]
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004794:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	69d9      	ldr	r1, [r3, #28]
 800479c:	68bb      	ldr	r3, [r7, #8]
 800479e:	691b      	ldr	r3, [r3, #16]
 80047a0:	021a      	lsls	r2, r3, #8
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	430a      	orrs	r2, r1
 80047a8:	61da      	str	r2, [r3, #28]
      break;
 80047aa:	e043      	b.n	8004834 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	68b9      	ldr	r1, [r7, #8]
 80047b2:	4618      	mov	r0, r3
 80047b4:	f000 fa78 	bl	8004ca8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	f042 0208 	orr.w	r2, r2, #8
 80047c6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	f022 0204 	bic.w	r2, r2, #4
 80047d6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80047de:	68bb      	ldr	r3, [r7, #8]
 80047e0:	691a      	ldr	r2, [r3, #16]
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	430a      	orrs	r2, r1
 80047e8:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80047ea:	e023      	b.n	8004834 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	68b9      	ldr	r1, [r7, #8]
 80047f2:	4618      	mov	r0, r3
 80047f4:	f000 fab0 	bl	8004d58 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004806:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004816:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800481e:	68bb      	ldr	r3, [r7, #8]
 8004820:	691b      	ldr	r3, [r3, #16]
 8004822:	021a      	lsls	r2, r3, #8
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	430a      	orrs	r2, r1
 800482a:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800482c:	e002      	b.n	8004834 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800482e:	2301      	movs	r3, #1
 8004830:	75fb      	strb	r3, [r7, #23]
      break;
 8004832:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	2200      	movs	r2, #0
 8004838:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800483c:	7dfb      	ldrb	r3, [r7, #23]
}
 800483e:	4618      	mov	r0, r3
 8004840:	3718      	adds	r7, #24
 8004842:	46bd      	mov	sp, r7
 8004844:	bd80      	pop	{r7, pc}
 8004846:	bf00      	nop

08004848 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004848:	b480      	push	{r7}
 800484a:	b085      	sub	sp, #20
 800484c:	af00      	add	r7, sp, #0
 800484e:	6078      	str	r0, [r7, #4]
 8004850:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	4a2a      	ldr	r2, [pc, #168]	; (8004904 <TIM_Base_SetConfig+0xbc>)
 800485c:	4293      	cmp	r3, r2
 800485e:	d003      	beq.n	8004868 <TIM_Base_SetConfig+0x20>
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004866:	d108      	bne.n	800487a <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800486e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004870:	683b      	ldr	r3, [r7, #0]
 8004872:	685b      	ldr	r3, [r3, #4]
 8004874:	68fa      	ldr	r2, [r7, #12]
 8004876:	4313      	orrs	r3, r2
 8004878:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	4a21      	ldr	r2, [pc, #132]	; (8004904 <TIM_Base_SetConfig+0xbc>)
 800487e:	4293      	cmp	r3, r2
 8004880:	d00b      	beq.n	800489a <TIM_Base_SetConfig+0x52>
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004888:	d007      	beq.n	800489a <TIM_Base_SetConfig+0x52>
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	4a1e      	ldr	r2, [pc, #120]	; (8004908 <TIM_Base_SetConfig+0xc0>)
 800488e:	4293      	cmp	r3, r2
 8004890:	d003      	beq.n	800489a <TIM_Base_SetConfig+0x52>
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	4a1d      	ldr	r2, [pc, #116]	; (800490c <TIM_Base_SetConfig+0xc4>)
 8004896:	4293      	cmp	r3, r2
 8004898:	d108      	bne.n	80048ac <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80048a0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80048a2:	683b      	ldr	r3, [r7, #0]
 80048a4:	68db      	ldr	r3, [r3, #12]
 80048a6:	68fa      	ldr	r2, [r7, #12]
 80048a8:	4313      	orrs	r3, r2
 80048aa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80048b2:	683b      	ldr	r3, [r7, #0]
 80048b4:	695b      	ldr	r3, [r3, #20]
 80048b6:	4313      	orrs	r3, r2
 80048b8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	68fa      	ldr	r2, [r7, #12]
 80048be:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80048c0:	683b      	ldr	r3, [r7, #0]
 80048c2:	689a      	ldr	r2, [r3, #8]
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80048c8:	683b      	ldr	r3, [r7, #0]
 80048ca:	681a      	ldr	r2, [r3, #0]
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	4a0c      	ldr	r2, [pc, #48]	; (8004904 <TIM_Base_SetConfig+0xbc>)
 80048d4:	4293      	cmp	r3, r2
 80048d6:	d007      	beq.n	80048e8 <TIM_Base_SetConfig+0xa0>
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	4a0b      	ldr	r2, [pc, #44]	; (8004908 <TIM_Base_SetConfig+0xc0>)
 80048dc:	4293      	cmp	r3, r2
 80048de:	d003      	beq.n	80048e8 <TIM_Base_SetConfig+0xa0>
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	4a0a      	ldr	r2, [pc, #40]	; (800490c <TIM_Base_SetConfig+0xc4>)
 80048e4:	4293      	cmp	r3, r2
 80048e6:	d103      	bne.n	80048f0 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80048e8:	683b      	ldr	r3, [r7, #0]
 80048ea:	691a      	ldr	r2, [r3, #16]
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	2201      	movs	r2, #1
 80048f4:	615a      	str	r2, [r3, #20]
}
 80048f6:	bf00      	nop
 80048f8:	3714      	adds	r7, #20
 80048fa:	46bd      	mov	sp, r7
 80048fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004900:	4770      	bx	lr
 8004902:	bf00      	nop
 8004904:	40012c00 	.word	0x40012c00
 8004908:	40014000 	.word	0x40014000
 800490c:	40014400 	.word	0x40014400

08004910 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004910:	b480      	push	{r7}
 8004912:	b087      	sub	sp, #28
 8004914:	af00      	add	r7, sp, #0
 8004916:	6078      	str	r0, [r7, #4]
 8004918:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	6a1b      	ldr	r3, [r3, #32]
 800491e:	f023 0201 	bic.w	r2, r3, #1
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	6a1b      	ldr	r3, [r3, #32]
 800492a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	685b      	ldr	r3, [r3, #4]
 8004930:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	699b      	ldr	r3, [r3, #24]
 8004936:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800493e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004942:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	f023 0303 	bic.w	r3, r3, #3
 800494a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800494c:	683b      	ldr	r3, [r7, #0]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	68fa      	ldr	r2, [r7, #12]
 8004952:	4313      	orrs	r3, r2
 8004954:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004956:	697b      	ldr	r3, [r7, #20]
 8004958:	f023 0302 	bic.w	r3, r3, #2
 800495c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800495e:	683b      	ldr	r3, [r7, #0]
 8004960:	689b      	ldr	r3, [r3, #8]
 8004962:	697a      	ldr	r2, [r7, #20]
 8004964:	4313      	orrs	r3, r2
 8004966:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	4a24      	ldr	r2, [pc, #144]	; (80049fc <TIM_OC1_SetConfig+0xec>)
 800496c:	4293      	cmp	r3, r2
 800496e:	d007      	beq.n	8004980 <TIM_OC1_SetConfig+0x70>
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	4a23      	ldr	r2, [pc, #140]	; (8004a00 <TIM_OC1_SetConfig+0xf0>)
 8004974:	4293      	cmp	r3, r2
 8004976:	d003      	beq.n	8004980 <TIM_OC1_SetConfig+0x70>
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	4a22      	ldr	r2, [pc, #136]	; (8004a04 <TIM_OC1_SetConfig+0xf4>)
 800497c:	4293      	cmp	r3, r2
 800497e:	d10c      	bne.n	800499a <TIM_OC1_SetConfig+0x8a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004980:	697b      	ldr	r3, [r7, #20]
 8004982:	f023 0308 	bic.w	r3, r3, #8
 8004986:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004988:	683b      	ldr	r3, [r7, #0]
 800498a:	68db      	ldr	r3, [r3, #12]
 800498c:	697a      	ldr	r2, [r7, #20]
 800498e:	4313      	orrs	r3, r2
 8004990:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004992:	697b      	ldr	r3, [r7, #20]
 8004994:	f023 0304 	bic.w	r3, r3, #4
 8004998:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	4a17      	ldr	r2, [pc, #92]	; (80049fc <TIM_OC1_SetConfig+0xec>)
 800499e:	4293      	cmp	r3, r2
 80049a0:	d007      	beq.n	80049b2 <TIM_OC1_SetConfig+0xa2>
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	4a16      	ldr	r2, [pc, #88]	; (8004a00 <TIM_OC1_SetConfig+0xf0>)
 80049a6:	4293      	cmp	r3, r2
 80049a8:	d003      	beq.n	80049b2 <TIM_OC1_SetConfig+0xa2>
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	4a15      	ldr	r2, [pc, #84]	; (8004a04 <TIM_OC1_SetConfig+0xf4>)
 80049ae:	4293      	cmp	r3, r2
 80049b0:	d111      	bne.n	80049d6 <TIM_OC1_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80049b2:	693b      	ldr	r3, [r7, #16]
 80049b4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80049b8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80049ba:	693b      	ldr	r3, [r7, #16]
 80049bc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80049c0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80049c2:	683b      	ldr	r3, [r7, #0]
 80049c4:	695b      	ldr	r3, [r3, #20]
 80049c6:	693a      	ldr	r2, [r7, #16]
 80049c8:	4313      	orrs	r3, r2
 80049ca:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80049cc:	683b      	ldr	r3, [r7, #0]
 80049ce:	699b      	ldr	r3, [r3, #24]
 80049d0:	693a      	ldr	r2, [r7, #16]
 80049d2:	4313      	orrs	r3, r2
 80049d4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	693a      	ldr	r2, [r7, #16]
 80049da:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	68fa      	ldr	r2, [r7, #12]
 80049e0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80049e2:	683b      	ldr	r3, [r7, #0]
 80049e4:	685a      	ldr	r2, [r3, #4]
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	697a      	ldr	r2, [r7, #20]
 80049ee:	621a      	str	r2, [r3, #32]
}
 80049f0:	bf00      	nop
 80049f2:	371c      	adds	r7, #28
 80049f4:	46bd      	mov	sp, r7
 80049f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049fa:	4770      	bx	lr
 80049fc:	40012c00 	.word	0x40012c00
 8004a00:	40014000 	.word	0x40014000
 8004a04:	40014400 	.word	0x40014400

08004a08 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004a08:	b480      	push	{r7}
 8004a0a:	b087      	sub	sp, #28
 8004a0c:	af00      	add	r7, sp, #0
 8004a0e:	6078      	str	r0, [r7, #4]
 8004a10:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	6a1b      	ldr	r3, [r3, #32]
 8004a16:	f023 0210 	bic.w	r2, r3, #16
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	6a1b      	ldr	r3, [r3, #32]
 8004a22:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	685b      	ldr	r3, [r3, #4]
 8004a28:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	699b      	ldr	r3, [r3, #24]
 8004a2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004a36:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004a3a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004a42:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004a44:	683b      	ldr	r3, [r7, #0]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	021b      	lsls	r3, r3, #8
 8004a4a:	68fa      	ldr	r2, [r7, #12]
 8004a4c:	4313      	orrs	r3, r2
 8004a4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004a50:	697b      	ldr	r3, [r7, #20]
 8004a52:	f023 0320 	bic.w	r3, r3, #32
 8004a56:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004a58:	683b      	ldr	r3, [r7, #0]
 8004a5a:	689b      	ldr	r3, [r3, #8]
 8004a5c:	011b      	lsls	r3, r3, #4
 8004a5e:	697a      	ldr	r2, [r7, #20]
 8004a60:	4313      	orrs	r3, r2
 8004a62:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	4a22      	ldr	r2, [pc, #136]	; (8004af0 <TIM_OC2_SetConfig+0xe8>)
 8004a68:	4293      	cmp	r3, r2
 8004a6a:	d10d      	bne.n	8004a88 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004a6c:	697b      	ldr	r3, [r7, #20]
 8004a6e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004a72:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004a74:	683b      	ldr	r3, [r7, #0]
 8004a76:	68db      	ldr	r3, [r3, #12]
 8004a78:	011b      	lsls	r3, r3, #4
 8004a7a:	697a      	ldr	r2, [r7, #20]
 8004a7c:	4313      	orrs	r3, r2
 8004a7e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004a80:	697b      	ldr	r3, [r7, #20]
 8004a82:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004a86:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	4a19      	ldr	r2, [pc, #100]	; (8004af0 <TIM_OC2_SetConfig+0xe8>)
 8004a8c:	4293      	cmp	r3, r2
 8004a8e:	d007      	beq.n	8004aa0 <TIM_OC2_SetConfig+0x98>
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	4a18      	ldr	r2, [pc, #96]	; (8004af4 <TIM_OC2_SetConfig+0xec>)
 8004a94:	4293      	cmp	r3, r2
 8004a96:	d003      	beq.n	8004aa0 <TIM_OC2_SetConfig+0x98>
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	4a17      	ldr	r2, [pc, #92]	; (8004af8 <TIM_OC2_SetConfig+0xf0>)
 8004a9c:	4293      	cmp	r3, r2
 8004a9e:	d113      	bne.n	8004ac8 <TIM_OC2_SetConfig+0xc0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004aa0:	693b      	ldr	r3, [r7, #16]
 8004aa2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004aa6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004aa8:	693b      	ldr	r3, [r7, #16]
 8004aaa:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004aae:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004ab0:	683b      	ldr	r3, [r7, #0]
 8004ab2:	695b      	ldr	r3, [r3, #20]
 8004ab4:	009b      	lsls	r3, r3, #2
 8004ab6:	693a      	ldr	r2, [r7, #16]
 8004ab8:	4313      	orrs	r3, r2
 8004aba:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004abc:	683b      	ldr	r3, [r7, #0]
 8004abe:	699b      	ldr	r3, [r3, #24]
 8004ac0:	009b      	lsls	r3, r3, #2
 8004ac2:	693a      	ldr	r2, [r7, #16]
 8004ac4:	4313      	orrs	r3, r2
 8004ac6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	693a      	ldr	r2, [r7, #16]
 8004acc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	68fa      	ldr	r2, [r7, #12]
 8004ad2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004ad4:	683b      	ldr	r3, [r7, #0]
 8004ad6:	685a      	ldr	r2, [r3, #4]
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	697a      	ldr	r2, [r7, #20]
 8004ae0:	621a      	str	r2, [r3, #32]
}
 8004ae2:	bf00      	nop
 8004ae4:	371c      	adds	r7, #28
 8004ae6:	46bd      	mov	sp, r7
 8004ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aec:	4770      	bx	lr
 8004aee:	bf00      	nop
 8004af0:	40012c00 	.word	0x40012c00
 8004af4:	40014000 	.word	0x40014000
 8004af8:	40014400 	.word	0x40014400

08004afc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004afc:	b480      	push	{r7}
 8004afe:	b087      	sub	sp, #28
 8004b00:	af00      	add	r7, sp, #0
 8004b02:	6078      	str	r0, [r7, #4]
 8004b04:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	6a1b      	ldr	r3, [r3, #32]
 8004b0a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	6a1b      	ldr	r3, [r3, #32]
 8004b16:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	685b      	ldr	r3, [r3, #4]
 8004b1c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	69db      	ldr	r3, [r3, #28]
 8004b22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004b2a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b2e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	f023 0303 	bic.w	r3, r3, #3
 8004b36:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004b38:	683b      	ldr	r3, [r7, #0]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	68fa      	ldr	r2, [r7, #12]
 8004b3e:	4313      	orrs	r3, r2
 8004b40:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004b42:	697b      	ldr	r3, [r7, #20]
 8004b44:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004b48:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004b4a:	683b      	ldr	r3, [r7, #0]
 8004b4c:	689b      	ldr	r3, [r3, #8]
 8004b4e:	021b      	lsls	r3, r3, #8
 8004b50:	697a      	ldr	r2, [r7, #20]
 8004b52:	4313      	orrs	r3, r2
 8004b54:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	4a21      	ldr	r2, [pc, #132]	; (8004be0 <TIM_OC3_SetConfig+0xe4>)
 8004b5a:	4293      	cmp	r3, r2
 8004b5c:	d10d      	bne.n	8004b7a <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004b5e:	697b      	ldr	r3, [r7, #20]
 8004b60:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004b64:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004b66:	683b      	ldr	r3, [r7, #0]
 8004b68:	68db      	ldr	r3, [r3, #12]
 8004b6a:	021b      	lsls	r3, r3, #8
 8004b6c:	697a      	ldr	r2, [r7, #20]
 8004b6e:	4313      	orrs	r3, r2
 8004b70:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004b72:	697b      	ldr	r3, [r7, #20]
 8004b74:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004b78:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	4a18      	ldr	r2, [pc, #96]	; (8004be0 <TIM_OC3_SetConfig+0xe4>)
 8004b7e:	4293      	cmp	r3, r2
 8004b80:	d007      	beq.n	8004b92 <TIM_OC3_SetConfig+0x96>
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	4a17      	ldr	r2, [pc, #92]	; (8004be4 <TIM_OC3_SetConfig+0xe8>)
 8004b86:	4293      	cmp	r3, r2
 8004b88:	d003      	beq.n	8004b92 <TIM_OC3_SetConfig+0x96>
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	4a16      	ldr	r2, [pc, #88]	; (8004be8 <TIM_OC3_SetConfig+0xec>)
 8004b8e:	4293      	cmp	r3, r2
 8004b90:	d113      	bne.n	8004bba <TIM_OC3_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004b92:	693b      	ldr	r3, [r7, #16]
 8004b94:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004b98:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004b9a:	693b      	ldr	r3, [r7, #16]
 8004b9c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004ba0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004ba2:	683b      	ldr	r3, [r7, #0]
 8004ba4:	695b      	ldr	r3, [r3, #20]
 8004ba6:	011b      	lsls	r3, r3, #4
 8004ba8:	693a      	ldr	r2, [r7, #16]
 8004baa:	4313      	orrs	r3, r2
 8004bac:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004bae:	683b      	ldr	r3, [r7, #0]
 8004bb0:	699b      	ldr	r3, [r3, #24]
 8004bb2:	011b      	lsls	r3, r3, #4
 8004bb4:	693a      	ldr	r2, [r7, #16]
 8004bb6:	4313      	orrs	r3, r2
 8004bb8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	693a      	ldr	r2, [r7, #16]
 8004bbe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	68fa      	ldr	r2, [r7, #12]
 8004bc4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004bc6:	683b      	ldr	r3, [r7, #0]
 8004bc8:	685a      	ldr	r2, [r3, #4]
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	697a      	ldr	r2, [r7, #20]
 8004bd2:	621a      	str	r2, [r3, #32]
}
 8004bd4:	bf00      	nop
 8004bd6:	371c      	adds	r7, #28
 8004bd8:	46bd      	mov	sp, r7
 8004bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bde:	4770      	bx	lr
 8004be0:	40012c00 	.word	0x40012c00
 8004be4:	40014000 	.word	0x40014000
 8004be8:	40014400 	.word	0x40014400

08004bec <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004bec:	b480      	push	{r7}
 8004bee:	b087      	sub	sp, #28
 8004bf0:	af00      	add	r7, sp, #0
 8004bf2:	6078      	str	r0, [r7, #4]
 8004bf4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	6a1b      	ldr	r3, [r3, #32]
 8004bfa:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	6a1b      	ldr	r3, [r3, #32]
 8004c06:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	685b      	ldr	r3, [r3, #4]
 8004c0c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	69db      	ldr	r3, [r3, #28]
 8004c12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004c1a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004c1e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004c26:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004c28:	683b      	ldr	r3, [r7, #0]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	021b      	lsls	r3, r3, #8
 8004c2e:	68fa      	ldr	r2, [r7, #12]
 8004c30:	4313      	orrs	r3, r2
 8004c32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004c34:	693b      	ldr	r3, [r7, #16]
 8004c36:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004c3a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004c3c:	683b      	ldr	r3, [r7, #0]
 8004c3e:	689b      	ldr	r3, [r3, #8]
 8004c40:	031b      	lsls	r3, r3, #12
 8004c42:	693a      	ldr	r2, [r7, #16]
 8004c44:	4313      	orrs	r3, r2
 8004c46:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	4a14      	ldr	r2, [pc, #80]	; (8004c9c <TIM_OC4_SetConfig+0xb0>)
 8004c4c:	4293      	cmp	r3, r2
 8004c4e:	d007      	beq.n	8004c60 <TIM_OC4_SetConfig+0x74>
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	4a13      	ldr	r2, [pc, #76]	; (8004ca0 <TIM_OC4_SetConfig+0xb4>)
 8004c54:	4293      	cmp	r3, r2
 8004c56:	d003      	beq.n	8004c60 <TIM_OC4_SetConfig+0x74>
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	4a12      	ldr	r2, [pc, #72]	; (8004ca4 <TIM_OC4_SetConfig+0xb8>)
 8004c5c:	4293      	cmp	r3, r2
 8004c5e:	d109      	bne.n	8004c74 <TIM_OC4_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004c60:	697b      	ldr	r3, [r7, #20]
 8004c62:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004c66:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004c68:	683b      	ldr	r3, [r7, #0]
 8004c6a:	695b      	ldr	r3, [r3, #20]
 8004c6c:	019b      	lsls	r3, r3, #6
 8004c6e:	697a      	ldr	r2, [r7, #20]
 8004c70:	4313      	orrs	r3, r2
 8004c72:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	697a      	ldr	r2, [r7, #20]
 8004c78:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	68fa      	ldr	r2, [r7, #12]
 8004c7e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004c80:	683b      	ldr	r3, [r7, #0]
 8004c82:	685a      	ldr	r2, [r3, #4]
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	693a      	ldr	r2, [r7, #16]
 8004c8c:	621a      	str	r2, [r3, #32]
}
 8004c8e:	bf00      	nop
 8004c90:	371c      	adds	r7, #28
 8004c92:	46bd      	mov	sp, r7
 8004c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c98:	4770      	bx	lr
 8004c9a:	bf00      	nop
 8004c9c:	40012c00 	.word	0x40012c00
 8004ca0:	40014000 	.word	0x40014000
 8004ca4:	40014400 	.word	0x40014400

08004ca8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004ca8:	b480      	push	{r7}
 8004caa:	b087      	sub	sp, #28
 8004cac:	af00      	add	r7, sp, #0
 8004cae:	6078      	str	r0, [r7, #4]
 8004cb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	6a1b      	ldr	r3, [r3, #32]
 8004cb6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	6a1b      	ldr	r3, [r3, #32]
 8004cc2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	685b      	ldr	r3, [r3, #4]
 8004cc8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004cce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004cd6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004cda:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004cdc:	683b      	ldr	r3, [r7, #0]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	68fa      	ldr	r2, [r7, #12]
 8004ce2:	4313      	orrs	r3, r2
 8004ce4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8004ce6:	693b      	ldr	r3, [r7, #16]
 8004ce8:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8004cec:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8004cee:	683b      	ldr	r3, [r7, #0]
 8004cf0:	689b      	ldr	r3, [r3, #8]
 8004cf2:	041b      	lsls	r3, r3, #16
 8004cf4:	693a      	ldr	r2, [r7, #16]
 8004cf6:	4313      	orrs	r3, r2
 8004cf8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	4a13      	ldr	r2, [pc, #76]	; (8004d4c <TIM_OC5_SetConfig+0xa4>)
 8004cfe:	4293      	cmp	r3, r2
 8004d00:	d007      	beq.n	8004d12 <TIM_OC5_SetConfig+0x6a>
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	4a12      	ldr	r2, [pc, #72]	; (8004d50 <TIM_OC5_SetConfig+0xa8>)
 8004d06:	4293      	cmp	r3, r2
 8004d08:	d003      	beq.n	8004d12 <TIM_OC5_SetConfig+0x6a>
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	4a11      	ldr	r2, [pc, #68]	; (8004d54 <TIM_OC5_SetConfig+0xac>)
 8004d0e:	4293      	cmp	r3, r2
 8004d10:	d109      	bne.n	8004d26 <TIM_OC5_SetConfig+0x7e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8004d12:	697b      	ldr	r3, [r7, #20]
 8004d14:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004d18:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8004d1a:	683b      	ldr	r3, [r7, #0]
 8004d1c:	695b      	ldr	r3, [r3, #20]
 8004d1e:	021b      	lsls	r3, r3, #8
 8004d20:	697a      	ldr	r2, [r7, #20]
 8004d22:	4313      	orrs	r3, r2
 8004d24:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	697a      	ldr	r2, [r7, #20]
 8004d2a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	68fa      	ldr	r2, [r7, #12]
 8004d30:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8004d32:	683b      	ldr	r3, [r7, #0]
 8004d34:	685a      	ldr	r2, [r3, #4]
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	693a      	ldr	r2, [r7, #16]
 8004d3e:	621a      	str	r2, [r3, #32]
}
 8004d40:	bf00      	nop
 8004d42:	371c      	adds	r7, #28
 8004d44:	46bd      	mov	sp, r7
 8004d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d4a:	4770      	bx	lr
 8004d4c:	40012c00 	.word	0x40012c00
 8004d50:	40014000 	.word	0x40014000
 8004d54:	40014400 	.word	0x40014400

08004d58 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004d58:	b480      	push	{r7}
 8004d5a:	b087      	sub	sp, #28
 8004d5c:	af00      	add	r7, sp, #0
 8004d5e:	6078      	str	r0, [r7, #4]
 8004d60:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	6a1b      	ldr	r3, [r3, #32]
 8004d66:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	6a1b      	ldr	r3, [r3, #32]
 8004d72:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	685b      	ldr	r3, [r3, #4]
 8004d78:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004d86:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004d8a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004d8c:	683b      	ldr	r3, [r7, #0]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	021b      	lsls	r3, r3, #8
 8004d92:	68fa      	ldr	r2, [r7, #12]
 8004d94:	4313      	orrs	r3, r2
 8004d96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004d98:	693b      	ldr	r3, [r7, #16]
 8004d9a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004d9e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004da0:	683b      	ldr	r3, [r7, #0]
 8004da2:	689b      	ldr	r3, [r3, #8]
 8004da4:	051b      	lsls	r3, r3, #20
 8004da6:	693a      	ldr	r2, [r7, #16]
 8004da8:	4313      	orrs	r3, r2
 8004daa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	4a14      	ldr	r2, [pc, #80]	; (8004e00 <TIM_OC6_SetConfig+0xa8>)
 8004db0:	4293      	cmp	r3, r2
 8004db2:	d007      	beq.n	8004dc4 <TIM_OC6_SetConfig+0x6c>
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	4a13      	ldr	r2, [pc, #76]	; (8004e04 <TIM_OC6_SetConfig+0xac>)
 8004db8:	4293      	cmp	r3, r2
 8004dba:	d003      	beq.n	8004dc4 <TIM_OC6_SetConfig+0x6c>
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	4a12      	ldr	r2, [pc, #72]	; (8004e08 <TIM_OC6_SetConfig+0xb0>)
 8004dc0:	4293      	cmp	r3, r2
 8004dc2:	d109      	bne.n	8004dd8 <TIM_OC6_SetConfig+0x80>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8004dc4:	697b      	ldr	r3, [r7, #20]
 8004dc6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004dca:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004dcc:	683b      	ldr	r3, [r7, #0]
 8004dce:	695b      	ldr	r3, [r3, #20]
 8004dd0:	029b      	lsls	r3, r3, #10
 8004dd2:	697a      	ldr	r2, [r7, #20]
 8004dd4:	4313      	orrs	r3, r2
 8004dd6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	697a      	ldr	r2, [r7, #20]
 8004ddc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	68fa      	ldr	r2, [r7, #12]
 8004de2:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8004de4:	683b      	ldr	r3, [r7, #0]
 8004de6:	685a      	ldr	r2, [r3, #4]
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	693a      	ldr	r2, [r7, #16]
 8004df0:	621a      	str	r2, [r3, #32]
}
 8004df2:	bf00      	nop
 8004df4:	371c      	adds	r7, #28
 8004df6:	46bd      	mov	sp, r7
 8004df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dfc:	4770      	bx	lr
 8004dfe:	bf00      	nop
 8004e00:	40012c00 	.word	0x40012c00
 8004e04:	40014000 	.word	0x40014000
 8004e08:	40014400 	.word	0x40014400

08004e0c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004e0c:	b480      	push	{r7}
 8004e0e:	b085      	sub	sp, #20
 8004e10:	af00      	add	r7, sp, #0
 8004e12:	6078      	str	r0, [r7, #4]
 8004e14:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004e1c:	2b01      	cmp	r3, #1
 8004e1e:	d101      	bne.n	8004e24 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004e20:	2302      	movs	r3, #2
 8004e22:	e04f      	b.n	8004ec4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	2201      	movs	r2, #1
 8004e28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	2202      	movs	r2, #2
 8004e30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	685b      	ldr	r3, [r3, #4]
 8004e3a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	689b      	ldr	r3, [r3, #8]
 8004e42:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	4a21      	ldr	r2, [pc, #132]	; (8004ed0 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8004e4a:	4293      	cmp	r3, r2
 8004e4c:	d108      	bne.n	8004e60 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004e54:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004e56:	683b      	ldr	r3, [r7, #0]
 8004e58:	685b      	ldr	r3, [r3, #4]
 8004e5a:	68fa      	ldr	r2, [r7, #12]
 8004e5c:	4313      	orrs	r3, r2
 8004e5e:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e66:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004e68:	683b      	ldr	r3, [r7, #0]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	68fa      	ldr	r2, [r7, #12]
 8004e6e:	4313      	orrs	r3, r2
 8004e70:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	68fa      	ldr	r2, [r7, #12]
 8004e78:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	4a14      	ldr	r2, [pc, #80]	; (8004ed0 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8004e80:	4293      	cmp	r3, r2
 8004e82:	d009      	beq.n	8004e98 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e8c:	d004      	beq.n	8004e98 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	4a10      	ldr	r2, [pc, #64]	; (8004ed4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004e94:	4293      	cmp	r3, r2
 8004e96:	d10c      	bne.n	8004eb2 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004e98:	68bb      	ldr	r3, [r7, #8]
 8004e9a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004e9e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004ea0:	683b      	ldr	r3, [r7, #0]
 8004ea2:	689b      	ldr	r3, [r3, #8]
 8004ea4:	68ba      	ldr	r2, [r7, #8]
 8004ea6:	4313      	orrs	r3, r2
 8004ea8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	68ba      	ldr	r2, [r7, #8]
 8004eb0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	2201      	movs	r2, #1
 8004eb6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	2200      	movs	r2, #0
 8004ebe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004ec2:	2300      	movs	r3, #0
}
 8004ec4:	4618      	mov	r0, r3
 8004ec6:	3714      	adds	r7, #20
 8004ec8:	46bd      	mov	sp, r7
 8004eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ece:	4770      	bx	lr
 8004ed0:	40012c00 	.word	0x40012c00
 8004ed4:	40014000 	.word	0x40014000

08004ed8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004ed8:	b480      	push	{r7}
 8004eda:	b085      	sub	sp, #20
 8004edc:	af00      	add	r7, sp, #0
 8004ede:	6078      	str	r0, [r7, #4]
 8004ee0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004ee2:	2300      	movs	r3, #0
 8004ee4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004eec:	2b01      	cmp	r3, #1
 8004eee:	d101      	bne.n	8004ef4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004ef0:	2302      	movs	r3, #2
 8004ef2:	e060      	b.n	8004fb6 <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	2201      	movs	r2, #1
 8004ef8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8004f02:	683b      	ldr	r3, [r7, #0]
 8004f04:	68db      	ldr	r3, [r3, #12]
 8004f06:	4313      	orrs	r3, r2
 8004f08:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004f10:	683b      	ldr	r3, [r7, #0]
 8004f12:	689b      	ldr	r3, [r3, #8]
 8004f14:	4313      	orrs	r3, r2
 8004f16:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8004f1e:	683b      	ldr	r3, [r7, #0]
 8004f20:	685b      	ldr	r3, [r3, #4]
 8004f22:	4313      	orrs	r3, r2
 8004f24:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8004f2c:	683b      	ldr	r3, [r7, #0]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	4313      	orrs	r3, r2
 8004f32:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004f3a:	683b      	ldr	r3, [r7, #0]
 8004f3c:	691b      	ldr	r3, [r3, #16]
 8004f3e:	4313      	orrs	r3, r2
 8004f40:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8004f48:	683b      	ldr	r3, [r7, #0]
 8004f4a:	695b      	ldr	r3, [r3, #20]
 8004f4c:	4313      	orrs	r3, r2
 8004f4e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8004f56:	683b      	ldr	r3, [r7, #0]
 8004f58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f5a:	4313      	orrs	r3, r2
 8004f5c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8004f64:	683b      	ldr	r3, [r7, #0]
 8004f66:	699b      	ldr	r3, [r3, #24]
 8004f68:	041b      	lsls	r3, r3, #16
 8004f6a:	4313      	orrs	r3, r2
 8004f6c:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	4a14      	ldr	r2, [pc, #80]	; (8004fc4 <HAL_TIMEx_ConfigBreakDeadTime+0xec>)
 8004f74:	4293      	cmp	r3, r2
 8004f76:	d115      	bne.n	8004fa4 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8004f7e:	683b      	ldr	r3, [r7, #0]
 8004f80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f82:	051b      	lsls	r3, r3, #20
 8004f84:	4313      	orrs	r3, r2
 8004f86:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8004f8e:	683b      	ldr	r3, [r7, #0]
 8004f90:	69db      	ldr	r3, [r3, #28]
 8004f92:	4313      	orrs	r3, r2
 8004f94:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8004f9c:	683b      	ldr	r3, [r7, #0]
 8004f9e:	6a1b      	ldr	r3, [r3, #32]
 8004fa0:	4313      	orrs	r3, r2
 8004fa2:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	68fa      	ldr	r2, [r7, #12]
 8004faa:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	2200      	movs	r2, #0
 8004fb0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004fb4:	2300      	movs	r3, #0
}
 8004fb6:	4618      	mov	r0, r3
 8004fb8:	3714      	adds	r7, #20
 8004fba:	46bd      	mov	sp, r7
 8004fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fc0:	4770      	bx	lr
 8004fc2:	bf00      	nop
 8004fc4:	40012c00 	.word	0x40012c00

08004fc8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004fc8:	b580      	push	{r7, lr}
 8004fca:	b082      	sub	sp, #8
 8004fcc:	af00      	add	r7, sp, #0
 8004fce:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d101      	bne.n	8004fda <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004fd6:	2301      	movs	r3, #1
 8004fd8:	e040      	b.n	800505c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d106      	bne.n	8004ff0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	2200      	movs	r2, #0
 8004fe6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004fea:	6878      	ldr	r0, [r7, #4]
 8004fec:	f7fd f8ea 	bl	80021c4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	2224      	movs	r2, #36	; 0x24
 8004ff4:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	681a      	ldr	r2, [r3, #0]
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	f022 0201 	bic.w	r2, r2, #1
 8005004:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005006:	6878      	ldr	r0, [r7, #4]
 8005008:	f000 f992 	bl	8005330 <UART_SetConfig>
 800500c:	4603      	mov	r3, r0
 800500e:	2b01      	cmp	r3, #1
 8005010:	d101      	bne.n	8005016 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8005012:	2301      	movs	r3, #1
 8005014:	e022      	b.n	800505c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800501a:	2b00      	cmp	r3, #0
 800501c:	d002      	beq.n	8005024 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800501e:	6878      	ldr	r0, [r7, #4]
 8005020:	f000 fbb2 	bl	8005788 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	685a      	ldr	r2, [r3, #4]
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005032:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	689a      	ldr	r2, [r3, #8]
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005042:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	681a      	ldr	r2, [r3, #0]
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	f042 0201 	orr.w	r2, r2, #1
 8005052:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005054:	6878      	ldr	r0, [r7, #4]
 8005056:	f000 fc39 	bl	80058cc <UART_CheckIdleState>
 800505a:	4603      	mov	r3, r0
}
 800505c:	4618      	mov	r0, r3
 800505e:	3708      	adds	r7, #8
 8005060:	46bd      	mov	sp, r7
 8005062:	bd80      	pop	{r7, pc}

08005064 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005064:	b580      	push	{r7, lr}
 8005066:	b08a      	sub	sp, #40	; 0x28
 8005068:	af02      	add	r7, sp, #8
 800506a:	60f8      	str	r0, [r7, #12]
 800506c:	60b9      	str	r1, [r7, #8]
 800506e:	603b      	str	r3, [r7, #0]
 8005070:	4613      	mov	r3, r2
 8005072:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005078:	2b20      	cmp	r3, #32
 800507a:	f040 8082 	bne.w	8005182 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 800507e:	68bb      	ldr	r3, [r7, #8]
 8005080:	2b00      	cmp	r3, #0
 8005082:	d002      	beq.n	800508a <HAL_UART_Transmit+0x26>
 8005084:	88fb      	ldrh	r3, [r7, #6]
 8005086:	2b00      	cmp	r3, #0
 8005088:	d101      	bne.n	800508e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800508a:	2301      	movs	r3, #1
 800508c:	e07a      	b.n	8005184 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8005094:	2b01      	cmp	r3, #1
 8005096:	d101      	bne.n	800509c <HAL_UART_Transmit+0x38>
 8005098:	2302      	movs	r3, #2
 800509a:	e073      	b.n	8005184 <HAL_UART_Transmit+0x120>
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	2201      	movs	r2, #1
 80050a0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	2200      	movs	r2, #0
 80050a8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	2221      	movs	r2, #33	; 0x21
 80050b0:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80050b2:	f7fd fa93 	bl	80025dc <HAL_GetTick>
 80050b6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	88fa      	ldrh	r2, [r7, #6]
 80050bc:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	88fa      	ldrh	r2, [r7, #6]
 80050c4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	689b      	ldr	r3, [r3, #8]
 80050cc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80050d0:	d108      	bne.n	80050e4 <HAL_UART_Transmit+0x80>
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	691b      	ldr	r3, [r3, #16]
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d104      	bne.n	80050e4 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 80050da:	2300      	movs	r3, #0
 80050dc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80050de:	68bb      	ldr	r3, [r7, #8]
 80050e0:	61bb      	str	r3, [r7, #24]
 80050e2:	e003      	b.n	80050ec <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 80050e4:	68bb      	ldr	r3, [r7, #8]
 80050e6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80050e8:	2300      	movs	r3, #0
 80050ea:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	2200      	movs	r2, #0
 80050f0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 80050f4:	e02d      	b.n	8005152 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80050f6:	683b      	ldr	r3, [r7, #0]
 80050f8:	9300      	str	r3, [sp, #0]
 80050fa:	697b      	ldr	r3, [r7, #20]
 80050fc:	2200      	movs	r2, #0
 80050fe:	2180      	movs	r1, #128	; 0x80
 8005100:	68f8      	ldr	r0, [r7, #12]
 8005102:	f000 fc2c 	bl	800595e <UART_WaitOnFlagUntilTimeout>
 8005106:	4603      	mov	r3, r0
 8005108:	2b00      	cmp	r3, #0
 800510a:	d001      	beq.n	8005110 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 800510c:	2303      	movs	r3, #3
 800510e:	e039      	b.n	8005184 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8005110:	69fb      	ldr	r3, [r7, #28]
 8005112:	2b00      	cmp	r3, #0
 8005114:	d10b      	bne.n	800512e <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005116:	69bb      	ldr	r3, [r7, #24]
 8005118:	881a      	ldrh	r2, [r3, #0]
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005122:	b292      	uxth	r2, r2
 8005124:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8005126:	69bb      	ldr	r3, [r7, #24]
 8005128:	3302      	adds	r3, #2
 800512a:	61bb      	str	r3, [r7, #24]
 800512c:	e008      	b.n	8005140 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800512e:	69fb      	ldr	r3, [r7, #28]
 8005130:	781a      	ldrb	r2, [r3, #0]
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	b292      	uxth	r2, r2
 8005138:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800513a:	69fb      	ldr	r3, [r7, #28]
 800513c:	3301      	adds	r3, #1
 800513e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005146:	b29b      	uxth	r3, r3
 8005148:	3b01      	subs	r3, #1
 800514a:	b29a      	uxth	r2, r3
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005158:	b29b      	uxth	r3, r3
 800515a:	2b00      	cmp	r3, #0
 800515c:	d1cb      	bne.n	80050f6 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800515e:	683b      	ldr	r3, [r7, #0]
 8005160:	9300      	str	r3, [sp, #0]
 8005162:	697b      	ldr	r3, [r7, #20]
 8005164:	2200      	movs	r2, #0
 8005166:	2140      	movs	r1, #64	; 0x40
 8005168:	68f8      	ldr	r0, [r7, #12]
 800516a:	f000 fbf8 	bl	800595e <UART_WaitOnFlagUntilTimeout>
 800516e:	4603      	mov	r3, r0
 8005170:	2b00      	cmp	r3, #0
 8005172:	d001      	beq.n	8005178 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8005174:	2303      	movs	r3, #3
 8005176:	e005      	b.n	8005184 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	2220      	movs	r2, #32
 800517c:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 800517e:	2300      	movs	r3, #0
 8005180:	e000      	b.n	8005184 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8005182:	2302      	movs	r3, #2
  }
}
 8005184:	4618      	mov	r0, r3
 8005186:	3720      	adds	r7, #32
 8005188:	46bd      	mov	sp, r7
 800518a:	bd80      	pop	{r7, pc}

0800518c <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800518c:	b580      	push	{r7, lr}
 800518e:	b08a      	sub	sp, #40	; 0x28
 8005190:	af02      	add	r7, sp, #8
 8005192:	60f8      	str	r0, [r7, #12]
 8005194:	60b9      	str	r1, [r7, #8]
 8005196:	603b      	str	r3, [r7, #0]
 8005198:	4613      	mov	r3, r2
 800519a:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80051a0:	2b20      	cmp	r3, #32
 80051a2:	f040 80bf 	bne.w	8005324 <HAL_UART_Receive+0x198>
  {
    if ((pData == NULL) || (Size == 0U))
 80051a6:	68bb      	ldr	r3, [r7, #8]
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d002      	beq.n	80051b2 <HAL_UART_Receive+0x26>
 80051ac:	88fb      	ldrh	r3, [r7, #6]
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d101      	bne.n	80051b6 <HAL_UART_Receive+0x2a>
    {
      return  HAL_ERROR;
 80051b2:	2301      	movs	r3, #1
 80051b4:	e0b7      	b.n	8005326 <HAL_UART_Receive+0x19a>
    }

    __HAL_LOCK(huart);
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80051bc:	2b01      	cmp	r3, #1
 80051be:	d101      	bne.n	80051c4 <HAL_UART_Receive+0x38>
 80051c0:	2302      	movs	r3, #2
 80051c2:	e0b0      	b.n	8005326 <HAL_UART_Receive+0x19a>
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	2201      	movs	r2, #1
 80051c8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	2200      	movs	r2, #0
 80051d0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	2222      	movs	r2, #34	; 0x22
 80051d8:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	2200      	movs	r2, #0
 80051de:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80051e0:	f7fd f9fc 	bl	80025dc <HAL_GetTick>
 80051e4:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	88fa      	ldrh	r2, [r7, #6]
 80051ea:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	88fa      	ldrh	r2, [r7, #6]
 80051f2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	689b      	ldr	r3, [r3, #8]
 80051fa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80051fe:	d10e      	bne.n	800521e <HAL_UART_Receive+0x92>
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	691b      	ldr	r3, [r3, #16]
 8005204:	2b00      	cmp	r3, #0
 8005206:	d105      	bne.n	8005214 <HAL_UART_Receive+0x88>
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	f240 12ff 	movw	r2, #511	; 0x1ff
 800520e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005212:	e02d      	b.n	8005270 <HAL_UART_Receive+0xe4>
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	22ff      	movs	r2, #255	; 0xff
 8005218:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800521c:	e028      	b.n	8005270 <HAL_UART_Receive+0xe4>
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	689b      	ldr	r3, [r3, #8]
 8005222:	2b00      	cmp	r3, #0
 8005224:	d10d      	bne.n	8005242 <HAL_UART_Receive+0xb6>
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	691b      	ldr	r3, [r3, #16]
 800522a:	2b00      	cmp	r3, #0
 800522c:	d104      	bne.n	8005238 <HAL_UART_Receive+0xac>
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	22ff      	movs	r2, #255	; 0xff
 8005232:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005236:	e01b      	b.n	8005270 <HAL_UART_Receive+0xe4>
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	227f      	movs	r2, #127	; 0x7f
 800523c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005240:	e016      	b.n	8005270 <HAL_UART_Receive+0xe4>
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	689b      	ldr	r3, [r3, #8]
 8005246:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800524a:	d10d      	bne.n	8005268 <HAL_UART_Receive+0xdc>
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	691b      	ldr	r3, [r3, #16]
 8005250:	2b00      	cmp	r3, #0
 8005252:	d104      	bne.n	800525e <HAL_UART_Receive+0xd2>
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	227f      	movs	r2, #127	; 0x7f
 8005258:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800525c:	e008      	b.n	8005270 <HAL_UART_Receive+0xe4>
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	223f      	movs	r2, #63	; 0x3f
 8005262:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005266:	e003      	b.n	8005270 <HAL_UART_Receive+0xe4>
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	2200      	movs	r2, #0
 800526c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005276:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	689b      	ldr	r3, [r3, #8]
 800527c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005280:	d108      	bne.n	8005294 <HAL_UART_Receive+0x108>
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	691b      	ldr	r3, [r3, #16]
 8005286:	2b00      	cmp	r3, #0
 8005288:	d104      	bne.n	8005294 <HAL_UART_Receive+0x108>
    {
      pdata8bits  = NULL;
 800528a:	2300      	movs	r3, #0
 800528c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800528e:	68bb      	ldr	r3, [r7, #8]
 8005290:	61bb      	str	r3, [r7, #24]
 8005292:	e003      	b.n	800529c <HAL_UART_Receive+0x110>
    }
    else
    {
      pdata8bits  = pData;
 8005294:	68bb      	ldr	r3, [r7, #8]
 8005296:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005298:	2300      	movs	r3, #0
 800529a:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	2200      	movs	r2, #0
 80052a0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 80052a4:	e033      	b.n	800530e <HAL_UART_Receive+0x182>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80052a6:	683b      	ldr	r3, [r7, #0]
 80052a8:	9300      	str	r3, [sp, #0]
 80052aa:	697b      	ldr	r3, [r7, #20]
 80052ac:	2200      	movs	r2, #0
 80052ae:	2120      	movs	r1, #32
 80052b0:	68f8      	ldr	r0, [r7, #12]
 80052b2:	f000 fb54 	bl	800595e <UART_WaitOnFlagUntilTimeout>
 80052b6:	4603      	mov	r3, r0
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d001      	beq.n	80052c0 <HAL_UART_Receive+0x134>
      {
        return HAL_TIMEOUT;
 80052bc:	2303      	movs	r3, #3
 80052be:	e032      	b.n	8005326 <HAL_UART_Receive+0x19a>
      }
      if (pdata8bits == NULL)
 80052c0:	69fb      	ldr	r3, [r7, #28]
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d10c      	bne.n	80052e0 <HAL_UART_Receive+0x154>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80052cc:	b29a      	uxth	r2, r3
 80052ce:	8a7b      	ldrh	r3, [r7, #18]
 80052d0:	4013      	ands	r3, r2
 80052d2:	b29a      	uxth	r2, r3
 80052d4:	69bb      	ldr	r3, [r7, #24]
 80052d6:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80052d8:	69bb      	ldr	r3, [r7, #24]
 80052da:	3302      	adds	r3, #2
 80052dc:	61bb      	str	r3, [r7, #24]
 80052de:	e00d      	b.n	80052fc <HAL_UART_Receive+0x170>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80052e6:	b29b      	uxth	r3, r3
 80052e8:	b2da      	uxtb	r2, r3
 80052ea:	8a7b      	ldrh	r3, [r7, #18]
 80052ec:	b2db      	uxtb	r3, r3
 80052ee:	4013      	ands	r3, r2
 80052f0:	b2da      	uxtb	r2, r3
 80052f2:	69fb      	ldr	r3, [r7, #28]
 80052f4:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 80052f6:	69fb      	ldr	r3, [r7, #28]
 80052f8:	3301      	adds	r3, #1
 80052fa:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005302:	b29b      	uxth	r3, r3
 8005304:	3b01      	subs	r3, #1
 8005306:	b29a      	uxth	r2, r3
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005314:	b29b      	uxth	r3, r3
 8005316:	2b00      	cmp	r3, #0
 8005318:	d1c5      	bne.n	80052a6 <HAL_UART_Receive+0x11a>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	2220      	movs	r2, #32
 800531e:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8005320:	2300      	movs	r3, #0
 8005322:	e000      	b.n	8005326 <HAL_UART_Receive+0x19a>
  }
  else
  {
    return HAL_BUSY;
 8005324:	2302      	movs	r3, #2
  }
}
 8005326:	4618      	mov	r0, r3
 8005328:	3720      	adds	r7, #32
 800532a:	46bd      	mov	sp, r7
 800532c:	bd80      	pop	{r7, pc}
	...

08005330 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005330:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005334:	b08a      	sub	sp, #40	; 0x28
 8005336:	af00      	add	r7, sp, #0
 8005338:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800533a:	2300      	movs	r3, #0
 800533c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	689a      	ldr	r2, [r3, #8]
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	691b      	ldr	r3, [r3, #16]
 8005348:	431a      	orrs	r2, r3
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	695b      	ldr	r3, [r3, #20]
 800534e:	431a      	orrs	r2, r3
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	69db      	ldr	r3, [r3, #28]
 8005354:	4313      	orrs	r3, r2
 8005356:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	681a      	ldr	r2, [r3, #0]
 800535e:	4bb4      	ldr	r3, [pc, #720]	; (8005630 <UART_SetConfig+0x300>)
 8005360:	4013      	ands	r3, r2
 8005362:	68fa      	ldr	r2, [r7, #12]
 8005364:	6812      	ldr	r2, [r2, #0]
 8005366:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005368:	430b      	orrs	r3, r1
 800536a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	685b      	ldr	r3, [r3, #4]
 8005372:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	68da      	ldr	r2, [r3, #12]
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	430a      	orrs	r2, r1
 8005380:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	699b      	ldr	r3, [r3, #24]
 8005386:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	4aa9      	ldr	r2, [pc, #676]	; (8005634 <UART_SetConfig+0x304>)
 800538e:	4293      	cmp	r3, r2
 8005390:	d004      	beq.n	800539c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	6a1b      	ldr	r3, [r3, #32]
 8005396:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005398:	4313      	orrs	r3, r2
 800539a:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	689b      	ldr	r3, [r3, #8]
 80053a2:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80053ac:	430a      	orrs	r2, r1
 80053ae:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	4aa0      	ldr	r2, [pc, #640]	; (8005638 <UART_SetConfig+0x308>)
 80053b6:	4293      	cmp	r3, r2
 80053b8:	d126      	bne.n	8005408 <UART_SetConfig+0xd8>
 80053ba:	4ba0      	ldr	r3, [pc, #640]	; (800563c <UART_SetConfig+0x30c>)
 80053bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80053c0:	f003 0303 	and.w	r3, r3, #3
 80053c4:	2b03      	cmp	r3, #3
 80053c6:	d81b      	bhi.n	8005400 <UART_SetConfig+0xd0>
 80053c8:	a201      	add	r2, pc, #4	; (adr r2, 80053d0 <UART_SetConfig+0xa0>)
 80053ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053ce:	bf00      	nop
 80053d0:	080053e1 	.word	0x080053e1
 80053d4:	080053f1 	.word	0x080053f1
 80053d8:	080053e9 	.word	0x080053e9
 80053dc:	080053f9 	.word	0x080053f9
 80053e0:	2301      	movs	r3, #1
 80053e2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80053e6:	e080      	b.n	80054ea <UART_SetConfig+0x1ba>
 80053e8:	2302      	movs	r3, #2
 80053ea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80053ee:	e07c      	b.n	80054ea <UART_SetConfig+0x1ba>
 80053f0:	2304      	movs	r3, #4
 80053f2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80053f6:	e078      	b.n	80054ea <UART_SetConfig+0x1ba>
 80053f8:	2308      	movs	r3, #8
 80053fa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80053fe:	e074      	b.n	80054ea <UART_SetConfig+0x1ba>
 8005400:	2310      	movs	r3, #16
 8005402:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005406:	e070      	b.n	80054ea <UART_SetConfig+0x1ba>
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	4a8c      	ldr	r2, [pc, #560]	; (8005640 <UART_SetConfig+0x310>)
 800540e:	4293      	cmp	r3, r2
 8005410:	d138      	bne.n	8005484 <UART_SetConfig+0x154>
 8005412:	4b8a      	ldr	r3, [pc, #552]	; (800563c <UART_SetConfig+0x30c>)
 8005414:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005418:	f003 030c 	and.w	r3, r3, #12
 800541c:	2b0c      	cmp	r3, #12
 800541e:	d82d      	bhi.n	800547c <UART_SetConfig+0x14c>
 8005420:	a201      	add	r2, pc, #4	; (adr r2, 8005428 <UART_SetConfig+0xf8>)
 8005422:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005426:	bf00      	nop
 8005428:	0800545d 	.word	0x0800545d
 800542c:	0800547d 	.word	0x0800547d
 8005430:	0800547d 	.word	0x0800547d
 8005434:	0800547d 	.word	0x0800547d
 8005438:	0800546d 	.word	0x0800546d
 800543c:	0800547d 	.word	0x0800547d
 8005440:	0800547d 	.word	0x0800547d
 8005444:	0800547d 	.word	0x0800547d
 8005448:	08005465 	.word	0x08005465
 800544c:	0800547d 	.word	0x0800547d
 8005450:	0800547d 	.word	0x0800547d
 8005454:	0800547d 	.word	0x0800547d
 8005458:	08005475 	.word	0x08005475
 800545c:	2300      	movs	r3, #0
 800545e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005462:	e042      	b.n	80054ea <UART_SetConfig+0x1ba>
 8005464:	2302      	movs	r3, #2
 8005466:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800546a:	e03e      	b.n	80054ea <UART_SetConfig+0x1ba>
 800546c:	2304      	movs	r3, #4
 800546e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005472:	e03a      	b.n	80054ea <UART_SetConfig+0x1ba>
 8005474:	2308      	movs	r3, #8
 8005476:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800547a:	e036      	b.n	80054ea <UART_SetConfig+0x1ba>
 800547c:	2310      	movs	r3, #16
 800547e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005482:	e032      	b.n	80054ea <UART_SetConfig+0x1ba>
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	4a6a      	ldr	r2, [pc, #424]	; (8005634 <UART_SetConfig+0x304>)
 800548a:	4293      	cmp	r3, r2
 800548c:	d12a      	bne.n	80054e4 <UART_SetConfig+0x1b4>
 800548e:	4b6b      	ldr	r3, [pc, #428]	; (800563c <UART_SetConfig+0x30c>)
 8005490:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005494:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005498:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800549c:	d01a      	beq.n	80054d4 <UART_SetConfig+0x1a4>
 800549e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80054a2:	d81b      	bhi.n	80054dc <UART_SetConfig+0x1ac>
 80054a4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80054a8:	d00c      	beq.n	80054c4 <UART_SetConfig+0x194>
 80054aa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80054ae:	d815      	bhi.n	80054dc <UART_SetConfig+0x1ac>
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d003      	beq.n	80054bc <UART_SetConfig+0x18c>
 80054b4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80054b8:	d008      	beq.n	80054cc <UART_SetConfig+0x19c>
 80054ba:	e00f      	b.n	80054dc <UART_SetConfig+0x1ac>
 80054bc:	2300      	movs	r3, #0
 80054be:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80054c2:	e012      	b.n	80054ea <UART_SetConfig+0x1ba>
 80054c4:	2302      	movs	r3, #2
 80054c6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80054ca:	e00e      	b.n	80054ea <UART_SetConfig+0x1ba>
 80054cc:	2304      	movs	r3, #4
 80054ce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80054d2:	e00a      	b.n	80054ea <UART_SetConfig+0x1ba>
 80054d4:	2308      	movs	r3, #8
 80054d6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80054da:	e006      	b.n	80054ea <UART_SetConfig+0x1ba>
 80054dc:	2310      	movs	r3, #16
 80054de:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80054e2:	e002      	b.n	80054ea <UART_SetConfig+0x1ba>
 80054e4:	2310      	movs	r3, #16
 80054e6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	4a51      	ldr	r2, [pc, #324]	; (8005634 <UART_SetConfig+0x304>)
 80054f0:	4293      	cmp	r3, r2
 80054f2:	d17a      	bne.n	80055ea <UART_SetConfig+0x2ba>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80054f4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80054f8:	2b08      	cmp	r3, #8
 80054fa:	d824      	bhi.n	8005546 <UART_SetConfig+0x216>
 80054fc:	a201      	add	r2, pc, #4	; (adr r2, 8005504 <UART_SetConfig+0x1d4>)
 80054fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005502:	bf00      	nop
 8005504:	08005529 	.word	0x08005529
 8005508:	08005547 	.word	0x08005547
 800550c:	08005531 	.word	0x08005531
 8005510:	08005547 	.word	0x08005547
 8005514:	08005537 	.word	0x08005537
 8005518:	08005547 	.word	0x08005547
 800551c:	08005547 	.word	0x08005547
 8005520:	08005547 	.word	0x08005547
 8005524:	0800553f 	.word	0x0800553f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005528:	f7fe f928 	bl	800377c <HAL_RCC_GetPCLK1Freq>
 800552c:	61f8      	str	r0, [r7, #28]
        break;
 800552e:	e010      	b.n	8005552 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005530:	4b44      	ldr	r3, [pc, #272]	; (8005644 <UART_SetConfig+0x314>)
 8005532:	61fb      	str	r3, [r7, #28]
        break;
 8005534:	e00d      	b.n	8005552 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005536:	f7fe f889 	bl	800364c <HAL_RCC_GetSysClockFreq>
 800553a:	61f8      	str	r0, [r7, #28]
        break;
 800553c:	e009      	b.n	8005552 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800553e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005542:	61fb      	str	r3, [r7, #28]
        break;
 8005544:	e005      	b.n	8005552 <UART_SetConfig+0x222>
      default:
        pclk = 0U;
 8005546:	2300      	movs	r3, #0
 8005548:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800554a:	2301      	movs	r3, #1
 800554c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8005550:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005552:	69fb      	ldr	r3, [r7, #28]
 8005554:	2b00      	cmp	r3, #0
 8005556:	f000 8107 	beq.w	8005768 <UART_SetConfig+0x438>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	685a      	ldr	r2, [r3, #4]
 800555e:	4613      	mov	r3, r2
 8005560:	005b      	lsls	r3, r3, #1
 8005562:	4413      	add	r3, r2
 8005564:	69fa      	ldr	r2, [r7, #28]
 8005566:	429a      	cmp	r2, r3
 8005568:	d305      	bcc.n	8005576 <UART_SetConfig+0x246>
          (pclk > (4096U * huart->Init.BaudRate)))
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	685b      	ldr	r3, [r3, #4]
 800556e:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005570:	69fa      	ldr	r2, [r7, #28]
 8005572:	429a      	cmp	r2, r3
 8005574:	d903      	bls.n	800557e <UART_SetConfig+0x24e>
      {
        ret = HAL_ERROR;
 8005576:	2301      	movs	r3, #1
 8005578:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800557c:	e0f4      	b.n	8005768 <UART_SetConfig+0x438>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800557e:	69fb      	ldr	r3, [r7, #28]
 8005580:	2200      	movs	r2, #0
 8005582:	461c      	mov	r4, r3
 8005584:	4615      	mov	r5, r2
 8005586:	f04f 0200 	mov.w	r2, #0
 800558a:	f04f 0300 	mov.w	r3, #0
 800558e:	022b      	lsls	r3, r5, #8
 8005590:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8005594:	0222      	lsls	r2, r4, #8
 8005596:	68f9      	ldr	r1, [r7, #12]
 8005598:	6849      	ldr	r1, [r1, #4]
 800559a:	0849      	lsrs	r1, r1, #1
 800559c:	2000      	movs	r0, #0
 800559e:	4688      	mov	r8, r1
 80055a0:	4681      	mov	r9, r0
 80055a2:	eb12 0a08 	adds.w	sl, r2, r8
 80055a6:	eb43 0b09 	adc.w	fp, r3, r9
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	685b      	ldr	r3, [r3, #4]
 80055ae:	2200      	movs	r2, #0
 80055b0:	603b      	str	r3, [r7, #0]
 80055b2:	607a      	str	r2, [r7, #4]
 80055b4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80055b8:	4650      	mov	r0, sl
 80055ba:	4659      	mov	r1, fp
 80055bc:	f7fb fb64 	bl	8000c88 <__aeabi_uldivmod>
 80055c0:	4602      	mov	r2, r0
 80055c2:	460b      	mov	r3, r1
 80055c4:	4613      	mov	r3, r2
 80055c6:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80055c8:	69bb      	ldr	r3, [r7, #24]
 80055ca:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80055ce:	d308      	bcc.n	80055e2 <UART_SetConfig+0x2b2>
 80055d0:	69bb      	ldr	r3, [r7, #24]
 80055d2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80055d6:	d204      	bcs.n	80055e2 <UART_SetConfig+0x2b2>
        {
          huart->Instance->BRR = usartdiv;
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	69ba      	ldr	r2, [r7, #24]
 80055de:	60da      	str	r2, [r3, #12]
 80055e0:	e0c2      	b.n	8005768 <UART_SetConfig+0x438>
        }
        else
        {
          ret = HAL_ERROR;
 80055e2:	2301      	movs	r3, #1
 80055e4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80055e8:	e0be      	b.n	8005768 <UART_SetConfig+0x438>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	69db      	ldr	r3, [r3, #28]
 80055ee:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80055f2:	d16a      	bne.n	80056ca <UART_SetConfig+0x39a>
  {
    switch (clocksource)
 80055f4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80055f8:	2b08      	cmp	r3, #8
 80055fa:	d834      	bhi.n	8005666 <UART_SetConfig+0x336>
 80055fc:	a201      	add	r2, pc, #4	; (adr r2, 8005604 <UART_SetConfig+0x2d4>)
 80055fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005602:	bf00      	nop
 8005604:	08005629 	.word	0x08005629
 8005608:	08005649 	.word	0x08005649
 800560c:	08005651 	.word	0x08005651
 8005610:	08005667 	.word	0x08005667
 8005614:	08005657 	.word	0x08005657
 8005618:	08005667 	.word	0x08005667
 800561c:	08005667 	.word	0x08005667
 8005620:	08005667 	.word	0x08005667
 8005624:	0800565f 	.word	0x0800565f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005628:	f7fe f8a8 	bl	800377c <HAL_RCC_GetPCLK1Freq>
 800562c:	61f8      	str	r0, [r7, #28]
        break;
 800562e:	e020      	b.n	8005672 <UART_SetConfig+0x342>
 8005630:	efff69f3 	.word	0xefff69f3
 8005634:	40008000 	.word	0x40008000
 8005638:	40013800 	.word	0x40013800
 800563c:	40021000 	.word	0x40021000
 8005640:	40004400 	.word	0x40004400
 8005644:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005648:	f7fe f8ae 	bl	80037a8 <HAL_RCC_GetPCLK2Freq>
 800564c:	61f8      	str	r0, [r7, #28]
        break;
 800564e:	e010      	b.n	8005672 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005650:	4b4c      	ldr	r3, [pc, #304]	; (8005784 <UART_SetConfig+0x454>)
 8005652:	61fb      	str	r3, [r7, #28]
        break;
 8005654:	e00d      	b.n	8005672 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005656:	f7fd fff9 	bl	800364c <HAL_RCC_GetSysClockFreq>
 800565a:	61f8      	str	r0, [r7, #28]
        break;
 800565c:	e009      	b.n	8005672 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800565e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005662:	61fb      	str	r3, [r7, #28]
        break;
 8005664:	e005      	b.n	8005672 <UART_SetConfig+0x342>
      default:
        pclk = 0U;
 8005666:	2300      	movs	r3, #0
 8005668:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800566a:	2301      	movs	r3, #1
 800566c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8005670:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005672:	69fb      	ldr	r3, [r7, #28]
 8005674:	2b00      	cmp	r3, #0
 8005676:	d077      	beq.n	8005768 <UART_SetConfig+0x438>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005678:	69fb      	ldr	r3, [r7, #28]
 800567a:	005a      	lsls	r2, r3, #1
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	685b      	ldr	r3, [r3, #4]
 8005680:	085b      	lsrs	r3, r3, #1
 8005682:	441a      	add	r2, r3
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	685b      	ldr	r3, [r3, #4]
 8005688:	fbb2 f3f3 	udiv	r3, r2, r3
 800568c:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800568e:	69bb      	ldr	r3, [r7, #24]
 8005690:	2b0f      	cmp	r3, #15
 8005692:	d916      	bls.n	80056c2 <UART_SetConfig+0x392>
 8005694:	69bb      	ldr	r3, [r7, #24]
 8005696:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800569a:	d212      	bcs.n	80056c2 <UART_SetConfig+0x392>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800569c:	69bb      	ldr	r3, [r7, #24]
 800569e:	b29b      	uxth	r3, r3
 80056a0:	f023 030f 	bic.w	r3, r3, #15
 80056a4:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80056a6:	69bb      	ldr	r3, [r7, #24]
 80056a8:	085b      	lsrs	r3, r3, #1
 80056aa:	b29b      	uxth	r3, r3
 80056ac:	f003 0307 	and.w	r3, r3, #7
 80056b0:	b29a      	uxth	r2, r3
 80056b2:	8afb      	ldrh	r3, [r7, #22]
 80056b4:	4313      	orrs	r3, r2
 80056b6:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	8afa      	ldrh	r2, [r7, #22]
 80056be:	60da      	str	r2, [r3, #12]
 80056c0:	e052      	b.n	8005768 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 80056c2:	2301      	movs	r3, #1
 80056c4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80056c8:	e04e      	b.n	8005768 <UART_SetConfig+0x438>
      }
    }
  }
  else
  {
    switch (clocksource)
 80056ca:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80056ce:	2b08      	cmp	r3, #8
 80056d0:	d827      	bhi.n	8005722 <UART_SetConfig+0x3f2>
 80056d2:	a201      	add	r2, pc, #4	; (adr r2, 80056d8 <UART_SetConfig+0x3a8>)
 80056d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056d8:	080056fd 	.word	0x080056fd
 80056dc:	08005705 	.word	0x08005705
 80056e0:	0800570d 	.word	0x0800570d
 80056e4:	08005723 	.word	0x08005723
 80056e8:	08005713 	.word	0x08005713
 80056ec:	08005723 	.word	0x08005723
 80056f0:	08005723 	.word	0x08005723
 80056f4:	08005723 	.word	0x08005723
 80056f8:	0800571b 	.word	0x0800571b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80056fc:	f7fe f83e 	bl	800377c <HAL_RCC_GetPCLK1Freq>
 8005700:	61f8      	str	r0, [r7, #28]
        break;
 8005702:	e014      	b.n	800572e <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005704:	f7fe f850 	bl	80037a8 <HAL_RCC_GetPCLK2Freq>
 8005708:	61f8      	str	r0, [r7, #28]
        break;
 800570a:	e010      	b.n	800572e <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800570c:	4b1d      	ldr	r3, [pc, #116]	; (8005784 <UART_SetConfig+0x454>)
 800570e:	61fb      	str	r3, [r7, #28]
        break;
 8005710:	e00d      	b.n	800572e <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005712:	f7fd ff9b 	bl	800364c <HAL_RCC_GetSysClockFreq>
 8005716:	61f8      	str	r0, [r7, #28]
        break;
 8005718:	e009      	b.n	800572e <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800571a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800571e:	61fb      	str	r3, [r7, #28]
        break;
 8005720:	e005      	b.n	800572e <UART_SetConfig+0x3fe>
      default:
        pclk = 0U;
 8005722:	2300      	movs	r3, #0
 8005724:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005726:	2301      	movs	r3, #1
 8005728:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800572c:	bf00      	nop
    }

    if (pclk != 0U)
 800572e:	69fb      	ldr	r3, [r7, #28]
 8005730:	2b00      	cmp	r3, #0
 8005732:	d019      	beq.n	8005768 <UART_SetConfig+0x438>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	685b      	ldr	r3, [r3, #4]
 8005738:	085a      	lsrs	r2, r3, #1
 800573a:	69fb      	ldr	r3, [r7, #28]
 800573c:	441a      	add	r2, r3
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	685b      	ldr	r3, [r3, #4]
 8005742:	fbb2 f3f3 	udiv	r3, r2, r3
 8005746:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005748:	69bb      	ldr	r3, [r7, #24]
 800574a:	2b0f      	cmp	r3, #15
 800574c:	d909      	bls.n	8005762 <UART_SetConfig+0x432>
 800574e:	69bb      	ldr	r3, [r7, #24]
 8005750:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005754:	d205      	bcs.n	8005762 <UART_SetConfig+0x432>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005756:	69bb      	ldr	r3, [r7, #24]
 8005758:	b29a      	uxth	r2, r3
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	60da      	str	r2, [r3, #12]
 8005760:	e002      	b.n	8005768 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 8005762:	2301      	movs	r3, #1
 8005764:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	2200      	movs	r2, #0
 800576c:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	2200      	movs	r2, #0
 8005772:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8005774:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8005778:	4618      	mov	r0, r3
 800577a:	3728      	adds	r7, #40	; 0x28
 800577c:	46bd      	mov	sp, r7
 800577e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005782:	bf00      	nop
 8005784:	00f42400 	.word	0x00f42400

08005788 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005788:	b480      	push	{r7}
 800578a:	b083      	sub	sp, #12
 800578c:	af00      	add	r7, sp, #0
 800578e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005794:	f003 0301 	and.w	r3, r3, #1
 8005798:	2b00      	cmp	r3, #0
 800579a:	d00a      	beq.n	80057b2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	685b      	ldr	r3, [r3, #4]
 80057a2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	430a      	orrs	r2, r1
 80057b0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057b6:	f003 0302 	and.w	r3, r3, #2
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d00a      	beq.n	80057d4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	685b      	ldr	r3, [r3, #4]
 80057c4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	430a      	orrs	r2, r1
 80057d2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057d8:	f003 0304 	and.w	r3, r3, #4
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d00a      	beq.n	80057f6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	685b      	ldr	r3, [r3, #4]
 80057e6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	430a      	orrs	r2, r1
 80057f4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057fa:	f003 0308 	and.w	r3, r3, #8
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d00a      	beq.n	8005818 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	685b      	ldr	r3, [r3, #4]
 8005808:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	430a      	orrs	r2, r1
 8005816:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800581c:	f003 0310 	and.w	r3, r3, #16
 8005820:	2b00      	cmp	r3, #0
 8005822:	d00a      	beq.n	800583a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	689b      	ldr	r3, [r3, #8]
 800582a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	430a      	orrs	r2, r1
 8005838:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800583e:	f003 0320 	and.w	r3, r3, #32
 8005842:	2b00      	cmp	r3, #0
 8005844:	d00a      	beq.n	800585c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	689b      	ldr	r3, [r3, #8]
 800584c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	430a      	orrs	r2, r1
 800585a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005860:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005864:	2b00      	cmp	r3, #0
 8005866:	d01a      	beq.n	800589e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	685b      	ldr	r3, [r3, #4]
 800586e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	430a      	orrs	r2, r1
 800587c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005882:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005886:	d10a      	bne.n	800589e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	685b      	ldr	r3, [r3, #4]
 800588e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	430a      	orrs	r2, r1
 800589c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d00a      	beq.n	80058c0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	685b      	ldr	r3, [r3, #4]
 80058b0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	430a      	orrs	r2, r1
 80058be:	605a      	str	r2, [r3, #4]
  }
}
 80058c0:	bf00      	nop
 80058c2:	370c      	adds	r7, #12
 80058c4:	46bd      	mov	sp, r7
 80058c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ca:	4770      	bx	lr

080058cc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80058cc:	b580      	push	{r7, lr}
 80058ce:	b086      	sub	sp, #24
 80058d0:	af02      	add	r7, sp, #8
 80058d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	2200      	movs	r2, #0
 80058d8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80058dc:	f7fc fe7e 	bl	80025dc <HAL_GetTick>
 80058e0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	f003 0308 	and.w	r3, r3, #8
 80058ec:	2b08      	cmp	r3, #8
 80058ee:	d10e      	bne.n	800590e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80058f0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80058f4:	9300      	str	r3, [sp, #0]
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	2200      	movs	r2, #0
 80058fa:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80058fe:	6878      	ldr	r0, [r7, #4]
 8005900:	f000 f82d 	bl	800595e <UART_WaitOnFlagUntilTimeout>
 8005904:	4603      	mov	r3, r0
 8005906:	2b00      	cmp	r3, #0
 8005908:	d001      	beq.n	800590e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800590a:	2303      	movs	r3, #3
 800590c:	e023      	b.n	8005956 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	f003 0304 	and.w	r3, r3, #4
 8005918:	2b04      	cmp	r3, #4
 800591a:	d10e      	bne.n	800593a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800591c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005920:	9300      	str	r3, [sp, #0]
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	2200      	movs	r2, #0
 8005926:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800592a:	6878      	ldr	r0, [r7, #4]
 800592c:	f000 f817 	bl	800595e <UART_WaitOnFlagUntilTimeout>
 8005930:	4603      	mov	r3, r0
 8005932:	2b00      	cmp	r3, #0
 8005934:	d001      	beq.n	800593a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005936:	2303      	movs	r3, #3
 8005938:	e00d      	b.n	8005956 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	2220      	movs	r2, #32
 800593e:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	2220      	movs	r2, #32
 8005944:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	2200      	movs	r2, #0
 800594a:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	2200      	movs	r2, #0
 8005950:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8005954:	2300      	movs	r3, #0
}
 8005956:	4618      	mov	r0, r3
 8005958:	3710      	adds	r7, #16
 800595a:	46bd      	mov	sp, r7
 800595c:	bd80      	pop	{r7, pc}

0800595e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800595e:	b580      	push	{r7, lr}
 8005960:	b09c      	sub	sp, #112	; 0x70
 8005962:	af00      	add	r7, sp, #0
 8005964:	60f8      	str	r0, [r7, #12]
 8005966:	60b9      	str	r1, [r7, #8]
 8005968:	603b      	str	r3, [r7, #0]
 800596a:	4613      	mov	r3, r2
 800596c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800596e:	e0a5      	b.n	8005abc <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005970:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005972:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005976:	f000 80a1 	beq.w	8005abc <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800597a:	f7fc fe2f 	bl	80025dc <HAL_GetTick>
 800597e:	4602      	mov	r2, r0
 8005980:	683b      	ldr	r3, [r7, #0]
 8005982:	1ad3      	subs	r3, r2, r3
 8005984:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8005986:	429a      	cmp	r2, r3
 8005988:	d302      	bcc.n	8005990 <UART_WaitOnFlagUntilTimeout+0x32>
 800598a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800598c:	2b00      	cmp	r3, #0
 800598e:	d13e      	bne.n	8005a0e <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005996:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005998:	e853 3f00 	ldrex	r3, [r3]
 800599c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800599e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80059a0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80059a4:	667b      	str	r3, [r7, #100]	; 0x64
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	461a      	mov	r2, r3
 80059ac:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80059ae:	65fb      	str	r3, [r7, #92]	; 0x5c
 80059b0:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059b2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80059b4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80059b6:	e841 2300 	strex	r3, r2, [r1]
 80059ba:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80059bc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d1e6      	bne.n	8005990 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	3308      	adds	r3, #8
 80059c8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80059cc:	e853 3f00 	ldrex	r3, [r3]
 80059d0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80059d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059d4:	f023 0301 	bic.w	r3, r3, #1
 80059d8:	663b      	str	r3, [r7, #96]	; 0x60
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	3308      	adds	r3, #8
 80059e0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80059e2:	64ba      	str	r2, [r7, #72]	; 0x48
 80059e4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059e6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80059e8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80059ea:	e841 2300 	strex	r3, r2, [r1]
 80059ee:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80059f0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d1e5      	bne.n	80059c2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	2220      	movs	r2, #32
 80059fa:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	2220      	movs	r2, #32
 8005a00:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	2200      	movs	r2, #0
 8005a06:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8005a0a:	2303      	movs	r3, #3
 8005a0c:	e067      	b.n	8005ade <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	f003 0304 	and.w	r3, r3, #4
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d04f      	beq.n	8005abc <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	69db      	ldr	r3, [r3, #28]
 8005a22:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005a26:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005a2a:	d147      	bne.n	8005abc <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005a34:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a3e:	e853 3f00 	ldrex	r3, [r3]
 8005a42:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005a44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a46:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005a4a:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	461a      	mov	r2, r3
 8005a52:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005a54:	637b      	str	r3, [r7, #52]	; 0x34
 8005a56:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a58:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005a5a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005a5c:	e841 2300 	strex	r3, r2, [r1]
 8005a60:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005a62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d1e6      	bne.n	8005a36 <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	3308      	adds	r3, #8
 8005a6e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a70:	697b      	ldr	r3, [r7, #20]
 8005a72:	e853 3f00 	ldrex	r3, [r3]
 8005a76:	613b      	str	r3, [r7, #16]
   return(result);
 8005a78:	693b      	ldr	r3, [r7, #16]
 8005a7a:	f023 0301 	bic.w	r3, r3, #1
 8005a7e:	66bb      	str	r3, [r7, #104]	; 0x68
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	3308      	adds	r3, #8
 8005a86:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005a88:	623a      	str	r2, [r7, #32]
 8005a8a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a8c:	69f9      	ldr	r1, [r7, #28]
 8005a8e:	6a3a      	ldr	r2, [r7, #32]
 8005a90:	e841 2300 	strex	r3, r2, [r1]
 8005a94:	61bb      	str	r3, [r7, #24]
   return(result);
 8005a96:	69bb      	ldr	r3, [r7, #24]
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d1e5      	bne.n	8005a68 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	2220      	movs	r2, #32
 8005aa0:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	2220      	movs	r2, #32
 8005aa6:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	2220      	movs	r2, #32
 8005aac:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	2200      	movs	r2, #0
 8005ab4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8005ab8:	2303      	movs	r3, #3
 8005aba:	e010      	b.n	8005ade <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	69da      	ldr	r2, [r3, #28]
 8005ac2:	68bb      	ldr	r3, [r7, #8]
 8005ac4:	4013      	ands	r3, r2
 8005ac6:	68ba      	ldr	r2, [r7, #8]
 8005ac8:	429a      	cmp	r2, r3
 8005aca:	bf0c      	ite	eq
 8005acc:	2301      	moveq	r3, #1
 8005ace:	2300      	movne	r3, #0
 8005ad0:	b2db      	uxtb	r3, r3
 8005ad2:	461a      	mov	r2, r3
 8005ad4:	79fb      	ldrb	r3, [r7, #7]
 8005ad6:	429a      	cmp	r2, r3
 8005ad8:	f43f af4a 	beq.w	8005970 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005adc:	2300      	movs	r3, #0
}
 8005ade:	4618      	mov	r0, r3
 8005ae0:	3770      	adds	r7, #112	; 0x70
 8005ae2:	46bd      	mov	sp, r7
 8005ae4:	bd80      	pop	{r7, pc}
	...

08005ae8 <__errno>:
 8005ae8:	4b01      	ldr	r3, [pc, #4]	; (8005af0 <__errno+0x8>)
 8005aea:	6818      	ldr	r0, [r3, #0]
 8005aec:	4770      	bx	lr
 8005aee:	bf00      	nop
 8005af0:	2000000c 	.word	0x2000000c

08005af4 <__libc_init_array>:
 8005af4:	b570      	push	{r4, r5, r6, lr}
 8005af6:	4d0d      	ldr	r5, [pc, #52]	; (8005b2c <__libc_init_array+0x38>)
 8005af8:	4c0d      	ldr	r4, [pc, #52]	; (8005b30 <__libc_init_array+0x3c>)
 8005afa:	1b64      	subs	r4, r4, r5
 8005afc:	10a4      	asrs	r4, r4, #2
 8005afe:	2600      	movs	r6, #0
 8005b00:	42a6      	cmp	r6, r4
 8005b02:	d109      	bne.n	8005b18 <__libc_init_array+0x24>
 8005b04:	4d0b      	ldr	r5, [pc, #44]	; (8005b34 <__libc_init_array+0x40>)
 8005b06:	4c0c      	ldr	r4, [pc, #48]	; (8005b38 <__libc_init_array+0x44>)
 8005b08:	f005 facc 	bl	800b0a4 <_init>
 8005b0c:	1b64      	subs	r4, r4, r5
 8005b0e:	10a4      	asrs	r4, r4, #2
 8005b10:	2600      	movs	r6, #0
 8005b12:	42a6      	cmp	r6, r4
 8005b14:	d105      	bne.n	8005b22 <__libc_init_array+0x2e>
 8005b16:	bd70      	pop	{r4, r5, r6, pc}
 8005b18:	f855 3b04 	ldr.w	r3, [r5], #4
 8005b1c:	4798      	blx	r3
 8005b1e:	3601      	adds	r6, #1
 8005b20:	e7ee      	b.n	8005b00 <__libc_init_array+0xc>
 8005b22:	f855 3b04 	ldr.w	r3, [r5], #4
 8005b26:	4798      	blx	r3
 8005b28:	3601      	adds	r6, #1
 8005b2a:	e7f2      	b.n	8005b12 <__libc_init_array+0x1e>
 8005b2c:	0800c2ec 	.word	0x0800c2ec
 8005b30:	0800c2ec 	.word	0x0800c2ec
 8005b34:	0800c2ec 	.word	0x0800c2ec
 8005b38:	0800c2f0 	.word	0x0800c2f0

08005b3c <memset>:
 8005b3c:	4402      	add	r2, r0
 8005b3e:	4603      	mov	r3, r0
 8005b40:	4293      	cmp	r3, r2
 8005b42:	d100      	bne.n	8005b46 <memset+0xa>
 8005b44:	4770      	bx	lr
 8005b46:	f803 1b01 	strb.w	r1, [r3], #1
 8005b4a:	e7f9      	b.n	8005b40 <memset+0x4>

08005b4c <__cvt>:
 8005b4c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005b50:	ec55 4b10 	vmov	r4, r5, d0
 8005b54:	2d00      	cmp	r5, #0
 8005b56:	460e      	mov	r6, r1
 8005b58:	4619      	mov	r1, r3
 8005b5a:	462b      	mov	r3, r5
 8005b5c:	bfbb      	ittet	lt
 8005b5e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8005b62:	461d      	movlt	r5, r3
 8005b64:	2300      	movge	r3, #0
 8005b66:	232d      	movlt	r3, #45	; 0x2d
 8005b68:	700b      	strb	r3, [r1, #0]
 8005b6a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005b6c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8005b70:	4691      	mov	r9, r2
 8005b72:	f023 0820 	bic.w	r8, r3, #32
 8005b76:	bfbc      	itt	lt
 8005b78:	4622      	movlt	r2, r4
 8005b7a:	4614      	movlt	r4, r2
 8005b7c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005b80:	d005      	beq.n	8005b8e <__cvt+0x42>
 8005b82:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8005b86:	d100      	bne.n	8005b8a <__cvt+0x3e>
 8005b88:	3601      	adds	r6, #1
 8005b8a:	2102      	movs	r1, #2
 8005b8c:	e000      	b.n	8005b90 <__cvt+0x44>
 8005b8e:	2103      	movs	r1, #3
 8005b90:	ab03      	add	r3, sp, #12
 8005b92:	9301      	str	r3, [sp, #4]
 8005b94:	ab02      	add	r3, sp, #8
 8005b96:	9300      	str	r3, [sp, #0]
 8005b98:	ec45 4b10 	vmov	d0, r4, r5
 8005b9c:	4653      	mov	r3, sl
 8005b9e:	4632      	mov	r2, r6
 8005ba0:	f001 ff46 	bl	8007a30 <_dtoa_r>
 8005ba4:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8005ba8:	4607      	mov	r7, r0
 8005baa:	d102      	bne.n	8005bb2 <__cvt+0x66>
 8005bac:	f019 0f01 	tst.w	r9, #1
 8005bb0:	d022      	beq.n	8005bf8 <__cvt+0xac>
 8005bb2:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005bb6:	eb07 0906 	add.w	r9, r7, r6
 8005bba:	d110      	bne.n	8005bde <__cvt+0x92>
 8005bbc:	783b      	ldrb	r3, [r7, #0]
 8005bbe:	2b30      	cmp	r3, #48	; 0x30
 8005bc0:	d10a      	bne.n	8005bd8 <__cvt+0x8c>
 8005bc2:	2200      	movs	r2, #0
 8005bc4:	2300      	movs	r3, #0
 8005bc6:	4620      	mov	r0, r4
 8005bc8:	4629      	mov	r1, r5
 8005bca:	f7fa ff7d 	bl	8000ac8 <__aeabi_dcmpeq>
 8005bce:	b918      	cbnz	r0, 8005bd8 <__cvt+0x8c>
 8005bd0:	f1c6 0601 	rsb	r6, r6, #1
 8005bd4:	f8ca 6000 	str.w	r6, [sl]
 8005bd8:	f8da 3000 	ldr.w	r3, [sl]
 8005bdc:	4499      	add	r9, r3
 8005bde:	2200      	movs	r2, #0
 8005be0:	2300      	movs	r3, #0
 8005be2:	4620      	mov	r0, r4
 8005be4:	4629      	mov	r1, r5
 8005be6:	f7fa ff6f 	bl	8000ac8 <__aeabi_dcmpeq>
 8005bea:	b108      	cbz	r0, 8005bf0 <__cvt+0xa4>
 8005bec:	f8cd 900c 	str.w	r9, [sp, #12]
 8005bf0:	2230      	movs	r2, #48	; 0x30
 8005bf2:	9b03      	ldr	r3, [sp, #12]
 8005bf4:	454b      	cmp	r3, r9
 8005bf6:	d307      	bcc.n	8005c08 <__cvt+0xbc>
 8005bf8:	9b03      	ldr	r3, [sp, #12]
 8005bfa:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005bfc:	1bdb      	subs	r3, r3, r7
 8005bfe:	4638      	mov	r0, r7
 8005c00:	6013      	str	r3, [r2, #0]
 8005c02:	b004      	add	sp, #16
 8005c04:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005c08:	1c59      	adds	r1, r3, #1
 8005c0a:	9103      	str	r1, [sp, #12]
 8005c0c:	701a      	strb	r2, [r3, #0]
 8005c0e:	e7f0      	b.n	8005bf2 <__cvt+0xa6>

08005c10 <__exponent>:
 8005c10:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005c12:	4603      	mov	r3, r0
 8005c14:	2900      	cmp	r1, #0
 8005c16:	bfb8      	it	lt
 8005c18:	4249      	neglt	r1, r1
 8005c1a:	f803 2b02 	strb.w	r2, [r3], #2
 8005c1e:	bfb4      	ite	lt
 8005c20:	222d      	movlt	r2, #45	; 0x2d
 8005c22:	222b      	movge	r2, #43	; 0x2b
 8005c24:	2909      	cmp	r1, #9
 8005c26:	7042      	strb	r2, [r0, #1]
 8005c28:	dd2a      	ble.n	8005c80 <__exponent+0x70>
 8005c2a:	f10d 0407 	add.w	r4, sp, #7
 8005c2e:	46a4      	mov	ip, r4
 8005c30:	270a      	movs	r7, #10
 8005c32:	46a6      	mov	lr, r4
 8005c34:	460a      	mov	r2, r1
 8005c36:	fb91 f6f7 	sdiv	r6, r1, r7
 8005c3a:	fb07 1516 	mls	r5, r7, r6, r1
 8005c3e:	3530      	adds	r5, #48	; 0x30
 8005c40:	2a63      	cmp	r2, #99	; 0x63
 8005c42:	f104 34ff 	add.w	r4, r4, #4294967295
 8005c46:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8005c4a:	4631      	mov	r1, r6
 8005c4c:	dcf1      	bgt.n	8005c32 <__exponent+0x22>
 8005c4e:	3130      	adds	r1, #48	; 0x30
 8005c50:	f1ae 0502 	sub.w	r5, lr, #2
 8005c54:	f804 1c01 	strb.w	r1, [r4, #-1]
 8005c58:	1c44      	adds	r4, r0, #1
 8005c5a:	4629      	mov	r1, r5
 8005c5c:	4561      	cmp	r1, ip
 8005c5e:	d30a      	bcc.n	8005c76 <__exponent+0x66>
 8005c60:	f10d 0209 	add.w	r2, sp, #9
 8005c64:	eba2 020e 	sub.w	r2, r2, lr
 8005c68:	4565      	cmp	r5, ip
 8005c6a:	bf88      	it	hi
 8005c6c:	2200      	movhi	r2, #0
 8005c6e:	4413      	add	r3, r2
 8005c70:	1a18      	subs	r0, r3, r0
 8005c72:	b003      	add	sp, #12
 8005c74:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005c76:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005c7a:	f804 2f01 	strb.w	r2, [r4, #1]!
 8005c7e:	e7ed      	b.n	8005c5c <__exponent+0x4c>
 8005c80:	2330      	movs	r3, #48	; 0x30
 8005c82:	3130      	adds	r1, #48	; 0x30
 8005c84:	7083      	strb	r3, [r0, #2]
 8005c86:	70c1      	strb	r1, [r0, #3]
 8005c88:	1d03      	adds	r3, r0, #4
 8005c8a:	e7f1      	b.n	8005c70 <__exponent+0x60>

08005c8c <_printf_float>:
 8005c8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005c90:	ed2d 8b02 	vpush	{d8}
 8005c94:	b08d      	sub	sp, #52	; 0x34
 8005c96:	460c      	mov	r4, r1
 8005c98:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8005c9c:	4616      	mov	r6, r2
 8005c9e:	461f      	mov	r7, r3
 8005ca0:	4605      	mov	r5, r0
 8005ca2:	f003 fa09 	bl	80090b8 <_localeconv_r>
 8005ca6:	f8d0 a000 	ldr.w	sl, [r0]
 8005caa:	4650      	mov	r0, sl
 8005cac:	f7fa fa90 	bl	80001d0 <strlen>
 8005cb0:	2300      	movs	r3, #0
 8005cb2:	930a      	str	r3, [sp, #40]	; 0x28
 8005cb4:	6823      	ldr	r3, [r4, #0]
 8005cb6:	9305      	str	r3, [sp, #20]
 8005cb8:	f8d8 3000 	ldr.w	r3, [r8]
 8005cbc:	f894 b018 	ldrb.w	fp, [r4, #24]
 8005cc0:	3307      	adds	r3, #7
 8005cc2:	f023 0307 	bic.w	r3, r3, #7
 8005cc6:	f103 0208 	add.w	r2, r3, #8
 8005cca:	f8c8 2000 	str.w	r2, [r8]
 8005cce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005cd2:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8005cd6:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8005cda:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8005cde:	9307      	str	r3, [sp, #28]
 8005ce0:	f8cd 8018 	str.w	r8, [sp, #24]
 8005ce4:	ee08 0a10 	vmov	s16, r0
 8005ce8:	4b9f      	ldr	r3, [pc, #636]	; (8005f68 <_printf_float+0x2dc>)
 8005cea:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005cee:	f04f 32ff 	mov.w	r2, #4294967295
 8005cf2:	f7fa ff1b 	bl	8000b2c <__aeabi_dcmpun>
 8005cf6:	bb88      	cbnz	r0, 8005d5c <_printf_float+0xd0>
 8005cf8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005cfc:	4b9a      	ldr	r3, [pc, #616]	; (8005f68 <_printf_float+0x2dc>)
 8005cfe:	f04f 32ff 	mov.w	r2, #4294967295
 8005d02:	f7fa fef5 	bl	8000af0 <__aeabi_dcmple>
 8005d06:	bb48      	cbnz	r0, 8005d5c <_printf_float+0xd0>
 8005d08:	2200      	movs	r2, #0
 8005d0a:	2300      	movs	r3, #0
 8005d0c:	4640      	mov	r0, r8
 8005d0e:	4649      	mov	r1, r9
 8005d10:	f7fa fee4 	bl	8000adc <__aeabi_dcmplt>
 8005d14:	b110      	cbz	r0, 8005d1c <_printf_float+0x90>
 8005d16:	232d      	movs	r3, #45	; 0x2d
 8005d18:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005d1c:	4b93      	ldr	r3, [pc, #588]	; (8005f6c <_printf_float+0x2e0>)
 8005d1e:	4894      	ldr	r0, [pc, #592]	; (8005f70 <_printf_float+0x2e4>)
 8005d20:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8005d24:	bf94      	ite	ls
 8005d26:	4698      	movls	r8, r3
 8005d28:	4680      	movhi	r8, r0
 8005d2a:	2303      	movs	r3, #3
 8005d2c:	6123      	str	r3, [r4, #16]
 8005d2e:	9b05      	ldr	r3, [sp, #20]
 8005d30:	f023 0204 	bic.w	r2, r3, #4
 8005d34:	6022      	str	r2, [r4, #0]
 8005d36:	f04f 0900 	mov.w	r9, #0
 8005d3a:	9700      	str	r7, [sp, #0]
 8005d3c:	4633      	mov	r3, r6
 8005d3e:	aa0b      	add	r2, sp, #44	; 0x2c
 8005d40:	4621      	mov	r1, r4
 8005d42:	4628      	mov	r0, r5
 8005d44:	f000 f9d8 	bl	80060f8 <_printf_common>
 8005d48:	3001      	adds	r0, #1
 8005d4a:	f040 8090 	bne.w	8005e6e <_printf_float+0x1e2>
 8005d4e:	f04f 30ff 	mov.w	r0, #4294967295
 8005d52:	b00d      	add	sp, #52	; 0x34
 8005d54:	ecbd 8b02 	vpop	{d8}
 8005d58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005d5c:	4642      	mov	r2, r8
 8005d5e:	464b      	mov	r3, r9
 8005d60:	4640      	mov	r0, r8
 8005d62:	4649      	mov	r1, r9
 8005d64:	f7fa fee2 	bl	8000b2c <__aeabi_dcmpun>
 8005d68:	b140      	cbz	r0, 8005d7c <_printf_float+0xf0>
 8005d6a:	464b      	mov	r3, r9
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	bfbc      	itt	lt
 8005d70:	232d      	movlt	r3, #45	; 0x2d
 8005d72:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8005d76:	487f      	ldr	r0, [pc, #508]	; (8005f74 <_printf_float+0x2e8>)
 8005d78:	4b7f      	ldr	r3, [pc, #508]	; (8005f78 <_printf_float+0x2ec>)
 8005d7a:	e7d1      	b.n	8005d20 <_printf_float+0x94>
 8005d7c:	6863      	ldr	r3, [r4, #4]
 8005d7e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8005d82:	9206      	str	r2, [sp, #24]
 8005d84:	1c5a      	adds	r2, r3, #1
 8005d86:	d13f      	bne.n	8005e08 <_printf_float+0x17c>
 8005d88:	2306      	movs	r3, #6
 8005d8a:	6063      	str	r3, [r4, #4]
 8005d8c:	9b05      	ldr	r3, [sp, #20]
 8005d8e:	6861      	ldr	r1, [r4, #4]
 8005d90:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8005d94:	2300      	movs	r3, #0
 8005d96:	9303      	str	r3, [sp, #12]
 8005d98:	ab0a      	add	r3, sp, #40	; 0x28
 8005d9a:	e9cd b301 	strd	fp, r3, [sp, #4]
 8005d9e:	ab09      	add	r3, sp, #36	; 0x24
 8005da0:	ec49 8b10 	vmov	d0, r8, r9
 8005da4:	9300      	str	r3, [sp, #0]
 8005da6:	6022      	str	r2, [r4, #0]
 8005da8:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8005dac:	4628      	mov	r0, r5
 8005dae:	f7ff fecd 	bl	8005b4c <__cvt>
 8005db2:	9b06      	ldr	r3, [sp, #24]
 8005db4:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005db6:	2b47      	cmp	r3, #71	; 0x47
 8005db8:	4680      	mov	r8, r0
 8005dba:	d108      	bne.n	8005dce <_printf_float+0x142>
 8005dbc:	1cc8      	adds	r0, r1, #3
 8005dbe:	db02      	blt.n	8005dc6 <_printf_float+0x13a>
 8005dc0:	6863      	ldr	r3, [r4, #4]
 8005dc2:	4299      	cmp	r1, r3
 8005dc4:	dd41      	ble.n	8005e4a <_printf_float+0x1be>
 8005dc6:	f1ab 0b02 	sub.w	fp, fp, #2
 8005dca:	fa5f fb8b 	uxtb.w	fp, fp
 8005dce:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8005dd2:	d820      	bhi.n	8005e16 <_printf_float+0x18a>
 8005dd4:	3901      	subs	r1, #1
 8005dd6:	465a      	mov	r2, fp
 8005dd8:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8005ddc:	9109      	str	r1, [sp, #36]	; 0x24
 8005dde:	f7ff ff17 	bl	8005c10 <__exponent>
 8005de2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005de4:	1813      	adds	r3, r2, r0
 8005de6:	2a01      	cmp	r2, #1
 8005de8:	4681      	mov	r9, r0
 8005dea:	6123      	str	r3, [r4, #16]
 8005dec:	dc02      	bgt.n	8005df4 <_printf_float+0x168>
 8005dee:	6822      	ldr	r2, [r4, #0]
 8005df0:	07d2      	lsls	r2, r2, #31
 8005df2:	d501      	bpl.n	8005df8 <_printf_float+0x16c>
 8005df4:	3301      	adds	r3, #1
 8005df6:	6123      	str	r3, [r4, #16]
 8005df8:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	d09c      	beq.n	8005d3a <_printf_float+0xae>
 8005e00:	232d      	movs	r3, #45	; 0x2d
 8005e02:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005e06:	e798      	b.n	8005d3a <_printf_float+0xae>
 8005e08:	9a06      	ldr	r2, [sp, #24]
 8005e0a:	2a47      	cmp	r2, #71	; 0x47
 8005e0c:	d1be      	bne.n	8005d8c <_printf_float+0x100>
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d1bc      	bne.n	8005d8c <_printf_float+0x100>
 8005e12:	2301      	movs	r3, #1
 8005e14:	e7b9      	b.n	8005d8a <_printf_float+0xfe>
 8005e16:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8005e1a:	d118      	bne.n	8005e4e <_printf_float+0x1c2>
 8005e1c:	2900      	cmp	r1, #0
 8005e1e:	6863      	ldr	r3, [r4, #4]
 8005e20:	dd0b      	ble.n	8005e3a <_printf_float+0x1ae>
 8005e22:	6121      	str	r1, [r4, #16]
 8005e24:	b913      	cbnz	r3, 8005e2c <_printf_float+0x1a0>
 8005e26:	6822      	ldr	r2, [r4, #0]
 8005e28:	07d0      	lsls	r0, r2, #31
 8005e2a:	d502      	bpl.n	8005e32 <_printf_float+0x1a6>
 8005e2c:	3301      	adds	r3, #1
 8005e2e:	440b      	add	r3, r1
 8005e30:	6123      	str	r3, [r4, #16]
 8005e32:	65a1      	str	r1, [r4, #88]	; 0x58
 8005e34:	f04f 0900 	mov.w	r9, #0
 8005e38:	e7de      	b.n	8005df8 <_printf_float+0x16c>
 8005e3a:	b913      	cbnz	r3, 8005e42 <_printf_float+0x1b6>
 8005e3c:	6822      	ldr	r2, [r4, #0]
 8005e3e:	07d2      	lsls	r2, r2, #31
 8005e40:	d501      	bpl.n	8005e46 <_printf_float+0x1ba>
 8005e42:	3302      	adds	r3, #2
 8005e44:	e7f4      	b.n	8005e30 <_printf_float+0x1a4>
 8005e46:	2301      	movs	r3, #1
 8005e48:	e7f2      	b.n	8005e30 <_printf_float+0x1a4>
 8005e4a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8005e4e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005e50:	4299      	cmp	r1, r3
 8005e52:	db05      	blt.n	8005e60 <_printf_float+0x1d4>
 8005e54:	6823      	ldr	r3, [r4, #0]
 8005e56:	6121      	str	r1, [r4, #16]
 8005e58:	07d8      	lsls	r0, r3, #31
 8005e5a:	d5ea      	bpl.n	8005e32 <_printf_float+0x1a6>
 8005e5c:	1c4b      	adds	r3, r1, #1
 8005e5e:	e7e7      	b.n	8005e30 <_printf_float+0x1a4>
 8005e60:	2900      	cmp	r1, #0
 8005e62:	bfd4      	ite	le
 8005e64:	f1c1 0202 	rsble	r2, r1, #2
 8005e68:	2201      	movgt	r2, #1
 8005e6a:	4413      	add	r3, r2
 8005e6c:	e7e0      	b.n	8005e30 <_printf_float+0x1a4>
 8005e6e:	6823      	ldr	r3, [r4, #0]
 8005e70:	055a      	lsls	r2, r3, #21
 8005e72:	d407      	bmi.n	8005e84 <_printf_float+0x1f8>
 8005e74:	6923      	ldr	r3, [r4, #16]
 8005e76:	4642      	mov	r2, r8
 8005e78:	4631      	mov	r1, r6
 8005e7a:	4628      	mov	r0, r5
 8005e7c:	47b8      	blx	r7
 8005e7e:	3001      	adds	r0, #1
 8005e80:	d12c      	bne.n	8005edc <_printf_float+0x250>
 8005e82:	e764      	b.n	8005d4e <_printf_float+0xc2>
 8005e84:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8005e88:	f240 80e0 	bls.w	800604c <_printf_float+0x3c0>
 8005e8c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005e90:	2200      	movs	r2, #0
 8005e92:	2300      	movs	r3, #0
 8005e94:	f7fa fe18 	bl	8000ac8 <__aeabi_dcmpeq>
 8005e98:	2800      	cmp	r0, #0
 8005e9a:	d034      	beq.n	8005f06 <_printf_float+0x27a>
 8005e9c:	4a37      	ldr	r2, [pc, #220]	; (8005f7c <_printf_float+0x2f0>)
 8005e9e:	2301      	movs	r3, #1
 8005ea0:	4631      	mov	r1, r6
 8005ea2:	4628      	mov	r0, r5
 8005ea4:	47b8      	blx	r7
 8005ea6:	3001      	adds	r0, #1
 8005ea8:	f43f af51 	beq.w	8005d4e <_printf_float+0xc2>
 8005eac:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005eb0:	429a      	cmp	r2, r3
 8005eb2:	db02      	blt.n	8005eba <_printf_float+0x22e>
 8005eb4:	6823      	ldr	r3, [r4, #0]
 8005eb6:	07d8      	lsls	r0, r3, #31
 8005eb8:	d510      	bpl.n	8005edc <_printf_float+0x250>
 8005eba:	ee18 3a10 	vmov	r3, s16
 8005ebe:	4652      	mov	r2, sl
 8005ec0:	4631      	mov	r1, r6
 8005ec2:	4628      	mov	r0, r5
 8005ec4:	47b8      	blx	r7
 8005ec6:	3001      	adds	r0, #1
 8005ec8:	f43f af41 	beq.w	8005d4e <_printf_float+0xc2>
 8005ecc:	f04f 0800 	mov.w	r8, #0
 8005ed0:	f104 091a 	add.w	r9, r4, #26
 8005ed4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005ed6:	3b01      	subs	r3, #1
 8005ed8:	4543      	cmp	r3, r8
 8005eda:	dc09      	bgt.n	8005ef0 <_printf_float+0x264>
 8005edc:	6823      	ldr	r3, [r4, #0]
 8005ede:	079b      	lsls	r3, r3, #30
 8005ee0:	f100 8105 	bmi.w	80060ee <_printf_float+0x462>
 8005ee4:	68e0      	ldr	r0, [r4, #12]
 8005ee6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005ee8:	4298      	cmp	r0, r3
 8005eea:	bfb8      	it	lt
 8005eec:	4618      	movlt	r0, r3
 8005eee:	e730      	b.n	8005d52 <_printf_float+0xc6>
 8005ef0:	2301      	movs	r3, #1
 8005ef2:	464a      	mov	r2, r9
 8005ef4:	4631      	mov	r1, r6
 8005ef6:	4628      	mov	r0, r5
 8005ef8:	47b8      	blx	r7
 8005efa:	3001      	adds	r0, #1
 8005efc:	f43f af27 	beq.w	8005d4e <_printf_float+0xc2>
 8005f00:	f108 0801 	add.w	r8, r8, #1
 8005f04:	e7e6      	b.n	8005ed4 <_printf_float+0x248>
 8005f06:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	dc39      	bgt.n	8005f80 <_printf_float+0x2f4>
 8005f0c:	4a1b      	ldr	r2, [pc, #108]	; (8005f7c <_printf_float+0x2f0>)
 8005f0e:	2301      	movs	r3, #1
 8005f10:	4631      	mov	r1, r6
 8005f12:	4628      	mov	r0, r5
 8005f14:	47b8      	blx	r7
 8005f16:	3001      	adds	r0, #1
 8005f18:	f43f af19 	beq.w	8005d4e <_printf_float+0xc2>
 8005f1c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005f20:	4313      	orrs	r3, r2
 8005f22:	d102      	bne.n	8005f2a <_printf_float+0x29e>
 8005f24:	6823      	ldr	r3, [r4, #0]
 8005f26:	07d9      	lsls	r1, r3, #31
 8005f28:	d5d8      	bpl.n	8005edc <_printf_float+0x250>
 8005f2a:	ee18 3a10 	vmov	r3, s16
 8005f2e:	4652      	mov	r2, sl
 8005f30:	4631      	mov	r1, r6
 8005f32:	4628      	mov	r0, r5
 8005f34:	47b8      	blx	r7
 8005f36:	3001      	adds	r0, #1
 8005f38:	f43f af09 	beq.w	8005d4e <_printf_float+0xc2>
 8005f3c:	f04f 0900 	mov.w	r9, #0
 8005f40:	f104 0a1a 	add.w	sl, r4, #26
 8005f44:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005f46:	425b      	negs	r3, r3
 8005f48:	454b      	cmp	r3, r9
 8005f4a:	dc01      	bgt.n	8005f50 <_printf_float+0x2c4>
 8005f4c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005f4e:	e792      	b.n	8005e76 <_printf_float+0x1ea>
 8005f50:	2301      	movs	r3, #1
 8005f52:	4652      	mov	r2, sl
 8005f54:	4631      	mov	r1, r6
 8005f56:	4628      	mov	r0, r5
 8005f58:	47b8      	blx	r7
 8005f5a:	3001      	adds	r0, #1
 8005f5c:	f43f aef7 	beq.w	8005d4e <_printf_float+0xc2>
 8005f60:	f109 0901 	add.w	r9, r9, #1
 8005f64:	e7ee      	b.n	8005f44 <_printf_float+0x2b8>
 8005f66:	bf00      	nop
 8005f68:	7fefffff 	.word	0x7fefffff
 8005f6c:	0800be28 	.word	0x0800be28
 8005f70:	0800be2c 	.word	0x0800be2c
 8005f74:	0800be34 	.word	0x0800be34
 8005f78:	0800be30 	.word	0x0800be30
 8005f7c:	0800c291 	.word	0x0800c291
 8005f80:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005f82:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005f84:	429a      	cmp	r2, r3
 8005f86:	bfa8      	it	ge
 8005f88:	461a      	movge	r2, r3
 8005f8a:	2a00      	cmp	r2, #0
 8005f8c:	4691      	mov	r9, r2
 8005f8e:	dc37      	bgt.n	8006000 <_printf_float+0x374>
 8005f90:	f04f 0b00 	mov.w	fp, #0
 8005f94:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005f98:	f104 021a 	add.w	r2, r4, #26
 8005f9c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005f9e:	9305      	str	r3, [sp, #20]
 8005fa0:	eba3 0309 	sub.w	r3, r3, r9
 8005fa4:	455b      	cmp	r3, fp
 8005fa6:	dc33      	bgt.n	8006010 <_printf_float+0x384>
 8005fa8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005fac:	429a      	cmp	r2, r3
 8005fae:	db3b      	blt.n	8006028 <_printf_float+0x39c>
 8005fb0:	6823      	ldr	r3, [r4, #0]
 8005fb2:	07da      	lsls	r2, r3, #31
 8005fb4:	d438      	bmi.n	8006028 <_printf_float+0x39c>
 8005fb6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005fb8:	9a05      	ldr	r2, [sp, #20]
 8005fba:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005fbc:	1a9a      	subs	r2, r3, r2
 8005fbe:	eba3 0901 	sub.w	r9, r3, r1
 8005fc2:	4591      	cmp	r9, r2
 8005fc4:	bfa8      	it	ge
 8005fc6:	4691      	movge	r9, r2
 8005fc8:	f1b9 0f00 	cmp.w	r9, #0
 8005fcc:	dc35      	bgt.n	800603a <_printf_float+0x3ae>
 8005fce:	f04f 0800 	mov.w	r8, #0
 8005fd2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005fd6:	f104 0a1a 	add.w	sl, r4, #26
 8005fda:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005fde:	1a9b      	subs	r3, r3, r2
 8005fe0:	eba3 0309 	sub.w	r3, r3, r9
 8005fe4:	4543      	cmp	r3, r8
 8005fe6:	f77f af79 	ble.w	8005edc <_printf_float+0x250>
 8005fea:	2301      	movs	r3, #1
 8005fec:	4652      	mov	r2, sl
 8005fee:	4631      	mov	r1, r6
 8005ff0:	4628      	mov	r0, r5
 8005ff2:	47b8      	blx	r7
 8005ff4:	3001      	adds	r0, #1
 8005ff6:	f43f aeaa 	beq.w	8005d4e <_printf_float+0xc2>
 8005ffa:	f108 0801 	add.w	r8, r8, #1
 8005ffe:	e7ec      	b.n	8005fda <_printf_float+0x34e>
 8006000:	4613      	mov	r3, r2
 8006002:	4631      	mov	r1, r6
 8006004:	4642      	mov	r2, r8
 8006006:	4628      	mov	r0, r5
 8006008:	47b8      	blx	r7
 800600a:	3001      	adds	r0, #1
 800600c:	d1c0      	bne.n	8005f90 <_printf_float+0x304>
 800600e:	e69e      	b.n	8005d4e <_printf_float+0xc2>
 8006010:	2301      	movs	r3, #1
 8006012:	4631      	mov	r1, r6
 8006014:	4628      	mov	r0, r5
 8006016:	9205      	str	r2, [sp, #20]
 8006018:	47b8      	blx	r7
 800601a:	3001      	adds	r0, #1
 800601c:	f43f ae97 	beq.w	8005d4e <_printf_float+0xc2>
 8006020:	9a05      	ldr	r2, [sp, #20]
 8006022:	f10b 0b01 	add.w	fp, fp, #1
 8006026:	e7b9      	b.n	8005f9c <_printf_float+0x310>
 8006028:	ee18 3a10 	vmov	r3, s16
 800602c:	4652      	mov	r2, sl
 800602e:	4631      	mov	r1, r6
 8006030:	4628      	mov	r0, r5
 8006032:	47b8      	blx	r7
 8006034:	3001      	adds	r0, #1
 8006036:	d1be      	bne.n	8005fb6 <_printf_float+0x32a>
 8006038:	e689      	b.n	8005d4e <_printf_float+0xc2>
 800603a:	9a05      	ldr	r2, [sp, #20]
 800603c:	464b      	mov	r3, r9
 800603e:	4442      	add	r2, r8
 8006040:	4631      	mov	r1, r6
 8006042:	4628      	mov	r0, r5
 8006044:	47b8      	blx	r7
 8006046:	3001      	adds	r0, #1
 8006048:	d1c1      	bne.n	8005fce <_printf_float+0x342>
 800604a:	e680      	b.n	8005d4e <_printf_float+0xc2>
 800604c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800604e:	2a01      	cmp	r2, #1
 8006050:	dc01      	bgt.n	8006056 <_printf_float+0x3ca>
 8006052:	07db      	lsls	r3, r3, #31
 8006054:	d538      	bpl.n	80060c8 <_printf_float+0x43c>
 8006056:	2301      	movs	r3, #1
 8006058:	4642      	mov	r2, r8
 800605a:	4631      	mov	r1, r6
 800605c:	4628      	mov	r0, r5
 800605e:	47b8      	blx	r7
 8006060:	3001      	adds	r0, #1
 8006062:	f43f ae74 	beq.w	8005d4e <_printf_float+0xc2>
 8006066:	ee18 3a10 	vmov	r3, s16
 800606a:	4652      	mov	r2, sl
 800606c:	4631      	mov	r1, r6
 800606e:	4628      	mov	r0, r5
 8006070:	47b8      	blx	r7
 8006072:	3001      	adds	r0, #1
 8006074:	f43f ae6b 	beq.w	8005d4e <_printf_float+0xc2>
 8006078:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800607c:	2200      	movs	r2, #0
 800607e:	2300      	movs	r3, #0
 8006080:	f7fa fd22 	bl	8000ac8 <__aeabi_dcmpeq>
 8006084:	b9d8      	cbnz	r0, 80060be <_printf_float+0x432>
 8006086:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006088:	f108 0201 	add.w	r2, r8, #1
 800608c:	3b01      	subs	r3, #1
 800608e:	4631      	mov	r1, r6
 8006090:	4628      	mov	r0, r5
 8006092:	47b8      	blx	r7
 8006094:	3001      	adds	r0, #1
 8006096:	d10e      	bne.n	80060b6 <_printf_float+0x42a>
 8006098:	e659      	b.n	8005d4e <_printf_float+0xc2>
 800609a:	2301      	movs	r3, #1
 800609c:	4652      	mov	r2, sl
 800609e:	4631      	mov	r1, r6
 80060a0:	4628      	mov	r0, r5
 80060a2:	47b8      	blx	r7
 80060a4:	3001      	adds	r0, #1
 80060a6:	f43f ae52 	beq.w	8005d4e <_printf_float+0xc2>
 80060aa:	f108 0801 	add.w	r8, r8, #1
 80060ae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80060b0:	3b01      	subs	r3, #1
 80060b2:	4543      	cmp	r3, r8
 80060b4:	dcf1      	bgt.n	800609a <_printf_float+0x40e>
 80060b6:	464b      	mov	r3, r9
 80060b8:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80060bc:	e6dc      	b.n	8005e78 <_printf_float+0x1ec>
 80060be:	f04f 0800 	mov.w	r8, #0
 80060c2:	f104 0a1a 	add.w	sl, r4, #26
 80060c6:	e7f2      	b.n	80060ae <_printf_float+0x422>
 80060c8:	2301      	movs	r3, #1
 80060ca:	4642      	mov	r2, r8
 80060cc:	e7df      	b.n	800608e <_printf_float+0x402>
 80060ce:	2301      	movs	r3, #1
 80060d0:	464a      	mov	r2, r9
 80060d2:	4631      	mov	r1, r6
 80060d4:	4628      	mov	r0, r5
 80060d6:	47b8      	blx	r7
 80060d8:	3001      	adds	r0, #1
 80060da:	f43f ae38 	beq.w	8005d4e <_printf_float+0xc2>
 80060de:	f108 0801 	add.w	r8, r8, #1
 80060e2:	68e3      	ldr	r3, [r4, #12]
 80060e4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80060e6:	1a5b      	subs	r3, r3, r1
 80060e8:	4543      	cmp	r3, r8
 80060ea:	dcf0      	bgt.n	80060ce <_printf_float+0x442>
 80060ec:	e6fa      	b.n	8005ee4 <_printf_float+0x258>
 80060ee:	f04f 0800 	mov.w	r8, #0
 80060f2:	f104 0919 	add.w	r9, r4, #25
 80060f6:	e7f4      	b.n	80060e2 <_printf_float+0x456>

080060f8 <_printf_common>:
 80060f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80060fc:	4616      	mov	r6, r2
 80060fe:	4699      	mov	r9, r3
 8006100:	688a      	ldr	r2, [r1, #8]
 8006102:	690b      	ldr	r3, [r1, #16]
 8006104:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006108:	4293      	cmp	r3, r2
 800610a:	bfb8      	it	lt
 800610c:	4613      	movlt	r3, r2
 800610e:	6033      	str	r3, [r6, #0]
 8006110:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006114:	4607      	mov	r7, r0
 8006116:	460c      	mov	r4, r1
 8006118:	b10a      	cbz	r2, 800611e <_printf_common+0x26>
 800611a:	3301      	adds	r3, #1
 800611c:	6033      	str	r3, [r6, #0]
 800611e:	6823      	ldr	r3, [r4, #0]
 8006120:	0699      	lsls	r1, r3, #26
 8006122:	bf42      	ittt	mi
 8006124:	6833      	ldrmi	r3, [r6, #0]
 8006126:	3302      	addmi	r3, #2
 8006128:	6033      	strmi	r3, [r6, #0]
 800612a:	6825      	ldr	r5, [r4, #0]
 800612c:	f015 0506 	ands.w	r5, r5, #6
 8006130:	d106      	bne.n	8006140 <_printf_common+0x48>
 8006132:	f104 0a19 	add.w	sl, r4, #25
 8006136:	68e3      	ldr	r3, [r4, #12]
 8006138:	6832      	ldr	r2, [r6, #0]
 800613a:	1a9b      	subs	r3, r3, r2
 800613c:	42ab      	cmp	r3, r5
 800613e:	dc26      	bgt.n	800618e <_printf_common+0x96>
 8006140:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006144:	1e13      	subs	r3, r2, #0
 8006146:	6822      	ldr	r2, [r4, #0]
 8006148:	bf18      	it	ne
 800614a:	2301      	movne	r3, #1
 800614c:	0692      	lsls	r2, r2, #26
 800614e:	d42b      	bmi.n	80061a8 <_printf_common+0xb0>
 8006150:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006154:	4649      	mov	r1, r9
 8006156:	4638      	mov	r0, r7
 8006158:	47c0      	blx	r8
 800615a:	3001      	adds	r0, #1
 800615c:	d01e      	beq.n	800619c <_printf_common+0xa4>
 800615e:	6823      	ldr	r3, [r4, #0]
 8006160:	68e5      	ldr	r5, [r4, #12]
 8006162:	6832      	ldr	r2, [r6, #0]
 8006164:	f003 0306 	and.w	r3, r3, #6
 8006168:	2b04      	cmp	r3, #4
 800616a:	bf08      	it	eq
 800616c:	1aad      	subeq	r5, r5, r2
 800616e:	68a3      	ldr	r3, [r4, #8]
 8006170:	6922      	ldr	r2, [r4, #16]
 8006172:	bf0c      	ite	eq
 8006174:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006178:	2500      	movne	r5, #0
 800617a:	4293      	cmp	r3, r2
 800617c:	bfc4      	itt	gt
 800617e:	1a9b      	subgt	r3, r3, r2
 8006180:	18ed      	addgt	r5, r5, r3
 8006182:	2600      	movs	r6, #0
 8006184:	341a      	adds	r4, #26
 8006186:	42b5      	cmp	r5, r6
 8006188:	d11a      	bne.n	80061c0 <_printf_common+0xc8>
 800618a:	2000      	movs	r0, #0
 800618c:	e008      	b.n	80061a0 <_printf_common+0xa8>
 800618e:	2301      	movs	r3, #1
 8006190:	4652      	mov	r2, sl
 8006192:	4649      	mov	r1, r9
 8006194:	4638      	mov	r0, r7
 8006196:	47c0      	blx	r8
 8006198:	3001      	adds	r0, #1
 800619a:	d103      	bne.n	80061a4 <_printf_common+0xac>
 800619c:	f04f 30ff 	mov.w	r0, #4294967295
 80061a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80061a4:	3501      	adds	r5, #1
 80061a6:	e7c6      	b.n	8006136 <_printf_common+0x3e>
 80061a8:	18e1      	adds	r1, r4, r3
 80061aa:	1c5a      	adds	r2, r3, #1
 80061ac:	2030      	movs	r0, #48	; 0x30
 80061ae:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80061b2:	4422      	add	r2, r4
 80061b4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80061b8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80061bc:	3302      	adds	r3, #2
 80061be:	e7c7      	b.n	8006150 <_printf_common+0x58>
 80061c0:	2301      	movs	r3, #1
 80061c2:	4622      	mov	r2, r4
 80061c4:	4649      	mov	r1, r9
 80061c6:	4638      	mov	r0, r7
 80061c8:	47c0      	blx	r8
 80061ca:	3001      	adds	r0, #1
 80061cc:	d0e6      	beq.n	800619c <_printf_common+0xa4>
 80061ce:	3601      	adds	r6, #1
 80061d0:	e7d9      	b.n	8006186 <_printf_common+0x8e>
	...

080061d4 <_printf_i>:
 80061d4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80061d8:	7e0f      	ldrb	r7, [r1, #24]
 80061da:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80061dc:	2f78      	cmp	r7, #120	; 0x78
 80061de:	4691      	mov	r9, r2
 80061e0:	4680      	mov	r8, r0
 80061e2:	460c      	mov	r4, r1
 80061e4:	469a      	mov	sl, r3
 80061e6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80061ea:	d807      	bhi.n	80061fc <_printf_i+0x28>
 80061ec:	2f62      	cmp	r7, #98	; 0x62
 80061ee:	d80a      	bhi.n	8006206 <_printf_i+0x32>
 80061f0:	2f00      	cmp	r7, #0
 80061f2:	f000 80d8 	beq.w	80063a6 <_printf_i+0x1d2>
 80061f6:	2f58      	cmp	r7, #88	; 0x58
 80061f8:	f000 80a3 	beq.w	8006342 <_printf_i+0x16e>
 80061fc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006200:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006204:	e03a      	b.n	800627c <_printf_i+0xa8>
 8006206:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800620a:	2b15      	cmp	r3, #21
 800620c:	d8f6      	bhi.n	80061fc <_printf_i+0x28>
 800620e:	a101      	add	r1, pc, #4	; (adr r1, 8006214 <_printf_i+0x40>)
 8006210:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006214:	0800626d 	.word	0x0800626d
 8006218:	08006281 	.word	0x08006281
 800621c:	080061fd 	.word	0x080061fd
 8006220:	080061fd 	.word	0x080061fd
 8006224:	080061fd 	.word	0x080061fd
 8006228:	080061fd 	.word	0x080061fd
 800622c:	08006281 	.word	0x08006281
 8006230:	080061fd 	.word	0x080061fd
 8006234:	080061fd 	.word	0x080061fd
 8006238:	080061fd 	.word	0x080061fd
 800623c:	080061fd 	.word	0x080061fd
 8006240:	0800638d 	.word	0x0800638d
 8006244:	080062b1 	.word	0x080062b1
 8006248:	0800636f 	.word	0x0800636f
 800624c:	080061fd 	.word	0x080061fd
 8006250:	080061fd 	.word	0x080061fd
 8006254:	080063af 	.word	0x080063af
 8006258:	080061fd 	.word	0x080061fd
 800625c:	080062b1 	.word	0x080062b1
 8006260:	080061fd 	.word	0x080061fd
 8006264:	080061fd 	.word	0x080061fd
 8006268:	08006377 	.word	0x08006377
 800626c:	682b      	ldr	r3, [r5, #0]
 800626e:	1d1a      	adds	r2, r3, #4
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	602a      	str	r2, [r5, #0]
 8006274:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006278:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800627c:	2301      	movs	r3, #1
 800627e:	e0a3      	b.n	80063c8 <_printf_i+0x1f4>
 8006280:	6820      	ldr	r0, [r4, #0]
 8006282:	6829      	ldr	r1, [r5, #0]
 8006284:	0606      	lsls	r6, r0, #24
 8006286:	f101 0304 	add.w	r3, r1, #4
 800628a:	d50a      	bpl.n	80062a2 <_printf_i+0xce>
 800628c:	680e      	ldr	r6, [r1, #0]
 800628e:	602b      	str	r3, [r5, #0]
 8006290:	2e00      	cmp	r6, #0
 8006292:	da03      	bge.n	800629c <_printf_i+0xc8>
 8006294:	232d      	movs	r3, #45	; 0x2d
 8006296:	4276      	negs	r6, r6
 8006298:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800629c:	485e      	ldr	r0, [pc, #376]	; (8006418 <_printf_i+0x244>)
 800629e:	230a      	movs	r3, #10
 80062a0:	e019      	b.n	80062d6 <_printf_i+0x102>
 80062a2:	680e      	ldr	r6, [r1, #0]
 80062a4:	602b      	str	r3, [r5, #0]
 80062a6:	f010 0f40 	tst.w	r0, #64	; 0x40
 80062aa:	bf18      	it	ne
 80062ac:	b236      	sxthne	r6, r6
 80062ae:	e7ef      	b.n	8006290 <_printf_i+0xbc>
 80062b0:	682b      	ldr	r3, [r5, #0]
 80062b2:	6820      	ldr	r0, [r4, #0]
 80062b4:	1d19      	adds	r1, r3, #4
 80062b6:	6029      	str	r1, [r5, #0]
 80062b8:	0601      	lsls	r1, r0, #24
 80062ba:	d501      	bpl.n	80062c0 <_printf_i+0xec>
 80062bc:	681e      	ldr	r6, [r3, #0]
 80062be:	e002      	b.n	80062c6 <_printf_i+0xf2>
 80062c0:	0646      	lsls	r6, r0, #25
 80062c2:	d5fb      	bpl.n	80062bc <_printf_i+0xe8>
 80062c4:	881e      	ldrh	r6, [r3, #0]
 80062c6:	4854      	ldr	r0, [pc, #336]	; (8006418 <_printf_i+0x244>)
 80062c8:	2f6f      	cmp	r7, #111	; 0x6f
 80062ca:	bf0c      	ite	eq
 80062cc:	2308      	moveq	r3, #8
 80062ce:	230a      	movne	r3, #10
 80062d0:	2100      	movs	r1, #0
 80062d2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80062d6:	6865      	ldr	r5, [r4, #4]
 80062d8:	60a5      	str	r5, [r4, #8]
 80062da:	2d00      	cmp	r5, #0
 80062dc:	bfa2      	ittt	ge
 80062de:	6821      	ldrge	r1, [r4, #0]
 80062e0:	f021 0104 	bicge.w	r1, r1, #4
 80062e4:	6021      	strge	r1, [r4, #0]
 80062e6:	b90e      	cbnz	r6, 80062ec <_printf_i+0x118>
 80062e8:	2d00      	cmp	r5, #0
 80062ea:	d04d      	beq.n	8006388 <_printf_i+0x1b4>
 80062ec:	4615      	mov	r5, r2
 80062ee:	fbb6 f1f3 	udiv	r1, r6, r3
 80062f2:	fb03 6711 	mls	r7, r3, r1, r6
 80062f6:	5dc7      	ldrb	r7, [r0, r7]
 80062f8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80062fc:	4637      	mov	r7, r6
 80062fe:	42bb      	cmp	r3, r7
 8006300:	460e      	mov	r6, r1
 8006302:	d9f4      	bls.n	80062ee <_printf_i+0x11a>
 8006304:	2b08      	cmp	r3, #8
 8006306:	d10b      	bne.n	8006320 <_printf_i+0x14c>
 8006308:	6823      	ldr	r3, [r4, #0]
 800630a:	07de      	lsls	r6, r3, #31
 800630c:	d508      	bpl.n	8006320 <_printf_i+0x14c>
 800630e:	6923      	ldr	r3, [r4, #16]
 8006310:	6861      	ldr	r1, [r4, #4]
 8006312:	4299      	cmp	r1, r3
 8006314:	bfde      	ittt	le
 8006316:	2330      	movle	r3, #48	; 0x30
 8006318:	f805 3c01 	strble.w	r3, [r5, #-1]
 800631c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006320:	1b52      	subs	r2, r2, r5
 8006322:	6122      	str	r2, [r4, #16]
 8006324:	f8cd a000 	str.w	sl, [sp]
 8006328:	464b      	mov	r3, r9
 800632a:	aa03      	add	r2, sp, #12
 800632c:	4621      	mov	r1, r4
 800632e:	4640      	mov	r0, r8
 8006330:	f7ff fee2 	bl	80060f8 <_printf_common>
 8006334:	3001      	adds	r0, #1
 8006336:	d14c      	bne.n	80063d2 <_printf_i+0x1fe>
 8006338:	f04f 30ff 	mov.w	r0, #4294967295
 800633c:	b004      	add	sp, #16
 800633e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006342:	4835      	ldr	r0, [pc, #212]	; (8006418 <_printf_i+0x244>)
 8006344:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8006348:	6829      	ldr	r1, [r5, #0]
 800634a:	6823      	ldr	r3, [r4, #0]
 800634c:	f851 6b04 	ldr.w	r6, [r1], #4
 8006350:	6029      	str	r1, [r5, #0]
 8006352:	061d      	lsls	r5, r3, #24
 8006354:	d514      	bpl.n	8006380 <_printf_i+0x1ac>
 8006356:	07df      	lsls	r7, r3, #31
 8006358:	bf44      	itt	mi
 800635a:	f043 0320 	orrmi.w	r3, r3, #32
 800635e:	6023      	strmi	r3, [r4, #0]
 8006360:	b91e      	cbnz	r6, 800636a <_printf_i+0x196>
 8006362:	6823      	ldr	r3, [r4, #0]
 8006364:	f023 0320 	bic.w	r3, r3, #32
 8006368:	6023      	str	r3, [r4, #0]
 800636a:	2310      	movs	r3, #16
 800636c:	e7b0      	b.n	80062d0 <_printf_i+0xfc>
 800636e:	6823      	ldr	r3, [r4, #0]
 8006370:	f043 0320 	orr.w	r3, r3, #32
 8006374:	6023      	str	r3, [r4, #0]
 8006376:	2378      	movs	r3, #120	; 0x78
 8006378:	4828      	ldr	r0, [pc, #160]	; (800641c <_printf_i+0x248>)
 800637a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800637e:	e7e3      	b.n	8006348 <_printf_i+0x174>
 8006380:	0659      	lsls	r1, r3, #25
 8006382:	bf48      	it	mi
 8006384:	b2b6      	uxthmi	r6, r6
 8006386:	e7e6      	b.n	8006356 <_printf_i+0x182>
 8006388:	4615      	mov	r5, r2
 800638a:	e7bb      	b.n	8006304 <_printf_i+0x130>
 800638c:	682b      	ldr	r3, [r5, #0]
 800638e:	6826      	ldr	r6, [r4, #0]
 8006390:	6961      	ldr	r1, [r4, #20]
 8006392:	1d18      	adds	r0, r3, #4
 8006394:	6028      	str	r0, [r5, #0]
 8006396:	0635      	lsls	r5, r6, #24
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	d501      	bpl.n	80063a0 <_printf_i+0x1cc>
 800639c:	6019      	str	r1, [r3, #0]
 800639e:	e002      	b.n	80063a6 <_printf_i+0x1d2>
 80063a0:	0670      	lsls	r0, r6, #25
 80063a2:	d5fb      	bpl.n	800639c <_printf_i+0x1c8>
 80063a4:	8019      	strh	r1, [r3, #0]
 80063a6:	2300      	movs	r3, #0
 80063a8:	6123      	str	r3, [r4, #16]
 80063aa:	4615      	mov	r5, r2
 80063ac:	e7ba      	b.n	8006324 <_printf_i+0x150>
 80063ae:	682b      	ldr	r3, [r5, #0]
 80063b0:	1d1a      	adds	r2, r3, #4
 80063b2:	602a      	str	r2, [r5, #0]
 80063b4:	681d      	ldr	r5, [r3, #0]
 80063b6:	6862      	ldr	r2, [r4, #4]
 80063b8:	2100      	movs	r1, #0
 80063ba:	4628      	mov	r0, r5
 80063bc:	f7f9 ff10 	bl	80001e0 <memchr>
 80063c0:	b108      	cbz	r0, 80063c6 <_printf_i+0x1f2>
 80063c2:	1b40      	subs	r0, r0, r5
 80063c4:	6060      	str	r0, [r4, #4]
 80063c6:	6863      	ldr	r3, [r4, #4]
 80063c8:	6123      	str	r3, [r4, #16]
 80063ca:	2300      	movs	r3, #0
 80063cc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80063d0:	e7a8      	b.n	8006324 <_printf_i+0x150>
 80063d2:	6923      	ldr	r3, [r4, #16]
 80063d4:	462a      	mov	r2, r5
 80063d6:	4649      	mov	r1, r9
 80063d8:	4640      	mov	r0, r8
 80063da:	47d0      	blx	sl
 80063dc:	3001      	adds	r0, #1
 80063de:	d0ab      	beq.n	8006338 <_printf_i+0x164>
 80063e0:	6823      	ldr	r3, [r4, #0]
 80063e2:	079b      	lsls	r3, r3, #30
 80063e4:	d413      	bmi.n	800640e <_printf_i+0x23a>
 80063e6:	68e0      	ldr	r0, [r4, #12]
 80063e8:	9b03      	ldr	r3, [sp, #12]
 80063ea:	4298      	cmp	r0, r3
 80063ec:	bfb8      	it	lt
 80063ee:	4618      	movlt	r0, r3
 80063f0:	e7a4      	b.n	800633c <_printf_i+0x168>
 80063f2:	2301      	movs	r3, #1
 80063f4:	4632      	mov	r2, r6
 80063f6:	4649      	mov	r1, r9
 80063f8:	4640      	mov	r0, r8
 80063fa:	47d0      	blx	sl
 80063fc:	3001      	adds	r0, #1
 80063fe:	d09b      	beq.n	8006338 <_printf_i+0x164>
 8006400:	3501      	adds	r5, #1
 8006402:	68e3      	ldr	r3, [r4, #12]
 8006404:	9903      	ldr	r1, [sp, #12]
 8006406:	1a5b      	subs	r3, r3, r1
 8006408:	42ab      	cmp	r3, r5
 800640a:	dcf2      	bgt.n	80063f2 <_printf_i+0x21e>
 800640c:	e7eb      	b.n	80063e6 <_printf_i+0x212>
 800640e:	2500      	movs	r5, #0
 8006410:	f104 0619 	add.w	r6, r4, #25
 8006414:	e7f5      	b.n	8006402 <_printf_i+0x22e>
 8006416:	bf00      	nop
 8006418:	0800be38 	.word	0x0800be38
 800641c:	0800be49 	.word	0x0800be49

08006420 <_scanf_float>:
 8006420:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006424:	b087      	sub	sp, #28
 8006426:	4617      	mov	r7, r2
 8006428:	9303      	str	r3, [sp, #12]
 800642a:	688b      	ldr	r3, [r1, #8]
 800642c:	1e5a      	subs	r2, r3, #1
 800642e:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8006432:	bf83      	ittte	hi
 8006434:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8006438:	195b      	addhi	r3, r3, r5
 800643a:	9302      	strhi	r3, [sp, #8]
 800643c:	2300      	movls	r3, #0
 800643e:	bf86      	itte	hi
 8006440:	f240 135d 	movwhi	r3, #349	; 0x15d
 8006444:	608b      	strhi	r3, [r1, #8]
 8006446:	9302      	strls	r3, [sp, #8]
 8006448:	680b      	ldr	r3, [r1, #0]
 800644a:	468b      	mov	fp, r1
 800644c:	2500      	movs	r5, #0
 800644e:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8006452:	f84b 3b1c 	str.w	r3, [fp], #28
 8006456:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800645a:	4680      	mov	r8, r0
 800645c:	460c      	mov	r4, r1
 800645e:	465e      	mov	r6, fp
 8006460:	46aa      	mov	sl, r5
 8006462:	46a9      	mov	r9, r5
 8006464:	9501      	str	r5, [sp, #4]
 8006466:	68a2      	ldr	r2, [r4, #8]
 8006468:	b152      	cbz	r2, 8006480 <_scanf_float+0x60>
 800646a:	683b      	ldr	r3, [r7, #0]
 800646c:	781b      	ldrb	r3, [r3, #0]
 800646e:	2b4e      	cmp	r3, #78	; 0x4e
 8006470:	d864      	bhi.n	800653c <_scanf_float+0x11c>
 8006472:	2b40      	cmp	r3, #64	; 0x40
 8006474:	d83c      	bhi.n	80064f0 <_scanf_float+0xd0>
 8006476:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800647a:	b2c8      	uxtb	r0, r1
 800647c:	280e      	cmp	r0, #14
 800647e:	d93a      	bls.n	80064f6 <_scanf_float+0xd6>
 8006480:	f1b9 0f00 	cmp.w	r9, #0
 8006484:	d003      	beq.n	800648e <_scanf_float+0x6e>
 8006486:	6823      	ldr	r3, [r4, #0]
 8006488:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800648c:	6023      	str	r3, [r4, #0]
 800648e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006492:	f1ba 0f01 	cmp.w	sl, #1
 8006496:	f200 8113 	bhi.w	80066c0 <_scanf_float+0x2a0>
 800649a:	455e      	cmp	r6, fp
 800649c:	f200 8105 	bhi.w	80066aa <_scanf_float+0x28a>
 80064a0:	2501      	movs	r5, #1
 80064a2:	4628      	mov	r0, r5
 80064a4:	b007      	add	sp, #28
 80064a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80064aa:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 80064ae:	2a0d      	cmp	r2, #13
 80064b0:	d8e6      	bhi.n	8006480 <_scanf_float+0x60>
 80064b2:	a101      	add	r1, pc, #4	; (adr r1, 80064b8 <_scanf_float+0x98>)
 80064b4:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80064b8:	080065f7 	.word	0x080065f7
 80064bc:	08006481 	.word	0x08006481
 80064c0:	08006481 	.word	0x08006481
 80064c4:	08006481 	.word	0x08006481
 80064c8:	08006657 	.word	0x08006657
 80064cc:	0800662f 	.word	0x0800662f
 80064d0:	08006481 	.word	0x08006481
 80064d4:	08006481 	.word	0x08006481
 80064d8:	08006605 	.word	0x08006605
 80064dc:	08006481 	.word	0x08006481
 80064e0:	08006481 	.word	0x08006481
 80064e4:	08006481 	.word	0x08006481
 80064e8:	08006481 	.word	0x08006481
 80064ec:	080065bd 	.word	0x080065bd
 80064f0:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 80064f4:	e7db      	b.n	80064ae <_scanf_float+0x8e>
 80064f6:	290e      	cmp	r1, #14
 80064f8:	d8c2      	bhi.n	8006480 <_scanf_float+0x60>
 80064fa:	a001      	add	r0, pc, #4	; (adr r0, 8006500 <_scanf_float+0xe0>)
 80064fc:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8006500:	080065af 	.word	0x080065af
 8006504:	08006481 	.word	0x08006481
 8006508:	080065af 	.word	0x080065af
 800650c:	08006643 	.word	0x08006643
 8006510:	08006481 	.word	0x08006481
 8006514:	0800655d 	.word	0x0800655d
 8006518:	08006599 	.word	0x08006599
 800651c:	08006599 	.word	0x08006599
 8006520:	08006599 	.word	0x08006599
 8006524:	08006599 	.word	0x08006599
 8006528:	08006599 	.word	0x08006599
 800652c:	08006599 	.word	0x08006599
 8006530:	08006599 	.word	0x08006599
 8006534:	08006599 	.word	0x08006599
 8006538:	08006599 	.word	0x08006599
 800653c:	2b6e      	cmp	r3, #110	; 0x6e
 800653e:	d809      	bhi.n	8006554 <_scanf_float+0x134>
 8006540:	2b60      	cmp	r3, #96	; 0x60
 8006542:	d8b2      	bhi.n	80064aa <_scanf_float+0x8a>
 8006544:	2b54      	cmp	r3, #84	; 0x54
 8006546:	d077      	beq.n	8006638 <_scanf_float+0x218>
 8006548:	2b59      	cmp	r3, #89	; 0x59
 800654a:	d199      	bne.n	8006480 <_scanf_float+0x60>
 800654c:	2d07      	cmp	r5, #7
 800654e:	d197      	bne.n	8006480 <_scanf_float+0x60>
 8006550:	2508      	movs	r5, #8
 8006552:	e029      	b.n	80065a8 <_scanf_float+0x188>
 8006554:	2b74      	cmp	r3, #116	; 0x74
 8006556:	d06f      	beq.n	8006638 <_scanf_float+0x218>
 8006558:	2b79      	cmp	r3, #121	; 0x79
 800655a:	e7f6      	b.n	800654a <_scanf_float+0x12a>
 800655c:	6821      	ldr	r1, [r4, #0]
 800655e:	05c8      	lsls	r0, r1, #23
 8006560:	d51a      	bpl.n	8006598 <_scanf_float+0x178>
 8006562:	9b02      	ldr	r3, [sp, #8]
 8006564:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8006568:	6021      	str	r1, [r4, #0]
 800656a:	f109 0901 	add.w	r9, r9, #1
 800656e:	b11b      	cbz	r3, 8006578 <_scanf_float+0x158>
 8006570:	3b01      	subs	r3, #1
 8006572:	3201      	adds	r2, #1
 8006574:	9302      	str	r3, [sp, #8]
 8006576:	60a2      	str	r2, [r4, #8]
 8006578:	68a3      	ldr	r3, [r4, #8]
 800657a:	3b01      	subs	r3, #1
 800657c:	60a3      	str	r3, [r4, #8]
 800657e:	6923      	ldr	r3, [r4, #16]
 8006580:	3301      	adds	r3, #1
 8006582:	6123      	str	r3, [r4, #16]
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	3b01      	subs	r3, #1
 8006588:	2b00      	cmp	r3, #0
 800658a:	607b      	str	r3, [r7, #4]
 800658c:	f340 8084 	ble.w	8006698 <_scanf_float+0x278>
 8006590:	683b      	ldr	r3, [r7, #0]
 8006592:	3301      	adds	r3, #1
 8006594:	603b      	str	r3, [r7, #0]
 8006596:	e766      	b.n	8006466 <_scanf_float+0x46>
 8006598:	eb1a 0f05 	cmn.w	sl, r5
 800659c:	f47f af70 	bne.w	8006480 <_scanf_float+0x60>
 80065a0:	6822      	ldr	r2, [r4, #0]
 80065a2:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 80065a6:	6022      	str	r2, [r4, #0]
 80065a8:	f806 3b01 	strb.w	r3, [r6], #1
 80065ac:	e7e4      	b.n	8006578 <_scanf_float+0x158>
 80065ae:	6822      	ldr	r2, [r4, #0]
 80065b0:	0610      	lsls	r0, r2, #24
 80065b2:	f57f af65 	bpl.w	8006480 <_scanf_float+0x60>
 80065b6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80065ba:	e7f4      	b.n	80065a6 <_scanf_float+0x186>
 80065bc:	f1ba 0f00 	cmp.w	sl, #0
 80065c0:	d10e      	bne.n	80065e0 <_scanf_float+0x1c0>
 80065c2:	f1b9 0f00 	cmp.w	r9, #0
 80065c6:	d10e      	bne.n	80065e6 <_scanf_float+0x1c6>
 80065c8:	6822      	ldr	r2, [r4, #0]
 80065ca:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80065ce:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80065d2:	d108      	bne.n	80065e6 <_scanf_float+0x1c6>
 80065d4:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80065d8:	6022      	str	r2, [r4, #0]
 80065da:	f04f 0a01 	mov.w	sl, #1
 80065de:	e7e3      	b.n	80065a8 <_scanf_float+0x188>
 80065e0:	f1ba 0f02 	cmp.w	sl, #2
 80065e4:	d055      	beq.n	8006692 <_scanf_float+0x272>
 80065e6:	2d01      	cmp	r5, #1
 80065e8:	d002      	beq.n	80065f0 <_scanf_float+0x1d0>
 80065ea:	2d04      	cmp	r5, #4
 80065ec:	f47f af48 	bne.w	8006480 <_scanf_float+0x60>
 80065f0:	3501      	adds	r5, #1
 80065f2:	b2ed      	uxtb	r5, r5
 80065f4:	e7d8      	b.n	80065a8 <_scanf_float+0x188>
 80065f6:	f1ba 0f01 	cmp.w	sl, #1
 80065fa:	f47f af41 	bne.w	8006480 <_scanf_float+0x60>
 80065fe:	f04f 0a02 	mov.w	sl, #2
 8006602:	e7d1      	b.n	80065a8 <_scanf_float+0x188>
 8006604:	b97d      	cbnz	r5, 8006626 <_scanf_float+0x206>
 8006606:	f1b9 0f00 	cmp.w	r9, #0
 800660a:	f47f af3c 	bne.w	8006486 <_scanf_float+0x66>
 800660e:	6822      	ldr	r2, [r4, #0]
 8006610:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8006614:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8006618:	f47f af39 	bne.w	800648e <_scanf_float+0x6e>
 800661c:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8006620:	6022      	str	r2, [r4, #0]
 8006622:	2501      	movs	r5, #1
 8006624:	e7c0      	b.n	80065a8 <_scanf_float+0x188>
 8006626:	2d03      	cmp	r5, #3
 8006628:	d0e2      	beq.n	80065f0 <_scanf_float+0x1d0>
 800662a:	2d05      	cmp	r5, #5
 800662c:	e7de      	b.n	80065ec <_scanf_float+0x1cc>
 800662e:	2d02      	cmp	r5, #2
 8006630:	f47f af26 	bne.w	8006480 <_scanf_float+0x60>
 8006634:	2503      	movs	r5, #3
 8006636:	e7b7      	b.n	80065a8 <_scanf_float+0x188>
 8006638:	2d06      	cmp	r5, #6
 800663a:	f47f af21 	bne.w	8006480 <_scanf_float+0x60>
 800663e:	2507      	movs	r5, #7
 8006640:	e7b2      	b.n	80065a8 <_scanf_float+0x188>
 8006642:	6822      	ldr	r2, [r4, #0]
 8006644:	0591      	lsls	r1, r2, #22
 8006646:	f57f af1b 	bpl.w	8006480 <_scanf_float+0x60>
 800664a:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800664e:	6022      	str	r2, [r4, #0]
 8006650:	f8cd 9004 	str.w	r9, [sp, #4]
 8006654:	e7a8      	b.n	80065a8 <_scanf_float+0x188>
 8006656:	6822      	ldr	r2, [r4, #0]
 8006658:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 800665c:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8006660:	d006      	beq.n	8006670 <_scanf_float+0x250>
 8006662:	0550      	lsls	r0, r2, #21
 8006664:	f57f af0c 	bpl.w	8006480 <_scanf_float+0x60>
 8006668:	f1b9 0f00 	cmp.w	r9, #0
 800666c:	f43f af0f 	beq.w	800648e <_scanf_float+0x6e>
 8006670:	0591      	lsls	r1, r2, #22
 8006672:	bf58      	it	pl
 8006674:	9901      	ldrpl	r1, [sp, #4]
 8006676:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800667a:	bf58      	it	pl
 800667c:	eba9 0101 	subpl.w	r1, r9, r1
 8006680:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8006684:	bf58      	it	pl
 8006686:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800668a:	6022      	str	r2, [r4, #0]
 800668c:	f04f 0900 	mov.w	r9, #0
 8006690:	e78a      	b.n	80065a8 <_scanf_float+0x188>
 8006692:	f04f 0a03 	mov.w	sl, #3
 8006696:	e787      	b.n	80065a8 <_scanf_float+0x188>
 8006698:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800669c:	4639      	mov	r1, r7
 800669e:	4640      	mov	r0, r8
 80066a0:	4798      	blx	r3
 80066a2:	2800      	cmp	r0, #0
 80066a4:	f43f aedf 	beq.w	8006466 <_scanf_float+0x46>
 80066a8:	e6ea      	b.n	8006480 <_scanf_float+0x60>
 80066aa:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80066ae:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80066b2:	463a      	mov	r2, r7
 80066b4:	4640      	mov	r0, r8
 80066b6:	4798      	blx	r3
 80066b8:	6923      	ldr	r3, [r4, #16]
 80066ba:	3b01      	subs	r3, #1
 80066bc:	6123      	str	r3, [r4, #16]
 80066be:	e6ec      	b.n	800649a <_scanf_float+0x7a>
 80066c0:	1e6b      	subs	r3, r5, #1
 80066c2:	2b06      	cmp	r3, #6
 80066c4:	d825      	bhi.n	8006712 <_scanf_float+0x2f2>
 80066c6:	2d02      	cmp	r5, #2
 80066c8:	d836      	bhi.n	8006738 <_scanf_float+0x318>
 80066ca:	455e      	cmp	r6, fp
 80066cc:	f67f aee8 	bls.w	80064a0 <_scanf_float+0x80>
 80066d0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80066d4:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80066d8:	463a      	mov	r2, r7
 80066da:	4640      	mov	r0, r8
 80066dc:	4798      	blx	r3
 80066de:	6923      	ldr	r3, [r4, #16]
 80066e0:	3b01      	subs	r3, #1
 80066e2:	6123      	str	r3, [r4, #16]
 80066e4:	e7f1      	b.n	80066ca <_scanf_float+0x2aa>
 80066e6:	9802      	ldr	r0, [sp, #8]
 80066e8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80066ec:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 80066f0:	9002      	str	r0, [sp, #8]
 80066f2:	463a      	mov	r2, r7
 80066f4:	4640      	mov	r0, r8
 80066f6:	4798      	blx	r3
 80066f8:	6923      	ldr	r3, [r4, #16]
 80066fa:	3b01      	subs	r3, #1
 80066fc:	6123      	str	r3, [r4, #16]
 80066fe:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006702:	fa5f fa8a 	uxtb.w	sl, sl
 8006706:	f1ba 0f02 	cmp.w	sl, #2
 800670a:	d1ec      	bne.n	80066e6 <_scanf_float+0x2c6>
 800670c:	3d03      	subs	r5, #3
 800670e:	b2ed      	uxtb	r5, r5
 8006710:	1b76      	subs	r6, r6, r5
 8006712:	6823      	ldr	r3, [r4, #0]
 8006714:	05da      	lsls	r2, r3, #23
 8006716:	d52f      	bpl.n	8006778 <_scanf_float+0x358>
 8006718:	055b      	lsls	r3, r3, #21
 800671a:	d510      	bpl.n	800673e <_scanf_float+0x31e>
 800671c:	455e      	cmp	r6, fp
 800671e:	f67f aebf 	bls.w	80064a0 <_scanf_float+0x80>
 8006722:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006726:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800672a:	463a      	mov	r2, r7
 800672c:	4640      	mov	r0, r8
 800672e:	4798      	blx	r3
 8006730:	6923      	ldr	r3, [r4, #16]
 8006732:	3b01      	subs	r3, #1
 8006734:	6123      	str	r3, [r4, #16]
 8006736:	e7f1      	b.n	800671c <_scanf_float+0x2fc>
 8006738:	46aa      	mov	sl, r5
 800673a:	9602      	str	r6, [sp, #8]
 800673c:	e7df      	b.n	80066fe <_scanf_float+0x2de>
 800673e:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8006742:	6923      	ldr	r3, [r4, #16]
 8006744:	2965      	cmp	r1, #101	; 0x65
 8006746:	f103 33ff 	add.w	r3, r3, #4294967295
 800674a:	f106 35ff 	add.w	r5, r6, #4294967295
 800674e:	6123      	str	r3, [r4, #16]
 8006750:	d00c      	beq.n	800676c <_scanf_float+0x34c>
 8006752:	2945      	cmp	r1, #69	; 0x45
 8006754:	d00a      	beq.n	800676c <_scanf_float+0x34c>
 8006756:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800675a:	463a      	mov	r2, r7
 800675c:	4640      	mov	r0, r8
 800675e:	4798      	blx	r3
 8006760:	6923      	ldr	r3, [r4, #16]
 8006762:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8006766:	3b01      	subs	r3, #1
 8006768:	1eb5      	subs	r5, r6, #2
 800676a:	6123      	str	r3, [r4, #16]
 800676c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006770:	463a      	mov	r2, r7
 8006772:	4640      	mov	r0, r8
 8006774:	4798      	blx	r3
 8006776:	462e      	mov	r6, r5
 8006778:	6825      	ldr	r5, [r4, #0]
 800677a:	f015 0510 	ands.w	r5, r5, #16
 800677e:	d159      	bne.n	8006834 <_scanf_float+0x414>
 8006780:	7035      	strb	r5, [r6, #0]
 8006782:	6823      	ldr	r3, [r4, #0]
 8006784:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8006788:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800678c:	d11b      	bne.n	80067c6 <_scanf_float+0x3a6>
 800678e:	9b01      	ldr	r3, [sp, #4]
 8006790:	454b      	cmp	r3, r9
 8006792:	eba3 0209 	sub.w	r2, r3, r9
 8006796:	d123      	bne.n	80067e0 <_scanf_float+0x3c0>
 8006798:	2200      	movs	r2, #0
 800679a:	4659      	mov	r1, fp
 800679c:	4640      	mov	r0, r8
 800679e:	f000 ff71 	bl	8007684 <_strtod_r>
 80067a2:	6822      	ldr	r2, [r4, #0]
 80067a4:	9b03      	ldr	r3, [sp, #12]
 80067a6:	f012 0f02 	tst.w	r2, #2
 80067aa:	ec57 6b10 	vmov	r6, r7, d0
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	d021      	beq.n	80067f6 <_scanf_float+0x3d6>
 80067b2:	9903      	ldr	r1, [sp, #12]
 80067b4:	1d1a      	adds	r2, r3, #4
 80067b6:	600a      	str	r2, [r1, #0]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	e9c3 6700 	strd	r6, r7, [r3]
 80067be:	68e3      	ldr	r3, [r4, #12]
 80067c0:	3301      	adds	r3, #1
 80067c2:	60e3      	str	r3, [r4, #12]
 80067c4:	e66d      	b.n	80064a2 <_scanf_float+0x82>
 80067c6:	9b04      	ldr	r3, [sp, #16]
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	d0e5      	beq.n	8006798 <_scanf_float+0x378>
 80067cc:	9905      	ldr	r1, [sp, #20]
 80067ce:	230a      	movs	r3, #10
 80067d0:	462a      	mov	r2, r5
 80067d2:	3101      	adds	r1, #1
 80067d4:	4640      	mov	r0, r8
 80067d6:	f000 ffdd 	bl	8007794 <_strtol_r>
 80067da:	9b04      	ldr	r3, [sp, #16]
 80067dc:	9e05      	ldr	r6, [sp, #20]
 80067de:	1ac2      	subs	r2, r0, r3
 80067e0:	f204 136f 	addw	r3, r4, #367	; 0x16f
 80067e4:	429e      	cmp	r6, r3
 80067e6:	bf28      	it	cs
 80067e8:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 80067ec:	4912      	ldr	r1, [pc, #72]	; (8006838 <_scanf_float+0x418>)
 80067ee:	4630      	mov	r0, r6
 80067f0:	f000 f906 	bl	8006a00 <siprintf>
 80067f4:	e7d0      	b.n	8006798 <_scanf_float+0x378>
 80067f6:	9903      	ldr	r1, [sp, #12]
 80067f8:	f012 0f04 	tst.w	r2, #4
 80067fc:	f103 0204 	add.w	r2, r3, #4
 8006800:	600a      	str	r2, [r1, #0]
 8006802:	d1d9      	bne.n	80067b8 <_scanf_float+0x398>
 8006804:	f8d3 8000 	ldr.w	r8, [r3]
 8006808:	ee10 2a10 	vmov	r2, s0
 800680c:	ee10 0a10 	vmov	r0, s0
 8006810:	463b      	mov	r3, r7
 8006812:	4639      	mov	r1, r7
 8006814:	f7fa f98a 	bl	8000b2c <__aeabi_dcmpun>
 8006818:	b128      	cbz	r0, 8006826 <_scanf_float+0x406>
 800681a:	4808      	ldr	r0, [pc, #32]	; (800683c <_scanf_float+0x41c>)
 800681c:	f000 f8b6 	bl	800698c <nanf>
 8006820:	ed88 0a00 	vstr	s0, [r8]
 8006824:	e7cb      	b.n	80067be <_scanf_float+0x39e>
 8006826:	4630      	mov	r0, r6
 8006828:	4639      	mov	r1, r7
 800682a:	f7fa f9dd 	bl	8000be8 <__aeabi_d2f>
 800682e:	f8c8 0000 	str.w	r0, [r8]
 8006832:	e7c4      	b.n	80067be <_scanf_float+0x39e>
 8006834:	2500      	movs	r5, #0
 8006836:	e634      	b.n	80064a2 <_scanf_float+0x82>
 8006838:	0800be5a 	.word	0x0800be5a
 800683c:	0800c2e3 	.word	0x0800c2e3

08006840 <iprintf>:
 8006840:	b40f      	push	{r0, r1, r2, r3}
 8006842:	4b0a      	ldr	r3, [pc, #40]	; (800686c <iprintf+0x2c>)
 8006844:	b513      	push	{r0, r1, r4, lr}
 8006846:	681c      	ldr	r4, [r3, #0]
 8006848:	b124      	cbz	r4, 8006854 <iprintf+0x14>
 800684a:	69a3      	ldr	r3, [r4, #24]
 800684c:	b913      	cbnz	r3, 8006854 <iprintf+0x14>
 800684e:	4620      	mov	r0, r4
 8006850:	f002 f808 	bl	8008864 <__sinit>
 8006854:	ab05      	add	r3, sp, #20
 8006856:	9a04      	ldr	r2, [sp, #16]
 8006858:	68a1      	ldr	r1, [r4, #8]
 800685a:	9301      	str	r3, [sp, #4]
 800685c:	4620      	mov	r0, r4
 800685e:	f003 fbfd 	bl	800a05c <_vfiprintf_r>
 8006862:	b002      	add	sp, #8
 8006864:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006868:	b004      	add	sp, #16
 800686a:	4770      	bx	lr
 800686c:	2000000c 	.word	0x2000000c

08006870 <_puts_r>:
 8006870:	b570      	push	{r4, r5, r6, lr}
 8006872:	460e      	mov	r6, r1
 8006874:	4605      	mov	r5, r0
 8006876:	b118      	cbz	r0, 8006880 <_puts_r+0x10>
 8006878:	6983      	ldr	r3, [r0, #24]
 800687a:	b90b      	cbnz	r3, 8006880 <_puts_r+0x10>
 800687c:	f001 fff2 	bl	8008864 <__sinit>
 8006880:	69ab      	ldr	r3, [r5, #24]
 8006882:	68ac      	ldr	r4, [r5, #8]
 8006884:	b913      	cbnz	r3, 800688c <_puts_r+0x1c>
 8006886:	4628      	mov	r0, r5
 8006888:	f001 ffec 	bl	8008864 <__sinit>
 800688c:	4b2c      	ldr	r3, [pc, #176]	; (8006940 <_puts_r+0xd0>)
 800688e:	429c      	cmp	r4, r3
 8006890:	d120      	bne.n	80068d4 <_puts_r+0x64>
 8006892:	686c      	ldr	r4, [r5, #4]
 8006894:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006896:	07db      	lsls	r3, r3, #31
 8006898:	d405      	bmi.n	80068a6 <_puts_r+0x36>
 800689a:	89a3      	ldrh	r3, [r4, #12]
 800689c:	0598      	lsls	r0, r3, #22
 800689e:	d402      	bmi.n	80068a6 <_puts_r+0x36>
 80068a0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80068a2:	f002 fc0e 	bl	80090c2 <__retarget_lock_acquire_recursive>
 80068a6:	89a3      	ldrh	r3, [r4, #12]
 80068a8:	0719      	lsls	r1, r3, #28
 80068aa:	d51d      	bpl.n	80068e8 <_puts_r+0x78>
 80068ac:	6923      	ldr	r3, [r4, #16]
 80068ae:	b1db      	cbz	r3, 80068e8 <_puts_r+0x78>
 80068b0:	3e01      	subs	r6, #1
 80068b2:	68a3      	ldr	r3, [r4, #8]
 80068b4:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80068b8:	3b01      	subs	r3, #1
 80068ba:	60a3      	str	r3, [r4, #8]
 80068bc:	bb39      	cbnz	r1, 800690e <_puts_r+0x9e>
 80068be:	2b00      	cmp	r3, #0
 80068c0:	da38      	bge.n	8006934 <_puts_r+0xc4>
 80068c2:	4622      	mov	r2, r4
 80068c4:	210a      	movs	r1, #10
 80068c6:	4628      	mov	r0, r5
 80068c8:	f000 ff66 	bl	8007798 <__swbuf_r>
 80068cc:	3001      	adds	r0, #1
 80068ce:	d011      	beq.n	80068f4 <_puts_r+0x84>
 80068d0:	250a      	movs	r5, #10
 80068d2:	e011      	b.n	80068f8 <_puts_r+0x88>
 80068d4:	4b1b      	ldr	r3, [pc, #108]	; (8006944 <_puts_r+0xd4>)
 80068d6:	429c      	cmp	r4, r3
 80068d8:	d101      	bne.n	80068de <_puts_r+0x6e>
 80068da:	68ac      	ldr	r4, [r5, #8]
 80068dc:	e7da      	b.n	8006894 <_puts_r+0x24>
 80068de:	4b1a      	ldr	r3, [pc, #104]	; (8006948 <_puts_r+0xd8>)
 80068e0:	429c      	cmp	r4, r3
 80068e2:	bf08      	it	eq
 80068e4:	68ec      	ldreq	r4, [r5, #12]
 80068e6:	e7d5      	b.n	8006894 <_puts_r+0x24>
 80068e8:	4621      	mov	r1, r4
 80068ea:	4628      	mov	r0, r5
 80068ec:	f000 ffa6 	bl	800783c <__swsetup_r>
 80068f0:	2800      	cmp	r0, #0
 80068f2:	d0dd      	beq.n	80068b0 <_puts_r+0x40>
 80068f4:	f04f 35ff 	mov.w	r5, #4294967295
 80068f8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80068fa:	07da      	lsls	r2, r3, #31
 80068fc:	d405      	bmi.n	800690a <_puts_r+0x9a>
 80068fe:	89a3      	ldrh	r3, [r4, #12]
 8006900:	059b      	lsls	r3, r3, #22
 8006902:	d402      	bmi.n	800690a <_puts_r+0x9a>
 8006904:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006906:	f002 fbdd 	bl	80090c4 <__retarget_lock_release_recursive>
 800690a:	4628      	mov	r0, r5
 800690c:	bd70      	pop	{r4, r5, r6, pc}
 800690e:	2b00      	cmp	r3, #0
 8006910:	da04      	bge.n	800691c <_puts_r+0xac>
 8006912:	69a2      	ldr	r2, [r4, #24]
 8006914:	429a      	cmp	r2, r3
 8006916:	dc06      	bgt.n	8006926 <_puts_r+0xb6>
 8006918:	290a      	cmp	r1, #10
 800691a:	d004      	beq.n	8006926 <_puts_r+0xb6>
 800691c:	6823      	ldr	r3, [r4, #0]
 800691e:	1c5a      	adds	r2, r3, #1
 8006920:	6022      	str	r2, [r4, #0]
 8006922:	7019      	strb	r1, [r3, #0]
 8006924:	e7c5      	b.n	80068b2 <_puts_r+0x42>
 8006926:	4622      	mov	r2, r4
 8006928:	4628      	mov	r0, r5
 800692a:	f000 ff35 	bl	8007798 <__swbuf_r>
 800692e:	3001      	adds	r0, #1
 8006930:	d1bf      	bne.n	80068b2 <_puts_r+0x42>
 8006932:	e7df      	b.n	80068f4 <_puts_r+0x84>
 8006934:	6823      	ldr	r3, [r4, #0]
 8006936:	250a      	movs	r5, #10
 8006938:	1c5a      	adds	r2, r3, #1
 800693a:	6022      	str	r2, [r4, #0]
 800693c:	701d      	strb	r5, [r3, #0]
 800693e:	e7db      	b.n	80068f8 <_puts_r+0x88>
 8006940:	0800c064 	.word	0x0800c064
 8006944:	0800c084 	.word	0x0800c084
 8006948:	0800c044 	.word	0x0800c044

0800694c <puts>:
 800694c:	4b02      	ldr	r3, [pc, #8]	; (8006958 <puts+0xc>)
 800694e:	4601      	mov	r1, r0
 8006950:	6818      	ldr	r0, [r3, #0]
 8006952:	f7ff bf8d 	b.w	8006870 <_puts_r>
 8006956:	bf00      	nop
 8006958:	2000000c 	.word	0x2000000c

0800695c <iscanf>:
 800695c:	b40f      	push	{r0, r1, r2, r3}
 800695e:	4b0a      	ldr	r3, [pc, #40]	; (8006988 <iscanf+0x2c>)
 8006960:	b513      	push	{r0, r1, r4, lr}
 8006962:	681c      	ldr	r4, [r3, #0]
 8006964:	b124      	cbz	r4, 8006970 <iscanf+0x14>
 8006966:	69a3      	ldr	r3, [r4, #24]
 8006968:	b913      	cbnz	r3, 8006970 <iscanf+0x14>
 800696a:	4620      	mov	r0, r4
 800696c:	f001 ff7a 	bl	8008864 <__sinit>
 8006970:	ab05      	add	r3, sp, #20
 8006972:	9a04      	ldr	r2, [sp, #16]
 8006974:	6861      	ldr	r1, [r4, #4]
 8006976:	9301      	str	r3, [sp, #4]
 8006978:	4620      	mov	r0, r4
 800697a:	f003 fe45 	bl	800a608 <_vfiscanf_r>
 800697e:	b002      	add	sp, #8
 8006980:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006984:	b004      	add	sp, #16
 8006986:	4770      	bx	lr
 8006988:	2000000c 	.word	0x2000000c

0800698c <nanf>:
 800698c:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8006994 <nanf+0x8>
 8006990:	4770      	bx	lr
 8006992:	bf00      	nop
 8006994:	7fc00000 	.word	0x7fc00000

08006998 <sniprintf>:
 8006998:	b40c      	push	{r2, r3}
 800699a:	b530      	push	{r4, r5, lr}
 800699c:	4b17      	ldr	r3, [pc, #92]	; (80069fc <sniprintf+0x64>)
 800699e:	1e0c      	subs	r4, r1, #0
 80069a0:	681d      	ldr	r5, [r3, #0]
 80069a2:	b09d      	sub	sp, #116	; 0x74
 80069a4:	da08      	bge.n	80069b8 <sniprintf+0x20>
 80069a6:	238b      	movs	r3, #139	; 0x8b
 80069a8:	602b      	str	r3, [r5, #0]
 80069aa:	f04f 30ff 	mov.w	r0, #4294967295
 80069ae:	b01d      	add	sp, #116	; 0x74
 80069b0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80069b4:	b002      	add	sp, #8
 80069b6:	4770      	bx	lr
 80069b8:	f44f 7302 	mov.w	r3, #520	; 0x208
 80069bc:	f8ad 3014 	strh.w	r3, [sp, #20]
 80069c0:	bf14      	ite	ne
 80069c2:	f104 33ff 	addne.w	r3, r4, #4294967295
 80069c6:	4623      	moveq	r3, r4
 80069c8:	9304      	str	r3, [sp, #16]
 80069ca:	9307      	str	r3, [sp, #28]
 80069cc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80069d0:	9002      	str	r0, [sp, #8]
 80069d2:	9006      	str	r0, [sp, #24]
 80069d4:	f8ad 3016 	strh.w	r3, [sp, #22]
 80069d8:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80069da:	ab21      	add	r3, sp, #132	; 0x84
 80069dc:	a902      	add	r1, sp, #8
 80069de:	4628      	mov	r0, r5
 80069e0:	9301      	str	r3, [sp, #4]
 80069e2:	f003 fa11 	bl	8009e08 <_svfiprintf_r>
 80069e6:	1c43      	adds	r3, r0, #1
 80069e8:	bfbc      	itt	lt
 80069ea:	238b      	movlt	r3, #139	; 0x8b
 80069ec:	602b      	strlt	r3, [r5, #0]
 80069ee:	2c00      	cmp	r4, #0
 80069f0:	d0dd      	beq.n	80069ae <sniprintf+0x16>
 80069f2:	9b02      	ldr	r3, [sp, #8]
 80069f4:	2200      	movs	r2, #0
 80069f6:	701a      	strb	r2, [r3, #0]
 80069f8:	e7d9      	b.n	80069ae <sniprintf+0x16>
 80069fa:	bf00      	nop
 80069fc:	2000000c 	.word	0x2000000c

08006a00 <siprintf>:
 8006a00:	b40e      	push	{r1, r2, r3}
 8006a02:	b500      	push	{lr}
 8006a04:	b09c      	sub	sp, #112	; 0x70
 8006a06:	ab1d      	add	r3, sp, #116	; 0x74
 8006a08:	9002      	str	r0, [sp, #8]
 8006a0a:	9006      	str	r0, [sp, #24]
 8006a0c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006a10:	4809      	ldr	r0, [pc, #36]	; (8006a38 <siprintf+0x38>)
 8006a12:	9107      	str	r1, [sp, #28]
 8006a14:	9104      	str	r1, [sp, #16]
 8006a16:	4909      	ldr	r1, [pc, #36]	; (8006a3c <siprintf+0x3c>)
 8006a18:	f853 2b04 	ldr.w	r2, [r3], #4
 8006a1c:	9105      	str	r1, [sp, #20]
 8006a1e:	6800      	ldr	r0, [r0, #0]
 8006a20:	9301      	str	r3, [sp, #4]
 8006a22:	a902      	add	r1, sp, #8
 8006a24:	f003 f9f0 	bl	8009e08 <_svfiprintf_r>
 8006a28:	9b02      	ldr	r3, [sp, #8]
 8006a2a:	2200      	movs	r2, #0
 8006a2c:	701a      	strb	r2, [r3, #0]
 8006a2e:	b01c      	add	sp, #112	; 0x70
 8006a30:	f85d eb04 	ldr.w	lr, [sp], #4
 8006a34:	b003      	add	sp, #12
 8006a36:	4770      	bx	lr
 8006a38:	2000000c 	.word	0x2000000c
 8006a3c:	ffff0208 	.word	0xffff0208

08006a40 <sulp>:
 8006a40:	b570      	push	{r4, r5, r6, lr}
 8006a42:	4604      	mov	r4, r0
 8006a44:	460d      	mov	r5, r1
 8006a46:	ec45 4b10 	vmov	d0, r4, r5
 8006a4a:	4616      	mov	r6, r2
 8006a4c:	f002 ff3a 	bl	80098c4 <__ulp>
 8006a50:	ec51 0b10 	vmov	r0, r1, d0
 8006a54:	b17e      	cbz	r6, 8006a76 <sulp+0x36>
 8006a56:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8006a5a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	dd09      	ble.n	8006a76 <sulp+0x36>
 8006a62:	051b      	lsls	r3, r3, #20
 8006a64:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8006a68:	2400      	movs	r4, #0
 8006a6a:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8006a6e:	4622      	mov	r2, r4
 8006a70:	462b      	mov	r3, r5
 8006a72:	f7f9 fdc1 	bl	80005f8 <__aeabi_dmul>
 8006a76:	bd70      	pop	{r4, r5, r6, pc}

08006a78 <_strtod_l>:
 8006a78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a7c:	ed2d 8b02 	vpush	{d8}
 8006a80:	b09d      	sub	sp, #116	; 0x74
 8006a82:	461f      	mov	r7, r3
 8006a84:	2300      	movs	r3, #0
 8006a86:	9318      	str	r3, [sp, #96]	; 0x60
 8006a88:	4ba2      	ldr	r3, [pc, #648]	; (8006d14 <_strtod_l+0x29c>)
 8006a8a:	9213      	str	r2, [sp, #76]	; 0x4c
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	9305      	str	r3, [sp, #20]
 8006a90:	4604      	mov	r4, r0
 8006a92:	4618      	mov	r0, r3
 8006a94:	4688      	mov	r8, r1
 8006a96:	f7f9 fb9b 	bl	80001d0 <strlen>
 8006a9a:	f04f 0a00 	mov.w	sl, #0
 8006a9e:	4605      	mov	r5, r0
 8006aa0:	f04f 0b00 	mov.w	fp, #0
 8006aa4:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8006aa8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006aaa:	781a      	ldrb	r2, [r3, #0]
 8006aac:	2a2b      	cmp	r2, #43	; 0x2b
 8006aae:	d04e      	beq.n	8006b4e <_strtod_l+0xd6>
 8006ab0:	d83b      	bhi.n	8006b2a <_strtod_l+0xb2>
 8006ab2:	2a0d      	cmp	r2, #13
 8006ab4:	d834      	bhi.n	8006b20 <_strtod_l+0xa8>
 8006ab6:	2a08      	cmp	r2, #8
 8006ab8:	d834      	bhi.n	8006b24 <_strtod_l+0xac>
 8006aba:	2a00      	cmp	r2, #0
 8006abc:	d03e      	beq.n	8006b3c <_strtod_l+0xc4>
 8006abe:	2300      	movs	r3, #0
 8006ac0:	930a      	str	r3, [sp, #40]	; 0x28
 8006ac2:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 8006ac4:	7833      	ldrb	r3, [r6, #0]
 8006ac6:	2b30      	cmp	r3, #48	; 0x30
 8006ac8:	f040 80b0 	bne.w	8006c2c <_strtod_l+0x1b4>
 8006acc:	7873      	ldrb	r3, [r6, #1]
 8006ace:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8006ad2:	2b58      	cmp	r3, #88	; 0x58
 8006ad4:	d168      	bne.n	8006ba8 <_strtod_l+0x130>
 8006ad6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006ad8:	9301      	str	r3, [sp, #4]
 8006ada:	ab18      	add	r3, sp, #96	; 0x60
 8006adc:	9702      	str	r7, [sp, #8]
 8006ade:	9300      	str	r3, [sp, #0]
 8006ae0:	4a8d      	ldr	r2, [pc, #564]	; (8006d18 <_strtod_l+0x2a0>)
 8006ae2:	ab19      	add	r3, sp, #100	; 0x64
 8006ae4:	a917      	add	r1, sp, #92	; 0x5c
 8006ae6:	4620      	mov	r0, r4
 8006ae8:	f001 ffde 	bl	8008aa8 <__gethex>
 8006aec:	f010 0707 	ands.w	r7, r0, #7
 8006af0:	4605      	mov	r5, r0
 8006af2:	d005      	beq.n	8006b00 <_strtod_l+0x88>
 8006af4:	2f06      	cmp	r7, #6
 8006af6:	d12c      	bne.n	8006b52 <_strtod_l+0xda>
 8006af8:	3601      	adds	r6, #1
 8006afa:	2300      	movs	r3, #0
 8006afc:	9617      	str	r6, [sp, #92]	; 0x5c
 8006afe:	930a      	str	r3, [sp, #40]	; 0x28
 8006b00:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	f040 8590 	bne.w	8007628 <_strtod_l+0xbb0>
 8006b08:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006b0a:	b1eb      	cbz	r3, 8006b48 <_strtod_l+0xd0>
 8006b0c:	4652      	mov	r2, sl
 8006b0e:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8006b12:	ec43 2b10 	vmov	d0, r2, r3
 8006b16:	b01d      	add	sp, #116	; 0x74
 8006b18:	ecbd 8b02 	vpop	{d8}
 8006b1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006b20:	2a20      	cmp	r2, #32
 8006b22:	d1cc      	bne.n	8006abe <_strtod_l+0x46>
 8006b24:	3301      	adds	r3, #1
 8006b26:	9317      	str	r3, [sp, #92]	; 0x5c
 8006b28:	e7be      	b.n	8006aa8 <_strtod_l+0x30>
 8006b2a:	2a2d      	cmp	r2, #45	; 0x2d
 8006b2c:	d1c7      	bne.n	8006abe <_strtod_l+0x46>
 8006b2e:	2201      	movs	r2, #1
 8006b30:	920a      	str	r2, [sp, #40]	; 0x28
 8006b32:	1c5a      	adds	r2, r3, #1
 8006b34:	9217      	str	r2, [sp, #92]	; 0x5c
 8006b36:	785b      	ldrb	r3, [r3, #1]
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	d1c2      	bne.n	8006ac2 <_strtod_l+0x4a>
 8006b3c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8006b3e:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	f040 856e 	bne.w	8007624 <_strtod_l+0xbac>
 8006b48:	4652      	mov	r2, sl
 8006b4a:	465b      	mov	r3, fp
 8006b4c:	e7e1      	b.n	8006b12 <_strtod_l+0x9a>
 8006b4e:	2200      	movs	r2, #0
 8006b50:	e7ee      	b.n	8006b30 <_strtod_l+0xb8>
 8006b52:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8006b54:	b13a      	cbz	r2, 8006b66 <_strtod_l+0xee>
 8006b56:	2135      	movs	r1, #53	; 0x35
 8006b58:	a81a      	add	r0, sp, #104	; 0x68
 8006b5a:	f002 ffbe 	bl	8009ada <__copybits>
 8006b5e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8006b60:	4620      	mov	r0, r4
 8006b62:	f002 fb7d 	bl	8009260 <_Bfree>
 8006b66:	3f01      	subs	r7, #1
 8006b68:	2f04      	cmp	r7, #4
 8006b6a:	d806      	bhi.n	8006b7a <_strtod_l+0x102>
 8006b6c:	e8df f007 	tbb	[pc, r7]
 8006b70:	1714030a 	.word	0x1714030a
 8006b74:	0a          	.byte	0x0a
 8006b75:	00          	.byte	0x00
 8006b76:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 8006b7a:	0728      	lsls	r0, r5, #28
 8006b7c:	d5c0      	bpl.n	8006b00 <_strtod_l+0x88>
 8006b7e:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8006b82:	e7bd      	b.n	8006b00 <_strtod_l+0x88>
 8006b84:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 8006b88:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8006b8a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8006b8e:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8006b92:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8006b96:	e7f0      	b.n	8006b7a <_strtod_l+0x102>
 8006b98:	f8df b180 	ldr.w	fp, [pc, #384]	; 8006d1c <_strtod_l+0x2a4>
 8006b9c:	e7ed      	b.n	8006b7a <_strtod_l+0x102>
 8006b9e:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8006ba2:	f04f 3aff 	mov.w	sl, #4294967295
 8006ba6:	e7e8      	b.n	8006b7a <_strtod_l+0x102>
 8006ba8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006baa:	1c5a      	adds	r2, r3, #1
 8006bac:	9217      	str	r2, [sp, #92]	; 0x5c
 8006bae:	785b      	ldrb	r3, [r3, #1]
 8006bb0:	2b30      	cmp	r3, #48	; 0x30
 8006bb2:	d0f9      	beq.n	8006ba8 <_strtod_l+0x130>
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	d0a3      	beq.n	8006b00 <_strtod_l+0x88>
 8006bb8:	2301      	movs	r3, #1
 8006bba:	f04f 0900 	mov.w	r9, #0
 8006bbe:	9304      	str	r3, [sp, #16]
 8006bc0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006bc2:	9308      	str	r3, [sp, #32]
 8006bc4:	f8cd 901c 	str.w	r9, [sp, #28]
 8006bc8:	464f      	mov	r7, r9
 8006bca:	220a      	movs	r2, #10
 8006bcc:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8006bce:	7806      	ldrb	r6, [r0, #0]
 8006bd0:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8006bd4:	b2d9      	uxtb	r1, r3
 8006bd6:	2909      	cmp	r1, #9
 8006bd8:	d92a      	bls.n	8006c30 <_strtod_l+0x1b8>
 8006bda:	9905      	ldr	r1, [sp, #20]
 8006bdc:	462a      	mov	r2, r5
 8006bde:	f003 ffb6 	bl	800ab4e <strncmp>
 8006be2:	b398      	cbz	r0, 8006c4c <_strtod_l+0x1d4>
 8006be4:	2000      	movs	r0, #0
 8006be6:	4632      	mov	r2, r6
 8006be8:	463d      	mov	r5, r7
 8006bea:	9005      	str	r0, [sp, #20]
 8006bec:	4603      	mov	r3, r0
 8006bee:	2a65      	cmp	r2, #101	; 0x65
 8006bf0:	d001      	beq.n	8006bf6 <_strtod_l+0x17e>
 8006bf2:	2a45      	cmp	r2, #69	; 0x45
 8006bf4:	d118      	bne.n	8006c28 <_strtod_l+0x1b0>
 8006bf6:	b91d      	cbnz	r5, 8006c00 <_strtod_l+0x188>
 8006bf8:	9a04      	ldr	r2, [sp, #16]
 8006bfa:	4302      	orrs	r2, r0
 8006bfc:	d09e      	beq.n	8006b3c <_strtod_l+0xc4>
 8006bfe:	2500      	movs	r5, #0
 8006c00:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 8006c04:	f108 0201 	add.w	r2, r8, #1
 8006c08:	9217      	str	r2, [sp, #92]	; 0x5c
 8006c0a:	f898 2001 	ldrb.w	r2, [r8, #1]
 8006c0e:	2a2b      	cmp	r2, #43	; 0x2b
 8006c10:	d075      	beq.n	8006cfe <_strtod_l+0x286>
 8006c12:	2a2d      	cmp	r2, #45	; 0x2d
 8006c14:	d07b      	beq.n	8006d0e <_strtod_l+0x296>
 8006c16:	f04f 0c00 	mov.w	ip, #0
 8006c1a:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8006c1e:	2909      	cmp	r1, #9
 8006c20:	f240 8082 	bls.w	8006d28 <_strtod_l+0x2b0>
 8006c24:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8006c28:	2600      	movs	r6, #0
 8006c2a:	e09d      	b.n	8006d68 <_strtod_l+0x2f0>
 8006c2c:	2300      	movs	r3, #0
 8006c2e:	e7c4      	b.n	8006bba <_strtod_l+0x142>
 8006c30:	2f08      	cmp	r7, #8
 8006c32:	bfd8      	it	le
 8006c34:	9907      	ldrle	r1, [sp, #28]
 8006c36:	f100 0001 	add.w	r0, r0, #1
 8006c3a:	bfda      	itte	le
 8006c3c:	fb02 3301 	mlale	r3, r2, r1, r3
 8006c40:	9307      	strle	r3, [sp, #28]
 8006c42:	fb02 3909 	mlagt	r9, r2, r9, r3
 8006c46:	3701      	adds	r7, #1
 8006c48:	9017      	str	r0, [sp, #92]	; 0x5c
 8006c4a:	e7bf      	b.n	8006bcc <_strtod_l+0x154>
 8006c4c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006c4e:	195a      	adds	r2, r3, r5
 8006c50:	9217      	str	r2, [sp, #92]	; 0x5c
 8006c52:	5d5a      	ldrb	r2, [r3, r5]
 8006c54:	2f00      	cmp	r7, #0
 8006c56:	d037      	beq.n	8006cc8 <_strtod_l+0x250>
 8006c58:	9005      	str	r0, [sp, #20]
 8006c5a:	463d      	mov	r5, r7
 8006c5c:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8006c60:	2b09      	cmp	r3, #9
 8006c62:	d912      	bls.n	8006c8a <_strtod_l+0x212>
 8006c64:	2301      	movs	r3, #1
 8006c66:	e7c2      	b.n	8006bee <_strtod_l+0x176>
 8006c68:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006c6a:	1c5a      	adds	r2, r3, #1
 8006c6c:	9217      	str	r2, [sp, #92]	; 0x5c
 8006c6e:	785a      	ldrb	r2, [r3, #1]
 8006c70:	3001      	adds	r0, #1
 8006c72:	2a30      	cmp	r2, #48	; 0x30
 8006c74:	d0f8      	beq.n	8006c68 <_strtod_l+0x1f0>
 8006c76:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8006c7a:	2b08      	cmp	r3, #8
 8006c7c:	f200 84d9 	bhi.w	8007632 <_strtod_l+0xbba>
 8006c80:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006c82:	9005      	str	r0, [sp, #20]
 8006c84:	2000      	movs	r0, #0
 8006c86:	9308      	str	r3, [sp, #32]
 8006c88:	4605      	mov	r5, r0
 8006c8a:	3a30      	subs	r2, #48	; 0x30
 8006c8c:	f100 0301 	add.w	r3, r0, #1
 8006c90:	d014      	beq.n	8006cbc <_strtod_l+0x244>
 8006c92:	9905      	ldr	r1, [sp, #20]
 8006c94:	4419      	add	r1, r3
 8006c96:	9105      	str	r1, [sp, #20]
 8006c98:	462b      	mov	r3, r5
 8006c9a:	eb00 0e05 	add.w	lr, r0, r5
 8006c9e:	210a      	movs	r1, #10
 8006ca0:	4573      	cmp	r3, lr
 8006ca2:	d113      	bne.n	8006ccc <_strtod_l+0x254>
 8006ca4:	182b      	adds	r3, r5, r0
 8006ca6:	2b08      	cmp	r3, #8
 8006ca8:	f105 0501 	add.w	r5, r5, #1
 8006cac:	4405      	add	r5, r0
 8006cae:	dc1c      	bgt.n	8006cea <_strtod_l+0x272>
 8006cb0:	9907      	ldr	r1, [sp, #28]
 8006cb2:	230a      	movs	r3, #10
 8006cb4:	fb03 2301 	mla	r3, r3, r1, r2
 8006cb8:	9307      	str	r3, [sp, #28]
 8006cba:	2300      	movs	r3, #0
 8006cbc:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8006cbe:	1c51      	adds	r1, r2, #1
 8006cc0:	9117      	str	r1, [sp, #92]	; 0x5c
 8006cc2:	7852      	ldrb	r2, [r2, #1]
 8006cc4:	4618      	mov	r0, r3
 8006cc6:	e7c9      	b.n	8006c5c <_strtod_l+0x1e4>
 8006cc8:	4638      	mov	r0, r7
 8006cca:	e7d2      	b.n	8006c72 <_strtod_l+0x1fa>
 8006ccc:	2b08      	cmp	r3, #8
 8006cce:	dc04      	bgt.n	8006cda <_strtod_l+0x262>
 8006cd0:	9e07      	ldr	r6, [sp, #28]
 8006cd2:	434e      	muls	r6, r1
 8006cd4:	9607      	str	r6, [sp, #28]
 8006cd6:	3301      	adds	r3, #1
 8006cd8:	e7e2      	b.n	8006ca0 <_strtod_l+0x228>
 8006cda:	f103 0c01 	add.w	ip, r3, #1
 8006cde:	f1bc 0f10 	cmp.w	ip, #16
 8006ce2:	bfd8      	it	le
 8006ce4:	fb01 f909 	mulle.w	r9, r1, r9
 8006ce8:	e7f5      	b.n	8006cd6 <_strtod_l+0x25e>
 8006cea:	2d10      	cmp	r5, #16
 8006cec:	bfdc      	itt	le
 8006cee:	230a      	movle	r3, #10
 8006cf0:	fb03 2909 	mlale	r9, r3, r9, r2
 8006cf4:	e7e1      	b.n	8006cba <_strtod_l+0x242>
 8006cf6:	2300      	movs	r3, #0
 8006cf8:	9305      	str	r3, [sp, #20]
 8006cfa:	2301      	movs	r3, #1
 8006cfc:	e77c      	b.n	8006bf8 <_strtod_l+0x180>
 8006cfe:	f04f 0c00 	mov.w	ip, #0
 8006d02:	f108 0202 	add.w	r2, r8, #2
 8006d06:	9217      	str	r2, [sp, #92]	; 0x5c
 8006d08:	f898 2002 	ldrb.w	r2, [r8, #2]
 8006d0c:	e785      	b.n	8006c1a <_strtod_l+0x1a2>
 8006d0e:	f04f 0c01 	mov.w	ip, #1
 8006d12:	e7f6      	b.n	8006d02 <_strtod_l+0x28a>
 8006d14:	0800c10c 	.word	0x0800c10c
 8006d18:	0800be60 	.word	0x0800be60
 8006d1c:	7ff00000 	.word	0x7ff00000
 8006d20:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8006d22:	1c51      	adds	r1, r2, #1
 8006d24:	9117      	str	r1, [sp, #92]	; 0x5c
 8006d26:	7852      	ldrb	r2, [r2, #1]
 8006d28:	2a30      	cmp	r2, #48	; 0x30
 8006d2a:	d0f9      	beq.n	8006d20 <_strtod_l+0x2a8>
 8006d2c:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8006d30:	2908      	cmp	r1, #8
 8006d32:	f63f af79 	bhi.w	8006c28 <_strtod_l+0x1b0>
 8006d36:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 8006d3a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8006d3c:	9206      	str	r2, [sp, #24]
 8006d3e:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8006d40:	1c51      	adds	r1, r2, #1
 8006d42:	9117      	str	r1, [sp, #92]	; 0x5c
 8006d44:	7852      	ldrb	r2, [r2, #1]
 8006d46:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 8006d4a:	2e09      	cmp	r6, #9
 8006d4c:	d937      	bls.n	8006dbe <_strtod_l+0x346>
 8006d4e:	9e06      	ldr	r6, [sp, #24]
 8006d50:	1b89      	subs	r1, r1, r6
 8006d52:	2908      	cmp	r1, #8
 8006d54:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8006d58:	dc02      	bgt.n	8006d60 <_strtod_l+0x2e8>
 8006d5a:	4576      	cmp	r6, lr
 8006d5c:	bfa8      	it	ge
 8006d5e:	4676      	movge	r6, lr
 8006d60:	f1bc 0f00 	cmp.w	ip, #0
 8006d64:	d000      	beq.n	8006d68 <_strtod_l+0x2f0>
 8006d66:	4276      	negs	r6, r6
 8006d68:	2d00      	cmp	r5, #0
 8006d6a:	d14d      	bne.n	8006e08 <_strtod_l+0x390>
 8006d6c:	9904      	ldr	r1, [sp, #16]
 8006d6e:	4301      	orrs	r1, r0
 8006d70:	f47f aec6 	bne.w	8006b00 <_strtod_l+0x88>
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	f47f aee1 	bne.w	8006b3c <_strtod_l+0xc4>
 8006d7a:	2a69      	cmp	r2, #105	; 0x69
 8006d7c:	d027      	beq.n	8006dce <_strtod_l+0x356>
 8006d7e:	dc24      	bgt.n	8006dca <_strtod_l+0x352>
 8006d80:	2a49      	cmp	r2, #73	; 0x49
 8006d82:	d024      	beq.n	8006dce <_strtod_l+0x356>
 8006d84:	2a4e      	cmp	r2, #78	; 0x4e
 8006d86:	f47f aed9 	bne.w	8006b3c <_strtod_l+0xc4>
 8006d8a:	499f      	ldr	r1, [pc, #636]	; (8007008 <_strtod_l+0x590>)
 8006d8c:	a817      	add	r0, sp, #92	; 0x5c
 8006d8e:	f002 f8e3 	bl	8008f58 <__match>
 8006d92:	2800      	cmp	r0, #0
 8006d94:	f43f aed2 	beq.w	8006b3c <_strtod_l+0xc4>
 8006d98:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006d9a:	781b      	ldrb	r3, [r3, #0]
 8006d9c:	2b28      	cmp	r3, #40	; 0x28
 8006d9e:	d12d      	bne.n	8006dfc <_strtod_l+0x384>
 8006da0:	499a      	ldr	r1, [pc, #616]	; (800700c <_strtod_l+0x594>)
 8006da2:	aa1a      	add	r2, sp, #104	; 0x68
 8006da4:	a817      	add	r0, sp, #92	; 0x5c
 8006da6:	f002 f8eb 	bl	8008f80 <__hexnan>
 8006daa:	2805      	cmp	r0, #5
 8006dac:	d126      	bne.n	8006dfc <_strtod_l+0x384>
 8006dae:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8006db0:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 8006db4:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8006db8:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8006dbc:	e6a0      	b.n	8006b00 <_strtod_l+0x88>
 8006dbe:	210a      	movs	r1, #10
 8006dc0:	fb01 2e0e 	mla	lr, r1, lr, r2
 8006dc4:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8006dc8:	e7b9      	b.n	8006d3e <_strtod_l+0x2c6>
 8006dca:	2a6e      	cmp	r2, #110	; 0x6e
 8006dcc:	e7db      	b.n	8006d86 <_strtod_l+0x30e>
 8006dce:	4990      	ldr	r1, [pc, #576]	; (8007010 <_strtod_l+0x598>)
 8006dd0:	a817      	add	r0, sp, #92	; 0x5c
 8006dd2:	f002 f8c1 	bl	8008f58 <__match>
 8006dd6:	2800      	cmp	r0, #0
 8006dd8:	f43f aeb0 	beq.w	8006b3c <_strtod_l+0xc4>
 8006ddc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006dde:	498d      	ldr	r1, [pc, #564]	; (8007014 <_strtod_l+0x59c>)
 8006de0:	3b01      	subs	r3, #1
 8006de2:	a817      	add	r0, sp, #92	; 0x5c
 8006de4:	9317      	str	r3, [sp, #92]	; 0x5c
 8006de6:	f002 f8b7 	bl	8008f58 <__match>
 8006dea:	b910      	cbnz	r0, 8006df2 <_strtod_l+0x37a>
 8006dec:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006dee:	3301      	adds	r3, #1
 8006df0:	9317      	str	r3, [sp, #92]	; 0x5c
 8006df2:	f8df b230 	ldr.w	fp, [pc, #560]	; 8007024 <_strtod_l+0x5ac>
 8006df6:	f04f 0a00 	mov.w	sl, #0
 8006dfa:	e681      	b.n	8006b00 <_strtod_l+0x88>
 8006dfc:	4886      	ldr	r0, [pc, #536]	; (8007018 <_strtod_l+0x5a0>)
 8006dfe:	f003 fe13 	bl	800aa28 <nan>
 8006e02:	ec5b ab10 	vmov	sl, fp, d0
 8006e06:	e67b      	b.n	8006b00 <_strtod_l+0x88>
 8006e08:	9b05      	ldr	r3, [sp, #20]
 8006e0a:	9807      	ldr	r0, [sp, #28]
 8006e0c:	1af3      	subs	r3, r6, r3
 8006e0e:	2f00      	cmp	r7, #0
 8006e10:	bf08      	it	eq
 8006e12:	462f      	moveq	r7, r5
 8006e14:	2d10      	cmp	r5, #16
 8006e16:	9306      	str	r3, [sp, #24]
 8006e18:	46a8      	mov	r8, r5
 8006e1a:	bfa8      	it	ge
 8006e1c:	f04f 0810 	movge.w	r8, #16
 8006e20:	f7f9 fb70 	bl	8000504 <__aeabi_ui2d>
 8006e24:	2d09      	cmp	r5, #9
 8006e26:	4682      	mov	sl, r0
 8006e28:	468b      	mov	fp, r1
 8006e2a:	dd13      	ble.n	8006e54 <_strtod_l+0x3dc>
 8006e2c:	4b7b      	ldr	r3, [pc, #492]	; (800701c <_strtod_l+0x5a4>)
 8006e2e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8006e32:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8006e36:	f7f9 fbdf 	bl	80005f8 <__aeabi_dmul>
 8006e3a:	4682      	mov	sl, r0
 8006e3c:	4648      	mov	r0, r9
 8006e3e:	468b      	mov	fp, r1
 8006e40:	f7f9 fb60 	bl	8000504 <__aeabi_ui2d>
 8006e44:	4602      	mov	r2, r0
 8006e46:	460b      	mov	r3, r1
 8006e48:	4650      	mov	r0, sl
 8006e4a:	4659      	mov	r1, fp
 8006e4c:	f7f9 fa1e 	bl	800028c <__adddf3>
 8006e50:	4682      	mov	sl, r0
 8006e52:	468b      	mov	fp, r1
 8006e54:	2d0f      	cmp	r5, #15
 8006e56:	dc38      	bgt.n	8006eca <_strtod_l+0x452>
 8006e58:	9b06      	ldr	r3, [sp, #24]
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	f43f ae50 	beq.w	8006b00 <_strtod_l+0x88>
 8006e60:	dd24      	ble.n	8006eac <_strtod_l+0x434>
 8006e62:	2b16      	cmp	r3, #22
 8006e64:	dc0b      	bgt.n	8006e7e <_strtod_l+0x406>
 8006e66:	496d      	ldr	r1, [pc, #436]	; (800701c <_strtod_l+0x5a4>)
 8006e68:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8006e6c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006e70:	4652      	mov	r2, sl
 8006e72:	465b      	mov	r3, fp
 8006e74:	f7f9 fbc0 	bl	80005f8 <__aeabi_dmul>
 8006e78:	4682      	mov	sl, r0
 8006e7a:	468b      	mov	fp, r1
 8006e7c:	e640      	b.n	8006b00 <_strtod_l+0x88>
 8006e7e:	9a06      	ldr	r2, [sp, #24]
 8006e80:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 8006e84:	4293      	cmp	r3, r2
 8006e86:	db20      	blt.n	8006eca <_strtod_l+0x452>
 8006e88:	4c64      	ldr	r4, [pc, #400]	; (800701c <_strtod_l+0x5a4>)
 8006e8a:	f1c5 050f 	rsb	r5, r5, #15
 8006e8e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8006e92:	4652      	mov	r2, sl
 8006e94:	465b      	mov	r3, fp
 8006e96:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006e9a:	f7f9 fbad 	bl	80005f8 <__aeabi_dmul>
 8006e9e:	9b06      	ldr	r3, [sp, #24]
 8006ea0:	1b5d      	subs	r5, r3, r5
 8006ea2:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8006ea6:	e9d4 2300 	ldrd	r2, r3, [r4]
 8006eaa:	e7e3      	b.n	8006e74 <_strtod_l+0x3fc>
 8006eac:	9b06      	ldr	r3, [sp, #24]
 8006eae:	3316      	adds	r3, #22
 8006eb0:	db0b      	blt.n	8006eca <_strtod_l+0x452>
 8006eb2:	9b05      	ldr	r3, [sp, #20]
 8006eb4:	1b9e      	subs	r6, r3, r6
 8006eb6:	4b59      	ldr	r3, [pc, #356]	; (800701c <_strtod_l+0x5a4>)
 8006eb8:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 8006ebc:	e9d6 2300 	ldrd	r2, r3, [r6]
 8006ec0:	4650      	mov	r0, sl
 8006ec2:	4659      	mov	r1, fp
 8006ec4:	f7f9 fcc2 	bl	800084c <__aeabi_ddiv>
 8006ec8:	e7d6      	b.n	8006e78 <_strtod_l+0x400>
 8006eca:	9b06      	ldr	r3, [sp, #24]
 8006ecc:	eba5 0808 	sub.w	r8, r5, r8
 8006ed0:	4498      	add	r8, r3
 8006ed2:	f1b8 0f00 	cmp.w	r8, #0
 8006ed6:	dd74      	ble.n	8006fc2 <_strtod_l+0x54a>
 8006ed8:	f018 030f 	ands.w	r3, r8, #15
 8006edc:	d00a      	beq.n	8006ef4 <_strtod_l+0x47c>
 8006ede:	494f      	ldr	r1, [pc, #316]	; (800701c <_strtod_l+0x5a4>)
 8006ee0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8006ee4:	4652      	mov	r2, sl
 8006ee6:	465b      	mov	r3, fp
 8006ee8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006eec:	f7f9 fb84 	bl	80005f8 <__aeabi_dmul>
 8006ef0:	4682      	mov	sl, r0
 8006ef2:	468b      	mov	fp, r1
 8006ef4:	f038 080f 	bics.w	r8, r8, #15
 8006ef8:	d04f      	beq.n	8006f9a <_strtod_l+0x522>
 8006efa:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8006efe:	dd22      	ble.n	8006f46 <_strtod_l+0x4ce>
 8006f00:	2500      	movs	r5, #0
 8006f02:	462e      	mov	r6, r5
 8006f04:	9507      	str	r5, [sp, #28]
 8006f06:	9505      	str	r5, [sp, #20]
 8006f08:	2322      	movs	r3, #34	; 0x22
 8006f0a:	f8df b118 	ldr.w	fp, [pc, #280]	; 8007024 <_strtod_l+0x5ac>
 8006f0e:	6023      	str	r3, [r4, #0]
 8006f10:	f04f 0a00 	mov.w	sl, #0
 8006f14:	9b07      	ldr	r3, [sp, #28]
 8006f16:	2b00      	cmp	r3, #0
 8006f18:	f43f adf2 	beq.w	8006b00 <_strtod_l+0x88>
 8006f1c:	9918      	ldr	r1, [sp, #96]	; 0x60
 8006f1e:	4620      	mov	r0, r4
 8006f20:	f002 f99e 	bl	8009260 <_Bfree>
 8006f24:	9905      	ldr	r1, [sp, #20]
 8006f26:	4620      	mov	r0, r4
 8006f28:	f002 f99a 	bl	8009260 <_Bfree>
 8006f2c:	4631      	mov	r1, r6
 8006f2e:	4620      	mov	r0, r4
 8006f30:	f002 f996 	bl	8009260 <_Bfree>
 8006f34:	9907      	ldr	r1, [sp, #28]
 8006f36:	4620      	mov	r0, r4
 8006f38:	f002 f992 	bl	8009260 <_Bfree>
 8006f3c:	4629      	mov	r1, r5
 8006f3e:	4620      	mov	r0, r4
 8006f40:	f002 f98e 	bl	8009260 <_Bfree>
 8006f44:	e5dc      	b.n	8006b00 <_strtod_l+0x88>
 8006f46:	4b36      	ldr	r3, [pc, #216]	; (8007020 <_strtod_l+0x5a8>)
 8006f48:	9304      	str	r3, [sp, #16]
 8006f4a:	2300      	movs	r3, #0
 8006f4c:	ea4f 1828 	mov.w	r8, r8, asr #4
 8006f50:	4650      	mov	r0, sl
 8006f52:	4659      	mov	r1, fp
 8006f54:	4699      	mov	r9, r3
 8006f56:	f1b8 0f01 	cmp.w	r8, #1
 8006f5a:	dc21      	bgt.n	8006fa0 <_strtod_l+0x528>
 8006f5c:	b10b      	cbz	r3, 8006f62 <_strtod_l+0x4ea>
 8006f5e:	4682      	mov	sl, r0
 8006f60:	468b      	mov	fp, r1
 8006f62:	4b2f      	ldr	r3, [pc, #188]	; (8007020 <_strtod_l+0x5a8>)
 8006f64:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8006f68:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 8006f6c:	4652      	mov	r2, sl
 8006f6e:	465b      	mov	r3, fp
 8006f70:	e9d9 0100 	ldrd	r0, r1, [r9]
 8006f74:	f7f9 fb40 	bl	80005f8 <__aeabi_dmul>
 8006f78:	4b2a      	ldr	r3, [pc, #168]	; (8007024 <_strtod_l+0x5ac>)
 8006f7a:	460a      	mov	r2, r1
 8006f7c:	400b      	ands	r3, r1
 8006f7e:	492a      	ldr	r1, [pc, #168]	; (8007028 <_strtod_l+0x5b0>)
 8006f80:	428b      	cmp	r3, r1
 8006f82:	4682      	mov	sl, r0
 8006f84:	d8bc      	bhi.n	8006f00 <_strtod_l+0x488>
 8006f86:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8006f8a:	428b      	cmp	r3, r1
 8006f8c:	bf86      	itte	hi
 8006f8e:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 800702c <_strtod_l+0x5b4>
 8006f92:	f04f 3aff 	movhi.w	sl, #4294967295
 8006f96:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8006f9a:	2300      	movs	r3, #0
 8006f9c:	9304      	str	r3, [sp, #16]
 8006f9e:	e084      	b.n	80070aa <_strtod_l+0x632>
 8006fa0:	f018 0f01 	tst.w	r8, #1
 8006fa4:	d005      	beq.n	8006fb2 <_strtod_l+0x53a>
 8006fa6:	9b04      	ldr	r3, [sp, #16]
 8006fa8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fac:	f7f9 fb24 	bl	80005f8 <__aeabi_dmul>
 8006fb0:	2301      	movs	r3, #1
 8006fb2:	9a04      	ldr	r2, [sp, #16]
 8006fb4:	3208      	adds	r2, #8
 8006fb6:	f109 0901 	add.w	r9, r9, #1
 8006fba:	ea4f 0868 	mov.w	r8, r8, asr #1
 8006fbe:	9204      	str	r2, [sp, #16]
 8006fc0:	e7c9      	b.n	8006f56 <_strtod_l+0x4de>
 8006fc2:	d0ea      	beq.n	8006f9a <_strtod_l+0x522>
 8006fc4:	f1c8 0800 	rsb	r8, r8, #0
 8006fc8:	f018 020f 	ands.w	r2, r8, #15
 8006fcc:	d00a      	beq.n	8006fe4 <_strtod_l+0x56c>
 8006fce:	4b13      	ldr	r3, [pc, #76]	; (800701c <_strtod_l+0x5a4>)
 8006fd0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006fd4:	4650      	mov	r0, sl
 8006fd6:	4659      	mov	r1, fp
 8006fd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fdc:	f7f9 fc36 	bl	800084c <__aeabi_ddiv>
 8006fe0:	4682      	mov	sl, r0
 8006fe2:	468b      	mov	fp, r1
 8006fe4:	ea5f 1828 	movs.w	r8, r8, asr #4
 8006fe8:	d0d7      	beq.n	8006f9a <_strtod_l+0x522>
 8006fea:	f1b8 0f1f 	cmp.w	r8, #31
 8006fee:	dd1f      	ble.n	8007030 <_strtod_l+0x5b8>
 8006ff0:	2500      	movs	r5, #0
 8006ff2:	462e      	mov	r6, r5
 8006ff4:	9507      	str	r5, [sp, #28]
 8006ff6:	9505      	str	r5, [sp, #20]
 8006ff8:	2322      	movs	r3, #34	; 0x22
 8006ffa:	f04f 0a00 	mov.w	sl, #0
 8006ffe:	f04f 0b00 	mov.w	fp, #0
 8007002:	6023      	str	r3, [r4, #0]
 8007004:	e786      	b.n	8006f14 <_strtod_l+0x49c>
 8007006:	bf00      	nop
 8007008:	0800be35 	.word	0x0800be35
 800700c:	0800be74 	.word	0x0800be74
 8007010:	0800be2d 	.word	0x0800be2d
 8007014:	0800bfb4 	.word	0x0800bfb4
 8007018:	0800c2e3 	.word	0x0800c2e3
 800701c:	0800c1a8 	.word	0x0800c1a8
 8007020:	0800c180 	.word	0x0800c180
 8007024:	7ff00000 	.word	0x7ff00000
 8007028:	7ca00000 	.word	0x7ca00000
 800702c:	7fefffff 	.word	0x7fefffff
 8007030:	f018 0310 	ands.w	r3, r8, #16
 8007034:	bf18      	it	ne
 8007036:	236a      	movne	r3, #106	; 0x6a
 8007038:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 80073e8 <_strtod_l+0x970>
 800703c:	9304      	str	r3, [sp, #16]
 800703e:	4650      	mov	r0, sl
 8007040:	4659      	mov	r1, fp
 8007042:	2300      	movs	r3, #0
 8007044:	f018 0f01 	tst.w	r8, #1
 8007048:	d004      	beq.n	8007054 <_strtod_l+0x5dc>
 800704a:	e9d9 2300 	ldrd	r2, r3, [r9]
 800704e:	f7f9 fad3 	bl	80005f8 <__aeabi_dmul>
 8007052:	2301      	movs	r3, #1
 8007054:	ea5f 0868 	movs.w	r8, r8, asr #1
 8007058:	f109 0908 	add.w	r9, r9, #8
 800705c:	d1f2      	bne.n	8007044 <_strtod_l+0x5cc>
 800705e:	b10b      	cbz	r3, 8007064 <_strtod_l+0x5ec>
 8007060:	4682      	mov	sl, r0
 8007062:	468b      	mov	fp, r1
 8007064:	9b04      	ldr	r3, [sp, #16]
 8007066:	b1c3      	cbz	r3, 800709a <_strtod_l+0x622>
 8007068:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800706c:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8007070:	2b00      	cmp	r3, #0
 8007072:	4659      	mov	r1, fp
 8007074:	dd11      	ble.n	800709a <_strtod_l+0x622>
 8007076:	2b1f      	cmp	r3, #31
 8007078:	f340 8124 	ble.w	80072c4 <_strtod_l+0x84c>
 800707c:	2b34      	cmp	r3, #52	; 0x34
 800707e:	bfde      	ittt	le
 8007080:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8007084:	f04f 33ff 	movle.w	r3, #4294967295
 8007088:	fa03 f202 	lslle.w	r2, r3, r2
 800708c:	f04f 0a00 	mov.w	sl, #0
 8007090:	bfcc      	ite	gt
 8007092:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8007096:	ea02 0b01 	andle.w	fp, r2, r1
 800709a:	2200      	movs	r2, #0
 800709c:	2300      	movs	r3, #0
 800709e:	4650      	mov	r0, sl
 80070a0:	4659      	mov	r1, fp
 80070a2:	f7f9 fd11 	bl	8000ac8 <__aeabi_dcmpeq>
 80070a6:	2800      	cmp	r0, #0
 80070a8:	d1a2      	bne.n	8006ff0 <_strtod_l+0x578>
 80070aa:	9b07      	ldr	r3, [sp, #28]
 80070ac:	9300      	str	r3, [sp, #0]
 80070ae:	9908      	ldr	r1, [sp, #32]
 80070b0:	462b      	mov	r3, r5
 80070b2:	463a      	mov	r2, r7
 80070b4:	4620      	mov	r0, r4
 80070b6:	f002 f93b 	bl	8009330 <__s2b>
 80070ba:	9007      	str	r0, [sp, #28]
 80070bc:	2800      	cmp	r0, #0
 80070be:	f43f af1f 	beq.w	8006f00 <_strtod_l+0x488>
 80070c2:	9b05      	ldr	r3, [sp, #20]
 80070c4:	1b9e      	subs	r6, r3, r6
 80070c6:	9b06      	ldr	r3, [sp, #24]
 80070c8:	2b00      	cmp	r3, #0
 80070ca:	bfb4      	ite	lt
 80070cc:	4633      	movlt	r3, r6
 80070ce:	2300      	movge	r3, #0
 80070d0:	930c      	str	r3, [sp, #48]	; 0x30
 80070d2:	9b06      	ldr	r3, [sp, #24]
 80070d4:	2500      	movs	r5, #0
 80070d6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80070da:	9312      	str	r3, [sp, #72]	; 0x48
 80070dc:	462e      	mov	r6, r5
 80070de:	9b07      	ldr	r3, [sp, #28]
 80070e0:	4620      	mov	r0, r4
 80070e2:	6859      	ldr	r1, [r3, #4]
 80070e4:	f002 f87c 	bl	80091e0 <_Balloc>
 80070e8:	9005      	str	r0, [sp, #20]
 80070ea:	2800      	cmp	r0, #0
 80070ec:	f43f af0c 	beq.w	8006f08 <_strtod_l+0x490>
 80070f0:	9b07      	ldr	r3, [sp, #28]
 80070f2:	691a      	ldr	r2, [r3, #16]
 80070f4:	3202      	adds	r2, #2
 80070f6:	f103 010c 	add.w	r1, r3, #12
 80070fa:	0092      	lsls	r2, r2, #2
 80070fc:	300c      	adds	r0, #12
 80070fe:	f002 f861 	bl	80091c4 <memcpy>
 8007102:	ec4b ab10 	vmov	d0, sl, fp
 8007106:	aa1a      	add	r2, sp, #104	; 0x68
 8007108:	a919      	add	r1, sp, #100	; 0x64
 800710a:	4620      	mov	r0, r4
 800710c:	f002 fc56 	bl	80099bc <__d2b>
 8007110:	ec4b ab18 	vmov	d8, sl, fp
 8007114:	9018      	str	r0, [sp, #96]	; 0x60
 8007116:	2800      	cmp	r0, #0
 8007118:	f43f aef6 	beq.w	8006f08 <_strtod_l+0x490>
 800711c:	2101      	movs	r1, #1
 800711e:	4620      	mov	r0, r4
 8007120:	f002 f9a0 	bl	8009464 <__i2b>
 8007124:	4606      	mov	r6, r0
 8007126:	2800      	cmp	r0, #0
 8007128:	f43f aeee 	beq.w	8006f08 <_strtod_l+0x490>
 800712c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800712e:	9904      	ldr	r1, [sp, #16]
 8007130:	2b00      	cmp	r3, #0
 8007132:	bfab      	itete	ge
 8007134:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 8007136:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 8007138:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 800713a:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 800713e:	bfac      	ite	ge
 8007140:	eb03 0902 	addge.w	r9, r3, r2
 8007144:	1ad7      	sublt	r7, r2, r3
 8007146:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8007148:	eba3 0801 	sub.w	r8, r3, r1
 800714c:	4490      	add	r8, r2
 800714e:	4ba1      	ldr	r3, [pc, #644]	; (80073d4 <_strtod_l+0x95c>)
 8007150:	f108 38ff 	add.w	r8, r8, #4294967295
 8007154:	4598      	cmp	r8, r3
 8007156:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800715a:	f280 80c7 	bge.w	80072ec <_strtod_l+0x874>
 800715e:	eba3 0308 	sub.w	r3, r3, r8
 8007162:	2b1f      	cmp	r3, #31
 8007164:	eba2 0203 	sub.w	r2, r2, r3
 8007168:	f04f 0101 	mov.w	r1, #1
 800716c:	f300 80b1 	bgt.w	80072d2 <_strtod_l+0x85a>
 8007170:	fa01 f303 	lsl.w	r3, r1, r3
 8007174:	930d      	str	r3, [sp, #52]	; 0x34
 8007176:	2300      	movs	r3, #0
 8007178:	9308      	str	r3, [sp, #32]
 800717a:	eb09 0802 	add.w	r8, r9, r2
 800717e:	9b04      	ldr	r3, [sp, #16]
 8007180:	45c1      	cmp	r9, r8
 8007182:	4417      	add	r7, r2
 8007184:	441f      	add	r7, r3
 8007186:	464b      	mov	r3, r9
 8007188:	bfa8      	it	ge
 800718a:	4643      	movge	r3, r8
 800718c:	42bb      	cmp	r3, r7
 800718e:	bfa8      	it	ge
 8007190:	463b      	movge	r3, r7
 8007192:	2b00      	cmp	r3, #0
 8007194:	bfc2      	ittt	gt
 8007196:	eba8 0803 	subgt.w	r8, r8, r3
 800719a:	1aff      	subgt	r7, r7, r3
 800719c:	eba9 0903 	subgt.w	r9, r9, r3
 80071a0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80071a2:	2b00      	cmp	r3, #0
 80071a4:	dd17      	ble.n	80071d6 <_strtod_l+0x75e>
 80071a6:	4631      	mov	r1, r6
 80071a8:	461a      	mov	r2, r3
 80071aa:	4620      	mov	r0, r4
 80071ac:	f002 fa1a 	bl	80095e4 <__pow5mult>
 80071b0:	4606      	mov	r6, r0
 80071b2:	2800      	cmp	r0, #0
 80071b4:	f43f aea8 	beq.w	8006f08 <_strtod_l+0x490>
 80071b8:	4601      	mov	r1, r0
 80071ba:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80071bc:	4620      	mov	r0, r4
 80071be:	f002 f967 	bl	8009490 <__multiply>
 80071c2:	900b      	str	r0, [sp, #44]	; 0x2c
 80071c4:	2800      	cmp	r0, #0
 80071c6:	f43f ae9f 	beq.w	8006f08 <_strtod_l+0x490>
 80071ca:	9918      	ldr	r1, [sp, #96]	; 0x60
 80071cc:	4620      	mov	r0, r4
 80071ce:	f002 f847 	bl	8009260 <_Bfree>
 80071d2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80071d4:	9318      	str	r3, [sp, #96]	; 0x60
 80071d6:	f1b8 0f00 	cmp.w	r8, #0
 80071da:	f300 808c 	bgt.w	80072f6 <_strtod_l+0x87e>
 80071de:	9b06      	ldr	r3, [sp, #24]
 80071e0:	2b00      	cmp	r3, #0
 80071e2:	dd08      	ble.n	80071f6 <_strtod_l+0x77e>
 80071e4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80071e6:	9905      	ldr	r1, [sp, #20]
 80071e8:	4620      	mov	r0, r4
 80071ea:	f002 f9fb 	bl	80095e4 <__pow5mult>
 80071ee:	9005      	str	r0, [sp, #20]
 80071f0:	2800      	cmp	r0, #0
 80071f2:	f43f ae89 	beq.w	8006f08 <_strtod_l+0x490>
 80071f6:	2f00      	cmp	r7, #0
 80071f8:	dd08      	ble.n	800720c <_strtod_l+0x794>
 80071fa:	9905      	ldr	r1, [sp, #20]
 80071fc:	463a      	mov	r2, r7
 80071fe:	4620      	mov	r0, r4
 8007200:	f002 fa4a 	bl	8009698 <__lshift>
 8007204:	9005      	str	r0, [sp, #20]
 8007206:	2800      	cmp	r0, #0
 8007208:	f43f ae7e 	beq.w	8006f08 <_strtod_l+0x490>
 800720c:	f1b9 0f00 	cmp.w	r9, #0
 8007210:	dd08      	ble.n	8007224 <_strtod_l+0x7ac>
 8007212:	4631      	mov	r1, r6
 8007214:	464a      	mov	r2, r9
 8007216:	4620      	mov	r0, r4
 8007218:	f002 fa3e 	bl	8009698 <__lshift>
 800721c:	4606      	mov	r6, r0
 800721e:	2800      	cmp	r0, #0
 8007220:	f43f ae72 	beq.w	8006f08 <_strtod_l+0x490>
 8007224:	9a05      	ldr	r2, [sp, #20]
 8007226:	9918      	ldr	r1, [sp, #96]	; 0x60
 8007228:	4620      	mov	r0, r4
 800722a:	f002 fac1 	bl	80097b0 <__mdiff>
 800722e:	4605      	mov	r5, r0
 8007230:	2800      	cmp	r0, #0
 8007232:	f43f ae69 	beq.w	8006f08 <_strtod_l+0x490>
 8007236:	68c3      	ldr	r3, [r0, #12]
 8007238:	930b      	str	r3, [sp, #44]	; 0x2c
 800723a:	2300      	movs	r3, #0
 800723c:	60c3      	str	r3, [r0, #12]
 800723e:	4631      	mov	r1, r6
 8007240:	f002 fa9a 	bl	8009778 <__mcmp>
 8007244:	2800      	cmp	r0, #0
 8007246:	da60      	bge.n	800730a <_strtod_l+0x892>
 8007248:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800724a:	ea53 030a 	orrs.w	r3, r3, sl
 800724e:	f040 8082 	bne.w	8007356 <_strtod_l+0x8de>
 8007252:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007256:	2b00      	cmp	r3, #0
 8007258:	d17d      	bne.n	8007356 <_strtod_l+0x8de>
 800725a:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800725e:	0d1b      	lsrs	r3, r3, #20
 8007260:	051b      	lsls	r3, r3, #20
 8007262:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8007266:	d976      	bls.n	8007356 <_strtod_l+0x8de>
 8007268:	696b      	ldr	r3, [r5, #20]
 800726a:	b913      	cbnz	r3, 8007272 <_strtod_l+0x7fa>
 800726c:	692b      	ldr	r3, [r5, #16]
 800726e:	2b01      	cmp	r3, #1
 8007270:	dd71      	ble.n	8007356 <_strtod_l+0x8de>
 8007272:	4629      	mov	r1, r5
 8007274:	2201      	movs	r2, #1
 8007276:	4620      	mov	r0, r4
 8007278:	f002 fa0e 	bl	8009698 <__lshift>
 800727c:	4631      	mov	r1, r6
 800727e:	4605      	mov	r5, r0
 8007280:	f002 fa7a 	bl	8009778 <__mcmp>
 8007284:	2800      	cmp	r0, #0
 8007286:	dd66      	ble.n	8007356 <_strtod_l+0x8de>
 8007288:	9904      	ldr	r1, [sp, #16]
 800728a:	4a53      	ldr	r2, [pc, #332]	; (80073d8 <_strtod_l+0x960>)
 800728c:	465b      	mov	r3, fp
 800728e:	2900      	cmp	r1, #0
 8007290:	f000 8081 	beq.w	8007396 <_strtod_l+0x91e>
 8007294:	ea02 010b 	and.w	r1, r2, fp
 8007298:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800729c:	dc7b      	bgt.n	8007396 <_strtod_l+0x91e>
 800729e:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 80072a2:	f77f aea9 	ble.w	8006ff8 <_strtod_l+0x580>
 80072a6:	4b4d      	ldr	r3, [pc, #308]	; (80073dc <_strtod_l+0x964>)
 80072a8:	4650      	mov	r0, sl
 80072aa:	4659      	mov	r1, fp
 80072ac:	2200      	movs	r2, #0
 80072ae:	f7f9 f9a3 	bl	80005f8 <__aeabi_dmul>
 80072b2:	460b      	mov	r3, r1
 80072b4:	4303      	orrs	r3, r0
 80072b6:	bf08      	it	eq
 80072b8:	2322      	moveq	r3, #34	; 0x22
 80072ba:	4682      	mov	sl, r0
 80072bc:	468b      	mov	fp, r1
 80072be:	bf08      	it	eq
 80072c0:	6023      	streq	r3, [r4, #0]
 80072c2:	e62b      	b.n	8006f1c <_strtod_l+0x4a4>
 80072c4:	f04f 32ff 	mov.w	r2, #4294967295
 80072c8:	fa02 f303 	lsl.w	r3, r2, r3
 80072cc:	ea03 0a0a 	and.w	sl, r3, sl
 80072d0:	e6e3      	b.n	800709a <_strtod_l+0x622>
 80072d2:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 80072d6:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 80072da:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 80072de:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 80072e2:	fa01 f308 	lsl.w	r3, r1, r8
 80072e6:	9308      	str	r3, [sp, #32]
 80072e8:	910d      	str	r1, [sp, #52]	; 0x34
 80072ea:	e746      	b.n	800717a <_strtod_l+0x702>
 80072ec:	2300      	movs	r3, #0
 80072ee:	9308      	str	r3, [sp, #32]
 80072f0:	2301      	movs	r3, #1
 80072f2:	930d      	str	r3, [sp, #52]	; 0x34
 80072f4:	e741      	b.n	800717a <_strtod_l+0x702>
 80072f6:	9918      	ldr	r1, [sp, #96]	; 0x60
 80072f8:	4642      	mov	r2, r8
 80072fa:	4620      	mov	r0, r4
 80072fc:	f002 f9cc 	bl	8009698 <__lshift>
 8007300:	9018      	str	r0, [sp, #96]	; 0x60
 8007302:	2800      	cmp	r0, #0
 8007304:	f47f af6b 	bne.w	80071de <_strtod_l+0x766>
 8007308:	e5fe      	b.n	8006f08 <_strtod_l+0x490>
 800730a:	465f      	mov	r7, fp
 800730c:	d16e      	bne.n	80073ec <_strtod_l+0x974>
 800730e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007310:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007314:	b342      	cbz	r2, 8007368 <_strtod_l+0x8f0>
 8007316:	4a32      	ldr	r2, [pc, #200]	; (80073e0 <_strtod_l+0x968>)
 8007318:	4293      	cmp	r3, r2
 800731a:	d128      	bne.n	800736e <_strtod_l+0x8f6>
 800731c:	9b04      	ldr	r3, [sp, #16]
 800731e:	4651      	mov	r1, sl
 8007320:	b1eb      	cbz	r3, 800735e <_strtod_l+0x8e6>
 8007322:	4b2d      	ldr	r3, [pc, #180]	; (80073d8 <_strtod_l+0x960>)
 8007324:	403b      	ands	r3, r7
 8007326:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800732a:	f04f 32ff 	mov.w	r2, #4294967295
 800732e:	d819      	bhi.n	8007364 <_strtod_l+0x8ec>
 8007330:	0d1b      	lsrs	r3, r3, #20
 8007332:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8007336:	fa02 f303 	lsl.w	r3, r2, r3
 800733a:	4299      	cmp	r1, r3
 800733c:	d117      	bne.n	800736e <_strtod_l+0x8f6>
 800733e:	4b29      	ldr	r3, [pc, #164]	; (80073e4 <_strtod_l+0x96c>)
 8007340:	429f      	cmp	r7, r3
 8007342:	d102      	bne.n	800734a <_strtod_l+0x8d2>
 8007344:	3101      	adds	r1, #1
 8007346:	f43f addf 	beq.w	8006f08 <_strtod_l+0x490>
 800734a:	4b23      	ldr	r3, [pc, #140]	; (80073d8 <_strtod_l+0x960>)
 800734c:	403b      	ands	r3, r7
 800734e:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8007352:	f04f 0a00 	mov.w	sl, #0
 8007356:	9b04      	ldr	r3, [sp, #16]
 8007358:	2b00      	cmp	r3, #0
 800735a:	d1a4      	bne.n	80072a6 <_strtod_l+0x82e>
 800735c:	e5de      	b.n	8006f1c <_strtod_l+0x4a4>
 800735e:	f04f 33ff 	mov.w	r3, #4294967295
 8007362:	e7ea      	b.n	800733a <_strtod_l+0x8c2>
 8007364:	4613      	mov	r3, r2
 8007366:	e7e8      	b.n	800733a <_strtod_l+0x8c2>
 8007368:	ea53 030a 	orrs.w	r3, r3, sl
 800736c:	d08c      	beq.n	8007288 <_strtod_l+0x810>
 800736e:	9b08      	ldr	r3, [sp, #32]
 8007370:	b1db      	cbz	r3, 80073aa <_strtod_l+0x932>
 8007372:	423b      	tst	r3, r7
 8007374:	d0ef      	beq.n	8007356 <_strtod_l+0x8de>
 8007376:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007378:	9a04      	ldr	r2, [sp, #16]
 800737a:	4650      	mov	r0, sl
 800737c:	4659      	mov	r1, fp
 800737e:	b1c3      	cbz	r3, 80073b2 <_strtod_l+0x93a>
 8007380:	f7ff fb5e 	bl	8006a40 <sulp>
 8007384:	4602      	mov	r2, r0
 8007386:	460b      	mov	r3, r1
 8007388:	ec51 0b18 	vmov	r0, r1, d8
 800738c:	f7f8 ff7e 	bl	800028c <__adddf3>
 8007390:	4682      	mov	sl, r0
 8007392:	468b      	mov	fp, r1
 8007394:	e7df      	b.n	8007356 <_strtod_l+0x8de>
 8007396:	4013      	ands	r3, r2
 8007398:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800739c:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 80073a0:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 80073a4:	f04f 3aff 	mov.w	sl, #4294967295
 80073a8:	e7d5      	b.n	8007356 <_strtod_l+0x8de>
 80073aa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80073ac:	ea13 0f0a 	tst.w	r3, sl
 80073b0:	e7e0      	b.n	8007374 <_strtod_l+0x8fc>
 80073b2:	f7ff fb45 	bl	8006a40 <sulp>
 80073b6:	4602      	mov	r2, r0
 80073b8:	460b      	mov	r3, r1
 80073ba:	ec51 0b18 	vmov	r0, r1, d8
 80073be:	f7f8 ff63 	bl	8000288 <__aeabi_dsub>
 80073c2:	2200      	movs	r2, #0
 80073c4:	2300      	movs	r3, #0
 80073c6:	4682      	mov	sl, r0
 80073c8:	468b      	mov	fp, r1
 80073ca:	f7f9 fb7d 	bl	8000ac8 <__aeabi_dcmpeq>
 80073ce:	2800      	cmp	r0, #0
 80073d0:	d0c1      	beq.n	8007356 <_strtod_l+0x8de>
 80073d2:	e611      	b.n	8006ff8 <_strtod_l+0x580>
 80073d4:	fffffc02 	.word	0xfffffc02
 80073d8:	7ff00000 	.word	0x7ff00000
 80073dc:	39500000 	.word	0x39500000
 80073e0:	000fffff 	.word	0x000fffff
 80073e4:	7fefffff 	.word	0x7fefffff
 80073e8:	0800be88 	.word	0x0800be88
 80073ec:	4631      	mov	r1, r6
 80073ee:	4628      	mov	r0, r5
 80073f0:	f002 fb40 	bl	8009a74 <__ratio>
 80073f4:	ec59 8b10 	vmov	r8, r9, d0
 80073f8:	ee10 0a10 	vmov	r0, s0
 80073fc:	2200      	movs	r2, #0
 80073fe:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8007402:	4649      	mov	r1, r9
 8007404:	f7f9 fb74 	bl	8000af0 <__aeabi_dcmple>
 8007408:	2800      	cmp	r0, #0
 800740a:	d07a      	beq.n	8007502 <_strtod_l+0xa8a>
 800740c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800740e:	2b00      	cmp	r3, #0
 8007410:	d04a      	beq.n	80074a8 <_strtod_l+0xa30>
 8007412:	4b95      	ldr	r3, [pc, #596]	; (8007668 <_strtod_l+0xbf0>)
 8007414:	2200      	movs	r2, #0
 8007416:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800741a:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8007668 <_strtod_l+0xbf0>
 800741e:	f04f 0800 	mov.w	r8, #0
 8007422:	4b92      	ldr	r3, [pc, #584]	; (800766c <_strtod_l+0xbf4>)
 8007424:	403b      	ands	r3, r7
 8007426:	930d      	str	r3, [sp, #52]	; 0x34
 8007428:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800742a:	4b91      	ldr	r3, [pc, #580]	; (8007670 <_strtod_l+0xbf8>)
 800742c:	429a      	cmp	r2, r3
 800742e:	f040 80b0 	bne.w	8007592 <_strtod_l+0xb1a>
 8007432:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8007436:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 800743a:	ec4b ab10 	vmov	d0, sl, fp
 800743e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8007442:	f002 fa3f 	bl	80098c4 <__ulp>
 8007446:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800744a:	ec53 2b10 	vmov	r2, r3, d0
 800744e:	f7f9 f8d3 	bl	80005f8 <__aeabi_dmul>
 8007452:	4652      	mov	r2, sl
 8007454:	465b      	mov	r3, fp
 8007456:	f7f8 ff19 	bl	800028c <__adddf3>
 800745a:	460b      	mov	r3, r1
 800745c:	4983      	ldr	r1, [pc, #524]	; (800766c <_strtod_l+0xbf4>)
 800745e:	4a85      	ldr	r2, [pc, #532]	; (8007674 <_strtod_l+0xbfc>)
 8007460:	4019      	ands	r1, r3
 8007462:	4291      	cmp	r1, r2
 8007464:	4682      	mov	sl, r0
 8007466:	d960      	bls.n	800752a <_strtod_l+0xab2>
 8007468:	ee18 3a90 	vmov	r3, s17
 800746c:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8007470:	4293      	cmp	r3, r2
 8007472:	d104      	bne.n	800747e <_strtod_l+0xa06>
 8007474:	ee18 3a10 	vmov	r3, s16
 8007478:	3301      	adds	r3, #1
 800747a:	f43f ad45 	beq.w	8006f08 <_strtod_l+0x490>
 800747e:	f8df b200 	ldr.w	fp, [pc, #512]	; 8007680 <_strtod_l+0xc08>
 8007482:	f04f 3aff 	mov.w	sl, #4294967295
 8007486:	9918      	ldr	r1, [sp, #96]	; 0x60
 8007488:	4620      	mov	r0, r4
 800748a:	f001 fee9 	bl	8009260 <_Bfree>
 800748e:	9905      	ldr	r1, [sp, #20]
 8007490:	4620      	mov	r0, r4
 8007492:	f001 fee5 	bl	8009260 <_Bfree>
 8007496:	4631      	mov	r1, r6
 8007498:	4620      	mov	r0, r4
 800749a:	f001 fee1 	bl	8009260 <_Bfree>
 800749e:	4629      	mov	r1, r5
 80074a0:	4620      	mov	r0, r4
 80074a2:	f001 fedd 	bl	8009260 <_Bfree>
 80074a6:	e61a      	b.n	80070de <_strtod_l+0x666>
 80074a8:	f1ba 0f00 	cmp.w	sl, #0
 80074ac:	d11b      	bne.n	80074e6 <_strtod_l+0xa6e>
 80074ae:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80074b2:	b9f3      	cbnz	r3, 80074f2 <_strtod_l+0xa7a>
 80074b4:	4b6c      	ldr	r3, [pc, #432]	; (8007668 <_strtod_l+0xbf0>)
 80074b6:	2200      	movs	r2, #0
 80074b8:	4640      	mov	r0, r8
 80074ba:	4649      	mov	r1, r9
 80074bc:	f7f9 fb0e 	bl	8000adc <__aeabi_dcmplt>
 80074c0:	b9d0      	cbnz	r0, 80074f8 <_strtod_l+0xa80>
 80074c2:	4640      	mov	r0, r8
 80074c4:	4649      	mov	r1, r9
 80074c6:	4b6c      	ldr	r3, [pc, #432]	; (8007678 <_strtod_l+0xc00>)
 80074c8:	2200      	movs	r2, #0
 80074ca:	f7f9 f895 	bl	80005f8 <__aeabi_dmul>
 80074ce:	4680      	mov	r8, r0
 80074d0:	4689      	mov	r9, r1
 80074d2:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80074d6:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 80074da:	9315      	str	r3, [sp, #84]	; 0x54
 80074dc:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 80074e0:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80074e4:	e79d      	b.n	8007422 <_strtod_l+0x9aa>
 80074e6:	f1ba 0f01 	cmp.w	sl, #1
 80074ea:	d102      	bne.n	80074f2 <_strtod_l+0xa7a>
 80074ec:	2f00      	cmp	r7, #0
 80074ee:	f43f ad83 	beq.w	8006ff8 <_strtod_l+0x580>
 80074f2:	4b62      	ldr	r3, [pc, #392]	; (800767c <_strtod_l+0xc04>)
 80074f4:	2200      	movs	r2, #0
 80074f6:	e78e      	b.n	8007416 <_strtod_l+0x99e>
 80074f8:	f8df 917c 	ldr.w	r9, [pc, #380]	; 8007678 <_strtod_l+0xc00>
 80074fc:	f04f 0800 	mov.w	r8, #0
 8007500:	e7e7      	b.n	80074d2 <_strtod_l+0xa5a>
 8007502:	4b5d      	ldr	r3, [pc, #372]	; (8007678 <_strtod_l+0xc00>)
 8007504:	4640      	mov	r0, r8
 8007506:	4649      	mov	r1, r9
 8007508:	2200      	movs	r2, #0
 800750a:	f7f9 f875 	bl	80005f8 <__aeabi_dmul>
 800750e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007510:	4680      	mov	r8, r0
 8007512:	4689      	mov	r9, r1
 8007514:	b933      	cbnz	r3, 8007524 <_strtod_l+0xaac>
 8007516:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800751a:	900e      	str	r0, [sp, #56]	; 0x38
 800751c:	930f      	str	r3, [sp, #60]	; 0x3c
 800751e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8007522:	e7dd      	b.n	80074e0 <_strtod_l+0xa68>
 8007524:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 8007528:	e7f9      	b.n	800751e <_strtod_l+0xaa6>
 800752a:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800752e:	9b04      	ldr	r3, [sp, #16]
 8007530:	2b00      	cmp	r3, #0
 8007532:	d1a8      	bne.n	8007486 <_strtod_l+0xa0e>
 8007534:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8007538:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800753a:	0d1b      	lsrs	r3, r3, #20
 800753c:	051b      	lsls	r3, r3, #20
 800753e:	429a      	cmp	r2, r3
 8007540:	d1a1      	bne.n	8007486 <_strtod_l+0xa0e>
 8007542:	4640      	mov	r0, r8
 8007544:	4649      	mov	r1, r9
 8007546:	f7f9 fbb7 	bl	8000cb8 <__aeabi_d2lz>
 800754a:	f7f9 f827 	bl	800059c <__aeabi_l2d>
 800754e:	4602      	mov	r2, r0
 8007550:	460b      	mov	r3, r1
 8007552:	4640      	mov	r0, r8
 8007554:	4649      	mov	r1, r9
 8007556:	f7f8 fe97 	bl	8000288 <__aeabi_dsub>
 800755a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800755c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007560:	ea43 030a 	orr.w	r3, r3, sl
 8007564:	4313      	orrs	r3, r2
 8007566:	4680      	mov	r8, r0
 8007568:	4689      	mov	r9, r1
 800756a:	d055      	beq.n	8007618 <_strtod_l+0xba0>
 800756c:	a336      	add	r3, pc, #216	; (adr r3, 8007648 <_strtod_l+0xbd0>)
 800756e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007572:	f7f9 fab3 	bl	8000adc <__aeabi_dcmplt>
 8007576:	2800      	cmp	r0, #0
 8007578:	f47f acd0 	bne.w	8006f1c <_strtod_l+0x4a4>
 800757c:	a334      	add	r3, pc, #208	; (adr r3, 8007650 <_strtod_l+0xbd8>)
 800757e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007582:	4640      	mov	r0, r8
 8007584:	4649      	mov	r1, r9
 8007586:	f7f9 fac7 	bl	8000b18 <__aeabi_dcmpgt>
 800758a:	2800      	cmp	r0, #0
 800758c:	f43f af7b 	beq.w	8007486 <_strtod_l+0xa0e>
 8007590:	e4c4      	b.n	8006f1c <_strtod_l+0x4a4>
 8007592:	9b04      	ldr	r3, [sp, #16]
 8007594:	b333      	cbz	r3, 80075e4 <_strtod_l+0xb6c>
 8007596:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007598:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800759c:	d822      	bhi.n	80075e4 <_strtod_l+0xb6c>
 800759e:	a32e      	add	r3, pc, #184	; (adr r3, 8007658 <_strtod_l+0xbe0>)
 80075a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075a4:	4640      	mov	r0, r8
 80075a6:	4649      	mov	r1, r9
 80075a8:	f7f9 faa2 	bl	8000af0 <__aeabi_dcmple>
 80075ac:	b1a0      	cbz	r0, 80075d8 <_strtod_l+0xb60>
 80075ae:	4649      	mov	r1, r9
 80075b0:	4640      	mov	r0, r8
 80075b2:	f7f9 faf9 	bl	8000ba8 <__aeabi_d2uiz>
 80075b6:	2801      	cmp	r0, #1
 80075b8:	bf38      	it	cc
 80075ba:	2001      	movcc	r0, #1
 80075bc:	f7f8 ffa2 	bl	8000504 <__aeabi_ui2d>
 80075c0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80075c2:	4680      	mov	r8, r0
 80075c4:	4689      	mov	r9, r1
 80075c6:	bb23      	cbnz	r3, 8007612 <_strtod_l+0xb9a>
 80075c8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80075cc:	9010      	str	r0, [sp, #64]	; 0x40
 80075ce:	9311      	str	r3, [sp, #68]	; 0x44
 80075d0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80075d4:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80075d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80075da:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80075dc:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 80075e0:	1a9b      	subs	r3, r3, r2
 80075e2:	9309      	str	r3, [sp, #36]	; 0x24
 80075e4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80075e8:	eeb0 0a48 	vmov.f32	s0, s16
 80075ec:	eef0 0a68 	vmov.f32	s1, s17
 80075f0:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80075f4:	f002 f966 	bl	80098c4 <__ulp>
 80075f8:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80075fc:	ec53 2b10 	vmov	r2, r3, d0
 8007600:	f7f8 fffa 	bl	80005f8 <__aeabi_dmul>
 8007604:	ec53 2b18 	vmov	r2, r3, d8
 8007608:	f7f8 fe40 	bl	800028c <__adddf3>
 800760c:	4682      	mov	sl, r0
 800760e:	468b      	mov	fp, r1
 8007610:	e78d      	b.n	800752e <_strtod_l+0xab6>
 8007612:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 8007616:	e7db      	b.n	80075d0 <_strtod_l+0xb58>
 8007618:	a311      	add	r3, pc, #68	; (adr r3, 8007660 <_strtod_l+0xbe8>)
 800761a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800761e:	f7f9 fa5d 	bl	8000adc <__aeabi_dcmplt>
 8007622:	e7b2      	b.n	800758a <_strtod_l+0xb12>
 8007624:	2300      	movs	r3, #0
 8007626:	930a      	str	r3, [sp, #40]	; 0x28
 8007628:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800762a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800762c:	6013      	str	r3, [r2, #0]
 800762e:	f7ff ba6b 	b.w	8006b08 <_strtod_l+0x90>
 8007632:	2a65      	cmp	r2, #101	; 0x65
 8007634:	f43f ab5f 	beq.w	8006cf6 <_strtod_l+0x27e>
 8007638:	2a45      	cmp	r2, #69	; 0x45
 800763a:	f43f ab5c 	beq.w	8006cf6 <_strtod_l+0x27e>
 800763e:	2301      	movs	r3, #1
 8007640:	f7ff bb94 	b.w	8006d6c <_strtod_l+0x2f4>
 8007644:	f3af 8000 	nop.w
 8007648:	94a03595 	.word	0x94a03595
 800764c:	3fdfffff 	.word	0x3fdfffff
 8007650:	35afe535 	.word	0x35afe535
 8007654:	3fe00000 	.word	0x3fe00000
 8007658:	ffc00000 	.word	0xffc00000
 800765c:	41dfffff 	.word	0x41dfffff
 8007660:	94a03595 	.word	0x94a03595
 8007664:	3fcfffff 	.word	0x3fcfffff
 8007668:	3ff00000 	.word	0x3ff00000
 800766c:	7ff00000 	.word	0x7ff00000
 8007670:	7fe00000 	.word	0x7fe00000
 8007674:	7c9fffff 	.word	0x7c9fffff
 8007678:	3fe00000 	.word	0x3fe00000
 800767c:	bff00000 	.word	0xbff00000
 8007680:	7fefffff 	.word	0x7fefffff

08007684 <_strtod_r>:
 8007684:	4b01      	ldr	r3, [pc, #4]	; (800768c <_strtod_r+0x8>)
 8007686:	f7ff b9f7 	b.w	8006a78 <_strtod_l>
 800768a:	bf00      	nop
 800768c:	20000074 	.word	0x20000074

08007690 <_strtol_l.constprop.0>:
 8007690:	2b01      	cmp	r3, #1
 8007692:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007696:	d001      	beq.n	800769c <_strtol_l.constprop.0+0xc>
 8007698:	2b24      	cmp	r3, #36	; 0x24
 800769a:	d906      	bls.n	80076aa <_strtol_l.constprop.0+0x1a>
 800769c:	f7fe fa24 	bl	8005ae8 <__errno>
 80076a0:	2316      	movs	r3, #22
 80076a2:	6003      	str	r3, [r0, #0]
 80076a4:	2000      	movs	r0, #0
 80076a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80076aa:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8007790 <_strtol_l.constprop.0+0x100>
 80076ae:	460d      	mov	r5, r1
 80076b0:	462e      	mov	r6, r5
 80076b2:	f815 4b01 	ldrb.w	r4, [r5], #1
 80076b6:	f814 700c 	ldrb.w	r7, [r4, ip]
 80076ba:	f017 0708 	ands.w	r7, r7, #8
 80076be:	d1f7      	bne.n	80076b0 <_strtol_l.constprop.0+0x20>
 80076c0:	2c2d      	cmp	r4, #45	; 0x2d
 80076c2:	d132      	bne.n	800772a <_strtol_l.constprop.0+0x9a>
 80076c4:	782c      	ldrb	r4, [r5, #0]
 80076c6:	2701      	movs	r7, #1
 80076c8:	1cb5      	adds	r5, r6, #2
 80076ca:	2b00      	cmp	r3, #0
 80076cc:	d05b      	beq.n	8007786 <_strtol_l.constprop.0+0xf6>
 80076ce:	2b10      	cmp	r3, #16
 80076d0:	d109      	bne.n	80076e6 <_strtol_l.constprop.0+0x56>
 80076d2:	2c30      	cmp	r4, #48	; 0x30
 80076d4:	d107      	bne.n	80076e6 <_strtol_l.constprop.0+0x56>
 80076d6:	782c      	ldrb	r4, [r5, #0]
 80076d8:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 80076dc:	2c58      	cmp	r4, #88	; 0x58
 80076de:	d14d      	bne.n	800777c <_strtol_l.constprop.0+0xec>
 80076e0:	786c      	ldrb	r4, [r5, #1]
 80076e2:	2310      	movs	r3, #16
 80076e4:	3502      	adds	r5, #2
 80076e6:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 80076ea:	f108 38ff 	add.w	r8, r8, #4294967295
 80076ee:	f04f 0c00 	mov.w	ip, #0
 80076f2:	fbb8 f9f3 	udiv	r9, r8, r3
 80076f6:	4666      	mov	r6, ip
 80076f8:	fb03 8a19 	mls	sl, r3, r9, r8
 80076fc:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8007700:	f1be 0f09 	cmp.w	lr, #9
 8007704:	d816      	bhi.n	8007734 <_strtol_l.constprop.0+0xa4>
 8007706:	4674      	mov	r4, lr
 8007708:	42a3      	cmp	r3, r4
 800770a:	dd24      	ble.n	8007756 <_strtol_l.constprop.0+0xc6>
 800770c:	f1bc 0f00 	cmp.w	ip, #0
 8007710:	db1e      	blt.n	8007750 <_strtol_l.constprop.0+0xc0>
 8007712:	45b1      	cmp	r9, r6
 8007714:	d31c      	bcc.n	8007750 <_strtol_l.constprop.0+0xc0>
 8007716:	d101      	bne.n	800771c <_strtol_l.constprop.0+0x8c>
 8007718:	45a2      	cmp	sl, r4
 800771a:	db19      	blt.n	8007750 <_strtol_l.constprop.0+0xc0>
 800771c:	fb06 4603 	mla	r6, r6, r3, r4
 8007720:	f04f 0c01 	mov.w	ip, #1
 8007724:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007728:	e7e8      	b.n	80076fc <_strtol_l.constprop.0+0x6c>
 800772a:	2c2b      	cmp	r4, #43	; 0x2b
 800772c:	bf04      	itt	eq
 800772e:	782c      	ldrbeq	r4, [r5, #0]
 8007730:	1cb5      	addeq	r5, r6, #2
 8007732:	e7ca      	b.n	80076ca <_strtol_l.constprop.0+0x3a>
 8007734:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8007738:	f1be 0f19 	cmp.w	lr, #25
 800773c:	d801      	bhi.n	8007742 <_strtol_l.constprop.0+0xb2>
 800773e:	3c37      	subs	r4, #55	; 0x37
 8007740:	e7e2      	b.n	8007708 <_strtol_l.constprop.0+0x78>
 8007742:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 8007746:	f1be 0f19 	cmp.w	lr, #25
 800774a:	d804      	bhi.n	8007756 <_strtol_l.constprop.0+0xc6>
 800774c:	3c57      	subs	r4, #87	; 0x57
 800774e:	e7db      	b.n	8007708 <_strtol_l.constprop.0+0x78>
 8007750:	f04f 3cff 	mov.w	ip, #4294967295
 8007754:	e7e6      	b.n	8007724 <_strtol_l.constprop.0+0x94>
 8007756:	f1bc 0f00 	cmp.w	ip, #0
 800775a:	da05      	bge.n	8007768 <_strtol_l.constprop.0+0xd8>
 800775c:	2322      	movs	r3, #34	; 0x22
 800775e:	6003      	str	r3, [r0, #0]
 8007760:	4646      	mov	r6, r8
 8007762:	b942      	cbnz	r2, 8007776 <_strtol_l.constprop.0+0xe6>
 8007764:	4630      	mov	r0, r6
 8007766:	e79e      	b.n	80076a6 <_strtol_l.constprop.0+0x16>
 8007768:	b107      	cbz	r7, 800776c <_strtol_l.constprop.0+0xdc>
 800776a:	4276      	negs	r6, r6
 800776c:	2a00      	cmp	r2, #0
 800776e:	d0f9      	beq.n	8007764 <_strtol_l.constprop.0+0xd4>
 8007770:	f1bc 0f00 	cmp.w	ip, #0
 8007774:	d000      	beq.n	8007778 <_strtol_l.constprop.0+0xe8>
 8007776:	1e69      	subs	r1, r5, #1
 8007778:	6011      	str	r1, [r2, #0]
 800777a:	e7f3      	b.n	8007764 <_strtol_l.constprop.0+0xd4>
 800777c:	2430      	movs	r4, #48	; 0x30
 800777e:	2b00      	cmp	r3, #0
 8007780:	d1b1      	bne.n	80076e6 <_strtol_l.constprop.0+0x56>
 8007782:	2308      	movs	r3, #8
 8007784:	e7af      	b.n	80076e6 <_strtol_l.constprop.0+0x56>
 8007786:	2c30      	cmp	r4, #48	; 0x30
 8007788:	d0a5      	beq.n	80076d6 <_strtol_l.constprop.0+0x46>
 800778a:	230a      	movs	r3, #10
 800778c:	e7ab      	b.n	80076e6 <_strtol_l.constprop.0+0x56>
 800778e:	bf00      	nop
 8007790:	0800beb1 	.word	0x0800beb1

08007794 <_strtol_r>:
 8007794:	f7ff bf7c 	b.w	8007690 <_strtol_l.constprop.0>

08007798 <__swbuf_r>:
 8007798:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800779a:	460e      	mov	r6, r1
 800779c:	4614      	mov	r4, r2
 800779e:	4605      	mov	r5, r0
 80077a0:	b118      	cbz	r0, 80077aa <__swbuf_r+0x12>
 80077a2:	6983      	ldr	r3, [r0, #24]
 80077a4:	b90b      	cbnz	r3, 80077aa <__swbuf_r+0x12>
 80077a6:	f001 f85d 	bl	8008864 <__sinit>
 80077aa:	4b21      	ldr	r3, [pc, #132]	; (8007830 <__swbuf_r+0x98>)
 80077ac:	429c      	cmp	r4, r3
 80077ae:	d12b      	bne.n	8007808 <__swbuf_r+0x70>
 80077b0:	686c      	ldr	r4, [r5, #4]
 80077b2:	69a3      	ldr	r3, [r4, #24]
 80077b4:	60a3      	str	r3, [r4, #8]
 80077b6:	89a3      	ldrh	r3, [r4, #12]
 80077b8:	071a      	lsls	r2, r3, #28
 80077ba:	d52f      	bpl.n	800781c <__swbuf_r+0x84>
 80077bc:	6923      	ldr	r3, [r4, #16]
 80077be:	b36b      	cbz	r3, 800781c <__swbuf_r+0x84>
 80077c0:	6923      	ldr	r3, [r4, #16]
 80077c2:	6820      	ldr	r0, [r4, #0]
 80077c4:	1ac0      	subs	r0, r0, r3
 80077c6:	6963      	ldr	r3, [r4, #20]
 80077c8:	b2f6      	uxtb	r6, r6
 80077ca:	4283      	cmp	r3, r0
 80077cc:	4637      	mov	r7, r6
 80077ce:	dc04      	bgt.n	80077da <__swbuf_r+0x42>
 80077d0:	4621      	mov	r1, r4
 80077d2:	4628      	mov	r0, r5
 80077d4:	f000 ffa0 	bl	8008718 <_fflush_r>
 80077d8:	bb30      	cbnz	r0, 8007828 <__swbuf_r+0x90>
 80077da:	68a3      	ldr	r3, [r4, #8]
 80077dc:	3b01      	subs	r3, #1
 80077de:	60a3      	str	r3, [r4, #8]
 80077e0:	6823      	ldr	r3, [r4, #0]
 80077e2:	1c5a      	adds	r2, r3, #1
 80077e4:	6022      	str	r2, [r4, #0]
 80077e6:	701e      	strb	r6, [r3, #0]
 80077e8:	6963      	ldr	r3, [r4, #20]
 80077ea:	3001      	adds	r0, #1
 80077ec:	4283      	cmp	r3, r0
 80077ee:	d004      	beq.n	80077fa <__swbuf_r+0x62>
 80077f0:	89a3      	ldrh	r3, [r4, #12]
 80077f2:	07db      	lsls	r3, r3, #31
 80077f4:	d506      	bpl.n	8007804 <__swbuf_r+0x6c>
 80077f6:	2e0a      	cmp	r6, #10
 80077f8:	d104      	bne.n	8007804 <__swbuf_r+0x6c>
 80077fa:	4621      	mov	r1, r4
 80077fc:	4628      	mov	r0, r5
 80077fe:	f000 ff8b 	bl	8008718 <_fflush_r>
 8007802:	b988      	cbnz	r0, 8007828 <__swbuf_r+0x90>
 8007804:	4638      	mov	r0, r7
 8007806:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007808:	4b0a      	ldr	r3, [pc, #40]	; (8007834 <__swbuf_r+0x9c>)
 800780a:	429c      	cmp	r4, r3
 800780c:	d101      	bne.n	8007812 <__swbuf_r+0x7a>
 800780e:	68ac      	ldr	r4, [r5, #8]
 8007810:	e7cf      	b.n	80077b2 <__swbuf_r+0x1a>
 8007812:	4b09      	ldr	r3, [pc, #36]	; (8007838 <__swbuf_r+0xa0>)
 8007814:	429c      	cmp	r4, r3
 8007816:	bf08      	it	eq
 8007818:	68ec      	ldreq	r4, [r5, #12]
 800781a:	e7ca      	b.n	80077b2 <__swbuf_r+0x1a>
 800781c:	4621      	mov	r1, r4
 800781e:	4628      	mov	r0, r5
 8007820:	f000 f80c 	bl	800783c <__swsetup_r>
 8007824:	2800      	cmp	r0, #0
 8007826:	d0cb      	beq.n	80077c0 <__swbuf_r+0x28>
 8007828:	f04f 37ff 	mov.w	r7, #4294967295
 800782c:	e7ea      	b.n	8007804 <__swbuf_r+0x6c>
 800782e:	bf00      	nop
 8007830:	0800c064 	.word	0x0800c064
 8007834:	0800c084 	.word	0x0800c084
 8007838:	0800c044 	.word	0x0800c044

0800783c <__swsetup_r>:
 800783c:	4b32      	ldr	r3, [pc, #200]	; (8007908 <__swsetup_r+0xcc>)
 800783e:	b570      	push	{r4, r5, r6, lr}
 8007840:	681d      	ldr	r5, [r3, #0]
 8007842:	4606      	mov	r6, r0
 8007844:	460c      	mov	r4, r1
 8007846:	b125      	cbz	r5, 8007852 <__swsetup_r+0x16>
 8007848:	69ab      	ldr	r3, [r5, #24]
 800784a:	b913      	cbnz	r3, 8007852 <__swsetup_r+0x16>
 800784c:	4628      	mov	r0, r5
 800784e:	f001 f809 	bl	8008864 <__sinit>
 8007852:	4b2e      	ldr	r3, [pc, #184]	; (800790c <__swsetup_r+0xd0>)
 8007854:	429c      	cmp	r4, r3
 8007856:	d10f      	bne.n	8007878 <__swsetup_r+0x3c>
 8007858:	686c      	ldr	r4, [r5, #4]
 800785a:	89a3      	ldrh	r3, [r4, #12]
 800785c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007860:	0719      	lsls	r1, r3, #28
 8007862:	d42c      	bmi.n	80078be <__swsetup_r+0x82>
 8007864:	06dd      	lsls	r5, r3, #27
 8007866:	d411      	bmi.n	800788c <__swsetup_r+0x50>
 8007868:	2309      	movs	r3, #9
 800786a:	6033      	str	r3, [r6, #0]
 800786c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007870:	81a3      	strh	r3, [r4, #12]
 8007872:	f04f 30ff 	mov.w	r0, #4294967295
 8007876:	e03e      	b.n	80078f6 <__swsetup_r+0xba>
 8007878:	4b25      	ldr	r3, [pc, #148]	; (8007910 <__swsetup_r+0xd4>)
 800787a:	429c      	cmp	r4, r3
 800787c:	d101      	bne.n	8007882 <__swsetup_r+0x46>
 800787e:	68ac      	ldr	r4, [r5, #8]
 8007880:	e7eb      	b.n	800785a <__swsetup_r+0x1e>
 8007882:	4b24      	ldr	r3, [pc, #144]	; (8007914 <__swsetup_r+0xd8>)
 8007884:	429c      	cmp	r4, r3
 8007886:	bf08      	it	eq
 8007888:	68ec      	ldreq	r4, [r5, #12]
 800788a:	e7e6      	b.n	800785a <__swsetup_r+0x1e>
 800788c:	0758      	lsls	r0, r3, #29
 800788e:	d512      	bpl.n	80078b6 <__swsetup_r+0x7a>
 8007890:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007892:	b141      	cbz	r1, 80078a6 <__swsetup_r+0x6a>
 8007894:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007898:	4299      	cmp	r1, r3
 800789a:	d002      	beq.n	80078a2 <__swsetup_r+0x66>
 800789c:	4630      	mov	r0, r6
 800789e:	f002 f977 	bl	8009b90 <_free_r>
 80078a2:	2300      	movs	r3, #0
 80078a4:	6363      	str	r3, [r4, #52]	; 0x34
 80078a6:	89a3      	ldrh	r3, [r4, #12]
 80078a8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80078ac:	81a3      	strh	r3, [r4, #12]
 80078ae:	2300      	movs	r3, #0
 80078b0:	6063      	str	r3, [r4, #4]
 80078b2:	6923      	ldr	r3, [r4, #16]
 80078b4:	6023      	str	r3, [r4, #0]
 80078b6:	89a3      	ldrh	r3, [r4, #12]
 80078b8:	f043 0308 	orr.w	r3, r3, #8
 80078bc:	81a3      	strh	r3, [r4, #12]
 80078be:	6923      	ldr	r3, [r4, #16]
 80078c0:	b94b      	cbnz	r3, 80078d6 <__swsetup_r+0x9a>
 80078c2:	89a3      	ldrh	r3, [r4, #12]
 80078c4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80078c8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80078cc:	d003      	beq.n	80078d6 <__swsetup_r+0x9a>
 80078ce:	4621      	mov	r1, r4
 80078d0:	4630      	mov	r0, r6
 80078d2:	f001 fc1d 	bl	8009110 <__smakebuf_r>
 80078d6:	89a0      	ldrh	r0, [r4, #12]
 80078d8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80078dc:	f010 0301 	ands.w	r3, r0, #1
 80078e0:	d00a      	beq.n	80078f8 <__swsetup_r+0xbc>
 80078e2:	2300      	movs	r3, #0
 80078e4:	60a3      	str	r3, [r4, #8]
 80078e6:	6963      	ldr	r3, [r4, #20]
 80078e8:	425b      	negs	r3, r3
 80078ea:	61a3      	str	r3, [r4, #24]
 80078ec:	6923      	ldr	r3, [r4, #16]
 80078ee:	b943      	cbnz	r3, 8007902 <__swsetup_r+0xc6>
 80078f0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80078f4:	d1ba      	bne.n	800786c <__swsetup_r+0x30>
 80078f6:	bd70      	pop	{r4, r5, r6, pc}
 80078f8:	0781      	lsls	r1, r0, #30
 80078fa:	bf58      	it	pl
 80078fc:	6963      	ldrpl	r3, [r4, #20]
 80078fe:	60a3      	str	r3, [r4, #8]
 8007900:	e7f4      	b.n	80078ec <__swsetup_r+0xb0>
 8007902:	2000      	movs	r0, #0
 8007904:	e7f7      	b.n	80078f6 <__swsetup_r+0xba>
 8007906:	bf00      	nop
 8007908:	2000000c 	.word	0x2000000c
 800790c:	0800c064 	.word	0x0800c064
 8007910:	0800c084 	.word	0x0800c084
 8007914:	0800c044 	.word	0x0800c044

08007918 <quorem>:
 8007918:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800791c:	6903      	ldr	r3, [r0, #16]
 800791e:	690c      	ldr	r4, [r1, #16]
 8007920:	42a3      	cmp	r3, r4
 8007922:	4607      	mov	r7, r0
 8007924:	f2c0 8081 	blt.w	8007a2a <quorem+0x112>
 8007928:	3c01      	subs	r4, #1
 800792a:	f101 0814 	add.w	r8, r1, #20
 800792e:	f100 0514 	add.w	r5, r0, #20
 8007932:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007936:	9301      	str	r3, [sp, #4]
 8007938:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800793c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007940:	3301      	adds	r3, #1
 8007942:	429a      	cmp	r2, r3
 8007944:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8007948:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800794c:	fbb2 f6f3 	udiv	r6, r2, r3
 8007950:	d331      	bcc.n	80079b6 <quorem+0x9e>
 8007952:	f04f 0e00 	mov.w	lr, #0
 8007956:	4640      	mov	r0, r8
 8007958:	46ac      	mov	ip, r5
 800795a:	46f2      	mov	sl, lr
 800795c:	f850 2b04 	ldr.w	r2, [r0], #4
 8007960:	b293      	uxth	r3, r2
 8007962:	fb06 e303 	mla	r3, r6, r3, lr
 8007966:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800796a:	b29b      	uxth	r3, r3
 800796c:	ebaa 0303 	sub.w	r3, sl, r3
 8007970:	f8dc a000 	ldr.w	sl, [ip]
 8007974:	0c12      	lsrs	r2, r2, #16
 8007976:	fa13 f38a 	uxtah	r3, r3, sl
 800797a:	fb06 e202 	mla	r2, r6, r2, lr
 800797e:	9300      	str	r3, [sp, #0]
 8007980:	9b00      	ldr	r3, [sp, #0]
 8007982:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8007986:	b292      	uxth	r2, r2
 8007988:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800798c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007990:	f8bd 3000 	ldrh.w	r3, [sp]
 8007994:	4581      	cmp	r9, r0
 8007996:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800799a:	f84c 3b04 	str.w	r3, [ip], #4
 800799e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80079a2:	d2db      	bcs.n	800795c <quorem+0x44>
 80079a4:	f855 300b 	ldr.w	r3, [r5, fp]
 80079a8:	b92b      	cbnz	r3, 80079b6 <quorem+0x9e>
 80079aa:	9b01      	ldr	r3, [sp, #4]
 80079ac:	3b04      	subs	r3, #4
 80079ae:	429d      	cmp	r5, r3
 80079b0:	461a      	mov	r2, r3
 80079b2:	d32e      	bcc.n	8007a12 <quorem+0xfa>
 80079b4:	613c      	str	r4, [r7, #16]
 80079b6:	4638      	mov	r0, r7
 80079b8:	f001 fede 	bl	8009778 <__mcmp>
 80079bc:	2800      	cmp	r0, #0
 80079be:	db24      	blt.n	8007a0a <quorem+0xf2>
 80079c0:	3601      	adds	r6, #1
 80079c2:	4628      	mov	r0, r5
 80079c4:	f04f 0c00 	mov.w	ip, #0
 80079c8:	f858 2b04 	ldr.w	r2, [r8], #4
 80079cc:	f8d0 e000 	ldr.w	lr, [r0]
 80079d0:	b293      	uxth	r3, r2
 80079d2:	ebac 0303 	sub.w	r3, ip, r3
 80079d6:	0c12      	lsrs	r2, r2, #16
 80079d8:	fa13 f38e 	uxtah	r3, r3, lr
 80079dc:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80079e0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80079e4:	b29b      	uxth	r3, r3
 80079e6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80079ea:	45c1      	cmp	r9, r8
 80079ec:	f840 3b04 	str.w	r3, [r0], #4
 80079f0:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80079f4:	d2e8      	bcs.n	80079c8 <quorem+0xb0>
 80079f6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80079fa:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80079fe:	b922      	cbnz	r2, 8007a0a <quorem+0xf2>
 8007a00:	3b04      	subs	r3, #4
 8007a02:	429d      	cmp	r5, r3
 8007a04:	461a      	mov	r2, r3
 8007a06:	d30a      	bcc.n	8007a1e <quorem+0x106>
 8007a08:	613c      	str	r4, [r7, #16]
 8007a0a:	4630      	mov	r0, r6
 8007a0c:	b003      	add	sp, #12
 8007a0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007a12:	6812      	ldr	r2, [r2, #0]
 8007a14:	3b04      	subs	r3, #4
 8007a16:	2a00      	cmp	r2, #0
 8007a18:	d1cc      	bne.n	80079b4 <quorem+0x9c>
 8007a1a:	3c01      	subs	r4, #1
 8007a1c:	e7c7      	b.n	80079ae <quorem+0x96>
 8007a1e:	6812      	ldr	r2, [r2, #0]
 8007a20:	3b04      	subs	r3, #4
 8007a22:	2a00      	cmp	r2, #0
 8007a24:	d1f0      	bne.n	8007a08 <quorem+0xf0>
 8007a26:	3c01      	subs	r4, #1
 8007a28:	e7eb      	b.n	8007a02 <quorem+0xea>
 8007a2a:	2000      	movs	r0, #0
 8007a2c:	e7ee      	b.n	8007a0c <quorem+0xf4>
	...

08007a30 <_dtoa_r>:
 8007a30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a34:	ed2d 8b04 	vpush	{d8-d9}
 8007a38:	ec57 6b10 	vmov	r6, r7, d0
 8007a3c:	b093      	sub	sp, #76	; 0x4c
 8007a3e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8007a40:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8007a44:	9106      	str	r1, [sp, #24]
 8007a46:	ee10 aa10 	vmov	sl, s0
 8007a4a:	4604      	mov	r4, r0
 8007a4c:	9209      	str	r2, [sp, #36]	; 0x24
 8007a4e:	930c      	str	r3, [sp, #48]	; 0x30
 8007a50:	46bb      	mov	fp, r7
 8007a52:	b975      	cbnz	r5, 8007a72 <_dtoa_r+0x42>
 8007a54:	2010      	movs	r0, #16
 8007a56:	f001 fb9b 	bl	8009190 <malloc>
 8007a5a:	4602      	mov	r2, r0
 8007a5c:	6260      	str	r0, [r4, #36]	; 0x24
 8007a5e:	b920      	cbnz	r0, 8007a6a <_dtoa_r+0x3a>
 8007a60:	4ba7      	ldr	r3, [pc, #668]	; (8007d00 <_dtoa_r+0x2d0>)
 8007a62:	21ea      	movs	r1, #234	; 0xea
 8007a64:	48a7      	ldr	r0, [pc, #668]	; (8007d04 <_dtoa_r+0x2d4>)
 8007a66:	f003 f9ed 	bl	800ae44 <__assert_func>
 8007a6a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8007a6e:	6005      	str	r5, [r0, #0]
 8007a70:	60c5      	str	r5, [r0, #12]
 8007a72:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007a74:	6819      	ldr	r1, [r3, #0]
 8007a76:	b151      	cbz	r1, 8007a8e <_dtoa_r+0x5e>
 8007a78:	685a      	ldr	r2, [r3, #4]
 8007a7a:	604a      	str	r2, [r1, #4]
 8007a7c:	2301      	movs	r3, #1
 8007a7e:	4093      	lsls	r3, r2
 8007a80:	608b      	str	r3, [r1, #8]
 8007a82:	4620      	mov	r0, r4
 8007a84:	f001 fbec 	bl	8009260 <_Bfree>
 8007a88:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007a8a:	2200      	movs	r2, #0
 8007a8c:	601a      	str	r2, [r3, #0]
 8007a8e:	1e3b      	subs	r3, r7, #0
 8007a90:	bfaa      	itet	ge
 8007a92:	2300      	movge	r3, #0
 8007a94:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8007a98:	f8c8 3000 	strge.w	r3, [r8]
 8007a9c:	4b9a      	ldr	r3, [pc, #616]	; (8007d08 <_dtoa_r+0x2d8>)
 8007a9e:	bfbc      	itt	lt
 8007aa0:	2201      	movlt	r2, #1
 8007aa2:	f8c8 2000 	strlt.w	r2, [r8]
 8007aa6:	ea33 030b 	bics.w	r3, r3, fp
 8007aaa:	d11b      	bne.n	8007ae4 <_dtoa_r+0xb4>
 8007aac:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007aae:	f242 730f 	movw	r3, #9999	; 0x270f
 8007ab2:	6013      	str	r3, [r2, #0]
 8007ab4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007ab8:	4333      	orrs	r3, r6
 8007aba:	f000 8592 	beq.w	80085e2 <_dtoa_r+0xbb2>
 8007abe:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007ac0:	b963      	cbnz	r3, 8007adc <_dtoa_r+0xac>
 8007ac2:	4b92      	ldr	r3, [pc, #584]	; (8007d0c <_dtoa_r+0x2dc>)
 8007ac4:	e022      	b.n	8007b0c <_dtoa_r+0xdc>
 8007ac6:	4b92      	ldr	r3, [pc, #584]	; (8007d10 <_dtoa_r+0x2e0>)
 8007ac8:	9301      	str	r3, [sp, #4]
 8007aca:	3308      	adds	r3, #8
 8007acc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8007ace:	6013      	str	r3, [r2, #0]
 8007ad0:	9801      	ldr	r0, [sp, #4]
 8007ad2:	b013      	add	sp, #76	; 0x4c
 8007ad4:	ecbd 8b04 	vpop	{d8-d9}
 8007ad8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007adc:	4b8b      	ldr	r3, [pc, #556]	; (8007d0c <_dtoa_r+0x2dc>)
 8007ade:	9301      	str	r3, [sp, #4]
 8007ae0:	3303      	adds	r3, #3
 8007ae2:	e7f3      	b.n	8007acc <_dtoa_r+0x9c>
 8007ae4:	2200      	movs	r2, #0
 8007ae6:	2300      	movs	r3, #0
 8007ae8:	4650      	mov	r0, sl
 8007aea:	4659      	mov	r1, fp
 8007aec:	f7f8 ffec 	bl	8000ac8 <__aeabi_dcmpeq>
 8007af0:	ec4b ab19 	vmov	d9, sl, fp
 8007af4:	4680      	mov	r8, r0
 8007af6:	b158      	cbz	r0, 8007b10 <_dtoa_r+0xe0>
 8007af8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007afa:	2301      	movs	r3, #1
 8007afc:	6013      	str	r3, [r2, #0]
 8007afe:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007b00:	2b00      	cmp	r3, #0
 8007b02:	f000 856b 	beq.w	80085dc <_dtoa_r+0xbac>
 8007b06:	4883      	ldr	r0, [pc, #524]	; (8007d14 <_dtoa_r+0x2e4>)
 8007b08:	6018      	str	r0, [r3, #0]
 8007b0a:	1e43      	subs	r3, r0, #1
 8007b0c:	9301      	str	r3, [sp, #4]
 8007b0e:	e7df      	b.n	8007ad0 <_dtoa_r+0xa0>
 8007b10:	ec4b ab10 	vmov	d0, sl, fp
 8007b14:	aa10      	add	r2, sp, #64	; 0x40
 8007b16:	a911      	add	r1, sp, #68	; 0x44
 8007b18:	4620      	mov	r0, r4
 8007b1a:	f001 ff4f 	bl	80099bc <__d2b>
 8007b1e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8007b22:	ee08 0a10 	vmov	s16, r0
 8007b26:	2d00      	cmp	r5, #0
 8007b28:	f000 8084 	beq.w	8007c34 <_dtoa_r+0x204>
 8007b2c:	ee19 3a90 	vmov	r3, s19
 8007b30:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007b34:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8007b38:	4656      	mov	r6, sl
 8007b3a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8007b3e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8007b42:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8007b46:	4b74      	ldr	r3, [pc, #464]	; (8007d18 <_dtoa_r+0x2e8>)
 8007b48:	2200      	movs	r2, #0
 8007b4a:	4630      	mov	r0, r6
 8007b4c:	4639      	mov	r1, r7
 8007b4e:	f7f8 fb9b 	bl	8000288 <__aeabi_dsub>
 8007b52:	a365      	add	r3, pc, #404	; (adr r3, 8007ce8 <_dtoa_r+0x2b8>)
 8007b54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b58:	f7f8 fd4e 	bl	80005f8 <__aeabi_dmul>
 8007b5c:	a364      	add	r3, pc, #400	; (adr r3, 8007cf0 <_dtoa_r+0x2c0>)
 8007b5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b62:	f7f8 fb93 	bl	800028c <__adddf3>
 8007b66:	4606      	mov	r6, r0
 8007b68:	4628      	mov	r0, r5
 8007b6a:	460f      	mov	r7, r1
 8007b6c:	f7f8 fcda 	bl	8000524 <__aeabi_i2d>
 8007b70:	a361      	add	r3, pc, #388	; (adr r3, 8007cf8 <_dtoa_r+0x2c8>)
 8007b72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b76:	f7f8 fd3f 	bl	80005f8 <__aeabi_dmul>
 8007b7a:	4602      	mov	r2, r0
 8007b7c:	460b      	mov	r3, r1
 8007b7e:	4630      	mov	r0, r6
 8007b80:	4639      	mov	r1, r7
 8007b82:	f7f8 fb83 	bl	800028c <__adddf3>
 8007b86:	4606      	mov	r6, r0
 8007b88:	460f      	mov	r7, r1
 8007b8a:	f7f8 ffe5 	bl	8000b58 <__aeabi_d2iz>
 8007b8e:	2200      	movs	r2, #0
 8007b90:	9000      	str	r0, [sp, #0]
 8007b92:	2300      	movs	r3, #0
 8007b94:	4630      	mov	r0, r6
 8007b96:	4639      	mov	r1, r7
 8007b98:	f7f8 ffa0 	bl	8000adc <__aeabi_dcmplt>
 8007b9c:	b150      	cbz	r0, 8007bb4 <_dtoa_r+0x184>
 8007b9e:	9800      	ldr	r0, [sp, #0]
 8007ba0:	f7f8 fcc0 	bl	8000524 <__aeabi_i2d>
 8007ba4:	4632      	mov	r2, r6
 8007ba6:	463b      	mov	r3, r7
 8007ba8:	f7f8 ff8e 	bl	8000ac8 <__aeabi_dcmpeq>
 8007bac:	b910      	cbnz	r0, 8007bb4 <_dtoa_r+0x184>
 8007bae:	9b00      	ldr	r3, [sp, #0]
 8007bb0:	3b01      	subs	r3, #1
 8007bb2:	9300      	str	r3, [sp, #0]
 8007bb4:	9b00      	ldr	r3, [sp, #0]
 8007bb6:	2b16      	cmp	r3, #22
 8007bb8:	d85a      	bhi.n	8007c70 <_dtoa_r+0x240>
 8007bba:	9a00      	ldr	r2, [sp, #0]
 8007bbc:	4b57      	ldr	r3, [pc, #348]	; (8007d1c <_dtoa_r+0x2ec>)
 8007bbe:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007bc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bc6:	ec51 0b19 	vmov	r0, r1, d9
 8007bca:	f7f8 ff87 	bl	8000adc <__aeabi_dcmplt>
 8007bce:	2800      	cmp	r0, #0
 8007bd0:	d050      	beq.n	8007c74 <_dtoa_r+0x244>
 8007bd2:	9b00      	ldr	r3, [sp, #0]
 8007bd4:	3b01      	subs	r3, #1
 8007bd6:	9300      	str	r3, [sp, #0]
 8007bd8:	2300      	movs	r3, #0
 8007bda:	930b      	str	r3, [sp, #44]	; 0x2c
 8007bdc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007bde:	1b5d      	subs	r5, r3, r5
 8007be0:	1e6b      	subs	r3, r5, #1
 8007be2:	9305      	str	r3, [sp, #20]
 8007be4:	bf45      	ittet	mi
 8007be6:	f1c5 0301 	rsbmi	r3, r5, #1
 8007bea:	9304      	strmi	r3, [sp, #16]
 8007bec:	2300      	movpl	r3, #0
 8007bee:	2300      	movmi	r3, #0
 8007bf0:	bf4c      	ite	mi
 8007bf2:	9305      	strmi	r3, [sp, #20]
 8007bf4:	9304      	strpl	r3, [sp, #16]
 8007bf6:	9b00      	ldr	r3, [sp, #0]
 8007bf8:	2b00      	cmp	r3, #0
 8007bfa:	db3d      	blt.n	8007c78 <_dtoa_r+0x248>
 8007bfc:	9b05      	ldr	r3, [sp, #20]
 8007bfe:	9a00      	ldr	r2, [sp, #0]
 8007c00:	920a      	str	r2, [sp, #40]	; 0x28
 8007c02:	4413      	add	r3, r2
 8007c04:	9305      	str	r3, [sp, #20]
 8007c06:	2300      	movs	r3, #0
 8007c08:	9307      	str	r3, [sp, #28]
 8007c0a:	9b06      	ldr	r3, [sp, #24]
 8007c0c:	2b09      	cmp	r3, #9
 8007c0e:	f200 8089 	bhi.w	8007d24 <_dtoa_r+0x2f4>
 8007c12:	2b05      	cmp	r3, #5
 8007c14:	bfc4      	itt	gt
 8007c16:	3b04      	subgt	r3, #4
 8007c18:	9306      	strgt	r3, [sp, #24]
 8007c1a:	9b06      	ldr	r3, [sp, #24]
 8007c1c:	f1a3 0302 	sub.w	r3, r3, #2
 8007c20:	bfcc      	ite	gt
 8007c22:	2500      	movgt	r5, #0
 8007c24:	2501      	movle	r5, #1
 8007c26:	2b03      	cmp	r3, #3
 8007c28:	f200 8087 	bhi.w	8007d3a <_dtoa_r+0x30a>
 8007c2c:	e8df f003 	tbb	[pc, r3]
 8007c30:	59383a2d 	.word	0x59383a2d
 8007c34:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8007c38:	441d      	add	r5, r3
 8007c3a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8007c3e:	2b20      	cmp	r3, #32
 8007c40:	bfc1      	itttt	gt
 8007c42:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8007c46:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8007c4a:	fa0b f303 	lslgt.w	r3, fp, r3
 8007c4e:	fa26 f000 	lsrgt.w	r0, r6, r0
 8007c52:	bfda      	itte	le
 8007c54:	f1c3 0320 	rsble	r3, r3, #32
 8007c58:	fa06 f003 	lslle.w	r0, r6, r3
 8007c5c:	4318      	orrgt	r0, r3
 8007c5e:	f7f8 fc51 	bl	8000504 <__aeabi_ui2d>
 8007c62:	2301      	movs	r3, #1
 8007c64:	4606      	mov	r6, r0
 8007c66:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8007c6a:	3d01      	subs	r5, #1
 8007c6c:	930e      	str	r3, [sp, #56]	; 0x38
 8007c6e:	e76a      	b.n	8007b46 <_dtoa_r+0x116>
 8007c70:	2301      	movs	r3, #1
 8007c72:	e7b2      	b.n	8007bda <_dtoa_r+0x1aa>
 8007c74:	900b      	str	r0, [sp, #44]	; 0x2c
 8007c76:	e7b1      	b.n	8007bdc <_dtoa_r+0x1ac>
 8007c78:	9b04      	ldr	r3, [sp, #16]
 8007c7a:	9a00      	ldr	r2, [sp, #0]
 8007c7c:	1a9b      	subs	r3, r3, r2
 8007c7e:	9304      	str	r3, [sp, #16]
 8007c80:	4253      	negs	r3, r2
 8007c82:	9307      	str	r3, [sp, #28]
 8007c84:	2300      	movs	r3, #0
 8007c86:	930a      	str	r3, [sp, #40]	; 0x28
 8007c88:	e7bf      	b.n	8007c0a <_dtoa_r+0x1da>
 8007c8a:	2300      	movs	r3, #0
 8007c8c:	9308      	str	r3, [sp, #32]
 8007c8e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007c90:	2b00      	cmp	r3, #0
 8007c92:	dc55      	bgt.n	8007d40 <_dtoa_r+0x310>
 8007c94:	2301      	movs	r3, #1
 8007c96:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8007c9a:	461a      	mov	r2, r3
 8007c9c:	9209      	str	r2, [sp, #36]	; 0x24
 8007c9e:	e00c      	b.n	8007cba <_dtoa_r+0x28a>
 8007ca0:	2301      	movs	r3, #1
 8007ca2:	e7f3      	b.n	8007c8c <_dtoa_r+0x25c>
 8007ca4:	2300      	movs	r3, #0
 8007ca6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007ca8:	9308      	str	r3, [sp, #32]
 8007caa:	9b00      	ldr	r3, [sp, #0]
 8007cac:	4413      	add	r3, r2
 8007cae:	9302      	str	r3, [sp, #8]
 8007cb0:	3301      	adds	r3, #1
 8007cb2:	2b01      	cmp	r3, #1
 8007cb4:	9303      	str	r3, [sp, #12]
 8007cb6:	bfb8      	it	lt
 8007cb8:	2301      	movlt	r3, #1
 8007cba:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8007cbc:	2200      	movs	r2, #0
 8007cbe:	6042      	str	r2, [r0, #4]
 8007cc0:	2204      	movs	r2, #4
 8007cc2:	f102 0614 	add.w	r6, r2, #20
 8007cc6:	429e      	cmp	r6, r3
 8007cc8:	6841      	ldr	r1, [r0, #4]
 8007cca:	d93d      	bls.n	8007d48 <_dtoa_r+0x318>
 8007ccc:	4620      	mov	r0, r4
 8007cce:	f001 fa87 	bl	80091e0 <_Balloc>
 8007cd2:	9001      	str	r0, [sp, #4]
 8007cd4:	2800      	cmp	r0, #0
 8007cd6:	d13b      	bne.n	8007d50 <_dtoa_r+0x320>
 8007cd8:	4b11      	ldr	r3, [pc, #68]	; (8007d20 <_dtoa_r+0x2f0>)
 8007cda:	4602      	mov	r2, r0
 8007cdc:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8007ce0:	e6c0      	b.n	8007a64 <_dtoa_r+0x34>
 8007ce2:	2301      	movs	r3, #1
 8007ce4:	e7df      	b.n	8007ca6 <_dtoa_r+0x276>
 8007ce6:	bf00      	nop
 8007ce8:	636f4361 	.word	0x636f4361
 8007cec:	3fd287a7 	.word	0x3fd287a7
 8007cf0:	8b60c8b3 	.word	0x8b60c8b3
 8007cf4:	3fc68a28 	.word	0x3fc68a28
 8007cf8:	509f79fb 	.word	0x509f79fb
 8007cfc:	3fd34413 	.word	0x3fd34413
 8007d00:	0800bfbe 	.word	0x0800bfbe
 8007d04:	0800bfd5 	.word	0x0800bfd5
 8007d08:	7ff00000 	.word	0x7ff00000
 8007d0c:	0800bfba 	.word	0x0800bfba
 8007d10:	0800bfb1 	.word	0x0800bfb1
 8007d14:	0800c292 	.word	0x0800c292
 8007d18:	3ff80000 	.word	0x3ff80000
 8007d1c:	0800c1a8 	.word	0x0800c1a8
 8007d20:	0800c030 	.word	0x0800c030
 8007d24:	2501      	movs	r5, #1
 8007d26:	2300      	movs	r3, #0
 8007d28:	9306      	str	r3, [sp, #24]
 8007d2a:	9508      	str	r5, [sp, #32]
 8007d2c:	f04f 33ff 	mov.w	r3, #4294967295
 8007d30:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8007d34:	2200      	movs	r2, #0
 8007d36:	2312      	movs	r3, #18
 8007d38:	e7b0      	b.n	8007c9c <_dtoa_r+0x26c>
 8007d3a:	2301      	movs	r3, #1
 8007d3c:	9308      	str	r3, [sp, #32]
 8007d3e:	e7f5      	b.n	8007d2c <_dtoa_r+0x2fc>
 8007d40:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007d42:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8007d46:	e7b8      	b.n	8007cba <_dtoa_r+0x28a>
 8007d48:	3101      	adds	r1, #1
 8007d4a:	6041      	str	r1, [r0, #4]
 8007d4c:	0052      	lsls	r2, r2, #1
 8007d4e:	e7b8      	b.n	8007cc2 <_dtoa_r+0x292>
 8007d50:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007d52:	9a01      	ldr	r2, [sp, #4]
 8007d54:	601a      	str	r2, [r3, #0]
 8007d56:	9b03      	ldr	r3, [sp, #12]
 8007d58:	2b0e      	cmp	r3, #14
 8007d5a:	f200 809d 	bhi.w	8007e98 <_dtoa_r+0x468>
 8007d5e:	2d00      	cmp	r5, #0
 8007d60:	f000 809a 	beq.w	8007e98 <_dtoa_r+0x468>
 8007d64:	9b00      	ldr	r3, [sp, #0]
 8007d66:	2b00      	cmp	r3, #0
 8007d68:	dd32      	ble.n	8007dd0 <_dtoa_r+0x3a0>
 8007d6a:	4ab7      	ldr	r2, [pc, #732]	; (8008048 <_dtoa_r+0x618>)
 8007d6c:	f003 030f 	and.w	r3, r3, #15
 8007d70:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8007d74:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007d78:	9b00      	ldr	r3, [sp, #0]
 8007d7a:	05d8      	lsls	r0, r3, #23
 8007d7c:	ea4f 1723 	mov.w	r7, r3, asr #4
 8007d80:	d516      	bpl.n	8007db0 <_dtoa_r+0x380>
 8007d82:	4bb2      	ldr	r3, [pc, #712]	; (800804c <_dtoa_r+0x61c>)
 8007d84:	ec51 0b19 	vmov	r0, r1, d9
 8007d88:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007d8c:	f7f8 fd5e 	bl	800084c <__aeabi_ddiv>
 8007d90:	f007 070f 	and.w	r7, r7, #15
 8007d94:	4682      	mov	sl, r0
 8007d96:	468b      	mov	fp, r1
 8007d98:	2503      	movs	r5, #3
 8007d9a:	4eac      	ldr	r6, [pc, #688]	; (800804c <_dtoa_r+0x61c>)
 8007d9c:	b957      	cbnz	r7, 8007db4 <_dtoa_r+0x384>
 8007d9e:	4642      	mov	r2, r8
 8007da0:	464b      	mov	r3, r9
 8007da2:	4650      	mov	r0, sl
 8007da4:	4659      	mov	r1, fp
 8007da6:	f7f8 fd51 	bl	800084c <__aeabi_ddiv>
 8007daa:	4682      	mov	sl, r0
 8007dac:	468b      	mov	fp, r1
 8007dae:	e028      	b.n	8007e02 <_dtoa_r+0x3d2>
 8007db0:	2502      	movs	r5, #2
 8007db2:	e7f2      	b.n	8007d9a <_dtoa_r+0x36a>
 8007db4:	07f9      	lsls	r1, r7, #31
 8007db6:	d508      	bpl.n	8007dca <_dtoa_r+0x39a>
 8007db8:	4640      	mov	r0, r8
 8007dba:	4649      	mov	r1, r9
 8007dbc:	e9d6 2300 	ldrd	r2, r3, [r6]
 8007dc0:	f7f8 fc1a 	bl	80005f8 <__aeabi_dmul>
 8007dc4:	3501      	adds	r5, #1
 8007dc6:	4680      	mov	r8, r0
 8007dc8:	4689      	mov	r9, r1
 8007dca:	107f      	asrs	r7, r7, #1
 8007dcc:	3608      	adds	r6, #8
 8007dce:	e7e5      	b.n	8007d9c <_dtoa_r+0x36c>
 8007dd0:	f000 809b 	beq.w	8007f0a <_dtoa_r+0x4da>
 8007dd4:	9b00      	ldr	r3, [sp, #0]
 8007dd6:	4f9d      	ldr	r7, [pc, #628]	; (800804c <_dtoa_r+0x61c>)
 8007dd8:	425e      	negs	r6, r3
 8007dda:	4b9b      	ldr	r3, [pc, #620]	; (8008048 <_dtoa_r+0x618>)
 8007ddc:	f006 020f 	and.w	r2, r6, #15
 8007de0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007de4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007de8:	ec51 0b19 	vmov	r0, r1, d9
 8007dec:	f7f8 fc04 	bl	80005f8 <__aeabi_dmul>
 8007df0:	1136      	asrs	r6, r6, #4
 8007df2:	4682      	mov	sl, r0
 8007df4:	468b      	mov	fp, r1
 8007df6:	2300      	movs	r3, #0
 8007df8:	2502      	movs	r5, #2
 8007dfa:	2e00      	cmp	r6, #0
 8007dfc:	d17a      	bne.n	8007ef4 <_dtoa_r+0x4c4>
 8007dfe:	2b00      	cmp	r3, #0
 8007e00:	d1d3      	bne.n	8007daa <_dtoa_r+0x37a>
 8007e02:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007e04:	2b00      	cmp	r3, #0
 8007e06:	f000 8082 	beq.w	8007f0e <_dtoa_r+0x4de>
 8007e0a:	4b91      	ldr	r3, [pc, #580]	; (8008050 <_dtoa_r+0x620>)
 8007e0c:	2200      	movs	r2, #0
 8007e0e:	4650      	mov	r0, sl
 8007e10:	4659      	mov	r1, fp
 8007e12:	f7f8 fe63 	bl	8000adc <__aeabi_dcmplt>
 8007e16:	2800      	cmp	r0, #0
 8007e18:	d079      	beq.n	8007f0e <_dtoa_r+0x4de>
 8007e1a:	9b03      	ldr	r3, [sp, #12]
 8007e1c:	2b00      	cmp	r3, #0
 8007e1e:	d076      	beq.n	8007f0e <_dtoa_r+0x4de>
 8007e20:	9b02      	ldr	r3, [sp, #8]
 8007e22:	2b00      	cmp	r3, #0
 8007e24:	dd36      	ble.n	8007e94 <_dtoa_r+0x464>
 8007e26:	9b00      	ldr	r3, [sp, #0]
 8007e28:	4650      	mov	r0, sl
 8007e2a:	4659      	mov	r1, fp
 8007e2c:	1e5f      	subs	r7, r3, #1
 8007e2e:	2200      	movs	r2, #0
 8007e30:	4b88      	ldr	r3, [pc, #544]	; (8008054 <_dtoa_r+0x624>)
 8007e32:	f7f8 fbe1 	bl	80005f8 <__aeabi_dmul>
 8007e36:	9e02      	ldr	r6, [sp, #8]
 8007e38:	4682      	mov	sl, r0
 8007e3a:	468b      	mov	fp, r1
 8007e3c:	3501      	adds	r5, #1
 8007e3e:	4628      	mov	r0, r5
 8007e40:	f7f8 fb70 	bl	8000524 <__aeabi_i2d>
 8007e44:	4652      	mov	r2, sl
 8007e46:	465b      	mov	r3, fp
 8007e48:	f7f8 fbd6 	bl	80005f8 <__aeabi_dmul>
 8007e4c:	4b82      	ldr	r3, [pc, #520]	; (8008058 <_dtoa_r+0x628>)
 8007e4e:	2200      	movs	r2, #0
 8007e50:	f7f8 fa1c 	bl	800028c <__adddf3>
 8007e54:	46d0      	mov	r8, sl
 8007e56:	46d9      	mov	r9, fp
 8007e58:	4682      	mov	sl, r0
 8007e5a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8007e5e:	2e00      	cmp	r6, #0
 8007e60:	d158      	bne.n	8007f14 <_dtoa_r+0x4e4>
 8007e62:	4b7e      	ldr	r3, [pc, #504]	; (800805c <_dtoa_r+0x62c>)
 8007e64:	2200      	movs	r2, #0
 8007e66:	4640      	mov	r0, r8
 8007e68:	4649      	mov	r1, r9
 8007e6a:	f7f8 fa0d 	bl	8000288 <__aeabi_dsub>
 8007e6e:	4652      	mov	r2, sl
 8007e70:	465b      	mov	r3, fp
 8007e72:	4680      	mov	r8, r0
 8007e74:	4689      	mov	r9, r1
 8007e76:	f7f8 fe4f 	bl	8000b18 <__aeabi_dcmpgt>
 8007e7a:	2800      	cmp	r0, #0
 8007e7c:	f040 8295 	bne.w	80083aa <_dtoa_r+0x97a>
 8007e80:	4652      	mov	r2, sl
 8007e82:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8007e86:	4640      	mov	r0, r8
 8007e88:	4649      	mov	r1, r9
 8007e8a:	f7f8 fe27 	bl	8000adc <__aeabi_dcmplt>
 8007e8e:	2800      	cmp	r0, #0
 8007e90:	f040 8289 	bne.w	80083a6 <_dtoa_r+0x976>
 8007e94:	ec5b ab19 	vmov	sl, fp, d9
 8007e98:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007e9a:	2b00      	cmp	r3, #0
 8007e9c:	f2c0 8148 	blt.w	8008130 <_dtoa_r+0x700>
 8007ea0:	9a00      	ldr	r2, [sp, #0]
 8007ea2:	2a0e      	cmp	r2, #14
 8007ea4:	f300 8144 	bgt.w	8008130 <_dtoa_r+0x700>
 8007ea8:	4b67      	ldr	r3, [pc, #412]	; (8008048 <_dtoa_r+0x618>)
 8007eaa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007eae:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007eb2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007eb4:	2b00      	cmp	r3, #0
 8007eb6:	f280 80d5 	bge.w	8008064 <_dtoa_r+0x634>
 8007eba:	9b03      	ldr	r3, [sp, #12]
 8007ebc:	2b00      	cmp	r3, #0
 8007ebe:	f300 80d1 	bgt.w	8008064 <_dtoa_r+0x634>
 8007ec2:	f040 826f 	bne.w	80083a4 <_dtoa_r+0x974>
 8007ec6:	4b65      	ldr	r3, [pc, #404]	; (800805c <_dtoa_r+0x62c>)
 8007ec8:	2200      	movs	r2, #0
 8007eca:	4640      	mov	r0, r8
 8007ecc:	4649      	mov	r1, r9
 8007ece:	f7f8 fb93 	bl	80005f8 <__aeabi_dmul>
 8007ed2:	4652      	mov	r2, sl
 8007ed4:	465b      	mov	r3, fp
 8007ed6:	f7f8 fe15 	bl	8000b04 <__aeabi_dcmpge>
 8007eda:	9e03      	ldr	r6, [sp, #12]
 8007edc:	4637      	mov	r7, r6
 8007ede:	2800      	cmp	r0, #0
 8007ee0:	f040 8245 	bne.w	800836e <_dtoa_r+0x93e>
 8007ee4:	9d01      	ldr	r5, [sp, #4]
 8007ee6:	2331      	movs	r3, #49	; 0x31
 8007ee8:	f805 3b01 	strb.w	r3, [r5], #1
 8007eec:	9b00      	ldr	r3, [sp, #0]
 8007eee:	3301      	adds	r3, #1
 8007ef0:	9300      	str	r3, [sp, #0]
 8007ef2:	e240      	b.n	8008376 <_dtoa_r+0x946>
 8007ef4:	07f2      	lsls	r2, r6, #31
 8007ef6:	d505      	bpl.n	8007f04 <_dtoa_r+0x4d4>
 8007ef8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007efc:	f7f8 fb7c 	bl	80005f8 <__aeabi_dmul>
 8007f00:	3501      	adds	r5, #1
 8007f02:	2301      	movs	r3, #1
 8007f04:	1076      	asrs	r6, r6, #1
 8007f06:	3708      	adds	r7, #8
 8007f08:	e777      	b.n	8007dfa <_dtoa_r+0x3ca>
 8007f0a:	2502      	movs	r5, #2
 8007f0c:	e779      	b.n	8007e02 <_dtoa_r+0x3d2>
 8007f0e:	9f00      	ldr	r7, [sp, #0]
 8007f10:	9e03      	ldr	r6, [sp, #12]
 8007f12:	e794      	b.n	8007e3e <_dtoa_r+0x40e>
 8007f14:	9901      	ldr	r1, [sp, #4]
 8007f16:	4b4c      	ldr	r3, [pc, #304]	; (8008048 <_dtoa_r+0x618>)
 8007f18:	4431      	add	r1, r6
 8007f1a:	910d      	str	r1, [sp, #52]	; 0x34
 8007f1c:	9908      	ldr	r1, [sp, #32]
 8007f1e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8007f22:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8007f26:	2900      	cmp	r1, #0
 8007f28:	d043      	beq.n	8007fb2 <_dtoa_r+0x582>
 8007f2a:	494d      	ldr	r1, [pc, #308]	; (8008060 <_dtoa_r+0x630>)
 8007f2c:	2000      	movs	r0, #0
 8007f2e:	f7f8 fc8d 	bl	800084c <__aeabi_ddiv>
 8007f32:	4652      	mov	r2, sl
 8007f34:	465b      	mov	r3, fp
 8007f36:	f7f8 f9a7 	bl	8000288 <__aeabi_dsub>
 8007f3a:	9d01      	ldr	r5, [sp, #4]
 8007f3c:	4682      	mov	sl, r0
 8007f3e:	468b      	mov	fp, r1
 8007f40:	4649      	mov	r1, r9
 8007f42:	4640      	mov	r0, r8
 8007f44:	f7f8 fe08 	bl	8000b58 <__aeabi_d2iz>
 8007f48:	4606      	mov	r6, r0
 8007f4a:	f7f8 faeb 	bl	8000524 <__aeabi_i2d>
 8007f4e:	4602      	mov	r2, r0
 8007f50:	460b      	mov	r3, r1
 8007f52:	4640      	mov	r0, r8
 8007f54:	4649      	mov	r1, r9
 8007f56:	f7f8 f997 	bl	8000288 <__aeabi_dsub>
 8007f5a:	3630      	adds	r6, #48	; 0x30
 8007f5c:	f805 6b01 	strb.w	r6, [r5], #1
 8007f60:	4652      	mov	r2, sl
 8007f62:	465b      	mov	r3, fp
 8007f64:	4680      	mov	r8, r0
 8007f66:	4689      	mov	r9, r1
 8007f68:	f7f8 fdb8 	bl	8000adc <__aeabi_dcmplt>
 8007f6c:	2800      	cmp	r0, #0
 8007f6e:	d163      	bne.n	8008038 <_dtoa_r+0x608>
 8007f70:	4642      	mov	r2, r8
 8007f72:	464b      	mov	r3, r9
 8007f74:	4936      	ldr	r1, [pc, #216]	; (8008050 <_dtoa_r+0x620>)
 8007f76:	2000      	movs	r0, #0
 8007f78:	f7f8 f986 	bl	8000288 <__aeabi_dsub>
 8007f7c:	4652      	mov	r2, sl
 8007f7e:	465b      	mov	r3, fp
 8007f80:	f7f8 fdac 	bl	8000adc <__aeabi_dcmplt>
 8007f84:	2800      	cmp	r0, #0
 8007f86:	f040 80b5 	bne.w	80080f4 <_dtoa_r+0x6c4>
 8007f8a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007f8c:	429d      	cmp	r5, r3
 8007f8e:	d081      	beq.n	8007e94 <_dtoa_r+0x464>
 8007f90:	4b30      	ldr	r3, [pc, #192]	; (8008054 <_dtoa_r+0x624>)
 8007f92:	2200      	movs	r2, #0
 8007f94:	4650      	mov	r0, sl
 8007f96:	4659      	mov	r1, fp
 8007f98:	f7f8 fb2e 	bl	80005f8 <__aeabi_dmul>
 8007f9c:	4b2d      	ldr	r3, [pc, #180]	; (8008054 <_dtoa_r+0x624>)
 8007f9e:	4682      	mov	sl, r0
 8007fa0:	468b      	mov	fp, r1
 8007fa2:	4640      	mov	r0, r8
 8007fa4:	4649      	mov	r1, r9
 8007fa6:	2200      	movs	r2, #0
 8007fa8:	f7f8 fb26 	bl	80005f8 <__aeabi_dmul>
 8007fac:	4680      	mov	r8, r0
 8007fae:	4689      	mov	r9, r1
 8007fb0:	e7c6      	b.n	8007f40 <_dtoa_r+0x510>
 8007fb2:	4650      	mov	r0, sl
 8007fb4:	4659      	mov	r1, fp
 8007fb6:	f7f8 fb1f 	bl	80005f8 <__aeabi_dmul>
 8007fba:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007fbc:	9d01      	ldr	r5, [sp, #4]
 8007fbe:	930f      	str	r3, [sp, #60]	; 0x3c
 8007fc0:	4682      	mov	sl, r0
 8007fc2:	468b      	mov	fp, r1
 8007fc4:	4649      	mov	r1, r9
 8007fc6:	4640      	mov	r0, r8
 8007fc8:	f7f8 fdc6 	bl	8000b58 <__aeabi_d2iz>
 8007fcc:	4606      	mov	r6, r0
 8007fce:	f7f8 faa9 	bl	8000524 <__aeabi_i2d>
 8007fd2:	3630      	adds	r6, #48	; 0x30
 8007fd4:	4602      	mov	r2, r0
 8007fd6:	460b      	mov	r3, r1
 8007fd8:	4640      	mov	r0, r8
 8007fda:	4649      	mov	r1, r9
 8007fdc:	f7f8 f954 	bl	8000288 <__aeabi_dsub>
 8007fe0:	f805 6b01 	strb.w	r6, [r5], #1
 8007fe4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007fe6:	429d      	cmp	r5, r3
 8007fe8:	4680      	mov	r8, r0
 8007fea:	4689      	mov	r9, r1
 8007fec:	f04f 0200 	mov.w	r2, #0
 8007ff0:	d124      	bne.n	800803c <_dtoa_r+0x60c>
 8007ff2:	4b1b      	ldr	r3, [pc, #108]	; (8008060 <_dtoa_r+0x630>)
 8007ff4:	4650      	mov	r0, sl
 8007ff6:	4659      	mov	r1, fp
 8007ff8:	f7f8 f948 	bl	800028c <__adddf3>
 8007ffc:	4602      	mov	r2, r0
 8007ffe:	460b      	mov	r3, r1
 8008000:	4640      	mov	r0, r8
 8008002:	4649      	mov	r1, r9
 8008004:	f7f8 fd88 	bl	8000b18 <__aeabi_dcmpgt>
 8008008:	2800      	cmp	r0, #0
 800800a:	d173      	bne.n	80080f4 <_dtoa_r+0x6c4>
 800800c:	4652      	mov	r2, sl
 800800e:	465b      	mov	r3, fp
 8008010:	4913      	ldr	r1, [pc, #76]	; (8008060 <_dtoa_r+0x630>)
 8008012:	2000      	movs	r0, #0
 8008014:	f7f8 f938 	bl	8000288 <__aeabi_dsub>
 8008018:	4602      	mov	r2, r0
 800801a:	460b      	mov	r3, r1
 800801c:	4640      	mov	r0, r8
 800801e:	4649      	mov	r1, r9
 8008020:	f7f8 fd5c 	bl	8000adc <__aeabi_dcmplt>
 8008024:	2800      	cmp	r0, #0
 8008026:	f43f af35 	beq.w	8007e94 <_dtoa_r+0x464>
 800802a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800802c:	1e6b      	subs	r3, r5, #1
 800802e:	930f      	str	r3, [sp, #60]	; 0x3c
 8008030:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8008034:	2b30      	cmp	r3, #48	; 0x30
 8008036:	d0f8      	beq.n	800802a <_dtoa_r+0x5fa>
 8008038:	9700      	str	r7, [sp, #0]
 800803a:	e049      	b.n	80080d0 <_dtoa_r+0x6a0>
 800803c:	4b05      	ldr	r3, [pc, #20]	; (8008054 <_dtoa_r+0x624>)
 800803e:	f7f8 fadb 	bl	80005f8 <__aeabi_dmul>
 8008042:	4680      	mov	r8, r0
 8008044:	4689      	mov	r9, r1
 8008046:	e7bd      	b.n	8007fc4 <_dtoa_r+0x594>
 8008048:	0800c1a8 	.word	0x0800c1a8
 800804c:	0800c180 	.word	0x0800c180
 8008050:	3ff00000 	.word	0x3ff00000
 8008054:	40240000 	.word	0x40240000
 8008058:	401c0000 	.word	0x401c0000
 800805c:	40140000 	.word	0x40140000
 8008060:	3fe00000 	.word	0x3fe00000
 8008064:	9d01      	ldr	r5, [sp, #4]
 8008066:	4656      	mov	r6, sl
 8008068:	465f      	mov	r7, fp
 800806a:	4642      	mov	r2, r8
 800806c:	464b      	mov	r3, r9
 800806e:	4630      	mov	r0, r6
 8008070:	4639      	mov	r1, r7
 8008072:	f7f8 fbeb 	bl	800084c <__aeabi_ddiv>
 8008076:	f7f8 fd6f 	bl	8000b58 <__aeabi_d2iz>
 800807a:	4682      	mov	sl, r0
 800807c:	f7f8 fa52 	bl	8000524 <__aeabi_i2d>
 8008080:	4642      	mov	r2, r8
 8008082:	464b      	mov	r3, r9
 8008084:	f7f8 fab8 	bl	80005f8 <__aeabi_dmul>
 8008088:	4602      	mov	r2, r0
 800808a:	460b      	mov	r3, r1
 800808c:	4630      	mov	r0, r6
 800808e:	4639      	mov	r1, r7
 8008090:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8008094:	f7f8 f8f8 	bl	8000288 <__aeabi_dsub>
 8008098:	f805 6b01 	strb.w	r6, [r5], #1
 800809c:	9e01      	ldr	r6, [sp, #4]
 800809e:	9f03      	ldr	r7, [sp, #12]
 80080a0:	1bae      	subs	r6, r5, r6
 80080a2:	42b7      	cmp	r7, r6
 80080a4:	4602      	mov	r2, r0
 80080a6:	460b      	mov	r3, r1
 80080a8:	d135      	bne.n	8008116 <_dtoa_r+0x6e6>
 80080aa:	f7f8 f8ef 	bl	800028c <__adddf3>
 80080ae:	4642      	mov	r2, r8
 80080b0:	464b      	mov	r3, r9
 80080b2:	4606      	mov	r6, r0
 80080b4:	460f      	mov	r7, r1
 80080b6:	f7f8 fd2f 	bl	8000b18 <__aeabi_dcmpgt>
 80080ba:	b9d0      	cbnz	r0, 80080f2 <_dtoa_r+0x6c2>
 80080bc:	4642      	mov	r2, r8
 80080be:	464b      	mov	r3, r9
 80080c0:	4630      	mov	r0, r6
 80080c2:	4639      	mov	r1, r7
 80080c4:	f7f8 fd00 	bl	8000ac8 <__aeabi_dcmpeq>
 80080c8:	b110      	cbz	r0, 80080d0 <_dtoa_r+0x6a0>
 80080ca:	f01a 0f01 	tst.w	sl, #1
 80080ce:	d110      	bne.n	80080f2 <_dtoa_r+0x6c2>
 80080d0:	4620      	mov	r0, r4
 80080d2:	ee18 1a10 	vmov	r1, s16
 80080d6:	f001 f8c3 	bl	8009260 <_Bfree>
 80080da:	2300      	movs	r3, #0
 80080dc:	9800      	ldr	r0, [sp, #0]
 80080de:	702b      	strb	r3, [r5, #0]
 80080e0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80080e2:	3001      	adds	r0, #1
 80080e4:	6018      	str	r0, [r3, #0]
 80080e6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80080e8:	2b00      	cmp	r3, #0
 80080ea:	f43f acf1 	beq.w	8007ad0 <_dtoa_r+0xa0>
 80080ee:	601d      	str	r5, [r3, #0]
 80080f0:	e4ee      	b.n	8007ad0 <_dtoa_r+0xa0>
 80080f2:	9f00      	ldr	r7, [sp, #0]
 80080f4:	462b      	mov	r3, r5
 80080f6:	461d      	mov	r5, r3
 80080f8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80080fc:	2a39      	cmp	r2, #57	; 0x39
 80080fe:	d106      	bne.n	800810e <_dtoa_r+0x6de>
 8008100:	9a01      	ldr	r2, [sp, #4]
 8008102:	429a      	cmp	r2, r3
 8008104:	d1f7      	bne.n	80080f6 <_dtoa_r+0x6c6>
 8008106:	9901      	ldr	r1, [sp, #4]
 8008108:	2230      	movs	r2, #48	; 0x30
 800810a:	3701      	adds	r7, #1
 800810c:	700a      	strb	r2, [r1, #0]
 800810e:	781a      	ldrb	r2, [r3, #0]
 8008110:	3201      	adds	r2, #1
 8008112:	701a      	strb	r2, [r3, #0]
 8008114:	e790      	b.n	8008038 <_dtoa_r+0x608>
 8008116:	4ba6      	ldr	r3, [pc, #664]	; (80083b0 <_dtoa_r+0x980>)
 8008118:	2200      	movs	r2, #0
 800811a:	f7f8 fa6d 	bl	80005f8 <__aeabi_dmul>
 800811e:	2200      	movs	r2, #0
 8008120:	2300      	movs	r3, #0
 8008122:	4606      	mov	r6, r0
 8008124:	460f      	mov	r7, r1
 8008126:	f7f8 fccf 	bl	8000ac8 <__aeabi_dcmpeq>
 800812a:	2800      	cmp	r0, #0
 800812c:	d09d      	beq.n	800806a <_dtoa_r+0x63a>
 800812e:	e7cf      	b.n	80080d0 <_dtoa_r+0x6a0>
 8008130:	9a08      	ldr	r2, [sp, #32]
 8008132:	2a00      	cmp	r2, #0
 8008134:	f000 80d7 	beq.w	80082e6 <_dtoa_r+0x8b6>
 8008138:	9a06      	ldr	r2, [sp, #24]
 800813a:	2a01      	cmp	r2, #1
 800813c:	f300 80ba 	bgt.w	80082b4 <_dtoa_r+0x884>
 8008140:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008142:	2a00      	cmp	r2, #0
 8008144:	f000 80b2 	beq.w	80082ac <_dtoa_r+0x87c>
 8008148:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800814c:	9e07      	ldr	r6, [sp, #28]
 800814e:	9d04      	ldr	r5, [sp, #16]
 8008150:	9a04      	ldr	r2, [sp, #16]
 8008152:	441a      	add	r2, r3
 8008154:	9204      	str	r2, [sp, #16]
 8008156:	9a05      	ldr	r2, [sp, #20]
 8008158:	2101      	movs	r1, #1
 800815a:	441a      	add	r2, r3
 800815c:	4620      	mov	r0, r4
 800815e:	9205      	str	r2, [sp, #20]
 8008160:	f001 f980 	bl	8009464 <__i2b>
 8008164:	4607      	mov	r7, r0
 8008166:	2d00      	cmp	r5, #0
 8008168:	dd0c      	ble.n	8008184 <_dtoa_r+0x754>
 800816a:	9b05      	ldr	r3, [sp, #20]
 800816c:	2b00      	cmp	r3, #0
 800816e:	dd09      	ble.n	8008184 <_dtoa_r+0x754>
 8008170:	42ab      	cmp	r3, r5
 8008172:	9a04      	ldr	r2, [sp, #16]
 8008174:	bfa8      	it	ge
 8008176:	462b      	movge	r3, r5
 8008178:	1ad2      	subs	r2, r2, r3
 800817a:	9204      	str	r2, [sp, #16]
 800817c:	9a05      	ldr	r2, [sp, #20]
 800817e:	1aed      	subs	r5, r5, r3
 8008180:	1ad3      	subs	r3, r2, r3
 8008182:	9305      	str	r3, [sp, #20]
 8008184:	9b07      	ldr	r3, [sp, #28]
 8008186:	b31b      	cbz	r3, 80081d0 <_dtoa_r+0x7a0>
 8008188:	9b08      	ldr	r3, [sp, #32]
 800818a:	2b00      	cmp	r3, #0
 800818c:	f000 80af 	beq.w	80082ee <_dtoa_r+0x8be>
 8008190:	2e00      	cmp	r6, #0
 8008192:	dd13      	ble.n	80081bc <_dtoa_r+0x78c>
 8008194:	4639      	mov	r1, r7
 8008196:	4632      	mov	r2, r6
 8008198:	4620      	mov	r0, r4
 800819a:	f001 fa23 	bl	80095e4 <__pow5mult>
 800819e:	ee18 2a10 	vmov	r2, s16
 80081a2:	4601      	mov	r1, r0
 80081a4:	4607      	mov	r7, r0
 80081a6:	4620      	mov	r0, r4
 80081a8:	f001 f972 	bl	8009490 <__multiply>
 80081ac:	ee18 1a10 	vmov	r1, s16
 80081b0:	4680      	mov	r8, r0
 80081b2:	4620      	mov	r0, r4
 80081b4:	f001 f854 	bl	8009260 <_Bfree>
 80081b8:	ee08 8a10 	vmov	s16, r8
 80081bc:	9b07      	ldr	r3, [sp, #28]
 80081be:	1b9a      	subs	r2, r3, r6
 80081c0:	d006      	beq.n	80081d0 <_dtoa_r+0x7a0>
 80081c2:	ee18 1a10 	vmov	r1, s16
 80081c6:	4620      	mov	r0, r4
 80081c8:	f001 fa0c 	bl	80095e4 <__pow5mult>
 80081cc:	ee08 0a10 	vmov	s16, r0
 80081d0:	2101      	movs	r1, #1
 80081d2:	4620      	mov	r0, r4
 80081d4:	f001 f946 	bl	8009464 <__i2b>
 80081d8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80081da:	2b00      	cmp	r3, #0
 80081dc:	4606      	mov	r6, r0
 80081de:	f340 8088 	ble.w	80082f2 <_dtoa_r+0x8c2>
 80081e2:	461a      	mov	r2, r3
 80081e4:	4601      	mov	r1, r0
 80081e6:	4620      	mov	r0, r4
 80081e8:	f001 f9fc 	bl	80095e4 <__pow5mult>
 80081ec:	9b06      	ldr	r3, [sp, #24]
 80081ee:	2b01      	cmp	r3, #1
 80081f0:	4606      	mov	r6, r0
 80081f2:	f340 8081 	ble.w	80082f8 <_dtoa_r+0x8c8>
 80081f6:	f04f 0800 	mov.w	r8, #0
 80081fa:	6933      	ldr	r3, [r6, #16]
 80081fc:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8008200:	6918      	ldr	r0, [r3, #16]
 8008202:	f001 f8df 	bl	80093c4 <__hi0bits>
 8008206:	f1c0 0020 	rsb	r0, r0, #32
 800820a:	9b05      	ldr	r3, [sp, #20]
 800820c:	4418      	add	r0, r3
 800820e:	f010 001f 	ands.w	r0, r0, #31
 8008212:	f000 8092 	beq.w	800833a <_dtoa_r+0x90a>
 8008216:	f1c0 0320 	rsb	r3, r0, #32
 800821a:	2b04      	cmp	r3, #4
 800821c:	f340 808a 	ble.w	8008334 <_dtoa_r+0x904>
 8008220:	f1c0 001c 	rsb	r0, r0, #28
 8008224:	9b04      	ldr	r3, [sp, #16]
 8008226:	4403      	add	r3, r0
 8008228:	9304      	str	r3, [sp, #16]
 800822a:	9b05      	ldr	r3, [sp, #20]
 800822c:	4403      	add	r3, r0
 800822e:	4405      	add	r5, r0
 8008230:	9305      	str	r3, [sp, #20]
 8008232:	9b04      	ldr	r3, [sp, #16]
 8008234:	2b00      	cmp	r3, #0
 8008236:	dd07      	ble.n	8008248 <_dtoa_r+0x818>
 8008238:	ee18 1a10 	vmov	r1, s16
 800823c:	461a      	mov	r2, r3
 800823e:	4620      	mov	r0, r4
 8008240:	f001 fa2a 	bl	8009698 <__lshift>
 8008244:	ee08 0a10 	vmov	s16, r0
 8008248:	9b05      	ldr	r3, [sp, #20]
 800824a:	2b00      	cmp	r3, #0
 800824c:	dd05      	ble.n	800825a <_dtoa_r+0x82a>
 800824e:	4631      	mov	r1, r6
 8008250:	461a      	mov	r2, r3
 8008252:	4620      	mov	r0, r4
 8008254:	f001 fa20 	bl	8009698 <__lshift>
 8008258:	4606      	mov	r6, r0
 800825a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800825c:	2b00      	cmp	r3, #0
 800825e:	d06e      	beq.n	800833e <_dtoa_r+0x90e>
 8008260:	ee18 0a10 	vmov	r0, s16
 8008264:	4631      	mov	r1, r6
 8008266:	f001 fa87 	bl	8009778 <__mcmp>
 800826a:	2800      	cmp	r0, #0
 800826c:	da67      	bge.n	800833e <_dtoa_r+0x90e>
 800826e:	9b00      	ldr	r3, [sp, #0]
 8008270:	3b01      	subs	r3, #1
 8008272:	ee18 1a10 	vmov	r1, s16
 8008276:	9300      	str	r3, [sp, #0]
 8008278:	220a      	movs	r2, #10
 800827a:	2300      	movs	r3, #0
 800827c:	4620      	mov	r0, r4
 800827e:	f001 f811 	bl	80092a4 <__multadd>
 8008282:	9b08      	ldr	r3, [sp, #32]
 8008284:	ee08 0a10 	vmov	s16, r0
 8008288:	2b00      	cmp	r3, #0
 800828a:	f000 81b1 	beq.w	80085f0 <_dtoa_r+0xbc0>
 800828e:	2300      	movs	r3, #0
 8008290:	4639      	mov	r1, r7
 8008292:	220a      	movs	r2, #10
 8008294:	4620      	mov	r0, r4
 8008296:	f001 f805 	bl	80092a4 <__multadd>
 800829a:	9b02      	ldr	r3, [sp, #8]
 800829c:	2b00      	cmp	r3, #0
 800829e:	4607      	mov	r7, r0
 80082a0:	f300 808e 	bgt.w	80083c0 <_dtoa_r+0x990>
 80082a4:	9b06      	ldr	r3, [sp, #24]
 80082a6:	2b02      	cmp	r3, #2
 80082a8:	dc51      	bgt.n	800834e <_dtoa_r+0x91e>
 80082aa:	e089      	b.n	80083c0 <_dtoa_r+0x990>
 80082ac:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80082ae:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80082b2:	e74b      	b.n	800814c <_dtoa_r+0x71c>
 80082b4:	9b03      	ldr	r3, [sp, #12]
 80082b6:	1e5e      	subs	r6, r3, #1
 80082b8:	9b07      	ldr	r3, [sp, #28]
 80082ba:	42b3      	cmp	r3, r6
 80082bc:	bfbf      	itttt	lt
 80082be:	9b07      	ldrlt	r3, [sp, #28]
 80082c0:	9607      	strlt	r6, [sp, #28]
 80082c2:	1af2      	sublt	r2, r6, r3
 80082c4:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 80082c6:	bfb6      	itet	lt
 80082c8:	189b      	addlt	r3, r3, r2
 80082ca:	1b9e      	subge	r6, r3, r6
 80082cc:	930a      	strlt	r3, [sp, #40]	; 0x28
 80082ce:	9b03      	ldr	r3, [sp, #12]
 80082d0:	bfb8      	it	lt
 80082d2:	2600      	movlt	r6, #0
 80082d4:	2b00      	cmp	r3, #0
 80082d6:	bfb7      	itett	lt
 80082d8:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 80082dc:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 80082e0:	1a9d      	sublt	r5, r3, r2
 80082e2:	2300      	movlt	r3, #0
 80082e4:	e734      	b.n	8008150 <_dtoa_r+0x720>
 80082e6:	9e07      	ldr	r6, [sp, #28]
 80082e8:	9d04      	ldr	r5, [sp, #16]
 80082ea:	9f08      	ldr	r7, [sp, #32]
 80082ec:	e73b      	b.n	8008166 <_dtoa_r+0x736>
 80082ee:	9a07      	ldr	r2, [sp, #28]
 80082f0:	e767      	b.n	80081c2 <_dtoa_r+0x792>
 80082f2:	9b06      	ldr	r3, [sp, #24]
 80082f4:	2b01      	cmp	r3, #1
 80082f6:	dc18      	bgt.n	800832a <_dtoa_r+0x8fa>
 80082f8:	f1ba 0f00 	cmp.w	sl, #0
 80082fc:	d115      	bne.n	800832a <_dtoa_r+0x8fa>
 80082fe:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008302:	b993      	cbnz	r3, 800832a <_dtoa_r+0x8fa>
 8008304:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8008308:	0d1b      	lsrs	r3, r3, #20
 800830a:	051b      	lsls	r3, r3, #20
 800830c:	b183      	cbz	r3, 8008330 <_dtoa_r+0x900>
 800830e:	9b04      	ldr	r3, [sp, #16]
 8008310:	3301      	adds	r3, #1
 8008312:	9304      	str	r3, [sp, #16]
 8008314:	9b05      	ldr	r3, [sp, #20]
 8008316:	3301      	adds	r3, #1
 8008318:	9305      	str	r3, [sp, #20]
 800831a:	f04f 0801 	mov.w	r8, #1
 800831e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008320:	2b00      	cmp	r3, #0
 8008322:	f47f af6a 	bne.w	80081fa <_dtoa_r+0x7ca>
 8008326:	2001      	movs	r0, #1
 8008328:	e76f      	b.n	800820a <_dtoa_r+0x7da>
 800832a:	f04f 0800 	mov.w	r8, #0
 800832e:	e7f6      	b.n	800831e <_dtoa_r+0x8ee>
 8008330:	4698      	mov	r8, r3
 8008332:	e7f4      	b.n	800831e <_dtoa_r+0x8ee>
 8008334:	f43f af7d 	beq.w	8008232 <_dtoa_r+0x802>
 8008338:	4618      	mov	r0, r3
 800833a:	301c      	adds	r0, #28
 800833c:	e772      	b.n	8008224 <_dtoa_r+0x7f4>
 800833e:	9b03      	ldr	r3, [sp, #12]
 8008340:	2b00      	cmp	r3, #0
 8008342:	dc37      	bgt.n	80083b4 <_dtoa_r+0x984>
 8008344:	9b06      	ldr	r3, [sp, #24]
 8008346:	2b02      	cmp	r3, #2
 8008348:	dd34      	ble.n	80083b4 <_dtoa_r+0x984>
 800834a:	9b03      	ldr	r3, [sp, #12]
 800834c:	9302      	str	r3, [sp, #8]
 800834e:	9b02      	ldr	r3, [sp, #8]
 8008350:	b96b      	cbnz	r3, 800836e <_dtoa_r+0x93e>
 8008352:	4631      	mov	r1, r6
 8008354:	2205      	movs	r2, #5
 8008356:	4620      	mov	r0, r4
 8008358:	f000 ffa4 	bl	80092a4 <__multadd>
 800835c:	4601      	mov	r1, r0
 800835e:	4606      	mov	r6, r0
 8008360:	ee18 0a10 	vmov	r0, s16
 8008364:	f001 fa08 	bl	8009778 <__mcmp>
 8008368:	2800      	cmp	r0, #0
 800836a:	f73f adbb 	bgt.w	8007ee4 <_dtoa_r+0x4b4>
 800836e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008370:	9d01      	ldr	r5, [sp, #4]
 8008372:	43db      	mvns	r3, r3
 8008374:	9300      	str	r3, [sp, #0]
 8008376:	f04f 0800 	mov.w	r8, #0
 800837a:	4631      	mov	r1, r6
 800837c:	4620      	mov	r0, r4
 800837e:	f000 ff6f 	bl	8009260 <_Bfree>
 8008382:	2f00      	cmp	r7, #0
 8008384:	f43f aea4 	beq.w	80080d0 <_dtoa_r+0x6a0>
 8008388:	f1b8 0f00 	cmp.w	r8, #0
 800838c:	d005      	beq.n	800839a <_dtoa_r+0x96a>
 800838e:	45b8      	cmp	r8, r7
 8008390:	d003      	beq.n	800839a <_dtoa_r+0x96a>
 8008392:	4641      	mov	r1, r8
 8008394:	4620      	mov	r0, r4
 8008396:	f000 ff63 	bl	8009260 <_Bfree>
 800839a:	4639      	mov	r1, r7
 800839c:	4620      	mov	r0, r4
 800839e:	f000 ff5f 	bl	8009260 <_Bfree>
 80083a2:	e695      	b.n	80080d0 <_dtoa_r+0x6a0>
 80083a4:	2600      	movs	r6, #0
 80083a6:	4637      	mov	r7, r6
 80083a8:	e7e1      	b.n	800836e <_dtoa_r+0x93e>
 80083aa:	9700      	str	r7, [sp, #0]
 80083ac:	4637      	mov	r7, r6
 80083ae:	e599      	b.n	8007ee4 <_dtoa_r+0x4b4>
 80083b0:	40240000 	.word	0x40240000
 80083b4:	9b08      	ldr	r3, [sp, #32]
 80083b6:	2b00      	cmp	r3, #0
 80083b8:	f000 80ca 	beq.w	8008550 <_dtoa_r+0xb20>
 80083bc:	9b03      	ldr	r3, [sp, #12]
 80083be:	9302      	str	r3, [sp, #8]
 80083c0:	2d00      	cmp	r5, #0
 80083c2:	dd05      	ble.n	80083d0 <_dtoa_r+0x9a0>
 80083c4:	4639      	mov	r1, r7
 80083c6:	462a      	mov	r2, r5
 80083c8:	4620      	mov	r0, r4
 80083ca:	f001 f965 	bl	8009698 <__lshift>
 80083ce:	4607      	mov	r7, r0
 80083d0:	f1b8 0f00 	cmp.w	r8, #0
 80083d4:	d05b      	beq.n	800848e <_dtoa_r+0xa5e>
 80083d6:	6879      	ldr	r1, [r7, #4]
 80083d8:	4620      	mov	r0, r4
 80083da:	f000 ff01 	bl	80091e0 <_Balloc>
 80083de:	4605      	mov	r5, r0
 80083e0:	b928      	cbnz	r0, 80083ee <_dtoa_r+0x9be>
 80083e2:	4b87      	ldr	r3, [pc, #540]	; (8008600 <_dtoa_r+0xbd0>)
 80083e4:	4602      	mov	r2, r0
 80083e6:	f240 21ea 	movw	r1, #746	; 0x2ea
 80083ea:	f7ff bb3b 	b.w	8007a64 <_dtoa_r+0x34>
 80083ee:	693a      	ldr	r2, [r7, #16]
 80083f0:	3202      	adds	r2, #2
 80083f2:	0092      	lsls	r2, r2, #2
 80083f4:	f107 010c 	add.w	r1, r7, #12
 80083f8:	300c      	adds	r0, #12
 80083fa:	f000 fee3 	bl	80091c4 <memcpy>
 80083fe:	2201      	movs	r2, #1
 8008400:	4629      	mov	r1, r5
 8008402:	4620      	mov	r0, r4
 8008404:	f001 f948 	bl	8009698 <__lshift>
 8008408:	9b01      	ldr	r3, [sp, #4]
 800840a:	f103 0901 	add.w	r9, r3, #1
 800840e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8008412:	4413      	add	r3, r2
 8008414:	9305      	str	r3, [sp, #20]
 8008416:	f00a 0301 	and.w	r3, sl, #1
 800841a:	46b8      	mov	r8, r7
 800841c:	9304      	str	r3, [sp, #16]
 800841e:	4607      	mov	r7, r0
 8008420:	4631      	mov	r1, r6
 8008422:	ee18 0a10 	vmov	r0, s16
 8008426:	f7ff fa77 	bl	8007918 <quorem>
 800842a:	4641      	mov	r1, r8
 800842c:	9002      	str	r0, [sp, #8]
 800842e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8008432:	ee18 0a10 	vmov	r0, s16
 8008436:	f001 f99f 	bl	8009778 <__mcmp>
 800843a:	463a      	mov	r2, r7
 800843c:	9003      	str	r0, [sp, #12]
 800843e:	4631      	mov	r1, r6
 8008440:	4620      	mov	r0, r4
 8008442:	f001 f9b5 	bl	80097b0 <__mdiff>
 8008446:	68c2      	ldr	r2, [r0, #12]
 8008448:	f109 3bff 	add.w	fp, r9, #4294967295
 800844c:	4605      	mov	r5, r0
 800844e:	bb02      	cbnz	r2, 8008492 <_dtoa_r+0xa62>
 8008450:	4601      	mov	r1, r0
 8008452:	ee18 0a10 	vmov	r0, s16
 8008456:	f001 f98f 	bl	8009778 <__mcmp>
 800845a:	4602      	mov	r2, r0
 800845c:	4629      	mov	r1, r5
 800845e:	4620      	mov	r0, r4
 8008460:	9207      	str	r2, [sp, #28]
 8008462:	f000 fefd 	bl	8009260 <_Bfree>
 8008466:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800846a:	ea43 0102 	orr.w	r1, r3, r2
 800846e:	9b04      	ldr	r3, [sp, #16]
 8008470:	430b      	orrs	r3, r1
 8008472:	464d      	mov	r5, r9
 8008474:	d10f      	bne.n	8008496 <_dtoa_r+0xa66>
 8008476:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800847a:	d02a      	beq.n	80084d2 <_dtoa_r+0xaa2>
 800847c:	9b03      	ldr	r3, [sp, #12]
 800847e:	2b00      	cmp	r3, #0
 8008480:	dd02      	ble.n	8008488 <_dtoa_r+0xa58>
 8008482:	9b02      	ldr	r3, [sp, #8]
 8008484:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8008488:	f88b a000 	strb.w	sl, [fp]
 800848c:	e775      	b.n	800837a <_dtoa_r+0x94a>
 800848e:	4638      	mov	r0, r7
 8008490:	e7ba      	b.n	8008408 <_dtoa_r+0x9d8>
 8008492:	2201      	movs	r2, #1
 8008494:	e7e2      	b.n	800845c <_dtoa_r+0xa2c>
 8008496:	9b03      	ldr	r3, [sp, #12]
 8008498:	2b00      	cmp	r3, #0
 800849a:	db04      	blt.n	80084a6 <_dtoa_r+0xa76>
 800849c:	9906      	ldr	r1, [sp, #24]
 800849e:	430b      	orrs	r3, r1
 80084a0:	9904      	ldr	r1, [sp, #16]
 80084a2:	430b      	orrs	r3, r1
 80084a4:	d122      	bne.n	80084ec <_dtoa_r+0xabc>
 80084a6:	2a00      	cmp	r2, #0
 80084a8:	ddee      	ble.n	8008488 <_dtoa_r+0xa58>
 80084aa:	ee18 1a10 	vmov	r1, s16
 80084ae:	2201      	movs	r2, #1
 80084b0:	4620      	mov	r0, r4
 80084b2:	f001 f8f1 	bl	8009698 <__lshift>
 80084b6:	4631      	mov	r1, r6
 80084b8:	ee08 0a10 	vmov	s16, r0
 80084bc:	f001 f95c 	bl	8009778 <__mcmp>
 80084c0:	2800      	cmp	r0, #0
 80084c2:	dc03      	bgt.n	80084cc <_dtoa_r+0xa9c>
 80084c4:	d1e0      	bne.n	8008488 <_dtoa_r+0xa58>
 80084c6:	f01a 0f01 	tst.w	sl, #1
 80084ca:	d0dd      	beq.n	8008488 <_dtoa_r+0xa58>
 80084cc:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80084d0:	d1d7      	bne.n	8008482 <_dtoa_r+0xa52>
 80084d2:	2339      	movs	r3, #57	; 0x39
 80084d4:	f88b 3000 	strb.w	r3, [fp]
 80084d8:	462b      	mov	r3, r5
 80084da:	461d      	mov	r5, r3
 80084dc:	3b01      	subs	r3, #1
 80084de:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80084e2:	2a39      	cmp	r2, #57	; 0x39
 80084e4:	d071      	beq.n	80085ca <_dtoa_r+0xb9a>
 80084e6:	3201      	adds	r2, #1
 80084e8:	701a      	strb	r2, [r3, #0]
 80084ea:	e746      	b.n	800837a <_dtoa_r+0x94a>
 80084ec:	2a00      	cmp	r2, #0
 80084ee:	dd07      	ble.n	8008500 <_dtoa_r+0xad0>
 80084f0:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80084f4:	d0ed      	beq.n	80084d2 <_dtoa_r+0xaa2>
 80084f6:	f10a 0301 	add.w	r3, sl, #1
 80084fa:	f88b 3000 	strb.w	r3, [fp]
 80084fe:	e73c      	b.n	800837a <_dtoa_r+0x94a>
 8008500:	9b05      	ldr	r3, [sp, #20]
 8008502:	f809 ac01 	strb.w	sl, [r9, #-1]
 8008506:	4599      	cmp	r9, r3
 8008508:	d047      	beq.n	800859a <_dtoa_r+0xb6a>
 800850a:	ee18 1a10 	vmov	r1, s16
 800850e:	2300      	movs	r3, #0
 8008510:	220a      	movs	r2, #10
 8008512:	4620      	mov	r0, r4
 8008514:	f000 fec6 	bl	80092a4 <__multadd>
 8008518:	45b8      	cmp	r8, r7
 800851a:	ee08 0a10 	vmov	s16, r0
 800851e:	f04f 0300 	mov.w	r3, #0
 8008522:	f04f 020a 	mov.w	r2, #10
 8008526:	4641      	mov	r1, r8
 8008528:	4620      	mov	r0, r4
 800852a:	d106      	bne.n	800853a <_dtoa_r+0xb0a>
 800852c:	f000 feba 	bl	80092a4 <__multadd>
 8008530:	4680      	mov	r8, r0
 8008532:	4607      	mov	r7, r0
 8008534:	f109 0901 	add.w	r9, r9, #1
 8008538:	e772      	b.n	8008420 <_dtoa_r+0x9f0>
 800853a:	f000 feb3 	bl	80092a4 <__multadd>
 800853e:	4639      	mov	r1, r7
 8008540:	4680      	mov	r8, r0
 8008542:	2300      	movs	r3, #0
 8008544:	220a      	movs	r2, #10
 8008546:	4620      	mov	r0, r4
 8008548:	f000 feac 	bl	80092a4 <__multadd>
 800854c:	4607      	mov	r7, r0
 800854e:	e7f1      	b.n	8008534 <_dtoa_r+0xb04>
 8008550:	9b03      	ldr	r3, [sp, #12]
 8008552:	9302      	str	r3, [sp, #8]
 8008554:	9d01      	ldr	r5, [sp, #4]
 8008556:	ee18 0a10 	vmov	r0, s16
 800855a:	4631      	mov	r1, r6
 800855c:	f7ff f9dc 	bl	8007918 <quorem>
 8008560:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8008564:	9b01      	ldr	r3, [sp, #4]
 8008566:	f805 ab01 	strb.w	sl, [r5], #1
 800856a:	1aea      	subs	r2, r5, r3
 800856c:	9b02      	ldr	r3, [sp, #8]
 800856e:	4293      	cmp	r3, r2
 8008570:	dd09      	ble.n	8008586 <_dtoa_r+0xb56>
 8008572:	ee18 1a10 	vmov	r1, s16
 8008576:	2300      	movs	r3, #0
 8008578:	220a      	movs	r2, #10
 800857a:	4620      	mov	r0, r4
 800857c:	f000 fe92 	bl	80092a4 <__multadd>
 8008580:	ee08 0a10 	vmov	s16, r0
 8008584:	e7e7      	b.n	8008556 <_dtoa_r+0xb26>
 8008586:	9b02      	ldr	r3, [sp, #8]
 8008588:	2b00      	cmp	r3, #0
 800858a:	bfc8      	it	gt
 800858c:	461d      	movgt	r5, r3
 800858e:	9b01      	ldr	r3, [sp, #4]
 8008590:	bfd8      	it	le
 8008592:	2501      	movle	r5, #1
 8008594:	441d      	add	r5, r3
 8008596:	f04f 0800 	mov.w	r8, #0
 800859a:	ee18 1a10 	vmov	r1, s16
 800859e:	2201      	movs	r2, #1
 80085a0:	4620      	mov	r0, r4
 80085a2:	f001 f879 	bl	8009698 <__lshift>
 80085a6:	4631      	mov	r1, r6
 80085a8:	ee08 0a10 	vmov	s16, r0
 80085ac:	f001 f8e4 	bl	8009778 <__mcmp>
 80085b0:	2800      	cmp	r0, #0
 80085b2:	dc91      	bgt.n	80084d8 <_dtoa_r+0xaa8>
 80085b4:	d102      	bne.n	80085bc <_dtoa_r+0xb8c>
 80085b6:	f01a 0f01 	tst.w	sl, #1
 80085ba:	d18d      	bne.n	80084d8 <_dtoa_r+0xaa8>
 80085bc:	462b      	mov	r3, r5
 80085be:	461d      	mov	r5, r3
 80085c0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80085c4:	2a30      	cmp	r2, #48	; 0x30
 80085c6:	d0fa      	beq.n	80085be <_dtoa_r+0xb8e>
 80085c8:	e6d7      	b.n	800837a <_dtoa_r+0x94a>
 80085ca:	9a01      	ldr	r2, [sp, #4]
 80085cc:	429a      	cmp	r2, r3
 80085ce:	d184      	bne.n	80084da <_dtoa_r+0xaaa>
 80085d0:	9b00      	ldr	r3, [sp, #0]
 80085d2:	3301      	adds	r3, #1
 80085d4:	9300      	str	r3, [sp, #0]
 80085d6:	2331      	movs	r3, #49	; 0x31
 80085d8:	7013      	strb	r3, [r2, #0]
 80085da:	e6ce      	b.n	800837a <_dtoa_r+0x94a>
 80085dc:	4b09      	ldr	r3, [pc, #36]	; (8008604 <_dtoa_r+0xbd4>)
 80085de:	f7ff ba95 	b.w	8007b0c <_dtoa_r+0xdc>
 80085e2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80085e4:	2b00      	cmp	r3, #0
 80085e6:	f47f aa6e 	bne.w	8007ac6 <_dtoa_r+0x96>
 80085ea:	4b07      	ldr	r3, [pc, #28]	; (8008608 <_dtoa_r+0xbd8>)
 80085ec:	f7ff ba8e 	b.w	8007b0c <_dtoa_r+0xdc>
 80085f0:	9b02      	ldr	r3, [sp, #8]
 80085f2:	2b00      	cmp	r3, #0
 80085f4:	dcae      	bgt.n	8008554 <_dtoa_r+0xb24>
 80085f6:	9b06      	ldr	r3, [sp, #24]
 80085f8:	2b02      	cmp	r3, #2
 80085fa:	f73f aea8 	bgt.w	800834e <_dtoa_r+0x91e>
 80085fe:	e7a9      	b.n	8008554 <_dtoa_r+0xb24>
 8008600:	0800c030 	.word	0x0800c030
 8008604:	0800c291 	.word	0x0800c291
 8008608:	0800bfb1 	.word	0x0800bfb1

0800860c <__sflush_r>:
 800860c:	898a      	ldrh	r2, [r1, #12]
 800860e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008612:	4605      	mov	r5, r0
 8008614:	0710      	lsls	r0, r2, #28
 8008616:	460c      	mov	r4, r1
 8008618:	d458      	bmi.n	80086cc <__sflush_r+0xc0>
 800861a:	684b      	ldr	r3, [r1, #4]
 800861c:	2b00      	cmp	r3, #0
 800861e:	dc05      	bgt.n	800862c <__sflush_r+0x20>
 8008620:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008622:	2b00      	cmp	r3, #0
 8008624:	dc02      	bgt.n	800862c <__sflush_r+0x20>
 8008626:	2000      	movs	r0, #0
 8008628:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800862c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800862e:	2e00      	cmp	r6, #0
 8008630:	d0f9      	beq.n	8008626 <__sflush_r+0x1a>
 8008632:	2300      	movs	r3, #0
 8008634:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008638:	682f      	ldr	r7, [r5, #0]
 800863a:	602b      	str	r3, [r5, #0]
 800863c:	d032      	beq.n	80086a4 <__sflush_r+0x98>
 800863e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008640:	89a3      	ldrh	r3, [r4, #12]
 8008642:	075a      	lsls	r2, r3, #29
 8008644:	d505      	bpl.n	8008652 <__sflush_r+0x46>
 8008646:	6863      	ldr	r3, [r4, #4]
 8008648:	1ac0      	subs	r0, r0, r3
 800864a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800864c:	b10b      	cbz	r3, 8008652 <__sflush_r+0x46>
 800864e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008650:	1ac0      	subs	r0, r0, r3
 8008652:	2300      	movs	r3, #0
 8008654:	4602      	mov	r2, r0
 8008656:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008658:	6a21      	ldr	r1, [r4, #32]
 800865a:	4628      	mov	r0, r5
 800865c:	47b0      	blx	r6
 800865e:	1c43      	adds	r3, r0, #1
 8008660:	89a3      	ldrh	r3, [r4, #12]
 8008662:	d106      	bne.n	8008672 <__sflush_r+0x66>
 8008664:	6829      	ldr	r1, [r5, #0]
 8008666:	291d      	cmp	r1, #29
 8008668:	d82c      	bhi.n	80086c4 <__sflush_r+0xb8>
 800866a:	4a2a      	ldr	r2, [pc, #168]	; (8008714 <__sflush_r+0x108>)
 800866c:	40ca      	lsrs	r2, r1
 800866e:	07d6      	lsls	r6, r2, #31
 8008670:	d528      	bpl.n	80086c4 <__sflush_r+0xb8>
 8008672:	2200      	movs	r2, #0
 8008674:	6062      	str	r2, [r4, #4]
 8008676:	04d9      	lsls	r1, r3, #19
 8008678:	6922      	ldr	r2, [r4, #16]
 800867a:	6022      	str	r2, [r4, #0]
 800867c:	d504      	bpl.n	8008688 <__sflush_r+0x7c>
 800867e:	1c42      	adds	r2, r0, #1
 8008680:	d101      	bne.n	8008686 <__sflush_r+0x7a>
 8008682:	682b      	ldr	r3, [r5, #0]
 8008684:	b903      	cbnz	r3, 8008688 <__sflush_r+0x7c>
 8008686:	6560      	str	r0, [r4, #84]	; 0x54
 8008688:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800868a:	602f      	str	r7, [r5, #0]
 800868c:	2900      	cmp	r1, #0
 800868e:	d0ca      	beq.n	8008626 <__sflush_r+0x1a>
 8008690:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008694:	4299      	cmp	r1, r3
 8008696:	d002      	beq.n	800869e <__sflush_r+0x92>
 8008698:	4628      	mov	r0, r5
 800869a:	f001 fa79 	bl	8009b90 <_free_r>
 800869e:	2000      	movs	r0, #0
 80086a0:	6360      	str	r0, [r4, #52]	; 0x34
 80086a2:	e7c1      	b.n	8008628 <__sflush_r+0x1c>
 80086a4:	6a21      	ldr	r1, [r4, #32]
 80086a6:	2301      	movs	r3, #1
 80086a8:	4628      	mov	r0, r5
 80086aa:	47b0      	blx	r6
 80086ac:	1c41      	adds	r1, r0, #1
 80086ae:	d1c7      	bne.n	8008640 <__sflush_r+0x34>
 80086b0:	682b      	ldr	r3, [r5, #0]
 80086b2:	2b00      	cmp	r3, #0
 80086b4:	d0c4      	beq.n	8008640 <__sflush_r+0x34>
 80086b6:	2b1d      	cmp	r3, #29
 80086b8:	d001      	beq.n	80086be <__sflush_r+0xb2>
 80086ba:	2b16      	cmp	r3, #22
 80086bc:	d101      	bne.n	80086c2 <__sflush_r+0xb6>
 80086be:	602f      	str	r7, [r5, #0]
 80086c0:	e7b1      	b.n	8008626 <__sflush_r+0x1a>
 80086c2:	89a3      	ldrh	r3, [r4, #12]
 80086c4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80086c8:	81a3      	strh	r3, [r4, #12]
 80086ca:	e7ad      	b.n	8008628 <__sflush_r+0x1c>
 80086cc:	690f      	ldr	r7, [r1, #16]
 80086ce:	2f00      	cmp	r7, #0
 80086d0:	d0a9      	beq.n	8008626 <__sflush_r+0x1a>
 80086d2:	0793      	lsls	r3, r2, #30
 80086d4:	680e      	ldr	r6, [r1, #0]
 80086d6:	bf08      	it	eq
 80086d8:	694b      	ldreq	r3, [r1, #20]
 80086da:	600f      	str	r7, [r1, #0]
 80086dc:	bf18      	it	ne
 80086de:	2300      	movne	r3, #0
 80086e0:	eba6 0807 	sub.w	r8, r6, r7
 80086e4:	608b      	str	r3, [r1, #8]
 80086e6:	f1b8 0f00 	cmp.w	r8, #0
 80086ea:	dd9c      	ble.n	8008626 <__sflush_r+0x1a>
 80086ec:	6a21      	ldr	r1, [r4, #32]
 80086ee:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80086f0:	4643      	mov	r3, r8
 80086f2:	463a      	mov	r2, r7
 80086f4:	4628      	mov	r0, r5
 80086f6:	47b0      	blx	r6
 80086f8:	2800      	cmp	r0, #0
 80086fa:	dc06      	bgt.n	800870a <__sflush_r+0xfe>
 80086fc:	89a3      	ldrh	r3, [r4, #12]
 80086fe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008702:	81a3      	strh	r3, [r4, #12]
 8008704:	f04f 30ff 	mov.w	r0, #4294967295
 8008708:	e78e      	b.n	8008628 <__sflush_r+0x1c>
 800870a:	4407      	add	r7, r0
 800870c:	eba8 0800 	sub.w	r8, r8, r0
 8008710:	e7e9      	b.n	80086e6 <__sflush_r+0xda>
 8008712:	bf00      	nop
 8008714:	20400001 	.word	0x20400001

08008718 <_fflush_r>:
 8008718:	b538      	push	{r3, r4, r5, lr}
 800871a:	690b      	ldr	r3, [r1, #16]
 800871c:	4605      	mov	r5, r0
 800871e:	460c      	mov	r4, r1
 8008720:	b913      	cbnz	r3, 8008728 <_fflush_r+0x10>
 8008722:	2500      	movs	r5, #0
 8008724:	4628      	mov	r0, r5
 8008726:	bd38      	pop	{r3, r4, r5, pc}
 8008728:	b118      	cbz	r0, 8008732 <_fflush_r+0x1a>
 800872a:	6983      	ldr	r3, [r0, #24]
 800872c:	b90b      	cbnz	r3, 8008732 <_fflush_r+0x1a>
 800872e:	f000 f899 	bl	8008864 <__sinit>
 8008732:	4b14      	ldr	r3, [pc, #80]	; (8008784 <_fflush_r+0x6c>)
 8008734:	429c      	cmp	r4, r3
 8008736:	d11b      	bne.n	8008770 <_fflush_r+0x58>
 8008738:	686c      	ldr	r4, [r5, #4]
 800873a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800873e:	2b00      	cmp	r3, #0
 8008740:	d0ef      	beq.n	8008722 <_fflush_r+0xa>
 8008742:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008744:	07d0      	lsls	r0, r2, #31
 8008746:	d404      	bmi.n	8008752 <_fflush_r+0x3a>
 8008748:	0599      	lsls	r1, r3, #22
 800874a:	d402      	bmi.n	8008752 <_fflush_r+0x3a>
 800874c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800874e:	f000 fcb8 	bl	80090c2 <__retarget_lock_acquire_recursive>
 8008752:	4628      	mov	r0, r5
 8008754:	4621      	mov	r1, r4
 8008756:	f7ff ff59 	bl	800860c <__sflush_r>
 800875a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800875c:	07da      	lsls	r2, r3, #31
 800875e:	4605      	mov	r5, r0
 8008760:	d4e0      	bmi.n	8008724 <_fflush_r+0xc>
 8008762:	89a3      	ldrh	r3, [r4, #12]
 8008764:	059b      	lsls	r3, r3, #22
 8008766:	d4dd      	bmi.n	8008724 <_fflush_r+0xc>
 8008768:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800876a:	f000 fcab 	bl	80090c4 <__retarget_lock_release_recursive>
 800876e:	e7d9      	b.n	8008724 <_fflush_r+0xc>
 8008770:	4b05      	ldr	r3, [pc, #20]	; (8008788 <_fflush_r+0x70>)
 8008772:	429c      	cmp	r4, r3
 8008774:	d101      	bne.n	800877a <_fflush_r+0x62>
 8008776:	68ac      	ldr	r4, [r5, #8]
 8008778:	e7df      	b.n	800873a <_fflush_r+0x22>
 800877a:	4b04      	ldr	r3, [pc, #16]	; (800878c <_fflush_r+0x74>)
 800877c:	429c      	cmp	r4, r3
 800877e:	bf08      	it	eq
 8008780:	68ec      	ldreq	r4, [r5, #12]
 8008782:	e7da      	b.n	800873a <_fflush_r+0x22>
 8008784:	0800c064 	.word	0x0800c064
 8008788:	0800c084 	.word	0x0800c084
 800878c:	0800c044 	.word	0x0800c044

08008790 <fflush>:
 8008790:	4601      	mov	r1, r0
 8008792:	b920      	cbnz	r0, 800879e <fflush+0xe>
 8008794:	4b04      	ldr	r3, [pc, #16]	; (80087a8 <fflush+0x18>)
 8008796:	4905      	ldr	r1, [pc, #20]	; (80087ac <fflush+0x1c>)
 8008798:	6818      	ldr	r0, [r3, #0]
 800879a:	f000 b8fe 	b.w	800899a <_fwalk_reent>
 800879e:	4b04      	ldr	r3, [pc, #16]	; (80087b0 <fflush+0x20>)
 80087a0:	6818      	ldr	r0, [r3, #0]
 80087a2:	f7ff bfb9 	b.w	8008718 <_fflush_r>
 80087a6:	bf00      	nop
 80087a8:	0800be24 	.word	0x0800be24
 80087ac:	08008719 	.word	0x08008719
 80087b0:	2000000c 	.word	0x2000000c

080087b4 <std>:
 80087b4:	2300      	movs	r3, #0
 80087b6:	b510      	push	{r4, lr}
 80087b8:	4604      	mov	r4, r0
 80087ba:	e9c0 3300 	strd	r3, r3, [r0]
 80087be:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80087c2:	6083      	str	r3, [r0, #8]
 80087c4:	8181      	strh	r1, [r0, #12]
 80087c6:	6643      	str	r3, [r0, #100]	; 0x64
 80087c8:	81c2      	strh	r2, [r0, #14]
 80087ca:	6183      	str	r3, [r0, #24]
 80087cc:	4619      	mov	r1, r3
 80087ce:	2208      	movs	r2, #8
 80087d0:	305c      	adds	r0, #92	; 0x5c
 80087d2:	f7fd f9b3 	bl	8005b3c <memset>
 80087d6:	4b05      	ldr	r3, [pc, #20]	; (80087ec <std+0x38>)
 80087d8:	6263      	str	r3, [r4, #36]	; 0x24
 80087da:	4b05      	ldr	r3, [pc, #20]	; (80087f0 <std+0x3c>)
 80087dc:	62a3      	str	r3, [r4, #40]	; 0x28
 80087de:	4b05      	ldr	r3, [pc, #20]	; (80087f4 <std+0x40>)
 80087e0:	62e3      	str	r3, [r4, #44]	; 0x2c
 80087e2:	4b05      	ldr	r3, [pc, #20]	; (80087f8 <std+0x44>)
 80087e4:	6224      	str	r4, [r4, #32]
 80087e6:	6323      	str	r3, [r4, #48]	; 0x30
 80087e8:	bd10      	pop	{r4, pc}
 80087ea:	bf00      	nop
 80087ec:	0800aac9 	.word	0x0800aac9
 80087f0:	0800aaeb 	.word	0x0800aaeb
 80087f4:	0800ab23 	.word	0x0800ab23
 80087f8:	0800ab47 	.word	0x0800ab47

080087fc <_cleanup_r>:
 80087fc:	4901      	ldr	r1, [pc, #4]	; (8008804 <_cleanup_r+0x8>)
 80087fe:	f000 b8cc 	b.w	800899a <_fwalk_reent>
 8008802:	bf00      	nop
 8008804:	08008719 	.word	0x08008719

08008808 <__sfmoreglue>:
 8008808:	b570      	push	{r4, r5, r6, lr}
 800880a:	2268      	movs	r2, #104	; 0x68
 800880c:	1e4d      	subs	r5, r1, #1
 800880e:	4355      	muls	r5, r2
 8008810:	460e      	mov	r6, r1
 8008812:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8008816:	f001 fa27 	bl	8009c68 <_malloc_r>
 800881a:	4604      	mov	r4, r0
 800881c:	b140      	cbz	r0, 8008830 <__sfmoreglue+0x28>
 800881e:	2100      	movs	r1, #0
 8008820:	e9c0 1600 	strd	r1, r6, [r0]
 8008824:	300c      	adds	r0, #12
 8008826:	60a0      	str	r0, [r4, #8]
 8008828:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800882c:	f7fd f986 	bl	8005b3c <memset>
 8008830:	4620      	mov	r0, r4
 8008832:	bd70      	pop	{r4, r5, r6, pc}

08008834 <__sfp_lock_acquire>:
 8008834:	4801      	ldr	r0, [pc, #4]	; (800883c <__sfp_lock_acquire+0x8>)
 8008836:	f000 bc44 	b.w	80090c2 <__retarget_lock_acquire_recursive>
 800883a:	bf00      	nop
 800883c:	20000339 	.word	0x20000339

08008840 <__sfp_lock_release>:
 8008840:	4801      	ldr	r0, [pc, #4]	; (8008848 <__sfp_lock_release+0x8>)
 8008842:	f000 bc3f 	b.w	80090c4 <__retarget_lock_release_recursive>
 8008846:	bf00      	nop
 8008848:	20000339 	.word	0x20000339

0800884c <__sinit_lock_acquire>:
 800884c:	4801      	ldr	r0, [pc, #4]	; (8008854 <__sinit_lock_acquire+0x8>)
 800884e:	f000 bc38 	b.w	80090c2 <__retarget_lock_acquire_recursive>
 8008852:	bf00      	nop
 8008854:	2000033a 	.word	0x2000033a

08008858 <__sinit_lock_release>:
 8008858:	4801      	ldr	r0, [pc, #4]	; (8008860 <__sinit_lock_release+0x8>)
 800885a:	f000 bc33 	b.w	80090c4 <__retarget_lock_release_recursive>
 800885e:	bf00      	nop
 8008860:	2000033a 	.word	0x2000033a

08008864 <__sinit>:
 8008864:	b510      	push	{r4, lr}
 8008866:	4604      	mov	r4, r0
 8008868:	f7ff fff0 	bl	800884c <__sinit_lock_acquire>
 800886c:	69a3      	ldr	r3, [r4, #24]
 800886e:	b11b      	cbz	r3, 8008878 <__sinit+0x14>
 8008870:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008874:	f7ff bff0 	b.w	8008858 <__sinit_lock_release>
 8008878:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800887c:	6523      	str	r3, [r4, #80]	; 0x50
 800887e:	4b13      	ldr	r3, [pc, #76]	; (80088cc <__sinit+0x68>)
 8008880:	4a13      	ldr	r2, [pc, #76]	; (80088d0 <__sinit+0x6c>)
 8008882:	681b      	ldr	r3, [r3, #0]
 8008884:	62a2      	str	r2, [r4, #40]	; 0x28
 8008886:	42a3      	cmp	r3, r4
 8008888:	bf04      	itt	eq
 800888a:	2301      	moveq	r3, #1
 800888c:	61a3      	streq	r3, [r4, #24]
 800888e:	4620      	mov	r0, r4
 8008890:	f000 f820 	bl	80088d4 <__sfp>
 8008894:	6060      	str	r0, [r4, #4]
 8008896:	4620      	mov	r0, r4
 8008898:	f000 f81c 	bl	80088d4 <__sfp>
 800889c:	60a0      	str	r0, [r4, #8]
 800889e:	4620      	mov	r0, r4
 80088a0:	f000 f818 	bl	80088d4 <__sfp>
 80088a4:	2200      	movs	r2, #0
 80088a6:	60e0      	str	r0, [r4, #12]
 80088a8:	2104      	movs	r1, #4
 80088aa:	6860      	ldr	r0, [r4, #4]
 80088ac:	f7ff ff82 	bl	80087b4 <std>
 80088b0:	68a0      	ldr	r0, [r4, #8]
 80088b2:	2201      	movs	r2, #1
 80088b4:	2109      	movs	r1, #9
 80088b6:	f7ff ff7d 	bl	80087b4 <std>
 80088ba:	68e0      	ldr	r0, [r4, #12]
 80088bc:	2202      	movs	r2, #2
 80088be:	2112      	movs	r1, #18
 80088c0:	f7ff ff78 	bl	80087b4 <std>
 80088c4:	2301      	movs	r3, #1
 80088c6:	61a3      	str	r3, [r4, #24]
 80088c8:	e7d2      	b.n	8008870 <__sinit+0xc>
 80088ca:	bf00      	nop
 80088cc:	0800be24 	.word	0x0800be24
 80088d0:	080087fd 	.word	0x080087fd

080088d4 <__sfp>:
 80088d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80088d6:	4607      	mov	r7, r0
 80088d8:	f7ff ffac 	bl	8008834 <__sfp_lock_acquire>
 80088dc:	4b1e      	ldr	r3, [pc, #120]	; (8008958 <__sfp+0x84>)
 80088de:	681e      	ldr	r6, [r3, #0]
 80088e0:	69b3      	ldr	r3, [r6, #24]
 80088e2:	b913      	cbnz	r3, 80088ea <__sfp+0x16>
 80088e4:	4630      	mov	r0, r6
 80088e6:	f7ff ffbd 	bl	8008864 <__sinit>
 80088ea:	3648      	adds	r6, #72	; 0x48
 80088ec:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80088f0:	3b01      	subs	r3, #1
 80088f2:	d503      	bpl.n	80088fc <__sfp+0x28>
 80088f4:	6833      	ldr	r3, [r6, #0]
 80088f6:	b30b      	cbz	r3, 800893c <__sfp+0x68>
 80088f8:	6836      	ldr	r6, [r6, #0]
 80088fa:	e7f7      	b.n	80088ec <__sfp+0x18>
 80088fc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8008900:	b9d5      	cbnz	r5, 8008938 <__sfp+0x64>
 8008902:	4b16      	ldr	r3, [pc, #88]	; (800895c <__sfp+0x88>)
 8008904:	60e3      	str	r3, [r4, #12]
 8008906:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800890a:	6665      	str	r5, [r4, #100]	; 0x64
 800890c:	f000 fbd8 	bl	80090c0 <__retarget_lock_init_recursive>
 8008910:	f7ff ff96 	bl	8008840 <__sfp_lock_release>
 8008914:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8008918:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800891c:	6025      	str	r5, [r4, #0]
 800891e:	61a5      	str	r5, [r4, #24]
 8008920:	2208      	movs	r2, #8
 8008922:	4629      	mov	r1, r5
 8008924:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8008928:	f7fd f908 	bl	8005b3c <memset>
 800892c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8008930:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8008934:	4620      	mov	r0, r4
 8008936:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008938:	3468      	adds	r4, #104	; 0x68
 800893a:	e7d9      	b.n	80088f0 <__sfp+0x1c>
 800893c:	2104      	movs	r1, #4
 800893e:	4638      	mov	r0, r7
 8008940:	f7ff ff62 	bl	8008808 <__sfmoreglue>
 8008944:	4604      	mov	r4, r0
 8008946:	6030      	str	r0, [r6, #0]
 8008948:	2800      	cmp	r0, #0
 800894a:	d1d5      	bne.n	80088f8 <__sfp+0x24>
 800894c:	f7ff ff78 	bl	8008840 <__sfp_lock_release>
 8008950:	230c      	movs	r3, #12
 8008952:	603b      	str	r3, [r7, #0]
 8008954:	e7ee      	b.n	8008934 <__sfp+0x60>
 8008956:	bf00      	nop
 8008958:	0800be24 	.word	0x0800be24
 800895c:	ffff0001 	.word	0xffff0001

08008960 <_fwalk>:
 8008960:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008964:	460f      	mov	r7, r1
 8008966:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800896a:	2600      	movs	r6, #0
 800896c:	e9d4 8501 	ldrd	r8, r5, [r4, #4]
 8008970:	f1b8 0801 	subs.w	r8, r8, #1
 8008974:	d505      	bpl.n	8008982 <_fwalk+0x22>
 8008976:	6824      	ldr	r4, [r4, #0]
 8008978:	2c00      	cmp	r4, #0
 800897a:	d1f7      	bne.n	800896c <_fwalk+0xc>
 800897c:	4630      	mov	r0, r6
 800897e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008982:	89ab      	ldrh	r3, [r5, #12]
 8008984:	2b01      	cmp	r3, #1
 8008986:	d906      	bls.n	8008996 <_fwalk+0x36>
 8008988:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800898c:	3301      	adds	r3, #1
 800898e:	d002      	beq.n	8008996 <_fwalk+0x36>
 8008990:	4628      	mov	r0, r5
 8008992:	47b8      	blx	r7
 8008994:	4306      	orrs	r6, r0
 8008996:	3568      	adds	r5, #104	; 0x68
 8008998:	e7ea      	b.n	8008970 <_fwalk+0x10>

0800899a <_fwalk_reent>:
 800899a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800899e:	4606      	mov	r6, r0
 80089a0:	4688      	mov	r8, r1
 80089a2:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80089a6:	2700      	movs	r7, #0
 80089a8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80089ac:	f1b9 0901 	subs.w	r9, r9, #1
 80089b0:	d505      	bpl.n	80089be <_fwalk_reent+0x24>
 80089b2:	6824      	ldr	r4, [r4, #0]
 80089b4:	2c00      	cmp	r4, #0
 80089b6:	d1f7      	bne.n	80089a8 <_fwalk_reent+0xe>
 80089b8:	4638      	mov	r0, r7
 80089ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80089be:	89ab      	ldrh	r3, [r5, #12]
 80089c0:	2b01      	cmp	r3, #1
 80089c2:	d907      	bls.n	80089d4 <_fwalk_reent+0x3a>
 80089c4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80089c8:	3301      	adds	r3, #1
 80089ca:	d003      	beq.n	80089d4 <_fwalk_reent+0x3a>
 80089cc:	4629      	mov	r1, r5
 80089ce:	4630      	mov	r0, r6
 80089d0:	47c0      	blx	r8
 80089d2:	4307      	orrs	r7, r0
 80089d4:	3568      	adds	r5, #104	; 0x68
 80089d6:	e7e9      	b.n	80089ac <_fwalk_reent+0x12>

080089d8 <rshift>:
 80089d8:	6903      	ldr	r3, [r0, #16]
 80089da:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 80089de:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80089e2:	ea4f 1261 	mov.w	r2, r1, asr #5
 80089e6:	f100 0414 	add.w	r4, r0, #20
 80089ea:	dd45      	ble.n	8008a78 <rshift+0xa0>
 80089ec:	f011 011f 	ands.w	r1, r1, #31
 80089f0:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 80089f4:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 80089f8:	d10c      	bne.n	8008a14 <rshift+0x3c>
 80089fa:	f100 0710 	add.w	r7, r0, #16
 80089fe:	4629      	mov	r1, r5
 8008a00:	42b1      	cmp	r1, r6
 8008a02:	d334      	bcc.n	8008a6e <rshift+0x96>
 8008a04:	1a9b      	subs	r3, r3, r2
 8008a06:	009b      	lsls	r3, r3, #2
 8008a08:	1eea      	subs	r2, r5, #3
 8008a0a:	4296      	cmp	r6, r2
 8008a0c:	bf38      	it	cc
 8008a0e:	2300      	movcc	r3, #0
 8008a10:	4423      	add	r3, r4
 8008a12:	e015      	b.n	8008a40 <rshift+0x68>
 8008a14:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8008a18:	f1c1 0820 	rsb	r8, r1, #32
 8008a1c:	40cf      	lsrs	r7, r1
 8008a1e:	f105 0e04 	add.w	lr, r5, #4
 8008a22:	46a1      	mov	r9, r4
 8008a24:	4576      	cmp	r6, lr
 8008a26:	46f4      	mov	ip, lr
 8008a28:	d815      	bhi.n	8008a56 <rshift+0x7e>
 8008a2a:	1a9a      	subs	r2, r3, r2
 8008a2c:	0092      	lsls	r2, r2, #2
 8008a2e:	3a04      	subs	r2, #4
 8008a30:	3501      	adds	r5, #1
 8008a32:	42ae      	cmp	r6, r5
 8008a34:	bf38      	it	cc
 8008a36:	2200      	movcc	r2, #0
 8008a38:	18a3      	adds	r3, r4, r2
 8008a3a:	50a7      	str	r7, [r4, r2]
 8008a3c:	b107      	cbz	r7, 8008a40 <rshift+0x68>
 8008a3e:	3304      	adds	r3, #4
 8008a40:	1b1a      	subs	r2, r3, r4
 8008a42:	42a3      	cmp	r3, r4
 8008a44:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8008a48:	bf08      	it	eq
 8008a4a:	2300      	moveq	r3, #0
 8008a4c:	6102      	str	r2, [r0, #16]
 8008a4e:	bf08      	it	eq
 8008a50:	6143      	streq	r3, [r0, #20]
 8008a52:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008a56:	f8dc c000 	ldr.w	ip, [ip]
 8008a5a:	fa0c fc08 	lsl.w	ip, ip, r8
 8008a5e:	ea4c 0707 	orr.w	r7, ip, r7
 8008a62:	f849 7b04 	str.w	r7, [r9], #4
 8008a66:	f85e 7b04 	ldr.w	r7, [lr], #4
 8008a6a:	40cf      	lsrs	r7, r1
 8008a6c:	e7da      	b.n	8008a24 <rshift+0x4c>
 8008a6e:	f851 cb04 	ldr.w	ip, [r1], #4
 8008a72:	f847 cf04 	str.w	ip, [r7, #4]!
 8008a76:	e7c3      	b.n	8008a00 <rshift+0x28>
 8008a78:	4623      	mov	r3, r4
 8008a7a:	e7e1      	b.n	8008a40 <rshift+0x68>

08008a7c <__hexdig_fun>:
 8008a7c:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8008a80:	2b09      	cmp	r3, #9
 8008a82:	d802      	bhi.n	8008a8a <__hexdig_fun+0xe>
 8008a84:	3820      	subs	r0, #32
 8008a86:	b2c0      	uxtb	r0, r0
 8008a88:	4770      	bx	lr
 8008a8a:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8008a8e:	2b05      	cmp	r3, #5
 8008a90:	d801      	bhi.n	8008a96 <__hexdig_fun+0x1a>
 8008a92:	3847      	subs	r0, #71	; 0x47
 8008a94:	e7f7      	b.n	8008a86 <__hexdig_fun+0xa>
 8008a96:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8008a9a:	2b05      	cmp	r3, #5
 8008a9c:	d801      	bhi.n	8008aa2 <__hexdig_fun+0x26>
 8008a9e:	3827      	subs	r0, #39	; 0x27
 8008aa0:	e7f1      	b.n	8008a86 <__hexdig_fun+0xa>
 8008aa2:	2000      	movs	r0, #0
 8008aa4:	4770      	bx	lr
	...

08008aa8 <__gethex>:
 8008aa8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008aac:	ed2d 8b02 	vpush	{d8}
 8008ab0:	b089      	sub	sp, #36	; 0x24
 8008ab2:	ee08 0a10 	vmov	s16, r0
 8008ab6:	9304      	str	r3, [sp, #16]
 8008ab8:	4bb4      	ldr	r3, [pc, #720]	; (8008d8c <__gethex+0x2e4>)
 8008aba:	681b      	ldr	r3, [r3, #0]
 8008abc:	9301      	str	r3, [sp, #4]
 8008abe:	4618      	mov	r0, r3
 8008ac0:	468b      	mov	fp, r1
 8008ac2:	4690      	mov	r8, r2
 8008ac4:	f7f7 fb84 	bl	80001d0 <strlen>
 8008ac8:	9b01      	ldr	r3, [sp, #4]
 8008aca:	f8db 2000 	ldr.w	r2, [fp]
 8008ace:	4403      	add	r3, r0
 8008ad0:	4682      	mov	sl, r0
 8008ad2:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8008ad6:	9305      	str	r3, [sp, #20]
 8008ad8:	1c93      	adds	r3, r2, #2
 8008ada:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8008ade:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8008ae2:	32fe      	adds	r2, #254	; 0xfe
 8008ae4:	18d1      	adds	r1, r2, r3
 8008ae6:	461f      	mov	r7, r3
 8008ae8:	f813 0b01 	ldrb.w	r0, [r3], #1
 8008aec:	9100      	str	r1, [sp, #0]
 8008aee:	2830      	cmp	r0, #48	; 0x30
 8008af0:	d0f8      	beq.n	8008ae4 <__gethex+0x3c>
 8008af2:	f7ff ffc3 	bl	8008a7c <__hexdig_fun>
 8008af6:	4604      	mov	r4, r0
 8008af8:	2800      	cmp	r0, #0
 8008afa:	d13a      	bne.n	8008b72 <__gethex+0xca>
 8008afc:	9901      	ldr	r1, [sp, #4]
 8008afe:	4652      	mov	r2, sl
 8008b00:	4638      	mov	r0, r7
 8008b02:	f002 f824 	bl	800ab4e <strncmp>
 8008b06:	4605      	mov	r5, r0
 8008b08:	2800      	cmp	r0, #0
 8008b0a:	d168      	bne.n	8008bde <__gethex+0x136>
 8008b0c:	f817 000a 	ldrb.w	r0, [r7, sl]
 8008b10:	eb07 060a 	add.w	r6, r7, sl
 8008b14:	f7ff ffb2 	bl	8008a7c <__hexdig_fun>
 8008b18:	2800      	cmp	r0, #0
 8008b1a:	d062      	beq.n	8008be2 <__gethex+0x13a>
 8008b1c:	4633      	mov	r3, r6
 8008b1e:	7818      	ldrb	r0, [r3, #0]
 8008b20:	2830      	cmp	r0, #48	; 0x30
 8008b22:	461f      	mov	r7, r3
 8008b24:	f103 0301 	add.w	r3, r3, #1
 8008b28:	d0f9      	beq.n	8008b1e <__gethex+0x76>
 8008b2a:	f7ff ffa7 	bl	8008a7c <__hexdig_fun>
 8008b2e:	2301      	movs	r3, #1
 8008b30:	fab0 f480 	clz	r4, r0
 8008b34:	0964      	lsrs	r4, r4, #5
 8008b36:	4635      	mov	r5, r6
 8008b38:	9300      	str	r3, [sp, #0]
 8008b3a:	463a      	mov	r2, r7
 8008b3c:	4616      	mov	r6, r2
 8008b3e:	3201      	adds	r2, #1
 8008b40:	7830      	ldrb	r0, [r6, #0]
 8008b42:	f7ff ff9b 	bl	8008a7c <__hexdig_fun>
 8008b46:	2800      	cmp	r0, #0
 8008b48:	d1f8      	bne.n	8008b3c <__gethex+0x94>
 8008b4a:	9901      	ldr	r1, [sp, #4]
 8008b4c:	4652      	mov	r2, sl
 8008b4e:	4630      	mov	r0, r6
 8008b50:	f001 fffd 	bl	800ab4e <strncmp>
 8008b54:	b980      	cbnz	r0, 8008b78 <__gethex+0xd0>
 8008b56:	b94d      	cbnz	r5, 8008b6c <__gethex+0xc4>
 8008b58:	eb06 050a 	add.w	r5, r6, sl
 8008b5c:	462a      	mov	r2, r5
 8008b5e:	4616      	mov	r6, r2
 8008b60:	3201      	adds	r2, #1
 8008b62:	7830      	ldrb	r0, [r6, #0]
 8008b64:	f7ff ff8a 	bl	8008a7c <__hexdig_fun>
 8008b68:	2800      	cmp	r0, #0
 8008b6a:	d1f8      	bne.n	8008b5e <__gethex+0xb6>
 8008b6c:	1bad      	subs	r5, r5, r6
 8008b6e:	00ad      	lsls	r5, r5, #2
 8008b70:	e004      	b.n	8008b7c <__gethex+0xd4>
 8008b72:	2400      	movs	r4, #0
 8008b74:	4625      	mov	r5, r4
 8008b76:	e7e0      	b.n	8008b3a <__gethex+0x92>
 8008b78:	2d00      	cmp	r5, #0
 8008b7a:	d1f7      	bne.n	8008b6c <__gethex+0xc4>
 8008b7c:	7833      	ldrb	r3, [r6, #0]
 8008b7e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8008b82:	2b50      	cmp	r3, #80	; 0x50
 8008b84:	d13b      	bne.n	8008bfe <__gethex+0x156>
 8008b86:	7873      	ldrb	r3, [r6, #1]
 8008b88:	2b2b      	cmp	r3, #43	; 0x2b
 8008b8a:	d02c      	beq.n	8008be6 <__gethex+0x13e>
 8008b8c:	2b2d      	cmp	r3, #45	; 0x2d
 8008b8e:	d02e      	beq.n	8008bee <__gethex+0x146>
 8008b90:	1c71      	adds	r1, r6, #1
 8008b92:	f04f 0900 	mov.w	r9, #0
 8008b96:	7808      	ldrb	r0, [r1, #0]
 8008b98:	f7ff ff70 	bl	8008a7c <__hexdig_fun>
 8008b9c:	1e43      	subs	r3, r0, #1
 8008b9e:	b2db      	uxtb	r3, r3
 8008ba0:	2b18      	cmp	r3, #24
 8008ba2:	d82c      	bhi.n	8008bfe <__gethex+0x156>
 8008ba4:	f1a0 0210 	sub.w	r2, r0, #16
 8008ba8:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8008bac:	f7ff ff66 	bl	8008a7c <__hexdig_fun>
 8008bb0:	1e43      	subs	r3, r0, #1
 8008bb2:	b2db      	uxtb	r3, r3
 8008bb4:	2b18      	cmp	r3, #24
 8008bb6:	d91d      	bls.n	8008bf4 <__gethex+0x14c>
 8008bb8:	f1b9 0f00 	cmp.w	r9, #0
 8008bbc:	d000      	beq.n	8008bc0 <__gethex+0x118>
 8008bbe:	4252      	negs	r2, r2
 8008bc0:	4415      	add	r5, r2
 8008bc2:	f8cb 1000 	str.w	r1, [fp]
 8008bc6:	b1e4      	cbz	r4, 8008c02 <__gethex+0x15a>
 8008bc8:	9b00      	ldr	r3, [sp, #0]
 8008bca:	2b00      	cmp	r3, #0
 8008bcc:	bf14      	ite	ne
 8008bce:	2700      	movne	r7, #0
 8008bd0:	2706      	moveq	r7, #6
 8008bd2:	4638      	mov	r0, r7
 8008bd4:	b009      	add	sp, #36	; 0x24
 8008bd6:	ecbd 8b02 	vpop	{d8}
 8008bda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008bde:	463e      	mov	r6, r7
 8008be0:	4625      	mov	r5, r4
 8008be2:	2401      	movs	r4, #1
 8008be4:	e7ca      	b.n	8008b7c <__gethex+0xd4>
 8008be6:	f04f 0900 	mov.w	r9, #0
 8008bea:	1cb1      	adds	r1, r6, #2
 8008bec:	e7d3      	b.n	8008b96 <__gethex+0xee>
 8008bee:	f04f 0901 	mov.w	r9, #1
 8008bf2:	e7fa      	b.n	8008bea <__gethex+0x142>
 8008bf4:	230a      	movs	r3, #10
 8008bf6:	fb03 0202 	mla	r2, r3, r2, r0
 8008bfa:	3a10      	subs	r2, #16
 8008bfc:	e7d4      	b.n	8008ba8 <__gethex+0x100>
 8008bfe:	4631      	mov	r1, r6
 8008c00:	e7df      	b.n	8008bc2 <__gethex+0x11a>
 8008c02:	1bf3      	subs	r3, r6, r7
 8008c04:	3b01      	subs	r3, #1
 8008c06:	4621      	mov	r1, r4
 8008c08:	2b07      	cmp	r3, #7
 8008c0a:	dc0b      	bgt.n	8008c24 <__gethex+0x17c>
 8008c0c:	ee18 0a10 	vmov	r0, s16
 8008c10:	f000 fae6 	bl	80091e0 <_Balloc>
 8008c14:	4604      	mov	r4, r0
 8008c16:	b940      	cbnz	r0, 8008c2a <__gethex+0x182>
 8008c18:	4b5d      	ldr	r3, [pc, #372]	; (8008d90 <__gethex+0x2e8>)
 8008c1a:	4602      	mov	r2, r0
 8008c1c:	21de      	movs	r1, #222	; 0xde
 8008c1e:	485d      	ldr	r0, [pc, #372]	; (8008d94 <__gethex+0x2ec>)
 8008c20:	f002 f910 	bl	800ae44 <__assert_func>
 8008c24:	3101      	adds	r1, #1
 8008c26:	105b      	asrs	r3, r3, #1
 8008c28:	e7ee      	b.n	8008c08 <__gethex+0x160>
 8008c2a:	f100 0914 	add.w	r9, r0, #20
 8008c2e:	f04f 0b00 	mov.w	fp, #0
 8008c32:	f1ca 0301 	rsb	r3, sl, #1
 8008c36:	f8cd 9008 	str.w	r9, [sp, #8]
 8008c3a:	f8cd b000 	str.w	fp, [sp]
 8008c3e:	9306      	str	r3, [sp, #24]
 8008c40:	42b7      	cmp	r7, r6
 8008c42:	d340      	bcc.n	8008cc6 <__gethex+0x21e>
 8008c44:	9802      	ldr	r0, [sp, #8]
 8008c46:	9b00      	ldr	r3, [sp, #0]
 8008c48:	f840 3b04 	str.w	r3, [r0], #4
 8008c4c:	eba0 0009 	sub.w	r0, r0, r9
 8008c50:	1080      	asrs	r0, r0, #2
 8008c52:	0146      	lsls	r6, r0, #5
 8008c54:	6120      	str	r0, [r4, #16]
 8008c56:	4618      	mov	r0, r3
 8008c58:	f000 fbb4 	bl	80093c4 <__hi0bits>
 8008c5c:	1a30      	subs	r0, r6, r0
 8008c5e:	f8d8 6000 	ldr.w	r6, [r8]
 8008c62:	42b0      	cmp	r0, r6
 8008c64:	dd63      	ble.n	8008d2e <__gethex+0x286>
 8008c66:	1b87      	subs	r7, r0, r6
 8008c68:	4639      	mov	r1, r7
 8008c6a:	4620      	mov	r0, r4
 8008c6c:	f000 ff58 	bl	8009b20 <__any_on>
 8008c70:	4682      	mov	sl, r0
 8008c72:	b1a8      	cbz	r0, 8008ca0 <__gethex+0x1f8>
 8008c74:	1e7b      	subs	r3, r7, #1
 8008c76:	1159      	asrs	r1, r3, #5
 8008c78:	f003 021f 	and.w	r2, r3, #31
 8008c7c:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8008c80:	f04f 0a01 	mov.w	sl, #1
 8008c84:	fa0a f202 	lsl.w	r2, sl, r2
 8008c88:	420a      	tst	r2, r1
 8008c8a:	d009      	beq.n	8008ca0 <__gethex+0x1f8>
 8008c8c:	4553      	cmp	r3, sl
 8008c8e:	dd05      	ble.n	8008c9c <__gethex+0x1f4>
 8008c90:	1eb9      	subs	r1, r7, #2
 8008c92:	4620      	mov	r0, r4
 8008c94:	f000 ff44 	bl	8009b20 <__any_on>
 8008c98:	2800      	cmp	r0, #0
 8008c9a:	d145      	bne.n	8008d28 <__gethex+0x280>
 8008c9c:	f04f 0a02 	mov.w	sl, #2
 8008ca0:	4639      	mov	r1, r7
 8008ca2:	4620      	mov	r0, r4
 8008ca4:	f7ff fe98 	bl	80089d8 <rshift>
 8008ca8:	443d      	add	r5, r7
 8008caa:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8008cae:	42ab      	cmp	r3, r5
 8008cb0:	da4c      	bge.n	8008d4c <__gethex+0x2a4>
 8008cb2:	ee18 0a10 	vmov	r0, s16
 8008cb6:	4621      	mov	r1, r4
 8008cb8:	f000 fad2 	bl	8009260 <_Bfree>
 8008cbc:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8008cbe:	2300      	movs	r3, #0
 8008cc0:	6013      	str	r3, [r2, #0]
 8008cc2:	27a3      	movs	r7, #163	; 0xa3
 8008cc4:	e785      	b.n	8008bd2 <__gethex+0x12a>
 8008cc6:	1e73      	subs	r3, r6, #1
 8008cc8:	9a05      	ldr	r2, [sp, #20]
 8008cca:	9303      	str	r3, [sp, #12]
 8008ccc:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8008cd0:	4293      	cmp	r3, r2
 8008cd2:	d019      	beq.n	8008d08 <__gethex+0x260>
 8008cd4:	f1bb 0f20 	cmp.w	fp, #32
 8008cd8:	d107      	bne.n	8008cea <__gethex+0x242>
 8008cda:	9b02      	ldr	r3, [sp, #8]
 8008cdc:	9a00      	ldr	r2, [sp, #0]
 8008cde:	f843 2b04 	str.w	r2, [r3], #4
 8008ce2:	9302      	str	r3, [sp, #8]
 8008ce4:	2300      	movs	r3, #0
 8008ce6:	9300      	str	r3, [sp, #0]
 8008ce8:	469b      	mov	fp, r3
 8008cea:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8008cee:	f7ff fec5 	bl	8008a7c <__hexdig_fun>
 8008cf2:	9b00      	ldr	r3, [sp, #0]
 8008cf4:	f000 000f 	and.w	r0, r0, #15
 8008cf8:	fa00 f00b 	lsl.w	r0, r0, fp
 8008cfc:	4303      	orrs	r3, r0
 8008cfe:	9300      	str	r3, [sp, #0]
 8008d00:	f10b 0b04 	add.w	fp, fp, #4
 8008d04:	9b03      	ldr	r3, [sp, #12]
 8008d06:	e00d      	b.n	8008d24 <__gethex+0x27c>
 8008d08:	9b03      	ldr	r3, [sp, #12]
 8008d0a:	9a06      	ldr	r2, [sp, #24]
 8008d0c:	4413      	add	r3, r2
 8008d0e:	42bb      	cmp	r3, r7
 8008d10:	d3e0      	bcc.n	8008cd4 <__gethex+0x22c>
 8008d12:	4618      	mov	r0, r3
 8008d14:	9901      	ldr	r1, [sp, #4]
 8008d16:	9307      	str	r3, [sp, #28]
 8008d18:	4652      	mov	r2, sl
 8008d1a:	f001 ff18 	bl	800ab4e <strncmp>
 8008d1e:	9b07      	ldr	r3, [sp, #28]
 8008d20:	2800      	cmp	r0, #0
 8008d22:	d1d7      	bne.n	8008cd4 <__gethex+0x22c>
 8008d24:	461e      	mov	r6, r3
 8008d26:	e78b      	b.n	8008c40 <__gethex+0x198>
 8008d28:	f04f 0a03 	mov.w	sl, #3
 8008d2c:	e7b8      	b.n	8008ca0 <__gethex+0x1f8>
 8008d2e:	da0a      	bge.n	8008d46 <__gethex+0x29e>
 8008d30:	1a37      	subs	r7, r6, r0
 8008d32:	4621      	mov	r1, r4
 8008d34:	ee18 0a10 	vmov	r0, s16
 8008d38:	463a      	mov	r2, r7
 8008d3a:	f000 fcad 	bl	8009698 <__lshift>
 8008d3e:	1bed      	subs	r5, r5, r7
 8008d40:	4604      	mov	r4, r0
 8008d42:	f100 0914 	add.w	r9, r0, #20
 8008d46:	f04f 0a00 	mov.w	sl, #0
 8008d4a:	e7ae      	b.n	8008caa <__gethex+0x202>
 8008d4c:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8008d50:	42a8      	cmp	r0, r5
 8008d52:	dd72      	ble.n	8008e3a <__gethex+0x392>
 8008d54:	1b45      	subs	r5, r0, r5
 8008d56:	42ae      	cmp	r6, r5
 8008d58:	dc36      	bgt.n	8008dc8 <__gethex+0x320>
 8008d5a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8008d5e:	2b02      	cmp	r3, #2
 8008d60:	d02a      	beq.n	8008db8 <__gethex+0x310>
 8008d62:	2b03      	cmp	r3, #3
 8008d64:	d02c      	beq.n	8008dc0 <__gethex+0x318>
 8008d66:	2b01      	cmp	r3, #1
 8008d68:	d11c      	bne.n	8008da4 <__gethex+0x2fc>
 8008d6a:	42ae      	cmp	r6, r5
 8008d6c:	d11a      	bne.n	8008da4 <__gethex+0x2fc>
 8008d6e:	2e01      	cmp	r6, #1
 8008d70:	d112      	bne.n	8008d98 <__gethex+0x2f0>
 8008d72:	9a04      	ldr	r2, [sp, #16]
 8008d74:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8008d78:	6013      	str	r3, [r2, #0]
 8008d7a:	2301      	movs	r3, #1
 8008d7c:	6123      	str	r3, [r4, #16]
 8008d7e:	f8c9 3000 	str.w	r3, [r9]
 8008d82:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008d84:	2762      	movs	r7, #98	; 0x62
 8008d86:	601c      	str	r4, [r3, #0]
 8008d88:	e723      	b.n	8008bd2 <__gethex+0x12a>
 8008d8a:	bf00      	nop
 8008d8c:	0800c10c 	.word	0x0800c10c
 8008d90:	0800c030 	.word	0x0800c030
 8008d94:	0800c0a4 	.word	0x0800c0a4
 8008d98:	1e71      	subs	r1, r6, #1
 8008d9a:	4620      	mov	r0, r4
 8008d9c:	f000 fec0 	bl	8009b20 <__any_on>
 8008da0:	2800      	cmp	r0, #0
 8008da2:	d1e6      	bne.n	8008d72 <__gethex+0x2ca>
 8008da4:	ee18 0a10 	vmov	r0, s16
 8008da8:	4621      	mov	r1, r4
 8008daa:	f000 fa59 	bl	8009260 <_Bfree>
 8008dae:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8008db0:	2300      	movs	r3, #0
 8008db2:	6013      	str	r3, [r2, #0]
 8008db4:	2750      	movs	r7, #80	; 0x50
 8008db6:	e70c      	b.n	8008bd2 <__gethex+0x12a>
 8008db8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008dba:	2b00      	cmp	r3, #0
 8008dbc:	d1f2      	bne.n	8008da4 <__gethex+0x2fc>
 8008dbe:	e7d8      	b.n	8008d72 <__gethex+0x2ca>
 8008dc0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008dc2:	2b00      	cmp	r3, #0
 8008dc4:	d1d5      	bne.n	8008d72 <__gethex+0x2ca>
 8008dc6:	e7ed      	b.n	8008da4 <__gethex+0x2fc>
 8008dc8:	1e6f      	subs	r7, r5, #1
 8008dca:	f1ba 0f00 	cmp.w	sl, #0
 8008dce:	d131      	bne.n	8008e34 <__gethex+0x38c>
 8008dd0:	b127      	cbz	r7, 8008ddc <__gethex+0x334>
 8008dd2:	4639      	mov	r1, r7
 8008dd4:	4620      	mov	r0, r4
 8008dd6:	f000 fea3 	bl	8009b20 <__any_on>
 8008dda:	4682      	mov	sl, r0
 8008ddc:	117b      	asrs	r3, r7, #5
 8008dde:	2101      	movs	r1, #1
 8008de0:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8008de4:	f007 071f 	and.w	r7, r7, #31
 8008de8:	fa01 f707 	lsl.w	r7, r1, r7
 8008dec:	421f      	tst	r7, r3
 8008dee:	4629      	mov	r1, r5
 8008df0:	4620      	mov	r0, r4
 8008df2:	bf18      	it	ne
 8008df4:	f04a 0a02 	orrne.w	sl, sl, #2
 8008df8:	1b76      	subs	r6, r6, r5
 8008dfa:	f7ff fded 	bl	80089d8 <rshift>
 8008dfe:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8008e02:	2702      	movs	r7, #2
 8008e04:	f1ba 0f00 	cmp.w	sl, #0
 8008e08:	d048      	beq.n	8008e9c <__gethex+0x3f4>
 8008e0a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8008e0e:	2b02      	cmp	r3, #2
 8008e10:	d015      	beq.n	8008e3e <__gethex+0x396>
 8008e12:	2b03      	cmp	r3, #3
 8008e14:	d017      	beq.n	8008e46 <__gethex+0x39e>
 8008e16:	2b01      	cmp	r3, #1
 8008e18:	d109      	bne.n	8008e2e <__gethex+0x386>
 8008e1a:	f01a 0f02 	tst.w	sl, #2
 8008e1e:	d006      	beq.n	8008e2e <__gethex+0x386>
 8008e20:	f8d9 0000 	ldr.w	r0, [r9]
 8008e24:	ea4a 0a00 	orr.w	sl, sl, r0
 8008e28:	f01a 0f01 	tst.w	sl, #1
 8008e2c:	d10e      	bne.n	8008e4c <__gethex+0x3a4>
 8008e2e:	f047 0710 	orr.w	r7, r7, #16
 8008e32:	e033      	b.n	8008e9c <__gethex+0x3f4>
 8008e34:	f04f 0a01 	mov.w	sl, #1
 8008e38:	e7d0      	b.n	8008ddc <__gethex+0x334>
 8008e3a:	2701      	movs	r7, #1
 8008e3c:	e7e2      	b.n	8008e04 <__gethex+0x35c>
 8008e3e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008e40:	f1c3 0301 	rsb	r3, r3, #1
 8008e44:	9315      	str	r3, [sp, #84]	; 0x54
 8008e46:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008e48:	2b00      	cmp	r3, #0
 8008e4a:	d0f0      	beq.n	8008e2e <__gethex+0x386>
 8008e4c:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8008e50:	f104 0314 	add.w	r3, r4, #20
 8008e54:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8008e58:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8008e5c:	f04f 0c00 	mov.w	ip, #0
 8008e60:	4618      	mov	r0, r3
 8008e62:	f853 2b04 	ldr.w	r2, [r3], #4
 8008e66:	f1b2 3fff 	cmp.w	r2, #4294967295
 8008e6a:	d01c      	beq.n	8008ea6 <__gethex+0x3fe>
 8008e6c:	3201      	adds	r2, #1
 8008e6e:	6002      	str	r2, [r0, #0]
 8008e70:	2f02      	cmp	r7, #2
 8008e72:	f104 0314 	add.w	r3, r4, #20
 8008e76:	d13f      	bne.n	8008ef8 <__gethex+0x450>
 8008e78:	f8d8 2000 	ldr.w	r2, [r8]
 8008e7c:	3a01      	subs	r2, #1
 8008e7e:	42b2      	cmp	r2, r6
 8008e80:	d10a      	bne.n	8008e98 <__gethex+0x3f0>
 8008e82:	1171      	asrs	r1, r6, #5
 8008e84:	2201      	movs	r2, #1
 8008e86:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8008e8a:	f006 061f 	and.w	r6, r6, #31
 8008e8e:	fa02 f606 	lsl.w	r6, r2, r6
 8008e92:	421e      	tst	r6, r3
 8008e94:	bf18      	it	ne
 8008e96:	4617      	movne	r7, r2
 8008e98:	f047 0720 	orr.w	r7, r7, #32
 8008e9c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008e9e:	601c      	str	r4, [r3, #0]
 8008ea0:	9b04      	ldr	r3, [sp, #16]
 8008ea2:	601d      	str	r5, [r3, #0]
 8008ea4:	e695      	b.n	8008bd2 <__gethex+0x12a>
 8008ea6:	4299      	cmp	r1, r3
 8008ea8:	f843 cc04 	str.w	ip, [r3, #-4]
 8008eac:	d8d8      	bhi.n	8008e60 <__gethex+0x3b8>
 8008eae:	68a3      	ldr	r3, [r4, #8]
 8008eb0:	459b      	cmp	fp, r3
 8008eb2:	db19      	blt.n	8008ee8 <__gethex+0x440>
 8008eb4:	6861      	ldr	r1, [r4, #4]
 8008eb6:	ee18 0a10 	vmov	r0, s16
 8008eba:	3101      	adds	r1, #1
 8008ebc:	f000 f990 	bl	80091e0 <_Balloc>
 8008ec0:	4681      	mov	r9, r0
 8008ec2:	b918      	cbnz	r0, 8008ecc <__gethex+0x424>
 8008ec4:	4b1a      	ldr	r3, [pc, #104]	; (8008f30 <__gethex+0x488>)
 8008ec6:	4602      	mov	r2, r0
 8008ec8:	2184      	movs	r1, #132	; 0x84
 8008eca:	e6a8      	b.n	8008c1e <__gethex+0x176>
 8008ecc:	6922      	ldr	r2, [r4, #16]
 8008ece:	3202      	adds	r2, #2
 8008ed0:	f104 010c 	add.w	r1, r4, #12
 8008ed4:	0092      	lsls	r2, r2, #2
 8008ed6:	300c      	adds	r0, #12
 8008ed8:	f000 f974 	bl	80091c4 <memcpy>
 8008edc:	4621      	mov	r1, r4
 8008ede:	ee18 0a10 	vmov	r0, s16
 8008ee2:	f000 f9bd 	bl	8009260 <_Bfree>
 8008ee6:	464c      	mov	r4, r9
 8008ee8:	6923      	ldr	r3, [r4, #16]
 8008eea:	1c5a      	adds	r2, r3, #1
 8008eec:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8008ef0:	6122      	str	r2, [r4, #16]
 8008ef2:	2201      	movs	r2, #1
 8008ef4:	615a      	str	r2, [r3, #20]
 8008ef6:	e7bb      	b.n	8008e70 <__gethex+0x3c8>
 8008ef8:	6922      	ldr	r2, [r4, #16]
 8008efa:	455a      	cmp	r2, fp
 8008efc:	dd0b      	ble.n	8008f16 <__gethex+0x46e>
 8008efe:	2101      	movs	r1, #1
 8008f00:	4620      	mov	r0, r4
 8008f02:	f7ff fd69 	bl	80089d8 <rshift>
 8008f06:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8008f0a:	3501      	adds	r5, #1
 8008f0c:	42ab      	cmp	r3, r5
 8008f0e:	f6ff aed0 	blt.w	8008cb2 <__gethex+0x20a>
 8008f12:	2701      	movs	r7, #1
 8008f14:	e7c0      	b.n	8008e98 <__gethex+0x3f0>
 8008f16:	f016 061f 	ands.w	r6, r6, #31
 8008f1a:	d0fa      	beq.n	8008f12 <__gethex+0x46a>
 8008f1c:	4453      	add	r3, sl
 8008f1e:	f1c6 0620 	rsb	r6, r6, #32
 8008f22:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8008f26:	f000 fa4d 	bl	80093c4 <__hi0bits>
 8008f2a:	42b0      	cmp	r0, r6
 8008f2c:	dbe7      	blt.n	8008efe <__gethex+0x456>
 8008f2e:	e7f0      	b.n	8008f12 <__gethex+0x46a>
 8008f30:	0800c030 	.word	0x0800c030

08008f34 <L_shift>:
 8008f34:	f1c2 0208 	rsb	r2, r2, #8
 8008f38:	0092      	lsls	r2, r2, #2
 8008f3a:	b570      	push	{r4, r5, r6, lr}
 8008f3c:	f1c2 0620 	rsb	r6, r2, #32
 8008f40:	6843      	ldr	r3, [r0, #4]
 8008f42:	6804      	ldr	r4, [r0, #0]
 8008f44:	fa03 f506 	lsl.w	r5, r3, r6
 8008f48:	432c      	orrs	r4, r5
 8008f4a:	40d3      	lsrs	r3, r2
 8008f4c:	6004      	str	r4, [r0, #0]
 8008f4e:	f840 3f04 	str.w	r3, [r0, #4]!
 8008f52:	4288      	cmp	r0, r1
 8008f54:	d3f4      	bcc.n	8008f40 <L_shift+0xc>
 8008f56:	bd70      	pop	{r4, r5, r6, pc}

08008f58 <__match>:
 8008f58:	b530      	push	{r4, r5, lr}
 8008f5a:	6803      	ldr	r3, [r0, #0]
 8008f5c:	3301      	adds	r3, #1
 8008f5e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008f62:	b914      	cbnz	r4, 8008f6a <__match+0x12>
 8008f64:	6003      	str	r3, [r0, #0]
 8008f66:	2001      	movs	r0, #1
 8008f68:	bd30      	pop	{r4, r5, pc}
 8008f6a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008f6e:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8008f72:	2d19      	cmp	r5, #25
 8008f74:	bf98      	it	ls
 8008f76:	3220      	addls	r2, #32
 8008f78:	42a2      	cmp	r2, r4
 8008f7a:	d0f0      	beq.n	8008f5e <__match+0x6>
 8008f7c:	2000      	movs	r0, #0
 8008f7e:	e7f3      	b.n	8008f68 <__match+0x10>

08008f80 <__hexnan>:
 8008f80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008f84:	680b      	ldr	r3, [r1, #0]
 8008f86:	115e      	asrs	r6, r3, #5
 8008f88:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8008f8c:	f013 031f 	ands.w	r3, r3, #31
 8008f90:	b087      	sub	sp, #28
 8008f92:	bf18      	it	ne
 8008f94:	3604      	addne	r6, #4
 8008f96:	2500      	movs	r5, #0
 8008f98:	1f37      	subs	r7, r6, #4
 8008f9a:	4690      	mov	r8, r2
 8008f9c:	6802      	ldr	r2, [r0, #0]
 8008f9e:	9301      	str	r3, [sp, #4]
 8008fa0:	4682      	mov	sl, r0
 8008fa2:	f846 5c04 	str.w	r5, [r6, #-4]
 8008fa6:	46b9      	mov	r9, r7
 8008fa8:	463c      	mov	r4, r7
 8008faa:	9502      	str	r5, [sp, #8]
 8008fac:	46ab      	mov	fp, r5
 8008fae:	7851      	ldrb	r1, [r2, #1]
 8008fb0:	1c53      	adds	r3, r2, #1
 8008fb2:	9303      	str	r3, [sp, #12]
 8008fb4:	b341      	cbz	r1, 8009008 <__hexnan+0x88>
 8008fb6:	4608      	mov	r0, r1
 8008fb8:	9205      	str	r2, [sp, #20]
 8008fba:	9104      	str	r1, [sp, #16]
 8008fbc:	f7ff fd5e 	bl	8008a7c <__hexdig_fun>
 8008fc0:	2800      	cmp	r0, #0
 8008fc2:	d14f      	bne.n	8009064 <__hexnan+0xe4>
 8008fc4:	9904      	ldr	r1, [sp, #16]
 8008fc6:	9a05      	ldr	r2, [sp, #20]
 8008fc8:	2920      	cmp	r1, #32
 8008fca:	d818      	bhi.n	8008ffe <__hexnan+0x7e>
 8008fcc:	9b02      	ldr	r3, [sp, #8]
 8008fce:	459b      	cmp	fp, r3
 8008fd0:	dd13      	ble.n	8008ffa <__hexnan+0x7a>
 8008fd2:	454c      	cmp	r4, r9
 8008fd4:	d206      	bcs.n	8008fe4 <__hexnan+0x64>
 8008fd6:	2d07      	cmp	r5, #7
 8008fd8:	dc04      	bgt.n	8008fe4 <__hexnan+0x64>
 8008fda:	462a      	mov	r2, r5
 8008fdc:	4649      	mov	r1, r9
 8008fde:	4620      	mov	r0, r4
 8008fe0:	f7ff ffa8 	bl	8008f34 <L_shift>
 8008fe4:	4544      	cmp	r4, r8
 8008fe6:	d950      	bls.n	800908a <__hexnan+0x10a>
 8008fe8:	2300      	movs	r3, #0
 8008fea:	f1a4 0904 	sub.w	r9, r4, #4
 8008fee:	f844 3c04 	str.w	r3, [r4, #-4]
 8008ff2:	f8cd b008 	str.w	fp, [sp, #8]
 8008ff6:	464c      	mov	r4, r9
 8008ff8:	461d      	mov	r5, r3
 8008ffa:	9a03      	ldr	r2, [sp, #12]
 8008ffc:	e7d7      	b.n	8008fae <__hexnan+0x2e>
 8008ffe:	2929      	cmp	r1, #41	; 0x29
 8009000:	d156      	bne.n	80090b0 <__hexnan+0x130>
 8009002:	3202      	adds	r2, #2
 8009004:	f8ca 2000 	str.w	r2, [sl]
 8009008:	f1bb 0f00 	cmp.w	fp, #0
 800900c:	d050      	beq.n	80090b0 <__hexnan+0x130>
 800900e:	454c      	cmp	r4, r9
 8009010:	d206      	bcs.n	8009020 <__hexnan+0xa0>
 8009012:	2d07      	cmp	r5, #7
 8009014:	dc04      	bgt.n	8009020 <__hexnan+0xa0>
 8009016:	462a      	mov	r2, r5
 8009018:	4649      	mov	r1, r9
 800901a:	4620      	mov	r0, r4
 800901c:	f7ff ff8a 	bl	8008f34 <L_shift>
 8009020:	4544      	cmp	r4, r8
 8009022:	d934      	bls.n	800908e <__hexnan+0x10e>
 8009024:	f1a8 0204 	sub.w	r2, r8, #4
 8009028:	4623      	mov	r3, r4
 800902a:	f853 1b04 	ldr.w	r1, [r3], #4
 800902e:	f842 1f04 	str.w	r1, [r2, #4]!
 8009032:	429f      	cmp	r7, r3
 8009034:	d2f9      	bcs.n	800902a <__hexnan+0xaa>
 8009036:	1b3b      	subs	r3, r7, r4
 8009038:	f023 0303 	bic.w	r3, r3, #3
 800903c:	3304      	adds	r3, #4
 800903e:	3401      	adds	r4, #1
 8009040:	3e03      	subs	r6, #3
 8009042:	42b4      	cmp	r4, r6
 8009044:	bf88      	it	hi
 8009046:	2304      	movhi	r3, #4
 8009048:	4443      	add	r3, r8
 800904a:	2200      	movs	r2, #0
 800904c:	f843 2b04 	str.w	r2, [r3], #4
 8009050:	429f      	cmp	r7, r3
 8009052:	d2fb      	bcs.n	800904c <__hexnan+0xcc>
 8009054:	683b      	ldr	r3, [r7, #0]
 8009056:	b91b      	cbnz	r3, 8009060 <__hexnan+0xe0>
 8009058:	4547      	cmp	r7, r8
 800905a:	d127      	bne.n	80090ac <__hexnan+0x12c>
 800905c:	2301      	movs	r3, #1
 800905e:	603b      	str	r3, [r7, #0]
 8009060:	2005      	movs	r0, #5
 8009062:	e026      	b.n	80090b2 <__hexnan+0x132>
 8009064:	3501      	adds	r5, #1
 8009066:	2d08      	cmp	r5, #8
 8009068:	f10b 0b01 	add.w	fp, fp, #1
 800906c:	dd06      	ble.n	800907c <__hexnan+0xfc>
 800906e:	4544      	cmp	r4, r8
 8009070:	d9c3      	bls.n	8008ffa <__hexnan+0x7a>
 8009072:	2300      	movs	r3, #0
 8009074:	f844 3c04 	str.w	r3, [r4, #-4]
 8009078:	2501      	movs	r5, #1
 800907a:	3c04      	subs	r4, #4
 800907c:	6822      	ldr	r2, [r4, #0]
 800907e:	f000 000f 	and.w	r0, r0, #15
 8009082:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8009086:	6022      	str	r2, [r4, #0]
 8009088:	e7b7      	b.n	8008ffa <__hexnan+0x7a>
 800908a:	2508      	movs	r5, #8
 800908c:	e7b5      	b.n	8008ffa <__hexnan+0x7a>
 800908e:	9b01      	ldr	r3, [sp, #4]
 8009090:	2b00      	cmp	r3, #0
 8009092:	d0df      	beq.n	8009054 <__hexnan+0xd4>
 8009094:	f04f 32ff 	mov.w	r2, #4294967295
 8009098:	f1c3 0320 	rsb	r3, r3, #32
 800909c:	fa22 f303 	lsr.w	r3, r2, r3
 80090a0:	f856 2c04 	ldr.w	r2, [r6, #-4]
 80090a4:	401a      	ands	r2, r3
 80090a6:	f846 2c04 	str.w	r2, [r6, #-4]
 80090aa:	e7d3      	b.n	8009054 <__hexnan+0xd4>
 80090ac:	3f04      	subs	r7, #4
 80090ae:	e7d1      	b.n	8009054 <__hexnan+0xd4>
 80090b0:	2004      	movs	r0, #4
 80090b2:	b007      	add	sp, #28
 80090b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080090b8 <_localeconv_r>:
 80090b8:	4800      	ldr	r0, [pc, #0]	; (80090bc <_localeconv_r+0x4>)
 80090ba:	4770      	bx	lr
 80090bc:	20000164 	.word	0x20000164

080090c0 <__retarget_lock_init_recursive>:
 80090c0:	4770      	bx	lr

080090c2 <__retarget_lock_acquire_recursive>:
 80090c2:	4770      	bx	lr

080090c4 <__retarget_lock_release_recursive>:
 80090c4:	4770      	bx	lr

080090c6 <__swhatbuf_r>:
 80090c6:	b570      	push	{r4, r5, r6, lr}
 80090c8:	460e      	mov	r6, r1
 80090ca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80090ce:	2900      	cmp	r1, #0
 80090d0:	b096      	sub	sp, #88	; 0x58
 80090d2:	4614      	mov	r4, r2
 80090d4:	461d      	mov	r5, r3
 80090d6:	da08      	bge.n	80090ea <__swhatbuf_r+0x24>
 80090d8:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80090dc:	2200      	movs	r2, #0
 80090de:	602a      	str	r2, [r5, #0]
 80090e0:	061a      	lsls	r2, r3, #24
 80090e2:	d410      	bmi.n	8009106 <__swhatbuf_r+0x40>
 80090e4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80090e8:	e00e      	b.n	8009108 <__swhatbuf_r+0x42>
 80090ea:	466a      	mov	r2, sp
 80090ec:	f001 feea 	bl	800aec4 <_fstat_r>
 80090f0:	2800      	cmp	r0, #0
 80090f2:	dbf1      	blt.n	80090d8 <__swhatbuf_r+0x12>
 80090f4:	9a01      	ldr	r2, [sp, #4]
 80090f6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80090fa:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80090fe:	425a      	negs	r2, r3
 8009100:	415a      	adcs	r2, r3
 8009102:	602a      	str	r2, [r5, #0]
 8009104:	e7ee      	b.n	80090e4 <__swhatbuf_r+0x1e>
 8009106:	2340      	movs	r3, #64	; 0x40
 8009108:	2000      	movs	r0, #0
 800910a:	6023      	str	r3, [r4, #0]
 800910c:	b016      	add	sp, #88	; 0x58
 800910e:	bd70      	pop	{r4, r5, r6, pc}

08009110 <__smakebuf_r>:
 8009110:	898b      	ldrh	r3, [r1, #12]
 8009112:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009114:	079d      	lsls	r5, r3, #30
 8009116:	4606      	mov	r6, r0
 8009118:	460c      	mov	r4, r1
 800911a:	d507      	bpl.n	800912c <__smakebuf_r+0x1c>
 800911c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009120:	6023      	str	r3, [r4, #0]
 8009122:	6123      	str	r3, [r4, #16]
 8009124:	2301      	movs	r3, #1
 8009126:	6163      	str	r3, [r4, #20]
 8009128:	b002      	add	sp, #8
 800912a:	bd70      	pop	{r4, r5, r6, pc}
 800912c:	ab01      	add	r3, sp, #4
 800912e:	466a      	mov	r2, sp
 8009130:	f7ff ffc9 	bl	80090c6 <__swhatbuf_r>
 8009134:	9900      	ldr	r1, [sp, #0]
 8009136:	4605      	mov	r5, r0
 8009138:	4630      	mov	r0, r6
 800913a:	f000 fd95 	bl	8009c68 <_malloc_r>
 800913e:	b948      	cbnz	r0, 8009154 <__smakebuf_r+0x44>
 8009140:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009144:	059a      	lsls	r2, r3, #22
 8009146:	d4ef      	bmi.n	8009128 <__smakebuf_r+0x18>
 8009148:	f023 0303 	bic.w	r3, r3, #3
 800914c:	f043 0302 	orr.w	r3, r3, #2
 8009150:	81a3      	strh	r3, [r4, #12]
 8009152:	e7e3      	b.n	800911c <__smakebuf_r+0xc>
 8009154:	4b0d      	ldr	r3, [pc, #52]	; (800918c <__smakebuf_r+0x7c>)
 8009156:	62b3      	str	r3, [r6, #40]	; 0x28
 8009158:	89a3      	ldrh	r3, [r4, #12]
 800915a:	6020      	str	r0, [r4, #0]
 800915c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009160:	81a3      	strh	r3, [r4, #12]
 8009162:	9b00      	ldr	r3, [sp, #0]
 8009164:	6163      	str	r3, [r4, #20]
 8009166:	9b01      	ldr	r3, [sp, #4]
 8009168:	6120      	str	r0, [r4, #16]
 800916a:	b15b      	cbz	r3, 8009184 <__smakebuf_r+0x74>
 800916c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009170:	4630      	mov	r0, r6
 8009172:	f001 feb9 	bl	800aee8 <_isatty_r>
 8009176:	b128      	cbz	r0, 8009184 <__smakebuf_r+0x74>
 8009178:	89a3      	ldrh	r3, [r4, #12]
 800917a:	f023 0303 	bic.w	r3, r3, #3
 800917e:	f043 0301 	orr.w	r3, r3, #1
 8009182:	81a3      	strh	r3, [r4, #12]
 8009184:	89a0      	ldrh	r0, [r4, #12]
 8009186:	4305      	orrs	r5, r0
 8009188:	81a5      	strh	r5, [r4, #12]
 800918a:	e7cd      	b.n	8009128 <__smakebuf_r+0x18>
 800918c:	080087fd 	.word	0x080087fd

08009190 <malloc>:
 8009190:	4b02      	ldr	r3, [pc, #8]	; (800919c <malloc+0xc>)
 8009192:	4601      	mov	r1, r0
 8009194:	6818      	ldr	r0, [r3, #0]
 8009196:	f000 bd67 	b.w	8009c68 <_malloc_r>
 800919a:	bf00      	nop
 800919c:	2000000c 	.word	0x2000000c

080091a0 <__ascii_mbtowc>:
 80091a0:	b082      	sub	sp, #8
 80091a2:	b901      	cbnz	r1, 80091a6 <__ascii_mbtowc+0x6>
 80091a4:	a901      	add	r1, sp, #4
 80091a6:	b142      	cbz	r2, 80091ba <__ascii_mbtowc+0x1a>
 80091a8:	b14b      	cbz	r3, 80091be <__ascii_mbtowc+0x1e>
 80091aa:	7813      	ldrb	r3, [r2, #0]
 80091ac:	600b      	str	r3, [r1, #0]
 80091ae:	7812      	ldrb	r2, [r2, #0]
 80091b0:	1e10      	subs	r0, r2, #0
 80091b2:	bf18      	it	ne
 80091b4:	2001      	movne	r0, #1
 80091b6:	b002      	add	sp, #8
 80091b8:	4770      	bx	lr
 80091ba:	4610      	mov	r0, r2
 80091bc:	e7fb      	b.n	80091b6 <__ascii_mbtowc+0x16>
 80091be:	f06f 0001 	mvn.w	r0, #1
 80091c2:	e7f8      	b.n	80091b6 <__ascii_mbtowc+0x16>

080091c4 <memcpy>:
 80091c4:	440a      	add	r2, r1
 80091c6:	4291      	cmp	r1, r2
 80091c8:	f100 33ff 	add.w	r3, r0, #4294967295
 80091cc:	d100      	bne.n	80091d0 <memcpy+0xc>
 80091ce:	4770      	bx	lr
 80091d0:	b510      	push	{r4, lr}
 80091d2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80091d6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80091da:	4291      	cmp	r1, r2
 80091dc:	d1f9      	bne.n	80091d2 <memcpy+0xe>
 80091de:	bd10      	pop	{r4, pc}

080091e0 <_Balloc>:
 80091e0:	b570      	push	{r4, r5, r6, lr}
 80091e2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80091e4:	4604      	mov	r4, r0
 80091e6:	460d      	mov	r5, r1
 80091e8:	b976      	cbnz	r6, 8009208 <_Balloc+0x28>
 80091ea:	2010      	movs	r0, #16
 80091ec:	f7ff ffd0 	bl	8009190 <malloc>
 80091f0:	4602      	mov	r2, r0
 80091f2:	6260      	str	r0, [r4, #36]	; 0x24
 80091f4:	b920      	cbnz	r0, 8009200 <_Balloc+0x20>
 80091f6:	4b18      	ldr	r3, [pc, #96]	; (8009258 <_Balloc+0x78>)
 80091f8:	4818      	ldr	r0, [pc, #96]	; (800925c <_Balloc+0x7c>)
 80091fa:	2166      	movs	r1, #102	; 0x66
 80091fc:	f001 fe22 	bl	800ae44 <__assert_func>
 8009200:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009204:	6006      	str	r6, [r0, #0]
 8009206:	60c6      	str	r6, [r0, #12]
 8009208:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800920a:	68f3      	ldr	r3, [r6, #12]
 800920c:	b183      	cbz	r3, 8009230 <_Balloc+0x50>
 800920e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009210:	68db      	ldr	r3, [r3, #12]
 8009212:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8009216:	b9b8      	cbnz	r0, 8009248 <_Balloc+0x68>
 8009218:	2101      	movs	r1, #1
 800921a:	fa01 f605 	lsl.w	r6, r1, r5
 800921e:	1d72      	adds	r2, r6, #5
 8009220:	0092      	lsls	r2, r2, #2
 8009222:	4620      	mov	r0, r4
 8009224:	f000 fc9d 	bl	8009b62 <_calloc_r>
 8009228:	b160      	cbz	r0, 8009244 <_Balloc+0x64>
 800922a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800922e:	e00e      	b.n	800924e <_Balloc+0x6e>
 8009230:	2221      	movs	r2, #33	; 0x21
 8009232:	2104      	movs	r1, #4
 8009234:	4620      	mov	r0, r4
 8009236:	f000 fc94 	bl	8009b62 <_calloc_r>
 800923a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800923c:	60f0      	str	r0, [r6, #12]
 800923e:	68db      	ldr	r3, [r3, #12]
 8009240:	2b00      	cmp	r3, #0
 8009242:	d1e4      	bne.n	800920e <_Balloc+0x2e>
 8009244:	2000      	movs	r0, #0
 8009246:	bd70      	pop	{r4, r5, r6, pc}
 8009248:	6802      	ldr	r2, [r0, #0]
 800924a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800924e:	2300      	movs	r3, #0
 8009250:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009254:	e7f7      	b.n	8009246 <_Balloc+0x66>
 8009256:	bf00      	nop
 8009258:	0800bfbe 	.word	0x0800bfbe
 800925c:	0800c120 	.word	0x0800c120

08009260 <_Bfree>:
 8009260:	b570      	push	{r4, r5, r6, lr}
 8009262:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009264:	4605      	mov	r5, r0
 8009266:	460c      	mov	r4, r1
 8009268:	b976      	cbnz	r6, 8009288 <_Bfree+0x28>
 800926a:	2010      	movs	r0, #16
 800926c:	f7ff ff90 	bl	8009190 <malloc>
 8009270:	4602      	mov	r2, r0
 8009272:	6268      	str	r0, [r5, #36]	; 0x24
 8009274:	b920      	cbnz	r0, 8009280 <_Bfree+0x20>
 8009276:	4b09      	ldr	r3, [pc, #36]	; (800929c <_Bfree+0x3c>)
 8009278:	4809      	ldr	r0, [pc, #36]	; (80092a0 <_Bfree+0x40>)
 800927a:	218a      	movs	r1, #138	; 0x8a
 800927c:	f001 fde2 	bl	800ae44 <__assert_func>
 8009280:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009284:	6006      	str	r6, [r0, #0]
 8009286:	60c6      	str	r6, [r0, #12]
 8009288:	b13c      	cbz	r4, 800929a <_Bfree+0x3a>
 800928a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800928c:	6862      	ldr	r2, [r4, #4]
 800928e:	68db      	ldr	r3, [r3, #12]
 8009290:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009294:	6021      	str	r1, [r4, #0]
 8009296:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800929a:	bd70      	pop	{r4, r5, r6, pc}
 800929c:	0800bfbe 	.word	0x0800bfbe
 80092a0:	0800c120 	.word	0x0800c120

080092a4 <__multadd>:
 80092a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80092a8:	690d      	ldr	r5, [r1, #16]
 80092aa:	4607      	mov	r7, r0
 80092ac:	460c      	mov	r4, r1
 80092ae:	461e      	mov	r6, r3
 80092b0:	f101 0c14 	add.w	ip, r1, #20
 80092b4:	2000      	movs	r0, #0
 80092b6:	f8dc 3000 	ldr.w	r3, [ip]
 80092ba:	b299      	uxth	r1, r3
 80092bc:	fb02 6101 	mla	r1, r2, r1, r6
 80092c0:	0c1e      	lsrs	r6, r3, #16
 80092c2:	0c0b      	lsrs	r3, r1, #16
 80092c4:	fb02 3306 	mla	r3, r2, r6, r3
 80092c8:	b289      	uxth	r1, r1
 80092ca:	3001      	adds	r0, #1
 80092cc:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80092d0:	4285      	cmp	r5, r0
 80092d2:	f84c 1b04 	str.w	r1, [ip], #4
 80092d6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80092da:	dcec      	bgt.n	80092b6 <__multadd+0x12>
 80092dc:	b30e      	cbz	r6, 8009322 <__multadd+0x7e>
 80092de:	68a3      	ldr	r3, [r4, #8]
 80092e0:	42ab      	cmp	r3, r5
 80092e2:	dc19      	bgt.n	8009318 <__multadd+0x74>
 80092e4:	6861      	ldr	r1, [r4, #4]
 80092e6:	4638      	mov	r0, r7
 80092e8:	3101      	adds	r1, #1
 80092ea:	f7ff ff79 	bl	80091e0 <_Balloc>
 80092ee:	4680      	mov	r8, r0
 80092f0:	b928      	cbnz	r0, 80092fe <__multadd+0x5a>
 80092f2:	4602      	mov	r2, r0
 80092f4:	4b0c      	ldr	r3, [pc, #48]	; (8009328 <__multadd+0x84>)
 80092f6:	480d      	ldr	r0, [pc, #52]	; (800932c <__multadd+0x88>)
 80092f8:	21b5      	movs	r1, #181	; 0xb5
 80092fa:	f001 fda3 	bl	800ae44 <__assert_func>
 80092fe:	6922      	ldr	r2, [r4, #16]
 8009300:	3202      	adds	r2, #2
 8009302:	f104 010c 	add.w	r1, r4, #12
 8009306:	0092      	lsls	r2, r2, #2
 8009308:	300c      	adds	r0, #12
 800930a:	f7ff ff5b 	bl	80091c4 <memcpy>
 800930e:	4621      	mov	r1, r4
 8009310:	4638      	mov	r0, r7
 8009312:	f7ff ffa5 	bl	8009260 <_Bfree>
 8009316:	4644      	mov	r4, r8
 8009318:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800931c:	3501      	adds	r5, #1
 800931e:	615e      	str	r6, [r3, #20]
 8009320:	6125      	str	r5, [r4, #16]
 8009322:	4620      	mov	r0, r4
 8009324:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009328:	0800c030 	.word	0x0800c030
 800932c:	0800c120 	.word	0x0800c120

08009330 <__s2b>:
 8009330:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009334:	460c      	mov	r4, r1
 8009336:	4615      	mov	r5, r2
 8009338:	461f      	mov	r7, r3
 800933a:	2209      	movs	r2, #9
 800933c:	3308      	adds	r3, #8
 800933e:	4606      	mov	r6, r0
 8009340:	fb93 f3f2 	sdiv	r3, r3, r2
 8009344:	2100      	movs	r1, #0
 8009346:	2201      	movs	r2, #1
 8009348:	429a      	cmp	r2, r3
 800934a:	db09      	blt.n	8009360 <__s2b+0x30>
 800934c:	4630      	mov	r0, r6
 800934e:	f7ff ff47 	bl	80091e0 <_Balloc>
 8009352:	b940      	cbnz	r0, 8009366 <__s2b+0x36>
 8009354:	4602      	mov	r2, r0
 8009356:	4b19      	ldr	r3, [pc, #100]	; (80093bc <__s2b+0x8c>)
 8009358:	4819      	ldr	r0, [pc, #100]	; (80093c0 <__s2b+0x90>)
 800935a:	21ce      	movs	r1, #206	; 0xce
 800935c:	f001 fd72 	bl	800ae44 <__assert_func>
 8009360:	0052      	lsls	r2, r2, #1
 8009362:	3101      	adds	r1, #1
 8009364:	e7f0      	b.n	8009348 <__s2b+0x18>
 8009366:	9b08      	ldr	r3, [sp, #32]
 8009368:	6143      	str	r3, [r0, #20]
 800936a:	2d09      	cmp	r5, #9
 800936c:	f04f 0301 	mov.w	r3, #1
 8009370:	6103      	str	r3, [r0, #16]
 8009372:	dd16      	ble.n	80093a2 <__s2b+0x72>
 8009374:	f104 0909 	add.w	r9, r4, #9
 8009378:	46c8      	mov	r8, r9
 800937a:	442c      	add	r4, r5
 800937c:	f818 3b01 	ldrb.w	r3, [r8], #1
 8009380:	4601      	mov	r1, r0
 8009382:	3b30      	subs	r3, #48	; 0x30
 8009384:	220a      	movs	r2, #10
 8009386:	4630      	mov	r0, r6
 8009388:	f7ff ff8c 	bl	80092a4 <__multadd>
 800938c:	45a0      	cmp	r8, r4
 800938e:	d1f5      	bne.n	800937c <__s2b+0x4c>
 8009390:	f1a5 0408 	sub.w	r4, r5, #8
 8009394:	444c      	add	r4, r9
 8009396:	1b2d      	subs	r5, r5, r4
 8009398:	1963      	adds	r3, r4, r5
 800939a:	42bb      	cmp	r3, r7
 800939c:	db04      	blt.n	80093a8 <__s2b+0x78>
 800939e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80093a2:	340a      	adds	r4, #10
 80093a4:	2509      	movs	r5, #9
 80093a6:	e7f6      	b.n	8009396 <__s2b+0x66>
 80093a8:	f814 3b01 	ldrb.w	r3, [r4], #1
 80093ac:	4601      	mov	r1, r0
 80093ae:	3b30      	subs	r3, #48	; 0x30
 80093b0:	220a      	movs	r2, #10
 80093b2:	4630      	mov	r0, r6
 80093b4:	f7ff ff76 	bl	80092a4 <__multadd>
 80093b8:	e7ee      	b.n	8009398 <__s2b+0x68>
 80093ba:	bf00      	nop
 80093bc:	0800c030 	.word	0x0800c030
 80093c0:	0800c120 	.word	0x0800c120

080093c4 <__hi0bits>:
 80093c4:	0c03      	lsrs	r3, r0, #16
 80093c6:	041b      	lsls	r3, r3, #16
 80093c8:	b9d3      	cbnz	r3, 8009400 <__hi0bits+0x3c>
 80093ca:	0400      	lsls	r0, r0, #16
 80093cc:	2310      	movs	r3, #16
 80093ce:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80093d2:	bf04      	itt	eq
 80093d4:	0200      	lsleq	r0, r0, #8
 80093d6:	3308      	addeq	r3, #8
 80093d8:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80093dc:	bf04      	itt	eq
 80093de:	0100      	lsleq	r0, r0, #4
 80093e0:	3304      	addeq	r3, #4
 80093e2:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80093e6:	bf04      	itt	eq
 80093e8:	0080      	lsleq	r0, r0, #2
 80093ea:	3302      	addeq	r3, #2
 80093ec:	2800      	cmp	r0, #0
 80093ee:	db05      	blt.n	80093fc <__hi0bits+0x38>
 80093f0:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80093f4:	f103 0301 	add.w	r3, r3, #1
 80093f8:	bf08      	it	eq
 80093fa:	2320      	moveq	r3, #32
 80093fc:	4618      	mov	r0, r3
 80093fe:	4770      	bx	lr
 8009400:	2300      	movs	r3, #0
 8009402:	e7e4      	b.n	80093ce <__hi0bits+0xa>

08009404 <__lo0bits>:
 8009404:	6803      	ldr	r3, [r0, #0]
 8009406:	f013 0207 	ands.w	r2, r3, #7
 800940a:	4601      	mov	r1, r0
 800940c:	d00b      	beq.n	8009426 <__lo0bits+0x22>
 800940e:	07da      	lsls	r2, r3, #31
 8009410:	d423      	bmi.n	800945a <__lo0bits+0x56>
 8009412:	0798      	lsls	r0, r3, #30
 8009414:	bf49      	itett	mi
 8009416:	085b      	lsrmi	r3, r3, #1
 8009418:	089b      	lsrpl	r3, r3, #2
 800941a:	2001      	movmi	r0, #1
 800941c:	600b      	strmi	r3, [r1, #0]
 800941e:	bf5c      	itt	pl
 8009420:	600b      	strpl	r3, [r1, #0]
 8009422:	2002      	movpl	r0, #2
 8009424:	4770      	bx	lr
 8009426:	b298      	uxth	r0, r3
 8009428:	b9a8      	cbnz	r0, 8009456 <__lo0bits+0x52>
 800942a:	0c1b      	lsrs	r3, r3, #16
 800942c:	2010      	movs	r0, #16
 800942e:	b2da      	uxtb	r2, r3
 8009430:	b90a      	cbnz	r2, 8009436 <__lo0bits+0x32>
 8009432:	3008      	adds	r0, #8
 8009434:	0a1b      	lsrs	r3, r3, #8
 8009436:	071a      	lsls	r2, r3, #28
 8009438:	bf04      	itt	eq
 800943a:	091b      	lsreq	r3, r3, #4
 800943c:	3004      	addeq	r0, #4
 800943e:	079a      	lsls	r2, r3, #30
 8009440:	bf04      	itt	eq
 8009442:	089b      	lsreq	r3, r3, #2
 8009444:	3002      	addeq	r0, #2
 8009446:	07da      	lsls	r2, r3, #31
 8009448:	d403      	bmi.n	8009452 <__lo0bits+0x4e>
 800944a:	085b      	lsrs	r3, r3, #1
 800944c:	f100 0001 	add.w	r0, r0, #1
 8009450:	d005      	beq.n	800945e <__lo0bits+0x5a>
 8009452:	600b      	str	r3, [r1, #0]
 8009454:	4770      	bx	lr
 8009456:	4610      	mov	r0, r2
 8009458:	e7e9      	b.n	800942e <__lo0bits+0x2a>
 800945a:	2000      	movs	r0, #0
 800945c:	4770      	bx	lr
 800945e:	2020      	movs	r0, #32
 8009460:	4770      	bx	lr
	...

08009464 <__i2b>:
 8009464:	b510      	push	{r4, lr}
 8009466:	460c      	mov	r4, r1
 8009468:	2101      	movs	r1, #1
 800946a:	f7ff feb9 	bl	80091e0 <_Balloc>
 800946e:	4602      	mov	r2, r0
 8009470:	b928      	cbnz	r0, 800947e <__i2b+0x1a>
 8009472:	4b05      	ldr	r3, [pc, #20]	; (8009488 <__i2b+0x24>)
 8009474:	4805      	ldr	r0, [pc, #20]	; (800948c <__i2b+0x28>)
 8009476:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800947a:	f001 fce3 	bl	800ae44 <__assert_func>
 800947e:	2301      	movs	r3, #1
 8009480:	6144      	str	r4, [r0, #20]
 8009482:	6103      	str	r3, [r0, #16]
 8009484:	bd10      	pop	{r4, pc}
 8009486:	bf00      	nop
 8009488:	0800c030 	.word	0x0800c030
 800948c:	0800c120 	.word	0x0800c120

08009490 <__multiply>:
 8009490:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009494:	4691      	mov	r9, r2
 8009496:	690a      	ldr	r2, [r1, #16]
 8009498:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800949c:	429a      	cmp	r2, r3
 800949e:	bfb8      	it	lt
 80094a0:	460b      	movlt	r3, r1
 80094a2:	460c      	mov	r4, r1
 80094a4:	bfbc      	itt	lt
 80094a6:	464c      	movlt	r4, r9
 80094a8:	4699      	movlt	r9, r3
 80094aa:	6927      	ldr	r7, [r4, #16]
 80094ac:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80094b0:	68a3      	ldr	r3, [r4, #8]
 80094b2:	6861      	ldr	r1, [r4, #4]
 80094b4:	eb07 060a 	add.w	r6, r7, sl
 80094b8:	42b3      	cmp	r3, r6
 80094ba:	b085      	sub	sp, #20
 80094bc:	bfb8      	it	lt
 80094be:	3101      	addlt	r1, #1
 80094c0:	f7ff fe8e 	bl	80091e0 <_Balloc>
 80094c4:	b930      	cbnz	r0, 80094d4 <__multiply+0x44>
 80094c6:	4602      	mov	r2, r0
 80094c8:	4b44      	ldr	r3, [pc, #272]	; (80095dc <__multiply+0x14c>)
 80094ca:	4845      	ldr	r0, [pc, #276]	; (80095e0 <__multiply+0x150>)
 80094cc:	f240 115d 	movw	r1, #349	; 0x15d
 80094d0:	f001 fcb8 	bl	800ae44 <__assert_func>
 80094d4:	f100 0514 	add.w	r5, r0, #20
 80094d8:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80094dc:	462b      	mov	r3, r5
 80094de:	2200      	movs	r2, #0
 80094e0:	4543      	cmp	r3, r8
 80094e2:	d321      	bcc.n	8009528 <__multiply+0x98>
 80094e4:	f104 0314 	add.w	r3, r4, #20
 80094e8:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80094ec:	f109 0314 	add.w	r3, r9, #20
 80094f0:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80094f4:	9202      	str	r2, [sp, #8]
 80094f6:	1b3a      	subs	r2, r7, r4
 80094f8:	3a15      	subs	r2, #21
 80094fa:	f022 0203 	bic.w	r2, r2, #3
 80094fe:	3204      	adds	r2, #4
 8009500:	f104 0115 	add.w	r1, r4, #21
 8009504:	428f      	cmp	r7, r1
 8009506:	bf38      	it	cc
 8009508:	2204      	movcc	r2, #4
 800950a:	9201      	str	r2, [sp, #4]
 800950c:	9a02      	ldr	r2, [sp, #8]
 800950e:	9303      	str	r3, [sp, #12]
 8009510:	429a      	cmp	r2, r3
 8009512:	d80c      	bhi.n	800952e <__multiply+0x9e>
 8009514:	2e00      	cmp	r6, #0
 8009516:	dd03      	ble.n	8009520 <__multiply+0x90>
 8009518:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800951c:	2b00      	cmp	r3, #0
 800951e:	d05a      	beq.n	80095d6 <__multiply+0x146>
 8009520:	6106      	str	r6, [r0, #16]
 8009522:	b005      	add	sp, #20
 8009524:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009528:	f843 2b04 	str.w	r2, [r3], #4
 800952c:	e7d8      	b.n	80094e0 <__multiply+0x50>
 800952e:	f8b3 a000 	ldrh.w	sl, [r3]
 8009532:	f1ba 0f00 	cmp.w	sl, #0
 8009536:	d024      	beq.n	8009582 <__multiply+0xf2>
 8009538:	f104 0e14 	add.w	lr, r4, #20
 800953c:	46a9      	mov	r9, r5
 800953e:	f04f 0c00 	mov.w	ip, #0
 8009542:	f85e 2b04 	ldr.w	r2, [lr], #4
 8009546:	f8d9 1000 	ldr.w	r1, [r9]
 800954a:	fa1f fb82 	uxth.w	fp, r2
 800954e:	b289      	uxth	r1, r1
 8009550:	fb0a 110b 	mla	r1, sl, fp, r1
 8009554:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8009558:	f8d9 2000 	ldr.w	r2, [r9]
 800955c:	4461      	add	r1, ip
 800955e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8009562:	fb0a c20b 	mla	r2, sl, fp, ip
 8009566:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800956a:	b289      	uxth	r1, r1
 800956c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8009570:	4577      	cmp	r7, lr
 8009572:	f849 1b04 	str.w	r1, [r9], #4
 8009576:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800957a:	d8e2      	bhi.n	8009542 <__multiply+0xb2>
 800957c:	9a01      	ldr	r2, [sp, #4]
 800957e:	f845 c002 	str.w	ip, [r5, r2]
 8009582:	9a03      	ldr	r2, [sp, #12]
 8009584:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8009588:	3304      	adds	r3, #4
 800958a:	f1b9 0f00 	cmp.w	r9, #0
 800958e:	d020      	beq.n	80095d2 <__multiply+0x142>
 8009590:	6829      	ldr	r1, [r5, #0]
 8009592:	f104 0c14 	add.w	ip, r4, #20
 8009596:	46ae      	mov	lr, r5
 8009598:	f04f 0a00 	mov.w	sl, #0
 800959c:	f8bc b000 	ldrh.w	fp, [ip]
 80095a0:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80095a4:	fb09 220b 	mla	r2, r9, fp, r2
 80095a8:	4492      	add	sl, r2
 80095aa:	b289      	uxth	r1, r1
 80095ac:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 80095b0:	f84e 1b04 	str.w	r1, [lr], #4
 80095b4:	f85c 2b04 	ldr.w	r2, [ip], #4
 80095b8:	f8be 1000 	ldrh.w	r1, [lr]
 80095bc:	0c12      	lsrs	r2, r2, #16
 80095be:	fb09 1102 	mla	r1, r9, r2, r1
 80095c2:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 80095c6:	4567      	cmp	r7, ip
 80095c8:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80095cc:	d8e6      	bhi.n	800959c <__multiply+0x10c>
 80095ce:	9a01      	ldr	r2, [sp, #4]
 80095d0:	50a9      	str	r1, [r5, r2]
 80095d2:	3504      	adds	r5, #4
 80095d4:	e79a      	b.n	800950c <__multiply+0x7c>
 80095d6:	3e01      	subs	r6, #1
 80095d8:	e79c      	b.n	8009514 <__multiply+0x84>
 80095da:	bf00      	nop
 80095dc:	0800c030 	.word	0x0800c030
 80095e0:	0800c120 	.word	0x0800c120

080095e4 <__pow5mult>:
 80095e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80095e8:	4615      	mov	r5, r2
 80095ea:	f012 0203 	ands.w	r2, r2, #3
 80095ee:	4606      	mov	r6, r0
 80095f0:	460f      	mov	r7, r1
 80095f2:	d007      	beq.n	8009604 <__pow5mult+0x20>
 80095f4:	4c25      	ldr	r4, [pc, #148]	; (800968c <__pow5mult+0xa8>)
 80095f6:	3a01      	subs	r2, #1
 80095f8:	2300      	movs	r3, #0
 80095fa:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80095fe:	f7ff fe51 	bl	80092a4 <__multadd>
 8009602:	4607      	mov	r7, r0
 8009604:	10ad      	asrs	r5, r5, #2
 8009606:	d03d      	beq.n	8009684 <__pow5mult+0xa0>
 8009608:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800960a:	b97c      	cbnz	r4, 800962c <__pow5mult+0x48>
 800960c:	2010      	movs	r0, #16
 800960e:	f7ff fdbf 	bl	8009190 <malloc>
 8009612:	4602      	mov	r2, r0
 8009614:	6270      	str	r0, [r6, #36]	; 0x24
 8009616:	b928      	cbnz	r0, 8009624 <__pow5mult+0x40>
 8009618:	4b1d      	ldr	r3, [pc, #116]	; (8009690 <__pow5mult+0xac>)
 800961a:	481e      	ldr	r0, [pc, #120]	; (8009694 <__pow5mult+0xb0>)
 800961c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8009620:	f001 fc10 	bl	800ae44 <__assert_func>
 8009624:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009628:	6004      	str	r4, [r0, #0]
 800962a:	60c4      	str	r4, [r0, #12]
 800962c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8009630:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009634:	b94c      	cbnz	r4, 800964a <__pow5mult+0x66>
 8009636:	f240 2171 	movw	r1, #625	; 0x271
 800963a:	4630      	mov	r0, r6
 800963c:	f7ff ff12 	bl	8009464 <__i2b>
 8009640:	2300      	movs	r3, #0
 8009642:	f8c8 0008 	str.w	r0, [r8, #8]
 8009646:	4604      	mov	r4, r0
 8009648:	6003      	str	r3, [r0, #0]
 800964a:	f04f 0900 	mov.w	r9, #0
 800964e:	07eb      	lsls	r3, r5, #31
 8009650:	d50a      	bpl.n	8009668 <__pow5mult+0x84>
 8009652:	4639      	mov	r1, r7
 8009654:	4622      	mov	r2, r4
 8009656:	4630      	mov	r0, r6
 8009658:	f7ff ff1a 	bl	8009490 <__multiply>
 800965c:	4639      	mov	r1, r7
 800965e:	4680      	mov	r8, r0
 8009660:	4630      	mov	r0, r6
 8009662:	f7ff fdfd 	bl	8009260 <_Bfree>
 8009666:	4647      	mov	r7, r8
 8009668:	106d      	asrs	r5, r5, #1
 800966a:	d00b      	beq.n	8009684 <__pow5mult+0xa0>
 800966c:	6820      	ldr	r0, [r4, #0]
 800966e:	b938      	cbnz	r0, 8009680 <__pow5mult+0x9c>
 8009670:	4622      	mov	r2, r4
 8009672:	4621      	mov	r1, r4
 8009674:	4630      	mov	r0, r6
 8009676:	f7ff ff0b 	bl	8009490 <__multiply>
 800967a:	6020      	str	r0, [r4, #0]
 800967c:	f8c0 9000 	str.w	r9, [r0]
 8009680:	4604      	mov	r4, r0
 8009682:	e7e4      	b.n	800964e <__pow5mult+0x6a>
 8009684:	4638      	mov	r0, r7
 8009686:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800968a:	bf00      	nop
 800968c:	0800c270 	.word	0x0800c270
 8009690:	0800bfbe 	.word	0x0800bfbe
 8009694:	0800c120 	.word	0x0800c120

08009698 <__lshift>:
 8009698:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800969c:	460c      	mov	r4, r1
 800969e:	6849      	ldr	r1, [r1, #4]
 80096a0:	6923      	ldr	r3, [r4, #16]
 80096a2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80096a6:	68a3      	ldr	r3, [r4, #8]
 80096a8:	4607      	mov	r7, r0
 80096aa:	4691      	mov	r9, r2
 80096ac:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80096b0:	f108 0601 	add.w	r6, r8, #1
 80096b4:	42b3      	cmp	r3, r6
 80096b6:	db0b      	blt.n	80096d0 <__lshift+0x38>
 80096b8:	4638      	mov	r0, r7
 80096ba:	f7ff fd91 	bl	80091e0 <_Balloc>
 80096be:	4605      	mov	r5, r0
 80096c0:	b948      	cbnz	r0, 80096d6 <__lshift+0x3e>
 80096c2:	4602      	mov	r2, r0
 80096c4:	4b2a      	ldr	r3, [pc, #168]	; (8009770 <__lshift+0xd8>)
 80096c6:	482b      	ldr	r0, [pc, #172]	; (8009774 <__lshift+0xdc>)
 80096c8:	f240 11d9 	movw	r1, #473	; 0x1d9
 80096cc:	f001 fbba 	bl	800ae44 <__assert_func>
 80096d0:	3101      	adds	r1, #1
 80096d2:	005b      	lsls	r3, r3, #1
 80096d4:	e7ee      	b.n	80096b4 <__lshift+0x1c>
 80096d6:	2300      	movs	r3, #0
 80096d8:	f100 0114 	add.w	r1, r0, #20
 80096dc:	f100 0210 	add.w	r2, r0, #16
 80096e0:	4618      	mov	r0, r3
 80096e2:	4553      	cmp	r3, sl
 80096e4:	db37      	blt.n	8009756 <__lshift+0xbe>
 80096e6:	6920      	ldr	r0, [r4, #16]
 80096e8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80096ec:	f104 0314 	add.w	r3, r4, #20
 80096f0:	f019 091f 	ands.w	r9, r9, #31
 80096f4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80096f8:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80096fc:	d02f      	beq.n	800975e <__lshift+0xc6>
 80096fe:	f1c9 0e20 	rsb	lr, r9, #32
 8009702:	468a      	mov	sl, r1
 8009704:	f04f 0c00 	mov.w	ip, #0
 8009708:	681a      	ldr	r2, [r3, #0]
 800970a:	fa02 f209 	lsl.w	r2, r2, r9
 800970e:	ea42 020c 	orr.w	r2, r2, ip
 8009712:	f84a 2b04 	str.w	r2, [sl], #4
 8009716:	f853 2b04 	ldr.w	r2, [r3], #4
 800971a:	4298      	cmp	r0, r3
 800971c:	fa22 fc0e 	lsr.w	ip, r2, lr
 8009720:	d8f2      	bhi.n	8009708 <__lshift+0x70>
 8009722:	1b03      	subs	r3, r0, r4
 8009724:	3b15      	subs	r3, #21
 8009726:	f023 0303 	bic.w	r3, r3, #3
 800972a:	3304      	adds	r3, #4
 800972c:	f104 0215 	add.w	r2, r4, #21
 8009730:	4290      	cmp	r0, r2
 8009732:	bf38      	it	cc
 8009734:	2304      	movcc	r3, #4
 8009736:	f841 c003 	str.w	ip, [r1, r3]
 800973a:	f1bc 0f00 	cmp.w	ip, #0
 800973e:	d001      	beq.n	8009744 <__lshift+0xac>
 8009740:	f108 0602 	add.w	r6, r8, #2
 8009744:	3e01      	subs	r6, #1
 8009746:	4638      	mov	r0, r7
 8009748:	612e      	str	r6, [r5, #16]
 800974a:	4621      	mov	r1, r4
 800974c:	f7ff fd88 	bl	8009260 <_Bfree>
 8009750:	4628      	mov	r0, r5
 8009752:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009756:	f842 0f04 	str.w	r0, [r2, #4]!
 800975a:	3301      	adds	r3, #1
 800975c:	e7c1      	b.n	80096e2 <__lshift+0x4a>
 800975e:	3904      	subs	r1, #4
 8009760:	f853 2b04 	ldr.w	r2, [r3], #4
 8009764:	f841 2f04 	str.w	r2, [r1, #4]!
 8009768:	4298      	cmp	r0, r3
 800976a:	d8f9      	bhi.n	8009760 <__lshift+0xc8>
 800976c:	e7ea      	b.n	8009744 <__lshift+0xac>
 800976e:	bf00      	nop
 8009770:	0800c030 	.word	0x0800c030
 8009774:	0800c120 	.word	0x0800c120

08009778 <__mcmp>:
 8009778:	b530      	push	{r4, r5, lr}
 800977a:	6902      	ldr	r2, [r0, #16]
 800977c:	690c      	ldr	r4, [r1, #16]
 800977e:	1b12      	subs	r2, r2, r4
 8009780:	d10e      	bne.n	80097a0 <__mcmp+0x28>
 8009782:	f100 0314 	add.w	r3, r0, #20
 8009786:	3114      	adds	r1, #20
 8009788:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800978c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8009790:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8009794:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8009798:	42a5      	cmp	r5, r4
 800979a:	d003      	beq.n	80097a4 <__mcmp+0x2c>
 800979c:	d305      	bcc.n	80097aa <__mcmp+0x32>
 800979e:	2201      	movs	r2, #1
 80097a0:	4610      	mov	r0, r2
 80097a2:	bd30      	pop	{r4, r5, pc}
 80097a4:	4283      	cmp	r3, r0
 80097a6:	d3f3      	bcc.n	8009790 <__mcmp+0x18>
 80097a8:	e7fa      	b.n	80097a0 <__mcmp+0x28>
 80097aa:	f04f 32ff 	mov.w	r2, #4294967295
 80097ae:	e7f7      	b.n	80097a0 <__mcmp+0x28>

080097b0 <__mdiff>:
 80097b0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80097b4:	460c      	mov	r4, r1
 80097b6:	4606      	mov	r6, r0
 80097b8:	4611      	mov	r1, r2
 80097ba:	4620      	mov	r0, r4
 80097bc:	4690      	mov	r8, r2
 80097be:	f7ff ffdb 	bl	8009778 <__mcmp>
 80097c2:	1e05      	subs	r5, r0, #0
 80097c4:	d110      	bne.n	80097e8 <__mdiff+0x38>
 80097c6:	4629      	mov	r1, r5
 80097c8:	4630      	mov	r0, r6
 80097ca:	f7ff fd09 	bl	80091e0 <_Balloc>
 80097ce:	b930      	cbnz	r0, 80097de <__mdiff+0x2e>
 80097d0:	4b3a      	ldr	r3, [pc, #232]	; (80098bc <__mdiff+0x10c>)
 80097d2:	4602      	mov	r2, r0
 80097d4:	f240 2132 	movw	r1, #562	; 0x232
 80097d8:	4839      	ldr	r0, [pc, #228]	; (80098c0 <__mdiff+0x110>)
 80097da:	f001 fb33 	bl	800ae44 <__assert_func>
 80097de:	2301      	movs	r3, #1
 80097e0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80097e4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80097e8:	bfa4      	itt	ge
 80097ea:	4643      	movge	r3, r8
 80097ec:	46a0      	movge	r8, r4
 80097ee:	4630      	mov	r0, r6
 80097f0:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80097f4:	bfa6      	itte	ge
 80097f6:	461c      	movge	r4, r3
 80097f8:	2500      	movge	r5, #0
 80097fa:	2501      	movlt	r5, #1
 80097fc:	f7ff fcf0 	bl	80091e0 <_Balloc>
 8009800:	b920      	cbnz	r0, 800980c <__mdiff+0x5c>
 8009802:	4b2e      	ldr	r3, [pc, #184]	; (80098bc <__mdiff+0x10c>)
 8009804:	4602      	mov	r2, r0
 8009806:	f44f 7110 	mov.w	r1, #576	; 0x240
 800980a:	e7e5      	b.n	80097d8 <__mdiff+0x28>
 800980c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8009810:	6926      	ldr	r6, [r4, #16]
 8009812:	60c5      	str	r5, [r0, #12]
 8009814:	f104 0914 	add.w	r9, r4, #20
 8009818:	f108 0514 	add.w	r5, r8, #20
 800981c:	f100 0e14 	add.w	lr, r0, #20
 8009820:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8009824:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8009828:	f108 0210 	add.w	r2, r8, #16
 800982c:	46f2      	mov	sl, lr
 800982e:	2100      	movs	r1, #0
 8009830:	f859 3b04 	ldr.w	r3, [r9], #4
 8009834:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8009838:	fa1f f883 	uxth.w	r8, r3
 800983c:	fa11 f18b 	uxtah	r1, r1, fp
 8009840:	0c1b      	lsrs	r3, r3, #16
 8009842:	eba1 0808 	sub.w	r8, r1, r8
 8009846:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800984a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800984e:	fa1f f888 	uxth.w	r8, r8
 8009852:	1419      	asrs	r1, r3, #16
 8009854:	454e      	cmp	r6, r9
 8009856:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800985a:	f84a 3b04 	str.w	r3, [sl], #4
 800985e:	d8e7      	bhi.n	8009830 <__mdiff+0x80>
 8009860:	1b33      	subs	r3, r6, r4
 8009862:	3b15      	subs	r3, #21
 8009864:	f023 0303 	bic.w	r3, r3, #3
 8009868:	3304      	adds	r3, #4
 800986a:	3415      	adds	r4, #21
 800986c:	42a6      	cmp	r6, r4
 800986e:	bf38      	it	cc
 8009870:	2304      	movcc	r3, #4
 8009872:	441d      	add	r5, r3
 8009874:	4473      	add	r3, lr
 8009876:	469e      	mov	lr, r3
 8009878:	462e      	mov	r6, r5
 800987a:	4566      	cmp	r6, ip
 800987c:	d30e      	bcc.n	800989c <__mdiff+0xec>
 800987e:	f10c 0203 	add.w	r2, ip, #3
 8009882:	1b52      	subs	r2, r2, r5
 8009884:	f022 0203 	bic.w	r2, r2, #3
 8009888:	3d03      	subs	r5, #3
 800988a:	45ac      	cmp	ip, r5
 800988c:	bf38      	it	cc
 800988e:	2200      	movcc	r2, #0
 8009890:	441a      	add	r2, r3
 8009892:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8009896:	b17b      	cbz	r3, 80098b8 <__mdiff+0x108>
 8009898:	6107      	str	r7, [r0, #16]
 800989a:	e7a3      	b.n	80097e4 <__mdiff+0x34>
 800989c:	f856 8b04 	ldr.w	r8, [r6], #4
 80098a0:	fa11 f288 	uxtah	r2, r1, r8
 80098a4:	1414      	asrs	r4, r2, #16
 80098a6:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80098aa:	b292      	uxth	r2, r2
 80098ac:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 80098b0:	f84e 2b04 	str.w	r2, [lr], #4
 80098b4:	1421      	asrs	r1, r4, #16
 80098b6:	e7e0      	b.n	800987a <__mdiff+0xca>
 80098b8:	3f01      	subs	r7, #1
 80098ba:	e7ea      	b.n	8009892 <__mdiff+0xe2>
 80098bc:	0800c030 	.word	0x0800c030
 80098c0:	0800c120 	.word	0x0800c120

080098c4 <__ulp>:
 80098c4:	b082      	sub	sp, #8
 80098c6:	ed8d 0b00 	vstr	d0, [sp]
 80098ca:	9b01      	ldr	r3, [sp, #4]
 80098cc:	4912      	ldr	r1, [pc, #72]	; (8009918 <__ulp+0x54>)
 80098ce:	4019      	ands	r1, r3
 80098d0:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 80098d4:	2900      	cmp	r1, #0
 80098d6:	dd05      	ble.n	80098e4 <__ulp+0x20>
 80098d8:	2200      	movs	r2, #0
 80098da:	460b      	mov	r3, r1
 80098dc:	ec43 2b10 	vmov	d0, r2, r3
 80098e0:	b002      	add	sp, #8
 80098e2:	4770      	bx	lr
 80098e4:	4249      	negs	r1, r1
 80098e6:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 80098ea:	ea4f 5021 	mov.w	r0, r1, asr #20
 80098ee:	f04f 0200 	mov.w	r2, #0
 80098f2:	f04f 0300 	mov.w	r3, #0
 80098f6:	da04      	bge.n	8009902 <__ulp+0x3e>
 80098f8:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 80098fc:	fa41 f300 	asr.w	r3, r1, r0
 8009900:	e7ec      	b.n	80098dc <__ulp+0x18>
 8009902:	f1a0 0114 	sub.w	r1, r0, #20
 8009906:	291e      	cmp	r1, #30
 8009908:	bfda      	itte	le
 800990a:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800990e:	fa20 f101 	lsrle.w	r1, r0, r1
 8009912:	2101      	movgt	r1, #1
 8009914:	460a      	mov	r2, r1
 8009916:	e7e1      	b.n	80098dc <__ulp+0x18>
 8009918:	7ff00000 	.word	0x7ff00000

0800991c <__b2d>:
 800991c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800991e:	6905      	ldr	r5, [r0, #16]
 8009920:	f100 0714 	add.w	r7, r0, #20
 8009924:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8009928:	1f2e      	subs	r6, r5, #4
 800992a:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800992e:	4620      	mov	r0, r4
 8009930:	f7ff fd48 	bl	80093c4 <__hi0bits>
 8009934:	f1c0 0320 	rsb	r3, r0, #32
 8009938:	280a      	cmp	r0, #10
 800993a:	f8df c07c 	ldr.w	ip, [pc, #124]	; 80099b8 <__b2d+0x9c>
 800993e:	600b      	str	r3, [r1, #0]
 8009940:	dc14      	bgt.n	800996c <__b2d+0x50>
 8009942:	f1c0 0e0b 	rsb	lr, r0, #11
 8009946:	fa24 f10e 	lsr.w	r1, r4, lr
 800994a:	42b7      	cmp	r7, r6
 800994c:	ea41 030c 	orr.w	r3, r1, ip
 8009950:	bf34      	ite	cc
 8009952:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8009956:	2100      	movcs	r1, #0
 8009958:	3015      	adds	r0, #21
 800995a:	fa04 f000 	lsl.w	r0, r4, r0
 800995e:	fa21 f10e 	lsr.w	r1, r1, lr
 8009962:	ea40 0201 	orr.w	r2, r0, r1
 8009966:	ec43 2b10 	vmov	d0, r2, r3
 800996a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800996c:	42b7      	cmp	r7, r6
 800996e:	bf3a      	itte	cc
 8009970:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8009974:	f1a5 0608 	subcc.w	r6, r5, #8
 8009978:	2100      	movcs	r1, #0
 800997a:	380b      	subs	r0, #11
 800997c:	d017      	beq.n	80099ae <__b2d+0x92>
 800997e:	f1c0 0c20 	rsb	ip, r0, #32
 8009982:	fa04 f500 	lsl.w	r5, r4, r0
 8009986:	42be      	cmp	r6, r7
 8009988:	fa21 f40c 	lsr.w	r4, r1, ip
 800998c:	ea45 0504 	orr.w	r5, r5, r4
 8009990:	bf8c      	ite	hi
 8009992:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8009996:	2400      	movls	r4, #0
 8009998:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800999c:	fa01 f000 	lsl.w	r0, r1, r0
 80099a0:	fa24 f40c 	lsr.w	r4, r4, ip
 80099a4:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80099a8:	ea40 0204 	orr.w	r2, r0, r4
 80099ac:	e7db      	b.n	8009966 <__b2d+0x4a>
 80099ae:	ea44 030c 	orr.w	r3, r4, ip
 80099b2:	460a      	mov	r2, r1
 80099b4:	e7d7      	b.n	8009966 <__b2d+0x4a>
 80099b6:	bf00      	nop
 80099b8:	3ff00000 	.word	0x3ff00000

080099bc <__d2b>:
 80099bc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80099c0:	4689      	mov	r9, r1
 80099c2:	2101      	movs	r1, #1
 80099c4:	ec57 6b10 	vmov	r6, r7, d0
 80099c8:	4690      	mov	r8, r2
 80099ca:	f7ff fc09 	bl	80091e0 <_Balloc>
 80099ce:	4604      	mov	r4, r0
 80099d0:	b930      	cbnz	r0, 80099e0 <__d2b+0x24>
 80099d2:	4602      	mov	r2, r0
 80099d4:	4b25      	ldr	r3, [pc, #148]	; (8009a6c <__d2b+0xb0>)
 80099d6:	4826      	ldr	r0, [pc, #152]	; (8009a70 <__d2b+0xb4>)
 80099d8:	f240 310a 	movw	r1, #778	; 0x30a
 80099dc:	f001 fa32 	bl	800ae44 <__assert_func>
 80099e0:	f3c7 550a 	ubfx	r5, r7, #20, #11
 80099e4:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80099e8:	bb35      	cbnz	r5, 8009a38 <__d2b+0x7c>
 80099ea:	2e00      	cmp	r6, #0
 80099ec:	9301      	str	r3, [sp, #4]
 80099ee:	d028      	beq.n	8009a42 <__d2b+0x86>
 80099f0:	4668      	mov	r0, sp
 80099f2:	9600      	str	r6, [sp, #0]
 80099f4:	f7ff fd06 	bl	8009404 <__lo0bits>
 80099f8:	9900      	ldr	r1, [sp, #0]
 80099fa:	b300      	cbz	r0, 8009a3e <__d2b+0x82>
 80099fc:	9a01      	ldr	r2, [sp, #4]
 80099fe:	f1c0 0320 	rsb	r3, r0, #32
 8009a02:	fa02 f303 	lsl.w	r3, r2, r3
 8009a06:	430b      	orrs	r3, r1
 8009a08:	40c2      	lsrs	r2, r0
 8009a0a:	6163      	str	r3, [r4, #20]
 8009a0c:	9201      	str	r2, [sp, #4]
 8009a0e:	9b01      	ldr	r3, [sp, #4]
 8009a10:	61a3      	str	r3, [r4, #24]
 8009a12:	2b00      	cmp	r3, #0
 8009a14:	bf14      	ite	ne
 8009a16:	2202      	movne	r2, #2
 8009a18:	2201      	moveq	r2, #1
 8009a1a:	6122      	str	r2, [r4, #16]
 8009a1c:	b1d5      	cbz	r5, 8009a54 <__d2b+0x98>
 8009a1e:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8009a22:	4405      	add	r5, r0
 8009a24:	f8c9 5000 	str.w	r5, [r9]
 8009a28:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8009a2c:	f8c8 0000 	str.w	r0, [r8]
 8009a30:	4620      	mov	r0, r4
 8009a32:	b003      	add	sp, #12
 8009a34:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009a38:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009a3c:	e7d5      	b.n	80099ea <__d2b+0x2e>
 8009a3e:	6161      	str	r1, [r4, #20]
 8009a40:	e7e5      	b.n	8009a0e <__d2b+0x52>
 8009a42:	a801      	add	r0, sp, #4
 8009a44:	f7ff fcde 	bl	8009404 <__lo0bits>
 8009a48:	9b01      	ldr	r3, [sp, #4]
 8009a4a:	6163      	str	r3, [r4, #20]
 8009a4c:	2201      	movs	r2, #1
 8009a4e:	6122      	str	r2, [r4, #16]
 8009a50:	3020      	adds	r0, #32
 8009a52:	e7e3      	b.n	8009a1c <__d2b+0x60>
 8009a54:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8009a58:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8009a5c:	f8c9 0000 	str.w	r0, [r9]
 8009a60:	6918      	ldr	r0, [r3, #16]
 8009a62:	f7ff fcaf 	bl	80093c4 <__hi0bits>
 8009a66:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8009a6a:	e7df      	b.n	8009a2c <__d2b+0x70>
 8009a6c:	0800c030 	.word	0x0800c030
 8009a70:	0800c120 	.word	0x0800c120

08009a74 <__ratio>:
 8009a74:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009a78:	4688      	mov	r8, r1
 8009a7a:	4669      	mov	r1, sp
 8009a7c:	4681      	mov	r9, r0
 8009a7e:	f7ff ff4d 	bl	800991c <__b2d>
 8009a82:	a901      	add	r1, sp, #4
 8009a84:	4640      	mov	r0, r8
 8009a86:	ec55 4b10 	vmov	r4, r5, d0
 8009a8a:	f7ff ff47 	bl	800991c <__b2d>
 8009a8e:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8009a92:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8009a96:	eba3 0c02 	sub.w	ip, r3, r2
 8009a9a:	e9dd 3200 	ldrd	r3, r2, [sp]
 8009a9e:	1a9b      	subs	r3, r3, r2
 8009aa0:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8009aa4:	ec51 0b10 	vmov	r0, r1, d0
 8009aa8:	2b00      	cmp	r3, #0
 8009aaa:	bfd6      	itet	le
 8009aac:	460a      	movle	r2, r1
 8009aae:	462a      	movgt	r2, r5
 8009ab0:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8009ab4:	468b      	mov	fp, r1
 8009ab6:	462f      	mov	r7, r5
 8009ab8:	bfd4      	ite	le
 8009aba:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8009abe:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8009ac2:	4620      	mov	r0, r4
 8009ac4:	ee10 2a10 	vmov	r2, s0
 8009ac8:	465b      	mov	r3, fp
 8009aca:	4639      	mov	r1, r7
 8009acc:	f7f6 febe 	bl	800084c <__aeabi_ddiv>
 8009ad0:	ec41 0b10 	vmov	d0, r0, r1
 8009ad4:	b003      	add	sp, #12
 8009ad6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08009ada <__copybits>:
 8009ada:	3901      	subs	r1, #1
 8009adc:	b570      	push	{r4, r5, r6, lr}
 8009ade:	1149      	asrs	r1, r1, #5
 8009ae0:	6914      	ldr	r4, [r2, #16]
 8009ae2:	3101      	adds	r1, #1
 8009ae4:	f102 0314 	add.w	r3, r2, #20
 8009ae8:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8009aec:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8009af0:	1f05      	subs	r5, r0, #4
 8009af2:	42a3      	cmp	r3, r4
 8009af4:	d30c      	bcc.n	8009b10 <__copybits+0x36>
 8009af6:	1aa3      	subs	r3, r4, r2
 8009af8:	3b11      	subs	r3, #17
 8009afa:	f023 0303 	bic.w	r3, r3, #3
 8009afe:	3211      	adds	r2, #17
 8009b00:	42a2      	cmp	r2, r4
 8009b02:	bf88      	it	hi
 8009b04:	2300      	movhi	r3, #0
 8009b06:	4418      	add	r0, r3
 8009b08:	2300      	movs	r3, #0
 8009b0a:	4288      	cmp	r0, r1
 8009b0c:	d305      	bcc.n	8009b1a <__copybits+0x40>
 8009b0e:	bd70      	pop	{r4, r5, r6, pc}
 8009b10:	f853 6b04 	ldr.w	r6, [r3], #4
 8009b14:	f845 6f04 	str.w	r6, [r5, #4]!
 8009b18:	e7eb      	b.n	8009af2 <__copybits+0x18>
 8009b1a:	f840 3b04 	str.w	r3, [r0], #4
 8009b1e:	e7f4      	b.n	8009b0a <__copybits+0x30>

08009b20 <__any_on>:
 8009b20:	f100 0214 	add.w	r2, r0, #20
 8009b24:	6900      	ldr	r0, [r0, #16]
 8009b26:	114b      	asrs	r3, r1, #5
 8009b28:	4298      	cmp	r0, r3
 8009b2a:	b510      	push	{r4, lr}
 8009b2c:	db11      	blt.n	8009b52 <__any_on+0x32>
 8009b2e:	dd0a      	ble.n	8009b46 <__any_on+0x26>
 8009b30:	f011 011f 	ands.w	r1, r1, #31
 8009b34:	d007      	beq.n	8009b46 <__any_on+0x26>
 8009b36:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8009b3a:	fa24 f001 	lsr.w	r0, r4, r1
 8009b3e:	fa00 f101 	lsl.w	r1, r0, r1
 8009b42:	428c      	cmp	r4, r1
 8009b44:	d10b      	bne.n	8009b5e <__any_on+0x3e>
 8009b46:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8009b4a:	4293      	cmp	r3, r2
 8009b4c:	d803      	bhi.n	8009b56 <__any_on+0x36>
 8009b4e:	2000      	movs	r0, #0
 8009b50:	bd10      	pop	{r4, pc}
 8009b52:	4603      	mov	r3, r0
 8009b54:	e7f7      	b.n	8009b46 <__any_on+0x26>
 8009b56:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8009b5a:	2900      	cmp	r1, #0
 8009b5c:	d0f5      	beq.n	8009b4a <__any_on+0x2a>
 8009b5e:	2001      	movs	r0, #1
 8009b60:	e7f6      	b.n	8009b50 <__any_on+0x30>

08009b62 <_calloc_r>:
 8009b62:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009b64:	fba1 2402 	umull	r2, r4, r1, r2
 8009b68:	b94c      	cbnz	r4, 8009b7e <_calloc_r+0x1c>
 8009b6a:	4611      	mov	r1, r2
 8009b6c:	9201      	str	r2, [sp, #4]
 8009b6e:	f000 f87b 	bl	8009c68 <_malloc_r>
 8009b72:	9a01      	ldr	r2, [sp, #4]
 8009b74:	4605      	mov	r5, r0
 8009b76:	b930      	cbnz	r0, 8009b86 <_calloc_r+0x24>
 8009b78:	4628      	mov	r0, r5
 8009b7a:	b003      	add	sp, #12
 8009b7c:	bd30      	pop	{r4, r5, pc}
 8009b7e:	220c      	movs	r2, #12
 8009b80:	6002      	str	r2, [r0, #0]
 8009b82:	2500      	movs	r5, #0
 8009b84:	e7f8      	b.n	8009b78 <_calloc_r+0x16>
 8009b86:	4621      	mov	r1, r4
 8009b88:	f7fb ffd8 	bl	8005b3c <memset>
 8009b8c:	e7f4      	b.n	8009b78 <_calloc_r+0x16>
	...

08009b90 <_free_r>:
 8009b90:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009b92:	2900      	cmp	r1, #0
 8009b94:	d044      	beq.n	8009c20 <_free_r+0x90>
 8009b96:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009b9a:	9001      	str	r0, [sp, #4]
 8009b9c:	2b00      	cmp	r3, #0
 8009b9e:	f1a1 0404 	sub.w	r4, r1, #4
 8009ba2:	bfb8      	it	lt
 8009ba4:	18e4      	addlt	r4, r4, r3
 8009ba6:	f001 f9db 	bl	800af60 <__malloc_lock>
 8009baa:	4a1e      	ldr	r2, [pc, #120]	; (8009c24 <_free_r+0x94>)
 8009bac:	9801      	ldr	r0, [sp, #4]
 8009bae:	6813      	ldr	r3, [r2, #0]
 8009bb0:	b933      	cbnz	r3, 8009bc0 <_free_r+0x30>
 8009bb2:	6063      	str	r3, [r4, #4]
 8009bb4:	6014      	str	r4, [r2, #0]
 8009bb6:	b003      	add	sp, #12
 8009bb8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009bbc:	f001 b9d6 	b.w	800af6c <__malloc_unlock>
 8009bc0:	42a3      	cmp	r3, r4
 8009bc2:	d908      	bls.n	8009bd6 <_free_r+0x46>
 8009bc4:	6825      	ldr	r5, [r4, #0]
 8009bc6:	1961      	adds	r1, r4, r5
 8009bc8:	428b      	cmp	r3, r1
 8009bca:	bf01      	itttt	eq
 8009bcc:	6819      	ldreq	r1, [r3, #0]
 8009bce:	685b      	ldreq	r3, [r3, #4]
 8009bd0:	1949      	addeq	r1, r1, r5
 8009bd2:	6021      	streq	r1, [r4, #0]
 8009bd4:	e7ed      	b.n	8009bb2 <_free_r+0x22>
 8009bd6:	461a      	mov	r2, r3
 8009bd8:	685b      	ldr	r3, [r3, #4]
 8009bda:	b10b      	cbz	r3, 8009be0 <_free_r+0x50>
 8009bdc:	42a3      	cmp	r3, r4
 8009bde:	d9fa      	bls.n	8009bd6 <_free_r+0x46>
 8009be0:	6811      	ldr	r1, [r2, #0]
 8009be2:	1855      	adds	r5, r2, r1
 8009be4:	42a5      	cmp	r5, r4
 8009be6:	d10b      	bne.n	8009c00 <_free_r+0x70>
 8009be8:	6824      	ldr	r4, [r4, #0]
 8009bea:	4421      	add	r1, r4
 8009bec:	1854      	adds	r4, r2, r1
 8009bee:	42a3      	cmp	r3, r4
 8009bf0:	6011      	str	r1, [r2, #0]
 8009bf2:	d1e0      	bne.n	8009bb6 <_free_r+0x26>
 8009bf4:	681c      	ldr	r4, [r3, #0]
 8009bf6:	685b      	ldr	r3, [r3, #4]
 8009bf8:	6053      	str	r3, [r2, #4]
 8009bfa:	4421      	add	r1, r4
 8009bfc:	6011      	str	r1, [r2, #0]
 8009bfe:	e7da      	b.n	8009bb6 <_free_r+0x26>
 8009c00:	d902      	bls.n	8009c08 <_free_r+0x78>
 8009c02:	230c      	movs	r3, #12
 8009c04:	6003      	str	r3, [r0, #0]
 8009c06:	e7d6      	b.n	8009bb6 <_free_r+0x26>
 8009c08:	6825      	ldr	r5, [r4, #0]
 8009c0a:	1961      	adds	r1, r4, r5
 8009c0c:	428b      	cmp	r3, r1
 8009c0e:	bf04      	itt	eq
 8009c10:	6819      	ldreq	r1, [r3, #0]
 8009c12:	685b      	ldreq	r3, [r3, #4]
 8009c14:	6063      	str	r3, [r4, #4]
 8009c16:	bf04      	itt	eq
 8009c18:	1949      	addeq	r1, r1, r5
 8009c1a:	6021      	streq	r1, [r4, #0]
 8009c1c:	6054      	str	r4, [r2, #4]
 8009c1e:	e7ca      	b.n	8009bb6 <_free_r+0x26>
 8009c20:	b003      	add	sp, #12
 8009c22:	bd30      	pop	{r4, r5, pc}
 8009c24:	2000033c 	.word	0x2000033c

08009c28 <sbrk_aligned>:
 8009c28:	b570      	push	{r4, r5, r6, lr}
 8009c2a:	4e0e      	ldr	r6, [pc, #56]	; (8009c64 <sbrk_aligned+0x3c>)
 8009c2c:	460c      	mov	r4, r1
 8009c2e:	6831      	ldr	r1, [r6, #0]
 8009c30:	4605      	mov	r5, r0
 8009c32:	b911      	cbnz	r1, 8009c3a <sbrk_aligned+0x12>
 8009c34:	f000 ff00 	bl	800aa38 <_sbrk_r>
 8009c38:	6030      	str	r0, [r6, #0]
 8009c3a:	4621      	mov	r1, r4
 8009c3c:	4628      	mov	r0, r5
 8009c3e:	f000 fefb 	bl	800aa38 <_sbrk_r>
 8009c42:	1c43      	adds	r3, r0, #1
 8009c44:	d00a      	beq.n	8009c5c <sbrk_aligned+0x34>
 8009c46:	1cc4      	adds	r4, r0, #3
 8009c48:	f024 0403 	bic.w	r4, r4, #3
 8009c4c:	42a0      	cmp	r0, r4
 8009c4e:	d007      	beq.n	8009c60 <sbrk_aligned+0x38>
 8009c50:	1a21      	subs	r1, r4, r0
 8009c52:	4628      	mov	r0, r5
 8009c54:	f000 fef0 	bl	800aa38 <_sbrk_r>
 8009c58:	3001      	adds	r0, #1
 8009c5a:	d101      	bne.n	8009c60 <sbrk_aligned+0x38>
 8009c5c:	f04f 34ff 	mov.w	r4, #4294967295
 8009c60:	4620      	mov	r0, r4
 8009c62:	bd70      	pop	{r4, r5, r6, pc}
 8009c64:	20000340 	.word	0x20000340

08009c68 <_malloc_r>:
 8009c68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009c6c:	1ccd      	adds	r5, r1, #3
 8009c6e:	f025 0503 	bic.w	r5, r5, #3
 8009c72:	3508      	adds	r5, #8
 8009c74:	2d0c      	cmp	r5, #12
 8009c76:	bf38      	it	cc
 8009c78:	250c      	movcc	r5, #12
 8009c7a:	2d00      	cmp	r5, #0
 8009c7c:	4607      	mov	r7, r0
 8009c7e:	db01      	blt.n	8009c84 <_malloc_r+0x1c>
 8009c80:	42a9      	cmp	r1, r5
 8009c82:	d905      	bls.n	8009c90 <_malloc_r+0x28>
 8009c84:	230c      	movs	r3, #12
 8009c86:	603b      	str	r3, [r7, #0]
 8009c88:	2600      	movs	r6, #0
 8009c8a:	4630      	mov	r0, r6
 8009c8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009c90:	4e2e      	ldr	r6, [pc, #184]	; (8009d4c <_malloc_r+0xe4>)
 8009c92:	f001 f965 	bl	800af60 <__malloc_lock>
 8009c96:	6833      	ldr	r3, [r6, #0]
 8009c98:	461c      	mov	r4, r3
 8009c9a:	bb34      	cbnz	r4, 8009cea <_malloc_r+0x82>
 8009c9c:	4629      	mov	r1, r5
 8009c9e:	4638      	mov	r0, r7
 8009ca0:	f7ff ffc2 	bl	8009c28 <sbrk_aligned>
 8009ca4:	1c43      	adds	r3, r0, #1
 8009ca6:	4604      	mov	r4, r0
 8009ca8:	d14d      	bne.n	8009d46 <_malloc_r+0xde>
 8009caa:	6834      	ldr	r4, [r6, #0]
 8009cac:	4626      	mov	r6, r4
 8009cae:	2e00      	cmp	r6, #0
 8009cb0:	d140      	bne.n	8009d34 <_malloc_r+0xcc>
 8009cb2:	6823      	ldr	r3, [r4, #0]
 8009cb4:	4631      	mov	r1, r6
 8009cb6:	4638      	mov	r0, r7
 8009cb8:	eb04 0803 	add.w	r8, r4, r3
 8009cbc:	f000 febc 	bl	800aa38 <_sbrk_r>
 8009cc0:	4580      	cmp	r8, r0
 8009cc2:	d13a      	bne.n	8009d3a <_malloc_r+0xd2>
 8009cc4:	6821      	ldr	r1, [r4, #0]
 8009cc6:	3503      	adds	r5, #3
 8009cc8:	1a6d      	subs	r5, r5, r1
 8009cca:	f025 0503 	bic.w	r5, r5, #3
 8009cce:	3508      	adds	r5, #8
 8009cd0:	2d0c      	cmp	r5, #12
 8009cd2:	bf38      	it	cc
 8009cd4:	250c      	movcc	r5, #12
 8009cd6:	4629      	mov	r1, r5
 8009cd8:	4638      	mov	r0, r7
 8009cda:	f7ff ffa5 	bl	8009c28 <sbrk_aligned>
 8009cde:	3001      	adds	r0, #1
 8009ce0:	d02b      	beq.n	8009d3a <_malloc_r+0xd2>
 8009ce2:	6823      	ldr	r3, [r4, #0]
 8009ce4:	442b      	add	r3, r5
 8009ce6:	6023      	str	r3, [r4, #0]
 8009ce8:	e00e      	b.n	8009d08 <_malloc_r+0xa0>
 8009cea:	6822      	ldr	r2, [r4, #0]
 8009cec:	1b52      	subs	r2, r2, r5
 8009cee:	d41e      	bmi.n	8009d2e <_malloc_r+0xc6>
 8009cf0:	2a0b      	cmp	r2, #11
 8009cf2:	d916      	bls.n	8009d22 <_malloc_r+0xba>
 8009cf4:	1961      	adds	r1, r4, r5
 8009cf6:	42a3      	cmp	r3, r4
 8009cf8:	6025      	str	r5, [r4, #0]
 8009cfa:	bf18      	it	ne
 8009cfc:	6059      	strne	r1, [r3, #4]
 8009cfe:	6863      	ldr	r3, [r4, #4]
 8009d00:	bf08      	it	eq
 8009d02:	6031      	streq	r1, [r6, #0]
 8009d04:	5162      	str	r2, [r4, r5]
 8009d06:	604b      	str	r3, [r1, #4]
 8009d08:	4638      	mov	r0, r7
 8009d0a:	f104 060b 	add.w	r6, r4, #11
 8009d0e:	f001 f92d 	bl	800af6c <__malloc_unlock>
 8009d12:	f026 0607 	bic.w	r6, r6, #7
 8009d16:	1d23      	adds	r3, r4, #4
 8009d18:	1af2      	subs	r2, r6, r3
 8009d1a:	d0b6      	beq.n	8009c8a <_malloc_r+0x22>
 8009d1c:	1b9b      	subs	r3, r3, r6
 8009d1e:	50a3      	str	r3, [r4, r2]
 8009d20:	e7b3      	b.n	8009c8a <_malloc_r+0x22>
 8009d22:	6862      	ldr	r2, [r4, #4]
 8009d24:	42a3      	cmp	r3, r4
 8009d26:	bf0c      	ite	eq
 8009d28:	6032      	streq	r2, [r6, #0]
 8009d2a:	605a      	strne	r2, [r3, #4]
 8009d2c:	e7ec      	b.n	8009d08 <_malloc_r+0xa0>
 8009d2e:	4623      	mov	r3, r4
 8009d30:	6864      	ldr	r4, [r4, #4]
 8009d32:	e7b2      	b.n	8009c9a <_malloc_r+0x32>
 8009d34:	4634      	mov	r4, r6
 8009d36:	6876      	ldr	r6, [r6, #4]
 8009d38:	e7b9      	b.n	8009cae <_malloc_r+0x46>
 8009d3a:	230c      	movs	r3, #12
 8009d3c:	603b      	str	r3, [r7, #0]
 8009d3e:	4638      	mov	r0, r7
 8009d40:	f001 f914 	bl	800af6c <__malloc_unlock>
 8009d44:	e7a1      	b.n	8009c8a <_malloc_r+0x22>
 8009d46:	6025      	str	r5, [r4, #0]
 8009d48:	e7de      	b.n	8009d08 <_malloc_r+0xa0>
 8009d4a:	bf00      	nop
 8009d4c:	2000033c 	.word	0x2000033c

08009d50 <__ssputs_r>:
 8009d50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009d54:	688e      	ldr	r6, [r1, #8]
 8009d56:	429e      	cmp	r6, r3
 8009d58:	4682      	mov	sl, r0
 8009d5a:	460c      	mov	r4, r1
 8009d5c:	4690      	mov	r8, r2
 8009d5e:	461f      	mov	r7, r3
 8009d60:	d838      	bhi.n	8009dd4 <__ssputs_r+0x84>
 8009d62:	898a      	ldrh	r2, [r1, #12]
 8009d64:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009d68:	d032      	beq.n	8009dd0 <__ssputs_r+0x80>
 8009d6a:	6825      	ldr	r5, [r4, #0]
 8009d6c:	6909      	ldr	r1, [r1, #16]
 8009d6e:	eba5 0901 	sub.w	r9, r5, r1
 8009d72:	6965      	ldr	r5, [r4, #20]
 8009d74:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009d78:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009d7c:	3301      	adds	r3, #1
 8009d7e:	444b      	add	r3, r9
 8009d80:	106d      	asrs	r5, r5, #1
 8009d82:	429d      	cmp	r5, r3
 8009d84:	bf38      	it	cc
 8009d86:	461d      	movcc	r5, r3
 8009d88:	0553      	lsls	r3, r2, #21
 8009d8a:	d531      	bpl.n	8009df0 <__ssputs_r+0xa0>
 8009d8c:	4629      	mov	r1, r5
 8009d8e:	f7ff ff6b 	bl	8009c68 <_malloc_r>
 8009d92:	4606      	mov	r6, r0
 8009d94:	b950      	cbnz	r0, 8009dac <__ssputs_r+0x5c>
 8009d96:	230c      	movs	r3, #12
 8009d98:	f8ca 3000 	str.w	r3, [sl]
 8009d9c:	89a3      	ldrh	r3, [r4, #12]
 8009d9e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009da2:	81a3      	strh	r3, [r4, #12]
 8009da4:	f04f 30ff 	mov.w	r0, #4294967295
 8009da8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009dac:	6921      	ldr	r1, [r4, #16]
 8009dae:	464a      	mov	r2, r9
 8009db0:	f7ff fa08 	bl	80091c4 <memcpy>
 8009db4:	89a3      	ldrh	r3, [r4, #12]
 8009db6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009dba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009dbe:	81a3      	strh	r3, [r4, #12]
 8009dc0:	6126      	str	r6, [r4, #16]
 8009dc2:	6165      	str	r5, [r4, #20]
 8009dc4:	444e      	add	r6, r9
 8009dc6:	eba5 0509 	sub.w	r5, r5, r9
 8009dca:	6026      	str	r6, [r4, #0]
 8009dcc:	60a5      	str	r5, [r4, #8]
 8009dce:	463e      	mov	r6, r7
 8009dd0:	42be      	cmp	r6, r7
 8009dd2:	d900      	bls.n	8009dd6 <__ssputs_r+0x86>
 8009dd4:	463e      	mov	r6, r7
 8009dd6:	6820      	ldr	r0, [r4, #0]
 8009dd8:	4632      	mov	r2, r6
 8009dda:	4641      	mov	r1, r8
 8009ddc:	f001 f8a6 	bl	800af2c <memmove>
 8009de0:	68a3      	ldr	r3, [r4, #8]
 8009de2:	1b9b      	subs	r3, r3, r6
 8009de4:	60a3      	str	r3, [r4, #8]
 8009de6:	6823      	ldr	r3, [r4, #0]
 8009de8:	4433      	add	r3, r6
 8009dea:	6023      	str	r3, [r4, #0]
 8009dec:	2000      	movs	r0, #0
 8009dee:	e7db      	b.n	8009da8 <__ssputs_r+0x58>
 8009df0:	462a      	mov	r2, r5
 8009df2:	f001 f8c1 	bl	800af78 <_realloc_r>
 8009df6:	4606      	mov	r6, r0
 8009df8:	2800      	cmp	r0, #0
 8009dfa:	d1e1      	bne.n	8009dc0 <__ssputs_r+0x70>
 8009dfc:	6921      	ldr	r1, [r4, #16]
 8009dfe:	4650      	mov	r0, sl
 8009e00:	f7ff fec6 	bl	8009b90 <_free_r>
 8009e04:	e7c7      	b.n	8009d96 <__ssputs_r+0x46>
	...

08009e08 <_svfiprintf_r>:
 8009e08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009e0c:	4698      	mov	r8, r3
 8009e0e:	898b      	ldrh	r3, [r1, #12]
 8009e10:	061b      	lsls	r3, r3, #24
 8009e12:	b09d      	sub	sp, #116	; 0x74
 8009e14:	4607      	mov	r7, r0
 8009e16:	460d      	mov	r5, r1
 8009e18:	4614      	mov	r4, r2
 8009e1a:	d50e      	bpl.n	8009e3a <_svfiprintf_r+0x32>
 8009e1c:	690b      	ldr	r3, [r1, #16]
 8009e1e:	b963      	cbnz	r3, 8009e3a <_svfiprintf_r+0x32>
 8009e20:	2140      	movs	r1, #64	; 0x40
 8009e22:	f7ff ff21 	bl	8009c68 <_malloc_r>
 8009e26:	6028      	str	r0, [r5, #0]
 8009e28:	6128      	str	r0, [r5, #16]
 8009e2a:	b920      	cbnz	r0, 8009e36 <_svfiprintf_r+0x2e>
 8009e2c:	230c      	movs	r3, #12
 8009e2e:	603b      	str	r3, [r7, #0]
 8009e30:	f04f 30ff 	mov.w	r0, #4294967295
 8009e34:	e0d1      	b.n	8009fda <_svfiprintf_r+0x1d2>
 8009e36:	2340      	movs	r3, #64	; 0x40
 8009e38:	616b      	str	r3, [r5, #20]
 8009e3a:	2300      	movs	r3, #0
 8009e3c:	9309      	str	r3, [sp, #36]	; 0x24
 8009e3e:	2320      	movs	r3, #32
 8009e40:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009e44:	f8cd 800c 	str.w	r8, [sp, #12]
 8009e48:	2330      	movs	r3, #48	; 0x30
 8009e4a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8009ff4 <_svfiprintf_r+0x1ec>
 8009e4e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009e52:	f04f 0901 	mov.w	r9, #1
 8009e56:	4623      	mov	r3, r4
 8009e58:	469a      	mov	sl, r3
 8009e5a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009e5e:	b10a      	cbz	r2, 8009e64 <_svfiprintf_r+0x5c>
 8009e60:	2a25      	cmp	r2, #37	; 0x25
 8009e62:	d1f9      	bne.n	8009e58 <_svfiprintf_r+0x50>
 8009e64:	ebba 0b04 	subs.w	fp, sl, r4
 8009e68:	d00b      	beq.n	8009e82 <_svfiprintf_r+0x7a>
 8009e6a:	465b      	mov	r3, fp
 8009e6c:	4622      	mov	r2, r4
 8009e6e:	4629      	mov	r1, r5
 8009e70:	4638      	mov	r0, r7
 8009e72:	f7ff ff6d 	bl	8009d50 <__ssputs_r>
 8009e76:	3001      	adds	r0, #1
 8009e78:	f000 80aa 	beq.w	8009fd0 <_svfiprintf_r+0x1c8>
 8009e7c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009e7e:	445a      	add	r2, fp
 8009e80:	9209      	str	r2, [sp, #36]	; 0x24
 8009e82:	f89a 3000 	ldrb.w	r3, [sl]
 8009e86:	2b00      	cmp	r3, #0
 8009e88:	f000 80a2 	beq.w	8009fd0 <_svfiprintf_r+0x1c8>
 8009e8c:	2300      	movs	r3, #0
 8009e8e:	f04f 32ff 	mov.w	r2, #4294967295
 8009e92:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009e96:	f10a 0a01 	add.w	sl, sl, #1
 8009e9a:	9304      	str	r3, [sp, #16]
 8009e9c:	9307      	str	r3, [sp, #28]
 8009e9e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009ea2:	931a      	str	r3, [sp, #104]	; 0x68
 8009ea4:	4654      	mov	r4, sl
 8009ea6:	2205      	movs	r2, #5
 8009ea8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009eac:	4851      	ldr	r0, [pc, #324]	; (8009ff4 <_svfiprintf_r+0x1ec>)
 8009eae:	f7f6 f997 	bl	80001e0 <memchr>
 8009eb2:	9a04      	ldr	r2, [sp, #16]
 8009eb4:	b9d8      	cbnz	r0, 8009eee <_svfiprintf_r+0xe6>
 8009eb6:	06d0      	lsls	r0, r2, #27
 8009eb8:	bf44      	itt	mi
 8009eba:	2320      	movmi	r3, #32
 8009ebc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009ec0:	0711      	lsls	r1, r2, #28
 8009ec2:	bf44      	itt	mi
 8009ec4:	232b      	movmi	r3, #43	; 0x2b
 8009ec6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009eca:	f89a 3000 	ldrb.w	r3, [sl]
 8009ece:	2b2a      	cmp	r3, #42	; 0x2a
 8009ed0:	d015      	beq.n	8009efe <_svfiprintf_r+0xf6>
 8009ed2:	9a07      	ldr	r2, [sp, #28]
 8009ed4:	4654      	mov	r4, sl
 8009ed6:	2000      	movs	r0, #0
 8009ed8:	f04f 0c0a 	mov.w	ip, #10
 8009edc:	4621      	mov	r1, r4
 8009ede:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009ee2:	3b30      	subs	r3, #48	; 0x30
 8009ee4:	2b09      	cmp	r3, #9
 8009ee6:	d94e      	bls.n	8009f86 <_svfiprintf_r+0x17e>
 8009ee8:	b1b0      	cbz	r0, 8009f18 <_svfiprintf_r+0x110>
 8009eea:	9207      	str	r2, [sp, #28]
 8009eec:	e014      	b.n	8009f18 <_svfiprintf_r+0x110>
 8009eee:	eba0 0308 	sub.w	r3, r0, r8
 8009ef2:	fa09 f303 	lsl.w	r3, r9, r3
 8009ef6:	4313      	orrs	r3, r2
 8009ef8:	9304      	str	r3, [sp, #16]
 8009efa:	46a2      	mov	sl, r4
 8009efc:	e7d2      	b.n	8009ea4 <_svfiprintf_r+0x9c>
 8009efe:	9b03      	ldr	r3, [sp, #12]
 8009f00:	1d19      	adds	r1, r3, #4
 8009f02:	681b      	ldr	r3, [r3, #0]
 8009f04:	9103      	str	r1, [sp, #12]
 8009f06:	2b00      	cmp	r3, #0
 8009f08:	bfbb      	ittet	lt
 8009f0a:	425b      	neglt	r3, r3
 8009f0c:	f042 0202 	orrlt.w	r2, r2, #2
 8009f10:	9307      	strge	r3, [sp, #28]
 8009f12:	9307      	strlt	r3, [sp, #28]
 8009f14:	bfb8      	it	lt
 8009f16:	9204      	strlt	r2, [sp, #16]
 8009f18:	7823      	ldrb	r3, [r4, #0]
 8009f1a:	2b2e      	cmp	r3, #46	; 0x2e
 8009f1c:	d10c      	bne.n	8009f38 <_svfiprintf_r+0x130>
 8009f1e:	7863      	ldrb	r3, [r4, #1]
 8009f20:	2b2a      	cmp	r3, #42	; 0x2a
 8009f22:	d135      	bne.n	8009f90 <_svfiprintf_r+0x188>
 8009f24:	9b03      	ldr	r3, [sp, #12]
 8009f26:	1d1a      	adds	r2, r3, #4
 8009f28:	681b      	ldr	r3, [r3, #0]
 8009f2a:	9203      	str	r2, [sp, #12]
 8009f2c:	2b00      	cmp	r3, #0
 8009f2e:	bfb8      	it	lt
 8009f30:	f04f 33ff 	movlt.w	r3, #4294967295
 8009f34:	3402      	adds	r4, #2
 8009f36:	9305      	str	r3, [sp, #20]
 8009f38:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800a004 <_svfiprintf_r+0x1fc>
 8009f3c:	7821      	ldrb	r1, [r4, #0]
 8009f3e:	2203      	movs	r2, #3
 8009f40:	4650      	mov	r0, sl
 8009f42:	f7f6 f94d 	bl	80001e0 <memchr>
 8009f46:	b140      	cbz	r0, 8009f5a <_svfiprintf_r+0x152>
 8009f48:	2340      	movs	r3, #64	; 0x40
 8009f4a:	eba0 000a 	sub.w	r0, r0, sl
 8009f4e:	fa03 f000 	lsl.w	r0, r3, r0
 8009f52:	9b04      	ldr	r3, [sp, #16]
 8009f54:	4303      	orrs	r3, r0
 8009f56:	3401      	adds	r4, #1
 8009f58:	9304      	str	r3, [sp, #16]
 8009f5a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009f5e:	4826      	ldr	r0, [pc, #152]	; (8009ff8 <_svfiprintf_r+0x1f0>)
 8009f60:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009f64:	2206      	movs	r2, #6
 8009f66:	f7f6 f93b 	bl	80001e0 <memchr>
 8009f6a:	2800      	cmp	r0, #0
 8009f6c:	d038      	beq.n	8009fe0 <_svfiprintf_r+0x1d8>
 8009f6e:	4b23      	ldr	r3, [pc, #140]	; (8009ffc <_svfiprintf_r+0x1f4>)
 8009f70:	bb1b      	cbnz	r3, 8009fba <_svfiprintf_r+0x1b2>
 8009f72:	9b03      	ldr	r3, [sp, #12]
 8009f74:	3307      	adds	r3, #7
 8009f76:	f023 0307 	bic.w	r3, r3, #7
 8009f7a:	3308      	adds	r3, #8
 8009f7c:	9303      	str	r3, [sp, #12]
 8009f7e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009f80:	4433      	add	r3, r6
 8009f82:	9309      	str	r3, [sp, #36]	; 0x24
 8009f84:	e767      	b.n	8009e56 <_svfiprintf_r+0x4e>
 8009f86:	fb0c 3202 	mla	r2, ip, r2, r3
 8009f8a:	460c      	mov	r4, r1
 8009f8c:	2001      	movs	r0, #1
 8009f8e:	e7a5      	b.n	8009edc <_svfiprintf_r+0xd4>
 8009f90:	2300      	movs	r3, #0
 8009f92:	3401      	adds	r4, #1
 8009f94:	9305      	str	r3, [sp, #20]
 8009f96:	4619      	mov	r1, r3
 8009f98:	f04f 0c0a 	mov.w	ip, #10
 8009f9c:	4620      	mov	r0, r4
 8009f9e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009fa2:	3a30      	subs	r2, #48	; 0x30
 8009fa4:	2a09      	cmp	r2, #9
 8009fa6:	d903      	bls.n	8009fb0 <_svfiprintf_r+0x1a8>
 8009fa8:	2b00      	cmp	r3, #0
 8009faa:	d0c5      	beq.n	8009f38 <_svfiprintf_r+0x130>
 8009fac:	9105      	str	r1, [sp, #20]
 8009fae:	e7c3      	b.n	8009f38 <_svfiprintf_r+0x130>
 8009fb0:	fb0c 2101 	mla	r1, ip, r1, r2
 8009fb4:	4604      	mov	r4, r0
 8009fb6:	2301      	movs	r3, #1
 8009fb8:	e7f0      	b.n	8009f9c <_svfiprintf_r+0x194>
 8009fba:	ab03      	add	r3, sp, #12
 8009fbc:	9300      	str	r3, [sp, #0]
 8009fbe:	462a      	mov	r2, r5
 8009fc0:	4b0f      	ldr	r3, [pc, #60]	; (800a000 <_svfiprintf_r+0x1f8>)
 8009fc2:	a904      	add	r1, sp, #16
 8009fc4:	4638      	mov	r0, r7
 8009fc6:	f7fb fe61 	bl	8005c8c <_printf_float>
 8009fca:	1c42      	adds	r2, r0, #1
 8009fcc:	4606      	mov	r6, r0
 8009fce:	d1d6      	bne.n	8009f7e <_svfiprintf_r+0x176>
 8009fd0:	89ab      	ldrh	r3, [r5, #12]
 8009fd2:	065b      	lsls	r3, r3, #25
 8009fd4:	f53f af2c 	bmi.w	8009e30 <_svfiprintf_r+0x28>
 8009fd8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009fda:	b01d      	add	sp, #116	; 0x74
 8009fdc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009fe0:	ab03      	add	r3, sp, #12
 8009fe2:	9300      	str	r3, [sp, #0]
 8009fe4:	462a      	mov	r2, r5
 8009fe6:	4b06      	ldr	r3, [pc, #24]	; (800a000 <_svfiprintf_r+0x1f8>)
 8009fe8:	a904      	add	r1, sp, #16
 8009fea:	4638      	mov	r0, r7
 8009fec:	f7fc f8f2 	bl	80061d4 <_printf_i>
 8009ff0:	e7eb      	b.n	8009fca <_svfiprintf_r+0x1c2>
 8009ff2:	bf00      	nop
 8009ff4:	0800c27c 	.word	0x0800c27c
 8009ff8:	0800c286 	.word	0x0800c286
 8009ffc:	08005c8d 	.word	0x08005c8d
 800a000:	08009d51 	.word	0x08009d51
 800a004:	0800c282 	.word	0x0800c282

0800a008 <__sfputc_r>:
 800a008:	6893      	ldr	r3, [r2, #8]
 800a00a:	3b01      	subs	r3, #1
 800a00c:	2b00      	cmp	r3, #0
 800a00e:	b410      	push	{r4}
 800a010:	6093      	str	r3, [r2, #8]
 800a012:	da08      	bge.n	800a026 <__sfputc_r+0x1e>
 800a014:	6994      	ldr	r4, [r2, #24]
 800a016:	42a3      	cmp	r3, r4
 800a018:	db01      	blt.n	800a01e <__sfputc_r+0x16>
 800a01a:	290a      	cmp	r1, #10
 800a01c:	d103      	bne.n	800a026 <__sfputc_r+0x1e>
 800a01e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a022:	f7fd bbb9 	b.w	8007798 <__swbuf_r>
 800a026:	6813      	ldr	r3, [r2, #0]
 800a028:	1c58      	adds	r0, r3, #1
 800a02a:	6010      	str	r0, [r2, #0]
 800a02c:	7019      	strb	r1, [r3, #0]
 800a02e:	4608      	mov	r0, r1
 800a030:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a034:	4770      	bx	lr

0800a036 <__sfputs_r>:
 800a036:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a038:	4606      	mov	r6, r0
 800a03a:	460f      	mov	r7, r1
 800a03c:	4614      	mov	r4, r2
 800a03e:	18d5      	adds	r5, r2, r3
 800a040:	42ac      	cmp	r4, r5
 800a042:	d101      	bne.n	800a048 <__sfputs_r+0x12>
 800a044:	2000      	movs	r0, #0
 800a046:	e007      	b.n	800a058 <__sfputs_r+0x22>
 800a048:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a04c:	463a      	mov	r2, r7
 800a04e:	4630      	mov	r0, r6
 800a050:	f7ff ffda 	bl	800a008 <__sfputc_r>
 800a054:	1c43      	adds	r3, r0, #1
 800a056:	d1f3      	bne.n	800a040 <__sfputs_r+0xa>
 800a058:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a05c <_vfiprintf_r>:
 800a05c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a060:	460d      	mov	r5, r1
 800a062:	b09d      	sub	sp, #116	; 0x74
 800a064:	4614      	mov	r4, r2
 800a066:	4698      	mov	r8, r3
 800a068:	4606      	mov	r6, r0
 800a06a:	b118      	cbz	r0, 800a074 <_vfiprintf_r+0x18>
 800a06c:	6983      	ldr	r3, [r0, #24]
 800a06e:	b90b      	cbnz	r3, 800a074 <_vfiprintf_r+0x18>
 800a070:	f7fe fbf8 	bl	8008864 <__sinit>
 800a074:	4b89      	ldr	r3, [pc, #548]	; (800a29c <_vfiprintf_r+0x240>)
 800a076:	429d      	cmp	r5, r3
 800a078:	d11b      	bne.n	800a0b2 <_vfiprintf_r+0x56>
 800a07a:	6875      	ldr	r5, [r6, #4]
 800a07c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a07e:	07d9      	lsls	r1, r3, #31
 800a080:	d405      	bmi.n	800a08e <_vfiprintf_r+0x32>
 800a082:	89ab      	ldrh	r3, [r5, #12]
 800a084:	059a      	lsls	r2, r3, #22
 800a086:	d402      	bmi.n	800a08e <_vfiprintf_r+0x32>
 800a088:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a08a:	f7ff f81a 	bl	80090c2 <__retarget_lock_acquire_recursive>
 800a08e:	89ab      	ldrh	r3, [r5, #12]
 800a090:	071b      	lsls	r3, r3, #28
 800a092:	d501      	bpl.n	800a098 <_vfiprintf_r+0x3c>
 800a094:	692b      	ldr	r3, [r5, #16]
 800a096:	b9eb      	cbnz	r3, 800a0d4 <_vfiprintf_r+0x78>
 800a098:	4629      	mov	r1, r5
 800a09a:	4630      	mov	r0, r6
 800a09c:	f7fd fbce 	bl	800783c <__swsetup_r>
 800a0a0:	b1c0      	cbz	r0, 800a0d4 <_vfiprintf_r+0x78>
 800a0a2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a0a4:	07dc      	lsls	r4, r3, #31
 800a0a6:	d50e      	bpl.n	800a0c6 <_vfiprintf_r+0x6a>
 800a0a8:	f04f 30ff 	mov.w	r0, #4294967295
 800a0ac:	b01d      	add	sp, #116	; 0x74
 800a0ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a0b2:	4b7b      	ldr	r3, [pc, #492]	; (800a2a0 <_vfiprintf_r+0x244>)
 800a0b4:	429d      	cmp	r5, r3
 800a0b6:	d101      	bne.n	800a0bc <_vfiprintf_r+0x60>
 800a0b8:	68b5      	ldr	r5, [r6, #8]
 800a0ba:	e7df      	b.n	800a07c <_vfiprintf_r+0x20>
 800a0bc:	4b79      	ldr	r3, [pc, #484]	; (800a2a4 <_vfiprintf_r+0x248>)
 800a0be:	429d      	cmp	r5, r3
 800a0c0:	bf08      	it	eq
 800a0c2:	68f5      	ldreq	r5, [r6, #12]
 800a0c4:	e7da      	b.n	800a07c <_vfiprintf_r+0x20>
 800a0c6:	89ab      	ldrh	r3, [r5, #12]
 800a0c8:	0598      	lsls	r0, r3, #22
 800a0ca:	d4ed      	bmi.n	800a0a8 <_vfiprintf_r+0x4c>
 800a0cc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a0ce:	f7fe fff9 	bl	80090c4 <__retarget_lock_release_recursive>
 800a0d2:	e7e9      	b.n	800a0a8 <_vfiprintf_r+0x4c>
 800a0d4:	2300      	movs	r3, #0
 800a0d6:	9309      	str	r3, [sp, #36]	; 0x24
 800a0d8:	2320      	movs	r3, #32
 800a0da:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a0de:	f8cd 800c 	str.w	r8, [sp, #12]
 800a0e2:	2330      	movs	r3, #48	; 0x30
 800a0e4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800a2a8 <_vfiprintf_r+0x24c>
 800a0e8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a0ec:	f04f 0901 	mov.w	r9, #1
 800a0f0:	4623      	mov	r3, r4
 800a0f2:	469a      	mov	sl, r3
 800a0f4:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a0f8:	b10a      	cbz	r2, 800a0fe <_vfiprintf_r+0xa2>
 800a0fa:	2a25      	cmp	r2, #37	; 0x25
 800a0fc:	d1f9      	bne.n	800a0f2 <_vfiprintf_r+0x96>
 800a0fe:	ebba 0b04 	subs.w	fp, sl, r4
 800a102:	d00b      	beq.n	800a11c <_vfiprintf_r+0xc0>
 800a104:	465b      	mov	r3, fp
 800a106:	4622      	mov	r2, r4
 800a108:	4629      	mov	r1, r5
 800a10a:	4630      	mov	r0, r6
 800a10c:	f7ff ff93 	bl	800a036 <__sfputs_r>
 800a110:	3001      	adds	r0, #1
 800a112:	f000 80aa 	beq.w	800a26a <_vfiprintf_r+0x20e>
 800a116:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a118:	445a      	add	r2, fp
 800a11a:	9209      	str	r2, [sp, #36]	; 0x24
 800a11c:	f89a 3000 	ldrb.w	r3, [sl]
 800a120:	2b00      	cmp	r3, #0
 800a122:	f000 80a2 	beq.w	800a26a <_vfiprintf_r+0x20e>
 800a126:	2300      	movs	r3, #0
 800a128:	f04f 32ff 	mov.w	r2, #4294967295
 800a12c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a130:	f10a 0a01 	add.w	sl, sl, #1
 800a134:	9304      	str	r3, [sp, #16]
 800a136:	9307      	str	r3, [sp, #28]
 800a138:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a13c:	931a      	str	r3, [sp, #104]	; 0x68
 800a13e:	4654      	mov	r4, sl
 800a140:	2205      	movs	r2, #5
 800a142:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a146:	4858      	ldr	r0, [pc, #352]	; (800a2a8 <_vfiprintf_r+0x24c>)
 800a148:	f7f6 f84a 	bl	80001e0 <memchr>
 800a14c:	9a04      	ldr	r2, [sp, #16]
 800a14e:	b9d8      	cbnz	r0, 800a188 <_vfiprintf_r+0x12c>
 800a150:	06d1      	lsls	r1, r2, #27
 800a152:	bf44      	itt	mi
 800a154:	2320      	movmi	r3, #32
 800a156:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a15a:	0713      	lsls	r3, r2, #28
 800a15c:	bf44      	itt	mi
 800a15e:	232b      	movmi	r3, #43	; 0x2b
 800a160:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a164:	f89a 3000 	ldrb.w	r3, [sl]
 800a168:	2b2a      	cmp	r3, #42	; 0x2a
 800a16a:	d015      	beq.n	800a198 <_vfiprintf_r+0x13c>
 800a16c:	9a07      	ldr	r2, [sp, #28]
 800a16e:	4654      	mov	r4, sl
 800a170:	2000      	movs	r0, #0
 800a172:	f04f 0c0a 	mov.w	ip, #10
 800a176:	4621      	mov	r1, r4
 800a178:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a17c:	3b30      	subs	r3, #48	; 0x30
 800a17e:	2b09      	cmp	r3, #9
 800a180:	d94e      	bls.n	800a220 <_vfiprintf_r+0x1c4>
 800a182:	b1b0      	cbz	r0, 800a1b2 <_vfiprintf_r+0x156>
 800a184:	9207      	str	r2, [sp, #28]
 800a186:	e014      	b.n	800a1b2 <_vfiprintf_r+0x156>
 800a188:	eba0 0308 	sub.w	r3, r0, r8
 800a18c:	fa09 f303 	lsl.w	r3, r9, r3
 800a190:	4313      	orrs	r3, r2
 800a192:	9304      	str	r3, [sp, #16]
 800a194:	46a2      	mov	sl, r4
 800a196:	e7d2      	b.n	800a13e <_vfiprintf_r+0xe2>
 800a198:	9b03      	ldr	r3, [sp, #12]
 800a19a:	1d19      	adds	r1, r3, #4
 800a19c:	681b      	ldr	r3, [r3, #0]
 800a19e:	9103      	str	r1, [sp, #12]
 800a1a0:	2b00      	cmp	r3, #0
 800a1a2:	bfbb      	ittet	lt
 800a1a4:	425b      	neglt	r3, r3
 800a1a6:	f042 0202 	orrlt.w	r2, r2, #2
 800a1aa:	9307      	strge	r3, [sp, #28]
 800a1ac:	9307      	strlt	r3, [sp, #28]
 800a1ae:	bfb8      	it	lt
 800a1b0:	9204      	strlt	r2, [sp, #16]
 800a1b2:	7823      	ldrb	r3, [r4, #0]
 800a1b4:	2b2e      	cmp	r3, #46	; 0x2e
 800a1b6:	d10c      	bne.n	800a1d2 <_vfiprintf_r+0x176>
 800a1b8:	7863      	ldrb	r3, [r4, #1]
 800a1ba:	2b2a      	cmp	r3, #42	; 0x2a
 800a1bc:	d135      	bne.n	800a22a <_vfiprintf_r+0x1ce>
 800a1be:	9b03      	ldr	r3, [sp, #12]
 800a1c0:	1d1a      	adds	r2, r3, #4
 800a1c2:	681b      	ldr	r3, [r3, #0]
 800a1c4:	9203      	str	r2, [sp, #12]
 800a1c6:	2b00      	cmp	r3, #0
 800a1c8:	bfb8      	it	lt
 800a1ca:	f04f 33ff 	movlt.w	r3, #4294967295
 800a1ce:	3402      	adds	r4, #2
 800a1d0:	9305      	str	r3, [sp, #20]
 800a1d2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800a2b8 <_vfiprintf_r+0x25c>
 800a1d6:	7821      	ldrb	r1, [r4, #0]
 800a1d8:	2203      	movs	r2, #3
 800a1da:	4650      	mov	r0, sl
 800a1dc:	f7f6 f800 	bl	80001e0 <memchr>
 800a1e0:	b140      	cbz	r0, 800a1f4 <_vfiprintf_r+0x198>
 800a1e2:	2340      	movs	r3, #64	; 0x40
 800a1e4:	eba0 000a 	sub.w	r0, r0, sl
 800a1e8:	fa03 f000 	lsl.w	r0, r3, r0
 800a1ec:	9b04      	ldr	r3, [sp, #16]
 800a1ee:	4303      	orrs	r3, r0
 800a1f0:	3401      	adds	r4, #1
 800a1f2:	9304      	str	r3, [sp, #16]
 800a1f4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a1f8:	482c      	ldr	r0, [pc, #176]	; (800a2ac <_vfiprintf_r+0x250>)
 800a1fa:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a1fe:	2206      	movs	r2, #6
 800a200:	f7f5 ffee 	bl	80001e0 <memchr>
 800a204:	2800      	cmp	r0, #0
 800a206:	d03f      	beq.n	800a288 <_vfiprintf_r+0x22c>
 800a208:	4b29      	ldr	r3, [pc, #164]	; (800a2b0 <_vfiprintf_r+0x254>)
 800a20a:	bb1b      	cbnz	r3, 800a254 <_vfiprintf_r+0x1f8>
 800a20c:	9b03      	ldr	r3, [sp, #12]
 800a20e:	3307      	adds	r3, #7
 800a210:	f023 0307 	bic.w	r3, r3, #7
 800a214:	3308      	adds	r3, #8
 800a216:	9303      	str	r3, [sp, #12]
 800a218:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a21a:	443b      	add	r3, r7
 800a21c:	9309      	str	r3, [sp, #36]	; 0x24
 800a21e:	e767      	b.n	800a0f0 <_vfiprintf_r+0x94>
 800a220:	fb0c 3202 	mla	r2, ip, r2, r3
 800a224:	460c      	mov	r4, r1
 800a226:	2001      	movs	r0, #1
 800a228:	e7a5      	b.n	800a176 <_vfiprintf_r+0x11a>
 800a22a:	2300      	movs	r3, #0
 800a22c:	3401      	adds	r4, #1
 800a22e:	9305      	str	r3, [sp, #20]
 800a230:	4619      	mov	r1, r3
 800a232:	f04f 0c0a 	mov.w	ip, #10
 800a236:	4620      	mov	r0, r4
 800a238:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a23c:	3a30      	subs	r2, #48	; 0x30
 800a23e:	2a09      	cmp	r2, #9
 800a240:	d903      	bls.n	800a24a <_vfiprintf_r+0x1ee>
 800a242:	2b00      	cmp	r3, #0
 800a244:	d0c5      	beq.n	800a1d2 <_vfiprintf_r+0x176>
 800a246:	9105      	str	r1, [sp, #20]
 800a248:	e7c3      	b.n	800a1d2 <_vfiprintf_r+0x176>
 800a24a:	fb0c 2101 	mla	r1, ip, r1, r2
 800a24e:	4604      	mov	r4, r0
 800a250:	2301      	movs	r3, #1
 800a252:	e7f0      	b.n	800a236 <_vfiprintf_r+0x1da>
 800a254:	ab03      	add	r3, sp, #12
 800a256:	9300      	str	r3, [sp, #0]
 800a258:	462a      	mov	r2, r5
 800a25a:	4b16      	ldr	r3, [pc, #88]	; (800a2b4 <_vfiprintf_r+0x258>)
 800a25c:	a904      	add	r1, sp, #16
 800a25e:	4630      	mov	r0, r6
 800a260:	f7fb fd14 	bl	8005c8c <_printf_float>
 800a264:	4607      	mov	r7, r0
 800a266:	1c78      	adds	r0, r7, #1
 800a268:	d1d6      	bne.n	800a218 <_vfiprintf_r+0x1bc>
 800a26a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a26c:	07d9      	lsls	r1, r3, #31
 800a26e:	d405      	bmi.n	800a27c <_vfiprintf_r+0x220>
 800a270:	89ab      	ldrh	r3, [r5, #12]
 800a272:	059a      	lsls	r2, r3, #22
 800a274:	d402      	bmi.n	800a27c <_vfiprintf_r+0x220>
 800a276:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a278:	f7fe ff24 	bl	80090c4 <__retarget_lock_release_recursive>
 800a27c:	89ab      	ldrh	r3, [r5, #12]
 800a27e:	065b      	lsls	r3, r3, #25
 800a280:	f53f af12 	bmi.w	800a0a8 <_vfiprintf_r+0x4c>
 800a284:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a286:	e711      	b.n	800a0ac <_vfiprintf_r+0x50>
 800a288:	ab03      	add	r3, sp, #12
 800a28a:	9300      	str	r3, [sp, #0]
 800a28c:	462a      	mov	r2, r5
 800a28e:	4b09      	ldr	r3, [pc, #36]	; (800a2b4 <_vfiprintf_r+0x258>)
 800a290:	a904      	add	r1, sp, #16
 800a292:	4630      	mov	r0, r6
 800a294:	f7fb ff9e 	bl	80061d4 <_printf_i>
 800a298:	e7e4      	b.n	800a264 <_vfiprintf_r+0x208>
 800a29a:	bf00      	nop
 800a29c:	0800c064 	.word	0x0800c064
 800a2a0:	0800c084 	.word	0x0800c084
 800a2a4:	0800c044 	.word	0x0800c044
 800a2a8:	0800c27c 	.word	0x0800c27c
 800a2ac:	0800c286 	.word	0x0800c286
 800a2b0:	08005c8d 	.word	0x08005c8d
 800a2b4:	0800a037 	.word	0x0800a037
 800a2b8:	0800c282 	.word	0x0800c282

0800a2bc <__svfiscanf_r>:
 800a2bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a2c0:	461d      	mov	r5, r3
 800a2c2:	6e4b      	ldr	r3, [r1, #100]	; 0x64
 800a2c4:	07df      	lsls	r7, r3, #31
 800a2c6:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 800a2ca:	4606      	mov	r6, r0
 800a2cc:	460c      	mov	r4, r1
 800a2ce:	4692      	mov	sl, r2
 800a2d0:	d405      	bmi.n	800a2de <__svfiscanf_r+0x22>
 800a2d2:	898b      	ldrh	r3, [r1, #12]
 800a2d4:	0598      	lsls	r0, r3, #22
 800a2d6:	d402      	bmi.n	800a2de <__svfiscanf_r+0x22>
 800a2d8:	6d88      	ldr	r0, [r1, #88]	; 0x58
 800a2da:	f7fe fef2 	bl	80090c2 <__retarget_lock_acquire_recursive>
 800a2de:	2300      	movs	r3, #0
 800a2e0:	e9cd 3344 	strd	r3, r3, [sp, #272]	; 0x110
 800a2e4:	4ba6      	ldr	r3, [pc, #664]	; (800a580 <__svfiscanf_r+0x2c4>)
 800a2e6:	93a0      	str	r3, [sp, #640]	; 0x280
 800a2e8:	f10d 0804 	add.w	r8, sp, #4
 800a2ec:	4ba5      	ldr	r3, [pc, #660]	; (800a584 <__svfiscanf_r+0x2c8>)
 800a2ee:	4fa6      	ldr	r7, [pc, #664]	; (800a588 <__svfiscanf_r+0x2cc>)
 800a2f0:	f8df 9298 	ldr.w	r9, [pc, #664]	; 800a58c <__svfiscanf_r+0x2d0>
 800a2f4:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 800a2f8:	93a1      	str	r3, [sp, #644]	; 0x284
 800a2fa:	9500      	str	r5, [sp, #0]
 800a2fc:	f89a 3000 	ldrb.w	r3, [sl]
 800a300:	2b00      	cmp	r3, #0
 800a302:	f000 8173 	beq.w	800a5ec <__svfiscanf_r+0x330>
 800a306:	5dd9      	ldrb	r1, [r3, r7]
 800a308:	f011 0108 	ands.w	r1, r1, #8
 800a30c:	f10a 0501 	add.w	r5, sl, #1
 800a310:	d019      	beq.n	800a346 <__svfiscanf_r+0x8a>
 800a312:	6863      	ldr	r3, [r4, #4]
 800a314:	2b00      	cmp	r3, #0
 800a316:	dd0f      	ble.n	800a338 <__svfiscanf_r+0x7c>
 800a318:	6823      	ldr	r3, [r4, #0]
 800a31a:	781a      	ldrb	r2, [r3, #0]
 800a31c:	5cba      	ldrb	r2, [r7, r2]
 800a31e:	0711      	lsls	r1, r2, #28
 800a320:	d401      	bmi.n	800a326 <__svfiscanf_r+0x6a>
 800a322:	46aa      	mov	sl, r5
 800a324:	e7ea      	b.n	800a2fc <__svfiscanf_r+0x40>
 800a326:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800a328:	3201      	adds	r2, #1
 800a32a:	9245      	str	r2, [sp, #276]	; 0x114
 800a32c:	6862      	ldr	r2, [r4, #4]
 800a32e:	3301      	adds	r3, #1
 800a330:	3a01      	subs	r2, #1
 800a332:	6062      	str	r2, [r4, #4]
 800a334:	6023      	str	r3, [r4, #0]
 800a336:	e7ec      	b.n	800a312 <__svfiscanf_r+0x56>
 800a338:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800a33a:	4621      	mov	r1, r4
 800a33c:	4630      	mov	r0, r6
 800a33e:	4798      	blx	r3
 800a340:	2800      	cmp	r0, #0
 800a342:	d0e9      	beq.n	800a318 <__svfiscanf_r+0x5c>
 800a344:	e7ed      	b.n	800a322 <__svfiscanf_r+0x66>
 800a346:	2b25      	cmp	r3, #37	; 0x25
 800a348:	d012      	beq.n	800a370 <__svfiscanf_r+0xb4>
 800a34a:	469a      	mov	sl, r3
 800a34c:	6863      	ldr	r3, [r4, #4]
 800a34e:	2b00      	cmp	r3, #0
 800a350:	f340 8095 	ble.w	800a47e <__svfiscanf_r+0x1c2>
 800a354:	6822      	ldr	r2, [r4, #0]
 800a356:	7813      	ldrb	r3, [r2, #0]
 800a358:	4553      	cmp	r3, sl
 800a35a:	f040 8147 	bne.w	800a5ec <__svfiscanf_r+0x330>
 800a35e:	6863      	ldr	r3, [r4, #4]
 800a360:	3b01      	subs	r3, #1
 800a362:	6063      	str	r3, [r4, #4]
 800a364:	9b45      	ldr	r3, [sp, #276]	; 0x114
 800a366:	3201      	adds	r2, #1
 800a368:	3301      	adds	r3, #1
 800a36a:	6022      	str	r2, [r4, #0]
 800a36c:	9345      	str	r3, [sp, #276]	; 0x114
 800a36e:	e7d8      	b.n	800a322 <__svfiscanf_r+0x66>
 800a370:	9141      	str	r1, [sp, #260]	; 0x104
 800a372:	9143      	str	r1, [sp, #268]	; 0x10c
 800a374:	f89a 3001 	ldrb.w	r3, [sl, #1]
 800a378:	2b2a      	cmp	r3, #42	; 0x2a
 800a37a:	bf02      	ittt	eq
 800a37c:	2310      	moveq	r3, #16
 800a37e:	9341      	streq	r3, [sp, #260]	; 0x104
 800a380:	f10a 0502 	addeq.w	r5, sl, #2
 800a384:	220a      	movs	r2, #10
 800a386:	46aa      	mov	sl, r5
 800a388:	f81a 1b01 	ldrb.w	r1, [sl], #1
 800a38c:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 800a390:	2b09      	cmp	r3, #9
 800a392:	d91e      	bls.n	800a3d2 <__svfiscanf_r+0x116>
 800a394:	487d      	ldr	r0, [pc, #500]	; (800a58c <__svfiscanf_r+0x2d0>)
 800a396:	2203      	movs	r2, #3
 800a398:	f7f5 ff22 	bl	80001e0 <memchr>
 800a39c:	b140      	cbz	r0, 800a3b0 <__svfiscanf_r+0xf4>
 800a39e:	2301      	movs	r3, #1
 800a3a0:	eba0 0009 	sub.w	r0, r0, r9
 800a3a4:	fa03 f000 	lsl.w	r0, r3, r0
 800a3a8:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800a3aa:	4318      	orrs	r0, r3
 800a3ac:	9041      	str	r0, [sp, #260]	; 0x104
 800a3ae:	4655      	mov	r5, sl
 800a3b0:	f815 3b01 	ldrb.w	r3, [r5], #1
 800a3b4:	2b78      	cmp	r3, #120	; 0x78
 800a3b6:	d807      	bhi.n	800a3c8 <__svfiscanf_r+0x10c>
 800a3b8:	2b57      	cmp	r3, #87	; 0x57
 800a3ba:	d811      	bhi.n	800a3e0 <__svfiscanf_r+0x124>
 800a3bc:	2b25      	cmp	r3, #37	; 0x25
 800a3be:	d0c4      	beq.n	800a34a <__svfiscanf_r+0x8e>
 800a3c0:	d858      	bhi.n	800a474 <__svfiscanf_r+0x1b8>
 800a3c2:	2b00      	cmp	r3, #0
 800a3c4:	f000 80c8 	beq.w	800a558 <__svfiscanf_r+0x29c>
 800a3c8:	2303      	movs	r3, #3
 800a3ca:	9347      	str	r3, [sp, #284]	; 0x11c
 800a3cc:	230a      	movs	r3, #10
 800a3ce:	9342      	str	r3, [sp, #264]	; 0x108
 800a3d0:	e07c      	b.n	800a4cc <__svfiscanf_r+0x210>
 800a3d2:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 800a3d4:	fb02 1103 	mla	r1, r2, r3, r1
 800a3d8:	3930      	subs	r1, #48	; 0x30
 800a3da:	9143      	str	r1, [sp, #268]	; 0x10c
 800a3dc:	4655      	mov	r5, sl
 800a3de:	e7d2      	b.n	800a386 <__svfiscanf_r+0xca>
 800a3e0:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 800a3e4:	2a20      	cmp	r2, #32
 800a3e6:	d8ef      	bhi.n	800a3c8 <__svfiscanf_r+0x10c>
 800a3e8:	a101      	add	r1, pc, #4	; (adr r1, 800a3f0 <__svfiscanf_r+0x134>)
 800a3ea:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800a3ee:	bf00      	nop
 800a3f0:	0800a4b7 	.word	0x0800a4b7
 800a3f4:	0800a3c9 	.word	0x0800a3c9
 800a3f8:	0800a3c9 	.word	0x0800a3c9
 800a3fc:	0800a515 	.word	0x0800a515
 800a400:	0800a3c9 	.word	0x0800a3c9
 800a404:	0800a3c9 	.word	0x0800a3c9
 800a408:	0800a3c9 	.word	0x0800a3c9
 800a40c:	0800a3c9 	.word	0x0800a3c9
 800a410:	0800a3c9 	.word	0x0800a3c9
 800a414:	0800a3c9 	.word	0x0800a3c9
 800a418:	0800a3c9 	.word	0x0800a3c9
 800a41c:	0800a52b 	.word	0x0800a52b
 800a420:	0800a501 	.word	0x0800a501
 800a424:	0800a47b 	.word	0x0800a47b
 800a428:	0800a47b 	.word	0x0800a47b
 800a42c:	0800a47b 	.word	0x0800a47b
 800a430:	0800a3c9 	.word	0x0800a3c9
 800a434:	0800a505 	.word	0x0800a505
 800a438:	0800a3c9 	.word	0x0800a3c9
 800a43c:	0800a3c9 	.word	0x0800a3c9
 800a440:	0800a3c9 	.word	0x0800a3c9
 800a444:	0800a3c9 	.word	0x0800a3c9
 800a448:	0800a53b 	.word	0x0800a53b
 800a44c:	0800a50d 	.word	0x0800a50d
 800a450:	0800a4af 	.word	0x0800a4af
 800a454:	0800a3c9 	.word	0x0800a3c9
 800a458:	0800a3c9 	.word	0x0800a3c9
 800a45c:	0800a537 	.word	0x0800a537
 800a460:	0800a3c9 	.word	0x0800a3c9
 800a464:	0800a501 	.word	0x0800a501
 800a468:	0800a3c9 	.word	0x0800a3c9
 800a46c:	0800a3c9 	.word	0x0800a3c9
 800a470:	0800a4b7 	.word	0x0800a4b7
 800a474:	3b45      	subs	r3, #69	; 0x45
 800a476:	2b02      	cmp	r3, #2
 800a478:	d8a6      	bhi.n	800a3c8 <__svfiscanf_r+0x10c>
 800a47a:	2305      	movs	r3, #5
 800a47c:	e025      	b.n	800a4ca <__svfiscanf_r+0x20e>
 800a47e:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800a480:	4621      	mov	r1, r4
 800a482:	4630      	mov	r0, r6
 800a484:	4798      	blx	r3
 800a486:	2800      	cmp	r0, #0
 800a488:	f43f af64 	beq.w	800a354 <__svfiscanf_r+0x98>
 800a48c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a48e:	07da      	lsls	r2, r3, #31
 800a490:	f140 80a4 	bpl.w	800a5dc <__svfiscanf_r+0x320>
 800a494:	9844      	ldr	r0, [sp, #272]	; 0x110
 800a496:	2800      	cmp	r0, #0
 800a498:	d067      	beq.n	800a56a <__svfiscanf_r+0x2ae>
 800a49a:	89a3      	ldrh	r3, [r4, #12]
 800a49c:	f013 0f40 	tst.w	r3, #64	; 0x40
 800a4a0:	bf18      	it	ne
 800a4a2:	f04f 30ff 	movne.w	r0, #4294967295
 800a4a6:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 800a4aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a4ae:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800a4b0:	f042 0220 	orr.w	r2, r2, #32
 800a4b4:	9241      	str	r2, [sp, #260]	; 0x104
 800a4b6:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800a4b8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a4bc:	9241      	str	r2, [sp, #260]	; 0x104
 800a4be:	2210      	movs	r2, #16
 800a4c0:	2b6f      	cmp	r3, #111	; 0x6f
 800a4c2:	9242      	str	r2, [sp, #264]	; 0x108
 800a4c4:	bf34      	ite	cc
 800a4c6:	2303      	movcc	r3, #3
 800a4c8:	2304      	movcs	r3, #4
 800a4ca:	9347      	str	r3, [sp, #284]	; 0x11c
 800a4cc:	6863      	ldr	r3, [r4, #4]
 800a4ce:	2b00      	cmp	r3, #0
 800a4d0:	dd4e      	ble.n	800a570 <__svfiscanf_r+0x2b4>
 800a4d2:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800a4d4:	065b      	lsls	r3, r3, #25
 800a4d6:	d404      	bmi.n	800a4e2 <__svfiscanf_r+0x226>
 800a4d8:	6823      	ldr	r3, [r4, #0]
 800a4da:	781a      	ldrb	r2, [r3, #0]
 800a4dc:	5cba      	ldrb	r2, [r7, r2]
 800a4de:	0710      	lsls	r0, r2, #28
 800a4e0:	d456      	bmi.n	800a590 <__svfiscanf_r+0x2d4>
 800a4e2:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 800a4e4:	2b02      	cmp	r3, #2
 800a4e6:	dc65      	bgt.n	800a5b4 <__svfiscanf_r+0x2f8>
 800a4e8:	466b      	mov	r3, sp
 800a4ea:	4622      	mov	r2, r4
 800a4ec:	a941      	add	r1, sp, #260	; 0x104
 800a4ee:	4630      	mov	r0, r6
 800a4f0:	f000 f8b2 	bl	800a658 <_scanf_chars>
 800a4f4:	2801      	cmp	r0, #1
 800a4f6:	d079      	beq.n	800a5ec <__svfiscanf_r+0x330>
 800a4f8:	2802      	cmp	r0, #2
 800a4fa:	f47f af12 	bne.w	800a322 <__svfiscanf_r+0x66>
 800a4fe:	e7c5      	b.n	800a48c <__svfiscanf_r+0x1d0>
 800a500:	220a      	movs	r2, #10
 800a502:	e7dd      	b.n	800a4c0 <__svfiscanf_r+0x204>
 800a504:	2300      	movs	r3, #0
 800a506:	9342      	str	r3, [sp, #264]	; 0x108
 800a508:	2303      	movs	r3, #3
 800a50a:	e7de      	b.n	800a4ca <__svfiscanf_r+0x20e>
 800a50c:	2308      	movs	r3, #8
 800a50e:	9342      	str	r3, [sp, #264]	; 0x108
 800a510:	2304      	movs	r3, #4
 800a512:	e7da      	b.n	800a4ca <__svfiscanf_r+0x20e>
 800a514:	4629      	mov	r1, r5
 800a516:	4640      	mov	r0, r8
 800a518:	f000 fa9e 	bl	800aa58 <__sccl>
 800a51c:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800a51e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a522:	9341      	str	r3, [sp, #260]	; 0x104
 800a524:	4605      	mov	r5, r0
 800a526:	2301      	movs	r3, #1
 800a528:	e7cf      	b.n	800a4ca <__svfiscanf_r+0x20e>
 800a52a:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800a52c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a530:	9341      	str	r3, [sp, #260]	; 0x104
 800a532:	2300      	movs	r3, #0
 800a534:	e7c9      	b.n	800a4ca <__svfiscanf_r+0x20e>
 800a536:	2302      	movs	r3, #2
 800a538:	e7c7      	b.n	800a4ca <__svfiscanf_r+0x20e>
 800a53a:	9841      	ldr	r0, [sp, #260]	; 0x104
 800a53c:	06c3      	lsls	r3, r0, #27
 800a53e:	f53f aef0 	bmi.w	800a322 <__svfiscanf_r+0x66>
 800a542:	9b00      	ldr	r3, [sp, #0]
 800a544:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800a546:	1d19      	adds	r1, r3, #4
 800a548:	9100      	str	r1, [sp, #0]
 800a54a:	681b      	ldr	r3, [r3, #0]
 800a54c:	f010 0f01 	tst.w	r0, #1
 800a550:	bf14      	ite	ne
 800a552:	801a      	strhne	r2, [r3, #0]
 800a554:	601a      	streq	r2, [r3, #0]
 800a556:	e6e4      	b.n	800a322 <__svfiscanf_r+0x66>
 800a558:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a55a:	07d8      	lsls	r0, r3, #31
 800a55c:	d405      	bmi.n	800a56a <__svfiscanf_r+0x2ae>
 800a55e:	89a3      	ldrh	r3, [r4, #12]
 800a560:	0599      	lsls	r1, r3, #22
 800a562:	d402      	bmi.n	800a56a <__svfiscanf_r+0x2ae>
 800a564:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a566:	f7fe fdad 	bl	80090c4 <__retarget_lock_release_recursive>
 800a56a:	f04f 30ff 	mov.w	r0, #4294967295
 800a56e:	e79a      	b.n	800a4a6 <__svfiscanf_r+0x1ea>
 800a570:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800a572:	4621      	mov	r1, r4
 800a574:	4630      	mov	r0, r6
 800a576:	4798      	blx	r3
 800a578:	2800      	cmp	r0, #0
 800a57a:	d0aa      	beq.n	800a4d2 <__svfiscanf_r+0x216>
 800a57c:	e786      	b.n	800a48c <__svfiscanf_r+0x1d0>
 800a57e:	bf00      	nop
 800a580:	0800acd5 	.word	0x0800acd5
 800a584:	0800a911 	.word	0x0800a911
 800a588:	0800beb1 	.word	0x0800beb1
 800a58c:	0800c282 	.word	0x0800c282
 800a590:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800a592:	3201      	adds	r2, #1
 800a594:	9245      	str	r2, [sp, #276]	; 0x114
 800a596:	6862      	ldr	r2, [r4, #4]
 800a598:	3a01      	subs	r2, #1
 800a59a:	2a00      	cmp	r2, #0
 800a59c:	6062      	str	r2, [r4, #4]
 800a59e:	dd02      	ble.n	800a5a6 <__svfiscanf_r+0x2ea>
 800a5a0:	3301      	adds	r3, #1
 800a5a2:	6023      	str	r3, [r4, #0]
 800a5a4:	e798      	b.n	800a4d8 <__svfiscanf_r+0x21c>
 800a5a6:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800a5a8:	4621      	mov	r1, r4
 800a5aa:	4630      	mov	r0, r6
 800a5ac:	4798      	blx	r3
 800a5ae:	2800      	cmp	r0, #0
 800a5b0:	d092      	beq.n	800a4d8 <__svfiscanf_r+0x21c>
 800a5b2:	e76b      	b.n	800a48c <__svfiscanf_r+0x1d0>
 800a5b4:	2b04      	cmp	r3, #4
 800a5b6:	dc06      	bgt.n	800a5c6 <__svfiscanf_r+0x30a>
 800a5b8:	466b      	mov	r3, sp
 800a5ba:	4622      	mov	r2, r4
 800a5bc:	a941      	add	r1, sp, #260	; 0x104
 800a5be:	4630      	mov	r0, r6
 800a5c0:	f000 f8a4 	bl	800a70c <_scanf_i>
 800a5c4:	e796      	b.n	800a4f4 <__svfiscanf_r+0x238>
 800a5c6:	4b0f      	ldr	r3, [pc, #60]	; (800a604 <__svfiscanf_r+0x348>)
 800a5c8:	2b00      	cmp	r3, #0
 800a5ca:	f43f aeaa 	beq.w	800a322 <__svfiscanf_r+0x66>
 800a5ce:	466b      	mov	r3, sp
 800a5d0:	4622      	mov	r2, r4
 800a5d2:	a941      	add	r1, sp, #260	; 0x104
 800a5d4:	4630      	mov	r0, r6
 800a5d6:	f7fb ff23 	bl	8006420 <_scanf_float>
 800a5da:	e78b      	b.n	800a4f4 <__svfiscanf_r+0x238>
 800a5dc:	89a3      	ldrh	r3, [r4, #12]
 800a5de:	0599      	lsls	r1, r3, #22
 800a5e0:	f53f af58 	bmi.w	800a494 <__svfiscanf_r+0x1d8>
 800a5e4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a5e6:	f7fe fd6d 	bl	80090c4 <__retarget_lock_release_recursive>
 800a5ea:	e753      	b.n	800a494 <__svfiscanf_r+0x1d8>
 800a5ec:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a5ee:	07da      	lsls	r2, r3, #31
 800a5f0:	d405      	bmi.n	800a5fe <__svfiscanf_r+0x342>
 800a5f2:	89a3      	ldrh	r3, [r4, #12]
 800a5f4:	059b      	lsls	r3, r3, #22
 800a5f6:	d402      	bmi.n	800a5fe <__svfiscanf_r+0x342>
 800a5f8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a5fa:	f7fe fd63 	bl	80090c4 <__retarget_lock_release_recursive>
 800a5fe:	9844      	ldr	r0, [sp, #272]	; 0x110
 800a600:	e751      	b.n	800a4a6 <__svfiscanf_r+0x1ea>
 800a602:	bf00      	nop
 800a604:	08006421 	.word	0x08006421

0800a608 <_vfiscanf_r>:
 800a608:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a60a:	460c      	mov	r4, r1
 800a60c:	4605      	mov	r5, r0
 800a60e:	b138      	cbz	r0, 800a620 <_vfiscanf_r+0x18>
 800a610:	6981      	ldr	r1, [r0, #24]
 800a612:	b929      	cbnz	r1, 800a620 <_vfiscanf_r+0x18>
 800a614:	e9cd 2300 	strd	r2, r3, [sp]
 800a618:	f7fe f924 	bl	8008864 <__sinit>
 800a61c:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a620:	490a      	ldr	r1, [pc, #40]	; (800a64c <_vfiscanf_r+0x44>)
 800a622:	428c      	cmp	r4, r1
 800a624:	d107      	bne.n	800a636 <_vfiscanf_r+0x2e>
 800a626:	686c      	ldr	r4, [r5, #4]
 800a628:	4621      	mov	r1, r4
 800a62a:	4628      	mov	r0, r5
 800a62c:	b003      	add	sp, #12
 800a62e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a632:	f7ff be43 	b.w	800a2bc <__svfiscanf_r>
 800a636:	4906      	ldr	r1, [pc, #24]	; (800a650 <_vfiscanf_r+0x48>)
 800a638:	428c      	cmp	r4, r1
 800a63a:	d101      	bne.n	800a640 <_vfiscanf_r+0x38>
 800a63c:	68ac      	ldr	r4, [r5, #8]
 800a63e:	e7f3      	b.n	800a628 <_vfiscanf_r+0x20>
 800a640:	4904      	ldr	r1, [pc, #16]	; (800a654 <_vfiscanf_r+0x4c>)
 800a642:	428c      	cmp	r4, r1
 800a644:	bf08      	it	eq
 800a646:	68ec      	ldreq	r4, [r5, #12]
 800a648:	e7ee      	b.n	800a628 <_vfiscanf_r+0x20>
 800a64a:	bf00      	nop
 800a64c:	0800c064 	.word	0x0800c064
 800a650:	0800c084 	.word	0x0800c084
 800a654:	0800c044 	.word	0x0800c044

0800a658 <_scanf_chars>:
 800a658:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a65c:	4615      	mov	r5, r2
 800a65e:	688a      	ldr	r2, [r1, #8]
 800a660:	4680      	mov	r8, r0
 800a662:	460c      	mov	r4, r1
 800a664:	b932      	cbnz	r2, 800a674 <_scanf_chars+0x1c>
 800a666:	698a      	ldr	r2, [r1, #24]
 800a668:	2a00      	cmp	r2, #0
 800a66a:	bf0c      	ite	eq
 800a66c:	2201      	moveq	r2, #1
 800a66e:	f04f 32ff 	movne.w	r2, #4294967295
 800a672:	608a      	str	r2, [r1, #8]
 800a674:	6822      	ldr	r2, [r4, #0]
 800a676:	f8df 9090 	ldr.w	r9, [pc, #144]	; 800a708 <_scanf_chars+0xb0>
 800a67a:	06d1      	lsls	r1, r2, #27
 800a67c:	bf5f      	itttt	pl
 800a67e:	681a      	ldrpl	r2, [r3, #0]
 800a680:	1d11      	addpl	r1, r2, #4
 800a682:	6019      	strpl	r1, [r3, #0]
 800a684:	6816      	ldrpl	r6, [r2, #0]
 800a686:	2700      	movs	r7, #0
 800a688:	69a0      	ldr	r0, [r4, #24]
 800a68a:	b188      	cbz	r0, 800a6b0 <_scanf_chars+0x58>
 800a68c:	2801      	cmp	r0, #1
 800a68e:	d107      	bne.n	800a6a0 <_scanf_chars+0x48>
 800a690:	682a      	ldr	r2, [r5, #0]
 800a692:	7811      	ldrb	r1, [r2, #0]
 800a694:	6962      	ldr	r2, [r4, #20]
 800a696:	5c52      	ldrb	r2, [r2, r1]
 800a698:	b952      	cbnz	r2, 800a6b0 <_scanf_chars+0x58>
 800a69a:	2f00      	cmp	r7, #0
 800a69c:	d031      	beq.n	800a702 <_scanf_chars+0xaa>
 800a69e:	e022      	b.n	800a6e6 <_scanf_chars+0x8e>
 800a6a0:	2802      	cmp	r0, #2
 800a6a2:	d120      	bne.n	800a6e6 <_scanf_chars+0x8e>
 800a6a4:	682b      	ldr	r3, [r5, #0]
 800a6a6:	781b      	ldrb	r3, [r3, #0]
 800a6a8:	f813 3009 	ldrb.w	r3, [r3, r9]
 800a6ac:	071b      	lsls	r3, r3, #28
 800a6ae:	d41a      	bmi.n	800a6e6 <_scanf_chars+0x8e>
 800a6b0:	6823      	ldr	r3, [r4, #0]
 800a6b2:	06da      	lsls	r2, r3, #27
 800a6b4:	bf5e      	ittt	pl
 800a6b6:	682b      	ldrpl	r3, [r5, #0]
 800a6b8:	781b      	ldrbpl	r3, [r3, #0]
 800a6ba:	f806 3b01 	strbpl.w	r3, [r6], #1
 800a6be:	682a      	ldr	r2, [r5, #0]
 800a6c0:	686b      	ldr	r3, [r5, #4]
 800a6c2:	3201      	adds	r2, #1
 800a6c4:	602a      	str	r2, [r5, #0]
 800a6c6:	68a2      	ldr	r2, [r4, #8]
 800a6c8:	3b01      	subs	r3, #1
 800a6ca:	3a01      	subs	r2, #1
 800a6cc:	606b      	str	r3, [r5, #4]
 800a6ce:	3701      	adds	r7, #1
 800a6d0:	60a2      	str	r2, [r4, #8]
 800a6d2:	b142      	cbz	r2, 800a6e6 <_scanf_chars+0x8e>
 800a6d4:	2b00      	cmp	r3, #0
 800a6d6:	dcd7      	bgt.n	800a688 <_scanf_chars+0x30>
 800a6d8:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800a6dc:	4629      	mov	r1, r5
 800a6de:	4640      	mov	r0, r8
 800a6e0:	4798      	blx	r3
 800a6e2:	2800      	cmp	r0, #0
 800a6e4:	d0d0      	beq.n	800a688 <_scanf_chars+0x30>
 800a6e6:	6823      	ldr	r3, [r4, #0]
 800a6e8:	f013 0310 	ands.w	r3, r3, #16
 800a6ec:	d105      	bne.n	800a6fa <_scanf_chars+0xa2>
 800a6ee:	68e2      	ldr	r2, [r4, #12]
 800a6f0:	3201      	adds	r2, #1
 800a6f2:	60e2      	str	r2, [r4, #12]
 800a6f4:	69a2      	ldr	r2, [r4, #24]
 800a6f6:	b102      	cbz	r2, 800a6fa <_scanf_chars+0xa2>
 800a6f8:	7033      	strb	r3, [r6, #0]
 800a6fa:	6923      	ldr	r3, [r4, #16]
 800a6fc:	443b      	add	r3, r7
 800a6fe:	6123      	str	r3, [r4, #16]
 800a700:	2000      	movs	r0, #0
 800a702:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a706:	bf00      	nop
 800a708:	0800beb1 	.word	0x0800beb1

0800a70c <_scanf_i>:
 800a70c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a710:	4698      	mov	r8, r3
 800a712:	4b76      	ldr	r3, [pc, #472]	; (800a8ec <_scanf_i+0x1e0>)
 800a714:	460c      	mov	r4, r1
 800a716:	4682      	mov	sl, r0
 800a718:	4616      	mov	r6, r2
 800a71a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800a71e:	b087      	sub	sp, #28
 800a720:	ab03      	add	r3, sp, #12
 800a722:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800a726:	4b72      	ldr	r3, [pc, #456]	; (800a8f0 <_scanf_i+0x1e4>)
 800a728:	69a1      	ldr	r1, [r4, #24]
 800a72a:	4a72      	ldr	r2, [pc, #456]	; (800a8f4 <_scanf_i+0x1e8>)
 800a72c:	2903      	cmp	r1, #3
 800a72e:	bf18      	it	ne
 800a730:	461a      	movne	r2, r3
 800a732:	68a3      	ldr	r3, [r4, #8]
 800a734:	9201      	str	r2, [sp, #4]
 800a736:	1e5a      	subs	r2, r3, #1
 800a738:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800a73c:	bf88      	it	hi
 800a73e:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800a742:	4627      	mov	r7, r4
 800a744:	bf82      	ittt	hi
 800a746:	eb03 0905 	addhi.w	r9, r3, r5
 800a74a:	f240 135d 	movwhi	r3, #349	; 0x15d
 800a74e:	60a3      	strhi	r3, [r4, #8]
 800a750:	f857 3b1c 	ldr.w	r3, [r7], #28
 800a754:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 800a758:	bf98      	it	ls
 800a75a:	f04f 0900 	movls.w	r9, #0
 800a75e:	6023      	str	r3, [r4, #0]
 800a760:	463d      	mov	r5, r7
 800a762:	f04f 0b00 	mov.w	fp, #0
 800a766:	6831      	ldr	r1, [r6, #0]
 800a768:	ab03      	add	r3, sp, #12
 800a76a:	7809      	ldrb	r1, [r1, #0]
 800a76c:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 800a770:	2202      	movs	r2, #2
 800a772:	f7f5 fd35 	bl	80001e0 <memchr>
 800a776:	b328      	cbz	r0, 800a7c4 <_scanf_i+0xb8>
 800a778:	f1bb 0f01 	cmp.w	fp, #1
 800a77c:	d159      	bne.n	800a832 <_scanf_i+0x126>
 800a77e:	6862      	ldr	r2, [r4, #4]
 800a780:	b92a      	cbnz	r2, 800a78e <_scanf_i+0x82>
 800a782:	6822      	ldr	r2, [r4, #0]
 800a784:	2308      	movs	r3, #8
 800a786:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a78a:	6063      	str	r3, [r4, #4]
 800a78c:	6022      	str	r2, [r4, #0]
 800a78e:	6822      	ldr	r2, [r4, #0]
 800a790:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 800a794:	6022      	str	r2, [r4, #0]
 800a796:	68a2      	ldr	r2, [r4, #8]
 800a798:	1e51      	subs	r1, r2, #1
 800a79a:	60a1      	str	r1, [r4, #8]
 800a79c:	b192      	cbz	r2, 800a7c4 <_scanf_i+0xb8>
 800a79e:	6832      	ldr	r2, [r6, #0]
 800a7a0:	1c51      	adds	r1, r2, #1
 800a7a2:	6031      	str	r1, [r6, #0]
 800a7a4:	7812      	ldrb	r2, [r2, #0]
 800a7a6:	f805 2b01 	strb.w	r2, [r5], #1
 800a7aa:	6872      	ldr	r2, [r6, #4]
 800a7ac:	3a01      	subs	r2, #1
 800a7ae:	2a00      	cmp	r2, #0
 800a7b0:	6072      	str	r2, [r6, #4]
 800a7b2:	dc07      	bgt.n	800a7c4 <_scanf_i+0xb8>
 800a7b4:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 800a7b8:	4631      	mov	r1, r6
 800a7ba:	4650      	mov	r0, sl
 800a7bc:	4790      	blx	r2
 800a7be:	2800      	cmp	r0, #0
 800a7c0:	f040 8085 	bne.w	800a8ce <_scanf_i+0x1c2>
 800a7c4:	f10b 0b01 	add.w	fp, fp, #1
 800a7c8:	f1bb 0f03 	cmp.w	fp, #3
 800a7cc:	d1cb      	bne.n	800a766 <_scanf_i+0x5a>
 800a7ce:	6863      	ldr	r3, [r4, #4]
 800a7d0:	b90b      	cbnz	r3, 800a7d6 <_scanf_i+0xca>
 800a7d2:	230a      	movs	r3, #10
 800a7d4:	6063      	str	r3, [r4, #4]
 800a7d6:	6863      	ldr	r3, [r4, #4]
 800a7d8:	4947      	ldr	r1, [pc, #284]	; (800a8f8 <_scanf_i+0x1ec>)
 800a7da:	6960      	ldr	r0, [r4, #20]
 800a7dc:	1ac9      	subs	r1, r1, r3
 800a7de:	f000 f93b 	bl	800aa58 <__sccl>
 800a7e2:	f04f 0b00 	mov.w	fp, #0
 800a7e6:	68a3      	ldr	r3, [r4, #8]
 800a7e8:	6822      	ldr	r2, [r4, #0]
 800a7ea:	2b00      	cmp	r3, #0
 800a7ec:	d03d      	beq.n	800a86a <_scanf_i+0x15e>
 800a7ee:	6831      	ldr	r1, [r6, #0]
 800a7f0:	6960      	ldr	r0, [r4, #20]
 800a7f2:	f891 c000 	ldrb.w	ip, [r1]
 800a7f6:	f810 000c 	ldrb.w	r0, [r0, ip]
 800a7fa:	2800      	cmp	r0, #0
 800a7fc:	d035      	beq.n	800a86a <_scanf_i+0x15e>
 800a7fe:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 800a802:	d124      	bne.n	800a84e <_scanf_i+0x142>
 800a804:	0510      	lsls	r0, r2, #20
 800a806:	d522      	bpl.n	800a84e <_scanf_i+0x142>
 800a808:	f10b 0b01 	add.w	fp, fp, #1
 800a80c:	f1b9 0f00 	cmp.w	r9, #0
 800a810:	d003      	beq.n	800a81a <_scanf_i+0x10e>
 800a812:	3301      	adds	r3, #1
 800a814:	f109 39ff 	add.w	r9, r9, #4294967295
 800a818:	60a3      	str	r3, [r4, #8]
 800a81a:	6873      	ldr	r3, [r6, #4]
 800a81c:	3b01      	subs	r3, #1
 800a81e:	2b00      	cmp	r3, #0
 800a820:	6073      	str	r3, [r6, #4]
 800a822:	dd1b      	ble.n	800a85c <_scanf_i+0x150>
 800a824:	6833      	ldr	r3, [r6, #0]
 800a826:	3301      	adds	r3, #1
 800a828:	6033      	str	r3, [r6, #0]
 800a82a:	68a3      	ldr	r3, [r4, #8]
 800a82c:	3b01      	subs	r3, #1
 800a82e:	60a3      	str	r3, [r4, #8]
 800a830:	e7d9      	b.n	800a7e6 <_scanf_i+0xda>
 800a832:	f1bb 0f02 	cmp.w	fp, #2
 800a836:	d1ae      	bne.n	800a796 <_scanf_i+0x8a>
 800a838:	6822      	ldr	r2, [r4, #0]
 800a83a:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 800a83e:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800a842:	d1bf      	bne.n	800a7c4 <_scanf_i+0xb8>
 800a844:	2310      	movs	r3, #16
 800a846:	6063      	str	r3, [r4, #4]
 800a848:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a84c:	e7a2      	b.n	800a794 <_scanf_i+0x88>
 800a84e:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 800a852:	6022      	str	r2, [r4, #0]
 800a854:	780b      	ldrb	r3, [r1, #0]
 800a856:	f805 3b01 	strb.w	r3, [r5], #1
 800a85a:	e7de      	b.n	800a81a <_scanf_i+0x10e>
 800a85c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800a860:	4631      	mov	r1, r6
 800a862:	4650      	mov	r0, sl
 800a864:	4798      	blx	r3
 800a866:	2800      	cmp	r0, #0
 800a868:	d0df      	beq.n	800a82a <_scanf_i+0x11e>
 800a86a:	6823      	ldr	r3, [r4, #0]
 800a86c:	05db      	lsls	r3, r3, #23
 800a86e:	d50d      	bpl.n	800a88c <_scanf_i+0x180>
 800a870:	42bd      	cmp	r5, r7
 800a872:	d909      	bls.n	800a888 <_scanf_i+0x17c>
 800a874:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800a878:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a87c:	4632      	mov	r2, r6
 800a87e:	4650      	mov	r0, sl
 800a880:	4798      	blx	r3
 800a882:	f105 39ff 	add.w	r9, r5, #4294967295
 800a886:	464d      	mov	r5, r9
 800a888:	42bd      	cmp	r5, r7
 800a88a:	d02d      	beq.n	800a8e8 <_scanf_i+0x1dc>
 800a88c:	6822      	ldr	r2, [r4, #0]
 800a88e:	f012 0210 	ands.w	r2, r2, #16
 800a892:	d113      	bne.n	800a8bc <_scanf_i+0x1b0>
 800a894:	702a      	strb	r2, [r5, #0]
 800a896:	6863      	ldr	r3, [r4, #4]
 800a898:	9e01      	ldr	r6, [sp, #4]
 800a89a:	4639      	mov	r1, r7
 800a89c:	4650      	mov	r0, sl
 800a89e:	47b0      	blx	r6
 800a8a0:	6821      	ldr	r1, [r4, #0]
 800a8a2:	f8d8 3000 	ldr.w	r3, [r8]
 800a8a6:	f011 0f20 	tst.w	r1, #32
 800a8aa:	d013      	beq.n	800a8d4 <_scanf_i+0x1c8>
 800a8ac:	1d1a      	adds	r2, r3, #4
 800a8ae:	f8c8 2000 	str.w	r2, [r8]
 800a8b2:	681b      	ldr	r3, [r3, #0]
 800a8b4:	6018      	str	r0, [r3, #0]
 800a8b6:	68e3      	ldr	r3, [r4, #12]
 800a8b8:	3301      	adds	r3, #1
 800a8ba:	60e3      	str	r3, [r4, #12]
 800a8bc:	1bed      	subs	r5, r5, r7
 800a8be:	44ab      	add	fp, r5
 800a8c0:	6925      	ldr	r5, [r4, #16]
 800a8c2:	445d      	add	r5, fp
 800a8c4:	6125      	str	r5, [r4, #16]
 800a8c6:	2000      	movs	r0, #0
 800a8c8:	b007      	add	sp, #28
 800a8ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a8ce:	f04f 0b00 	mov.w	fp, #0
 800a8d2:	e7ca      	b.n	800a86a <_scanf_i+0x15e>
 800a8d4:	1d1a      	adds	r2, r3, #4
 800a8d6:	f8c8 2000 	str.w	r2, [r8]
 800a8da:	681b      	ldr	r3, [r3, #0]
 800a8dc:	f011 0f01 	tst.w	r1, #1
 800a8e0:	bf14      	ite	ne
 800a8e2:	8018      	strhne	r0, [r3, #0]
 800a8e4:	6018      	streq	r0, [r3, #0]
 800a8e6:	e7e6      	b.n	800a8b6 <_scanf_i+0x1aa>
 800a8e8:	2001      	movs	r0, #1
 800a8ea:	e7ed      	b.n	800a8c8 <_scanf_i+0x1bc>
 800a8ec:	0800b36c 	.word	0x0800b36c
 800a8f0:	0800ac5d 	.word	0x0800ac5d
 800a8f4:	08007795 	.word	0x08007795
 800a8f8:	0800c2a6 	.word	0x0800c2a6

0800a8fc <lflush>:
 800a8fc:	8983      	ldrh	r3, [r0, #12]
 800a8fe:	f003 0309 	and.w	r3, r3, #9
 800a902:	2b09      	cmp	r3, #9
 800a904:	d101      	bne.n	800a90a <lflush+0xe>
 800a906:	f7fd bf43 	b.w	8008790 <fflush>
 800a90a:	2000      	movs	r0, #0
 800a90c:	4770      	bx	lr
	...

0800a910 <__srefill_r>:
 800a910:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a912:	460c      	mov	r4, r1
 800a914:	4605      	mov	r5, r0
 800a916:	b118      	cbz	r0, 800a920 <__srefill_r+0x10>
 800a918:	6983      	ldr	r3, [r0, #24]
 800a91a:	b90b      	cbnz	r3, 800a920 <__srefill_r+0x10>
 800a91c:	f7fd ffa2 	bl	8008864 <__sinit>
 800a920:	4b3b      	ldr	r3, [pc, #236]	; (800aa10 <__srefill_r+0x100>)
 800a922:	429c      	cmp	r4, r3
 800a924:	d10a      	bne.n	800a93c <__srefill_r+0x2c>
 800a926:	686c      	ldr	r4, [r5, #4]
 800a928:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a92c:	2300      	movs	r3, #0
 800a92e:	6063      	str	r3, [r4, #4]
 800a930:	89a3      	ldrh	r3, [r4, #12]
 800a932:	069e      	lsls	r6, r3, #26
 800a934:	d50c      	bpl.n	800a950 <__srefill_r+0x40>
 800a936:	f04f 30ff 	mov.w	r0, #4294967295
 800a93a:	e066      	b.n	800aa0a <__srefill_r+0xfa>
 800a93c:	4b35      	ldr	r3, [pc, #212]	; (800aa14 <__srefill_r+0x104>)
 800a93e:	429c      	cmp	r4, r3
 800a940:	d101      	bne.n	800a946 <__srefill_r+0x36>
 800a942:	68ac      	ldr	r4, [r5, #8]
 800a944:	e7f0      	b.n	800a928 <__srefill_r+0x18>
 800a946:	4b34      	ldr	r3, [pc, #208]	; (800aa18 <__srefill_r+0x108>)
 800a948:	429c      	cmp	r4, r3
 800a94a:	bf08      	it	eq
 800a94c:	68ec      	ldreq	r4, [r5, #12]
 800a94e:	e7eb      	b.n	800a928 <__srefill_r+0x18>
 800a950:	0758      	lsls	r0, r3, #29
 800a952:	d448      	bmi.n	800a9e6 <__srefill_r+0xd6>
 800a954:	06d9      	lsls	r1, r3, #27
 800a956:	d405      	bmi.n	800a964 <__srefill_r+0x54>
 800a958:	2309      	movs	r3, #9
 800a95a:	602b      	str	r3, [r5, #0]
 800a95c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800a960:	81a3      	strh	r3, [r4, #12]
 800a962:	e7e8      	b.n	800a936 <__srefill_r+0x26>
 800a964:	071a      	lsls	r2, r3, #28
 800a966:	d50b      	bpl.n	800a980 <__srefill_r+0x70>
 800a968:	4621      	mov	r1, r4
 800a96a:	4628      	mov	r0, r5
 800a96c:	f7fd fed4 	bl	8008718 <_fflush_r>
 800a970:	2800      	cmp	r0, #0
 800a972:	d1e0      	bne.n	800a936 <__srefill_r+0x26>
 800a974:	89a3      	ldrh	r3, [r4, #12]
 800a976:	60a0      	str	r0, [r4, #8]
 800a978:	f023 0308 	bic.w	r3, r3, #8
 800a97c:	81a3      	strh	r3, [r4, #12]
 800a97e:	61a0      	str	r0, [r4, #24]
 800a980:	89a3      	ldrh	r3, [r4, #12]
 800a982:	f043 0304 	orr.w	r3, r3, #4
 800a986:	81a3      	strh	r3, [r4, #12]
 800a988:	6923      	ldr	r3, [r4, #16]
 800a98a:	b91b      	cbnz	r3, 800a994 <__srefill_r+0x84>
 800a98c:	4621      	mov	r1, r4
 800a98e:	4628      	mov	r0, r5
 800a990:	f7fe fbbe 	bl	8009110 <__smakebuf_r>
 800a994:	89a6      	ldrh	r6, [r4, #12]
 800a996:	f9b4 700c 	ldrsh.w	r7, [r4, #12]
 800a99a:	07b3      	lsls	r3, r6, #30
 800a99c:	d00f      	beq.n	800a9be <__srefill_r+0xae>
 800a99e:	2301      	movs	r3, #1
 800a9a0:	81a3      	strh	r3, [r4, #12]
 800a9a2:	4b1e      	ldr	r3, [pc, #120]	; (800aa1c <__srefill_r+0x10c>)
 800a9a4:	491e      	ldr	r1, [pc, #120]	; (800aa20 <__srefill_r+0x110>)
 800a9a6:	6818      	ldr	r0, [r3, #0]
 800a9a8:	f006 0609 	and.w	r6, r6, #9
 800a9ac:	f7fd ffd8 	bl	8008960 <_fwalk>
 800a9b0:	2e09      	cmp	r6, #9
 800a9b2:	81a7      	strh	r7, [r4, #12]
 800a9b4:	d103      	bne.n	800a9be <__srefill_r+0xae>
 800a9b6:	4621      	mov	r1, r4
 800a9b8:	4628      	mov	r0, r5
 800a9ba:	f7fd fe27 	bl	800860c <__sflush_r>
 800a9be:	6922      	ldr	r2, [r4, #16]
 800a9c0:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800a9c2:	6963      	ldr	r3, [r4, #20]
 800a9c4:	6a21      	ldr	r1, [r4, #32]
 800a9c6:	6022      	str	r2, [r4, #0]
 800a9c8:	4628      	mov	r0, r5
 800a9ca:	47b0      	blx	r6
 800a9cc:	2800      	cmp	r0, #0
 800a9ce:	6060      	str	r0, [r4, #4]
 800a9d0:	dc1c      	bgt.n	800aa0c <__srefill_r+0xfc>
 800a9d2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a9d6:	bf17      	itett	ne
 800a9d8:	2200      	movne	r2, #0
 800a9da:	f043 0320 	orreq.w	r3, r3, #32
 800a9de:	6062      	strne	r2, [r4, #4]
 800a9e0:	f043 0340 	orrne.w	r3, r3, #64	; 0x40
 800a9e4:	e7bc      	b.n	800a960 <__srefill_r+0x50>
 800a9e6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a9e8:	2900      	cmp	r1, #0
 800a9ea:	d0cd      	beq.n	800a988 <__srefill_r+0x78>
 800a9ec:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a9f0:	4299      	cmp	r1, r3
 800a9f2:	d002      	beq.n	800a9fa <__srefill_r+0xea>
 800a9f4:	4628      	mov	r0, r5
 800a9f6:	f7ff f8cb 	bl	8009b90 <_free_r>
 800a9fa:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a9fc:	6063      	str	r3, [r4, #4]
 800a9fe:	2000      	movs	r0, #0
 800aa00:	6360      	str	r0, [r4, #52]	; 0x34
 800aa02:	2b00      	cmp	r3, #0
 800aa04:	d0c0      	beq.n	800a988 <__srefill_r+0x78>
 800aa06:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800aa08:	6023      	str	r3, [r4, #0]
 800aa0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800aa0c:	2000      	movs	r0, #0
 800aa0e:	e7fc      	b.n	800aa0a <__srefill_r+0xfa>
 800aa10:	0800c064 	.word	0x0800c064
 800aa14:	0800c084 	.word	0x0800c084
 800aa18:	0800c044 	.word	0x0800c044
 800aa1c:	0800be24 	.word	0x0800be24
 800aa20:	0800a8fd 	.word	0x0800a8fd
 800aa24:	00000000 	.word	0x00000000

0800aa28 <nan>:
 800aa28:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800aa30 <nan+0x8>
 800aa2c:	4770      	bx	lr
 800aa2e:	bf00      	nop
 800aa30:	00000000 	.word	0x00000000
 800aa34:	7ff80000 	.word	0x7ff80000

0800aa38 <_sbrk_r>:
 800aa38:	b538      	push	{r3, r4, r5, lr}
 800aa3a:	4d06      	ldr	r5, [pc, #24]	; (800aa54 <_sbrk_r+0x1c>)
 800aa3c:	2300      	movs	r3, #0
 800aa3e:	4604      	mov	r4, r0
 800aa40:	4608      	mov	r0, r1
 800aa42:	602b      	str	r3, [r5, #0]
 800aa44:	f7f7 fcf0 	bl	8002428 <_sbrk>
 800aa48:	1c43      	adds	r3, r0, #1
 800aa4a:	d102      	bne.n	800aa52 <_sbrk_r+0x1a>
 800aa4c:	682b      	ldr	r3, [r5, #0]
 800aa4e:	b103      	cbz	r3, 800aa52 <_sbrk_r+0x1a>
 800aa50:	6023      	str	r3, [r4, #0]
 800aa52:	bd38      	pop	{r3, r4, r5, pc}
 800aa54:	20000344 	.word	0x20000344

0800aa58 <__sccl>:
 800aa58:	b570      	push	{r4, r5, r6, lr}
 800aa5a:	780b      	ldrb	r3, [r1, #0]
 800aa5c:	4604      	mov	r4, r0
 800aa5e:	2b5e      	cmp	r3, #94	; 0x5e
 800aa60:	bf0b      	itete	eq
 800aa62:	784b      	ldrbeq	r3, [r1, #1]
 800aa64:	1c48      	addne	r0, r1, #1
 800aa66:	1c88      	addeq	r0, r1, #2
 800aa68:	2200      	movne	r2, #0
 800aa6a:	bf08      	it	eq
 800aa6c:	2201      	moveq	r2, #1
 800aa6e:	1e61      	subs	r1, r4, #1
 800aa70:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 800aa74:	f801 2f01 	strb.w	r2, [r1, #1]!
 800aa78:	42a9      	cmp	r1, r5
 800aa7a:	d1fb      	bne.n	800aa74 <__sccl+0x1c>
 800aa7c:	b90b      	cbnz	r3, 800aa82 <__sccl+0x2a>
 800aa7e:	3801      	subs	r0, #1
 800aa80:	bd70      	pop	{r4, r5, r6, pc}
 800aa82:	f082 0201 	eor.w	r2, r2, #1
 800aa86:	54e2      	strb	r2, [r4, r3]
 800aa88:	4605      	mov	r5, r0
 800aa8a:	4628      	mov	r0, r5
 800aa8c:	f810 1b01 	ldrb.w	r1, [r0], #1
 800aa90:	292d      	cmp	r1, #45	; 0x2d
 800aa92:	d006      	beq.n	800aaa2 <__sccl+0x4a>
 800aa94:	295d      	cmp	r1, #93	; 0x5d
 800aa96:	d0f3      	beq.n	800aa80 <__sccl+0x28>
 800aa98:	b909      	cbnz	r1, 800aa9e <__sccl+0x46>
 800aa9a:	4628      	mov	r0, r5
 800aa9c:	e7f0      	b.n	800aa80 <__sccl+0x28>
 800aa9e:	460b      	mov	r3, r1
 800aaa0:	e7f1      	b.n	800aa86 <__sccl+0x2e>
 800aaa2:	786e      	ldrb	r6, [r5, #1]
 800aaa4:	2e5d      	cmp	r6, #93	; 0x5d
 800aaa6:	d0fa      	beq.n	800aa9e <__sccl+0x46>
 800aaa8:	42b3      	cmp	r3, r6
 800aaaa:	dcf8      	bgt.n	800aa9e <__sccl+0x46>
 800aaac:	3502      	adds	r5, #2
 800aaae:	4619      	mov	r1, r3
 800aab0:	3101      	adds	r1, #1
 800aab2:	428e      	cmp	r6, r1
 800aab4:	5462      	strb	r2, [r4, r1]
 800aab6:	dcfb      	bgt.n	800aab0 <__sccl+0x58>
 800aab8:	1af1      	subs	r1, r6, r3
 800aaba:	3901      	subs	r1, #1
 800aabc:	1c58      	adds	r0, r3, #1
 800aabe:	42b3      	cmp	r3, r6
 800aac0:	bfa8      	it	ge
 800aac2:	2100      	movge	r1, #0
 800aac4:	1843      	adds	r3, r0, r1
 800aac6:	e7e0      	b.n	800aa8a <__sccl+0x32>

0800aac8 <__sread>:
 800aac8:	b510      	push	{r4, lr}
 800aaca:	460c      	mov	r4, r1
 800aacc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800aad0:	f000 fa82 	bl	800afd8 <_read_r>
 800aad4:	2800      	cmp	r0, #0
 800aad6:	bfab      	itete	ge
 800aad8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800aada:	89a3      	ldrhlt	r3, [r4, #12]
 800aadc:	181b      	addge	r3, r3, r0
 800aade:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800aae2:	bfac      	ite	ge
 800aae4:	6563      	strge	r3, [r4, #84]	; 0x54
 800aae6:	81a3      	strhlt	r3, [r4, #12]
 800aae8:	bd10      	pop	{r4, pc}

0800aaea <__swrite>:
 800aaea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aaee:	461f      	mov	r7, r3
 800aaf0:	898b      	ldrh	r3, [r1, #12]
 800aaf2:	05db      	lsls	r3, r3, #23
 800aaf4:	4605      	mov	r5, r0
 800aaf6:	460c      	mov	r4, r1
 800aaf8:	4616      	mov	r6, r2
 800aafa:	d505      	bpl.n	800ab08 <__swrite+0x1e>
 800aafc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ab00:	2302      	movs	r3, #2
 800ab02:	2200      	movs	r2, #0
 800ab04:	f000 fa00 	bl	800af08 <_lseek_r>
 800ab08:	89a3      	ldrh	r3, [r4, #12]
 800ab0a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ab0e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800ab12:	81a3      	strh	r3, [r4, #12]
 800ab14:	4632      	mov	r2, r6
 800ab16:	463b      	mov	r3, r7
 800ab18:	4628      	mov	r0, r5
 800ab1a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ab1e:	f000 b97f 	b.w	800ae20 <_write_r>

0800ab22 <__sseek>:
 800ab22:	b510      	push	{r4, lr}
 800ab24:	460c      	mov	r4, r1
 800ab26:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ab2a:	f000 f9ed 	bl	800af08 <_lseek_r>
 800ab2e:	1c43      	adds	r3, r0, #1
 800ab30:	89a3      	ldrh	r3, [r4, #12]
 800ab32:	bf15      	itete	ne
 800ab34:	6560      	strne	r0, [r4, #84]	; 0x54
 800ab36:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800ab3a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800ab3e:	81a3      	strheq	r3, [r4, #12]
 800ab40:	bf18      	it	ne
 800ab42:	81a3      	strhne	r3, [r4, #12]
 800ab44:	bd10      	pop	{r4, pc}

0800ab46 <__sclose>:
 800ab46:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ab4a:	f000 b999 	b.w	800ae80 <_close_r>

0800ab4e <strncmp>:
 800ab4e:	b510      	push	{r4, lr}
 800ab50:	b17a      	cbz	r2, 800ab72 <strncmp+0x24>
 800ab52:	4603      	mov	r3, r0
 800ab54:	3901      	subs	r1, #1
 800ab56:	1884      	adds	r4, r0, r2
 800ab58:	f813 0b01 	ldrb.w	r0, [r3], #1
 800ab5c:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800ab60:	4290      	cmp	r0, r2
 800ab62:	d101      	bne.n	800ab68 <strncmp+0x1a>
 800ab64:	42a3      	cmp	r3, r4
 800ab66:	d101      	bne.n	800ab6c <strncmp+0x1e>
 800ab68:	1a80      	subs	r0, r0, r2
 800ab6a:	bd10      	pop	{r4, pc}
 800ab6c:	2800      	cmp	r0, #0
 800ab6e:	d1f3      	bne.n	800ab58 <strncmp+0xa>
 800ab70:	e7fa      	b.n	800ab68 <strncmp+0x1a>
 800ab72:	4610      	mov	r0, r2
 800ab74:	e7f9      	b.n	800ab6a <strncmp+0x1c>
	...

0800ab78 <_strtoul_l.constprop.0>:
 800ab78:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ab7c:	4f36      	ldr	r7, [pc, #216]	; (800ac58 <_strtoul_l.constprop.0+0xe0>)
 800ab7e:	4686      	mov	lr, r0
 800ab80:	460d      	mov	r5, r1
 800ab82:	4628      	mov	r0, r5
 800ab84:	f815 4b01 	ldrb.w	r4, [r5], #1
 800ab88:	5de6      	ldrb	r6, [r4, r7]
 800ab8a:	f016 0608 	ands.w	r6, r6, #8
 800ab8e:	d1f8      	bne.n	800ab82 <_strtoul_l.constprop.0+0xa>
 800ab90:	2c2d      	cmp	r4, #45	; 0x2d
 800ab92:	d12f      	bne.n	800abf4 <_strtoul_l.constprop.0+0x7c>
 800ab94:	782c      	ldrb	r4, [r5, #0]
 800ab96:	2601      	movs	r6, #1
 800ab98:	1c85      	adds	r5, r0, #2
 800ab9a:	2b00      	cmp	r3, #0
 800ab9c:	d057      	beq.n	800ac4e <_strtoul_l.constprop.0+0xd6>
 800ab9e:	2b10      	cmp	r3, #16
 800aba0:	d109      	bne.n	800abb6 <_strtoul_l.constprop.0+0x3e>
 800aba2:	2c30      	cmp	r4, #48	; 0x30
 800aba4:	d107      	bne.n	800abb6 <_strtoul_l.constprop.0+0x3e>
 800aba6:	7828      	ldrb	r0, [r5, #0]
 800aba8:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800abac:	2858      	cmp	r0, #88	; 0x58
 800abae:	d149      	bne.n	800ac44 <_strtoul_l.constprop.0+0xcc>
 800abb0:	786c      	ldrb	r4, [r5, #1]
 800abb2:	2310      	movs	r3, #16
 800abb4:	3502      	adds	r5, #2
 800abb6:	f04f 38ff 	mov.w	r8, #4294967295
 800abba:	2700      	movs	r7, #0
 800abbc:	fbb8 f8f3 	udiv	r8, r8, r3
 800abc0:	fb03 f908 	mul.w	r9, r3, r8
 800abc4:	ea6f 0909 	mvn.w	r9, r9
 800abc8:	4638      	mov	r0, r7
 800abca:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800abce:	f1bc 0f09 	cmp.w	ip, #9
 800abd2:	d814      	bhi.n	800abfe <_strtoul_l.constprop.0+0x86>
 800abd4:	4664      	mov	r4, ip
 800abd6:	42a3      	cmp	r3, r4
 800abd8:	dd22      	ble.n	800ac20 <_strtoul_l.constprop.0+0xa8>
 800abda:	2f00      	cmp	r7, #0
 800abdc:	db1d      	blt.n	800ac1a <_strtoul_l.constprop.0+0xa2>
 800abde:	4580      	cmp	r8, r0
 800abe0:	d31b      	bcc.n	800ac1a <_strtoul_l.constprop.0+0xa2>
 800abe2:	d101      	bne.n	800abe8 <_strtoul_l.constprop.0+0x70>
 800abe4:	45a1      	cmp	r9, r4
 800abe6:	db18      	blt.n	800ac1a <_strtoul_l.constprop.0+0xa2>
 800abe8:	fb00 4003 	mla	r0, r0, r3, r4
 800abec:	2701      	movs	r7, #1
 800abee:	f815 4b01 	ldrb.w	r4, [r5], #1
 800abf2:	e7ea      	b.n	800abca <_strtoul_l.constprop.0+0x52>
 800abf4:	2c2b      	cmp	r4, #43	; 0x2b
 800abf6:	bf04      	itt	eq
 800abf8:	782c      	ldrbeq	r4, [r5, #0]
 800abfa:	1c85      	addeq	r5, r0, #2
 800abfc:	e7cd      	b.n	800ab9a <_strtoul_l.constprop.0+0x22>
 800abfe:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800ac02:	f1bc 0f19 	cmp.w	ip, #25
 800ac06:	d801      	bhi.n	800ac0c <_strtoul_l.constprop.0+0x94>
 800ac08:	3c37      	subs	r4, #55	; 0x37
 800ac0a:	e7e4      	b.n	800abd6 <_strtoul_l.constprop.0+0x5e>
 800ac0c:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800ac10:	f1bc 0f19 	cmp.w	ip, #25
 800ac14:	d804      	bhi.n	800ac20 <_strtoul_l.constprop.0+0xa8>
 800ac16:	3c57      	subs	r4, #87	; 0x57
 800ac18:	e7dd      	b.n	800abd6 <_strtoul_l.constprop.0+0x5e>
 800ac1a:	f04f 37ff 	mov.w	r7, #4294967295
 800ac1e:	e7e6      	b.n	800abee <_strtoul_l.constprop.0+0x76>
 800ac20:	2f00      	cmp	r7, #0
 800ac22:	da07      	bge.n	800ac34 <_strtoul_l.constprop.0+0xbc>
 800ac24:	2322      	movs	r3, #34	; 0x22
 800ac26:	f8ce 3000 	str.w	r3, [lr]
 800ac2a:	f04f 30ff 	mov.w	r0, #4294967295
 800ac2e:	b932      	cbnz	r2, 800ac3e <_strtoul_l.constprop.0+0xc6>
 800ac30:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ac34:	b106      	cbz	r6, 800ac38 <_strtoul_l.constprop.0+0xc0>
 800ac36:	4240      	negs	r0, r0
 800ac38:	2a00      	cmp	r2, #0
 800ac3a:	d0f9      	beq.n	800ac30 <_strtoul_l.constprop.0+0xb8>
 800ac3c:	b107      	cbz	r7, 800ac40 <_strtoul_l.constprop.0+0xc8>
 800ac3e:	1e69      	subs	r1, r5, #1
 800ac40:	6011      	str	r1, [r2, #0]
 800ac42:	e7f5      	b.n	800ac30 <_strtoul_l.constprop.0+0xb8>
 800ac44:	2430      	movs	r4, #48	; 0x30
 800ac46:	2b00      	cmp	r3, #0
 800ac48:	d1b5      	bne.n	800abb6 <_strtoul_l.constprop.0+0x3e>
 800ac4a:	2308      	movs	r3, #8
 800ac4c:	e7b3      	b.n	800abb6 <_strtoul_l.constprop.0+0x3e>
 800ac4e:	2c30      	cmp	r4, #48	; 0x30
 800ac50:	d0a9      	beq.n	800aba6 <_strtoul_l.constprop.0+0x2e>
 800ac52:	230a      	movs	r3, #10
 800ac54:	e7af      	b.n	800abb6 <_strtoul_l.constprop.0+0x3e>
 800ac56:	bf00      	nop
 800ac58:	0800beb1 	.word	0x0800beb1

0800ac5c <_strtoul_r>:
 800ac5c:	f7ff bf8c 	b.w	800ab78 <_strtoul_l.constprop.0>

0800ac60 <__submore>:
 800ac60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ac64:	460c      	mov	r4, r1
 800ac66:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800ac68:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ac6c:	4299      	cmp	r1, r3
 800ac6e:	d11d      	bne.n	800acac <__submore+0x4c>
 800ac70:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800ac74:	f7fe fff8 	bl	8009c68 <_malloc_r>
 800ac78:	b918      	cbnz	r0, 800ac82 <__submore+0x22>
 800ac7a:	f04f 30ff 	mov.w	r0, #4294967295
 800ac7e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ac82:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ac86:	63a3      	str	r3, [r4, #56]	; 0x38
 800ac88:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 800ac8c:	6360      	str	r0, [r4, #52]	; 0x34
 800ac8e:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 800ac92:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800ac96:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 800ac9a:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800ac9e:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 800aca2:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 800aca6:	6020      	str	r0, [r4, #0]
 800aca8:	2000      	movs	r0, #0
 800acaa:	e7e8      	b.n	800ac7e <__submore+0x1e>
 800acac:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 800acae:	0077      	lsls	r7, r6, #1
 800acb0:	463a      	mov	r2, r7
 800acb2:	f000 f961 	bl	800af78 <_realloc_r>
 800acb6:	4605      	mov	r5, r0
 800acb8:	2800      	cmp	r0, #0
 800acba:	d0de      	beq.n	800ac7a <__submore+0x1a>
 800acbc:	eb00 0806 	add.w	r8, r0, r6
 800acc0:	4601      	mov	r1, r0
 800acc2:	4632      	mov	r2, r6
 800acc4:	4640      	mov	r0, r8
 800acc6:	f7fe fa7d 	bl	80091c4 <memcpy>
 800acca:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 800acce:	f8c4 8000 	str.w	r8, [r4]
 800acd2:	e7e9      	b.n	800aca8 <__submore+0x48>

0800acd4 <_ungetc_r>:
 800acd4:	b570      	push	{r4, r5, r6, lr}
 800acd6:	4614      	mov	r4, r2
 800acd8:	1c4a      	adds	r2, r1, #1
 800acda:	4606      	mov	r6, r0
 800acdc:	460d      	mov	r5, r1
 800acde:	d103      	bne.n	800ace8 <_ungetc_r+0x14>
 800ace0:	f04f 35ff 	mov.w	r5, #4294967295
 800ace4:	4628      	mov	r0, r5
 800ace6:	bd70      	pop	{r4, r5, r6, pc}
 800ace8:	b118      	cbz	r0, 800acf2 <_ungetc_r+0x1e>
 800acea:	6983      	ldr	r3, [r0, #24]
 800acec:	b90b      	cbnz	r3, 800acf2 <_ungetc_r+0x1e>
 800acee:	f7fd fdb9 	bl	8008864 <__sinit>
 800acf2:	4b41      	ldr	r3, [pc, #260]	; (800adf8 <_ungetc_r+0x124>)
 800acf4:	429c      	cmp	r4, r3
 800acf6:	d11d      	bne.n	800ad34 <_ungetc_r+0x60>
 800acf8:	6874      	ldr	r4, [r6, #4]
 800acfa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800acfc:	07db      	lsls	r3, r3, #31
 800acfe:	d405      	bmi.n	800ad0c <_ungetc_r+0x38>
 800ad00:	89a3      	ldrh	r3, [r4, #12]
 800ad02:	0598      	lsls	r0, r3, #22
 800ad04:	d402      	bmi.n	800ad0c <_ungetc_r+0x38>
 800ad06:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ad08:	f7fe f9db 	bl	80090c2 <__retarget_lock_acquire_recursive>
 800ad0c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ad10:	f023 0320 	bic.w	r3, r3, #32
 800ad14:	0759      	lsls	r1, r3, #29
 800ad16:	81a3      	strh	r3, [r4, #12]
 800ad18:	b29a      	uxth	r2, r3
 800ad1a:	d42d      	bmi.n	800ad78 <_ungetc_r+0xa4>
 800ad1c:	06d3      	lsls	r3, r2, #27
 800ad1e:	d413      	bmi.n	800ad48 <_ungetc_r+0x74>
 800ad20:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ad22:	07dd      	lsls	r5, r3, #31
 800ad24:	d4dc      	bmi.n	800ace0 <_ungetc_r+0xc>
 800ad26:	f412 7f00 	tst.w	r2, #512	; 0x200
 800ad2a:	d1d9      	bne.n	800ace0 <_ungetc_r+0xc>
 800ad2c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ad2e:	f7fe f9c9 	bl	80090c4 <__retarget_lock_release_recursive>
 800ad32:	e7d5      	b.n	800ace0 <_ungetc_r+0xc>
 800ad34:	4b31      	ldr	r3, [pc, #196]	; (800adfc <_ungetc_r+0x128>)
 800ad36:	429c      	cmp	r4, r3
 800ad38:	d101      	bne.n	800ad3e <_ungetc_r+0x6a>
 800ad3a:	68b4      	ldr	r4, [r6, #8]
 800ad3c:	e7dd      	b.n	800acfa <_ungetc_r+0x26>
 800ad3e:	4b30      	ldr	r3, [pc, #192]	; (800ae00 <_ungetc_r+0x12c>)
 800ad40:	429c      	cmp	r4, r3
 800ad42:	bf08      	it	eq
 800ad44:	68f4      	ldreq	r4, [r6, #12]
 800ad46:	e7d8      	b.n	800acfa <_ungetc_r+0x26>
 800ad48:	0710      	lsls	r0, r2, #28
 800ad4a:	d511      	bpl.n	800ad70 <_ungetc_r+0x9c>
 800ad4c:	4621      	mov	r1, r4
 800ad4e:	4630      	mov	r0, r6
 800ad50:	f7fd fce2 	bl	8008718 <_fflush_r>
 800ad54:	b130      	cbz	r0, 800ad64 <_ungetc_r+0x90>
 800ad56:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ad58:	07d9      	lsls	r1, r3, #31
 800ad5a:	d4c1      	bmi.n	800ace0 <_ungetc_r+0xc>
 800ad5c:	89a3      	ldrh	r3, [r4, #12]
 800ad5e:	f413 7f00 	tst.w	r3, #512	; 0x200
 800ad62:	e7e2      	b.n	800ad2a <_ungetc_r+0x56>
 800ad64:	89a3      	ldrh	r3, [r4, #12]
 800ad66:	60a0      	str	r0, [r4, #8]
 800ad68:	f023 0308 	bic.w	r3, r3, #8
 800ad6c:	81a3      	strh	r3, [r4, #12]
 800ad6e:	61a0      	str	r0, [r4, #24]
 800ad70:	89a3      	ldrh	r3, [r4, #12]
 800ad72:	f043 0304 	orr.w	r3, r3, #4
 800ad76:	81a3      	strh	r3, [r4, #12]
 800ad78:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800ad7a:	6862      	ldr	r2, [r4, #4]
 800ad7c:	b2ed      	uxtb	r5, r5
 800ad7e:	b1d3      	cbz	r3, 800adb6 <_ungetc_r+0xe2>
 800ad80:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800ad82:	4293      	cmp	r3, r2
 800ad84:	dc05      	bgt.n	800ad92 <_ungetc_r+0xbe>
 800ad86:	4621      	mov	r1, r4
 800ad88:	4630      	mov	r0, r6
 800ad8a:	f7ff ff69 	bl	800ac60 <__submore>
 800ad8e:	2800      	cmp	r0, #0
 800ad90:	d1e1      	bne.n	800ad56 <_ungetc_r+0x82>
 800ad92:	6823      	ldr	r3, [r4, #0]
 800ad94:	1e5a      	subs	r2, r3, #1
 800ad96:	6022      	str	r2, [r4, #0]
 800ad98:	f803 5c01 	strb.w	r5, [r3, #-1]
 800ad9c:	6863      	ldr	r3, [r4, #4]
 800ad9e:	3301      	adds	r3, #1
 800ada0:	6063      	str	r3, [r4, #4]
 800ada2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ada4:	07da      	lsls	r2, r3, #31
 800ada6:	d49d      	bmi.n	800ace4 <_ungetc_r+0x10>
 800ada8:	89a3      	ldrh	r3, [r4, #12]
 800adaa:	059b      	lsls	r3, r3, #22
 800adac:	d49a      	bmi.n	800ace4 <_ungetc_r+0x10>
 800adae:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800adb0:	f7fe f988 	bl	80090c4 <__retarget_lock_release_recursive>
 800adb4:	e796      	b.n	800ace4 <_ungetc_r+0x10>
 800adb6:	6e61      	ldr	r1, [r4, #100]	; 0x64
 800adb8:	6920      	ldr	r0, [r4, #16]
 800adba:	6823      	ldr	r3, [r4, #0]
 800adbc:	f001 0101 	and.w	r1, r1, #1
 800adc0:	b160      	cbz	r0, 800addc <_ungetc_r+0x108>
 800adc2:	4298      	cmp	r0, r3
 800adc4:	d20a      	bcs.n	800addc <_ungetc_r+0x108>
 800adc6:	f813 0c01 	ldrb.w	r0, [r3, #-1]
 800adca:	42a8      	cmp	r0, r5
 800adcc:	d106      	bne.n	800addc <_ungetc_r+0x108>
 800adce:	3b01      	subs	r3, #1
 800add0:	3201      	adds	r2, #1
 800add2:	6023      	str	r3, [r4, #0]
 800add4:	6062      	str	r2, [r4, #4]
 800add6:	2900      	cmp	r1, #0
 800add8:	d184      	bne.n	800ace4 <_ungetc_r+0x10>
 800adda:	e7e5      	b.n	800ada8 <_ungetc_r+0xd4>
 800addc:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 800ade0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ade4:	6363      	str	r3, [r4, #52]	; 0x34
 800ade6:	2303      	movs	r3, #3
 800ade8:	63a3      	str	r3, [r4, #56]	; 0x38
 800adea:	4623      	mov	r3, r4
 800adec:	f803 5f46 	strb.w	r5, [r3, #70]!
 800adf0:	6023      	str	r3, [r4, #0]
 800adf2:	2301      	movs	r3, #1
 800adf4:	6063      	str	r3, [r4, #4]
 800adf6:	e7ee      	b.n	800add6 <_ungetc_r+0x102>
 800adf8:	0800c064 	.word	0x0800c064
 800adfc:	0800c084 	.word	0x0800c084
 800ae00:	0800c044 	.word	0x0800c044

0800ae04 <__ascii_wctomb>:
 800ae04:	b149      	cbz	r1, 800ae1a <__ascii_wctomb+0x16>
 800ae06:	2aff      	cmp	r2, #255	; 0xff
 800ae08:	bf85      	ittet	hi
 800ae0a:	238a      	movhi	r3, #138	; 0x8a
 800ae0c:	6003      	strhi	r3, [r0, #0]
 800ae0e:	700a      	strbls	r2, [r1, #0]
 800ae10:	f04f 30ff 	movhi.w	r0, #4294967295
 800ae14:	bf98      	it	ls
 800ae16:	2001      	movls	r0, #1
 800ae18:	4770      	bx	lr
 800ae1a:	4608      	mov	r0, r1
 800ae1c:	4770      	bx	lr
	...

0800ae20 <_write_r>:
 800ae20:	b538      	push	{r3, r4, r5, lr}
 800ae22:	4d07      	ldr	r5, [pc, #28]	; (800ae40 <_write_r+0x20>)
 800ae24:	4604      	mov	r4, r0
 800ae26:	4608      	mov	r0, r1
 800ae28:	4611      	mov	r1, r2
 800ae2a:	2200      	movs	r2, #0
 800ae2c:	602a      	str	r2, [r5, #0]
 800ae2e:	461a      	mov	r2, r3
 800ae30:	f7f7 faa4 	bl	800237c <_write>
 800ae34:	1c43      	adds	r3, r0, #1
 800ae36:	d102      	bne.n	800ae3e <_write_r+0x1e>
 800ae38:	682b      	ldr	r3, [r5, #0]
 800ae3a:	b103      	cbz	r3, 800ae3e <_write_r+0x1e>
 800ae3c:	6023      	str	r3, [r4, #0]
 800ae3e:	bd38      	pop	{r3, r4, r5, pc}
 800ae40:	20000344 	.word	0x20000344

0800ae44 <__assert_func>:
 800ae44:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ae46:	4614      	mov	r4, r2
 800ae48:	461a      	mov	r2, r3
 800ae4a:	4b09      	ldr	r3, [pc, #36]	; (800ae70 <__assert_func+0x2c>)
 800ae4c:	681b      	ldr	r3, [r3, #0]
 800ae4e:	4605      	mov	r5, r0
 800ae50:	68d8      	ldr	r0, [r3, #12]
 800ae52:	b14c      	cbz	r4, 800ae68 <__assert_func+0x24>
 800ae54:	4b07      	ldr	r3, [pc, #28]	; (800ae74 <__assert_func+0x30>)
 800ae56:	9100      	str	r1, [sp, #0]
 800ae58:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800ae5c:	4906      	ldr	r1, [pc, #24]	; (800ae78 <__assert_func+0x34>)
 800ae5e:	462b      	mov	r3, r5
 800ae60:	f000 f81e 	bl	800aea0 <fiprintf>
 800ae64:	f000 f8ca 	bl	800affc <abort>
 800ae68:	4b04      	ldr	r3, [pc, #16]	; (800ae7c <__assert_func+0x38>)
 800ae6a:	461c      	mov	r4, r3
 800ae6c:	e7f3      	b.n	800ae56 <__assert_func+0x12>
 800ae6e:	bf00      	nop
 800ae70:	2000000c 	.word	0x2000000c
 800ae74:	0800c2a8 	.word	0x0800c2a8
 800ae78:	0800c2b5 	.word	0x0800c2b5
 800ae7c:	0800c2e3 	.word	0x0800c2e3

0800ae80 <_close_r>:
 800ae80:	b538      	push	{r3, r4, r5, lr}
 800ae82:	4d06      	ldr	r5, [pc, #24]	; (800ae9c <_close_r+0x1c>)
 800ae84:	2300      	movs	r3, #0
 800ae86:	4604      	mov	r4, r0
 800ae88:	4608      	mov	r0, r1
 800ae8a:	602b      	str	r3, [r5, #0]
 800ae8c:	f7f7 fa98 	bl	80023c0 <_close>
 800ae90:	1c43      	adds	r3, r0, #1
 800ae92:	d102      	bne.n	800ae9a <_close_r+0x1a>
 800ae94:	682b      	ldr	r3, [r5, #0]
 800ae96:	b103      	cbz	r3, 800ae9a <_close_r+0x1a>
 800ae98:	6023      	str	r3, [r4, #0]
 800ae9a:	bd38      	pop	{r3, r4, r5, pc}
 800ae9c:	20000344 	.word	0x20000344

0800aea0 <fiprintf>:
 800aea0:	b40e      	push	{r1, r2, r3}
 800aea2:	b503      	push	{r0, r1, lr}
 800aea4:	4601      	mov	r1, r0
 800aea6:	ab03      	add	r3, sp, #12
 800aea8:	4805      	ldr	r0, [pc, #20]	; (800aec0 <fiprintf+0x20>)
 800aeaa:	f853 2b04 	ldr.w	r2, [r3], #4
 800aeae:	6800      	ldr	r0, [r0, #0]
 800aeb0:	9301      	str	r3, [sp, #4]
 800aeb2:	f7ff f8d3 	bl	800a05c <_vfiprintf_r>
 800aeb6:	b002      	add	sp, #8
 800aeb8:	f85d eb04 	ldr.w	lr, [sp], #4
 800aebc:	b003      	add	sp, #12
 800aebe:	4770      	bx	lr
 800aec0:	2000000c 	.word	0x2000000c

0800aec4 <_fstat_r>:
 800aec4:	b538      	push	{r3, r4, r5, lr}
 800aec6:	4d07      	ldr	r5, [pc, #28]	; (800aee4 <_fstat_r+0x20>)
 800aec8:	2300      	movs	r3, #0
 800aeca:	4604      	mov	r4, r0
 800aecc:	4608      	mov	r0, r1
 800aece:	4611      	mov	r1, r2
 800aed0:	602b      	str	r3, [r5, #0]
 800aed2:	f7f7 fa81 	bl	80023d8 <_fstat>
 800aed6:	1c43      	adds	r3, r0, #1
 800aed8:	d102      	bne.n	800aee0 <_fstat_r+0x1c>
 800aeda:	682b      	ldr	r3, [r5, #0]
 800aedc:	b103      	cbz	r3, 800aee0 <_fstat_r+0x1c>
 800aede:	6023      	str	r3, [r4, #0]
 800aee0:	bd38      	pop	{r3, r4, r5, pc}
 800aee2:	bf00      	nop
 800aee4:	20000344 	.word	0x20000344

0800aee8 <_isatty_r>:
 800aee8:	b538      	push	{r3, r4, r5, lr}
 800aeea:	4d06      	ldr	r5, [pc, #24]	; (800af04 <_isatty_r+0x1c>)
 800aeec:	2300      	movs	r3, #0
 800aeee:	4604      	mov	r4, r0
 800aef0:	4608      	mov	r0, r1
 800aef2:	602b      	str	r3, [r5, #0]
 800aef4:	f7f7 fa80 	bl	80023f8 <_isatty>
 800aef8:	1c43      	adds	r3, r0, #1
 800aefa:	d102      	bne.n	800af02 <_isatty_r+0x1a>
 800aefc:	682b      	ldr	r3, [r5, #0]
 800aefe:	b103      	cbz	r3, 800af02 <_isatty_r+0x1a>
 800af00:	6023      	str	r3, [r4, #0]
 800af02:	bd38      	pop	{r3, r4, r5, pc}
 800af04:	20000344 	.word	0x20000344

0800af08 <_lseek_r>:
 800af08:	b538      	push	{r3, r4, r5, lr}
 800af0a:	4d07      	ldr	r5, [pc, #28]	; (800af28 <_lseek_r+0x20>)
 800af0c:	4604      	mov	r4, r0
 800af0e:	4608      	mov	r0, r1
 800af10:	4611      	mov	r1, r2
 800af12:	2200      	movs	r2, #0
 800af14:	602a      	str	r2, [r5, #0]
 800af16:	461a      	mov	r2, r3
 800af18:	f7f7 fa79 	bl	800240e <_lseek>
 800af1c:	1c43      	adds	r3, r0, #1
 800af1e:	d102      	bne.n	800af26 <_lseek_r+0x1e>
 800af20:	682b      	ldr	r3, [r5, #0]
 800af22:	b103      	cbz	r3, 800af26 <_lseek_r+0x1e>
 800af24:	6023      	str	r3, [r4, #0]
 800af26:	bd38      	pop	{r3, r4, r5, pc}
 800af28:	20000344 	.word	0x20000344

0800af2c <memmove>:
 800af2c:	4288      	cmp	r0, r1
 800af2e:	b510      	push	{r4, lr}
 800af30:	eb01 0402 	add.w	r4, r1, r2
 800af34:	d902      	bls.n	800af3c <memmove+0x10>
 800af36:	4284      	cmp	r4, r0
 800af38:	4623      	mov	r3, r4
 800af3a:	d807      	bhi.n	800af4c <memmove+0x20>
 800af3c:	1e43      	subs	r3, r0, #1
 800af3e:	42a1      	cmp	r1, r4
 800af40:	d008      	beq.n	800af54 <memmove+0x28>
 800af42:	f811 2b01 	ldrb.w	r2, [r1], #1
 800af46:	f803 2f01 	strb.w	r2, [r3, #1]!
 800af4a:	e7f8      	b.n	800af3e <memmove+0x12>
 800af4c:	4402      	add	r2, r0
 800af4e:	4601      	mov	r1, r0
 800af50:	428a      	cmp	r2, r1
 800af52:	d100      	bne.n	800af56 <memmove+0x2a>
 800af54:	bd10      	pop	{r4, pc}
 800af56:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800af5a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800af5e:	e7f7      	b.n	800af50 <memmove+0x24>

0800af60 <__malloc_lock>:
 800af60:	4801      	ldr	r0, [pc, #4]	; (800af68 <__malloc_lock+0x8>)
 800af62:	f7fe b8ae 	b.w	80090c2 <__retarget_lock_acquire_recursive>
 800af66:	bf00      	nop
 800af68:	20000338 	.word	0x20000338

0800af6c <__malloc_unlock>:
 800af6c:	4801      	ldr	r0, [pc, #4]	; (800af74 <__malloc_unlock+0x8>)
 800af6e:	f7fe b8a9 	b.w	80090c4 <__retarget_lock_release_recursive>
 800af72:	bf00      	nop
 800af74:	20000338 	.word	0x20000338

0800af78 <_realloc_r>:
 800af78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800af7c:	4680      	mov	r8, r0
 800af7e:	4614      	mov	r4, r2
 800af80:	460e      	mov	r6, r1
 800af82:	b921      	cbnz	r1, 800af8e <_realloc_r+0x16>
 800af84:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800af88:	4611      	mov	r1, r2
 800af8a:	f7fe be6d 	b.w	8009c68 <_malloc_r>
 800af8e:	b92a      	cbnz	r2, 800af9c <_realloc_r+0x24>
 800af90:	f7fe fdfe 	bl	8009b90 <_free_r>
 800af94:	4625      	mov	r5, r4
 800af96:	4628      	mov	r0, r5
 800af98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800af9c:	f000 f835 	bl	800b00a <_malloc_usable_size_r>
 800afa0:	4284      	cmp	r4, r0
 800afa2:	4607      	mov	r7, r0
 800afa4:	d802      	bhi.n	800afac <_realloc_r+0x34>
 800afa6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800afaa:	d812      	bhi.n	800afd2 <_realloc_r+0x5a>
 800afac:	4621      	mov	r1, r4
 800afae:	4640      	mov	r0, r8
 800afb0:	f7fe fe5a 	bl	8009c68 <_malloc_r>
 800afb4:	4605      	mov	r5, r0
 800afb6:	2800      	cmp	r0, #0
 800afb8:	d0ed      	beq.n	800af96 <_realloc_r+0x1e>
 800afba:	42bc      	cmp	r4, r7
 800afbc:	4622      	mov	r2, r4
 800afbe:	4631      	mov	r1, r6
 800afc0:	bf28      	it	cs
 800afc2:	463a      	movcs	r2, r7
 800afc4:	f7fe f8fe 	bl	80091c4 <memcpy>
 800afc8:	4631      	mov	r1, r6
 800afca:	4640      	mov	r0, r8
 800afcc:	f7fe fde0 	bl	8009b90 <_free_r>
 800afd0:	e7e1      	b.n	800af96 <_realloc_r+0x1e>
 800afd2:	4635      	mov	r5, r6
 800afd4:	e7df      	b.n	800af96 <_realloc_r+0x1e>
	...

0800afd8 <_read_r>:
 800afd8:	b538      	push	{r3, r4, r5, lr}
 800afda:	4d07      	ldr	r5, [pc, #28]	; (800aff8 <_read_r+0x20>)
 800afdc:	4604      	mov	r4, r0
 800afde:	4608      	mov	r0, r1
 800afe0:	4611      	mov	r1, r2
 800afe2:	2200      	movs	r2, #0
 800afe4:	602a      	str	r2, [r5, #0]
 800afe6:	461a      	mov	r2, r3
 800afe8:	f7f7 f9a2 	bl	8002330 <_read>
 800afec:	1c43      	adds	r3, r0, #1
 800afee:	d102      	bne.n	800aff6 <_read_r+0x1e>
 800aff0:	682b      	ldr	r3, [r5, #0]
 800aff2:	b103      	cbz	r3, 800aff6 <_read_r+0x1e>
 800aff4:	6023      	str	r3, [r4, #0]
 800aff6:	bd38      	pop	{r3, r4, r5, pc}
 800aff8:	20000344 	.word	0x20000344

0800affc <abort>:
 800affc:	b508      	push	{r3, lr}
 800affe:	2006      	movs	r0, #6
 800b000:	f000 f834 	bl	800b06c <raise>
 800b004:	2001      	movs	r0, #1
 800b006:	f7f7 f989 	bl	800231c <_exit>

0800b00a <_malloc_usable_size_r>:
 800b00a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b00e:	1f18      	subs	r0, r3, #4
 800b010:	2b00      	cmp	r3, #0
 800b012:	bfbc      	itt	lt
 800b014:	580b      	ldrlt	r3, [r1, r0]
 800b016:	18c0      	addlt	r0, r0, r3
 800b018:	4770      	bx	lr

0800b01a <_raise_r>:
 800b01a:	291f      	cmp	r1, #31
 800b01c:	b538      	push	{r3, r4, r5, lr}
 800b01e:	4604      	mov	r4, r0
 800b020:	460d      	mov	r5, r1
 800b022:	d904      	bls.n	800b02e <_raise_r+0x14>
 800b024:	2316      	movs	r3, #22
 800b026:	6003      	str	r3, [r0, #0]
 800b028:	f04f 30ff 	mov.w	r0, #4294967295
 800b02c:	bd38      	pop	{r3, r4, r5, pc}
 800b02e:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800b030:	b112      	cbz	r2, 800b038 <_raise_r+0x1e>
 800b032:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b036:	b94b      	cbnz	r3, 800b04c <_raise_r+0x32>
 800b038:	4620      	mov	r0, r4
 800b03a:	f000 f831 	bl	800b0a0 <_getpid_r>
 800b03e:	462a      	mov	r2, r5
 800b040:	4601      	mov	r1, r0
 800b042:	4620      	mov	r0, r4
 800b044:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b048:	f000 b818 	b.w	800b07c <_kill_r>
 800b04c:	2b01      	cmp	r3, #1
 800b04e:	d00a      	beq.n	800b066 <_raise_r+0x4c>
 800b050:	1c59      	adds	r1, r3, #1
 800b052:	d103      	bne.n	800b05c <_raise_r+0x42>
 800b054:	2316      	movs	r3, #22
 800b056:	6003      	str	r3, [r0, #0]
 800b058:	2001      	movs	r0, #1
 800b05a:	e7e7      	b.n	800b02c <_raise_r+0x12>
 800b05c:	2400      	movs	r4, #0
 800b05e:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800b062:	4628      	mov	r0, r5
 800b064:	4798      	blx	r3
 800b066:	2000      	movs	r0, #0
 800b068:	e7e0      	b.n	800b02c <_raise_r+0x12>
	...

0800b06c <raise>:
 800b06c:	4b02      	ldr	r3, [pc, #8]	; (800b078 <raise+0xc>)
 800b06e:	4601      	mov	r1, r0
 800b070:	6818      	ldr	r0, [r3, #0]
 800b072:	f7ff bfd2 	b.w	800b01a <_raise_r>
 800b076:	bf00      	nop
 800b078:	2000000c 	.word	0x2000000c

0800b07c <_kill_r>:
 800b07c:	b538      	push	{r3, r4, r5, lr}
 800b07e:	4d07      	ldr	r5, [pc, #28]	; (800b09c <_kill_r+0x20>)
 800b080:	2300      	movs	r3, #0
 800b082:	4604      	mov	r4, r0
 800b084:	4608      	mov	r0, r1
 800b086:	4611      	mov	r1, r2
 800b088:	602b      	str	r3, [r5, #0]
 800b08a:	f7f7 f937 	bl	80022fc <_kill>
 800b08e:	1c43      	adds	r3, r0, #1
 800b090:	d102      	bne.n	800b098 <_kill_r+0x1c>
 800b092:	682b      	ldr	r3, [r5, #0]
 800b094:	b103      	cbz	r3, 800b098 <_kill_r+0x1c>
 800b096:	6023      	str	r3, [r4, #0]
 800b098:	bd38      	pop	{r3, r4, r5, pc}
 800b09a:	bf00      	nop
 800b09c:	20000344 	.word	0x20000344

0800b0a0 <_getpid_r>:
 800b0a0:	f7f7 b924 	b.w	80022ec <_getpid>

0800b0a4 <_init>:
 800b0a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b0a6:	bf00      	nop
 800b0a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b0aa:	bc08      	pop	{r3}
 800b0ac:	469e      	mov	lr, r3
 800b0ae:	4770      	bx	lr

0800b0b0 <_fini>:
 800b0b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b0b2:	bf00      	nop
 800b0b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b0b6:	bc08      	pop	{r3}
 800b0b8:	469e      	mov	lr, r3
 800b0ba:	4770      	bx	lr
