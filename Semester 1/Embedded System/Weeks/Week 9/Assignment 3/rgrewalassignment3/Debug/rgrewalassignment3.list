
rgrewalassignment3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003890  0800018c  0800018c  0001018c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000ae8  08003a1c  08003a1c  00013a1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004504  08004504  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08004504  08004504  00014504  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800450c  0800450c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800450c  0800450c  0001450c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004510  08004510  00014510  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08004514  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000108  2000000c  08004520  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000114  08004520  00020114  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ddce  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001dfa  00000000  00000000  0002de0a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000bb0  00000000  00000000  0002fc08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  00020eba  00000000  00000000  000307b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0000de1f  00000000  00000000  00051672  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    000c42f1  00000000  00000000  0005f491  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000050  00000000  00000000  00123782  2**0
                  CONTENTS, READONLY
 19 .debug_ranges 00000ae0  00000000  00000000  001237d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00002f30  00000000  00000000  001242b8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800018c <__do_global_dtors_aux>:
 800018c:	b510      	push	{r4, lr}
 800018e:	4c05      	ldr	r4, [pc, #20]	; (80001a4 <__do_global_dtors_aux+0x18>)
 8000190:	7823      	ldrb	r3, [r4, #0]
 8000192:	b933      	cbnz	r3, 80001a2 <__do_global_dtors_aux+0x16>
 8000194:	4b04      	ldr	r3, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x1c>)
 8000196:	b113      	cbz	r3, 800019e <__do_global_dtors_aux+0x12>
 8000198:	4804      	ldr	r0, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x20>)
 800019a:	f3af 8000 	nop.w
 800019e:	2301      	movs	r3, #1
 80001a0:	7023      	strb	r3, [r4, #0]
 80001a2:	bd10      	pop	{r4, pc}
 80001a4:	2000000c 	.word	0x2000000c
 80001a8:	00000000 	.word	0x00000000
 80001ac:	08003a04 	.word	0x08003a04

080001b0 <frame_dummy>:
 80001b0:	b508      	push	{r3, lr}
 80001b2:	4b03      	ldr	r3, [pc, #12]	; (80001c0 <frame_dummy+0x10>)
 80001b4:	b11b      	cbz	r3, 80001be <frame_dummy+0xe>
 80001b6:	4903      	ldr	r1, [pc, #12]	; (80001c4 <frame_dummy+0x14>)
 80001b8:	4803      	ldr	r0, [pc, #12]	; (80001c8 <frame_dummy+0x18>)
 80001ba:	f3af 8000 	nop.w
 80001be:	bd08      	pop	{r3, pc}
 80001c0:	00000000 	.word	0x00000000
 80001c4:	20000010 	.word	0x20000010
 80001c8:	08003a04 	.word	0x08003a04

080001cc <__aeabi_uldivmod>:
 80001cc:	b953      	cbnz	r3, 80001e4 <__aeabi_uldivmod+0x18>
 80001ce:	b94a      	cbnz	r2, 80001e4 <__aeabi_uldivmod+0x18>
 80001d0:	2900      	cmp	r1, #0
 80001d2:	bf08      	it	eq
 80001d4:	2800      	cmpeq	r0, #0
 80001d6:	bf1c      	itt	ne
 80001d8:	f04f 31ff 	movne.w	r1, #4294967295
 80001dc:	f04f 30ff 	movne.w	r0, #4294967295
 80001e0:	f000 b974 	b.w	80004cc <__aeabi_idiv0>
 80001e4:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001ec:	f000 f806 	bl	80001fc <__udivmoddi4>
 80001f0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f8:	b004      	add	sp, #16
 80001fa:	4770      	bx	lr

080001fc <__udivmoddi4>:
 80001fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000200:	9d08      	ldr	r5, [sp, #32]
 8000202:	4604      	mov	r4, r0
 8000204:	468e      	mov	lr, r1
 8000206:	2b00      	cmp	r3, #0
 8000208:	d14d      	bne.n	80002a6 <__udivmoddi4+0xaa>
 800020a:	428a      	cmp	r2, r1
 800020c:	4694      	mov	ip, r2
 800020e:	d969      	bls.n	80002e4 <__udivmoddi4+0xe8>
 8000210:	fab2 f282 	clz	r2, r2
 8000214:	b152      	cbz	r2, 800022c <__udivmoddi4+0x30>
 8000216:	fa01 f302 	lsl.w	r3, r1, r2
 800021a:	f1c2 0120 	rsb	r1, r2, #32
 800021e:	fa20 f101 	lsr.w	r1, r0, r1
 8000222:	fa0c fc02 	lsl.w	ip, ip, r2
 8000226:	ea41 0e03 	orr.w	lr, r1, r3
 800022a:	4094      	lsls	r4, r2
 800022c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000230:	0c21      	lsrs	r1, r4, #16
 8000232:	fbbe f6f8 	udiv	r6, lr, r8
 8000236:	fa1f f78c 	uxth.w	r7, ip
 800023a:	fb08 e316 	mls	r3, r8, r6, lr
 800023e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000242:	fb06 f107 	mul.w	r1, r6, r7
 8000246:	4299      	cmp	r1, r3
 8000248:	d90a      	bls.n	8000260 <__udivmoddi4+0x64>
 800024a:	eb1c 0303 	adds.w	r3, ip, r3
 800024e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000252:	f080 811f 	bcs.w	8000494 <__udivmoddi4+0x298>
 8000256:	4299      	cmp	r1, r3
 8000258:	f240 811c 	bls.w	8000494 <__udivmoddi4+0x298>
 800025c:	3e02      	subs	r6, #2
 800025e:	4463      	add	r3, ip
 8000260:	1a5b      	subs	r3, r3, r1
 8000262:	b2a4      	uxth	r4, r4
 8000264:	fbb3 f0f8 	udiv	r0, r3, r8
 8000268:	fb08 3310 	mls	r3, r8, r0, r3
 800026c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000270:	fb00 f707 	mul.w	r7, r0, r7
 8000274:	42a7      	cmp	r7, r4
 8000276:	d90a      	bls.n	800028e <__udivmoddi4+0x92>
 8000278:	eb1c 0404 	adds.w	r4, ip, r4
 800027c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000280:	f080 810a 	bcs.w	8000498 <__udivmoddi4+0x29c>
 8000284:	42a7      	cmp	r7, r4
 8000286:	f240 8107 	bls.w	8000498 <__udivmoddi4+0x29c>
 800028a:	4464      	add	r4, ip
 800028c:	3802      	subs	r0, #2
 800028e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000292:	1be4      	subs	r4, r4, r7
 8000294:	2600      	movs	r6, #0
 8000296:	b11d      	cbz	r5, 80002a0 <__udivmoddi4+0xa4>
 8000298:	40d4      	lsrs	r4, r2
 800029a:	2300      	movs	r3, #0
 800029c:	e9c5 4300 	strd	r4, r3, [r5]
 80002a0:	4631      	mov	r1, r6
 80002a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a6:	428b      	cmp	r3, r1
 80002a8:	d909      	bls.n	80002be <__udivmoddi4+0xc2>
 80002aa:	2d00      	cmp	r5, #0
 80002ac:	f000 80ef 	beq.w	800048e <__udivmoddi4+0x292>
 80002b0:	2600      	movs	r6, #0
 80002b2:	e9c5 0100 	strd	r0, r1, [r5]
 80002b6:	4630      	mov	r0, r6
 80002b8:	4631      	mov	r1, r6
 80002ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002be:	fab3 f683 	clz	r6, r3
 80002c2:	2e00      	cmp	r6, #0
 80002c4:	d14a      	bne.n	800035c <__udivmoddi4+0x160>
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d302      	bcc.n	80002d0 <__udivmoddi4+0xd4>
 80002ca:	4282      	cmp	r2, r0
 80002cc:	f200 80f9 	bhi.w	80004c2 <__udivmoddi4+0x2c6>
 80002d0:	1a84      	subs	r4, r0, r2
 80002d2:	eb61 0303 	sbc.w	r3, r1, r3
 80002d6:	2001      	movs	r0, #1
 80002d8:	469e      	mov	lr, r3
 80002da:	2d00      	cmp	r5, #0
 80002dc:	d0e0      	beq.n	80002a0 <__udivmoddi4+0xa4>
 80002de:	e9c5 4e00 	strd	r4, lr, [r5]
 80002e2:	e7dd      	b.n	80002a0 <__udivmoddi4+0xa4>
 80002e4:	b902      	cbnz	r2, 80002e8 <__udivmoddi4+0xec>
 80002e6:	deff      	udf	#255	; 0xff
 80002e8:	fab2 f282 	clz	r2, r2
 80002ec:	2a00      	cmp	r2, #0
 80002ee:	f040 8092 	bne.w	8000416 <__udivmoddi4+0x21a>
 80002f2:	eba1 010c 	sub.w	r1, r1, ip
 80002f6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002fa:	fa1f fe8c 	uxth.w	lr, ip
 80002fe:	2601      	movs	r6, #1
 8000300:	0c20      	lsrs	r0, r4, #16
 8000302:	fbb1 f3f7 	udiv	r3, r1, r7
 8000306:	fb07 1113 	mls	r1, r7, r3, r1
 800030a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800030e:	fb0e f003 	mul.w	r0, lr, r3
 8000312:	4288      	cmp	r0, r1
 8000314:	d908      	bls.n	8000328 <__udivmoddi4+0x12c>
 8000316:	eb1c 0101 	adds.w	r1, ip, r1
 800031a:	f103 38ff 	add.w	r8, r3, #4294967295
 800031e:	d202      	bcs.n	8000326 <__udivmoddi4+0x12a>
 8000320:	4288      	cmp	r0, r1
 8000322:	f200 80cb 	bhi.w	80004bc <__udivmoddi4+0x2c0>
 8000326:	4643      	mov	r3, r8
 8000328:	1a09      	subs	r1, r1, r0
 800032a:	b2a4      	uxth	r4, r4
 800032c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000330:	fb07 1110 	mls	r1, r7, r0, r1
 8000334:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000338:	fb0e fe00 	mul.w	lr, lr, r0
 800033c:	45a6      	cmp	lr, r4
 800033e:	d908      	bls.n	8000352 <__udivmoddi4+0x156>
 8000340:	eb1c 0404 	adds.w	r4, ip, r4
 8000344:	f100 31ff 	add.w	r1, r0, #4294967295
 8000348:	d202      	bcs.n	8000350 <__udivmoddi4+0x154>
 800034a:	45a6      	cmp	lr, r4
 800034c:	f200 80bb 	bhi.w	80004c6 <__udivmoddi4+0x2ca>
 8000350:	4608      	mov	r0, r1
 8000352:	eba4 040e 	sub.w	r4, r4, lr
 8000356:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800035a:	e79c      	b.n	8000296 <__udivmoddi4+0x9a>
 800035c:	f1c6 0720 	rsb	r7, r6, #32
 8000360:	40b3      	lsls	r3, r6
 8000362:	fa22 fc07 	lsr.w	ip, r2, r7
 8000366:	ea4c 0c03 	orr.w	ip, ip, r3
 800036a:	fa20 f407 	lsr.w	r4, r0, r7
 800036e:	fa01 f306 	lsl.w	r3, r1, r6
 8000372:	431c      	orrs	r4, r3
 8000374:	40f9      	lsrs	r1, r7
 8000376:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800037a:	fa00 f306 	lsl.w	r3, r0, r6
 800037e:	fbb1 f8f9 	udiv	r8, r1, r9
 8000382:	0c20      	lsrs	r0, r4, #16
 8000384:	fa1f fe8c 	uxth.w	lr, ip
 8000388:	fb09 1118 	mls	r1, r9, r8, r1
 800038c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000390:	fb08 f00e 	mul.w	r0, r8, lr
 8000394:	4288      	cmp	r0, r1
 8000396:	fa02 f206 	lsl.w	r2, r2, r6
 800039a:	d90b      	bls.n	80003b4 <__udivmoddi4+0x1b8>
 800039c:	eb1c 0101 	adds.w	r1, ip, r1
 80003a0:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a4:	f080 8088 	bcs.w	80004b8 <__udivmoddi4+0x2bc>
 80003a8:	4288      	cmp	r0, r1
 80003aa:	f240 8085 	bls.w	80004b8 <__udivmoddi4+0x2bc>
 80003ae:	f1a8 0802 	sub.w	r8, r8, #2
 80003b2:	4461      	add	r1, ip
 80003b4:	1a09      	subs	r1, r1, r0
 80003b6:	b2a4      	uxth	r4, r4
 80003b8:	fbb1 f0f9 	udiv	r0, r1, r9
 80003bc:	fb09 1110 	mls	r1, r9, r0, r1
 80003c0:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003c4:	fb00 fe0e 	mul.w	lr, r0, lr
 80003c8:	458e      	cmp	lr, r1
 80003ca:	d908      	bls.n	80003de <__udivmoddi4+0x1e2>
 80003cc:	eb1c 0101 	adds.w	r1, ip, r1
 80003d0:	f100 34ff 	add.w	r4, r0, #4294967295
 80003d4:	d26c      	bcs.n	80004b0 <__udivmoddi4+0x2b4>
 80003d6:	458e      	cmp	lr, r1
 80003d8:	d96a      	bls.n	80004b0 <__udivmoddi4+0x2b4>
 80003da:	3802      	subs	r0, #2
 80003dc:	4461      	add	r1, ip
 80003de:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003e2:	fba0 9402 	umull	r9, r4, r0, r2
 80003e6:	eba1 010e 	sub.w	r1, r1, lr
 80003ea:	42a1      	cmp	r1, r4
 80003ec:	46c8      	mov	r8, r9
 80003ee:	46a6      	mov	lr, r4
 80003f0:	d356      	bcc.n	80004a0 <__udivmoddi4+0x2a4>
 80003f2:	d053      	beq.n	800049c <__udivmoddi4+0x2a0>
 80003f4:	b15d      	cbz	r5, 800040e <__udivmoddi4+0x212>
 80003f6:	ebb3 0208 	subs.w	r2, r3, r8
 80003fa:	eb61 010e 	sbc.w	r1, r1, lr
 80003fe:	fa01 f707 	lsl.w	r7, r1, r7
 8000402:	fa22 f306 	lsr.w	r3, r2, r6
 8000406:	40f1      	lsrs	r1, r6
 8000408:	431f      	orrs	r7, r3
 800040a:	e9c5 7100 	strd	r7, r1, [r5]
 800040e:	2600      	movs	r6, #0
 8000410:	4631      	mov	r1, r6
 8000412:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000416:	f1c2 0320 	rsb	r3, r2, #32
 800041a:	40d8      	lsrs	r0, r3
 800041c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000420:	fa21 f303 	lsr.w	r3, r1, r3
 8000424:	4091      	lsls	r1, r2
 8000426:	4301      	orrs	r1, r0
 8000428:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800042c:	fa1f fe8c 	uxth.w	lr, ip
 8000430:	fbb3 f0f7 	udiv	r0, r3, r7
 8000434:	fb07 3610 	mls	r6, r7, r0, r3
 8000438:	0c0b      	lsrs	r3, r1, #16
 800043a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800043e:	fb00 f60e 	mul.w	r6, r0, lr
 8000442:	429e      	cmp	r6, r3
 8000444:	fa04 f402 	lsl.w	r4, r4, r2
 8000448:	d908      	bls.n	800045c <__udivmoddi4+0x260>
 800044a:	eb1c 0303 	adds.w	r3, ip, r3
 800044e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000452:	d22f      	bcs.n	80004b4 <__udivmoddi4+0x2b8>
 8000454:	429e      	cmp	r6, r3
 8000456:	d92d      	bls.n	80004b4 <__udivmoddi4+0x2b8>
 8000458:	3802      	subs	r0, #2
 800045a:	4463      	add	r3, ip
 800045c:	1b9b      	subs	r3, r3, r6
 800045e:	b289      	uxth	r1, r1
 8000460:	fbb3 f6f7 	udiv	r6, r3, r7
 8000464:	fb07 3316 	mls	r3, r7, r6, r3
 8000468:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800046c:	fb06 f30e 	mul.w	r3, r6, lr
 8000470:	428b      	cmp	r3, r1
 8000472:	d908      	bls.n	8000486 <__udivmoddi4+0x28a>
 8000474:	eb1c 0101 	adds.w	r1, ip, r1
 8000478:	f106 38ff 	add.w	r8, r6, #4294967295
 800047c:	d216      	bcs.n	80004ac <__udivmoddi4+0x2b0>
 800047e:	428b      	cmp	r3, r1
 8000480:	d914      	bls.n	80004ac <__udivmoddi4+0x2b0>
 8000482:	3e02      	subs	r6, #2
 8000484:	4461      	add	r1, ip
 8000486:	1ac9      	subs	r1, r1, r3
 8000488:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 800048c:	e738      	b.n	8000300 <__udivmoddi4+0x104>
 800048e:	462e      	mov	r6, r5
 8000490:	4628      	mov	r0, r5
 8000492:	e705      	b.n	80002a0 <__udivmoddi4+0xa4>
 8000494:	4606      	mov	r6, r0
 8000496:	e6e3      	b.n	8000260 <__udivmoddi4+0x64>
 8000498:	4618      	mov	r0, r3
 800049a:	e6f8      	b.n	800028e <__udivmoddi4+0x92>
 800049c:	454b      	cmp	r3, r9
 800049e:	d2a9      	bcs.n	80003f4 <__udivmoddi4+0x1f8>
 80004a0:	ebb9 0802 	subs.w	r8, r9, r2
 80004a4:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004a8:	3801      	subs	r0, #1
 80004aa:	e7a3      	b.n	80003f4 <__udivmoddi4+0x1f8>
 80004ac:	4646      	mov	r6, r8
 80004ae:	e7ea      	b.n	8000486 <__udivmoddi4+0x28a>
 80004b0:	4620      	mov	r0, r4
 80004b2:	e794      	b.n	80003de <__udivmoddi4+0x1e2>
 80004b4:	4640      	mov	r0, r8
 80004b6:	e7d1      	b.n	800045c <__udivmoddi4+0x260>
 80004b8:	46d0      	mov	r8, sl
 80004ba:	e77b      	b.n	80003b4 <__udivmoddi4+0x1b8>
 80004bc:	3b02      	subs	r3, #2
 80004be:	4461      	add	r1, ip
 80004c0:	e732      	b.n	8000328 <__udivmoddi4+0x12c>
 80004c2:	4630      	mov	r0, r6
 80004c4:	e709      	b.n	80002da <__udivmoddi4+0xde>
 80004c6:	4464      	add	r4, ip
 80004c8:	3802      	subs	r0, #2
 80004ca:	e742      	b.n	8000352 <__udivmoddi4+0x156>

080004cc <__aeabi_idiv0>:
 80004cc:	4770      	bx	lr
 80004ce:	bf00      	nop

080004d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004d0:	b580      	push	{r7, lr}
 80004d2:	b082      	sub	sp, #8
 80004d4:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004d6:	f000 fe48 	bl	800116a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004da:	f000 f83f 	bl	800055c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004de:	f000 f90d 	bl	80006fc <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80004e2:	f000 f8db 	bl	800069c <MX_USART2_UART_Init>
  MX_SPI1_Init();
 80004e6:	f000 f89b 	bl	8000620 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */

  ssd1331_init();
 80004ea:	f000 fc5b 	bl	8000da4 <ssd1331_init>
  ssd1331_clear_screen(BLACK);
 80004ee:	2000      	movs	r0, #0
 80004f0:	f000 fc33 	bl	8000d5a <ssd1331_clear_screen>
    ssd1331_draw_line(1, 1, 10, 10, RED);
 80004f4:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80004f8:	9300      	str	r3, [sp, #0]
 80004fa:	230a      	movs	r3, #10
 80004fc:	220a      	movs	r2, #10
 80004fe:	2101      	movs	r1, #1
 8000500:	2001      	movs	r0, #1
 8000502:	f000 f9bb 	bl	800087c <ssd1331_draw_line>
    ssd1331_display_num(10, 10, 10, 2, FONT_1608, RED);
 8000506:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800050a:	9301      	str	r3, [sp, #4]
 800050c:	2310      	movs	r3, #16
 800050e:	9300      	str	r3, [sp, #0]
 8000510:	2302      	movs	r3, #2
 8000512:	220a      	movs	r2, #10
 8000514:	210a      	movs	r1, #10
 8000516:	200a      	movs	r0, #10
 8000518:	f000 fb58 	bl	8000bcc <ssd1331_display_num>
    ssd1331_display_char(20, 20, 'A', FONT_1608, RED);
 800051c:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8000520:	9300      	str	r3, [sp, #0]
 8000522:	2310      	movs	r3, #16
 8000524:	2241      	movs	r2, #65	; 0x41
 8000526:	2114      	movs	r1, #20
 8000528:	2014      	movs	r0, #20
 800052a:	f000 fabd 	bl	8000aa8 <ssd1331_display_char>

  ssd1331_draw_rect(0, 0, 90, 60, GREEN);
 800052e:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8000532:	9300      	str	r3, [sp, #0]
 8000534:	233c      	movs	r3, #60	; 0x3c
 8000536:	225a      	movs	r2, #90	; 0x5a
 8000538:	2100      	movs	r1, #0
 800053a:	2000      	movs	r0, #0
 800053c:	f000 fa7a 	bl	8000a34 <ssd1331_draw_rect>
  ssd1331_draw_bitmap(10, 10, ohm, 20, 20, RED);
 8000540:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8000544:	9301      	str	r3, [sp, #4]
 8000546:	2314      	movs	r3, #20
 8000548:	9300      	str	r3, [sp, #0]
 800054a:	2314      	movs	r3, #20
 800054c:	4a02      	ldr	r2, [pc, #8]	; (8000558 <main+0x88>)
 800054e:	210a      	movs	r1, #10
 8000550:	200a      	movs	r0, #10
 8000552:	f000 fbb1 	bl	8000cb8 <ssd1331_draw_bitmap>
 // ssd1331_draw_bitmap(10, 10, heart_inverted, 30, 30, RED);
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000556:	e7fe      	b.n	8000556 <main+0x86>
 8000558:	08004480 	.word	0x08004480

0800055c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800055c:	b580      	push	{r7, lr}
 800055e:	b096      	sub	sp, #88	; 0x58
 8000560:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000562:	f107 0314 	add.w	r3, r7, #20
 8000566:	2244      	movs	r2, #68	; 0x44
 8000568:	2100      	movs	r1, #0
 800056a:	4618      	mov	r0, r3
 800056c:	f003 fa42 	bl	80039f4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000570:	463b      	mov	r3, r7
 8000572:	2200      	movs	r2, #0
 8000574:	601a      	str	r2, [r3, #0]
 8000576:	605a      	str	r2, [r3, #4]
 8000578:	609a      	str	r2, [r3, #8]
 800057a:	60da      	str	r2, [r3, #12]
 800057c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800057e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000582:	f001 f8ed 	bl	8001760 <HAL_PWREx_ControlVoltageScaling>
 8000586:	4603      	mov	r3, r0
 8000588:	2b00      	cmp	r3, #0
 800058a:	d001      	beq.n	8000590 <SystemClock_Config+0x34>
  {
    Error_Handler();
 800058c:	f000 f900 	bl	8000790 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000590:	f001 f8c8 	bl	8001724 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000594:	4b21      	ldr	r3, [pc, #132]	; (800061c <SystemClock_Config+0xc0>)
 8000596:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800059a:	4a20      	ldr	r2, [pc, #128]	; (800061c <SystemClock_Config+0xc0>)
 800059c:	f023 0318 	bic.w	r3, r3, #24
 80005a0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 80005a4:	2314      	movs	r3, #20
 80005a6:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80005a8:	2301      	movs	r3, #1
 80005aa:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80005ac:	2301      	movs	r3, #1
 80005ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80005b0:	2300      	movs	r3, #0
 80005b2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80005b4:	2360      	movs	r3, #96	; 0x60
 80005b6:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005b8:	2302      	movs	r3, #2
 80005ba:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80005bc:	2301      	movs	r3, #1
 80005be:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80005c0:	2301      	movs	r3, #1
 80005c2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 16;
 80005c4:	2310      	movs	r3, #16
 80005c6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80005c8:	2307      	movs	r3, #7
 80005ca:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80005cc:	2302      	movs	r3, #2
 80005ce:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80005d0:	2302      	movs	r3, #2
 80005d2:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005d4:	f107 0314 	add.w	r3, r7, #20
 80005d8:	4618      	mov	r0, r3
 80005da:	f001 f917 	bl	800180c <HAL_RCC_OscConfig>
 80005de:	4603      	mov	r3, r0
 80005e0:	2b00      	cmp	r3, #0
 80005e2:	d001      	beq.n	80005e8 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 80005e4:	f000 f8d4 	bl	8000790 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005e8:	230f      	movs	r3, #15
 80005ea:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005ec:	2303      	movs	r3, #3
 80005ee:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005f0:	2300      	movs	r3, #0
 80005f2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005f4:	2300      	movs	r3, #0
 80005f6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005f8:	2300      	movs	r3, #0
 80005fa:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80005fc:	463b      	mov	r3, r7
 80005fe:	2101      	movs	r1, #1
 8000600:	4618      	mov	r0, r3
 8000602:	f001 fd17 	bl	8002034 <HAL_RCC_ClockConfig>
 8000606:	4603      	mov	r3, r0
 8000608:	2b00      	cmp	r3, #0
 800060a:	d001      	beq.n	8000610 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 800060c:	f000 f8c0 	bl	8000790 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8000610:	f002 f92a 	bl	8002868 <HAL_RCCEx_EnableMSIPLLMode>
}
 8000614:	bf00      	nop
 8000616:	3758      	adds	r7, #88	; 0x58
 8000618:	46bd      	mov	sp, r7
 800061a:	bd80      	pop	{r7, pc}
 800061c:	40021000 	.word	0x40021000

08000620 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000620:	b580      	push	{r7, lr}
 8000622:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000624:	4b1b      	ldr	r3, [pc, #108]	; (8000694 <MX_SPI1_Init+0x74>)
 8000626:	4a1c      	ldr	r2, [pc, #112]	; (8000698 <MX_SPI1_Init+0x78>)
 8000628:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800062a:	4b1a      	ldr	r3, [pc, #104]	; (8000694 <MX_SPI1_Init+0x74>)
 800062c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000630:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000632:	4b18      	ldr	r3, [pc, #96]	; (8000694 <MX_SPI1_Init+0x74>)
 8000634:	2200      	movs	r2, #0
 8000636:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000638:	4b16      	ldr	r3, [pc, #88]	; (8000694 <MX_SPI1_Init+0x74>)
 800063a:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800063e:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000640:	4b14      	ldr	r3, [pc, #80]	; (8000694 <MX_SPI1_Init+0x74>)
 8000642:	2200      	movs	r2, #0
 8000644:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000646:	4b13      	ldr	r3, [pc, #76]	; (8000694 <MX_SPI1_Init+0x74>)
 8000648:	2200      	movs	r2, #0
 800064a:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800064c:	4b11      	ldr	r3, [pc, #68]	; (8000694 <MX_SPI1_Init+0x74>)
 800064e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000652:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8000654:	4b0f      	ldr	r3, [pc, #60]	; (8000694 <MX_SPI1_Init+0x74>)
 8000656:	2210      	movs	r2, #16
 8000658:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800065a:	4b0e      	ldr	r3, [pc, #56]	; (8000694 <MX_SPI1_Init+0x74>)
 800065c:	2200      	movs	r2, #0
 800065e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000660:	4b0c      	ldr	r3, [pc, #48]	; (8000694 <MX_SPI1_Init+0x74>)
 8000662:	2200      	movs	r2, #0
 8000664:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000666:	4b0b      	ldr	r3, [pc, #44]	; (8000694 <MX_SPI1_Init+0x74>)
 8000668:	2200      	movs	r2, #0
 800066a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 800066c:	4b09      	ldr	r3, [pc, #36]	; (8000694 <MX_SPI1_Init+0x74>)
 800066e:	2207      	movs	r2, #7
 8000670:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000672:	4b08      	ldr	r3, [pc, #32]	; (8000694 <MX_SPI1_Init+0x74>)
 8000674:	2200      	movs	r2, #0
 8000676:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000678:	4b06      	ldr	r3, [pc, #24]	; (8000694 <MX_SPI1_Init+0x74>)
 800067a:	2208      	movs	r2, #8
 800067c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800067e:	4805      	ldr	r0, [pc, #20]	; (8000694 <MX_SPI1_Init+0x74>)
 8000680:	f002 f9f4 	bl	8002a6c <HAL_SPI_Init>
 8000684:	4603      	mov	r3, r0
 8000686:	2b00      	cmp	r3, #0
 8000688:	d001      	beq.n	800068e <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800068a:	f000 f881 	bl	8000790 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800068e:	bf00      	nop
 8000690:	bd80      	pop	{r7, pc}
 8000692:	bf00      	nop
 8000694:	20000028 	.word	0x20000028
 8000698:	40013000 	.word	0x40013000

0800069c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800069c:	b580      	push	{r7, lr}
 800069e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80006a0:	4b14      	ldr	r3, [pc, #80]	; (80006f4 <MX_USART2_UART_Init+0x58>)
 80006a2:	4a15      	ldr	r2, [pc, #84]	; (80006f8 <MX_USART2_UART_Init+0x5c>)
 80006a4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80006a6:	4b13      	ldr	r3, [pc, #76]	; (80006f4 <MX_USART2_UART_Init+0x58>)
 80006a8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80006ac:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80006ae:	4b11      	ldr	r3, [pc, #68]	; (80006f4 <MX_USART2_UART_Init+0x58>)
 80006b0:	2200      	movs	r2, #0
 80006b2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80006b4:	4b0f      	ldr	r3, [pc, #60]	; (80006f4 <MX_USART2_UART_Init+0x58>)
 80006b6:	2200      	movs	r2, #0
 80006b8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80006ba:	4b0e      	ldr	r3, [pc, #56]	; (80006f4 <MX_USART2_UART_Init+0x58>)
 80006bc:	2200      	movs	r2, #0
 80006be:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80006c0:	4b0c      	ldr	r3, [pc, #48]	; (80006f4 <MX_USART2_UART_Init+0x58>)
 80006c2:	220c      	movs	r2, #12
 80006c4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006c6:	4b0b      	ldr	r3, [pc, #44]	; (80006f4 <MX_USART2_UART_Init+0x58>)
 80006c8:	2200      	movs	r2, #0
 80006ca:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80006cc:	4b09      	ldr	r3, [pc, #36]	; (80006f4 <MX_USART2_UART_Init+0x58>)
 80006ce:	2200      	movs	r2, #0
 80006d0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80006d2:	4b08      	ldr	r3, [pc, #32]	; (80006f4 <MX_USART2_UART_Init+0x58>)
 80006d4:	2200      	movs	r2, #0
 80006d6:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80006d8:	4b06      	ldr	r3, [pc, #24]	; (80006f4 <MX_USART2_UART_Init+0x58>)
 80006da:	2200      	movs	r2, #0
 80006dc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80006de:	4805      	ldr	r0, [pc, #20]	; (80006f4 <MX_USART2_UART_Init+0x58>)
 80006e0:	f002 fd3a 	bl	8003158 <HAL_UART_Init>
 80006e4:	4603      	mov	r3, r0
 80006e6:	2b00      	cmp	r3, #0
 80006e8:	d001      	beq.n	80006ee <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80006ea:	f000 f851 	bl	8000790 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80006ee:	bf00      	nop
 80006f0:	bd80      	pop	{r7, pc}
 80006f2:	bf00      	nop
 80006f4:	2000008c 	.word	0x2000008c
 80006f8:	40004400 	.word	0x40004400

080006fc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	b088      	sub	sp, #32
 8000700:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000702:	f107 030c 	add.w	r3, r7, #12
 8000706:	2200      	movs	r2, #0
 8000708:	601a      	str	r2, [r3, #0]
 800070a:	605a      	str	r2, [r3, #4]
 800070c:	609a      	str	r2, [r3, #8]
 800070e:	60da      	str	r2, [r3, #12]
 8000710:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000712:	4b1d      	ldr	r3, [pc, #116]	; (8000788 <MX_GPIO_Init+0x8c>)
 8000714:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000716:	4a1c      	ldr	r2, [pc, #112]	; (8000788 <MX_GPIO_Init+0x8c>)
 8000718:	f043 0304 	orr.w	r3, r3, #4
 800071c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800071e:	4b1a      	ldr	r3, [pc, #104]	; (8000788 <MX_GPIO_Init+0x8c>)
 8000720:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000722:	f003 0304 	and.w	r3, r3, #4
 8000726:	60bb      	str	r3, [r7, #8]
 8000728:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800072a:	4b17      	ldr	r3, [pc, #92]	; (8000788 <MX_GPIO_Init+0x8c>)
 800072c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800072e:	4a16      	ldr	r2, [pc, #88]	; (8000788 <MX_GPIO_Init+0x8c>)
 8000730:	f043 0301 	orr.w	r3, r3, #1
 8000734:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000736:	4b14      	ldr	r3, [pc, #80]	; (8000788 <MX_GPIO_Init+0x8c>)
 8000738:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800073a:	f003 0301 	and.w	r3, r3, #1
 800073e:	607b      	str	r3, [r7, #4]
 8000740:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000742:	4b11      	ldr	r3, [pc, #68]	; (8000788 <MX_GPIO_Init+0x8c>)
 8000744:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000746:	4a10      	ldr	r2, [pc, #64]	; (8000788 <MX_GPIO_Init+0x8c>)
 8000748:	f043 0302 	orr.w	r3, r3, #2
 800074c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800074e:	4b0e      	ldr	r3, [pc, #56]	; (8000788 <MX_GPIO_Init+0x8c>)
 8000750:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000752:	f003 0302 	and.w	r3, r3, #2
 8000756:	603b      	str	r3, [r7, #0]
 8000758:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|SSD1331_CS_Pin|SSD1331_DC_Pin|SSD1331_RES_Pin, GPIO_PIN_RESET);
 800075a:	2200      	movs	r2, #0
 800075c:	2178      	movs	r1, #120	; 0x78
 800075e:	480b      	ldr	r0, [pc, #44]	; (800078c <MX_GPIO_Init+0x90>)
 8000760:	f000 ffc8 	bl	80016f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LD3_Pin SSD1331_CS_Pin SSD1331_DC_Pin SSD1331_RES_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|SSD1331_CS_Pin|SSD1331_DC_Pin|SSD1331_RES_Pin;
 8000764:	2378      	movs	r3, #120	; 0x78
 8000766:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000768:	2301      	movs	r3, #1
 800076a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800076c:	2300      	movs	r3, #0
 800076e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000770:	2300      	movs	r3, #0
 8000772:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000774:	f107 030c 	add.w	r3, r7, #12
 8000778:	4619      	mov	r1, r3
 800077a:	4804      	ldr	r0, [pc, #16]	; (800078c <MX_GPIO_Init+0x90>)
 800077c:	f000 fe50 	bl	8001420 <HAL_GPIO_Init>

}
 8000780:	bf00      	nop
 8000782:	3720      	adds	r7, #32
 8000784:	46bd      	mov	sp, r7
 8000786:	bd80      	pop	{r7, pc}
 8000788:	40021000 	.word	0x40021000
 800078c:	48000400 	.word	0x48000400

08000790 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000790:	b480      	push	{r7}
 8000792:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000794:	b672      	cpsid	i
}
 8000796:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000798:	e7fe      	b.n	8000798 <Error_Handler+0x8>
	...

0800079c <ssd1331_write_byte>:
   *						   0: Writes to the command register
   *						   1: Writes to the display data ram
   * @retval None
 **/
static void ssd1331_write_byte(uint8_t chData, uint8_t chCmd)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	b082      	sub	sp, #8
 80007a0:	af00      	add	r7, sp, #0
 80007a2:	4603      	mov	r3, r0
 80007a4:	460a      	mov	r2, r1
 80007a6:	71fb      	strb	r3, [r7, #7]
 80007a8:	4613      	mov	r3, r2
 80007aa:	71bb      	strb	r3, [r7, #6]
	if (chCmd) {
 80007ac:	79bb      	ldrb	r3, [r7, #6]
 80007ae:	2b00      	cmp	r3, #0
 80007b0:	d005      	beq.n	80007be <ssd1331_write_byte+0x22>
	 	__SSD1331_DC_SET();
 80007b2:	2201      	movs	r2, #1
 80007b4:	2120      	movs	r1, #32
 80007b6:	4811      	ldr	r0, [pc, #68]	; (80007fc <ssd1331_write_byte+0x60>)
 80007b8:	f000 ff9c 	bl	80016f4 <HAL_GPIO_WritePin>
 80007bc:	e004      	b.n	80007c8 <ssd1331_write_byte+0x2c>
	} else {
	 	__SSD1331_DC_CLR();
 80007be:	2200      	movs	r2, #0
 80007c0:	2120      	movs	r1, #32
 80007c2:	480e      	ldr	r0, [pc, #56]	; (80007fc <ssd1331_write_byte+0x60>)
 80007c4:	f000 ff96 	bl	80016f4 <HAL_GPIO_WritePin>
	}

	__SSD1331_CS_CLR();
 80007c8:	2200      	movs	r2, #0
 80007ca:	2110      	movs	r1, #16
 80007cc:	480b      	ldr	r0, [pc, #44]	; (80007fc <ssd1331_write_byte+0x60>)
 80007ce:	f000 ff91 	bl	80016f4 <HAL_GPIO_WritePin>
	__SSD1331_WRITE_BYTE(chData);
 80007d2:	1df9      	adds	r1, r7, #7
 80007d4:	2364      	movs	r3, #100	; 0x64
 80007d6:	2201      	movs	r2, #1
 80007d8:	4809      	ldr	r0, [pc, #36]	; (8000800 <ssd1331_write_byte+0x64>)
 80007da:	f002 f9ea 	bl	8002bb2 <HAL_SPI_Transmit>

	__SSD1331_CS_SET();
 80007de:	2201      	movs	r2, #1
 80007e0:	2110      	movs	r1, #16
 80007e2:	4806      	ldr	r0, [pc, #24]	; (80007fc <ssd1331_write_byte+0x60>)
 80007e4:	f000 ff86 	bl	80016f4 <HAL_GPIO_WritePin>
	__SSD1331_DC_SET();
 80007e8:	2201      	movs	r2, #1
 80007ea:	2120      	movs	r1, #32
 80007ec:	4803      	ldr	r0, [pc, #12]	; (80007fc <ssd1331_write_byte+0x60>)
 80007ee:	f000 ff81 	bl	80016f4 <HAL_GPIO_WritePin>
}
 80007f2:	bf00      	nop
 80007f4:	3708      	adds	r7, #8
 80007f6:	46bd      	mov	sp, r7
 80007f8:	bd80      	pop	{r7, pc}
 80007fa:	bf00      	nop
 80007fc:	48000400 	.word	0x48000400
 8000800:	20000028 	.word	0x20000028

08000804 <ssd1331_draw_point>:

void ssd1331_draw_point(uint8_t chXpos, uint8_t chYpos, uint16_t hwColor)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	b082      	sub	sp, #8
 8000808:	af00      	add	r7, sp, #0
 800080a:	4603      	mov	r3, r0
 800080c:	71fb      	strb	r3, [r7, #7]
 800080e:	460b      	mov	r3, r1
 8000810:	71bb      	strb	r3, [r7, #6]
 8000812:	4613      	mov	r3, r2
 8000814:	80bb      	strh	r3, [r7, #4]
	if (chXpos >= OLED_WIDTH || chYpos >= OLED_HEIGHT) {
 8000816:	79fb      	ldrb	r3, [r7, #7]
 8000818:	2b5f      	cmp	r3, #95	; 0x5f
 800081a:	d82b      	bhi.n	8000874 <ssd1331_draw_point+0x70>
 800081c:	79bb      	ldrb	r3, [r7, #6]
 800081e:	2b3f      	cmp	r3, #63	; 0x3f
 8000820:	d828      	bhi.n	8000874 <ssd1331_draw_point+0x70>
		return;
	}

    //set column point
    ssd1331_write_byte(SET_COLUMN_ADDRESS, SSD1331_CMD);
 8000822:	2100      	movs	r1, #0
 8000824:	2015      	movs	r0, #21
 8000826:	f7ff ffb9 	bl	800079c <ssd1331_write_byte>
    ssd1331_write_byte(chXpos, SSD1331_CMD);
 800082a:	79fb      	ldrb	r3, [r7, #7]
 800082c:	2100      	movs	r1, #0
 800082e:	4618      	mov	r0, r3
 8000830:	f7ff ffb4 	bl	800079c <ssd1331_write_byte>
    ssd1331_write_byte(OLED_WIDTH - 1, SSD1331_CMD);
 8000834:	2100      	movs	r1, #0
 8000836:	205f      	movs	r0, #95	; 0x5f
 8000838:	f7ff ffb0 	bl	800079c <ssd1331_write_byte>
    //set row point
    ssd1331_write_byte(SET_ROW_ADDRESS, SSD1331_CMD);
 800083c:	2100      	movs	r1, #0
 800083e:	2075      	movs	r0, #117	; 0x75
 8000840:	f7ff ffac 	bl	800079c <ssd1331_write_byte>
    ssd1331_write_byte(chYpos, SSD1331_CMD);
 8000844:	79bb      	ldrb	r3, [r7, #6]
 8000846:	2100      	movs	r1, #0
 8000848:	4618      	mov	r0, r3
 800084a:	f7ff ffa7 	bl	800079c <ssd1331_write_byte>
    ssd1331_write_byte(OLED_HEIGHT - 1, SSD1331_CMD);
 800084e:	2100      	movs	r1, #0
 8000850:	203f      	movs	r0, #63	; 0x3f
 8000852:	f7ff ffa3 	bl	800079c <ssd1331_write_byte>

    //fill 16bit colour
	ssd1331_write_byte(hwColor >> 8, SSD1331_DATA);
 8000856:	88bb      	ldrh	r3, [r7, #4]
 8000858:	0a1b      	lsrs	r3, r3, #8
 800085a:	b29b      	uxth	r3, r3
 800085c:	b2db      	uxtb	r3, r3
 800085e:	2101      	movs	r1, #1
 8000860:	4618      	mov	r0, r3
 8000862:	f7ff ff9b 	bl	800079c <ssd1331_write_byte>
	ssd1331_write_byte(hwColor, SSD1331_DATA);
 8000866:	88bb      	ldrh	r3, [r7, #4]
 8000868:	b2db      	uxtb	r3, r3
 800086a:	2101      	movs	r1, #1
 800086c:	4618      	mov	r0, r3
 800086e:	f7ff ff95 	bl	800079c <ssd1331_write_byte>
 8000872:	e000      	b.n	8000876 <ssd1331_draw_point+0x72>
		return;
 8000874:	bf00      	nop
}
 8000876:	3708      	adds	r7, #8
 8000878:	46bd      	mov	sp, r7
 800087a:	bd80      	pop	{r7, pc}

0800087c <ssd1331_draw_line>:

void ssd1331_draw_line(uint8_t chXpos0, uint8_t chYpos0, uint8_t chXpos1, uint8_t chYpos1, uint16_t hwColor)
{
 800087c:	b590      	push	{r4, r7, lr}
 800087e:	b08b      	sub	sp, #44	; 0x2c
 8000880:	af00      	add	r7, sp, #0
 8000882:	4604      	mov	r4, r0
 8000884:	4608      	mov	r0, r1
 8000886:	4611      	mov	r1, r2
 8000888:	461a      	mov	r2, r3
 800088a:	4623      	mov	r3, r4
 800088c:	71fb      	strb	r3, [r7, #7]
 800088e:	4603      	mov	r3, r0
 8000890:	71bb      	strb	r3, [r7, #6]
 8000892:	460b      	mov	r3, r1
 8000894:	717b      	strb	r3, [r7, #5]
 8000896:	4613      	mov	r3, r2
 8000898:	713b      	strb	r3, [r7, #4]
	int x = chXpos1 - chXpos0;
 800089a:	797a      	ldrb	r2, [r7, #5]
 800089c:	79fb      	ldrb	r3, [r7, #7]
 800089e:	1ad3      	subs	r3, r2, r3
 80008a0:	623b      	str	r3, [r7, #32]
    int y = chYpos1 - chYpos0;
 80008a2:	793a      	ldrb	r2, [r7, #4]
 80008a4:	79bb      	ldrb	r3, [r7, #6]
 80008a6:	1ad3      	subs	r3, r2, r3
 80008a8:	61fb      	str	r3, [r7, #28]
    int dx = abs(x), sx = chXpos0 < chXpos1 ? 1 : -1;
 80008aa:	6a3b      	ldr	r3, [r7, #32]
 80008ac:	2b00      	cmp	r3, #0
 80008ae:	bfb8      	it	lt
 80008b0:	425b      	neglt	r3, r3
 80008b2:	61bb      	str	r3, [r7, #24]
 80008b4:	79fa      	ldrb	r2, [r7, #7]
 80008b6:	797b      	ldrb	r3, [r7, #5]
 80008b8:	429a      	cmp	r2, r3
 80008ba:	d201      	bcs.n	80008c0 <ssd1331_draw_line+0x44>
 80008bc:	2301      	movs	r3, #1
 80008be:	e001      	b.n	80008c4 <ssd1331_draw_line+0x48>
 80008c0:	f04f 33ff 	mov.w	r3, #4294967295
 80008c4:	617b      	str	r3, [r7, #20]
    int dy = -abs(y), sy = chYpos0 < chYpos1 ? 1 : -1;
 80008c6:	69fb      	ldr	r3, [r7, #28]
 80008c8:	2b00      	cmp	r3, #0
 80008ca:	bfb8      	it	lt
 80008cc:	425b      	neglt	r3, r3
 80008ce:	425b      	negs	r3, r3
 80008d0:	613b      	str	r3, [r7, #16]
 80008d2:	79ba      	ldrb	r2, [r7, #6]
 80008d4:	793b      	ldrb	r3, [r7, #4]
 80008d6:	429a      	cmp	r2, r3
 80008d8:	d201      	bcs.n	80008de <ssd1331_draw_line+0x62>
 80008da:	2301      	movs	r3, #1
 80008dc:	e001      	b.n	80008e2 <ssd1331_draw_line+0x66>
 80008de:	f04f 33ff 	mov.w	r3, #4294967295
 80008e2:	60fb      	str	r3, [r7, #12]
    int err = dx + dy, e2;
 80008e4:	69ba      	ldr	r2, [r7, #24]
 80008e6:	693b      	ldr	r3, [r7, #16]
 80008e8:	4413      	add	r3, r2
 80008ea:	627b      	str	r3, [r7, #36]	; 0x24

	if (chXpos0 >= OLED_WIDTH || chYpos0 >= OLED_HEIGHT || chXpos1 >= OLED_WIDTH || chYpos1 >= OLED_HEIGHT) {
 80008ec:	79fb      	ldrb	r3, [r7, #7]
 80008ee:	2b5f      	cmp	r3, #95	; 0x5f
 80008f0:	d834      	bhi.n	800095c <ssd1331_draw_line+0xe0>
 80008f2:	79bb      	ldrb	r3, [r7, #6]
 80008f4:	2b3f      	cmp	r3, #63	; 0x3f
 80008f6:	d831      	bhi.n	800095c <ssd1331_draw_line+0xe0>
 80008f8:	797b      	ldrb	r3, [r7, #5]
 80008fa:	2b5f      	cmp	r3, #95	; 0x5f
 80008fc:	d82e      	bhi.n	800095c <ssd1331_draw_line+0xe0>
 80008fe:	793b      	ldrb	r3, [r7, #4]
 8000900:	2b3f      	cmp	r3, #63	; 0x3f
 8000902:	d82b      	bhi.n	800095c <ssd1331_draw_line+0xe0>
		return;
	}

    for (;;){
        ssd1331_draw_point(chXpos0, chYpos0 , hwColor);
 8000904:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 8000906:	79b9      	ldrb	r1, [r7, #6]
 8000908:	79fb      	ldrb	r3, [r7, #7]
 800090a:	4618      	mov	r0, r3
 800090c:	f7ff ff7a 	bl	8000804 <ssd1331_draw_point>
        e2 = 2 * err;
 8000910:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000912:	005b      	lsls	r3, r3, #1
 8000914:	60bb      	str	r3, [r7, #8]
        if (e2 >= dy) {
 8000916:	68ba      	ldr	r2, [r7, #8]
 8000918:	693b      	ldr	r3, [r7, #16]
 800091a:	429a      	cmp	r2, r3
 800091c:	db0c      	blt.n	8000938 <ssd1331_draw_line+0xbc>
            if (chXpos0 == chXpos1) break;
 800091e:	79fa      	ldrb	r2, [r7, #7]
 8000920:	797b      	ldrb	r3, [r7, #5]
 8000922:	429a      	cmp	r2, r3
 8000924:	d01c      	beq.n	8000960 <ssd1331_draw_line+0xe4>
            err += dy; chXpos0 += sx;
 8000926:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000928:	693b      	ldr	r3, [r7, #16]
 800092a:	4413      	add	r3, r2
 800092c:	627b      	str	r3, [r7, #36]	; 0x24
 800092e:	697b      	ldr	r3, [r7, #20]
 8000930:	b2da      	uxtb	r2, r3
 8000932:	79fb      	ldrb	r3, [r7, #7]
 8000934:	4413      	add	r3, r2
 8000936:	71fb      	strb	r3, [r7, #7]
        }
        if (e2 <= dx) {
 8000938:	68ba      	ldr	r2, [r7, #8]
 800093a:	69bb      	ldr	r3, [r7, #24]
 800093c:	429a      	cmp	r2, r3
 800093e:	dce1      	bgt.n	8000904 <ssd1331_draw_line+0x88>
            if (chYpos0 == chYpos1) break;
 8000940:	79ba      	ldrb	r2, [r7, #6]
 8000942:	793b      	ldrb	r3, [r7, #4]
 8000944:	429a      	cmp	r2, r3
 8000946:	d00d      	beq.n	8000964 <ssd1331_draw_line+0xe8>
            err += dx; chYpos0 += sy;
 8000948:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800094a:	69bb      	ldr	r3, [r7, #24]
 800094c:	4413      	add	r3, r2
 800094e:	627b      	str	r3, [r7, #36]	; 0x24
 8000950:	68fb      	ldr	r3, [r7, #12]
 8000952:	b2da      	uxtb	r2, r3
 8000954:	79bb      	ldrb	r3, [r7, #6]
 8000956:	4413      	add	r3, r2
 8000958:	71bb      	strb	r3, [r7, #6]
        ssd1331_draw_point(chXpos0, chYpos0 , hwColor);
 800095a:	e7d3      	b.n	8000904 <ssd1331_draw_line+0x88>
		return;
 800095c:	bf00      	nop
 800095e:	e002      	b.n	8000966 <ssd1331_draw_line+0xea>
            if (chXpos0 == chXpos1) break;
 8000960:	bf00      	nop
 8000962:	e000      	b.n	8000966 <ssd1331_draw_line+0xea>
            if (chYpos0 == chYpos1) break;
 8000964:	bf00      	nop
        }
    }
}
 8000966:	372c      	adds	r7, #44	; 0x2c
 8000968:	46bd      	mov	sp, r7
 800096a:	bd90      	pop	{r4, r7, pc}

0800096c <ssd1331_draw_v_line>:

void ssd1331_draw_v_line(uint8_t chXpos, uint8_t chYpos, uint8_t chHeight, uint16_t hwColor)
{
 800096c:	b590      	push	{r4, r7, lr}
 800096e:	b085      	sub	sp, #20
 8000970:	af00      	add	r7, sp, #0
 8000972:	4604      	mov	r4, r0
 8000974:	4608      	mov	r0, r1
 8000976:	4611      	mov	r1, r2
 8000978:	461a      	mov	r2, r3
 800097a:	4623      	mov	r3, r4
 800097c:	71fb      	strb	r3, [r7, #7]
 800097e:	4603      	mov	r3, r0
 8000980:	71bb      	strb	r3, [r7, #6]
 8000982:	460b      	mov	r3, r1
 8000984:	717b      	strb	r3, [r7, #5]
 8000986:	4613      	mov	r3, r2
 8000988:	807b      	strh	r3, [r7, #2]
  uint16_t i, y1 = MIN(chYpos + chHeight, OLED_HEIGHT - 1);
 800098a:	79ba      	ldrb	r2, [r7, #6]
 800098c:	797b      	ldrb	r3, [r7, #5]
 800098e:	4413      	add	r3, r2
 8000990:	2b3f      	cmp	r3, #63	; 0x3f
 8000992:	bfa8      	it	ge
 8000994:	233f      	movge	r3, #63	; 0x3f
 8000996:	81bb      	strh	r3, [r7, #12]

	if (chXpos >= OLED_WIDTH || chYpos >= OLED_HEIGHT) {
 8000998:	79fb      	ldrb	r3, [r7, #7]
 800099a:	2b5f      	cmp	r3, #95	; 0x5f
 800099c:	d814      	bhi.n	80009c8 <ssd1331_draw_v_line+0x5c>
 800099e:	79bb      	ldrb	r3, [r7, #6]
 80009a0:	2b3f      	cmp	r3, #63	; 0x3f
 80009a2:	d811      	bhi.n	80009c8 <ssd1331_draw_v_line+0x5c>
		return;
	}

    for (i = chYpos; i < y1; i ++) {
 80009a4:	79bb      	ldrb	r3, [r7, #6]
 80009a6:	81fb      	strh	r3, [r7, #14]
 80009a8:	e009      	b.n	80009be <ssd1331_draw_v_line+0x52>
        ssd1331_draw_point(chXpos, i, hwColor);
 80009aa:	89fb      	ldrh	r3, [r7, #14]
 80009ac:	b2d9      	uxtb	r1, r3
 80009ae:	887a      	ldrh	r2, [r7, #2]
 80009b0:	79fb      	ldrb	r3, [r7, #7]
 80009b2:	4618      	mov	r0, r3
 80009b4:	f7ff ff26 	bl	8000804 <ssd1331_draw_point>
    for (i = chYpos; i < y1; i ++) {
 80009b8:	89fb      	ldrh	r3, [r7, #14]
 80009ba:	3301      	adds	r3, #1
 80009bc:	81fb      	strh	r3, [r7, #14]
 80009be:	89fa      	ldrh	r2, [r7, #14]
 80009c0:	89bb      	ldrh	r3, [r7, #12]
 80009c2:	429a      	cmp	r2, r3
 80009c4:	d3f1      	bcc.n	80009aa <ssd1331_draw_v_line+0x3e>
 80009c6:	e000      	b.n	80009ca <ssd1331_draw_v_line+0x5e>
		return;
 80009c8:	bf00      	nop
    }
}
 80009ca:	3714      	adds	r7, #20
 80009cc:	46bd      	mov	sp, r7
 80009ce:	bd90      	pop	{r4, r7, pc}

080009d0 <ssd1331_draw_h_line>:

void ssd1331_draw_h_line(uint8_t chXpos, uint8_t chYpos, uint8_t chWidth, uint16_t hwColor)
{
 80009d0:	b590      	push	{r4, r7, lr}
 80009d2:	b085      	sub	sp, #20
 80009d4:	af00      	add	r7, sp, #0
 80009d6:	4604      	mov	r4, r0
 80009d8:	4608      	mov	r0, r1
 80009da:	4611      	mov	r1, r2
 80009dc:	461a      	mov	r2, r3
 80009de:	4623      	mov	r3, r4
 80009e0:	71fb      	strb	r3, [r7, #7]
 80009e2:	4603      	mov	r3, r0
 80009e4:	71bb      	strb	r3, [r7, #6]
 80009e6:	460b      	mov	r3, r1
 80009e8:	717b      	strb	r3, [r7, #5]
 80009ea:	4613      	mov	r3, r2
 80009ec:	807b      	strh	r3, [r7, #2]
	uint16_t i, x1 = MIN(chXpos + chWidth, OLED_WIDTH- 1);
 80009ee:	79fa      	ldrb	r2, [r7, #7]
 80009f0:	797b      	ldrb	r3, [r7, #5]
 80009f2:	4413      	add	r3, r2
 80009f4:	2b5f      	cmp	r3, #95	; 0x5f
 80009f6:	bfa8      	it	ge
 80009f8:	235f      	movge	r3, #95	; 0x5f
 80009fa:	81bb      	strh	r3, [r7, #12]

	if (chXpos >= OLED_WIDTH || chYpos >= OLED_HEIGHT) {
 80009fc:	79fb      	ldrb	r3, [r7, #7]
 80009fe:	2b5f      	cmp	r3, #95	; 0x5f
 8000a00:	d814      	bhi.n	8000a2c <ssd1331_draw_h_line+0x5c>
 8000a02:	79bb      	ldrb	r3, [r7, #6]
 8000a04:	2b3f      	cmp	r3, #63	; 0x3f
 8000a06:	d811      	bhi.n	8000a2c <ssd1331_draw_h_line+0x5c>
		return;
	}

    for (i = chXpos; i < x1; i ++) {
 8000a08:	79fb      	ldrb	r3, [r7, #7]
 8000a0a:	81fb      	strh	r3, [r7, #14]
 8000a0c:	e009      	b.n	8000a22 <ssd1331_draw_h_line+0x52>
        ssd1331_draw_point(i, chYpos, hwColor);
 8000a0e:	89fb      	ldrh	r3, [r7, #14]
 8000a10:	b2db      	uxtb	r3, r3
 8000a12:	887a      	ldrh	r2, [r7, #2]
 8000a14:	79b9      	ldrb	r1, [r7, #6]
 8000a16:	4618      	mov	r0, r3
 8000a18:	f7ff fef4 	bl	8000804 <ssd1331_draw_point>
    for (i = chXpos; i < x1; i ++) {
 8000a1c:	89fb      	ldrh	r3, [r7, #14]
 8000a1e:	3301      	adds	r3, #1
 8000a20:	81fb      	strh	r3, [r7, #14]
 8000a22:	89fa      	ldrh	r2, [r7, #14]
 8000a24:	89bb      	ldrh	r3, [r7, #12]
 8000a26:	429a      	cmp	r2, r3
 8000a28:	d3f1      	bcc.n	8000a0e <ssd1331_draw_h_line+0x3e>
 8000a2a:	e000      	b.n	8000a2e <ssd1331_draw_h_line+0x5e>
		return;
 8000a2c:	bf00      	nop
    }
}
 8000a2e:	3714      	adds	r7, #20
 8000a30:	46bd      	mov	sp, r7
 8000a32:	bd90      	pop	{r4, r7, pc}

08000a34 <ssd1331_draw_rect>:

void ssd1331_draw_rect(uint8_t chXpos, uint8_t chYpos, uint8_t chWidth, uint8_t chHeight, uint16_t hwColor)
{
 8000a34:	b590      	push	{r4, r7, lr}
 8000a36:	b083      	sub	sp, #12
 8000a38:	af00      	add	r7, sp, #0
 8000a3a:	4604      	mov	r4, r0
 8000a3c:	4608      	mov	r0, r1
 8000a3e:	4611      	mov	r1, r2
 8000a40:	461a      	mov	r2, r3
 8000a42:	4623      	mov	r3, r4
 8000a44:	71fb      	strb	r3, [r7, #7]
 8000a46:	4603      	mov	r3, r0
 8000a48:	71bb      	strb	r3, [r7, #6]
 8000a4a:	460b      	mov	r3, r1
 8000a4c:	717b      	strb	r3, [r7, #5]
 8000a4e:	4613      	mov	r3, r2
 8000a50:	713b      	strb	r3, [r7, #4]
	if (chXpos >= OLED_WIDTH || chYpos >= OLED_HEIGHT) {
 8000a52:	79fb      	ldrb	r3, [r7, #7]
 8000a54:	2b5f      	cmp	r3, #95	; 0x5f
 8000a56:	d823      	bhi.n	8000aa0 <ssd1331_draw_rect+0x6c>
 8000a58:	79bb      	ldrb	r3, [r7, #6]
 8000a5a:	2b3f      	cmp	r3, #63	; 0x3f
 8000a5c:	d820      	bhi.n	8000aa0 <ssd1331_draw_rect+0x6c>
		return;
	}

	ssd1331_draw_h_line(chXpos, chYpos, chWidth, hwColor);
 8000a5e:	8b3b      	ldrh	r3, [r7, #24]
 8000a60:	797a      	ldrb	r2, [r7, #5]
 8000a62:	79b9      	ldrb	r1, [r7, #6]
 8000a64:	79f8      	ldrb	r0, [r7, #7]
 8000a66:	f7ff ffb3 	bl	80009d0 <ssd1331_draw_h_line>
	ssd1331_draw_h_line(chXpos, chYpos + chHeight, chWidth, hwColor);
 8000a6a:	79ba      	ldrb	r2, [r7, #6]
 8000a6c:	793b      	ldrb	r3, [r7, #4]
 8000a6e:	4413      	add	r3, r2
 8000a70:	b2d9      	uxtb	r1, r3
 8000a72:	8b3b      	ldrh	r3, [r7, #24]
 8000a74:	797a      	ldrb	r2, [r7, #5]
 8000a76:	79f8      	ldrb	r0, [r7, #7]
 8000a78:	f7ff ffaa 	bl	80009d0 <ssd1331_draw_h_line>
	ssd1331_draw_v_line(chXpos, chYpos, chHeight, hwColor);
 8000a7c:	8b3b      	ldrh	r3, [r7, #24]
 8000a7e:	793a      	ldrb	r2, [r7, #4]
 8000a80:	79b9      	ldrb	r1, [r7, #6]
 8000a82:	79f8      	ldrb	r0, [r7, #7]
 8000a84:	f7ff ff72 	bl	800096c <ssd1331_draw_v_line>
	ssd1331_draw_v_line(chXpos + chWidth, chYpos, chHeight + 1, hwColor);
 8000a88:	79fa      	ldrb	r2, [r7, #7]
 8000a8a:	797b      	ldrb	r3, [r7, #5]
 8000a8c:	4413      	add	r3, r2
 8000a8e:	b2d8      	uxtb	r0, r3
 8000a90:	793b      	ldrb	r3, [r7, #4]
 8000a92:	3301      	adds	r3, #1
 8000a94:	b2da      	uxtb	r2, r3
 8000a96:	8b3b      	ldrh	r3, [r7, #24]
 8000a98:	79b9      	ldrb	r1, [r7, #6]
 8000a9a:	f7ff ff67 	bl	800096c <ssd1331_draw_v_line>
 8000a9e:	e000      	b.n	8000aa2 <ssd1331_draw_rect+0x6e>
		return;
 8000aa0:	bf00      	nop
}
 8000aa2:	370c      	adds	r7, #12
 8000aa4:	46bd      	mov	sp, r7
 8000aa6:	bd90      	pop	{r4, r7, pc}

08000aa8 <ssd1331_display_char>:
  * @param  chSize:
  * @param  chMode
  * @retval
**/
void ssd1331_display_char(uint8_t chXpos, uint8_t chYpos, uint8_t chChr, uint8_t chSize, uint16_t hwColor)
{
 8000aa8:	b590      	push	{r4, r7, lr}
 8000aaa:	b085      	sub	sp, #20
 8000aac:	af00      	add	r7, sp, #0
 8000aae:	4604      	mov	r4, r0
 8000ab0:	4608      	mov	r0, r1
 8000ab2:	4611      	mov	r1, r2
 8000ab4:	461a      	mov	r2, r3
 8000ab6:	4623      	mov	r3, r4
 8000ab8:	71fb      	strb	r3, [r7, #7]
 8000aba:	4603      	mov	r3, r0
 8000abc:	71bb      	strb	r3, [r7, #6]
 8000abe:	460b      	mov	r3, r1
 8000ac0:	717b      	strb	r3, [r7, #5]
 8000ac2:	4613      	mov	r3, r2
 8000ac4:	713b      	strb	r3, [r7, #4]
	uint8_t i, j, chTemp;
	uint8_t chYpos0 = chYpos;
 8000ac6:	79bb      	ldrb	r3, [r7, #6]
 8000ac8:	733b      	strb	r3, [r7, #12]

	chTemp = 0;
 8000aca:	2300      	movs	r3, #0
 8000acc:	737b      	strb	r3, [r7, #13]
	if (chXpos >= OLED_WIDTH || chYpos >= OLED_HEIGHT) {
 8000ace:	79fb      	ldrb	r3, [r7, #7]
 8000ad0:	2b5f      	cmp	r3, #95	; 0x5f
 8000ad2:	d857      	bhi.n	8000b84 <ssd1331_display_char+0xdc>
 8000ad4:	79bb      	ldrb	r3, [r7, #6]
 8000ad6:	2b3f      	cmp	r3, #63	; 0x3f
 8000ad8:	d854      	bhi.n	8000b84 <ssd1331_display_char+0xdc>
		return;
	}

    for (i = 0; i < chSize; i ++) {
 8000ada:	2300      	movs	r3, #0
 8000adc:	73fb      	strb	r3, [r7, #15]
 8000ade:	e04c      	b.n	8000b7a <ssd1331_display_char+0xd2>
		if (FONT_1206 == chSize) {
 8000ae0:	793b      	ldrb	r3, [r7, #4]
 8000ae2:	2b0c      	cmp	r3, #12
 8000ae4:	d10d      	bne.n	8000b02 <ssd1331_display_char+0x5a>
			chTemp = c_chFont1206[chChr - 0x20][i];
 8000ae6:	797b      	ldrb	r3, [r7, #5]
 8000ae8:	f1a3 0220 	sub.w	r2, r3, #32
 8000aec:	7bf9      	ldrb	r1, [r7, #15]
 8000aee:	4827      	ldr	r0, [pc, #156]	; (8000b8c <ssd1331_display_char+0xe4>)
 8000af0:	4613      	mov	r3, r2
 8000af2:	005b      	lsls	r3, r3, #1
 8000af4:	4413      	add	r3, r2
 8000af6:	009b      	lsls	r3, r3, #2
 8000af8:	4403      	add	r3, r0
 8000afa:	440b      	add	r3, r1
 8000afc:	781b      	ldrb	r3, [r3, #0]
 8000afe:	737b      	strb	r3, [r7, #13]
 8000b00:	e00c      	b.n	8000b1c <ssd1331_display_char+0x74>
		} else if (FONT_1608 == chSize) {
 8000b02:	793b      	ldrb	r3, [r7, #4]
 8000b04:	2b10      	cmp	r3, #16
 8000b06:	d109      	bne.n	8000b1c <ssd1331_display_char+0x74>
			chTemp = c_chFont1608[chChr - 0x20][i];
 8000b08:	797b      	ldrb	r3, [r7, #5]
 8000b0a:	f1a3 0220 	sub.w	r2, r3, #32
 8000b0e:	7bfb      	ldrb	r3, [r7, #15]
 8000b10:	491f      	ldr	r1, [pc, #124]	; (8000b90 <ssd1331_display_char+0xe8>)
 8000b12:	0112      	lsls	r2, r2, #4
 8000b14:	440a      	add	r2, r1
 8000b16:	4413      	add	r3, r2
 8000b18:	781b      	ldrb	r3, [r3, #0]
 8000b1a:	737b      	strb	r3, [r7, #13]
		}

        for (j = 0; j < 8; j ++) {
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	73bb      	strb	r3, [r7, #14]
 8000b20:	e025      	b.n	8000b6e <ssd1331_display_char+0xc6>
    		if (chTemp & 0x80) {
 8000b22:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8000b26:	2b00      	cmp	r3, #0
 8000b28:	da06      	bge.n	8000b38 <ssd1331_display_char+0x90>
		  ssd1331_draw_point(chXpos, chYpos, hwColor);
 8000b2a:	8c3a      	ldrh	r2, [r7, #32]
 8000b2c:	79b9      	ldrb	r1, [r7, #6]
 8000b2e:	79fb      	ldrb	r3, [r7, #7]
 8000b30:	4618      	mov	r0, r3
 8000b32:	f7ff fe67 	bl	8000804 <ssd1331_draw_point>
 8000b36:	e005      	b.n	8000b44 <ssd1331_display_char+0x9c>
    		} else {
		  ssd1331_draw_point(chXpos, chYpos, 0);
 8000b38:	79b9      	ldrb	r1, [r7, #6]
 8000b3a:	79fb      	ldrb	r3, [r7, #7]
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	4618      	mov	r0, r3
 8000b40:	f7ff fe60 	bl	8000804 <ssd1331_draw_point>
		}
			chTemp <<= 1;
 8000b44:	7b7b      	ldrb	r3, [r7, #13]
 8000b46:	005b      	lsls	r3, r3, #1
 8000b48:	737b      	strb	r3, [r7, #13]
			chYpos ++;
 8000b4a:	79bb      	ldrb	r3, [r7, #6]
 8000b4c:	3301      	adds	r3, #1
 8000b4e:	71bb      	strb	r3, [r7, #6]
			if ((chYpos - chYpos0) == chSize) {
 8000b50:	79ba      	ldrb	r2, [r7, #6]
 8000b52:	7b3b      	ldrb	r3, [r7, #12]
 8000b54:	1ad2      	subs	r2, r2, r3
 8000b56:	793b      	ldrb	r3, [r7, #4]
 8000b58:	429a      	cmp	r2, r3
 8000b5a:	d105      	bne.n	8000b68 <ssd1331_display_char+0xc0>
				chYpos = chYpos0;
 8000b5c:	7b3b      	ldrb	r3, [r7, #12]
 8000b5e:	71bb      	strb	r3, [r7, #6]
				chXpos ++;
 8000b60:	79fb      	ldrb	r3, [r7, #7]
 8000b62:	3301      	adds	r3, #1
 8000b64:	71fb      	strb	r3, [r7, #7]
				break;
 8000b66:	e005      	b.n	8000b74 <ssd1331_display_char+0xcc>
        for (j = 0; j < 8; j ++) {
 8000b68:	7bbb      	ldrb	r3, [r7, #14]
 8000b6a:	3301      	adds	r3, #1
 8000b6c:	73bb      	strb	r3, [r7, #14]
 8000b6e:	7bbb      	ldrb	r3, [r7, #14]
 8000b70:	2b07      	cmp	r3, #7
 8000b72:	d9d6      	bls.n	8000b22 <ssd1331_display_char+0x7a>
    for (i = 0; i < chSize; i ++) {
 8000b74:	7bfb      	ldrb	r3, [r7, #15]
 8000b76:	3301      	adds	r3, #1
 8000b78:	73fb      	strb	r3, [r7, #15]
 8000b7a:	7bfa      	ldrb	r2, [r7, #15]
 8000b7c:	793b      	ldrb	r3, [r7, #4]
 8000b7e:	429a      	cmp	r2, r3
 8000b80:	d3ae      	bcc.n	8000ae0 <ssd1331_display_char+0x38>
 8000b82:	e000      	b.n	8000b86 <ssd1331_display_char+0xde>
		return;
 8000b84:	bf00      	nop
			}
		}
    }
}
 8000b86:	3714      	adds	r7, #20
 8000b88:	46bd      	mov	sp, r7
 8000b8a:	bd90      	pop	{r4, r7, pc}
 8000b8c:	08003a1c 	.word	0x08003a1c
 8000b90:	08003e90 	.word	0x08003e90

08000b94 <_pow>:

static uint32_t _pow(uint8_t m, uint8_t n)
{
 8000b94:	b480      	push	{r7}
 8000b96:	b085      	sub	sp, #20
 8000b98:	af00      	add	r7, sp, #0
 8000b9a:	4603      	mov	r3, r0
 8000b9c:	460a      	mov	r2, r1
 8000b9e:	71fb      	strb	r3, [r7, #7]
 8000ba0:	4613      	mov	r3, r2
 8000ba2:	71bb      	strb	r3, [r7, #6]
	uint32_t result = 1;
 8000ba4:	2301      	movs	r3, #1
 8000ba6:	60fb      	str	r3, [r7, #12]

	while(n --) result *= m;
 8000ba8:	e004      	b.n	8000bb4 <_pow+0x20>
 8000baa:	79fa      	ldrb	r2, [r7, #7]
 8000bac:	68fb      	ldr	r3, [r7, #12]
 8000bae:	fb02 f303 	mul.w	r3, r2, r3
 8000bb2:	60fb      	str	r3, [r7, #12]
 8000bb4:	79bb      	ldrb	r3, [r7, #6]
 8000bb6:	1e5a      	subs	r2, r3, #1
 8000bb8:	71ba      	strb	r2, [r7, #6]
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	d1f5      	bne.n	8000baa <_pow+0x16>
	return result;
 8000bbe:	68fb      	ldr	r3, [r7, #12]
}
 8000bc0:	4618      	mov	r0, r3
 8000bc2:	3714      	adds	r7, #20
 8000bc4:	46bd      	mov	sp, r7
 8000bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bca:	4770      	bx	lr

08000bcc <ssd1331_display_num>:


void ssd1331_display_num(uint8_t chXpos, uint8_t chYpos, uint32_t chNum, uint8_t chLen, uint8_t chSize, uint16_t hwColor)
{
 8000bcc:	b590      	push	{r4, r7, lr}
 8000bce:	b087      	sub	sp, #28
 8000bd0:	af02      	add	r7, sp, #8
 8000bd2:	603a      	str	r2, [r7, #0]
 8000bd4:	461a      	mov	r2, r3
 8000bd6:	4603      	mov	r3, r0
 8000bd8:	71fb      	strb	r3, [r7, #7]
 8000bda:	460b      	mov	r3, r1
 8000bdc:	71bb      	strb	r3, [r7, #6]
 8000bde:	4613      	mov	r3, r2
 8000be0:	717b      	strb	r3, [r7, #5]
	uint8_t i;
	uint8_t chTemp, chShow = 0;
 8000be2:	2300      	movs	r3, #0
 8000be4:	73bb      	strb	r3, [r7, #14]

	if (chXpos >= OLED_WIDTH || chYpos >= OLED_HEIGHT) {
 8000be6:	79fb      	ldrb	r3, [r7, #7]
 8000be8:	2b5f      	cmp	r3, #95	; 0x5f
 8000bea:	d85e      	bhi.n	8000caa <ssd1331_display_num+0xde>
 8000bec:	79bb      	ldrb	r3, [r7, #6]
 8000bee:	2b3f      	cmp	r3, #63	; 0x3f
 8000bf0:	d85b      	bhi.n	8000caa <ssd1331_display_num+0xde>
		return;
	}

	for(i = 0; i < chLen; i ++) {
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	73fb      	strb	r3, [r7, #15]
 8000bf6:	e053      	b.n	8000ca0 <ssd1331_display_num+0xd4>
		chTemp = (chNum / _pow(10, chLen - i - 1)) % 10;
 8000bf8:	797a      	ldrb	r2, [r7, #5]
 8000bfa:	7bfb      	ldrb	r3, [r7, #15]
 8000bfc:	1ad3      	subs	r3, r2, r3
 8000bfe:	b2db      	uxtb	r3, r3
 8000c00:	3b01      	subs	r3, #1
 8000c02:	b2db      	uxtb	r3, r3
 8000c04:	4619      	mov	r1, r3
 8000c06:	200a      	movs	r0, #10
 8000c08:	f7ff ffc4 	bl	8000b94 <_pow>
 8000c0c:	4602      	mov	r2, r0
 8000c0e:	683b      	ldr	r3, [r7, #0]
 8000c10:	fbb3 f1f2 	udiv	r1, r3, r2
 8000c14:	4b27      	ldr	r3, [pc, #156]	; (8000cb4 <ssd1331_display_num+0xe8>)
 8000c16:	fba3 2301 	umull	r2, r3, r3, r1
 8000c1a:	08da      	lsrs	r2, r3, #3
 8000c1c:	4613      	mov	r3, r2
 8000c1e:	009b      	lsls	r3, r3, #2
 8000c20:	4413      	add	r3, r2
 8000c22:	005b      	lsls	r3, r3, #1
 8000c24:	1aca      	subs	r2, r1, r3
 8000c26:	4613      	mov	r3, r2
 8000c28:	737b      	strb	r3, [r7, #13]
		if(chShow == 0 && i < (chLen - 1)) {
 8000c2a:	7bbb      	ldrb	r3, [r7, #14]
 8000c2c:	2b00      	cmp	r3, #0
 8000c2e:	d11e      	bne.n	8000c6e <ssd1331_display_num+0xa2>
 8000c30:	7bfa      	ldrb	r2, [r7, #15]
 8000c32:	797b      	ldrb	r3, [r7, #5]
 8000c34:	3b01      	subs	r3, #1
 8000c36:	429a      	cmp	r2, r3
 8000c38:	da19      	bge.n	8000c6e <ssd1331_display_num+0xa2>
			if(chTemp == 0) {
 8000c3a:	7b7b      	ldrb	r3, [r7, #13]
 8000c3c:	2b00      	cmp	r3, #0
 8000c3e:	d114      	bne.n	8000c6a <ssd1331_display_num+0x9e>
				ssd1331_display_char(chXpos + (chSize / 2) * i, chYpos, ' ', chSize, hwColor);
 8000c40:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000c44:	085b      	lsrs	r3, r3, #1
 8000c46:	b2db      	uxtb	r3, r3
 8000c48:	7bfa      	ldrb	r2, [r7, #15]
 8000c4a:	fb12 f303 	smulbb	r3, r2, r3
 8000c4e:	b2da      	uxtb	r2, r3
 8000c50:	79fb      	ldrb	r3, [r7, #7]
 8000c52:	4413      	add	r3, r2
 8000c54:	b2d8      	uxtb	r0, r3
 8000c56:	f897 2020 	ldrb.w	r2, [r7, #32]
 8000c5a:	79b9      	ldrb	r1, [r7, #6]
 8000c5c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000c5e:	9300      	str	r3, [sp, #0]
 8000c60:	4613      	mov	r3, r2
 8000c62:	2220      	movs	r2, #32
 8000c64:	f7ff ff20 	bl	8000aa8 <ssd1331_display_char>
				continue;
 8000c68:	e017      	b.n	8000c9a <ssd1331_display_num+0xce>
			} else {
				chShow = 1;
 8000c6a:	2301      	movs	r3, #1
 8000c6c:	73bb      	strb	r3, [r7, #14]
			}
		}
	 	ssd1331_display_char(chXpos + (chSize / 2) * i, chYpos, chTemp + '0', chSize, hwColor);
 8000c6e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000c72:	085b      	lsrs	r3, r3, #1
 8000c74:	b2db      	uxtb	r3, r3
 8000c76:	7bfa      	ldrb	r2, [r7, #15]
 8000c78:	fb12 f303 	smulbb	r3, r2, r3
 8000c7c:	b2da      	uxtb	r2, r3
 8000c7e:	79fb      	ldrb	r3, [r7, #7]
 8000c80:	4413      	add	r3, r2
 8000c82:	b2d8      	uxtb	r0, r3
 8000c84:	7b7b      	ldrb	r3, [r7, #13]
 8000c86:	3330      	adds	r3, #48	; 0x30
 8000c88:	b2da      	uxtb	r2, r3
 8000c8a:	f897 4020 	ldrb.w	r4, [r7, #32]
 8000c8e:	79b9      	ldrb	r1, [r7, #6]
 8000c90:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000c92:	9300      	str	r3, [sp, #0]
 8000c94:	4623      	mov	r3, r4
 8000c96:	f7ff ff07 	bl	8000aa8 <ssd1331_display_char>
	for(i = 0; i < chLen; i ++) {
 8000c9a:	7bfb      	ldrb	r3, [r7, #15]
 8000c9c:	3301      	adds	r3, #1
 8000c9e:	73fb      	strb	r3, [r7, #15]
 8000ca0:	7bfa      	ldrb	r2, [r7, #15]
 8000ca2:	797b      	ldrb	r3, [r7, #5]
 8000ca4:	429a      	cmp	r2, r3
 8000ca6:	d3a7      	bcc.n	8000bf8 <ssd1331_display_num+0x2c>
 8000ca8:	e000      	b.n	8000cac <ssd1331_display_num+0xe0>
		return;
 8000caa:	bf00      	nop
	}
}
 8000cac:	3714      	adds	r7, #20
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	bd90      	pop	{r4, r7, pc}
 8000cb2:	bf00      	nop
 8000cb4:	cccccccd 	.word	0xcccccccd

08000cb8 <ssd1331_draw_bitmap>:
		}
	}
}

void ssd1331_draw_bitmap(uint8_t chXpos, uint8_t chYpos, const uint8_t *pchBmp, uint8_t chWidth, uint8_t chHeight, uint16_t hwColor)
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	b084      	sub	sp, #16
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	603a      	str	r2, [r7, #0]
 8000cc0:	461a      	mov	r2, r3
 8000cc2:	4603      	mov	r3, r0
 8000cc4:	71fb      	strb	r3, [r7, #7]
 8000cc6:	460b      	mov	r3, r1
 8000cc8:	71bb      	strb	r3, [r7, #6]
 8000cca:	4613      	mov	r3, r2
 8000ccc:	717b      	strb	r3, [r7, #5]
	uint16_t i, j, byteWidth = (chWidth + 7) / 8;
 8000cce:	797b      	ldrb	r3, [r7, #5]
 8000cd0:	3307      	adds	r3, #7
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	da00      	bge.n	8000cd8 <ssd1331_draw_bitmap+0x20>
 8000cd6:	3307      	adds	r3, #7
 8000cd8:	10db      	asrs	r3, r3, #3
 8000cda:	817b      	strh	r3, [r7, #10]

    for(j = 0; j < chHeight; j ++){
 8000cdc:	2300      	movs	r3, #0
 8000cde:	81bb      	strh	r3, [r7, #12]
 8000ce0:	e031      	b.n	8000d46 <ssd1331_draw_bitmap+0x8e>
        for(i = 0; i < chWidth; i ++ ) {
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	81fb      	strh	r3, [r7, #14]
 8000ce6:	e026      	b.n	8000d36 <ssd1331_draw_bitmap+0x7e>
            if(*(pchBmp + j * byteWidth + i / 8) & (128 >> (i & 7))) {
 8000ce8:	89bb      	ldrh	r3, [r7, #12]
 8000cea:	897a      	ldrh	r2, [r7, #10]
 8000cec:	fb02 f303 	mul.w	r3, r2, r3
 8000cf0:	461a      	mov	r2, r3
 8000cf2:	89fb      	ldrh	r3, [r7, #14]
 8000cf4:	08db      	lsrs	r3, r3, #3
 8000cf6:	b29b      	uxth	r3, r3
 8000cf8:	4413      	add	r3, r2
 8000cfa:	683a      	ldr	r2, [r7, #0]
 8000cfc:	4413      	add	r3, r2
 8000cfe:	781b      	ldrb	r3, [r3, #0]
 8000d00:	4619      	mov	r1, r3
 8000d02:	89fb      	ldrh	r3, [r7, #14]
 8000d04:	f003 0307 	and.w	r3, r3, #7
 8000d08:	2280      	movs	r2, #128	; 0x80
 8000d0a:	fa42 f303 	asr.w	r3, r2, r3
 8000d0e:	400b      	ands	r3, r1
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	d00d      	beq.n	8000d30 <ssd1331_draw_bitmap+0x78>
                ssd1331_draw_point(chXpos + i, chYpos + j, hwColor);
 8000d14:	89fb      	ldrh	r3, [r7, #14]
 8000d16:	b2da      	uxtb	r2, r3
 8000d18:	79fb      	ldrb	r3, [r7, #7]
 8000d1a:	4413      	add	r3, r2
 8000d1c:	b2d8      	uxtb	r0, r3
 8000d1e:	89bb      	ldrh	r3, [r7, #12]
 8000d20:	b2da      	uxtb	r2, r3
 8000d22:	79bb      	ldrb	r3, [r7, #6]
 8000d24:	4413      	add	r3, r2
 8000d26:	b2db      	uxtb	r3, r3
 8000d28:	8bba      	ldrh	r2, [r7, #28]
 8000d2a:	4619      	mov	r1, r3
 8000d2c:	f7ff fd6a 	bl	8000804 <ssd1331_draw_point>
        for(i = 0; i < chWidth; i ++ ) {
 8000d30:	89fb      	ldrh	r3, [r7, #14]
 8000d32:	3301      	adds	r3, #1
 8000d34:	81fb      	strh	r3, [r7, #14]
 8000d36:	797b      	ldrb	r3, [r7, #5]
 8000d38:	b29b      	uxth	r3, r3
 8000d3a:	89fa      	ldrh	r2, [r7, #14]
 8000d3c:	429a      	cmp	r2, r3
 8000d3e:	d3d3      	bcc.n	8000ce8 <ssd1331_draw_bitmap+0x30>
    for(j = 0; j < chHeight; j ++){
 8000d40:	89bb      	ldrh	r3, [r7, #12]
 8000d42:	3301      	adds	r3, #1
 8000d44:	81bb      	strh	r3, [r7, #12]
 8000d46:	7e3b      	ldrb	r3, [r7, #24]
 8000d48:	b29b      	uxth	r3, r3
 8000d4a:	89ba      	ldrh	r2, [r7, #12]
 8000d4c:	429a      	cmp	r2, r3
 8000d4e:	d3c8      	bcc.n	8000ce2 <ssd1331_draw_bitmap+0x2a>
            }
        }
    }
}
 8000d50:	bf00      	nop
 8000d52:	bf00      	nop
 8000d54:	3710      	adds	r7, #16
 8000d56:	46bd      	mov	sp, r7
 8000d58:	bd80      	pop	{r7, pc}

08000d5a <ssd1331_clear_screen>:

void ssd1331_clear_screen(uint16_t hwColor)
{
 8000d5a:	b580      	push	{r7, lr}
 8000d5c:	b084      	sub	sp, #16
 8000d5e:	af00      	add	r7, sp, #0
 8000d60:	4603      	mov	r3, r0
 8000d62:	80fb      	strh	r3, [r7, #6]
	uint16_t i, j;

	for(i = 0; i < OLED_HEIGHT; i ++){
 8000d64:	2300      	movs	r3, #0
 8000d66:	81fb      	strh	r3, [r7, #14]
 8000d68:	e013      	b.n	8000d92 <ssd1331_clear_screen+0x38>
		for(j = 0; j < OLED_WIDTH; j ++){
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	81bb      	strh	r3, [r7, #12]
 8000d6e:	e00a      	b.n	8000d86 <ssd1331_clear_screen+0x2c>
			ssd1331_draw_point(j, i, hwColor);
 8000d70:	89bb      	ldrh	r3, [r7, #12]
 8000d72:	b2db      	uxtb	r3, r3
 8000d74:	89fa      	ldrh	r2, [r7, #14]
 8000d76:	b2d1      	uxtb	r1, r2
 8000d78:	88fa      	ldrh	r2, [r7, #6]
 8000d7a:	4618      	mov	r0, r3
 8000d7c:	f7ff fd42 	bl	8000804 <ssd1331_draw_point>
		for(j = 0; j < OLED_WIDTH; j ++){
 8000d80:	89bb      	ldrh	r3, [r7, #12]
 8000d82:	3301      	adds	r3, #1
 8000d84:	81bb      	strh	r3, [r7, #12]
 8000d86:	89bb      	ldrh	r3, [r7, #12]
 8000d88:	2b5f      	cmp	r3, #95	; 0x5f
 8000d8a:	d9f1      	bls.n	8000d70 <ssd1331_clear_screen+0x16>
	for(i = 0; i < OLED_HEIGHT; i ++){
 8000d8c:	89fb      	ldrh	r3, [r7, #14]
 8000d8e:	3301      	adds	r3, #1
 8000d90:	81fb      	strh	r3, [r7, #14]
 8000d92:	89fb      	ldrh	r3, [r7, #14]
 8000d94:	2b3f      	cmp	r3, #63	; 0x3f
 8000d96:	d9e8      	bls.n	8000d6a <ssd1331_clear_screen+0x10>
		}
	}
}
 8000d98:	bf00      	nop
 8000d9a:	bf00      	nop
 8000d9c:	3710      	adds	r7, #16
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	bd80      	pop	{r7, pc}
	...

08000da4 <ssd1331_init>:


void ssd1331_init(void)
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	af00      	add	r7, sp, #0
  __SSD1331_RES_SET();  //RES set
 8000da8:	2201      	movs	r2, #1
 8000daa:	2140      	movs	r1, #64	; 0x40
 8000dac:	4852      	ldr	r0, [pc, #328]	; (8000ef8 <ssd1331_init+0x154>)
 8000dae:	f000 fca1 	bl	80016f4 <HAL_GPIO_WritePin>
  __SSD1331_CS_SET();
 8000db2:	2201      	movs	r2, #1
 8000db4:	2110      	movs	r1, #16
 8000db6:	4850      	ldr	r0, [pc, #320]	; (8000ef8 <ssd1331_init+0x154>)
 8000db8:	f000 fc9c 	bl	80016f4 <HAL_GPIO_WritePin>

  ssd1331_write_byte(DISPLAY_OFF, SSD1331_CMD);          //Display Off
 8000dbc:	2100      	movs	r1, #0
 8000dbe:	20ae      	movs	r0, #174	; 0xae
 8000dc0:	f7ff fcec 	bl	800079c <ssd1331_write_byte>
  ssd1331_write_byte(SET_CONTRAST_A, SSD1331_CMD);       //Set contrast for color A
 8000dc4:	2100      	movs	r1, #0
 8000dc6:	2081      	movs	r0, #129	; 0x81
 8000dc8:	f7ff fce8 	bl	800079c <ssd1331_write_byte>
  ssd1331_write_byte(0xFF, SSD1331_CMD);                     //145 0x91
 8000dcc:	2100      	movs	r1, #0
 8000dce:	20ff      	movs	r0, #255	; 0xff
 8000dd0:	f7ff fce4 	bl	800079c <ssd1331_write_byte>
  ssd1331_write_byte(SET_CONTRAST_B, SSD1331_CMD);       //Set contrast for color B
 8000dd4:	2100      	movs	r1, #0
 8000dd6:	2082      	movs	r0, #130	; 0x82
 8000dd8:	f7ff fce0 	bl	800079c <ssd1331_write_byte>
  ssd1331_write_byte(0xFF, SSD1331_CMD);                     //80 0x50
 8000ddc:	2100      	movs	r1, #0
 8000dde:	20ff      	movs	r0, #255	; 0xff
 8000de0:	f7ff fcdc 	bl	800079c <ssd1331_write_byte>
  ssd1331_write_byte(SET_CONTRAST_C, SSD1331_CMD);       //Set contrast for color C
 8000de4:	2100      	movs	r1, #0
 8000de6:	2083      	movs	r0, #131	; 0x83
 8000de8:	f7ff fcd8 	bl	800079c <ssd1331_write_byte>
  ssd1331_write_byte(0xFF, SSD1331_CMD);                     //125 0x7D
 8000dec:	2100      	movs	r1, #0
 8000dee:	20ff      	movs	r0, #255	; 0xff
 8000df0:	f7ff fcd4 	bl	800079c <ssd1331_write_byte>
  ssd1331_write_byte(MASTER_CURRENT_CONTROL, SSD1331_CMD);//master current control
 8000df4:	2100      	movs	r1, #0
 8000df6:	2087      	movs	r0, #135	; 0x87
 8000df8:	f7ff fcd0 	bl	800079c <ssd1331_write_byte>
  ssd1331_write_byte(0x06, SSD1331_CMD);                     //6
 8000dfc:	2100      	movs	r1, #0
 8000dfe:	2006      	movs	r0, #6
 8000e00:	f7ff fccc 	bl	800079c <ssd1331_write_byte>
  ssd1331_write_byte(SET_PRECHARGE_SPEED_A, SSD1331_CMD);//Set Second Pre-change Speed For ColorA
 8000e04:	2100      	movs	r1, #0
 8000e06:	208a      	movs	r0, #138	; 0x8a
 8000e08:	f7ff fcc8 	bl	800079c <ssd1331_write_byte>
  ssd1331_write_byte(0x64, SSD1331_CMD);                     //100
 8000e0c:	2100      	movs	r1, #0
 8000e0e:	2064      	movs	r0, #100	; 0x64
 8000e10:	f7ff fcc4 	bl	800079c <ssd1331_write_byte>
  ssd1331_write_byte(SET_PRECHARGE_SPEED_B, SSD1331_CMD);//Set Second Pre-change Speed For ColorB
 8000e14:	2100      	movs	r1, #0
 8000e16:	208b      	movs	r0, #139	; 0x8b
 8000e18:	f7ff fcc0 	bl	800079c <ssd1331_write_byte>
  ssd1331_write_byte(0x78, SSD1331_CMD);                     //120
 8000e1c:	2100      	movs	r1, #0
 8000e1e:	2078      	movs	r0, #120	; 0x78
 8000e20:	f7ff fcbc 	bl	800079c <ssd1331_write_byte>
  ssd1331_write_byte(SET_PRECHARGE_SPEED_C, SSD1331_CMD);//Set Second Pre-change Speed For ColorC
 8000e24:	2100      	movs	r1, #0
 8000e26:	208c      	movs	r0, #140	; 0x8c
 8000e28:	f7ff fcb8 	bl	800079c <ssd1331_write_byte>
  ssd1331_write_byte(0x64, SSD1331_CMD);                     //100
 8000e2c:	2100      	movs	r1, #0
 8000e2e:	2064      	movs	r0, #100	; 0x64
 8000e30:	f7ff fcb4 	bl	800079c <ssd1331_write_byte>
  ssd1331_write_byte(SET_REMAP, SSD1331_CMD);            //set remap & data format
 8000e34:	2100      	movs	r1, #0
 8000e36:	20a0      	movs	r0, #160	; 0xa0
 8000e38:	f7ff fcb0 	bl	800079c <ssd1331_write_byte>
  ssd1331_write_byte(0x72, SSD1331_CMD);                     //0x72
 8000e3c:	2100      	movs	r1, #0
 8000e3e:	2072      	movs	r0, #114	; 0x72
 8000e40:	f7ff fcac 	bl	800079c <ssd1331_write_byte>
  ssd1331_write_byte(SET_DISPLAY_START_LINE, SSD1331_CMD);//Set display Start Line
 8000e44:	2100      	movs	r1, #0
 8000e46:	20a1      	movs	r0, #161	; 0xa1
 8000e48:	f7ff fca8 	bl	800079c <ssd1331_write_byte>
  ssd1331_write_byte(0x0, SSD1331_CMD);
 8000e4c:	2100      	movs	r1, #0
 8000e4e:	2000      	movs	r0, #0
 8000e50:	f7ff fca4 	bl	800079c <ssd1331_write_byte>
  ssd1331_write_byte(SET_DISPLAY_OFFSET, SSD1331_CMD);   //Set display offset
 8000e54:	2100      	movs	r1, #0
 8000e56:	20a2      	movs	r0, #162	; 0xa2
 8000e58:	f7ff fca0 	bl	800079c <ssd1331_write_byte>
  ssd1331_write_byte(0x0, SSD1331_CMD);
 8000e5c:	2100      	movs	r1, #0
 8000e5e:	2000      	movs	r0, #0
 8000e60:	f7ff fc9c 	bl	800079c <ssd1331_write_byte>
  ssd1331_write_byte(NORMAL_DISPLAY, SSD1331_CMD);       //Set display mode
 8000e64:	2100      	movs	r1, #0
 8000e66:	20a4      	movs	r0, #164	; 0xa4
 8000e68:	f7ff fc98 	bl	800079c <ssd1331_write_byte>
  ssd1331_write_byte(SET_MULTIPLEX_RATIO, SSD1331_CMD);  //Set multiplex ratio
 8000e6c:	2100      	movs	r1, #0
 8000e6e:	20a8      	movs	r0, #168	; 0xa8
 8000e70:	f7ff fc94 	bl	800079c <ssd1331_write_byte>
  ssd1331_write_byte(0x3F, SSD1331_CMD);
 8000e74:	2100      	movs	r1, #0
 8000e76:	203f      	movs	r0, #63	; 0x3f
 8000e78:	f7ff fc90 	bl	800079c <ssd1331_write_byte>
  ssd1331_write_byte(SET_MASTER_CONFIGURE, SSD1331_CMD); //Set master configuration
 8000e7c:	2100      	movs	r1, #0
 8000e7e:	20ad      	movs	r0, #173	; 0xad
 8000e80:	f7ff fc8c 	bl	800079c <ssd1331_write_byte>
  ssd1331_write_byte(0x8E, SSD1331_CMD);
 8000e84:	2100      	movs	r1, #0
 8000e86:	208e      	movs	r0, #142	; 0x8e
 8000e88:	f7ff fc88 	bl	800079c <ssd1331_write_byte>
  ssd1331_write_byte(POWER_SAVE_MODE, SSD1331_CMD);      //Set Power Save Mode
 8000e8c:	2100      	movs	r1, #0
 8000e8e:	20b0      	movs	r0, #176	; 0xb0
 8000e90:	f7ff fc84 	bl	800079c <ssd1331_write_byte>
  ssd1331_write_byte(0x00, SSD1331_CMD);                     //0x00
 8000e94:	2100      	movs	r1, #0
 8000e96:	2000      	movs	r0, #0
 8000e98:	f7ff fc80 	bl	800079c <ssd1331_write_byte>
  ssd1331_write_byte(PHASE_PERIOD_ADJUSTMENT, SSD1331_CMD);//phase 1 and 2 period adjustment
 8000e9c:	2100      	movs	r1, #0
 8000e9e:	20b1      	movs	r0, #177	; 0xb1
 8000ea0:	f7ff fc7c 	bl	800079c <ssd1331_write_byte>
  ssd1331_write_byte(0x31, SSD1331_CMD);                     //0x31
 8000ea4:	2100      	movs	r1, #0
 8000ea6:	2031      	movs	r0, #49	; 0x31
 8000ea8:	f7ff fc78 	bl	800079c <ssd1331_write_byte>
  ssd1331_write_byte(DISPLAY_CLOCK_DIV, SSD1331_CMD);    //display clock divider/oscillator frequency
 8000eac:	2100      	movs	r1, #0
 8000eae:	20b3      	movs	r0, #179	; 0xb3
 8000eb0:	f7ff fc74 	bl	800079c <ssd1331_write_byte>
  ssd1331_write_byte(0xF0, SSD1331_CMD);
 8000eb4:	2100      	movs	r1, #0
 8000eb6:	20f0      	movs	r0, #240	; 0xf0
 8000eb8:	f7ff fc70 	bl	800079c <ssd1331_write_byte>
  ssd1331_write_byte(SET_PRECHARGE_VOLTAGE, SSD1331_CMD);//Set Pre-Change Level
 8000ebc:	2100      	movs	r1, #0
 8000ebe:	20bb      	movs	r0, #187	; 0xbb
 8000ec0:	f7ff fc6c 	bl	800079c <ssd1331_write_byte>
  ssd1331_write_byte(0x3A, SSD1331_CMD);
 8000ec4:	2100      	movs	r1, #0
 8000ec6:	203a      	movs	r0, #58	; 0x3a
 8000ec8:	f7ff fc68 	bl	800079c <ssd1331_write_byte>
  ssd1331_write_byte(SET_V_VOLTAGE, SSD1331_CMD);        //Set vcomH
 8000ecc:	2100      	movs	r1, #0
 8000ece:	20be      	movs	r0, #190	; 0xbe
 8000ed0:	f7ff fc64 	bl	800079c <ssd1331_write_byte>
  ssd1331_write_byte(0x3E, SSD1331_CMD);
 8000ed4:	2100      	movs	r1, #0
 8000ed6:	203e      	movs	r0, #62	; 0x3e
 8000ed8:	f7ff fc60 	bl	800079c <ssd1331_write_byte>
  ssd1331_write_byte(DEACTIVE_SCROLLING, SSD1331_CMD);   //disable scrolling
 8000edc:	2100      	movs	r1, #0
 8000ede:	202e      	movs	r0, #46	; 0x2e
 8000ee0:	f7ff fc5c 	bl	800079c <ssd1331_write_byte>
  ssd1331_write_byte(NORMAL_BRIGHTNESS_DISPLAY_ON, SSD1331_CMD);//set display on
 8000ee4:	2100      	movs	r1, #0
 8000ee6:	20af      	movs	r0, #175	; 0xaf
 8000ee8:	f7ff fc58 	bl	800079c <ssd1331_write_byte>

  //ssd1331_fill_rect(0, 0, 96, 64, 0x0000);
  ssd1331_clear_screen(0x0000);
 8000eec:	2000      	movs	r0, #0
 8000eee:	f7ff ff34 	bl	8000d5a <ssd1331_clear_screen>
}
 8000ef2:	bf00      	nop
 8000ef4:	bd80      	pop	{r7, pc}
 8000ef6:	bf00      	nop
 8000ef8:	48000400 	.word	0x48000400

08000efc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000efc:	b480      	push	{r7}
 8000efe:	b083      	sub	sp, #12
 8000f00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f02:	4b0f      	ldr	r3, [pc, #60]	; (8000f40 <HAL_MspInit+0x44>)
 8000f04:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f06:	4a0e      	ldr	r2, [pc, #56]	; (8000f40 <HAL_MspInit+0x44>)
 8000f08:	f043 0301 	orr.w	r3, r3, #1
 8000f0c:	6613      	str	r3, [r2, #96]	; 0x60
 8000f0e:	4b0c      	ldr	r3, [pc, #48]	; (8000f40 <HAL_MspInit+0x44>)
 8000f10:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f12:	f003 0301 	and.w	r3, r3, #1
 8000f16:	607b      	str	r3, [r7, #4]
 8000f18:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f1a:	4b09      	ldr	r3, [pc, #36]	; (8000f40 <HAL_MspInit+0x44>)
 8000f1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f1e:	4a08      	ldr	r2, [pc, #32]	; (8000f40 <HAL_MspInit+0x44>)
 8000f20:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f24:	6593      	str	r3, [r2, #88]	; 0x58
 8000f26:	4b06      	ldr	r3, [pc, #24]	; (8000f40 <HAL_MspInit+0x44>)
 8000f28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f2e:	603b      	str	r3, [r7, #0]
 8000f30:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f32:	bf00      	nop
 8000f34:	370c      	adds	r7, #12
 8000f36:	46bd      	mov	sp, r7
 8000f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3c:	4770      	bx	lr
 8000f3e:	bf00      	nop
 8000f40:	40021000 	.word	0x40021000

08000f44 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b08a      	sub	sp, #40	; 0x28
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f4c:	f107 0314 	add.w	r3, r7, #20
 8000f50:	2200      	movs	r2, #0
 8000f52:	601a      	str	r2, [r3, #0]
 8000f54:	605a      	str	r2, [r3, #4]
 8000f56:	609a      	str	r2, [r3, #8]
 8000f58:	60da      	str	r2, [r3, #12]
 8000f5a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	4a18      	ldr	r2, [pc, #96]	; (8000fc4 <HAL_SPI_MspInit+0x80>)
 8000f62:	4293      	cmp	r3, r2
 8000f64:	d129      	bne.n	8000fba <HAL_SPI_MspInit+0x76>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000f66:	4b18      	ldr	r3, [pc, #96]	; (8000fc8 <HAL_SPI_MspInit+0x84>)
 8000f68:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f6a:	4a17      	ldr	r2, [pc, #92]	; (8000fc8 <HAL_SPI_MspInit+0x84>)
 8000f6c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000f70:	6613      	str	r3, [r2, #96]	; 0x60
 8000f72:	4b15      	ldr	r3, [pc, #84]	; (8000fc8 <HAL_SPI_MspInit+0x84>)
 8000f74:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f76:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000f7a:	613b      	str	r3, [r7, #16]
 8000f7c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f7e:	4b12      	ldr	r3, [pc, #72]	; (8000fc8 <HAL_SPI_MspInit+0x84>)
 8000f80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f82:	4a11      	ldr	r2, [pc, #68]	; (8000fc8 <HAL_SPI_MspInit+0x84>)
 8000f84:	f043 0301 	orr.w	r3, r3, #1
 8000f88:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f8a:	4b0f      	ldr	r3, [pc, #60]	; (8000fc8 <HAL_SPI_MspInit+0x84>)
 8000f8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f8e:	f003 0301 	and.w	r3, r3, #1
 8000f92:	60fb      	str	r3, [r7, #12]
 8000f94:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA12     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_12;
 8000f96:	f44f 5381 	mov.w	r3, #4128	; 0x1020
 8000f9a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f9c:	2302      	movs	r3, #2
 8000f9e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fa4:	2303      	movs	r3, #3
 8000fa6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000fa8:	2305      	movs	r3, #5
 8000faa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fac:	f107 0314 	add.w	r3, r7, #20
 8000fb0:	4619      	mov	r1, r3
 8000fb2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000fb6:	f000 fa33 	bl	8001420 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000fba:	bf00      	nop
 8000fbc:	3728      	adds	r7, #40	; 0x28
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	bd80      	pop	{r7, pc}
 8000fc2:	bf00      	nop
 8000fc4:	40013000 	.word	0x40013000
 8000fc8:	40021000 	.word	0x40021000

08000fcc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b09e      	sub	sp, #120	; 0x78
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fd4:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000fd8:	2200      	movs	r2, #0
 8000fda:	601a      	str	r2, [r3, #0]
 8000fdc:	605a      	str	r2, [r3, #4]
 8000fde:	609a      	str	r2, [r3, #8]
 8000fe0:	60da      	str	r2, [r3, #12]
 8000fe2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000fe4:	f107 0310 	add.w	r3, r7, #16
 8000fe8:	2254      	movs	r2, #84	; 0x54
 8000fea:	2100      	movs	r1, #0
 8000fec:	4618      	mov	r0, r3
 8000fee:	f002 fd01 	bl	80039f4 <memset>
  if(huart->Instance==USART2)
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	4a28      	ldr	r2, [pc, #160]	; (8001098 <HAL_UART_MspInit+0xcc>)
 8000ff8:	4293      	cmp	r3, r2
 8000ffa:	d148      	bne.n	800108e <HAL_UART_MspInit+0xc2>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000ffc:	2302      	movs	r3, #2
 8000ffe:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001000:	2300      	movs	r3, #0
 8001002:	637b      	str	r3, [r7, #52]	; 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001004:	f107 0310 	add.w	r3, r7, #16
 8001008:	4618      	mov	r0, r3
 800100a:	f001 fa37 	bl	800247c <HAL_RCCEx_PeriphCLKConfig>
 800100e:	4603      	mov	r3, r0
 8001010:	2b00      	cmp	r3, #0
 8001012:	d001      	beq.n	8001018 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001014:	f7ff fbbc 	bl	8000790 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001018:	4b20      	ldr	r3, [pc, #128]	; (800109c <HAL_UART_MspInit+0xd0>)
 800101a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800101c:	4a1f      	ldr	r2, [pc, #124]	; (800109c <HAL_UART_MspInit+0xd0>)
 800101e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001022:	6593      	str	r3, [r2, #88]	; 0x58
 8001024:	4b1d      	ldr	r3, [pc, #116]	; (800109c <HAL_UART_MspInit+0xd0>)
 8001026:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001028:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800102c:	60fb      	str	r3, [r7, #12]
 800102e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001030:	4b1a      	ldr	r3, [pc, #104]	; (800109c <HAL_UART_MspInit+0xd0>)
 8001032:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001034:	4a19      	ldr	r2, [pc, #100]	; (800109c <HAL_UART_MspInit+0xd0>)
 8001036:	f043 0301 	orr.w	r3, r3, #1
 800103a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800103c:	4b17      	ldr	r3, [pc, #92]	; (800109c <HAL_UART_MspInit+0xd0>)
 800103e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001040:	f003 0301 	and.w	r3, r3, #1
 8001044:	60bb      	str	r3, [r7, #8]
 8001046:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15 (JTDI)     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 8001048:	2304      	movs	r3, #4
 800104a:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800104c:	2302      	movs	r3, #2
 800104e:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001050:	2300      	movs	r3, #0
 8001052:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001054:	2303      	movs	r3, #3
 8001056:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001058:	2307      	movs	r3, #7
 800105a:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 800105c:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001060:	4619      	mov	r1, r3
 8001062:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001066:	f000 f9db 	bl	8001420 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_RX_Pin;
 800106a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800106e:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001070:	2302      	movs	r3, #2
 8001072:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001074:	2300      	movs	r3, #0
 8001076:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001078:	2303      	movs	r3, #3
 800107a:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 800107c:	2303      	movs	r3, #3
 800107e:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8001080:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001084:	4619      	mov	r1, r3
 8001086:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800108a:	f000 f9c9 	bl	8001420 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800108e:	bf00      	nop
 8001090:	3778      	adds	r7, #120	; 0x78
 8001092:	46bd      	mov	sp, r7
 8001094:	bd80      	pop	{r7, pc}
 8001096:	bf00      	nop
 8001098:	40004400 	.word	0x40004400
 800109c:	40021000 	.word	0x40021000

080010a0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80010a0:	b480      	push	{r7}
 80010a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80010a4:	e7fe      	b.n	80010a4 <NMI_Handler+0x4>

080010a6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80010a6:	b480      	push	{r7}
 80010a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80010aa:	e7fe      	b.n	80010aa <HardFault_Handler+0x4>

080010ac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80010ac:	b480      	push	{r7}
 80010ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80010b0:	e7fe      	b.n	80010b0 <MemManage_Handler+0x4>

080010b2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80010b2:	b480      	push	{r7}
 80010b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80010b6:	e7fe      	b.n	80010b6 <BusFault_Handler+0x4>

080010b8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80010b8:	b480      	push	{r7}
 80010ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80010bc:	e7fe      	b.n	80010bc <UsageFault_Handler+0x4>

080010be <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80010be:	b480      	push	{r7}
 80010c0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80010c2:	bf00      	nop
 80010c4:	46bd      	mov	sp, r7
 80010c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ca:	4770      	bx	lr

080010cc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80010cc:	b480      	push	{r7}
 80010ce:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80010d0:	bf00      	nop
 80010d2:	46bd      	mov	sp, r7
 80010d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d8:	4770      	bx	lr

080010da <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80010da:	b480      	push	{r7}
 80010dc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80010de:	bf00      	nop
 80010e0:	46bd      	mov	sp, r7
 80010e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e6:	4770      	bx	lr

080010e8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80010ec:	f000 f892 	bl	8001214 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80010f0:	bf00      	nop
 80010f2:	bd80      	pop	{r7, pc}

080010f4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80010f4:	b480      	push	{r7}
 80010f6:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80010f8:	4b06      	ldr	r3, [pc, #24]	; (8001114 <SystemInit+0x20>)
 80010fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80010fe:	4a05      	ldr	r2, [pc, #20]	; (8001114 <SystemInit+0x20>)
 8001100:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001104:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001108:	bf00      	nop
 800110a:	46bd      	mov	sp, r7
 800110c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001110:	4770      	bx	lr
 8001112:	bf00      	nop
 8001114:	e000ed00 	.word	0xe000ed00

08001118 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001118:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001150 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 800111c:	f7ff ffea 	bl	80010f4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001120:	480c      	ldr	r0, [pc, #48]	; (8001154 <LoopForever+0x6>)
  ldr r1, =_edata
 8001122:	490d      	ldr	r1, [pc, #52]	; (8001158 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001124:	4a0d      	ldr	r2, [pc, #52]	; (800115c <LoopForever+0xe>)
  movs r3, #0
 8001126:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001128:	e002      	b.n	8001130 <LoopCopyDataInit>

0800112a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800112a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800112c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800112e:	3304      	adds	r3, #4

08001130 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001130:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001132:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001134:	d3f9      	bcc.n	800112a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001136:	4a0a      	ldr	r2, [pc, #40]	; (8001160 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001138:	4c0a      	ldr	r4, [pc, #40]	; (8001164 <LoopForever+0x16>)
  movs r3, #0
 800113a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800113c:	e001      	b.n	8001142 <LoopFillZerobss>

0800113e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800113e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001140:	3204      	adds	r2, #4

08001142 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001142:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001144:	d3fb      	bcc.n	800113e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001146:	f002 fc31 	bl	80039ac <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800114a:	f7ff f9c1 	bl	80004d0 <main>

0800114e <LoopForever>:

LoopForever:
    b LoopForever
 800114e:	e7fe      	b.n	800114e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001150:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8001154:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001158:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 800115c:	08004514 	.word	0x08004514
  ldr r2, =_sbss
 8001160:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001164:	20000114 	.word	0x20000114

08001168 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001168:	e7fe      	b.n	8001168 <ADC1_IRQHandler>

0800116a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800116a:	b580      	push	{r7, lr}
 800116c:	b082      	sub	sp, #8
 800116e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001170:	2300      	movs	r3, #0
 8001172:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001174:	2003      	movs	r0, #3
 8001176:	f000 f91f 	bl	80013b8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800117a:	2000      	movs	r0, #0
 800117c:	f000 f80e 	bl	800119c <HAL_InitTick>
 8001180:	4603      	mov	r3, r0
 8001182:	2b00      	cmp	r3, #0
 8001184:	d002      	beq.n	800118c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001186:	2301      	movs	r3, #1
 8001188:	71fb      	strb	r3, [r7, #7]
 800118a:	e001      	b.n	8001190 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800118c:	f7ff feb6 	bl	8000efc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001190:	79fb      	ldrb	r3, [r7, #7]
}
 8001192:	4618      	mov	r0, r3
 8001194:	3708      	adds	r7, #8
 8001196:	46bd      	mov	sp, r7
 8001198:	bd80      	pop	{r7, pc}
	...

0800119c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	b084      	sub	sp, #16
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80011a4:	2300      	movs	r3, #0
 80011a6:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80011a8:	4b17      	ldr	r3, [pc, #92]	; (8001208 <HAL_InitTick+0x6c>)
 80011aa:	781b      	ldrb	r3, [r3, #0]
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d023      	beq.n	80011f8 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80011b0:	4b16      	ldr	r3, [pc, #88]	; (800120c <HAL_InitTick+0x70>)
 80011b2:	681a      	ldr	r2, [r3, #0]
 80011b4:	4b14      	ldr	r3, [pc, #80]	; (8001208 <HAL_InitTick+0x6c>)
 80011b6:	781b      	ldrb	r3, [r3, #0]
 80011b8:	4619      	mov	r1, r3
 80011ba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011be:	fbb3 f3f1 	udiv	r3, r3, r1
 80011c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80011c6:	4618      	mov	r0, r3
 80011c8:	f000 f91d 	bl	8001406 <HAL_SYSTICK_Config>
 80011cc:	4603      	mov	r3, r0
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d10f      	bne.n	80011f2 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	2b0f      	cmp	r3, #15
 80011d6:	d809      	bhi.n	80011ec <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80011d8:	2200      	movs	r2, #0
 80011da:	6879      	ldr	r1, [r7, #4]
 80011dc:	f04f 30ff 	mov.w	r0, #4294967295
 80011e0:	f000 f8f5 	bl	80013ce <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80011e4:	4a0a      	ldr	r2, [pc, #40]	; (8001210 <HAL_InitTick+0x74>)
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	6013      	str	r3, [r2, #0]
 80011ea:	e007      	b.n	80011fc <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80011ec:	2301      	movs	r3, #1
 80011ee:	73fb      	strb	r3, [r7, #15]
 80011f0:	e004      	b.n	80011fc <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80011f2:	2301      	movs	r3, #1
 80011f4:	73fb      	strb	r3, [r7, #15]
 80011f6:	e001      	b.n	80011fc <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80011f8:	2301      	movs	r3, #1
 80011fa:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80011fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80011fe:	4618      	mov	r0, r3
 8001200:	3710      	adds	r7, #16
 8001202:	46bd      	mov	sp, r7
 8001204:	bd80      	pop	{r7, pc}
 8001206:	bf00      	nop
 8001208:	20000008 	.word	0x20000008
 800120c:	20000000 	.word	0x20000000
 8001210:	20000004 	.word	0x20000004

08001214 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001214:	b480      	push	{r7}
 8001216:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001218:	4b06      	ldr	r3, [pc, #24]	; (8001234 <HAL_IncTick+0x20>)
 800121a:	781b      	ldrb	r3, [r3, #0]
 800121c:	461a      	mov	r2, r3
 800121e:	4b06      	ldr	r3, [pc, #24]	; (8001238 <HAL_IncTick+0x24>)
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	4413      	add	r3, r2
 8001224:	4a04      	ldr	r2, [pc, #16]	; (8001238 <HAL_IncTick+0x24>)
 8001226:	6013      	str	r3, [r2, #0]
}
 8001228:	bf00      	nop
 800122a:	46bd      	mov	sp, r7
 800122c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001230:	4770      	bx	lr
 8001232:	bf00      	nop
 8001234:	20000008 	.word	0x20000008
 8001238:	20000110 	.word	0x20000110

0800123c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800123c:	b480      	push	{r7}
 800123e:	af00      	add	r7, sp, #0
  return uwTick;
 8001240:	4b03      	ldr	r3, [pc, #12]	; (8001250 <HAL_GetTick+0x14>)
 8001242:	681b      	ldr	r3, [r3, #0]
}
 8001244:	4618      	mov	r0, r3
 8001246:	46bd      	mov	sp, r7
 8001248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800124c:	4770      	bx	lr
 800124e:	bf00      	nop
 8001250:	20000110 	.word	0x20000110

08001254 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001254:	b480      	push	{r7}
 8001256:	b085      	sub	sp, #20
 8001258:	af00      	add	r7, sp, #0
 800125a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	f003 0307 	and.w	r3, r3, #7
 8001262:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001264:	4b0c      	ldr	r3, [pc, #48]	; (8001298 <__NVIC_SetPriorityGrouping+0x44>)
 8001266:	68db      	ldr	r3, [r3, #12]
 8001268:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800126a:	68ba      	ldr	r2, [r7, #8]
 800126c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001270:	4013      	ands	r3, r2
 8001272:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001274:	68fb      	ldr	r3, [r7, #12]
 8001276:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001278:	68bb      	ldr	r3, [r7, #8]
 800127a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800127c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001280:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001284:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001286:	4a04      	ldr	r2, [pc, #16]	; (8001298 <__NVIC_SetPriorityGrouping+0x44>)
 8001288:	68bb      	ldr	r3, [r7, #8]
 800128a:	60d3      	str	r3, [r2, #12]
}
 800128c:	bf00      	nop
 800128e:	3714      	adds	r7, #20
 8001290:	46bd      	mov	sp, r7
 8001292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001296:	4770      	bx	lr
 8001298:	e000ed00 	.word	0xe000ed00

0800129c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800129c:	b480      	push	{r7}
 800129e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80012a0:	4b04      	ldr	r3, [pc, #16]	; (80012b4 <__NVIC_GetPriorityGrouping+0x18>)
 80012a2:	68db      	ldr	r3, [r3, #12]
 80012a4:	0a1b      	lsrs	r3, r3, #8
 80012a6:	f003 0307 	and.w	r3, r3, #7
}
 80012aa:	4618      	mov	r0, r3
 80012ac:	46bd      	mov	sp, r7
 80012ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b2:	4770      	bx	lr
 80012b4:	e000ed00 	.word	0xe000ed00

080012b8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80012b8:	b480      	push	{r7}
 80012ba:	b083      	sub	sp, #12
 80012bc:	af00      	add	r7, sp, #0
 80012be:	4603      	mov	r3, r0
 80012c0:	6039      	str	r1, [r7, #0]
 80012c2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	db0a      	blt.n	80012e2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012cc:	683b      	ldr	r3, [r7, #0]
 80012ce:	b2da      	uxtb	r2, r3
 80012d0:	490c      	ldr	r1, [pc, #48]	; (8001304 <__NVIC_SetPriority+0x4c>)
 80012d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012d6:	0112      	lsls	r2, r2, #4
 80012d8:	b2d2      	uxtb	r2, r2
 80012da:	440b      	add	r3, r1
 80012dc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80012e0:	e00a      	b.n	80012f8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012e2:	683b      	ldr	r3, [r7, #0]
 80012e4:	b2da      	uxtb	r2, r3
 80012e6:	4908      	ldr	r1, [pc, #32]	; (8001308 <__NVIC_SetPriority+0x50>)
 80012e8:	79fb      	ldrb	r3, [r7, #7]
 80012ea:	f003 030f 	and.w	r3, r3, #15
 80012ee:	3b04      	subs	r3, #4
 80012f0:	0112      	lsls	r2, r2, #4
 80012f2:	b2d2      	uxtb	r2, r2
 80012f4:	440b      	add	r3, r1
 80012f6:	761a      	strb	r2, [r3, #24]
}
 80012f8:	bf00      	nop
 80012fa:	370c      	adds	r7, #12
 80012fc:	46bd      	mov	sp, r7
 80012fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001302:	4770      	bx	lr
 8001304:	e000e100 	.word	0xe000e100
 8001308:	e000ed00 	.word	0xe000ed00

0800130c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800130c:	b480      	push	{r7}
 800130e:	b089      	sub	sp, #36	; 0x24
 8001310:	af00      	add	r7, sp, #0
 8001312:	60f8      	str	r0, [r7, #12]
 8001314:	60b9      	str	r1, [r7, #8]
 8001316:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001318:	68fb      	ldr	r3, [r7, #12]
 800131a:	f003 0307 	and.w	r3, r3, #7
 800131e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001320:	69fb      	ldr	r3, [r7, #28]
 8001322:	f1c3 0307 	rsb	r3, r3, #7
 8001326:	2b04      	cmp	r3, #4
 8001328:	bf28      	it	cs
 800132a:	2304      	movcs	r3, #4
 800132c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800132e:	69fb      	ldr	r3, [r7, #28]
 8001330:	3304      	adds	r3, #4
 8001332:	2b06      	cmp	r3, #6
 8001334:	d902      	bls.n	800133c <NVIC_EncodePriority+0x30>
 8001336:	69fb      	ldr	r3, [r7, #28]
 8001338:	3b03      	subs	r3, #3
 800133a:	e000      	b.n	800133e <NVIC_EncodePriority+0x32>
 800133c:	2300      	movs	r3, #0
 800133e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001340:	f04f 32ff 	mov.w	r2, #4294967295
 8001344:	69bb      	ldr	r3, [r7, #24]
 8001346:	fa02 f303 	lsl.w	r3, r2, r3
 800134a:	43da      	mvns	r2, r3
 800134c:	68bb      	ldr	r3, [r7, #8]
 800134e:	401a      	ands	r2, r3
 8001350:	697b      	ldr	r3, [r7, #20]
 8001352:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001354:	f04f 31ff 	mov.w	r1, #4294967295
 8001358:	697b      	ldr	r3, [r7, #20]
 800135a:	fa01 f303 	lsl.w	r3, r1, r3
 800135e:	43d9      	mvns	r1, r3
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001364:	4313      	orrs	r3, r2
         );
}
 8001366:	4618      	mov	r0, r3
 8001368:	3724      	adds	r7, #36	; 0x24
 800136a:	46bd      	mov	sp, r7
 800136c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001370:	4770      	bx	lr
	...

08001374 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001374:	b580      	push	{r7, lr}
 8001376:	b082      	sub	sp, #8
 8001378:	af00      	add	r7, sp, #0
 800137a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	3b01      	subs	r3, #1
 8001380:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001384:	d301      	bcc.n	800138a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001386:	2301      	movs	r3, #1
 8001388:	e00f      	b.n	80013aa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800138a:	4a0a      	ldr	r2, [pc, #40]	; (80013b4 <SysTick_Config+0x40>)
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	3b01      	subs	r3, #1
 8001390:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001392:	210f      	movs	r1, #15
 8001394:	f04f 30ff 	mov.w	r0, #4294967295
 8001398:	f7ff ff8e 	bl	80012b8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800139c:	4b05      	ldr	r3, [pc, #20]	; (80013b4 <SysTick_Config+0x40>)
 800139e:	2200      	movs	r2, #0
 80013a0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80013a2:	4b04      	ldr	r3, [pc, #16]	; (80013b4 <SysTick_Config+0x40>)
 80013a4:	2207      	movs	r2, #7
 80013a6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80013a8:	2300      	movs	r3, #0
}
 80013aa:	4618      	mov	r0, r3
 80013ac:	3708      	adds	r7, #8
 80013ae:	46bd      	mov	sp, r7
 80013b0:	bd80      	pop	{r7, pc}
 80013b2:	bf00      	nop
 80013b4:	e000e010 	.word	0xe000e010

080013b8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	b082      	sub	sp, #8
 80013bc:	af00      	add	r7, sp, #0
 80013be:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80013c0:	6878      	ldr	r0, [r7, #4]
 80013c2:	f7ff ff47 	bl	8001254 <__NVIC_SetPriorityGrouping>
}
 80013c6:	bf00      	nop
 80013c8:	3708      	adds	r7, #8
 80013ca:	46bd      	mov	sp, r7
 80013cc:	bd80      	pop	{r7, pc}

080013ce <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80013ce:	b580      	push	{r7, lr}
 80013d0:	b086      	sub	sp, #24
 80013d2:	af00      	add	r7, sp, #0
 80013d4:	4603      	mov	r3, r0
 80013d6:	60b9      	str	r1, [r7, #8]
 80013d8:	607a      	str	r2, [r7, #4]
 80013da:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80013dc:	2300      	movs	r3, #0
 80013de:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80013e0:	f7ff ff5c 	bl	800129c <__NVIC_GetPriorityGrouping>
 80013e4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80013e6:	687a      	ldr	r2, [r7, #4]
 80013e8:	68b9      	ldr	r1, [r7, #8]
 80013ea:	6978      	ldr	r0, [r7, #20]
 80013ec:	f7ff ff8e 	bl	800130c <NVIC_EncodePriority>
 80013f0:	4602      	mov	r2, r0
 80013f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80013f6:	4611      	mov	r1, r2
 80013f8:	4618      	mov	r0, r3
 80013fa:	f7ff ff5d 	bl	80012b8 <__NVIC_SetPriority>
}
 80013fe:	bf00      	nop
 8001400:	3718      	adds	r7, #24
 8001402:	46bd      	mov	sp, r7
 8001404:	bd80      	pop	{r7, pc}

08001406 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001406:	b580      	push	{r7, lr}
 8001408:	b082      	sub	sp, #8
 800140a:	af00      	add	r7, sp, #0
 800140c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800140e:	6878      	ldr	r0, [r7, #4]
 8001410:	f7ff ffb0 	bl	8001374 <SysTick_Config>
 8001414:	4603      	mov	r3, r0
}
 8001416:	4618      	mov	r0, r3
 8001418:	3708      	adds	r7, #8
 800141a:	46bd      	mov	sp, r7
 800141c:	bd80      	pop	{r7, pc}
	...

08001420 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001420:	b480      	push	{r7}
 8001422:	b087      	sub	sp, #28
 8001424:	af00      	add	r7, sp, #0
 8001426:	6078      	str	r0, [r7, #4]
 8001428:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800142a:	2300      	movs	r3, #0
 800142c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800142e:	e148      	b.n	80016c2 <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001430:	683b      	ldr	r3, [r7, #0]
 8001432:	681a      	ldr	r2, [r3, #0]
 8001434:	2101      	movs	r1, #1
 8001436:	697b      	ldr	r3, [r7, #20]
 8001438:	fa01 f303 	lsl.w	r3, r1, r3
 800143c:	4013      	ands	r3, r2
 800143e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001440:	68fb      	ldr	r3, [r7, #12]
 8001442:	2b00      	cmp	r3, #0
 8001444:	f000 813a 	beq.w	80016bc <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001448:	683b      	ldr	r3, [r7, #0]
 800144a:	685b      	ldr	r3, [r3, #4]
 800144c:	f003 0303 	and.w	r3, r3, #3
 8001450:	2b01      	cmp	r3, #1
 8001452:	d005      	beq.n	8001460 <HAL_GPIO_Init+0x40>
 8001454:	683b      	ldr	r3, [r7, #0]
 8001456:	685b      	ldr	r3, [r3, #4]
 8001458:	f003 0303 	and.w	r3, r3, #3
 800145c:	2b02      	cmp	r3, #2
 800145e:	d130      	bne.n	80014c2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	689b      	ldr	r3, [r3, #8]
 8001464:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001466:	697b      	ldr	r3, [r7, #20]
 8001468:	005b      	lsls	r3, r3, #1
 800146a:	2203      	movs	r2, #3
 800146c:	fa02 f303 	lsl.w	r3, r2, r3
 8001470:	43db      	mvns	r3, r3
 8001472:	693a      	ldr	r2, [r7, #16]
 8001474:	4013      	ands	r3, r2
 8001476:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001478:	683b      	ldr	r3, [r7, #0]
 800147a:	68da      	ldr	r2, [r3, #12]
 800147c:	697b      	ldr	r3, [r7, #20]
 800147e:	005b      	lsls	r3, r3, #1
 8001480:	fa02 f303 	lsl.w	r3, r2, r3
 8001484:	693a      	ldr	r2, [r7, #16]
 8001486:	4313      	orrs	r3, r2
 8001488:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	693a      	ldr	r2, [r7, #16]
 800148e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	685b      	ldr	r3, [r3, #4]
 8001494:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001496:	2201      	movs	r2, #1
 8001498:	697b      	ldr	r3, [r7, #20]
 800149a:	fa02 f303 	lsl.w	r3, r2, r3
 800149e:	43db      	mvns	r3, r3
 80014a0:	693a      	ldr	r2, [r7, #16]
 80014a2:	4013      	ands	r3, r2
 80014a4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80014a6:	683b      	ldr	r3, [r7, #0]
 80014a8:	685b      	ldr	r3, [r3, #4]
 80014aa:	091b      	lsrs	r3, r3, #4
 80014ac:	f003 0201 	and.w	r2, r3, #1
 80014b0:	697b      	ldr	r3, [r7, #20]
 80014b2:	fa02 f303 	lsl.w	r3, r2, r3
 80014b6:	693a      	ldr	r2, [r7, #16]
 80014b8:	4313      	orrs	r3, r2
 80014ba:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	693a      	ldr	r2, [r7, #16]
 80014c0:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80014c2:	683b      	ldr	r3, [r7, #0]
 80014c4:	685b      	ldr	r3, [r3, #4]
 80014c6:	f003 0303 	and.w	r3, r3, #3
 80014ca:	2b03      	cmp	r3, #3
 80014cc:	d017      	beq.n	80014fe <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	68db      	ldr	r3, [r3, #12]
 80014d2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80014d4:	697b      	ldr	r3, [r7, #20]
 80014d6:	005b      	lsls	r3, r3, #1
 80014d8:	2203      	movs	r2, #3
 80014da:	fa02 f303 	lsl.w	r3, r2, r3
 80014de:	43db      	mvns	r3, r3
 80014e0:	693a      	ldr	r2, [r7, #16]
 80014e2:	4013      	ands	r3, r2
 80014e4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80014e6:	683b      	ldr	r3, [r7, #0]
 80014e8:	689a      	ldr	r2, [r3, #8]
 80014ea:	697b      	ldr	r3, [r7, #20]
 80014ec:	005b      	lsls	r3, r3, #1
 80014ee:	fa02 f303 	lsl.w	r3, r2, r3
 80014f2:	693a      	ldr	r2, [r7, #16]
 80014f4:	4313      	orrs	r3, r2
 80014f6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	693a      	ldr	r2, [r7, #16]
 80014fc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80014fe:	683b      	ldr	r3, [r7, #0]
 8001500:	685b      	ldr	r3, [r3, #4]
 8001502:	f003 0303 	and.w	r3, r3, #3
 8001506:	2b02      	cmp	r3, #2
 8001508:	d123      	bne.n	8001552 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800150a:	697b      	ldr	r3, [r7, #20]
 800150c:	08da      	lsrs	r2, r3, #3
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	3208      	adds	r2, #8
 8001512:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001516:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001518:	697b      	ldr	r3, [r7, #20]
 800151a:	f003 0307 	and.w	r3, r3, #7
 800151e:	009b      	lsls	r3, r3, #2
 8001520:	220f      	movs	r2, #15
 8001522:	fa02 f303 	lsl.w	r3, r2, r3
 8001526:	43db      	mvns	r3, r3
 8001528:	693a      	ldr	r2, [r7, #16]
 800152a:	4013      	ands	r3, r2
 800152c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800152e:	683b      	ldr	r3, [r7, #0]
 8001530:	691a      	ldr	r2, [r3, #16]
 8001532:	697b      	ldr	r3, [r7, #20]
 8001534:	f003 0307 	and.w	r3, r3, #7
 8001538:	009b      	lsls	r3, r3, #2
 800153a:	fa02 f303 	lsl.w	r3, r2, r3
 800153e:	693a      	ldr	r2, [r7, #16]
 8001540:	4313      	orrs	r3, r2
 8001542:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001544:	697b      	ldr	r3, [r7, #20]
 8001546:	08da      	lsrs	r2, r3, #3
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	3208      	adds	r2, #8
 800154c:	6939      	ldr	r1, [r7, #16]
 800154e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001558:	697b      	ldr	r3, [r7, #20]
 800155a:	005b      	lsls	r3, r3, #1
 800155c:	2203      	movs	r2, #3
 800155e:	fa02 f303 	lsl.w	r3, r2, r3
 8001562:	43db      	mvns	r3, r3
 8001564:	693a      	ldr	r2, [r7, #16]
 8001566:	4013      	ands	r3, r2
 8001568:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800156a:	683b      	ldr	r3, [r7, #0]
 800156c:	685b      	ldr	r3, [r3, #4]
 800156e:	f003 0203 	and.w	r2, r3, #3
 8001572:	697b      	ldr	r3, [r7, #20]
 8001574:	005b      	lsls	r3, r3, #1
 8001576:	fa02 f303 	lsl.w	r3, r2, r3
 800157a:	693a      	ldr	r2, [r7, #16]
 800157c:	4313      	orrs	r3, r2
 800157e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	693a      	ldr	r2, [r7, #16]
 8001584:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001586:	683b      	ldr	r3, [r7, #0]
 8001588:	685b      	ldr	r3, [r3, #4]
 800158a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800158e:	2b00      	cmp	r3, #0
 8001590:	f000 8094 	beq.w	80016bc <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001594:	4b52      	ldr	r3, [pc, #328]	; (80016e0 <HAL_GPIO_Init+0x2c0>)
 8001596:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001598:	4a51      	ldr	r2, [pc, #324]	; (80016e0 <HAL_GPIO_Init+0x2c0>)
 800159a:	f043 0301 	orr.w	r3, r3, #1
 800159e:	6613      	str	r3, [r2, #96]	; 0x60
 80015a0:	4b4f      	ldr	r3, [pc, #316]	; (80016e0 <HAL_GPIO_Init+0x2c0>)
 80015a2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80015a4:	f003 0301 	and.w	r3, r3, #1
 80015a8:	60bb      	str	r3, [r7, #8]
 80015aa:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80015ac:	4a4d      	ldr	r2, [pc, #308]	; (80016e4 <HAL_GPIO_Init+0x2c4>)
 80015ae:	697b      	ldr	r3, [r7, #20]
 80015b0:	089b      	lsrs	r3, r3, #2
 80015b2:	3302      	adds	r3, #2
 80015b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015b8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80015ba:	697b      	ldr	r3, [r7, #20]
 80015bc:	f003 0303 	and.w	r3, r3, #3
 80015c0:	009b      	lsls	r3, r3, #2
 80015c2:	220f      	movs	r2, #15
 80015c4:	fa02 f303 	lsl.w	r3, r2, r3
 80015c8:	43db      	mvns	r3, r3
 80015ca:	693a      	ldr	r2, [r7, #16]
 80015cc:	4013      	ands	r3, r2
 80015ce:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80015d6:	d00d      	beq.n	80015f4 <HAL_GPIO_Init+0x1d4>
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	4a43      	ldr	r2, [pc, #268]	; (80016e8 <HAL_GPIO_Init+0x2c8>)
 80015dc:	4293      	cmp	r3, r2
 80015de:	d007      	beq.n	80015f0 <HAL_GPIO_Init+0x1d0>
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	4a42      	ldr	r2, [pc, #264]	; (80016ec <HAL_GPIO_Init+0x2cc>)
 80015e4:	4293      	cmp	r3, r2
 80015e6:	d101      	bne.n	80015ec <HAL_GPIO_Init+0x1cc>
 80015e8:	2302      	movs	r3, #2
 80015ea:	e004      	b.n	80015f6 <HAL_GPIO_Init+0x1d6>
 80015ec:	2307      	movs	r3, #7
 80015ee:	e002      	b.n	80015f6 <HAL_GPIO_Init+0x1d6>
 80015f0:	2301      	movs	r3, #1
 80015f2:	e000      	b.n	80015f6 <HAL_GPIO_Init+0x1d6>
 80015f4:	2300      	movs	r3, #0
 80015f6:	697a      	ldr	r2, [r7, #20]
 80015f8:	f002 0203 	and.w	r2, r2, #3
 80015fc:	0092      	lsls	r2, r2, #2
 80015fe:	4093      	lsls	r3, r2
 8001600:	693a      	ldr	r2, [r7, #16]
 8001602:	4313      	orrs	r3, r2
 8001604:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001606:	4937      	ldr	r1, [pc, #220]	; (80016e4 <HAL_GPIO_Init+0x2c4>)
 8001608:	697b      	ldr	r3, [r7, #20]
 800160a:	089b      	lsrs	r3, r3, #2
 800160c:	3302      	adds	r3, #2
 800160e:	693a      	ldr	r2, [r7, #16]
 8001610:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001614:	4b36      	ldr	r3, [pc, #216]	; (80016f0 <HAL_GPIO_Init+0x2d0>)
 8001616:	689b      	ldr	r3, [r3, #8]
 8001618:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800161a:	68fb      	ldr	r3, [r7, #12]
 800161c:	43db      	mvns	r3, r3
 800161e:	693a      	ldr	r2, [r7, #16]
 8001620:	4013      	ands	r3, r2
 8001622:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001624:	683b      	ldr	r3, [r7, #0]
 8001626:	685b      	ldr	r3, [r3, #4]
 8001628:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800162c:	2b00      	cmp	r3, #0
 800162e:	d003      	beq.n	8001638 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8001630:	693a      	ldr	r2, [r7, #16]
 8001632:	68fb      	ldr	r3, [r7, #12]
 8001634:	4313      	orrs	r3, r2
 8001636:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001638:	4a2d      	ldr	r2, [pc, #180]	; (80016f0 <HAL_GPIO_Init+0x2d0>)
 800163a:	693b      	ldr	r3, [r7, #16]
 800163c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800163e:	4b2c      	ldr	r3, [pc, #176]	; (80016f0 <HAL_GPIO_Init+0x2d0>)
 8001640:	68db      	ldr	r3, [r3, #12]
 8001642:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001644:	68fb      	ldr	r3, [r7, #12]
 8001646:	43db      	mvns	r3, r3
 8001648:	693a      	ldr	r2, [r7, #16]
 800164a:	4013      	ands	r3, r2
 800164c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800164e:	683b      	ldr	r3, [r7, #0]
 8001650:	685b      	ldr	r3, [r3, #4]
 8001652:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001656:	2b00      	cmp	r3, #0
 8001658:	d003      	beq.n	8001662 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 800165a:	693a      	ldr	r2, [r7, #16]
 800165c:	68fb      	ldr	r3, [r7, #12]
 800165e:	4313      	orrs	r3, r2
 8001660:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001662:	4a23      	ldr	r2, [pc, #140]	; (80016f0 <HAL_GPIO_Init+0x2d0>)
 8001664:	693b      	ldr	r3, [r7, #16]
 8001666:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001668:	4b21      	ldr	r3, [pc, #132]	; (80016f0 <HAL_GPIO_Init+0x2d0>)
 800166a:	685b      	ldr	r3, [r3, #4]
 800166c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800166e:	68fb      	ldr	r3, [r7, #12]
 8001670:	43db      	mvns	r3, r3
 8001672:	693a      	ldr	r2, [r7, #16]
 8001674:	4013      	ands	r3, r2
 8001676:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001678:	683b      	ldr	r3, [r7, #0]
 800167a:	685b      	ldr	r3, [r3, #4]
 800167c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001680:	2b00      	cmp	r3, #0
 8001682:	d003      	beq.n	800168c <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 8001684:	693a      	ldr	r2, [r7, #16]
 8001686:	68fb      	ldr	r3, [r7, #12]
 8001688:	4313      	orrs	r3, r2
 800168a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800168c:	4a18      	ldr	r2, [pc, #96]	; (80016f0 <HAL_GPIO_Init+0x2d0>)
 800168e:	693b      	ldr	r3, [r7, #16]
 8001690:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001692:	4b17      	ldr	r3, [pc, #92]	; (80016f0 <HAL_GPIO_Init+0x2d0>)
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001698:	68fb      	ldr	r3, [r7, #12]
 800169a:	43db      	mvns	r3, r3
 800169c:	693a      	ldr	r2, [r7, #16]
 800169e:	4013      	ands	r3, r2
 80016a0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80016a2:	683b      	ldr	r3, [r7, #0]
 80016a4:	685b      	ldr	r3, [r3, #4]
 80016a6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d003      	beq.n	80016b6 <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 80016ae:	693a      	ldr	r2, [r7, #16]
 80016b0:	68fb      	ldr	r3, [r7, #12]
 80016b2:	4313      	orrs	r3, r2
 80016b4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80016b6:	4a0e      	ldr	r2, [pc, #56]	; (80016f0 <HAL_GPIO_Init+0x2d0>)
 80016b8:	693b      	ldr	r3, [r7, #16]
 80016ba:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80016bc:	697b      	ldr	r3, [r7, #20]
 80016be:	3301      	adds	r3, #1
 80016c0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80016c2:	683b      	ldr	r3, [r7, #0]
 80016c4:	681a      	ldr	r2, [r3, #0]
 80016c6:	697b      	ldr	r3, [r7, #20]
 80016c8:	fa22 f303 	lsr.w	r3, r2, r3
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	f47f aeaf 	bne.w	8001430 <HAL_GPIO_Init+0x10>
  }
}
 80016d2:	bf00      	nop
 80016d4:	bf00      	nop
 80016d6:	371c      	adds	r7, #28
 80016d8:	46bd      	mov	sp, r7
 80016da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016de:	4770      	bx	lr
 80016e0:	40021000 	.word	0x40021000
 80016e4:	40010000 	.word	0x40010000
 80016e8:	48000400 	.word	0x48000400
 80016ec:	48000800 	.word	0x48000800
 80016f0:	40010400 	.word	0x40010400

080016f4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80016f4:	b480      	push	{r7}
 80016f6:	b083      	sub	sp, #12
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	6078      	str	r0, [r7, #4]
 80016fc:	460b      	mov	r3, r1
 80016fe:	807b      	strh	r3, [r7, #2]
 8001700:	4613      	mov	r3, r2
 8001702:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001704:	787b      	ldrb	r3, [r7, #1]
 8001706:	2b00      	cmp	r3, #0
 8001708:	d003      	beq.n	8001712 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800170a:	887a      	ldrh	r2, [r7, #2]
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001710:	e002      	b.n	8001718 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001712:	887a      	ldrh	r2, [r7, #2]
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001718:	bf00      	nop
 800171a:	370c      	adds	r7, #12
 800171c:	46bd      	mov	sp, r7
 800171e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001722:	4770      	bx	lr

08001724 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8001724:	b480      	push	{r7}
 8001726:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001728:	4b05      	ldr	r3, [pc, #20]	; (8001740 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	4a04      	ldr	r2, [pc, #16]	; (8001740 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800172e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001732:	6013      	str	r3, [r2, #0]
}
 8001734:	bf00      	nop
 8001736:	46bd      	mov	sp, r7
 8001738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173c:	4770      	bx	lr
 800173e:	bf00      	nop
 8001740:	40007000 	.word	0x40007000

08001744 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001744:	b480      	push	{r7}
 8001746:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001748:	4b04      	ldr	r3, [pc, #16]	; (800175c <HAL_PWREx_GetVoltageRange+0x18>)
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001750:	4618      	mov	r0, r3
 8001752:	46bd      	mov	sp, r7
 8001754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001758:	4770      	bx	lr
 800175a:	bf00      	nop
 800175c:	40007000 	.word	0x40007000

08001760 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001760:	b480      	push	{r7}
 8001762:	b085      	sub	sp, #20
 8001764:	af00      	add	r7, sp, #0
 8001766:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800176e:	d130      	bne.n	80017d2 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001770:	4b23      	ldr	r3, [pc, #140]	; (8001800 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001778:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800177c:	d038      	beq.n	80017f0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800177e:	4b20      	ldr	r3, [pc, #128]	; (8001800 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001786:	4a1e      	ldr	r2, [pc, #120]	; (8001800 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001788:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800178c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800178e:	4b1d      	ldr	r3, [pc, #116]	; (8001804 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	2232      	movs	r2, #50	; 0x32
 8001794:	fb02 f303 	mul.w	r3, r2, r3
 8001798:	4a1b      	ldr	r2, [pc, #108]	; (8001808 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800179a:	fba2 2303 	umull	r2, r3, r2, r3
 800179e:	0c9b      	lsrs	r3, r3, #18
 80017a0:	3301      	adds	r3, #1
 80017a2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80017a4:	e002      	b.n	80017ac <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80017a6:	68fb      	ldr	r3, [r7, #12]
 80017a8:	3b01      	subs	r3, #1
 80017aa:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80017ac:	4b14      	ldr	r3, [pc, #80]	; (8001800 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80017ae:	695b      	ldr	r3, [r3, #20]
 80017b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80017b4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80017b8:	d102      	bne.n	80017c0 <HAL_PWREx_ControlVoltageScaling+0x60>
 80017ba:	68fb      	ldr	r3, [r7, #12]
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d1f2      	bne.n	80017a6 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80017c0:	4b0f      	ldr	r3, [pc, #60]	; (8001800 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80017c2:	695b      	ldr	r3, [r3, #20]
 80017c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80017c8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80017cc:	d110      	bne.n	80017f0 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80017ce:	2303      	movs	r3, #3
 80017d0:	e00f      	b.n	80017f2 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80017d2:	4b0b      	ldr	r3, [pc, #44]	; (8001800 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80017da:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80017de:	d007      	beq.n	80017f0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80017e0:	4b07      	ldr	r3, [pc, #28]	; (8001800 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80017e8:	4a05      	ldr	r2, [pc, #20]	; (8001800 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80017ea:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80017ee:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80017f0:	2300      	movs	r3, #0
}
 80017f2:	4618      	mov	r0, r3
 80017f4:	3714      	adds	r7, #20
 80017f6:	46bd      	mov	sp, r7
 80017f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017fc:	4770      	bx	lr
 80017fe:	bf00      	nop
 8001800:	40007000 	.word	0x40007000
 8001804:	20000000 	.word	0x20000000
 8001808:	431bde83 	.word	0x431bde83

0800180c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800180c:	b580      	push	{r7, lr}
 800180e:	b088      	sub	sp, #32
 8001810:	af00      	add	r7, sp, #0
 8001812:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	2b00      	cmp	r3, #0
 8001818:	d102      	bne.n	8001820 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800181a:	2301      	movs	r3, #1
 800181c:	f000 bc02 	b.w	8002024 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001820:	4b96      	ldr	r3, [pc, #600]	; (8001a7c <HAL_RCC_OscConfig+0x270>)
 8001822:	689b      	ldr	r3, [r3, #8]
 8001824:	f003 030c 	and.w	r3, r3, #12
 8001828:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800182a:	4b94      	ldr	r3, [pc, #592]	; (8001a7c <HAL_RCC_OscConfig+0x270>)
 800182c:	68db      	ldr	r3, [r3, #12]
 800182e:	f003 0303 	and.w	r3, r3, #3
 8001832:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	f003 0310 	and.w	r3, r3, #16
 800183c:	2b00      	cmp	r3, #0
 800183e:	f000 80e4 	beq.w	8001a0a <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001842:	69bb      	ldr	r3, [r7, #24]
 8001844:	2b00      	cmp	r3, #0
 8001846:	d007      	beq.n	8001858 <HAL_RCC_OscConfig+0x4c>
 8001848:	69bb      	ldr	r3, [r7, #24]
 800184a:	2b0c      	cmp	r3, #12
 800184c:	f040 808b 	bne.w	8001966 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001850:	697b      	ldr	r3, [r7, #20]
 8001852:	2b01      	cmp	r3, #1
 8001854:	f040 8087 	bne.w	8001966 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001858:	4b88      	ldr	r3, [pc, #544]	; (8001a7c <HAL_RCC_OscConfig+0x270>)
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	f003 0302 	and.w	r3, r3, #2
 8001860:	2b00      	cmp	r3, #0
 8001862:	d005      	beq.n	8001870 <HAL_RCC_OscConfig+0x64>
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	699b      	ldr	r3, [r3, #24]
 8001868:	2b00      	cmp	r3, #0
 800186a:	d101      	bne.n	8001870 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 800186c:	2301      	movs	r3, #1
 800186e:	e3d9      	b.n	8002024 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	6a1a      	ldr	r2, [r3, #32]
 8001874:	4b81      	ldr	r3, [pc, #516]	; (8001a7c <HAL_RCC_OscConfig+0x270>)
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	f003 0308 	and.w	r3, r3, #8
 800187c:	2b00      	cmp	r3, #0
 800187e:	d004      	beq.n	800188a <HAL_RCC_OscConfig+0x7e>
 8001880:	4b7e      	ldr	r3, [pc, #504]	; (8001a7c <HAL_RCC_OscConfig+0x270>)
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001888:	e005      	b.n	8001896 <HAL_RCC_OscConfig+0x8a>
 800188a:	4b7c      	ldr	r3, [pc, #496]	; (8001a7c <HAL_RCC_OscConfig+0x270>)
 800188c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001890:	091b      	lsrs	r3, r3, #4
 8001892:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001896:	4293      	cmp	r3, r2
 8001898:	d223      	bcs.n	80018e2 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	6a1b      	ldr	r3, [r3, #32]
 800189e:	4618      	mov	r0, r3
 80018a0:	f000 fd8c 	bl	80023bc <RCC_SetFlashLatencyFromMSIRange>
 80018a4:	4603      	mov	r3, r0
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d001      	beq.n	80018ae <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80018aa:	2301      	movs	r3, #1
 80018ac:	e3ba      	b.n	8002024 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80018ae:	4b73      	ldr	r3, [pc, #460]	; (8001a7c <HAL_RCC_OscConfig+0x270>)
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	4a72      	ldr	r2, [pc, #456]	; (8001a7c <HAL_RCC_OscConfig+0x270>)
 80018b4:	f043 0308 	orr.w	r3, r3, #8
 80018b8:	6013      	str	r3, [r2, #0]
 80018ba:	4b70      	ldr	r3, [pc, #448]	; (8001a7c <HAL_RCC_OscConfig+0x270>)
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	6a1b      	ldr	r3, [r3, #32]
 80018c6:	496d      	ldr	r1, [pc, #436]	; (8001a7c <HAL_RCC_OscConfig+0x270>)
 80018c8:	4313      	orrs	r3, r2
 80018ca:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80018cc:	4b6b      	ldr	r3, [pc, #428]	; (8001a7c <HAL_RCC_OscConfig+0x270>)
 80018ce:	685b      	ldr	r3, [r3, #4]
 80018d0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	69db      	ldr	r3, [r3, #28]
 80018d8:	021b      	lsls	r3, r3, #8
 80018da:	4968      	ldr	r1, [pc, #416]	; (8001a7c <HAL_RCC_OscConfig+0x270>)
 80018dc:	4313      	orrs	r3, r2
 80018de:	604b      	str	r3, [r1, #4]
 80018e0:	e025      	b.n	800192e <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80018e2:	4b66      	ldr	r3, [pc, #408]	; (8001a7c <HAL_RCC_OscConfig+0x270>)
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	4a65      	ldr	r2, [pc, #404]	; (8001a7c <HAL_RCC_OscConfig+0x270>)
 80018e8:	f043 0308 	orr.w	r3, r3, #8
 80018ec:	6013      	str	r3, [r2, #0]
 80018ee:	4b63      	ldr	r3, [pc, #396]	; (8001a7c <HAL_RCC_OscConfig+0x270>)
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	6a1b      	ldr	r3, [r3, #32]
 80018fa:	4960      	ldr	r1, [pc, #384]	; (8001a7c <HAL_RCC_OscConfig+0x270>)
 80018fc:	4313      	orrs	r3, r2
 80018fe:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001900:	4b5e      	ldr	r3, [pc, #376]	; (8001a7c <HAL_RCC_OscConfig+0x270>)
 8001902:	685b      	ldr	r3, [r3, #4]
 8001904:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	69db      	ldr	r3, [r3, #28]
 800190c:	021b      	lsls	r3, r3, #8
 800190e:	495b      	ldr	r1, [pc, #364]	; (8001a7c <HAL_RCC_OscConfig+0x270>)
 8001910:	4313      	orrs	r3, r2
 8001912:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001914:	69bb      	ldr	r3, [r7, #24]
 8001916:	2b00      	cmp	r3, #0
 8001918:	d109      	bne.n	800192e <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	6a1b      	ldr	r3, [r3, #32]
 800191e:	4618      	mov	r0, r3
 8001920:	f000 fd4c 	bl	80023bc <RCC_SetFlashLatencyFromMSIRange>
 8001924:	4603      	mov	r3, r0
 8001926:	2b00      	cmp	r3, #0
 8001928:	d001      	beq.n	800192e <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800192a:	2301      	movs	r3, #1
 800192c:	e37a      	b.n	8002024 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800192e:	f000 fc81 	bl	8002234 <HAL_RCC_GetSysClockFreq>
 8001932:	4602      	mov	r2, r0
 8001934:	4b51      	ldr	r3, [pc, #324]	; (8001a7c <HAL_RCC_OscConfig+0x270>)
 8001936:	689b      	ldr	r3, [r3, #8]
 8001938:	091b      	lsrs	r3, r3, #4
 800193a:	f003 030f 	and.w	r3, r3, #15
 800193e:	4950      	ldr	r1, [pc, #320]	; (8001a80 <HAL_RCC_OscConfig+0x274>)
 8001940:	5ccb      	ldrb	r3, [r1, r3]
 8001942:	f003 031f 	and.w	r3, r3, #31
 8001946:	fa22 f303 	lsr.w	r3, r2, r3
 800194a:	4a4e      	ldr	r2, [pc, #312]	; (8001a84 <HAL_RCC_OscConfig+0x278>)
 800194c:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800194e:	4b4e      	ldr	r3, [pc, #312]	; (8001a88 <HAL_RCC_OscConfig+0x27c>)
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	4618      	mov	r0, r3
 8001954:	f7ff fc22 	bl	800119c <HAL_InitTick>
 8001958:	4603      	mov	r3, r0
 800195a:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800195c:	7bfb      	ldrb	r3, [r7, #15]
 800195e:	2b00      	cmp	r3, #0
 8001960:	d052      	beq.n	8001a08 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8001962:	7bfb      	ldrb	r3, [r7, #15]
 8001964:	e35e      	b.n	8002024 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	699b      	ldr	r3, [r3, #24]
 800196a:	2b00      	cmp	r3, #0
 800196c:	d032      	beq.n	80019d4 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800196e:	4b43      	ldr	r3, [pc, #268]	; (8001a7c <HAL_RCC_OscConfig+0x270>)
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	4a42      	ldr	r2, [pc, #264]	; (8001a7c <HAL_RCC_OscConfig+0x270>)
 8001974:	f043 0301 	orr.w	r3, r3, #1
 8001978:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800197a:	f7ff fc5f 	bl	800123c <HAL_GetTick>
 800197e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001980:	e008      	b.n	8001994 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001982:	f7ff fc5b 	bl	800123c <HAL_GetTick>
 8001986:	4602      	mov	r2, r0
 8001988:	693b      	ldr	r3, [r7, #16]
 800198a:	1ad3      	subs	r3, r2, r3
 800198c:	2b02      	cmp	r3, #2
 800198e:	d901      	bls.n	8001994 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8001990:	2303      	movs	r3, #3
 8001992:	e347      	b.n	8002024 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001994:	4b39      	ldr	r3, [pc, #228]	; (8001a7c <HAL_RCC_OscConfig+0x270>)
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	f003 0302 	and.w	r3, r3, #2
 800199c:	2b00      	cmp	r3, #0
 800199e:	d0f0      	beq.n	8001982 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80019a0:	4b36      	ldr	r3, [pc, #216]	; (8001a7c <HAL_RCC_OscConfig+0x270>)
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	4a35      	ldr	r2, [pc, #212]	; (8001a7c <HAL_RCC_OscConfig+0x270>)
 80019a6:	f043 0308 	orr.w	r3, r3, #8
 80019aa:	6013      	str	r3, [r2, #0]
 80019ac:	4b33      	ldr	r3, [pc, #204]	; (8001a7c <HAL_RCC_OscConfig+0x270>)
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	6a1b      	ldr	r3, [r3, #32]
 80019b8:	4930      	ldr	r1, [pc, #192]	; (8001a7c <HAL_RCC_OscConfig+0x270>)
 80019ba:	4313      	orrs	r3, r2
 80019bc:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80019be:	4b2f      	ldr	r3, [pc, #188]	; (8001a7c <HAL_RCC_OscConfig+0x270>)
 80019c0:	685b      	ldr	r3, [r3, #4]
 80019c2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	69db      	ldr	r3, [r3, #28]
 80019ca:	021b      	lsls	r3, r3, #8
 80019cc:	492b      	ldr	r1, [pc, #172]	; (8001a7c <HAL_RCC_OscConfig+0x270>)
 80019ce:	4313      	orrs	r3, r2
 80019d0:	604b      	str	r3, [r1, #4]
 80019d2:	e01a      	b.n	8001a0a <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80019d4:	4b29      	ldr	r3, [pc, #164]	; (8001a7c <HAL_RCC_OscConfig+0x270>)
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	4a28      	ldr	r2, [pc, #160]	; (8001a7c <HAL_RCC_OscConfig+0x270>)
 80019da:	f023 0301 	bic.w	r3, r3, #1
 80019de:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80019e0:	f7ff fc2c 	bl	800123c <HAL_GetTick>
 80019e4:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80019e6:	e008      	b.n	80019fa <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80019e8:	f7ff fc28 	bl	800123c <HAL_GetTick>
 80019ec:	4602      	mov	r2, r0
 80019ee:	693b      	ldr	r3, [r7, #16]
 80019f0:	1ad3      	subs	r3, r2, r3
 80019f2:	2b02      	cmp	r3, #2
 80019f4:	d901      	bls.n	80019fa <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80019f6:	2303      	movs	r3, #3
 80019f8:	e314      	b.n	8002024 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80019fa:	4b20      	ldr	r3, [pc, #128]	; (8001a7c <HAL_RCC_OscConfig+0x270>)
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	f003 0302 	and.w	r3, r3, #2
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d1f0      	bne.n	80019e8 <HAL_RCC_OscConfig+0x1dc>
 8001a06:	e000      	b.n	8001a0a <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001a08:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	f003 0301 	and.w	r3, r3, #1
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d073      	beq.n	8001afe <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001a16:	69bb      	ldr	r3, [r7, #24]
 8001a18:	2b08      	cmp	r3, #8
 8001a1a:	d005      	beq.n	8001a28 <HAL_RCC_OscConfig+0x21c>
 8001a1c:	69bb      	ldr	r3, [r7, #24]
 8001a1e:	2b0c      	cmp	r3, #12
 8001a20:	d10e      	bne.n	8001a40 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001a22:	697b      	ldr	r3, [r7, #20]
 8001a24:	2b03      	cmp	r3, #3
 8001a26:	d10b      	bne.n	8001a40 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a28:	4b14      	ldr	r3, [pc, #80]	; (8001a7c <HAL_RCC_OscConfig+0x270>)
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d063      	beq.n	8001afc <HAL_RCC_OscConfig+0x2f0>
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	685b      	ldr	r3, [r3, #4]
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d15f      	bne.n	8001afc <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001a3c:	2301      	movs	r3, #1
 8001a3e:	e2f1      	b.n	8002024 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	685b      	ldr	r3, [r3, #4]
 8001a44:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a48:	d106      	bne.n	8001a58 <HAL_RCC_OscConfig+0x24c>
 8001a4a:	4b0c      	ldr	r3, [pc, #48]	; (8001a7c <HAL_RCC_OscConfig+0x270>)
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	4a0b      	ldr	r2, [pc, #44]	; (8001a7c <HAL_RCC_OscConfig+0x270>)
 8001a50:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a54:	6013      	str	r3, [r2, #0]
 8001a56:	e025      	b.n	8001aa4 <HAL_RCC_OscConfig+0x298>
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	685b      	ldr	r3, [r3, #4]
 8001a5c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001a60:	d114      	bne.n	8001a8c <HAL_RCC_OscConfig+0x280>
 8001a62:	4b06      	ldr	r3, [pc, #24]	; (8001a7c <HAL_RCC_OscConfig+0x270>)
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	4a05      	ldr	r2, [pc, #20]	; (8001a7c <HAL_RCC_OscConfig+0x270>)
 8001a68:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001a6c:	6013      	str	r3, [r2, #0]
 8001a6e:	4b03      	ldr	r3, [pc, #12]	; (8001a7c <HAL_RCC_OscConfig+0x270>)
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	4a02      	ldr	r2, [pc, #8]	; (8001a7c <HAL_RCC_OscConfig+0x270>)
 8001a74:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a78:	6013      	str	r3, [r2, #0]
 8001a7a:	e013      	b.n	8001aa4 <HAL_RCC_OscConfig+0x298>
 8001a7c:	40021000 	.word	0x40021000
 8001a80:	080044bc 	.word	0x080044bc
 8001a84:	20000000 	.word	0x20000000
 8001a88:	20000004 	.word	0x20000004
 8001a8c:	4ba0      	ldr	r3, [pc, #640]	; (8001d10 <HAL_RCC_OscConfig+0x504>)
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	4a9f      	ldr	r2, [pc, #636]	; (8001d10 <HAL_RCC_OscConfig+0x504>)
 8001a92:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a96:	6013      	str	r3, [r2, #0]
 8001a98:	4b9d      	ldr	r3, [pc, #628]	; (8001d10 <HAL_RCC_OscConfig+0x504>)
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	4a9c      	ldr	r2, [pc, #624]	; (8001d10 <HAL_RCC_OscConfig+0x504>)
 8001a9e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001aa2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	685b      	ldr	r3, [r3, #4]
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d013      	beq.n	8001ad4 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001aac:	f7ff fbc6 	bl	800123c <HAL_GetTick>
 8001ab0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001ab2:	e008      	b.n	8001ac6 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ab4:	f7ff fbc2 	bl	800123c <HAL_GetTick>
 8001ab8:	4602      	mov	r2, r0
 8001aba:	693b      	ldr	r3, [r7, #16]
 8001abc:	1ad3      	subs	r3, r2, r3
 8001abe:	2b64      	cmp	r3, #100	; 0x64
 8001ac0:	d901      	bls.n	8001ac6 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001ac2:	2303      	movs	r3, #3
 8001ac4:	e2ae      	b.n	8002024 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001ac6:	4b92      	ldr	r3, [pc, #584]	; (8001d10 <HAL_RCC_OscConfig+0x504>)
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d0f0      	beq.n	8001ab4 <HAL_RCC_OscConfig+0x2a8>
 8001ad2:	e014      	b.n	8001afe <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ad4:	f7ff fbb2 	bl	800123c <HAL_GetTick>
 8001ad8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001ada:	e008      	b.n	8001aee <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001adc:	f7ff fbae 	bl	800123c <HAL_GetTick>
 8001ae0:	4602      	mov	r2, r0
 8001ae2:	693b      	ldr	r3, [r7, #16]
 8001ae4:	1ad3      	subs	r3, r2, r3
 8001ae6:	2b64      	cmp	r3, #100	; 0x64
 8001ae8:	d901      	bls.n	8001aee <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001aea:	2303      	movs	r3, #3
 8001aec:	e29a      	b.n	8002024 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001aee:	4b88      	ldr	r3, [pc, #544]	; (8001d10 <HAL_RCC_OscConfig+0x504>)
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d1f0      	bne.n	8001adc <HAL_RCC_OscConfig+0x2d0>
 8001afa:	e000      	b.n	8001afe <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001afc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	f003 0302 	and.w	r3, r3, #2
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d060      	beq.n	8001bcc <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001b0a:	69bb      	ldr	r3, [r7, #24]
 8001b0c:	2b04      	cmp	r3, #4
 8001b0e:	d005      	beq.n	8001b1c <HAL_RCC_OscConfig+0x310>
 8001b10:	69bb      	ldr	r3, [r7, #24]
 8001b12:	2b0c      	cmp	r3, #12
 8001b14:	d119      	bne.n	8001b4a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001b16:	697b      	ldr	r3, [r7, #20]
 8001b18:	2b02      	cmp	r3, #2
 8001b1a:	d116      	bne.n	8001b4a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001b1c:	4b7c      	ldr	r3, [pc, #496]	; (8001d10 <HAL_RCC_OscConfig+0x504>)
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d005      	beq.n	8001b34 <HAL_RCC_OscConfig+0x328>
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	68db      	ldr	r3, [r3, #12]
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d101      	bne.n	8001b34 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001b30:	2301      	movs	r3, #1
 8001b32:	e277      	b.n	8002024 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b34:	4b76      	ldr	r3, [pc, #472]	; (8001d10 <HAL_RCC_OscConfig+0x504>)
 8001b36:	685b      	ldr	r3, [r3, #4]
 8001b38:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	691b      	ldr	r3, [r3, #16]
 8001b40:	061b      	lsls	r3, r3, #24
 8001b42:	4973      	ldr	r1, [pc, #460]	; (8001d10 <HAL_RCC_OscConfig+0x504>)
 8001b44:	4313      	orrs	r3, r2
 8001b46:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001b48:	e040      	b.n	8001bcc <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	68db      	ldr	r3, [r3, #12]
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d023      	beq.n	8001b9a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001b52:	4b6f      	ldr	r3, [pc, #444]	; (8001d10 <HAL_RCC_OscConfig+0x504>)
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	4a6e      	ldr	r2, [pc, #440]	; (8001d10 <HAL_RCC_OscConfig+0x504>)
 8001b58:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b5c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b5e:	f7ff fb6d 	bl	800123c <HAL_GetTick>
 8001b62:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001b64:	e008      	b.n	8001b78 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b66:	f7ff fb69 	bl	800123c <HAL_GetTick>
 8001b6a:	4602      	mov	r2, r0
 8001b6c:	693b      	ldr	r3, [r7, #16]
 8001b6e:	1ad3      	subs	r3, r2, r3
 8001b70:	2b02      	cmp	r3, #2
 8001b72:	d901      	bls.n	8001b78 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001b74:	2303      	movs	r3, #3
 8001b76:	e255      	b.n	8002024 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001b78:	4b65      	ldr	r3, [pc, #404]	; (8001d10 <HAL_RCC_OscConfig+0x504>)
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d0f0      	beq.n	8001b66 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b84:	4b62      	ldr	r3, [pc, #392]	; (8001d10 <HAL_RCC_OscConfig+0x504>)
 8001b86:	685b      	ldr	r3, [r3, #4]
 8001b88:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	691b      	ldr	r3, [r3, #16]
 8001b90:	061b      	lsls	r3, r3, #24
 8001b92:	495f      	ldr	r1, [pc, #380]	; (8001d10 <HAL_RCC_OscConfig+0x504>)
 8001b94:	4313      	orrs	r3, r2
 8001b96:	604b      	str	r3, [r1, #4]
 8001b98:	e018      	b.n	8001bcc <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001b9a:	4b5d      	ldr	r3, [pc, #372]	; (8001d10 <HAL_RCC_OscConfig+0x504>)
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	4a5c      	ldr	r2, [pc, #368]	; (8001d10 <HAL_RCC_OscConfig+0x504>)
 8001ba0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001ba4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ba6:	f7ff fb49 	bl	800123c <HAL_GetTick>
 8001baa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001bac:	e008      	b.n	8001bc0 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001bae:	f7ff fb45 	bl	800123c <HAL_GetTick>
 8001bb2:	4602      	mov	r2, r0
 8001bb4:	693b      	ldr	r3, [r7, #16]
 8001bb6:	1ad3      	subs	r3, r2, r3
 8001bb8:	2b02      	cmp	r3, #2
 8001bba:	d901      	bls.n	8001bc0 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001bbc:	2303      	movs	r3, #3
 8001bbe:	e231      	b.n	8002024 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001bc0:	4b53      	ldr	r3, [pc, #332]	; (8001d10 <HAL_RCC_OscConfig+0x504>)
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d1f0      	bne.n	8001bae <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	f003 0308 	and.w	r3, r3, #8
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d03c      	beq.n	8001c52 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	695b      	ldr	r3, [r3, #20]
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d01c      	beq.n	8001c1a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001be0:	4b4b      	ldr	r3, [pc, #300]	; (8001d10 <HAL_RCC_OscConfig+0x504>)
 8001be2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001be6:	4a4a      	ldr	r2, [pc, #296]	; (8001d10 <HAL_RCC_OscConfig+0x504>)
 8001be8:	f043 0301 	orr.w	r3, r3, #1
 8001bec:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001bf0:	f7ff fb24 	bl	800123c <HAL_GetTick>
 8001bf4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001bf6:	e008      	b.n	8001c0a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001bf8:	f7ff fb20 	bl	800123c <HAL_GetTick>
 8001bfc:	4602      	mov	r2, r0
 8001bfe:	693b      	ldr	r3, [r7, #16]
 8001c00:	1ad3      	subs	r3, r2, r3
 8001c02:	2b02      	cmp	r3, #2
 8001c04:	d901      	bls.n	8001c0a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001c06:	2303      	movs	r3, #3
 8001c08:	e20c      	b.n	8002024 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001c0a:	4b41      	ldr	r3, [pc, #260]	; (8001d10 <HAL_RCC_OscConfig+0x504>)
 8001c0c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001c10:	f003 0302 	and.w	r3, r3, #2
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d0ef      	beq.n	8001bf8 <HAL_RCC_OscConfig+0x3ec>
 8001c18:	e01b      	b.n	8001c52 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001c1a:	4b3d      	ldr	r3, [pc, #244]	; (8001d10 <HAL_RCC_OscConfig+0x504>)
 8001c1c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001c20:	4a3b      	ldr	r2, [pc, #236]	; (8001d10 <HAL_RCC_OscConfig+0x504>)
 8001c22:	f023 0301 	bic.w	r3, r3, #1
 8001c26:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c2a:	f7ff fb07 	bl	800123c <HAL_GetTick>
 8001c2e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001c30:	e008      	b.n	8001c44 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001c32:	f7ff fb03 	bl	800123c <HAL_GetTick>
 8001c36:	4602      	mov	r2, r0
 8001c38:	693b      	ldr	r3, [r7, #16]
 8001c3a:	1ad3      	subs	r3, r2, r3
 8001c3c:	2b02      	cmp	r3, #2
 8001c3e:	d901      	bls.n	8001c44 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001c40:	2303      	movs	r3, #3
 8001c42:	e1ef      	b.n	8002024 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001c44:	4b32      	ldr	r3, [pc, #200]	; (8001d10 <HAL_RCC_OscConfig+0x504>)
 8001c46:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001c4a:	f003 0302 	and.w	r3, r3, #2
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d1ef      	bne.n	8001c32 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	f003 0304 	and.w	r3, r3, #4
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	f000 80a6 	beq.w	8001dac <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001c60:	2300      	movs	r3, #0
 8001c62:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001c64:	4b2a      	ldr	r3, [pc, #168]	; (8001d10 <HAL_RCC_OscConfig+0x504>)
 8001c66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c68:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d10d      	bne.n	8001c8c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001c70:	4b27      	ldr	r3, [pc, #156]	; (8001d10 <HAL_RCC_OscConfig+0x504>)
 8001c72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c74:	4a26      	ldr	r2, [pc, #152]	; (8001d10 <HAL_RCC_OscConfig+0x504>)
 8001c76:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c7a:	6593      	str	r3, [r2, #88]	; 0x58
 8001c7c:	4b24      	ldr	r3, [pc, #144]	; (8001d10 <HAL_RCC_OscConfig+0x504>)
 8001c7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c80:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c84:	60bb      	str	r3, [r7, #8]
 8001c86:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001c88:	2301      	movs	r3, #1
 8001c8a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001c8c:	4b21      	ldr	r3, [pc, #132]	; (8001d14 <HAL_RCC_OscConfig+0x508>)
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d118      	bne.n	8001cca <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001c98:	4b1e      	ldr	r3, [pc, #120]	; (8001d14 <HAL_RCC_OscConfig+0x508>)
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	4a1d      	ldr	r2, [pc, #116]	; (8001d14 <HAL_RCC_OscConfig+0x508>)
 8001c9e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ca2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001ca4:	f7ff faca 	bl	800123c <HAL_GetTick>
 8001ca8:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001caa:	e008      	b.n	8001cbe <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001cac:	f7ff fac6 	bl	800123c <HAL_GetTick>
 8001cb0:	4602      	mov	r2, r0
 8001cb2:	693b      	ldr	r3, [r7, #16]
 8001cb4:	1ad3      	subs	r3, r2, r3
 8001cb6:	2b02      	cmp	r3, #2
 8001cb8:	d901      	bls.n	8001cbe <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001cba:	2303      	movs	r3, #3
 8001cbc:	e1b2      	b.n	8002024 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001cbe:	4b15      	ldr	r3, [pc, #84]	; (8001d14 <HAL_RCC_OscConfig+0x508>)
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d0f0      	beq.n	8001cac <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	689b      	ldr	r3, [r3, #8]
 8001cce:	2b01      	cmp	r3, #1
 8001cd0:	d108      	bne.n	8001ce4 <HAL_RCC_OscConfig+0x4d8>
 8001cd2:	4b0f      	ldr	r3, [pc, #60]	; (8001d10 <HAL_RCC_OscConfig+0x504>)
 8001cd4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001cd8:	4a0d      	ldr	r2, [pc, #52]	; (8001d10 <HAL_RCC_OscConfig+0x504>)
 8001cda:	f043 0301 	orr.w	r3, r3, #1
 8001cde:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001ce2:	e029      	b.n	8001d38 <HAL_RCC_OscConfig+0x52c>
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	689b      	ldr	r3, [r3, #8]
 8001ce8:	2b05      	cmp	r3, #5
 8001cea:	d115      	bne.n	8001d18 <HAL_RCC_OscConfig+0x50c>
 8001cec:	4b08      	ldr	r3, [pc, #32]	; (8001d10 <HAL_RCC_OscConfig+0x504>)
 8001cee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001cf2:	4a07      	ldr	r2, [pc, #28]	; (8001d10 <HAL_RCC_OscConfig+0x504>)
 8001cf4:	f043 0304 	orr.w	r3, r3, #4
 8001cf8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001cfc:	4b04      	ldr	r3, [pc, #16]	; (8001d10 <HAL_RCC_OscConfig+0x504>)
 8001cfe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d02:	4a03      	ldr	r2, [pc, #12]	; (8001d10 <HAL_RCC_OscConfig+0x504>)
 8001d04:	f043 0301 	orr.w	r3, r3, #1
 8001d08:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001d0c:	e014      	b.n	8001d38 <HAL_RCC_OscConfig+0x52c>
 8001d0e:	bf00      	nop
 8001d10:	40021000 	.word	0x40021000
 8001d14:	40007000 	.word	0x40007000
 8001d18:	4b9a      	ldr	r3, [pc, #616]	; (8001f84 <HAL_RCC_OscConfig+0x778>)
 8001d1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d1e:	4a99      	ldr	r2, [pc, #612]	; (8001f84 <HAL_RCC_OscConfig+0x778>)
 8001d20:	f023 0301 	bic.w	r3, r3, #1
 8001d24:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001d28:	4b96      	ldr	r3, [pc, #600]	; (8001f84 <HAL_RCC_OscConfig+0x778>)
 8001d2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d2e:	4a95      	ldr	r2, [pc, #596]	; (8001f84 <HAL_RCC_OscConfig+0x778>)
 8001d30:	f023 0304 	bic.w	r3, r3, #4
 8001d34:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	689b      	ldr	r3, [r3, #8]
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d016      	beq.n	8001d6e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d40:	f7ff fa7c 	bl	800123c <HAL_GetTick>
 8001d44:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001d46:	e00a      	b.n	8001d5e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d48:	f7ff fa78 	bl	800123c <HAL_GetTick>
 8001d4c:	4602      	mov	r2, r0
 8001d4e:	693b      	ldr	r3, [r7, #16]
 8001d50:	1ad3      	subs	r3, r2, r3
 8001d52:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d56:	4293      	cmp	r3, r2
 8001d58:	d901      	bls.n	8001d5e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001d5a:	2303      	movs	r3, #3
 8001d5c:	e162      	b.n	8002024 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001d5e:	4b89      	ldr	r3, [pc, #548]	; (8001f84 <HAL_RCC_OscConfig+0x778>)
 8001d60:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d64:	f003 0302 	and.w	r3, r3, #2
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d0ed      	beq.n	8001d48 <HAL_RCC_OscConfig+0x53c>
 8001d6c:	e015      	b.n	8001d9a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d6e:	f7ff fa65 	bl	800123c <HAL_GetTick>
 8001d72:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001d74:	e00a      	b.n	8001d8c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d76:	f7ff fa61 	bl	800123c <HAL_GetTick>
 8001d7a:	4602      	mov	r2, r0
 8001d7c:	693b      	ldr	r3, [r7, #16]
 8001d7e:	1ad3      	subs	r3, r2, r3
 8001d80:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d84:	4293      	cmp	r3, r2
 8001d86:	d901      	bls.n	8001d8c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001d88:	2303      	movs	r3, #3
 8001d8a:	e14b      	b.n	8002024 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001d8c:	4b7d      	ldr	r3, [pc, #500]	; (8001f84 <HAL_RCC_OscConfig+0x778>)
 8001d8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d92:	f003 0302 	and.w	r3, r3, #2
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d1ed      	bne.n	8001d76 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001d9a:	7ffb      	ldrb	r3, [r7, #31]
 8001d9c:	2b01      	cmp	r3, #1
 8001d9e:	d105      	bne.n	8001dac <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001da0:	4b78      	ldr	r3, [pc, #480]	; (8001f84 <HAL_RCC_OscConfig+0x778>)
 8001da2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001da4:	4a77      	ldr	r2, [pc, #476]	; (8001f84 <HAL_RCC_OscConfig+0x778>)
 8001da6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001daa:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	f003 0320 	and.w	r3, r3, #32
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d03c      	beq.n	8001e32 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d01c      	beq.n	8001dfa <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001dc0:	4b70      	ldr	r3, [pc, #448]	; (8001f84 <HAL_RCC_OscConfig+0x778>)
 8001dc2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001dc6:	4a6f      	ldr	r2, [pc, #444]	; (8001f84 <HAL_RCC_OscConfig+0x778>)
 8001dc8:	f043 0301 	orr.w	r3, r3, #1
 8001dcc:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001dd0:	f7ff fa34 	bl	800123c <HAL_GetTick>
 8001dd4:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001dd6:	e008      	b.n	8001dea <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001dd8:	f7ff fa30 	bl	800123c <HAL_GetTick>
 8001ddc:	4602      	mov	r2, r0
 8001dde:	693b      	ldr	r3, [r7, #16]
 8001de0:	1ad3      	subs	r3, r2, r3
 8001de2:	2b02      	cmp	r3, #2
 8001de4:	d901      	bls.n	8001dea <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8001de6:	2303      	movs	r3, #3
 8001de8:	e11c      	b.n	8002024 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001dea:	4b66      	ldr	r3, [pc, #408]	; (8001f84 <HAL_RCC_OscConfig+0x778>)
 8001dec:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001df0:	f003 0302 	and.w	r3, r3, #2
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d0ef      	beq.n	8001dd8 <HAL_RCC_OscConfig+0x5cc>
 8001df8:	e01b      	b.n	8001e32 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001dfa:	4b62      	ldr	r3, [pc, #392]	; (8001f84 <HAL_RCC_OscConfig+0x778>)
 8001dfc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001e00:	4a60      	ldr	r2, [pc, #384]	; (8001f84 <HAL_RCC_OscConfig+0x778>)
 8001e02:	f023 0301 	bic.w	r3, r3, #1
 8001e06:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e0a:	f7ff fa17 	bl	800123c <HAL_GetTick>
 8001e0e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001e10:	e008      	b.n	8001e24 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001e12:	f7ff fa13 	bl	800123c <HAL_GetTick>
 8001e16:	4602      	mov	r2, r0
 8001e18:	693b      	ldr	r3, [r7, #16]
 8001e1a:	1ad3      	subs	r3, r2, r3
 8001e1c:	2b02      	cmp	r3, #2
 8001e1e:	d901      	bls.n	8001e24 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8001e20:	2303      	movs	r3, #3
 8001e22:	e0ff      	b.n	8002024 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001e24:	4b57      	ldr	r3, [pc, #348]	; (8001f84 <HAL_RCC_OscConfig+0x778>)
 8001e26:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001e2a:	f003 0302 	and.w	r3, r3, #2
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d1ef      	bne.n	8001e12 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	f000 80f3 	beq.w	8002022 <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e40:	2b02      	cmp	r3, #2
 8001e42:	f040 80c9 	bne.w	8001fd8 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001e46:	4b4f      	ldr	r3, [pc, #316]	; (8001f84 <HAL_RCC_OscConfig+0x778>)
 8001e48:	68db      	ldr	r3, [r3, #12]
 8001e4a:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e4c:	697b      	ldr	r3, [r7, #20]
 8001e4e:	f003 0203 	and.w	r2, r3, #3
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e56:	429a      	cmp	r2, r3
 8001e58:	d12c      	bne.n	8001eb4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001e5a:	697b      	ldr	r3, [r7, #20]
 8001e5c:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e64:	3b01      	subs	r3, #1
 8001e66:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e68:	429a      	cmp	r2, r3
 8001e6a:	d123      	bne.n	8001eb4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001e6c:	697b      	ldr	r3, [r7, #20]
 8001e6e:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e76:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001e78:	429a      	cmp	r2, r3
 8001e7a:	d11b      	bne.n	8001eb4 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001e7c:	697b      	ldr	r3, [r7, #20]
 8001e7e:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e86:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001e88:	429a      	cmp	r2, r3
 8001e8a:	d113      	bne.n	8001eb4 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001e8c:	697b      	ldr	r3, [r7, #20]
 8001e8e:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e96:	085b      	lsrs	r3, r3, #1
 8001e98:	3b01      	subs	r3, #1
 8001e9a:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001e9c:	429a      	cmp	r2, r3
 8001e9e:	d109      	bne.n	8001eb4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001ea0:	697b      	ldr	r3, [r7, #20]
 8001ea2:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eaa:	085b      	lsrs	r3, r3, #1
 8001eac:	3b01      	subs	r3, #1
 8001eae:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001eb0:	429a      	cmp	r2, r3
 8001eb2:	d06b      	beq.n	8001f8c <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001eb4:	69bb      	ldr	r3, [r7, #24]
 8001eb6:	2b0c      	cmp	r3, #12
 8001eb8:	d062      	beq.n	8001f80 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001eba:	4b32      	ldr	r3, [pc, #200]	; (8001f84 <HAL_RCC_OscConfig+0x778>)
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d001      	beq.n	8001eca <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8001ec6:	2301      	movs	r3, #1
 8001ec8:	e0ac      	b.n	8002024 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001eca:	4b2e      	ldr	r3, [pc, #184]	; (8001f84 <HAL_RCC_OscConfig+0x778>)
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	4a2d      	ldr	r2, [pc, #180]	; (8001f84 <HAL_RCC_OscConfig+0x778>)
 8001ed0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001ed4:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001ed6:	f7ff f9b1 	bl	800123c <HAL_GetTick>
 8001eda:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001edc:	e008      	b.n	8001ef0 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ede:	f7ff f9ad 	bl	800123c <HAL_GetTick>
 8001ee2:	4602      	mov	r2, r0
 8001ee4:	693b      	ldr	r3, [r7, #16]
 8001ee6:	1ad3      	subs	r3, r2, r3
 8001ee8:	2b02      	cmp	r3, #2
 8001eea:	d901      	bls.n	8001ef0 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8001eec:	2303      	movs	r3, #3
 8001eee:	e099      	b.n	8002024 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001ef0:	4b24      	ldr	r3, [pc, #144]	; (8001f84 <HAL_RCC_OscConfig+0x778>)
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d1f0      	bne.n	8001ede <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001efc:	4b21      	ldr	r3, [pc, #132]	; (8001f84 <HAL_RCC_OscConfig+0x778>)
 8001efe:	68da      	ldr	r2, [r3, #12]
 8001f00:	4b21      	ldr	r3, [pc, #132]	; (8001f88 <HAL_RCC_OscConfig+0x77c>)
 8001f02:	4013      	ands	r3, r2
 8001f04:	687a      	ldr	r2, [r7, #4]
 8001f06:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001f08:	687a      	ldr	r2, [r7, #4]
 8001f0a:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001f0c:	3a01      	subs	r2, #1
 8001f0e:	0112      	lsls	r2, r2, #4
 8001f10:	4311      	orrs	r1, r2
 8001f12:	687a      	ldr	r2, [r7, #4]
 8001f14:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001f16:	0212      	lsls	r2, r2, #8
 8001f18:	4311      	orrs	r1, r2
 8001f1a:	687a      	ldr	r2, [r7, #4]
 8001f1c:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001f1e:	0852      	lsrs	r2, r2, #1
 8001f20:	3a01      	subs	r2, #1
 8001f22:	0552      	lsls	r2, r2, #21
 8001f24:	4311      	orrs	r1, r2
 8001f26:	687a      	ldr	r2, [r7, #4]
 8001f28:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001f2a:	0852      	lsrs	r2, r2, #1
 8001f2c:	3a01      	subs	r2, #1
 8001f2e:	0652      	lsls	r2, r2, #25
 8001f30:	4311      	orrs	r1, r2
 8001f32:	687a      	ldr	r2, [r7, #4]
 8001f34:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001f36:	06d2      	lsls	r2, r2, #27
 8001f38:	430a      	orrs	r2, r1
 8001f3a:	4912      	ldr	r1, [pc, #72]	; (8001f84 <HAL_RCC_OscConfig+0x778>)
 8001f3c:	4313      	orrs	r3, r2
 8001f3e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001f40:	4b10      	ldr	r3, [pc, #64]	; (8001f84 <HAL_RCC_OscConfig+0x778>)
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	4a0f      	ldr	r2, [pc, #60]	; (8001f84 <HAL_RCC_OscConfig+0x778>)
 8001f46:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001f4a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001f4c:	4b0d      	ldr	r3, [pc, #52]	; (8001f84 <HAL_RCC_OscConfig+0x778>)
 8001f4e:	68db      	ldr	r3, [r3, #12]
 8001f50:	4a0c      	ldr	r2, [pc, #48]	; (8001f84 <HAL_RCC_OscConfig+0x778>)
 8001f52:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001f56:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001f58:	f7ff f970 	bl	800123c <HAL_GetTick>
 8001f5c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001f5e:	e008      	b.n	8001f72 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f60:	f7ff f96c 	bl	800123c <HAL_GetTick>
 8001f64:	4602      	mov	r2, r0
 8001f66:	693b      	ldr	r3, [r7, #16]
 8001f68:	1ad3      	subs	r3, r2, r3
 8001f6a:	2b02      	cmp	r3, #2
 8001f6c:	d901      	bls.n	8001f72 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8001f6e:	2303      	movs	r3, #3
 8001f70:	e058      	b.n	8002024 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001f72:	4b04      	ldr	r3, [pc, #16]	; (8001f84 <HAL_RCC_OscConfig+0x778>)
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d0f0      	beq.n	8001f60 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001f7e:	e050      	b.n	8002022 <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001f80:	2301      	movs	r3, #1
 8001f82:	e04f      	b.n	8002024 <HAL_RCC_OscConfig+0x818>
 8001f84:	40021000 	.word	0x40021000
 8001f88:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001f8c:	4b27      	ldr	r3, [pc, #156]	; (800202c <HAL_RCC_OscConfig+0x820>)
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d144      	bne.n	8002022 <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001f98:	4b24      	ldr	r3, [pc, #144]	; (800202c <HAL_RCC_OscConfig+0x820>)
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	4a23      	ldr	r2, [pc, #140]	; (800202c <HAL_RCC_OscConfig+0x820>)
 8001f9e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001fa2:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001fa4:	4b21      	ldr	r3, [pc, #132]	; (800202c <HAL_RCC_OscConfig+0x820>)
 8001fa6:	68db      	ldr	r3, [r3, #12]
 8001fa8:	4a20      	ldr	r2, [pc, #128]	; (800202c <HAL_RCC_OscConfig+0x820>)
 8001faa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001fae:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001fb0:	f7ff f944 	bl	800123c <HAL_GetTick>
 8001fb4:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001fb6:	e008      	b.n	8001fca <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001fb8:	f7ff f940 	bl	800123c <HAL_GetTick>
 8001fbc:	4602      	mov	r2, r0
 8001fbe:	693b      	ldr	r3, [r7, #16]
 8001fc0:	1ad3      	subs	r3, r2, r3
 8001fc2:	2b02      	cmp	r3, #2
 8001fc4:	d901      	bls.n	8001fca <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 8001fc6:	2303      	movs	r3, #3
 8001fc8:	e02c      	b.n	8002024 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001fca:	4b18      	ldr	r3, [pc, #96]	; (800202c <HAL_RCC_OscConfig+0x820>)
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d0f0      	beq.n	8001fb8 <HAL_RCC_OscConfig+0x7ac>
 8001fd6:	e024      	b.n	8002022 <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001fd8:	69bb      	ldr	r3, [r7, #24]
 8001fda:	2b0c      	cmp	r3, #12
 8001fdc:	d01f      	beq.n	800201e <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001fde:	4b13      	ldr	r3, [pc, #76]	; (800202c <HAL_RCC_OscConfig+0x820>)
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	4a12      	ldr	r2, [pc, #72]	; (800202c <HAL_RCC_OscConfig+0x820>)
 8001fe4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001fe8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fea:	f7ff f927 	bl	800123c <HAL_GetTick>
 8001fee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001ff0:	e008      	b.n	8002004 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ff2:	f7ff f923 	bl	800123c <HAL_GetTick>
 8001ff6:	4602      	mov	r2, r0
 8001ff8:	693b      	ldr	r3, [r7, #16]
 8001ffa:	1ad3      	subs	r3, r2, r3
 8001ffc:	2b02      	cmp	r3, #2
 8001ffe:	d901      	bls.n	8002004 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8002000:	2303      	movs	r3, #3
 8002002:	e00f      	b.n	8002024 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002004:	4b09      	ldr	r3, [pc, #36]	; (800202c <HAL_RCC_OscConfig+0x820>)
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800200c:	2b00      	cmp	r3, #0
 800200e:	d1f0      	bne.n	8001ff2 <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8002010:	4b06      	ldr	r3, [pc, #24]	; (800202c <HAL_RCC_OscConfig+0x820>)
 8002012:	68da      	ldr	r2, [r3, #12]
 8002014:	4905      	ldr	r1, [pc, #20]	; (800202c <HAL_RCC_OscConfig+0x820>)
 8002016:	4b06      	ldr	r3, [pc, #24]	; (8002030 <HAL_RCC_OscConfig+0x824>)
 8002018:	4013      	ands	r3, r2
 800201a:	60cb      	str	r3, [r1, #12]
 800201c:	e001      	b.n	8002022 <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800201e:	2301      	movs	r3, #1
 8002020:	e000      	b.n	8002024 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8002022:	2300      	movs	r3, #0
}
 8002024:	4618      	mov	r0, r3
 8002026:	3720      	adds	r7, #32
 8002028:	46bd      	mov	sp, r7
 800202a:	bd80      	pop	{r7, pc}
 800202c:	40021000 	.word	0x40021000
 8002030:	feeefffc 	.word	0xfeeefffc

08002034 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002034:	b580      	push	{r7, lr}
 8002036:	b084      	sub	sp, #16
 8002038:	af00      	add	r7, sp, #0
 800203a:	6078      	str	r0, [r7, #4]
 800203c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	2b00      	cmp	r3, #0
 8002042:	d101      	bne.n	8002048 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002044:	2301      	movs	r3, #1
 8002046:	e0e7      	b.n	8002218 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002048:	4b75      	ldr	r3, [pc, #468]	; (8002220 <HAL_RCC_ClockConfig+0x1ec>)
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	f003 0307 	and.w	r3, r3, #7
 8002050:	683a      	ldr	r2, [r7, #0]
 8002052:	429a      	cmp	r2, r3
 8002054:	d910      	bls.n	8002078 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002056:	4b72      	ldr	r3, [pc, #456]	; (8002220 <HAL_RCC_ClockConfig+0x1ec>)
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	f023 0207 	bic.w	r2, r3, #7
 800205e:	4970      	ldr	r1, [pc, #448]	; (8002220 <HAL_RCC_ClockConfig+0x1ec>)
 8002060:	683b      	ldr	r3, [r7, #0]
 8002062:	4313      	orrs	r3, r2
 8002064:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002066:	4b6e      	ldr	r3, [pc, #440]	; (8002220 <HAL_RCC_ClockConfig+0x1ec>)
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	f003 0307 	and.w	r3, r3, #7
 800206e:	683a      	ldr	r2, [r7, #0]
 8002070:	429a      	cmp	r2, r3
 8002072:	d001      	beq.n	8002078 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002074:	2301      	movs	r3, #1
 8002076:	e0cf      	b.n	8002218 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	f003 0302 	and.w	r3, r3, #2
 8002080:	2b00      	cmp	r3, #0
 8002082:	d010      	beq.n	80020a6 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	689a      	ldr	r2, [r3, #8]
 8002088:	4b66      	ldr	r3, [pc, #408]	; (8002224 <HAL_RCC_ClockConfig+0x1f0>)
 800208a:	689b      	ldr	r3, [r3, #8]
 800208c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002090:	429a      	cmp	r2, r3
 8002092:	d908      	bls.n	80020a6 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002094:	4b63      	ldr	r3, [pc, #396]	; (8002224 <HAL_RCC_ClockConfig+0x1f0>)
 8002096:	689b      	ldr	r3, [r3, #8]
 8002098:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	689b      	ldr	r3, [r3, #8]
 80020a0:	4960      	ldr	r1, [pc, #384]	; (8002224 <HAL_RCC_ClockConfig+0x1f0>)
 80020a2:	4313      	orrs	r3, r2
 80020a4:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	f003 0301 	and.w	r3, r3, #1
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d04c      	beq.n	800214c <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	685b      	ldr	r3, [r3, #4]
 80020b6:	2b03      	cmp	r3, #3
 80020b8:	d107      	bne.n	80020ca <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80020ba:	4b5a      	ldr	r3, [pc, #360]	; (8002224 <HAL_RCC_ClockConfig+0x1f0>)
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d121      	bne.n	800210a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80020c6:	2301      	movs	r3, #1
 80020c8:	e0a6      	b.n	8002218 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	685b      	ldr	r3, [r3, #4]
 80020ce:	2b02      	cmp	r3, #2
 80020d0:	d107      	bne.n	80020e2 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80020d2:	4b54      	ldr	r3, [pc, #336]	; (8002224 <HAL_RCC_ClockConfig+0x1f0>)
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d115      	bne.n	800210a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80020de:	2301      	movs	r3, #1
 80020e0:	e09a      	b.n	8002218 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	685b      	ldr	r3, [r3, #4]
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d107      	bne.n	80020fa <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80020ea:	4b4e      	ldr	r3, [pc, #312]	; (8002224 <HAL_RCC_ClockConfig+0x1f0>)
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	f003 0302 	and.w	r3, r3, #2
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d109      	bne.n	800210a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80020f6:	2301      	movs	r3, #1
 80020f8:	e08e      	b.n	8002218 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80020fa:	4b4a      	ldr	r3, [pc, #296]	; (8002224 <HAL_RCC_ClockConfig+0x1f0>)
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002102:	2b00      	cmp	r3, #0
 8002104:	d101      	bne.n	800210a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002106:	2301      	movs	r3, #1
 8002108:	e086      	b.n	8002218 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800210a:	4b46      	ldr	r3, [pc, #280]	; (8002224 <HAL_RCC_ClockConfig+0x1f0>)
 800210c:	689b      	ldr	r3, [r3, #8]
 800210e:	f023 0203 	bic.w	r2, r3, #3
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	685b      	ldr	r3, [r3, #4]
 8002116:	4943      	ldr	r1, [pc, #268]	; (8002224 <HAL_RCC_ClockConfig+0x1f0>)
 8002118:	4313      	orrs	r3, r2
 800211a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800211c:	f7ff f88e 	bl	800123c <HAL_GetTick>
 8002120:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002122:	e00a      	b.n	800213a <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002124:	f7ff f88a 	bl	800123c <HAL_GetTick>
 8002128:	4602      	mov	r2, r0
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	1ad3      	subs	r3, r2, r3
 800212e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002132:	4293      	cmp	r3, r2
 8002134:	d901      	bls.n	800213a <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8002136:	2303      	movs	r3, #3
 8002138:	e06e      	b.n	8002218 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800213a:	4b3a      	ldr	r3, [pc, #232]	; (8002224 <HAL_RCC_ClockConfig+0x1f0>)
 800213c:	689b      	ldr	r3, [r3, #8]
 800213e:	f003 020c 	and.w	r2, r3, #12
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	685b      	ldr	r3, [r3, #4]
 8002146:	009b      	lsls	r3, r3, #2
 8002148:	429a      	cmp	r2, r3
 800214a:	d1eb      	bne.n	8002124 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	f003 0302 	and.w	r3, r3, #2
 8002154:	2b00      	cmp	r3, #0
 8002156:	d010      	beq.n	800217a <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	689a      	ldr	r2, [r3, #8]
 800215c:	4b31      	ldr	r3, [pc, #196]	; (8002224 <HAL_RCC_ClockConfig+0x1f0>)
 800215e:	689b      	ldr	r3, [r3, #8]
 8002160:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002164:	429a      	cmp	r2, r3
 8002166:	d208      	bcs.n	800217a <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002168:	4b2e      	ldr	r3, [pc, #184]	; (8002224 <HAL_RCC_ClockConfig+0x1f0>)
 800216a:	689b      	ldr	r3, [r3, #8]
 800216c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	689b      	ldr	r3, [r3, #8]
 8002174:	492b      	ldr	r1, [pc, #172]	; (8002224 <HAL_RCC_ClockConfig+0x1f0>)
 8002176:	4313      	orrs	r3, r2
 8002178:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800217a:	4b29      	ldr	r3, [pc, #164]	; (8002220 <HAL_RCC_ClockConfig+0x1ec>)
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	f003 0307 	and.w	r3, r3, #7
 8002182:	683a      	ldr	r2, [r7, #0]
 8002184:	429a      	cmp	r2, r3
 8002186:	d210      	bcs.n	80021aa <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002188:	4b25      	ldr	r3, [pc, #148]	; (8002220 <HAL_RCC_ClockConfig+0x1ec>)
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	f023 0207 	bic.w	r2, r3, #7
 8002190:	4923      	ldr	r1, [pc, #140]	; (8002220 <HAL_RCC_ClockConfig+0x1ec>)
 8002192:	683b      	ldr	r3, [r7, #0]
 8002194:	4313      	orrs	r3, r2
 8002196:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002198:	4b21      	ldr	r3, [pc, #132]	; (8002220 <HAL_RCC_ClockConfig+0x1ec>)
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	f003 0307 	and.w	r3, r3, #7
 80021a0:	683a      	ldr	r2, [r7, #0]
 80021a2:	429a      	cmp	r2, r3
 80021a4:	d001      	beq.n	80021aa <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80021a6:	2301      	movs	r3, #1
 80021a8:	e036      	b.n	8002218 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	f003 0304 	and.w	r3, r3, #4
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d008      	beq.n	80021c8 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80021b6:	4b1b      	ldr	r3, [pc, #108]	; (8002224 <HAL_RCC_ClockConfig+0x1f0>)
 80021b8:	689b      	ldr	r3, [r3, #8]
 80021ba:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	68db      	ldr	r3, [r3, #12]
 80021c2:	4918      	ldr	r1, [pc, #96]	; (8002224 <HAL_RCC_ClockConfig+0x1f0>)
 80021c4:	4313      	orrs	r3, r2
 80021c6:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	f003 0308 	and.w	r3, r3, #8
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d009      	beq.n	80021e8 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80021d4:	4b13      	ldr	r3, [pc, #76]	; (8002224 <HAL_RCC_ClockConfig+0x1f0>)
 80021d6:	689b      	ldr	r3, [r3, #8]
 80021d8:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	691b      	ldr	r3, [r3, #16]
 80021e0:	00db      	lsls	r3, r3, #3
 80021e2:	4910      	ldr	r1, [pc, #64]	; (8002224 <HAL_RCC_ClockConfig+0x1f0>)
 80021e4:	4313      	orrs	r3, r2
 80021e6:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80021e8:	f000 f824 	bl	8002234 <HAL_RCC_GetSysClockFreq>
 80021ec:	4602      	mov	r2, r0
 80021ee:	4b0d      	ldr	r3, [pc, #52]	; (8002224 <HAL_RCC_ClockConfig+0x1f0>)
 80021f0:	689b      	ldr	r3, [r3, #8]
 80021f2:	091b      	lsrs	r3, r3, #4
 80021f4:	f003 030f 	and.w	r3, r3, #15
 80021f8:	490b      	ldr	r1, [pc, #44]	; (8002228 <HAL_RCC_ClockConfig+0x1f4>)
 80021fa:	5ccb      	ldrb	r3, [r1, r3]
 80021fc:	f003 031f 	and.w	r3, r3, #31
 8002200:	fa22 f303 	lsr.w	r3, r2, r3
 8002204:	4a09      	ldr	r2, [pc, #36]	; (800222c <HAL_RCC_ClockConfig+0x1f8>)
 8002206:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002208:	4b09      	ldr	r3, [pc, #36]	; (8002230 <HAL_RCC_ClockConfig+0x1fc>)
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	4618      	mov	r0, r3
 800220e:	f7fe ffc5 	bl	800119c <HAL_InitTick>
 8002212:	4603      	mov	r3, r0
 8002214:	72fb      	strb	r3, [r7, #11]

  return status;
 8002216:	7afb      	ldrb	r3, [r7, #11]
}
 8002218:	4618      	mov	r0, r3
 800221a:	3710      	adds	r7, #16
 800221c:	46bd      	mov	sp, r7
 800221e:	bd80      	pop	{r7, pc}
 8002220:	40022000 	.word	0x40022000
 8002224:	40021000 	.word	0x40021000
 8002228:	080044bc 	.word	0x080044bc
 800222c:	20000000 	.word	0x20000000
 8002230:	20000004 	.word	0x20000004

08002234 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002234:	b480      	push	{r7}
 8002236:	b089      	sub	sp, #36	; 0x24
 8002238:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800223a:	2300      	movs	r3, #0
 800223c:	61fb      	str	r3, [r7, #28]
 800223e:	2300      	movs	r3, #0
 8002240:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002242:	4b3e      	ldr	r3, [pc, #248]	; (800233c <HAL_RCC_GetSysClockFreq+0x108>)
 8002244:	689b      	ldr	r3, [r3, #8]
 8002246:	f003 030c 	and.w	r3, r3, #12
 800224a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800224c:	4b3b      	ldr	r3, [pc, #236]	; (800233c <HAL_RCC_GetSysClockFreq+0x108>)
 800224e:	68db      	ldr	r3, [r3, #12]
 8002250:	f003 0303 	and.w	r3, r3, #3
 8002254:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002256:	693b      	ldr	r3, [r7, #16]
 8002258:	2b00      	cmp	r3, #0
 800225a:	d005      	beq.n	8002268 <HAL_RCC_GetSysClockFreq+0x34>
 800225c:	693b      	ldr	r3, [r7, #16]
 800225e:	2b0c      	cmp	r3, #12
 8002260:	d121      	bne.n	80022a6 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	2b01      	cmp	r3, #1
 8002266:	d11e      	bne.n	80022a6 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002268:	4b34      	ldr	r3, [pc, #208]	; (800233c <HAL_RCC_GetSysClockFreq+0x108>)
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	f003 0308 	and.w	r3, r3, #8
 8002270:	2b00      	cmp	r3, #0
 8002272:	d107      	bne.n	8002284 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002274:	4b31      	ldr	r3, [pc, #196]	; (800233c <HAL_RCC_GetSysClockFreq+0x108>)
 8002276:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800227a:	0a1b      	lsrs	r3, r3, #8
 800227c:	f003 030f 	and.w	r3, r3, #15
 8002280:	61fb      	str	r3, [r7, #28]
 8002282:	e005      	b.n	8002290 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002284:	4b2d      	ldr	r3, [pc, #180]	; (800233c <HAL_RCC_GetSysClockFreq+0x108>)
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	091b      	lsrs	r3, r3, #4
 800228a:	f003 030f 	and.w	r3, r3, #15
 800228e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002290:	4a2b      	ldr	r2, [pc, #172]	; (8002340 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002292:	69fb      	ldr	r3, [r7, #28]
 8002294:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002298:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800229a:	693b      	ldr	r3, [r7, #16]
 800229c:	2b00      	cmp	r3, #0
 800229e:	d10d      	bne.n	80022bc <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80022a0:	69fb      	ldr	r3, [r7, #28]
 80022a2:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80022a4:	e00a      	b.n	80022bc <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80022a6:	693b      	ldr	r3, [r7, #16]
 80022a8:	2b04      	cmp	r3, #4
 80022aa:	d102      	bne.n	80022b2 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80022ac:	4b25      	ldr	r3, [pc, #148]	; (8002344 <HAL_RCC_GetSysClockFreq+0x110>)
 80022ae:	61bb      	str	r3, [r7, #24]
 80022b0:	e004      	b.n	80022bc <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80022b2:	693b      	ldr	r3, [r7, #16]
 80022b4:	2b08      	cmp	r3, #8
 80022b6:	d101      	bne.n	80022bc <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80022b8:	4b23      	ldr	r3, [pc, #140]	; (8002348 <HAL_RCC_GetSysClockFreq+0x114>)
 80022ba:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80022bc:	693b      	ldr	r3, [r7, #16]
 80022be:	2b0c      	cmp	r3, #12
 80022c0:	d134      	bne.n	800232c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80022c2:	4b1e      	ldr	r3, [pc, #120]	; (800233c <HAL_RCC_GetSysClockFreq+0x108>)
 80022c4:	68db      	ldr	r3, [r3, #12]
 80022c6:	f003 0303 	and.w	r3, r3, #3
 80022ca:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80022cc:	68bb      	ldr	r3, [r7, #8]
 80022ce:	2b02      	cmp	r3, #2
 80022d0:	d003      	beq.n	80022da <HAL_RCC_GetSysClockFreq+0xa6>
 80022d2:	68bb      	ldr	r3, [r7, #8]
 80022d4:	2b03      	cmp	r3, #3
 80022d6:	d003      	beq.n	80022e0 <HAL_RCC_GetSysClockFreq+0xac>
 80022d8:	e005      	b.n	80022e6 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80022da:	4b1a      	ldr	r3, [pc, #104]	; (8002344 <HAL_RCC_GetSysClockFreq+0x110>)
 80022dc:	617b      	str	r3, [r7, #20]
      break;
 80022de:	e005      	b.n	80022ec <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80022e0:	4b19      	ldr	r3, [pc, #100]	; (8002348 <HAL_RCC_GetSysClockFreq+0x114>)
 80022e2:	617b      	str	r3, [r7, #20]
      break;
 80022e4:	e002      	b.n	80022ec <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80022e6:	69fb      	ldr	r3, [r7, #28]
 80022e8:	617b      	str	r3, [r7, #20]
      break;
 80022ea:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80022ec:	4b13      	ldr	r3, [pc, #76]	; (800233c <HAL_RCC_GetSysClockFreq+0x108>)
 80022ee:	68db      	ldr	r3, [r3, #12]
 80022f0:	091b      	lsrs	r3, r3, #4
 80022f2:	f003 0307 	and.w	r3, r3, #7
 80022f6:	3301      	adds	r3, #1
 80022f8:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80022fa:	4b10      	ldr	r3, [pc, #64]	; (800233c <HAL_RCC_GetSysClockFreq+0x108>)
 80022fc:	68db      	ldr	r3, [r3, #12]
 80022fe:	0a1b      	lsrs	r3, r3, #8
 8002300:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002304:	697a      	ldr	r2, [r7, #20]
 8002306:	fb03 f202 	mul.w	r2, r3, r2
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002310:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002312:	4b0a      	ldr	r3, [pc, #40]	; (800233c <HAL_RCC_GetSysClockFreq+0x108>)
 8002314:	68db      	ldr	r3, [r3, #12]
 8002316:	0e5b      	lsrs	r3, r3, #25
 8002318:	f003 0303 	and.w	r3, r3, #3
 800231c:	3301      	adds	r3, #1
 800231e:	005b      	lsls	r3, r3, #1
 8002320:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002322:	697a      	ldr	r2, [r7, #20]
 8002324:	683b      	ldr	r3, [r7, #0]
 8002326:	fbb2 f3f3 	udiv	r3, r2, r3
 800232a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800232c:	69bb      	ldr	r3, [r7, #24]
}
 800232e:	4618      	mov	r0, r3
 8002330:	3724      	adds	r7, #36	; 0x24
 8002332:	46bd      	mov	sp, r7
 8002334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002338:	4770      	bx	lr
 800233a:	bf00      	nop
 800233c:	40021000 	.word	0x40021000
 8002340:	080044d4 	.word	0x080044d4
 8002344:	00f42400 	.word	0x00f42400
 8002348:	007a1200 	.word	0x007a1200

0800234c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800234c:	b480      	push	{r7}
 800234e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002350:	4b03      	ldr	r3, [pc, #12]	; (8002360 <HAL_RCC_GetHCLKFreq+0x14>)
 8002352:	681b      	ldr	r3, [r3, #0]
}
 8002354:	4618      	mov	r0, r3
 8002356:	46bd      	mov	sp, r7
 8002358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800235c:	4770      	bx	lr
 800235e:	bf00      	nop
 8002360:	20000000 	.word	0x20000000

08002364 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002364:	b580      	push	{r7, lr}
 8002366:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002368:	f7ff fff0 	bl	800234c <HAL_RCC_GetHCLKFreq>
 800236c:	4602      	mov	r2, r0
 800236e:	4b06      	ldr	r3, [pc, #24]	; (8002388 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002370:	689b      	ldr	r3, [r3, #8]
 8002372:	0a1b      	lsrs	r3, r3, #8
 8002374:	f003 0307 	and.w	r3, r3, #7
 8002378:	4904      	ldr	r1, [pc, #16]	; (800238c <HAL_RCC_GetPCLK1Freq+0x28>)
 800237a:	5ccb      	ldrb	r3, [r1, r3]
 800237c:	f003 031f 	and.w	r3, r3, #31
 8002380:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002384:	4618      	mov	r0, r3
 8002386:	bd80      	pop	{r7, pc}
 8002388:	40021000 	.word	0x40021000
 800238c:	080044cc 	.word	0x080044cc

08002390 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002390:	b580      	push	{r7, lr}
 8002392:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002394:	f7ff ffda 	bl	800234c <HAL_RCC_GetHCLKFreq>
 8002398:	4602      	mov	r2, r0
 800239a:	4b06      	ldr	r3, [pc, #24]	; (80023b4 <HAL_RCC_GetPCLK2Freq+0x24>)
 800239c:	689b      	ldr	r3, [r3, #8]
 800239e:	0adb      	lsrs	r3, r3, #11
 80023a0:	f003 0307 	and.w	r3, r3, #7
 80023a4:	4904      	ldr	r1, [pc, #16]	; (80023b8 <HAL_RCC_GetPCLK2Freq+0x28>)
 80023a6:	5ccb      	ldrb	r3, [r1, r3]
 80023a8:	f003 031f 	and.w	r3, r3, #31
 80023ac:	fa22 f303 	lsr.w	r3, r2, r3
}
 80023b0:	4618      	mov	r0, r3
 80023b2:	bd80      	pop	{r7, pc}
 80023b4:	40021000 	.word	0x40021000
 80023b8:	080044cc 	.word	0x080044cc

080023bc <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80023bc:	b580      	push	{r7, lr}
 80023be:	b086      	sub	sp, #24
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80023c4:	2300      	movs	r3, #0
 80023c6:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80023c8:	4b2a      	ldr	r3, [pc, #168]	; (8002474 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80023ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d003      	beq.n	80023dc <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80023d4:	f7ff f9b6 	bl	8001744 <HAL_PWREx_GetVoltageRange>
 80023d8:	6178      	str	r0, [r7, #20]
 80023da:	e014      	b.n	8002406 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80023dc:	4b25      	ldr	r3, [pc, #148]	; (8002474 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80023de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023e0:	4a24      	ldr	r2, [pc, #144]	; (8002474 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80023e2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80023e6:	6593      	str	r3, [r2, #88]	; 0x58
 80023e8:	4b22      	ldr	r3, [pc, #136]	; (8002474 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80023ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023f0:	60fb      	str	r3, [r7, #12]
 80023f2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80023f4:	f7ff f9a6 	bl	8001744 <HAL_PWREx_GetVoltageRange>
 80023f8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80023fa:	4b1e      	ldr	r3, [pc, #120]	; (8002474 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80023fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023fe:	4a1d      	ldr	r2, [pc, #116]	; (8002474 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002400:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002404:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002406:	697b      	ldr	r3, [r7, #20]
 8002408:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800240c:	d10b      	bne.n	8002426 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	2b80      	cmp	r3, #128	; 0x80
 8002412:	d919      	bls.n	8002448 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	2ba0      	cmp	r3, #160	; 0xa0
 8002418:	d902      	bls.n	8002420 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800241a:	2302      	movs	r3, #2
 800241c:	613b      	str	r3, [r7, #16]
 800241e:	e013      	b.n	8002448 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002420:	2301      	movs	r3, #1
 8002422:	613b      	str	r3, [r7, #16]
 8002424:	e010      	b.n	8002448 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	2b80      	cmp	r3, #128	; 0x80
 800242a:	d902      	bls.n	8002432 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800242c:	2303      	movs	r3, #3
 800242e:	613b      	str	r3, [r7, #16]
 8002430:	e00a      	b.n	8002448 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	2b80      	cmp	r3, #128	; 0x80
 8002436:	d102      	bne.n	800243e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002438:	2302      	movs	r3, #2
 800243a:	613b      	str	r3, [r7, #16]
 800243c:	e004      	b.n	8002448 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	2b70      	cmp	r3, #112	; 0x70
 8002442:	d101      	bne.n	8002448 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002444:	2301      	movs	r3, #1
 8002446:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002448:	4b0b      	ldr	r3, [pc, #44]	; (8002478 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	f023 0207 	bic.w	r2, r3, #7
 8002450:	4909      	ldr	r1, [pc, #36]	; (8002478 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002452:	693b      	ldr	r3, [r7, #16]
 8002454:	4313      	orrs	r3, r2
 8002456:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002458:	4b07      	ldr	r3, [pc, #28]	; (8002478 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	f003 0307 	and.w	r3, r3, #7
 8002460:	693a      	ldr	r2, [r7, #16]
 8002462:	429a      	cmp	r2, r3
 8002464:	d001      	beq.n	800246a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002466:	2301      	movs	r3, #1
 8002468:	e000      	b.n	800246c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800246a:	2300      	movs	r3, #0
}
 800246c:	4618      	mov	r0, r3
 800246e:	3718      	adds	r7, #24
 8002470:	46bd      	mov	sp, r7
 8002472:	bd80      	pop	{r7, pc}
 8002474:	40021000 	.word	0x40021000
 8002478:	40022000 	.word	0x40022000

0800247c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800247c:	b580      	push	{r7, lr}
 800247e:	b086      	sub	sp, #24
 8002480:	af00      	add	r7, sp, #0
 8002482:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002484:	2300      	movs	r3, #0
 8002486:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002488:	2300      	movs	r3, #0
 800248a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002494:	2b00      	cmp	r3, #0
 8002496:	d031      	beq.n	80024fc <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800249c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80024a0:	d01a      	beq.n	80024d8 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 80024a2:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80024a6:	d814      	bhi.n	80024d2 <HAL_RCCEx_PeriphCLKConfig+0x56>
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d009      	beq.n	80024c0 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80024ac:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80024b0:	d10f      	bne.n	80024d2 <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 80024b2:	4b5d      	ldr	r3, [pc, #372]	; (8002628 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80024b4:	68db      	ldr	r3, [r3, #12]
 80024b6:	4a5c      	ldr	r2, [pc, #368]	; (8002628 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80024b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80024bc:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80024be:	e00c      	b.n	80024da <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	3304      	adds	r3, #4
 80024c4:	2100      	movs	r1, #0
 80024c6:	4618      	mov	r0, r3
 80024c8:	f000 f9de 	bl	8002888 <RCCEx_PLLSAI1_Config>
 80024cc:	4603      	mov	r3, r0
 80024ce:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80024d0:	e003      	b.n	80024da <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80024d2:	2301      	movs	r3, #1
 80024d4:	74fb      	strb	r3, [r7, #19]
      break;
 80024d6:	e000      	b.n	80024da <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 80024d8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80024da:	7cfb      	ldrb	r3, [r7, #19]
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d10b      	bne.n	80024f8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80024e0:	4b51      	ldr	r3, [pc, #324]	; (8002628 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80024e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024e6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80024ee:	494e      	ldr	r1, [pc, #312]	; (8002628 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80024f0:	4313      	orrs	r3, r2
 80024f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80024f6:	e001      	b.n	80024fc <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80024f8:	7cfb      	ldrb	r3, [r7, #19]
 80024fa:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002504:	2b00      	cmp	r3, #0
 8002506:	f000 809e 	beq.w	8002646 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 800250a:	2300      	movs	r3, #0
 800250c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800250e:	4b46      	ldr	r3, [pc, #280]	; (8002628 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002510:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002512:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002516:	2b00      	cmp	r3, #0
 8002518:	d101      	bne.n	800251e <HAL_RCCEx_PeriphCLKConfig+0xa2>
 800251a:	2301      	movs	r3, #1
 800251c:	e000      	b.n	8002520 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 800251e:	2300      	movs	r3, #0
 8002520:	2b00      	cmp	r3, #0
 8002522:	d00d      	beq.n	8002540 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002524:	4b40      	ldr	r3, [pc, #256]	; (8002628 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002526:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002528:	4a3f      	ldr	r2, [pc, #252]	; (8002628 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800252a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800252e:	6593      	str	r3, [r2, #88]	; 0x58
 8002530:	4b3d      	ldr	r3, [pc, #244]	; (8002628 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002532:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002534:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002538:	60bb      	str	r3, [r7, #8]
 800253a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800253c:	2301      	movs	r3, #1
 800253e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002540:	4b3a      	ldr	r3, [pc, #232]	; (800262c <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	4a39      	ldr	r2, [pc, #228]	; (800262c <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8002546:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800254a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800254c:	f7fe fe76 	bl	800123c <HAL_GetTick>
 8002550:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002552:	e009      	b.n	8002568 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002554:	f7fe fe72 	bl	800123c <HAL_GetTick>
 8002558:	4602      	mov	r2, r0
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	1ad3      	subs	r3, r2, r3
 800255e:	2b02      	cmp	r3, #2
 8002560:	d902      	bls.n	8002568 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8002562:	2303      	movs	r3, #3
 8002564:	74fb      	strb	r3, [r7, #19]
        break;
 8002566:	e005      	b.n	8002574 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002568:	4b30      	ldr	r3, [pc, #192]	; (800262c <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002570:	2b00      	cmp	r3, #0
 8002572:	d0ef      	beq.n	8002554 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8002574:	7cfb      	ldrb	r3, [r7, #19]
 8002576:	2b00      	cmp	r3, #0
 8002578:	d15a      	bne.n	8002630 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800257a:	4b2b      	ldr	r3, [pc, #172]	; (8002628 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800257c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002580:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002584:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002586:	697b      	ldr	r3, [r7, #20]
 8002588:	2b00      	cmp	r3, #0
 800258a:	d01e      	beq.n	80025ca <HAL_RCCEx_PeriphCLKConfig+0x14e>
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002590:	697a      	ldr	r2, [r7, #20]
 8002592:	429a      	cmp	r2, r3
 8002594:	d019      	beq.n	80025ca <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002596:	4b24      	ldr	r3, [pc, #144]	; (8002628 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002598:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800259c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80025a0:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80025a2:	4b21      	ldr	r3, [pc, #132]	; (8002628 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80025a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025a8:	4a1f      	ldr	r2, [pc, #124]	; (8002628 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80025aa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80025ae:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80025b2:	4b1d      	ldr	r3, [pc, #116]	; (8002628 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80025b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025b8:	4a1b      	ldr	r2, [pc, #108]	; (8002628 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80025ba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80025be:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80025c2:	4a19      	ldr	r2, [pc, #100]	; (8002628 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80025c4:	697b      	ldr	r3, [r7, #20]
 80025c6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80025ca:	697b      	ldr	r3, [r7, #20]
 80025cc:	f003 0301 	and.w	r3, r3, #1
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d016      	beq.n	8002602 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025d4:	f7fe fe32 	bl	800123c <HAL_GetTick>
 80025d8:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80025da:	e00b      	b.n	80025f4 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80025dc:	f7fe fe2e 	bl	800123c <HAL_GetTick>
 80025e0:	4602      	mov	r2, r0
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	1ad3      	subs	r3, r2, r3
 80025e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80025ea:	4293      	cmp	r3, r2
 80025ec:	d902      	bls.n	80025f4 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 80025ee:	2303      	movs	r3, #3
 80025f0:	74fb      	strb	r3, [r7, #19]
            break;
 80025f2:	e006      	b.n	8002602 <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80025f4:	4b0c      	ldr	r3, [pc, #48]	; (8002628 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80025f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025fa:	f003 0302 	and.w	r3, r3, #2
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d0ec      	beq.n	80025dc <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8002602:	7cfb      	ldrb	r3, [r7, #19]
 8002604:	2b00      	cmp	r3, #0
 8002606:	d10b      	bne.n	8002620 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002608:	4b07      	ldr	r3, [pc, #28]	; (8002628 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800260a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800260e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002616:	4904      	ldr	r1, [pc, #16]	; (8002628 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002618:	4313      	orrs	r3, r2
 800261a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800261e:	e009      	b.n	8002634 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002620:	7cfb      	ldrb	r3, [r7, #19]
 8002622:	74bb      	strb	r3, [r7, #18]
 8002624:	e006      	b.n	8002634 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8002626:	bf00      	nop
 8002628:	40021000 	.word	0x40021000
 800262c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002630:	7cfb      	ldrb	r3, [r7, #19]
 8002632:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002634:	7c7b      	ldrb	r3, [r7, #17]
 8002636:	2b01      	cmp	r3, #1
 8002638:	d105      	bne.n	8002646 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800263a:	4b8a      	ldr	r3, [pc, #552]	; (8002864 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800263c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800263e:	4a89      	ldr	r2, [pc, #548]	; (8002864 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002640:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002644:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	f003 0301 	and.w	r3, r3, #1
 800264e:	2b00      	cmp	r3, #0
 8002650:	d00a      	beq.n	8002668 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002652:	4b84      	ldr	r3, [pc, #528]	; (8002864 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002654:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002658:	f023 0203 	bic.w	r2, r3, #3
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	6a1b      	ldr	r3, [r3, #32]
 8002660:	4980      	ldr	r1, [pc, #512]	; (8002864 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002662:	4313      	orrs	r3, r2
 8002664:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	f003 0302 	and.w	r3, r3, #2
 8002670:	2b00      	cmp	r3, #0
 8002672:	d00a      	beq.n	800268a <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002674:	4b7b      	ldr	r3, [pc, #492]	; (8002864 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002676:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800267a:	f023 020c 	bic.w	r2, r3, #12
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002682:	4978      	ldr	r1, [pc, #480]	; (8002864 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002684:	4313      	orrs	r3, r2
 8002686:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	f003 0320 	and.w	r3, r3, #32
 8002692:	2b00      	cmp	r3, #0
 8002694:	d00a      	beq.n	80026ac <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002696:	4b73      	ldr	r3, [pc, #460]	; (8002864 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002698:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800269c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026a4:	496f      	ldr	r1, [pc, #444]	; (8002864 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80026a6:	4313      	orrs	r3, r2
 80026a8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d00a      	beq.n	80026ce <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80026b8:	4b6a      	ldr	r3, [pc, #424]	; (8002864 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80026ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026be:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80026c6:	4967      	ldr	r1, [pc, #412]	; (8002864 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80026c8:	4313      	orrs	r3, r2
 80026ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d00a      	beq.n	80026f0 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80026da:	4b62      	ldr	r3, [pc, #392]	; (8002864 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80026dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026e0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026e8:	495e      	ldr	r1, [pc, #376]	; (8002864 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80026ea:	4313      	orrs	r3, r2
 80026ec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d00a      	beq.n	8002712 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80026fc:	4b59      	ldr	r3, [pc, #356]	; (8002864 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80026fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002702:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800270a:	4956      	ldr	r1, [pc, #344]	; (8002864 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800270c:	4313      	orrs	r3, r2
 800270e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800271a:	2b00      	cmp	r3, #0
 800271c:	d00a      	beq.n	8002734 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800271e:	4b51      	ldr	r3, [pc, #324]	; (8002864 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002720:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002724:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800272c:	494d      	ldr	r1, [pc, #308]	; (8002864 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800272e:	4313      	orrs	r3, r2
 8002730:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800273c:	2b00      	cmp	r3, #0
 800273e:	d028      	beq.n	8002792 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002740:	4b48      	ldr	r3, [pc, #288]	; (8002864 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002742:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002746:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800274e:	4945      	ldr	r1, [pc, #276]	; (8002864 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002750:	4313      	orrs	r3, r2
 8002752:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800275a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800275e:	d106      	bne.n	800276e <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002760:	4b40      	ldr	r3, [pc, #256]	; (8002864 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002762:	68db      	ldr	r3, [r3, #12]
 8002764:	4a3f      	ldr	r2, [pc, #252]	; (8002864 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002766:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800276a:	60d3      	str	r3, [r2, #12]
 800276c:	e011      	b.n	8002792 <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002772:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002776:	d10c      	bne.n	8002792 <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	3304      	adds	r3, #4
 800277c:	2101      	movs	r1, #1
 800277e:	4618      	mov	r0, r3
 8002780:	f000 f882 	bl	8002888 <RCCEx_PLLSAI1_Config>
 8002784:	4603      	mov	r3, r0
 8002786:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002788:	7cfb      	ldrb	r3, [r7, #19]
 800278a:	2b00      	cmp	r3, #0
 800278c:	d001      	beq.n	8002792 <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 800278e:	7cfb      	ldrb	r3, [r7, #19]
 8002790:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800279a:	2b00      	cmp	r3, #0
 800279c:	d028      	beq.n	80027f0 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800279e:	4b31      	ldr	r3, [pc, #196]	; (8002864 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80027a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027a4:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027ac:	492d      	ldr	r1, [pc, #180]	; (8002864 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80027ae:	4313      	orrs	r3, r2
 80027b0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027b8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80027bc:	d106      	bne.n	80027cc <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80027be:	4b29      	ldr	r3, [pc, #164]	; (8002864 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80027c0:	68db      	ldr	r3, [r3, #12]
 80027c2:	4a28      	ldr	r2, [pc, #160]	; (8002864 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80027c4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80027c8:	60d3      	str	r3, [r2, #12]
 80027ca:	e011      	b.n	80027f0 <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027d0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80027d4:	d10c      	bne.n	80027f0 <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	3304      	adds	r3, #4
 80027da:	2101      	movs	r1, #1
 80027dc:	4618      	mov	r0, r3
 80027de:	f000 f853 	bl	8002888 <RCCEx_PLLSAI1_Config>
 80027e2:	4603      	mov	r3, r0
 80027e4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80027e6:	7cfb      	ldrb	r3, [r7, #19]
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d001      	beq.n	80027f0 <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 80027ec:	7cfb      	ldrb	r3, [r7, #19]
 80027ee:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d01c      	beq.n	8002836 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80027fc:	4b19      	ldr	r3, [pc, #100]	; (8002864 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80027fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002802:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800280a:	4916      	ldr	r1, [pc, #88]	; (8002864 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800280c:	4313      	orrs	r3, r2
 800280e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002816:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800281a:	d10c      	bne.n	8002836 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	3304      	adds	r3, #4
 8002820:	2102      	movs	r1, #2
 8002822:	4618      	mov	r0, r3
 8002824:	f000 f830 	bl	8002888 <RCCEx_PLLSAI1_Config>
 8002828:	4603      	mov	r3, r0
 800282a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800282c:	7cfb      	ldrb	r3, [r7, #19]
 800282e:	2b00      	cmp	r3, #0
 8002830:	d001      	beq.n	8002836 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 8002832:	7cfb      	ldrb	r3, [r7, #19]
 8002834:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800283e:	2b00      	cmp	r3, #0
 8002840:	d00a      	beq.n	8002858 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002842:	4b08      	ldr	r3, [pc, #32]	; (8002864 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002844:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002848:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002850:	4904      	ldr	r1, [pc, #16]	; (8002864 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002852:	4313      	orrs	r3, r2
 8002854:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002858:	7cbb      	ldrb	r3, [r7, #18]
}
 800285a:	4618      	mov	r0, r3
 800285c:	3718      	adds	r7, #24
 800285e:	46bd      	mov	sp, r7
 8002860:	bd80      	pop	{r7, pc}
 8002862:	bf00      	nop
 8002864:	40021000 	.word	0x40021000

08002868 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8002868:	b480      	push	{r7}
 800286a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 800286c:	4b05      	ldr	r3, [pc, #20]	; (8002884 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	4a04      	ldr	r2, [pc, #16]	; (8002884 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8002872:	f043 0304 	orr.w	r3, r3, #4
 8002876:	6013      	str	r3, [r2, #0]
}
 8002878:	bf00      	nop
 800287a:	46bd      	mov	sp, r7
 800287c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002880:	4770      	bx	lr
 8002882:	bf00      	nop
 8002884:	40021000 	.word	0x40021000

08002888 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002888:	b580      	push	{r7, lr}
 800288a:	b084      	sub	sp, #16
 800288c:	af00      	add	r7, sp, #0
 800288e:	6078      	str	r0, [r7, #4]
 8002890:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002892:	2300      	movs	r3, #0
 8002894:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002896:	4b74      	ldr	r3, [pc, #464]	; (8002a68 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002898:	68db      	ldr	r3, [r3, #12]
 800289a:	f003 0303 	and.w	r3, r3, #3
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d018      	beq.n	80028d4 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80028a2:	4b71      	ldr	r3, [pc, #452]	; (8002a68 <RCCEx_PLLSAI1_Config+0x1e0>)
 80028a4:	68db      	ldr	r3, [r3, #12]
 80028a6:	f003 0203 	and.w	r2, r3, #3
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	429a      	cmp	r2, r3
 80028b0:	d10d      	bne.n	80028ce <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
       ||
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d009      	beq.n	80028ce <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80028ba:	4b6b      	ldr	r3, [pc, #428]	; (8002a68 <RCCEx_PLLSAI1_Config+0x1e0>)
 80028bc:	68db      	ldr	r3, [r3, #12]
 80028be:	091b      	lsrs	r3, r3, #4
 80028c0:	f003 0307 	and.w	r3, r3, #7
 80028c4:	1c5a      	adds	r2, r3, #1
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	685b      	ldr	r3, [r3, #4]
       ||
 80028ca:	429a      	cmp	r2, r3
 80028cc:	d047      	beq.n	800295e <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80028ce:	2301      	movs	r3, #1
 80028d0:	73fb      	strb	r3, [r7, #15]
 80028d2:	e044      	b.n	800295e <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	2b03      	cmp	r3, #3
 80028da:	d018      	beq.n	800290e <RCCEx_PLLSAI1_Config+0x86>
 80028dc:	2b03      	cmp	r3, #3
 80028de:	d825      	bhi.n	800292c <RCCEx_PLLSAI1_Config+0xa4>
 80028e0:	2b01      	cmp	r3, #1
 80028e2:	d002      	beq.n	80028ea <RCCEx_PLLSAI1_Config+0x62>
 80028e4:	2b02      	cmp	r3, #2
 80028e6:	d009      	beq.n	80028fc <RCCEx_PLLSAI1_Config+0x74>
 80028e8:	e020      	b.n	800292c <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80028ea:	4b5f      	ldr	r3, [pc, #380]	; (8002a68 <RCCEx_PLLSAI1_Config+0x1e0>)
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	f003 0302 	and.w	r3, r3, #2
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d11d      	bne.n	8002932 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80028f6:	2301      	movs	r3, #1
 80028f8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80028fa:	e01a      	b.n	8002932 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80028fc:	4b5a      	ldr	r3, [pc, #360]	; (8002a68 <RCCEx_PLLSAI1_Config+0x1e0>)
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002904:	2b00      	cmp	r3, #0
 8002906:	d116      	bne.n	8002936 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002908:	2301      	movs	r3, #1
 800290a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800290c:	e013      	b.n	8002936 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800290e:	4b56      	ldr	r3, [pc, #344]	; (8002a68 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002916:	2b00      	cmp	r3, #0
 8002918:	d10f      	bne.n	800293a <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800291a:	4b53      	ldr	r3, [pc, #332]	; (8002a68 <RCCEx_PLLSAI1_Config+0x1e0>)
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002922:	2b00      	cmp	r3, #0
 8002924:	d109      	bne.n	800293a <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8002926:	2301      	movs	r3, #1
 8002928:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800292a:	e006      	b.n	800293a <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 800292c:	2301      	movs	r3, #1
 800292e:	73fb      	strb	r3, [r7, #15]
      break;
 8002930:	e004      	b.n	800293c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002932:	bf00      	nop
 8002934:	e002      	b.n	800293c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002936:	bf00      	nop
 8002938:	e000      	b.n	800293c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800293a:	bf00      	nop
    }

    if(status == HAL_OK)
 800293c:	7bfb      	ldrb	r3, [r7, #15]
 800293e:	2b00      	cmp	r3, #0
 8002940:	d10d      	bne.n	800295e <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002942:	4b49      	ldr	r3, [pc, #292]	; (8002a68 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002944:	68db      	ldr	r3, [r3, #12]
 8002946:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	6819      	ldr	r1, [r3, #0]
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	685b      	ldr	r3, [r3, #4]
 8002952:	3b01      	subs	r3, #1
 8002954:	011b      	lsls	r3, r3, #4
 8002956:	430b      	orrs	r3, r1
 8002958:	4943      	ldr	r1, [pc, #268]	; (8002a68 <RCCEx_PLLSAI1_Config+0x1e0>)
 800295a:	4313      	orrs	r3, r2
 800295c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800295e:	7bfb      	ldrb	r3, [r7, #15]
 8002960:	2b00      	cmp	r3, #0
 8002962:	d17c      	bne.n	8002a5e <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002964:	4b40      	ldr	r3, [pc, #256]	; (8002a68 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	4a3f      	ldr	r2, [pc, #252]	; (8002a68 <RCCEx_PLLSAI1_Config+0x1e0>)
 800296a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800296e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002970:	f7fe fc64 	bl	800123c <HAL_GetTick>
 8002974:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002976:	e009      	b.n	800298c <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002978:	f7fe fc60 	bl	800123c <HAL_GetTick>
 800297c:	4602      	mov	r2, r0
 800297e:	68bb      	ldr	r3, [r7, #8]
 8002980:	1ad3      	subs	r3, r2, r3
 8002982:	2b02      	cmp	r3, #2
 8002984:	d902      	bls.n	800298c <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002986:	2303      	movs	r3, #3
 8002988:	73fb      	strb	r3, [r7, #15]
        break;
 800298a:	e005      	b.n	8002998 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800298c:	4b36      	ldr	r3, [pc, #216]	; (8002a68 <RCCEx_PLLSAI1_Config+0x1e0>)
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002994:	2b00      	cmp	r3, #0
 8002996:	d1ef      	bne.n	8002978 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002998:	7bfb      	ldrb	r3, [r7, #15]
 800299a:	2b00      	cmp	r3, #0
 800299c:	d15f      	bne.n	8002a5e <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800299e:	683b      	ldr	r3, [r7, #0]
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d110      	bne.n	80029c6 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80029a4:	4b30      	ldr	r3, [pc, #192]	; (8002a68 <RCCEx_PLLSAI1_Config+0x1e0>)
 80029a6:	691b      	ldr	r3, [r3, #16]
 80029a8:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 80029ac:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80029b0:	687a      	ldr	r2, [r7, #4]
 80029b2:	6892      	ldr	r2, [r2, #8]
 80029b4:	0211      	lsls	r1, r2, #8
 80029b6:	687a      	ldr	r2, [r7, #4]
 80029b8:	68d2      	ldr	r2, [r2, #12]
 80029ba:	06d2      	lsls	r2, r2, #27
 80029bc:	430a      	orrs	r2, r1
 80029be:	492a      	ldr	r1, [pc, #168]	; (8002a68 <RCCEx_PLLSAI1_Config+0x1e0>)
 80029c0:	4313      	orrs	r3, r2
 80029c2:	610b      	str	r3, [r1, #16]
 80029c4:	e027      	b.n	8002a16 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80029c6:	683b      	ldr	r3, [r7, #0]
 80029c8:	2b01      	cmp	r3, #1
 80029ca:	d112      	bne.n	80029f2 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80029cc:	4b26      	ldr	r3, [pc, #152]	; (8002a68 <RCCEx_PLLSAI1_Config+0x1e0>)
 80029ce:	691b      	ldr	r3, [r3, #16]
 80029d0:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80029d4:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80029d8:	687a      	ldr	r2, [r7, #4]
 80029da:	6892      	ldr	r2, [r2, #8]
 80029dc:	0211      	lsls	r1, r2, #8
 80029de:	687a      	ldr	r2, [r7, #4]
 80029e0:	6912      	ldr	r2, [r2, #16]
 80029e2:	0852      	lsrs	r2, r2, #1
 80029e4:	3a01      	subs	r2, #1
 80029e6:	0552      	lsls	r2, r2, #21
 80029e8:	430a      	orrs	r2, r1
 80029ea:	491f      	ldr	r1, [pc, #124]	; (8002a68 <RCCEx_PLLSAI1_Config+0x1e0>)
 80029ec:	4313      	orrs	r3, r2
 80029ee:	610b      	str	r3, [r1, #16]
 80029f0:	e011      	b.n	8002a16 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80029f2:	4b1d      	ldr	r3, [pc, #116]	; (8002a68 <RCCEx_PLLSAI1_Config+0x1e0>)
 80029f4:	691b      	ldr	r3, [r3, #16]
 80029f6:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80029fa:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80029fe:	687a      	ldr	r2, [r7, #4]
 8002a00:	6892      	ldr	r2, [r2, #8]
 8002a02:	0211      	lsls	r1, r2, #8
 8002a04:	687a      	ldr	r2, [r7, #4]
 8002a06:	6952      	ldr	r2, [r2, #20]
 8002a08:	0852      	lsrs	r2, r2, #1
 8002a0a:	3a01      	subs	r2, #1
 8002a0c:	0652      	lsls	r2, r2, #25
 8002a0e:	430a      	orrs	r2, r1
 8002a10:	4915      	ldr	r1, [pc, #84]	; (8002a68 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002a12:	4313      	orrs	r3, r2
 8002a14:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002a16:	4b14      	ldr	r3, [pc, #80]	; (8002a68 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	4a13      	ldr	r2, [pc, #76]	; (8002a68 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002a1c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002a20:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a22:	f7fe fc0b 	bl	800123c <HAL_GetTick>
 8002a26:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002a28:	e009      	b.n	8002a3e <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002a2a:	f7fe fc07 	bl	800123c <HAL_GetTick>
 8002a2e:	4602      	mov	r2, r0
 8002a30:	68bb      	ldr	r3, [r7, #8]
 8002a32:	1ad3      	subs	r3, r2, r3
 8002a34:	2b02      	cmp	r3, #2
 8002a36:	d902      	bls.n	8002a3e <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8002a38:	2303      	movs	r3, #3
 8002a3a:	73fb      	strb	r3, [r7, #15]
          break;
 8002a3c:	e005      	b.n	8002a4a <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002a3e:	4b0a      	ldr	r3, [pc, #40]	; (8002a68 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d0ef      	beq.n	8002a2a <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8002a4a:	7bfb      	ldrb	r3, [r7, #15]
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d106      	bne.n	8002a5e <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002a50:	4b05      	ldr	r3, [pc, #20]	; (8002a68 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002a52:	691a      	ldr	r2, [r3, #16]
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	699b      	ldr	r3, [r3, #24]
 8002a58:	4903      	ldr	r1, [pc, #12]	; (8002a68 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002a5a:	4313      	orrs	r3, r2
 8002a5c:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002a5e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a60:	4618      	mov	r0, r3
 8002a62:	3710      	adds	r7, #16
 8002a64:	46bd      	mov	sp, r7
 8002a66:	bd80      	pop	{r7, pc}
 8002a68:	40021000 	.word	0x40021000

08002a6c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002a6c:	b580      	push	{r7, lr}
 8002a6e:	b084      	sub	sp, #16
 8002a70:	af00      	add	r7, sp, #0
 8002a72:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d101      	bne.n	8002a7e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002a7a:	2301      	movs	r3, #1
 8002a7c:	e095      	b.n	8002baa <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d108      	bne.n	8002a98 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	685b      	ldr	r3, [r3, #4]
 8002a8a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002a8e:	d009      	beq.n	8002aa4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	2200      	movs	r2, #0
 8002a94:	61da      	str	r2, [r3, #28]
 8002a96:	e005      	b.n	8002aa4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	2200      	movs	r2, #0
 8002a9c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	2200      	movs	r2, #0
 8002aa2:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	2200      	movs	r2, #0
 8002aa8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002ab0:	b2db      	uxtb	r3, r3
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d106      	bne.n	8002ac4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	2200      	movs	r2, #0
 8002aba:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002abe:	6878      	ldr	r0, [r7, #4]
 8002ac0:	f7fe fa40 	bl	8000f44 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	2202      	movs	r2, #2
 8002ac8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	681a      	ldr	r2, [r3, #0]
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002ada:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	68db      	ldr	r3, [r3, #12]
 8002ae0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002ae4:	d902      	bls.n	8002aec <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8002ae6:	2300      	movs	r3, #0
 8002ae8:	60fb      	str	r3, [r7, #12]
 8002aea:	e002      	b.n	8002af2 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8002aec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002af0:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	68db      	ldr	r3, [r3, #12]
 8002af6:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8002afa:	d007      	beq.n	8002b0c <HAL_SPI_Init+0xa0>
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	68db      	ldr	r3, [r3, #12]
 8002b00:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002b04:	d002      	beq.n	8002b0c <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	2200      	movs	r2, #0
 8002b0a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	685b      	ldr	r3, [r3, #4]
 8002b10:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	689b      	ldr	r3, [r3, #8]
 8002b18:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002b1c:	431a      	orrs	r2, r3
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	691b      	ldr	r3, [r3, #16]
 8002b22:	f003 0302 	and.w	r3, r3, #2
 8002b26:	431a      	orrs	r2, r3
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	695b      	ldr	r3, [r3, #20]
 8002b2c:	f003 0301 	and.w	r3, r3, #1
 8002b30:	431a      	orrs	r2, r3
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	699b      	ldr	r3, [r3, #24]
 8002b36:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002b3a:	431a      	orrs	r2, r3
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	69db      	ldr	r3, [r3, #28]
 8002b40:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002b44:	431a      	orrs	r2, r3
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	6a1b      	ldr	r3, [r3, #32]
 8002b4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b4e:	ea42 0103 	orr.w	r1, r2, r3
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b56:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	430a      	orrs	r2, r1
 8002b60:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	699b      	ldr	r3, [r3, #24]
 8002b66:	0c1b      	lsrs	r3, r3, #16
 8002b68:	f003 0204 	and.w	r2, r3, #4
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b70:	f003 0310 	and.w	r3, r3, #16
 8002b74:	431a      	orrs	r2, r3
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b7a:	f003 0308 	and.w	r3, r3, #8
 8002b7e:	431a      	orrs	r2, r3
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	68db      	ldr	r3, [r3, #12]
 8002b84:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8002b88:	ea42 0103 	orr.w	r1, r2, r3
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	430a      	orrs	r2, r1
 8002b98:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	2200      	movs	r2, #0
 8002b9e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	2201      	movs	r2, #1
 8002ba4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8002ba8:	2300      	movs	r3, #0
}
 8002baa:	4618      	mov	r0, r3
 8002bac:	3710      	adds	r7, #16
 8002bae:	46bd      	mov	sp, r7
 8002bb0:	bd80      	pop	{r7, pc}

08002bb2 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002bb2:	b580      	push	{r7, lr}
 8002bb4:	b088      	sub	sp, #32
 8002bb6:	af00      	add	r7, sp, #0
 8002bb8:	60f8      	str	r0, [r7, #12]
 8002bba:	60b9      	str	r1, [r7, #8]
 8002bbc:	603b      	str	r3, [r7, #0]
 8002bbe:	4613      	mov	r3, r2
 8002bc0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002bc2:	2300      	movs	r3, #0
 8002bc4:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8002bcc:	2b01      	cmp	r3, #1
 8002bce:	d101      	bne.n	8002bd4 <HAL_SPI_Transmit+0x22>
 8002bd0:	2302      	movs	r3, #2
 8002bd2:	e158      	b.n	8002e86 <HAL_SPI_Transmit+0x2d4>
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	2201      	movs	r2, #1
 8002bd8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002bdc:	f7fe fb2e 	bl	800123c <HAL_GetTick>
 8002be0:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8002be2:	88fb      	ldrh	r3, [r7, #6]
 8002be4:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002bec:	b2db      	uxtb	r3, r3
 8002bee:	2b01      	cmp	r3, #1
 8002bf0:	d002      	beq.n	8002bf8 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8002bf2:	2302      	movs	r3, #2
 8002bf4:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002bf6:	e13d      	b.n	8002e74 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 8002bf8:	68bb      	ldr	r3, [r7, #8]
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d002      	beq.n	8002c04 <HAL_SPI_Transmit+0x52>
 8002bfe:	88fb      	ldrh	r3, [r7, #6]
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d102      	bne.n	8002c0a <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8002c04:	2301      	movs	r3, #1
 8002c06:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002c08:	e134      	b.n	8002e74 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	2203      	movs	r2, #3
 8002c0e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	2200      	movs	r2, #0
 8002c16:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	68ba      	ldr	r2, [r7, #8]
 8002c1c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	88fa      	ldrh	r2, [r7, #6]
 8002c22:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	88fa      	ldrh	r2, [r7, #6]
 8002c28:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	2200      	movs	r2, #0
 8002c2e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	2200      	movs	r2, #0
 8002c34:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	2200      	movs	r2, #0
 8002c3c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	2200      	movs	r2, #0
 8002c44:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	2200      	movs	r2, #0
 8002c4a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	689b      	ldr	r3, [r3, #8]
 8002c50:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002c54:	d10f      	bne.n	8002c76 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	681a      	ldr	r2, [r3, #0]
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002c64:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	681a      	ldr	r2, [r3, #0]
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002c74:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c80:	2b40      	cmp	r3, #64	; 0x40
 8002c82:	d007      	beq.n	8002c94 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	681a      	ldr	r2, [r3, #0]
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002c92:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	68db      	ldr	r3, [r3, #12]
 8002c98:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002c9c:	d94b      	bls.n	8002d36 <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	685b      	ldr	r3, [r3, #4]
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d002      	beq.n	8002cac <HAL_SPI_Transmit+0xfa>
 8002ca6:	8afb      	ldrh	r3, [r7, #22]
 8002ca8:	2b01      	cmp	r3, #1
 8002caa:	d13e      	bne.n	8002d2a <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cb0:	881a      	ldrh	r2, [r3, #0]
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cbc:	1c9a      	adds	r2, r3, #2
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002cc6:	b29b      	uxth	r3, r3
 8002cc8:	3b01      	subs	r3, #1
 8002cca:	b29a      	uxth	r2, r3
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002cd0:	e02b      	b.n	8002d2a <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	689b      	ldr	r3, [r3, #8]
 8002cd8:	f003 0302 	and.w	r3, r3, #2
 8002cdc:	2b02      	cmp	r3, #2
 8002cde:	d112      	bne.n	8002d06 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ce4:	881a      	ldrh	r2, [r3, #0]
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cf0:	1c9a      	adds	r2, r3, #2
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002cfa:	b29b      	uxth	r3, r3
 8002cfc:	3b01      	subs	r3, #1
 8002cfe:	b29a      	uxth	r2, r3
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002d04:	e011      	b.n	8002d2a <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002d06:	f7fe fa99 	bl	800123c <HAL_GetTick>
 8002d0a:	4602      	mov	r2, r0
 8002d0c:	69bb      	ldr	r3, [r7, #24]
 8002d0e:	1ad3      	subs	r3, r2, r3
 8002d10:	683a      	ldr	r2, [r7, #0]
 8002d12:	429a      	cmp	r2, r3
 8002d14:	d803      	bhi.n	8002d1e <HAL_SPI_Transmit+0x16c>
 8002d16:	683b      	ldr	r3, [r7, #0]
 8002d18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d1c:	d102      	bne.n	8002d24 <HAL_SPI_Transmit+0x172>
 8002d1e:	683b      	ldr	r3, [r7, #0]
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d102      	bne.n	8002d2a <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8002d24:	2303      	movs	r3, #3
 8002d26:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002d28:	e0a4      	b.n	8002e74 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002d2e:	b29b      	uxth	r3, r3
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d1ce      	bne.n	8002cd2 <HAL_SPI_Transmit+0x120>
 8002d34:	e07c      	b.n	8002e30 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	685b      	ldr	r3, [r3, #4]
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d002      	beq.n	8002d44 <HAL_SPI_Transmit+0x192>
 8002d3e:	8afb      	ldrh	r3, [r7, #22]
 8002d40:	2b01      	cmp	r3, #1
 8002d42:	d170      	bne.n	8002e26 <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002d48:	b29b      	uxth	r3, r3
 8002d4a:	2b01      	cmp	r3, #1
 8002d4c:	d912      	bls.n	8002d74 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d52:	881a      	ldrh	r2, [r3, #0]
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d5e:	1c9a      	adds	r2, r3, #2
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002d68:	b29b      	uxth	r3, r3
 8002d6a:	3b02      	subs	r3, #2
 8002d6c:	b29a      	uxth	r2, r3
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002d72:	e058      	b.n	8002e26 <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	330c      	adds	r3, #12
 8002d7e:	7812      	ldrb	r2, [r2, #0]
 8002d80:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d86:	1c5a      	adds	r2, r3, #1
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002d90:	b29b      	uxth	r3, r3
 8002d92:	3b01      	subs	r3, #1
 8002d94:	b29a      	uxth	r2, r3
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8002d9a:	e044      	b.n	8002e26 <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	689b      	ldr	r3, [r3, #8]
 8002da2:	f003 0302 	and.w	r3, r3, #2
 8002da6:	2b02      	cmp	r3, #2
 8002da8:	d12b      	bne.n	8002e02 <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002dae:	b29b      	uxth	r3, r3
 8002db0:	2b01      	cmp	r3, #1
 8002db2:	d912      	bls.n	8002dda <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002db8:	881a      	ldrh	r2, [r3, #0]
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002dc4:	1c9a      	adds	r2, r3, #2
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002dce:	b29b      	uxth	r3, r3
 8002dd0:	3b02      	subs	r3, #2
 8002dd2:	b29a      	uxth	r2, r3
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002dd8:	e025      	b.n	8002e26 <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	330c      	adds	r3, #12
 8002de4:	7812      	ldrb	r2, [r2, #0]
 8002de6:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002dec:	1c5a      	adds	r2, r3, #1
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002df6:	b29b      	uxth	r3, r3
 8002df8:	3b01      	subs	r3, #1
 8002dfa:	b29a      	uxth	r2, r3
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002e00:	e011      	b.n	8002e26 <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002e02:	f7fe fa1b 	bl	800123c <HAL_GetTick>
 8002e06:	4602      	mov	r2, r0
 8002e08:	69bb      	ldr	r3, [r7, #24]
 8002e0a:	1ad3      	subs	r3, r2, r3
 8002e0c:	683a      	ldr	r2, [r7, #0]
 8002e0e:	429a      	cmp	r2, r3
 8002e10:	d803      	bhi.n	8002e1a <HAL_SPI_Transmit+0x268>
 8002e12:	683b      	ldr	r3, [r7, #0]
 8002e14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e18:	d102      	bne.n	8002e20 <HAL_SPI_Transmit+0x26e>
 8002e1a:	683b      	ldr	r3, [r7, #0]
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d102      	bne.n	8002e26 <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8002e20:	2303      	movs	r3, #3
 8002e22:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002e24:	e026      	b.n	8002e74 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002e2a:	b29b      	uxth	r3, r3
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d1b5      	bne.n	8002d9c <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002e30:	69ba      	ldr	r2, [r7, #24]
 8002e32:	6839      	ldr	r1, [r7, #0]
 8002e34:	68f8      	ldr	r0, [r7, #12]
 8002e36:	f000 f949 	bl	80030cc <SPI_EndRxTxTransaction>
 8002e3a:	4603      	mov	r3, r0
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d002      	beq.n	8002e46 <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	2220      	movs	r2, #32
 8002e44:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	689b      	ldr	r3, [r3, #8]
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d10a      	bne.n	8002e64 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002e4e:	2300      	movs	r3, #0
 8002e50:	613b      	str	r3, [r7, #16]
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	68db      	ldr	r3, [r3, #12]
 8002e58:	613b      	str	r3, [r7, #16]
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	689b      	ldr	r3, [r3, #8]
 8002e60:	613b      	str	r3, [r7, #16]
 8002e62:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d002      	beq.n	8002e72 <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8002e6c:	2301      	movs	r3, #1
 8002e6e:	77fb      	strb	r3, [r7, #31]
 8002e70:	e000      	b.n	8002e74 <HAL_SPI_Transmit+0x2c2>
  }

error:
 8002e72:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	2201      	movs	r2, #1
 8002e78:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	2200      	movs	r2, #0
 8002e80:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8002e84:	7ffb      	ldrb	r3, [r7, #31]
}
 8002e86:	4618      	mov	r0, r3
 8002e88:	3720      	adds	r7, #32
 8002e8a:	46bd      	mov	sp, r7
 8002e8c:	bd80      	pop	{r7, pc}
	...

08002e90 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002e90:	b580      	push	{r7, lr}
 8002e92:	b088      	sub	sp, #32
 8002e94:	af00      	add	r7, sp, #0
 8002e96:	60f8      	str	r0, [r7, #12]
 8002e98:	60b9      	str	r1, [r7, #8]
 8002e9a:	603b      	str	r3, [r7, #0]
 8002e9c:	4613      	mov	r3, r2
 8002e9e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002ea0:	f7fe f9cc 	bl	800123c <HAL_GetTick>
 8002ea4:	4602      	mov	r2, r0
 8002ea6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ea8:	1a9b      	subs	r3, r3, r2
 8002eaa:	683a      	ldr	r2, [r7, #0]
 8002eac:	4413      	add	r3, r2
 8002eae:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002eb0:	f7fe f9c4 	bl	800123c <HAL_GetTick>
 8002eb4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002eb6:	4b39      	ldr	r3, [pc, #228]	; (8002f9c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	015b      	lsls	r3, r3, #5
 8002ebc:	0d1b      	lsrs	r3, r3, #20
 8002ebe:	69fa      	ldr	r2, [r7, #28]
 8002ec0:	fb02 f303 	mul.w	r3, r2, r3
 8002ec4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002ec6:	e054      	b.n	8002f72 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002ec8:	683b      	ldr	r3, [r7, #0]
 8002eca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ece:	d050      	beq.n	8002f72 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002ed0:	f7fe f9b4 	bl	800123c <HAL_GetTick>
 8002ed4:	4602      	mov	r2, r0
 8002ed6:	69bb      	ldr	r3, [r7, #24]
 8002ed8:	1ad3      	subs	r3, r2, r3
 8002eda:	69fa      	ldr	r2, [r7, #28]
 8002edc:	429a      	cmp	r2, r3
 8002ede:	d902      	bls.n	8002ee6 <SPI_WaitFlagStateUntilTimeout+0x56>
 8002ee0:	69fb      	ldr	r3, [r7, #28]
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d13d      	bne.n	8002f62 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	685a      	ldr	r2, [r3, #4]
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002ef4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	685b      	ldr	r3, [r3, #4]
 8002efa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002efe:	d111      	bne.n	8002f24 <SPI_WaitFlagStateUntilTimeout+0x94>
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	689b      	ldr	r3, [r3, #8]
 8002f04:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002f08:	d004      	beq.n	8002f14 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	689b      	ldr	r3, [r3, #8]
 8002f0e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002f12:	d107      	bne.n	8002f24 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	681a      	ldr	r2, [r3, #0]
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002f22:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f28:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002f2c:	d10f      	bne.n	8002f4e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	681a      	ldr	r2, [r3, #0]
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002f3c:	601a      	str	r2, [r3, #0]
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	681a      	ldr	r2, [r3, #0]
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002f4c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	2201      	movs	r2, #1
 8002f52:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	2200      	movs	r2, #0
 8002f5a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8002f5e:	2303      	movs	r3, #3
 8002f60:	e017      	b.n	8002f92 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8002f62:	697b      	ldr	r3, [r7, #20]
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d101      	bne.n	8002f6c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8002f68:	2300      	movs	r3, #0
 8002f6a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002f6c:	697b      	ldr	r3, [r7, #20]
 8002f6e:	3b01      	subs	r3, #1
 8002f70:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	689a      	ldr	r2, [r3, #8]
 8002f78:	68bb      	ldr	r3, [r7, #8]
 8002f7a:	4013      	ands	r3, r2
 8002f7c:	68ba      	ldr	r2, [r7, #8]
 8002f7e:	429a      	cmp	r2, r3
 8002f80:	bf0c      	ite	eq
 8002f82:	2301      	moveq	r3, #1
 8002f84:	2300      	movne	r3, #0
 8002f86:	b2db      	uxtb	r3, r3
 8002f88:	461a      	mov	r2, r3
 8002f8a:	79fb      	ldrb	r3, [r7, #7]
 8002f8c:	429a      	cmp	r2, r3
 8002f8e:	d19b      	bne.n	8002ec8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002f90:	2300      	movs	r3, #0
}
 8002f92:	4618      	mov	r0, r3
 8002f94:	3720      	adds	r7, #32
 8002f96:	46bd      	mov	sp, r7
 8002f98:	bd80      	pop	{r7, pc}
 8002f9a:	bf00      	nop
 8002f9c:	20000000 	.word	0x20000000

08002fa0 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002fa0:	b580      	push	{r7, lr}
 8002fa2:	b08a      	sub	sp, #40	; 0x28
 8002fa4:	af00      	add	r7, sp, #0
 8002fa6:	60f8      	str	r0, [r7, #12]
 8002fa8:	60b9      	str	r1, [r7, #8]
 8002faa:	607a      	str	r2, [r7, #4]
 8002fac:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8002fae:	2300      	movs	r3, #0
 8002fb0:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8002fb2:	f7fe f943 	bl	800123c <HAL_GetTick>
 8002fb6:	4602      	mov	r2, r0
 8002fb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fba:	1a9b      	subs	r3, r3, r2
 8002fbc:	683a      	ldr	r2, [r7, #0]
 8002fbe:	4413      	add	r3, r2
 8002fc0:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8002fc2:	f7fe f93b 	bl	800123c <HAL_GetTick>
 8002fc6:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	330c      	adds	r3, #12
 8002fce:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8002fd0:	4b3d      	ldr	r3, [pc, #244]	; (80030c8 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8002fd2:	681a      	ldr	r2, [r3, #0]
 8002fd4:	4613      	mov	r3, r2
 8002fd6:	009b      	lsls	r3, r3, #2
 8002fd8:	4413      	add	r3, r2
 8002fda:	00da      	lsls	r2, r3, #3
 8002fdc:	1ad3      	subs	r3, r2, r3
 8002fde:	0d1b      	lsrs	r3, r3, #20
 8002fe0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002fe2:	fb02 f303 	mul.w	r3, r2, r3
 8002fe6:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8002fe8:	e060      	b.n	80030ac <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8002fea:	68bb      	ldr	r3, [r7, #8]
 8002fec:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8002ff0:	d107      	bne.n	8003002 <SPI_WaitFifoStateUntilTimeout+0x62>
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d104      	bne.n	8003002 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8002ff8:	69fb      	ldr	r3, [r7, #28]
 8002ffa:	781b      	ldrb	r3, [r3, #0]
 8002ffc:	b2db      	uxtb	r3, r3
 8002ffe:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8003000:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8003002:	683b      	ldr	r3, [r7, #0]
 8003004:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003008:	d050      	beq.n	80030ac <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800300a:	f7fe f917 	bl	800123c <HAL_GetTick>
 800300e:	4602      	mov	r2, r0
 8003010:	6a3b      	ldr	r3, [r7, #32]
 8003012:	1ad3      	subs	r3, r2, r3
 8003014:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003016:	429a      	cmp	r2, r3
 8003018:	d902      	bls.n	8003020 <SPI_WaitFifoStateUntilTimeout+0x80>
 800301a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800301c:	2b00      	cmp	r3, #0
 800301e:	d13d      	bne.n	800309c <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	685a      	ldr	r2, [r3, #4]
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800302e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	685b      	ldr	r3, [r3, #4]
 8003034:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003038:	d111      	bne.n	800305e <SPI_WaitFifoStateUntilTimeout+0xbe>
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	689b      	ldr	r3, [r3, #8]
 800303e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003042:	d004      	beq.n	800304e <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	689b      	ldr	r3, [r3, #8]
 8003048:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800304c:	d107      	bne.n	800305e <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	681a      	ldr	r2, [r3, #0]
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800305c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003062:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003066:	d10f      	bne.n	8003088 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	681a      	ldr	r2, [r3, #0]
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003076:	601a      	str	r2, [r3, #0]
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	681a      	ldr	r2, [r3, #0]
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003086:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	2201      	movs	r2, #1
 800308c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	2200      	movs	r2, #0
 8003094:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8003098:	2303      	movs	r3, #3
 800309a:	e010      	b.n	80030be <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800309c:	69bb      	ldr	r3, [r7, #24]
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d101      	bne.n	80030a6 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 80030a2:	2300      	movs	r3, #0
 80030a4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 80030a6:	69bb      	ldr	r3, [r7, #24]
 80030a8:	3b01      	subs	r3, #1
 80030aa:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	689a      	ldr	r2, [r3, #8]
 80030b2:	68bb      	ldr	r3, [r7, #8]
 80030b4:	4013      	ands	r3, r2
 80030b6:	687a      	ldr	r2, [r7, #4]
 80030b8:	429a      	cmp	r2, r3
 80030ba:	d196      	bne.n	8002fea <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 80030bc:	2300      	movs	r3, #0
}
 80030be:	4618      	mov	r0, r3
 80030c0:	3728      	adds	r7, #40	; 0x28
 80030c2:	46bd      	mov	sp, r7
 80030c4:	bd80      	pop	{r7, pc}
 80030c6:	bf00      	nop
 80030c8:	20000000 	.word	0x20000000

080030cc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80030cc:	b580      	push	{r7, lr}
 80030ce:	b086      	sub	sp, #24
 80030d0:	af02      	add	r7, sp, #8
 80030d2:	60f8      	str	r0, [r7, #12]
 80030d4:	60b9      	str	r1, [r7, #8]
 80030d6:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	9300      	str	r3, [sp, #0]
 80030dc:	68bb      	ldr	r3, [r7, #8]
 80030de:	2200      	movs	r2, #0
 80030e0:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 80030e4:	68f8      	ldr	r0, [r7, #12]
 80030e6:	f7ff ff5b 	bl	8002fa0 <SPI_WaitFifoStateUntilTimeout>
 80030ea:	4603      	mov	r3, r0
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d007      	beq.n	8003100 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80030f4:	f043 0220 	orr.w	r2, r3, #32
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80030fc:	2303      	movs	r3, #3
 80030fe:	e027      	b.n	8003150 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	9300      	str	r3, [sp, #0]
 8003104:	68bb      	ldr	r3, [r7, #8]
 8003106:	2200      	movs	r2, #0
 8003108:	2180      	movs	r1, #128	; 0x80
 800310a:	68f8      	ldr	r0, [r7, #12]
 800310c:	f7ff fec0 	bl	8002e90 <SPI_WaitFlagStateUntilTimeout>
 8003110:	4603      	mov	r3, r0
 8003112:	2b00      	cmp	r3, #0
 8003114:	d007      	beq.n	8003126 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800311a:	f043 0220 	orr.w	r2, r3, #32
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003122:	2303      	movs	r3, #3
 8003124:	e014      	b.n	8003150 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	9300      	str	r3, [sp, #0]
 800312a:	68bb      	ldr	r3, [r7, #8]
 800312c:	2200      	movs	r2, #0
 800312e:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8003132:	68f8      	ldr	r0, [r7, #12]
 8003134:	f7ff ff34 	bl	8002fa0 <SPI_WaitFifoStateUntilTimeout>
 8003138:	4603      	mov	r3, r0
 800313a:	2b00      	cmp	r3, #0
 800313c:	d007      	beq.n	800314e <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003142:	f043 0220 	orr.w	r2, r3, #32
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800314a:	2303      	movs	r3, #3
 800314c:	e000      	b.n	8003150 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800314e:	2300      	movs	r3, #0
}
 8003150:	4618      	mov	r0, r3
 8003152:	3710      	adds	r7, #16
 8003154:	46bd      	mov	sp, r7
 8003156:	bd80      	pop	{r7, pc}

08003158 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003158:	b580      	push	{r7, lr}
 800315a:	b082      	sub	sp, #8
 800315c:	af00      	add	r7, sp, #0
 800315e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	2b00      	cmp	r3, #0
 8003164:	d101      	bne.n	800316a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003166:	2301      	movs	r3, #1
 8003168:	e040      	b.n	80031ec <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800316e:	2b00      	cmp	r3, #0
 8003170:	d106      	bne.n	8003180 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	2200      	movs	r2, #0
 8003176:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800317a:	6878      	ldr	r0, [r7, #4]
 800317c:	f7fd ff26 	bl	8000fcc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	2224      	movs	r2, #36	; 0x24
 8003184:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	681a      	ldr	r2, [r3, #0]
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	f022 0201 	bic.w	r2, r2, #1
 8003194:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003196:	6878      	ldr	r0, [r7, #4]
 8003198:	f000 f82c 	bl	80031f4 <UART_SetConfig>
 800319c:	4603      	mov	r3, r0
 800319e:	2b01      	cmp	r3, #1
 80031a0:	d101      	bne.n	80031a6 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80031a2:	2301      	movs	r3, #1
 80031a4:	e022      	b.n	80031ec <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d002      	beq.n	80031b4 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80031ae:	6878      	ldr	r0, [r7, #4]
 80031b0:	f000 fa4c 	bl	800364c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	685a      	ldr	r2, [r3, #4]
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80031c2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	689a      	ldr	r2, [r3, #8]
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80031d2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	681a      	ldr	r2, [r3, #0]
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	f042 0201 	orr.w	r2, r2, #1
 80031e2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80031e4:	6878      	ldr	r0, [r7, #4]
 80031e6:	f000 fad3 	bl	8003790 <UART_CheckIdleState>
 80031ea:	4603      	mov	r3, r0
}
 80031ec:	4618      	mov	r0, r3
 80031ee:	3708      	adds	r7, #8
 80031f0:	46bd      	mov	sp, r7
 80031f2:	bd80      	pop	{r7, pc}

080031f4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80031f4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80031f8:	b08a      	sub	sp, #40	; 0x28
 80031fa:	af00      	add	r7, sp, #0
 80031fc:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80031fe:	2300      	movs	r3, #0
 8003200:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	689a      	ldr	r2, [r3, #8]
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	691b      	ldr	r3, [r3, #16]
 800320c:	431a      	orrs	r2, r3
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	695b      	ldr	r3, [r3, #20]
 8003212:	431a      	orrs	r2, r3
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	69db      	ldr	r3, [r3, #28]
 8003218:	4313      	orrs	r3, r2
 800321a:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	681a      	ldr	r2, [r3, #0]
 8003222:	4bb4      	ldr	r3, [pc, #720]	; (80034f4 <UART_SetConfig+0x300>)
 8003224:	4013      	ands	r3, r2
 8003226:	68fa      	ldr	r2, [r7, #12]
 8003228:	6812      	ldr	r2, [r2, #0]
 800322a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800322c:	430b      	orrs	r3, r1
 800322e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	685b      	ldr	r3, [r3, #4]
 8003236:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	68da      	ldr	r2, [r3, #12]
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	430a      	orrs	r2, r1
 8003244:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	699b      	ldr	r3, [r3, #24]
 800324a:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	4aa9      	ldr	r2, [pc, #676]	; (80034f8 <UART_SetConfig+0x304>)
 8003252:	4293      	cmp	r3, r2
 8003254:	d004      	beq.n	8003260 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	6a1b      	ldr	r3, [r3, #32]
 800325a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800325c:	4313      	orrs	r3, r2
 800325e:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	689b      	ldr	r3, [r3, #8]
 8003266:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003270:	430a      	orrs	r2, r1
 8003272:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	4aa0      	ldr	r2, [pc, #640]	; (80034fc <UART_SetConfig+0x308>)
 800327a:	4293      	cmp	r3, r2
 800327c:	d126      	bne.n	80032cc <UART_SetConfig+0xd8>
 800327e:	4ba0      	ldr	r3, [pc, #640]	; (8003500 <UART_SetConfig+0x30c>)
 8003280:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003284:	f003 0303 	and.w	r3, r3, #3
 8003288:	2b03      	cmp	r3, #3
 800328a:	d81b      	bhi.n	80032c4 <UART_SetConfig+0xd0>
 800328c:	a201      	add	r2, pc, #4	; (adr r2, 8003294 <UART_SetConfig+0xa0>)
 800328e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003292:	bf00      	nop
 8003294:	080032a5 	.word	0x080032a5
 8003298:	080032b5 	.word	0x080032b5
 800329c:	080032ad 	.word	0x080032ad
 80032a0:	080032bd 	.word	0x080032bd
 80032a4:	2301      	movs	r3, #1
 80032a6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80032aa:	e080      	b.n	80033ae <UART_SetConfig+0x1ba>
 80032ac:	2302      	movs	r3, #2
 80032ae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80032b2:	e07c      	b.n	80033ae <UART_SetConfig+0x1ba>
 80032b4:	2304      	movs	r3, #4
 80032b6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80032ba:	e078      	b.n	80033ae <UART_SetConfig+0x1ba>
 80032bc:	2308      	movs	r3, #8
 80032be:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80032c2:	e074      	b.n	80033ae <UART_SetConfig+0x1ba>
 80032c4:	2310      	movs	r3, #16
 80032c6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80032ca:	e070      	b.n	80033ae <UART_SetConfig+0x1ba>
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	4a8c      	ldr	r2, [pc, #560]	; (8003504 <UART_SetConfig+0x310>)
 80032d2:	4293      	cmp	r3, r2
 80032d4:	d138      	bne.n	8003348 <UART_SetConfig+0x154>
 80032d6:	4b8a      	ldr	r3, [pc, #552]	; (8003500 <UART_SetConfig+0x30c>)
 80032d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032dc:	f003 030c 	and.w	r3, r3, #12
 80032e0:	2b0c      	cmp	r3, #12
 80032e2:	d82d      	bhi.n	8003340 <UART_SetConfig+0x14c>
 80032e4:	a201      	add	r2, pc, #4	; (adr r2, 80032ec <UART_SetConfig+0xf8>)
 80032e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032ea:	bf00      	nop
 80032ec:	08003321 	.word	0x08003321
 80032f0:	08003341 	.word	0x08003341
 80032f4:	08003341 	.word	0x08003341
 80032f8:	08003341 	.word	0x08003341
 80032fc:	08003331 	.word	0x08003331
 8003300:	08003341 	.word	0x08003341
 8003304:	08003341 	.word	0x08003341
 8003308:	08003341 	.word	0x08003341
 800330c:	08003329 	.word	0x08003329
 8003310:	08003341 	.word	0x08003341
 8003314:	08003341 	.word	0x08003341
 8003318:	08003341 	.word	0x08003341
 800331c:	08003339 	.word	0x08003339
 8003320:	2300      	movs	r3, #0
 8003322:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003326:	e042      	b.n	80033ae <UART_SetConfig+0x1ba>
 8003328:	2302      	movs	r3, #2
 800332a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800332e:	e03e      	b.n	80033ae <UART_SetConfig+0x1ba>
 8003330:	2304      	movs	r3, #4
 8003332:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003336:	e03a      	b.n	80033ae <UART_SetConfig+0x1ba>
 8003338:	2308      	movs	r3, #8
 800333a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800333e:	e036      	b.n	80033ae <UART_SetConfig+0x1ba>
 8003340:	2310      	movs	r3, #16
 8003342:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003346:	e032      	b.n	80033ae <UART_SetConfig+0x1ba>
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	4a6a      	ldr	r2, [pc, #424]	; (80034f8 <UART_SetConfig+0x304>)
 800334e:	4293      	cmp	r3, r2
 8003350:	d12a      	bne.n	80033a8 <UART_SetConfig+0x1b4>
 8003352:	4b6b      	ldr	r3, [pc, #428]	; (8003500 <UART_SetConfig+0x30c>)
 8003354:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003358:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800335c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003360:	d01a      	beq.n	8003398 <UART_SetConfig+0x1a4>
 8003362:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003366:	d81b      	bhi.n	80033a0 <UART_SetConfig+0x1ac>
 8003368:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800336c:	d00c      	beq.n	8003388 <UART_SetConfig+0x194>
 800336e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003372:	d815      	bhi.n	80033a0 <UART_SetConfig+0x1ac>
 8003374:	2b00      	cmp	r3, #0
 8003376:	d003      	beq.n	8003380 <UART_SetConfig+0x18c>
 8003378:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800337c:	d008      	beq.n	8003390 <UART_SetConfig+0x19c>
 800337e:	e00f      	b.n	80033a0 <UART_SetConfig+0x1ac>
 8003380:	2300      	movs	r3, #0
 8003382:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003386:	e012      	b.n	80033ae <UART_SetConfig+0x1ba>
 8003388:	2302      	movs	r3, #2
 800338a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800338e:	e00e      	b.n	80033ae <UART_SetConfig+0x1ba>
 8003390:	2304      	movs	r3, #4
 8003392:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003396:	e00a      	b.n	80033ae <UART_SetConfig+0x1ba>
 8003398:	2308      	movs	r3, #8
 800339a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800339e:	e006      	b.n	80033ae <UART_SetConfig+0x1ba>
 80033a0:	2310      	movs	r3, #16
 80033a2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80033a6:	e002      	b.n	80033ae <UART_SetConfig+0x1ba>
 80033a8:	2310      	movs	r3, #16
 80033aa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	4a51      	ldr	r2, [pc, #324]	; (80034f8 <UART_SetConfig+0x304>)
 80033b4:	4293      	cmp	r3, r2
 80033b6:	d17a      	bne.n	80034ae <UART_SetConfig+0x2ba>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80033b8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80033bc:	2b08      	cmp	r3, #8
 80033be:	d824      	bhi.n	800340a <UART_SetConfig+0x216>
 80033c0:	a201      	add	r2, pc, #4	; (adr r2, 80033c8 <UART_SetConfig+0x1d4>)
 80033c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033c6:	bf00      	nop
 80033c8:	080033ed 	.word	0x080033ed
 80033cc:	0800340b 	.word	0x0800340b
 80033d0:	080033f5 	.word	0x080033f5
 80033d4:	0800340b 	.word	0x0800340b
 80033d8:	080033fb 	.word	0x080033fb
 80033dc:	0800340b 	.word	0x0800340b
 80033e0:	0800340b 	.word	0x0800340b
 80033e4:	0800340b 	.word	0x0800340b
 80033e8:	08003403 	.word	0x08003403
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80033ec:	f7fe ffba 	bl	8002364 <HAL_RCC_GetPCLK1Freq>
 80033f0:	61f8      	str	r0, [r7, #28]
        break;
 80033f2:	e010      	b.n	8003416 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80033f4:	4b44      	ldr	r3, [pc, #272]	; (8003508 <UART_SetConfig+0x314>)
 80033f6:	61fb      	str	r3, [r7, #28]
        break;
 80033f8:	e00d      	b.n	8003416 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80033fa:	f7fe ff1b 	bl	8002234 <HAL_RCC_GetSysClockFreq>
 80033fe:	61f8      	str	r0, [r7, #28]
        break;
 8003400:	e009      	b.n	8003416 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003402:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003406:	61fb      	str	r3, [r7, #28]
        break;
 8003408:	e005      	b.n	8003416 <UART_SetConfig+0x222>
      default:
        pclk = 0U;
 800340a:	2300      	movs	r3, #0
 800340c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800340e:	2301      	movs	r3, #1
 8003410:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003414:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003416:	69fb      	ldr	r3, [r7, #28]
 8003418:	2b00      	cmp	r3, #0
 800341a:	f000 8107 	beq.w	800362c <UART_SetConfig+0x438>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	685a      	ldr	r2, [r3, #4]
 8003422:	4613      	mov	r3, r2
 8003424:	005b      	lsls	r3, r3, #1
 8003426:	4413      	add	r3, r2
 8003428:	69fa      	ldr	r2, [r7, #28]
 800342a:	429a      	cmp	r2, r3
 800342c:	d305      	bcc.n	800343a <UART_SetConfig+0x246>
          (pclk > (4096U * huart->Init.BaudRate)))
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	685b      	ldr	r3, [r3, #4]
 8003432:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003434:	69fa      	ldr	r2, [r7, #28]
 8003436:	429a      	cmp	r2, r3
 8003438:	d903      	bls.n	8003442 <UART_SetConfig+0x24e>
      {
        ret = HAL_ERROR;
 800343a:	2301      	movs	r3, #1
 800343c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003440:	e0f4      	b.n	800362c <UART_SetConfig+0x438>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8003442:	69fb      	ldr	r3, [r7, #28]
 8003444:	2200      	movs	r2, #0
 8003446:	461c      	mov	r4, r3
 8003448:	4615      	mov	r5, r2
 800344a:	f04f 0200 	mov.w	r2, #0
 800344e:	f04f 0300 	mov.w	r3, #0
 8003452:	022b      	lsls	r3, r5, #8
 8003454:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8003458:	0222      	lsls	r2, r4, #8
 800345a:	68f9      	ldr	r1, [r7, #12]
 800345c:	6849      	ldr	r1, [r1, #4]
 800345e:	0849      	lsrs	r1, r1, #1
 8003460:	2000      	movs	r0, #0
 8003462:	4688      	mov	r8, r1
 8003464:	4681      	mov	r9, r0
 8003466:	eb12 0a08 	adds.w	sl, r2, r8
 800346a:	eb43 0b09 	adc.w	fp, r3, r9
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	685b      	ldr	r3, [r3, #4]
 8003472:	2200      	movs	r2, #0
 8003474:	603b      	str	r3, [r7, #0]
 8003476:	607a      	str	r2, [r7, #4]
 8003478:	e9d7 2300 	ldrd	r2, r3, [r7]
 800347c:	4650      	mov	r0, sl
 800347e:	4659      	mov	r1, fp
 8003480:	f7fc fea4 	bl	80001cc <__aeabi_uldivmod>
 8003484:	4602      	mov	r2, r0
 8003486:	460b      	mov	r3, r1
 8003488:	4613      	mov	r3, r2
 800348a:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800348c:	69bb      	ldr	r3, [r7, #24]
 800348e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003492:	d308      	bcc.n	80034a6 <UART_SetConfig+0x2b2>
 8003494:	69bb      	ldr	r3, [r7, #24]
 8003496:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800349a:	d204      	bcs.n	80034a6 <UART_SetConfig+0x2b2>
        {
          huart->Instance->BRR = usartdiv;
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	69ba      	ldr	r2, [r7, #24]
 80034a2:	60da      	str	r2, [r3, #12]
 80034a4:	e0c2      	b.n	800362c <UART_SetConfig+0x438>
        }
        else
        {
          ret = HAL_ERROR;
 80034a6:	2301      	movs	r3, #1
 80034a8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80034ac:	e0be      	b.n	800362c <UART_SetConfig+0x438>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	69db      	ldr	r3, [r3, #28]
 80034b2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80034b6:	d16a      	bne.n	800358e <UART_SetConfig+0x39a>
  {
    switch (clocksource)
 80034b8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80034bc:	2b08      	cmp	r3, #8
 80034be:	d834      	bhi.n	800352a <UART_SetConfig+0x336>
 80034c0:	a201      	add	r2, pc, #4	; (adr r2, 80034c8 <UART_SetConfig+0x2d4>)
 80034c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034c6:	bf00      	nop
 80034c8:	080034ed 	.word	0x080034ed
 80034cc:	0800350d 	.word	0x0800350d
 80034d0:	08003515 	.word	0x08003515
 80034d4:	0800352b 	.word	0x0800352b
 80034d8:	0800351b 	.word	0x0800351b
 80034dc:	0800352b 	.word	0x0800352b
 80034e0:	0800352b 	.word	0x0800352b
 80034e4:	0800352b 	.word	0x0800352b
 80034e8:	08003523 	.word	0x08003523
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80034ec:	f7fe ff3a 	bl	8002364 <HAL_RCC_GetPCLK1Freq>
 80034f0:	61f8      	str	r0, [r7, #28]
        break;
 80034f2:	e020      	b.n	8003536 <UART_SetConfig+0x342>
 80034f4:	efff69f3 	.word	0xefff69f3
 80034f8:	40008000 	.word	0x40008000
 80034fc:	40013800 	.word	0x40013800
 8003500:	40021000 	.word	0x40021000
 8003504:	40004400 	.word	0x40004400
 8003508:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800350c:	f7fe ff40 	bl	8002390 <HAL_RCC_GetPCLK2Freq>
 8003510:	61f8      	str	r0, [r7, #28]
        break;
 8003512:	e010      	b.n	8003536 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003514:	4b4c      	ldr	r3, [pc, #304]	; (8003648 <UART_SetConfig+0x454>)
 8003516:	61fb      	str	r3, [r7, #28]
        break;
 8003518:	e00d      	b.n	8003536 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800351a:	f7fe fe8b 	bl	8002234 <HAL_RCC_GetSysClockFreq>
 800351e:	61f8      	str	r0, [r7, #28]
        break;
 8003520:	e009      	b.n	8003536 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003522:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003526:	61fb      	str	r3, [r7, #28]
        break;
 8003528:	e005      	b.n	8003536 <UART_SetConfig+0x342>
      default:
        pclk = 0U;
 800352a:	2300      	movs	r3, #0
 800352c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800352e:	2301      	movs	r3, #1
 8003530:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003534:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003536:	69fb      	ldr	r3, [r7, #28]
 8003538:	2b00      	cmp	r3, #0
 800353a:	d077      	beq.n	800362c <UART_SetConfig+0x438>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800353c:	69fb      	ldr	r3, [r7, #28]
 800353e:	005a      	lsls	r2, r3, #1
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	685b      	ldr	r3, [r3, #4]
 8003544:	085b      	lsrs	r3, r3, #1
 8003546:	441a      	add	r2, r3
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	685b      	ldr	r3, [r3, #4]
 800354c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003550:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003552:	69bb      	ldr	r3, [r7, #24]
 8003554:	2b0f      	cmp	r3, #15
 8003556:	d916      	bls.n	8003586 <UART_SetConfig+0x392>
 8003558:	69bb      	ldr	r3, [r7, #24]
 800355a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800355e:	d212      	bcs.n	8003586 <UART_SetConfig+0x392>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003560:	69bb      	ldr	r3, [r7, #24]
 8003562:	b29b      	uxth	r3, r3
 8003564:	f023 030f 	bic.w	r3, r3, #15
 8003568:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800356a:	69bb      	ldr	r3, [r7, #24]
 800356c:	085b      	lsrs	r3, r3, #1
 800356e:	b29b      	uxth	r3, r3
 8003570:	f003 0307 	and.w	r3, r3, #7
 8003574:	b29a      	uxth	r2, r3
 8003576:	8afb      	ldrh	r3, [r7, #22]
 8003578:	4313      	orrs	r3, r2
 800357a:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	8afa      	ldrh	r2, [r7, #22]
 8003582:	60da      	str	r2, [r3, #12]
 8003584:	e052      	b.n	800362c <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 8003586:	2301      	movs	r3, #1
 8003588:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800358c:	e04e      	b.n	800362c <UART_SetConfig+0x438>
      }
    }
  }
  else
  {
    switch (clocksource)
 800358e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003592:	2b08      	cmp	r3, #8
 8003594:	d827      	bhi.n	80035e6 <UART_SetConfig+0x3f2>
 8003596:	a201      	add	r2, pc, #4	; (adr r2, 800359c <UART_SetConfig+0x3a8>)
 8003598:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800359c:	080035c1 	.word	0x080035c1
 80035a0:	080035c9 	.word	0x080035c9
 80035a4:	080035d1 	.word	0x080035d1
 80035a8:	080035e7 	.word	0x080035e7
 80035ac:	080035d7 	.word	0x080035d7
 80035b0:	080035e7 	.word	0x080035e7
 80035b4:	080035e7 	.word	0x080035e7
 80035b8:	080035e7 	.word	0x080035e7
 80035bc:	080035df 	.word	0x080035df
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80035c0:	f7fe fed0 	bl	8002364 <HAL_RCC_GetPCLK1Freq>
 80035c4:	61f8      	str	r0, [r7, #28]
        break;
 80035c6:	e014      	b.n	80035f2 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80035c8:	f7fe fee2 	bl	8002390 <HAL_RCC_GetPCLK2Freq>
 80035cc:	61f8      	str	r0, [r7, #28]
        break;
 80035ce:	e010      	b.n	80035f2 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80035d0:	4b1d      	ldr	r3, [pc, #116]	; (8003648 <UART_SetConfig+0x454>)
 80035d2:	61fb      	str	r3, [r7, #28]
        break;
 80035d4:	e00d      	b.n	80035f2 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80035d6:	f7fe fe2d 	bl	8002234 <HAL_RCC_GetSysClockFreq>
 80035da:	61f8      	str	r0, [r7, #28]
        break;
 80035dc:	e009      	b.n	80035f2 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80035de:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80035e2:	61fb      	str	r3, [r7, #28]
        break;
 80035e4:	e005      	b.n	80035f2 <UART_SetConfig+0x3fe>
      default:
        pclk = 0U;
 80035e6:	2300      	movs	r3, #0
 80035e8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80035ea:	2301      	movs	r3, #1
 80035ec:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80035f0:	bf00      	nop
    }

    if (pclk != 0U)
 80035f2:	69fb      	ldr	r3, [r7, #28]
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d019      	beq.n	800362c <UART_SetConfig+0x438>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	685b      	ldr	r3, [r3, #4]
 80035fc:	085a      	lsrs	r2, r3, #1
 80035fe:	69fb      	ldr	r3, [r7, #28]
 8003600:	441a      	add	r2, r3
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	685b      	ldr	r3, [r3, #4]
 8003606:	fbb2 f3f3 	udiv	r3, r2, r3
 800360a:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800360c:	69bb      	ldr	r3, [r7, #24]
 800360e:	2b0f      	cmp	r3, #15
 8003610:	d909      	bls.n	8003626 <UART_SetConfig+0x432>
 8003612:	69bb      	ldr	r3, [r7, #24]
 8003614:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003618:	d205      	bcs.n	8003626 <UART_SetConfig+0x432>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800361a:	69bb      	ldr	r3, [r7, #24]
 800361c:	b29a      	uxth	r2, r3
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	60da      	str	r2, [r3, #12]
 8003624:	e002      	b.n	800362c <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 8003626:	2301      	movs	r3, #1
 8003628:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	2200      	movs	r2, #0
 8003630:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	2200      	movs	r2, #0
 8003636:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8003638:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 800363c:	4618      	mov	r0, r3
 800363e:	3728      	adds	r7, #40	; 0x28
 8003640:	46bd      	mov	sp, r7
 8003642:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003646:	bf00      	nop
 8003648:	00f42400 	.word	0x00f42400

0800364c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800364c:	b480      	push	{r7}
 800364e:	b083      	sub	sp, #12
 8003650:	af00      	add	r7, sp, #0
 8003652:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003658:	f003 0301 	and.w	r3, r3, #1
 800365c:	2b00      	cmp	r3, #0
 800365e:	d00a      	beq.n	8003676 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	685b      	ldr	r3, [r3, #4]
 8003666:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	430a      	orrs	r2, r1
 8003674:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800367a:	f003 0302 	and.w	r3, r3, #2
 800367e:	2b00      	cmp	r3, #0
 8003680:	d00a      	beq.n	8003698 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	685b      	ldr	r3, [r3, #4]
 8003688:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	430a      	orrs	r2, r1
 8003696:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800369c:	f003 0304 	and.w	r3, r3, #4
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d00a      	beq.n	80036ba <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	685b      	ldr	r3, [r3, #4]
 80036aa:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	430a      	orrs	r2, r1
 80036b8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036be:	f003 0308 	and.w	r3, r3, #8
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d00a      	beq.n	80036dc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	685b      	ldr	r3, [r3, #4]
 80036cc:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	430a      	orrs	r2, r1
 80036da:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036e0:	f003 0310 	and.w	r3, r3, #16
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d00a      	beq.n	80036fe <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	689b      	ldr	r3, [r3, #8]
 80036ee:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	430a      	orrs	r2, r1
 80036fc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003702:	f003 0320 	and.w	r3, r3, #32
 8003706:	2b00      	cmp	r3, #0
 8003708:	d00a      	beq.n	8003720 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	689b      	ldr	r3, [r3, #8]
 8003710:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	430a      	orrs	r2, r1
 800371e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003724:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003728:	2b00      	cmp	r3, #0
 800372a:	d01a      	beq.n	8003762 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	685b      	ldr	r3, [r3, #4]
 8003732:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	430a      	orrs	r2, r1
 8003740:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003746:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800374a:	d10a      	bne.n	8003762 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	685b      	ldr	r3, [r3, #4]
 8003752:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	430a      	orrs	r2, r1
 8003760:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003766:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800376a:	2b00      	cmp	r3, #0
 800376c:	d00a      	beq.n	8003784 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	685b      	ldr	r3, [r3, #4]
 8003774:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	430a      	orrs	r2, r1
 8003782:	605a      	str	r2, [r3, #4]
  }
}
 8003784:	bf00      	nop
 8003786:	370c      	adds	r7, #12
 8003788:	46bd      	mov	sp, r7
 800378a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800378e:	4770      	bx	lr

08003790 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003790:	b580      	push	{r7, lr}
 8003792:	b086      	sub	sp, #24
 8003794:	af02      	add	r7, sp, #8
 8003796:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	2200      	movs	r2, #0
 800379c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80037a0:	f7fd fd4c 	bl	800123c <HAL_GetTick>
 80037a4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	f003 0308 	and.w	r3, r3, #8
 80037b0:	2b08      	cmp	r3, #8
 80037b2:	d10e      	bne.n	80037d2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80037b4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80037b8:	9300      	str	r3, [sp, #0]
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	2200      	movs	r2, #0
 80037be:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80037c2:	6878      	ldr	r0, [r7, #4]
 80037c4:	f000 f82d 	bl	8003822 <UART_WaitOnFlagUntilTimeout>
 80037c8:	4603      	mov	r3, r0
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d001      	beq.n	80037d2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80037ce:	2303      	movs	r3, #3
 80037d0:	e023      	b.n	800381a <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	f003 0304 	and.w	r3, r3, #4
 80037dc:	2b04      	cmp	r3, #4
 80037de:	d10e      	bne.n	80037fe <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80037e0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80037e4:	9300      	str	r3, [sp, #0]
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	2200      	movs	r2, #0
 80037ea:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80037ee:	6878      	ldr	r0, [r7, #4]
 80037f0:	f000 f817 	bl	8003822 <UART_WaitOnFlagUntilTimeout>
 80037f4:	4603      	mov	r3, r0
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d001      	beq.n	80037fe <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80037fa:	2303      	movs	r3, #3
 80037fc:	e00d      	b.n	800381a <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	2220      	movs	r2, #32
 8003802:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	2220      	movs	r2, #32
 8003808:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	2200      	movs	r2, #0
 800380e:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	2200      	movs	r2, #0
 8003814:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8003818:	2300      	movs	r3, #0
}
 800381a:	4618      	mov	r0, r3
 800381c:	3710      	adds	r7, #16
 800381e:	46bd      	mov	sp, r7
 8003820:	bd80      	pop	{r7, pc}

08003822 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003822:	b580      	push	{r7, lr}
 8003824:	b09c      	sub	sp, #112	; 0x70
 8003826:	af00      	add	r7, sp, #0
 8003828:	60f8      	str	r0, [r7, #12]
 800382a:	60b9      	str	r1, [r7, #8]
 800382c:	603b      	str	r3, [r7, #0]
 800382e:	4613      	mov	r3, r2
 8003830:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003832:	e0a5      	b.n	8003980 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003834:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003836:	f1b3 3fff 	cmp.w	r3, #4294967295
 800383a:	f000 80a1 	beq.w	8003980 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800383e:	f7fd fcfd 	bl	800123c <HAL_GetTick>
 8003842:	4602      	mov	r2, r0
 8003844:	683b      	ldr	r3, [r7, #0]
 8003846:	1ad3      	subs	r3, r2, r3
 8003848:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800384a:	429a      	cmp	r2, r3
 800384c:	d302      	bcc.n	8003854 <UART_WaitOnFlagUntilTimeout+0x32>
 800384e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003850:	2b00      	cmp	r3, #0
 8003852:	d13e      	bne.n	80038d2 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800385a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800385c:	e853 3f00 	ldrex	r3, [r3]
 8003860:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8003862:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003864:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003868:	667b      	str	r3, [r7, #100]	; 0x64
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	461a      	mov	r2, r3
 8003870:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003872:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003874:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003876:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8003878:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800387a:	e841 2300 	strex	r3, r2, [r1]
 800387e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8003880:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003882:	2b00      	cmp	r3, #0
 8003884:	d1e6      	bne.n	8003854 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	3308      	adds	r3, #8
 800388c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800388e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003890:	e853 3f00 	ldrex	r3, [r3]
 8003894:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003896:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003898:	f023 0301 	bic.w	r3, r3, #1
 800389c:	663b      	str	r3, [r7, #96]	; 0x60
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	3308      	adds	r3, #8
 80038a4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80038a6:	64ba      	str	r2, [r7, #72]	; 0x48
 80038a8:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038aa:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80038ac:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80038ae:	e841 2300 	strex	r3, r2, [r1]
 80038b2:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80038b4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d1e5      	bne.n	8003886 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	2220      	movs	r2, #32
 80038be:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	2220      	movs	r2, #32
 80038c4:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	2200      	movs	r2, #0
 80038ca:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80038ce:	2303      	movs	r3, #3
 80038d0:	e067      	b.n	80039a2 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	f003 0304 	and.w	r3, r3, #4
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d04f      	beq.n	8003980 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	69db      	ldr	r3, [r3, #28]
 80038e6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80038ea:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80038ee:	d147      	bne.n	8003980 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80038f8:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003900:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003902:	e853 3f00 	ldrex	r3, [r3]
 8003906:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003908:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800390a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800390e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	461a      	mov	r2, r3
 8003916:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003918:	637b      	str	r3, [r7, #52]	; 0x34
 800391a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800391c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800391e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003920:	e841 2300 	strex	r3, r2, [r1]
 8003924:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003926:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003928:	2b00      	cmp	r3, #0
 800392a:	d1e6      	bne.n	80038fa <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	3308      	adds	r3, #8
 8003932:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003934:	697b      	ldr	r3, [r7, #20]
 8003936:	e853 3f00 	ldrex	r3, [r3]
 800393a:	613b      	str	r3, [r7, #16]
   return(result);
 800393c:	693b      	ldr	r3, [r7, #16]
 800393e:	f023 0301 	bic.w	r3, r3, #1
 8003942:	66bb      	str	r3, [r7, #104]	; 0x68
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	3308      	adds	r3, #8
 800394a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800394c:	623a      	str	r2, [r7, #32]
 800394e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003950:	69f9      	ldr	r1, [r7, #28]
 8003952:	6a3a      	ldr	r2, [r7, #32]
 8003954:	e841 2300 	strex	r3, r2, [r1]
 8003958:	61bb      	str	r3, [r7, #24]
   return(result);
 800395a:	69bb      	ldr	r3, [r7, #24]
 800395c:	2b00      	cmp	r3, #0
 800395e:	d1e5      	bne.n	800392c <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	2220      	movs	r2, #32
 8003964:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	2220      	movs	r2, #32
 800396a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	2220      	movs	r2, #32
 8003970:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	2200      	movs	r2, #0
 8003978:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800397c:	2303      	movs	r3, #3
 800397e:	e010      	b.n	80039a2 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	69da      	ldr	r2, [r3, #28]
 8003986:	68bb      	ldr	r3, [r7, #8]
 8003988:	4013      	ands	r3, r2
 800398a:	68ba      	ldr	r2, [r7, #8]
 800398c:	429a      	cmp	r2, r3
 800398e:	bf0c      	ite	eq
 8003990:	2301      	moveq	r3, #1
 8003992:	2300      	movne	r3, #0
 8003994:	b2db      	uxtb	r3, r3
 8003996:	461a      	mov	r2, r3
 8003998:	79fb      	ldrb	r3, [r7, #7]
 800399a:	429a      	cmp	r2, r3
 800399c:	f43f af4a 	beq.w	8003834 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80039a0:	2300      	movs	r3, #0
}
 80039a2:	4618      	mov	r0, r3
 80039a4:	3770      	adds	r7, #112	; 0x70
 80039a6:	46bd      	mov	sp, r7
 80039a8:	bd80      	pop	{r7, pc}
	...

080039ac <__libc_init_array>:
 80039ac:	b570      	push	{r4, r5, r6, lr}
 80039ae:	4d0d      	ldr	r5, [pc, #52]	; (80039e4 <__libc_init_array+0x38>)
 80039b0:	4c0d      	ldr	r4, [pc, #52]	; (80039e8 <__libc_init_array+0x3c>)
 80039b2:	1b64      	subs	r4, r4, r5
 80039b4:	10a4      	asrs	r4, r4, #2
 80039b6:	2600      	movs	r6, #0
 80039b8:	42a6      	cmp	r6, r4
 80039ba:	d109      	bne.n	80039d0 <__libc_init_array+0x24>
 80039bc:	4d0b      	ldr	r5, [pc, #44]	; (80039ec <__libc_init_array+0x40>)
 80039be:	4c0c      	ldr	r4, [pc, #48]	; (80039f0 <__libc_init_array+0x44>)
 80039c0:	f000 f820 	bl	8003a04 <_init>
 80039c4:	1b64      	subs	r4, r4, r5
 80039c6:	10a4      	asrs	r4, r4, #2
 80039c8:	2600      	movs	r6, #0
 80039ca:	42a6      	cmp	r6, r4
 80039cc:	d105      	bne.n	80039da <__libc_init_array+0x2e>
 80039ce:	bd70      	pop	{r4, r5, r6, pc}
 80039d0:	f855 3b04 	ldr.w	r3, [r5], #4
 80039d4:	4798      	blx	r3
 80039d6:	3601      	adds	r6, #1
 80039d8:	e7ee      	b.n	80039b8 <__libc_init_array+0xc>
 80039da:	f855 3b04 	ldr.w	r3, [r5], #4
 80039de:	4798      	blx	r3
 80039e0:	3601      	adds	r6, #1
 80039e2:	e7f2      	b.n	80039ca <__libc_init_array+0x1e>
 80039e4:	0800450c 	.word	0x0800450c
 80039e8:	0800450c 	.word	0x0800450c
 80039ec:	0800450c 	.word	0x0800450c
 80039f0:	08004510 	.word	0x08004510

080039f4 <memset>:
 80039f4:	4402      	add	r2, r0
 80039f6:	4603      	mov	r3, r0
 80039f8:	4293      	cmp	r3, r2
 80039fa:	d100      	bne.n	80039fe <memset+0xa>
 80039fc:	4770      	bx	lr
 80039fe:	f803 1b01 	strb.w	r1, [r3], #1
 8003a02:	e7f9      	b.n	80039f8 <memset+0x4>

08003a04 <_init>:
 8003a04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a06:	bf00      	nop
 8003a08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003a0a:	bc08      	pop	{r3}
 8003a0c:	469e      	mov	lr, r3
 8003a0e:	4770      	bx	lr

08003a10 <_fini>:
 8003a10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a12:	bf00      	nop
 8003a14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003a16:	bc08      	pop	{r3}
 8003a18:	469e      	mov	lr, r3
 8003a1a:	4770      	bx	lr
