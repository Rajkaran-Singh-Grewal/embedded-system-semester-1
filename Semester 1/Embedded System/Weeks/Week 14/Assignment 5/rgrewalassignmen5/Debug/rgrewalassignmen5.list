
rgrewalassignmen5.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ba6c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001578  0800bc00  0800bc00  0001bc00  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d178  0800d178  000201e0  2**0
                  CONTENTS
  4 .ARM          00000008  0800d178  0800d178  0001d178  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d180  0800d180  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d180  0800d180  0001d180  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d184  0800d184  0001d184  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  0800d188  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000168  200001e0  0800d368  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000348  0800d368  00020348  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   000146c5  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000028f4  00000000  00000000  000348d5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001248  00000000  00000000  000371d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001128  00000000  00000000  00038418  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002314d  00000000  00000000  00039540  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000155f0  00000000  00000000  0005c68d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cf619  00000000  00000000  00071c7d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00141296  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006710  00000000  00000000  001412e8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e0 	.word	0x200001e0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800bbe4 	.word	0x0800bbe4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e4 	.word	0x200001e4
 80001cc:	0800bbe4 	.word	0x0800bbe4

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b9aa 	b.w	8000ff4 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	; (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	; (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9d08      	ldr	r5, [sp, #32]
 8000d2a:	4604      	mov	r4, r0
 8000d2c:	468e      	mov	lr, r1
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d14d      	bne.n	8000dce <__udivmoddi4+0xaa>
 8000d32:	428a      	cmp	r2, r1
 8000d34:	4694      	mov	ip, r2
 8000d36:	d969      	bls.n	8000e0c <__udivmoddi4+0xe8>
 8000d38:	fab2 f282 	clz	r2, r2
 8000d3c:	b152      	cbz	r2, 8000d54 <__udivmoddi4+0x30>
 8000d3e:	fa01 f302 	lsl.w	r3, r1, r2
 8000d42:	f1c2 0120 	rsb	r1, r2, #32
 8000d46:	fa20 f101 	lsr.w	r1, r0, r1
 8000d4a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d4e:	ea41 0e03 	orr.w	lr, r1, r3
 8000d52:	4094      	lsls	r4, r2
 8000d54:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d58:	0c21      	lsrs	r1, r4, #16
 8000d5a:	fbbe f6f8 	udiv	r6, lr, r8
 8000d5e:	fa1f f78c 	uxth.w	r7, ip
 8000d62:	fb08 e316 	mls	r3, r8, r6, lr
 8000d66:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d6a:	fb06 f107 	mul.w	r1, r6, r7
 8000d6e:	4299      	cmp	r1, r3
 8000d70:	d90a      	bls.n	8000d88 <__udivmoddi4+0x64>
 8000d72:	eb1c 0303 	adds.w	r3, ip, r3
 8000d76:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d7a:	f080 811f 	bcs.w	8000fbc <__udivmoddi4+0x298>
 8000d7e:	4299      	cmp	r1, r3
 8000d80:	f240 811c 	bls.w	8000fbc <__udivmoddi4+0x298>
 8000d84:	3e02      	subs	r6, #2
 8000d86:	4463      	add	r3, ip
 8000d88:	1a5b      	subs	r3, r3, r1
 8000d8a:	b2a4      	uxth	r4, r4
 8000d8c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d90:	fb08 3310 	mls	r3, r8, r0, r3
 8000d94:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d98:	fb00 f707 	mul.w	r7, r0, r7
 8000d9c:	42a7      	cmp	r7, r4
 8000d9e:	d90a      	bls.n	8000db6 <__udivmoddi4+0x92>
 8000da0:	eb1c 0404 	adds.w	r4, ip, r4
 8000da4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000da8:	f080 810a 	bcs.w	8000fc0 <__udivmoddi4+0x29c>
 8000dac:	42a7      	cmp	r7, r4
 8000dae:	f240 8107 	bls.w	8000fc0 <__udivmoddi4+0x29c>
 8000db2:	4464      	add	r4, ip
 8000db4:	3802      	subs	r0, #2
 8000db6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dba:	1be4      	subs	r4, r4, r7
 8000dbc:	2600      	movs	r6, #0
 8000dbe:	b11d      	cbz	r5, 8000dc8 <__udivmoddi4+0xa4>
 8000dc0:	40d4      	lsrs	r4, r2
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	e9c5 4300 	strd	r4, r3, [r5]
 8000dc8:	4631      	mov	r1, r6
 8000dca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dce:	428b      	cmp	r3, r1
 8000dd0:	d909      	bls.n	8000de6 <__udivmoddi4+0xc2>
 8000dd2:	2d00      	cmp	r5, #0
 8000dd4:	f000 80ef 	beq.w	8000fb6 <__udivmoddi4+0x292>
 8000dd8:	2600      	movs	r6, #0
 8000dda:	e9c5 0100 	strd	r0, r1, [r5]
 8000dde:	4630      	mov	r0, r6
 8000de0:	4631      	mov	r1, r6
 8000de2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000de6:	fab3 f683 	clz	r6, r3
 8000dea:	2e00      	cmp	r6, #0
 8000dec:	d14a      	bne.n	8000e84 <__udivmoddi4+0x160>
 8000dee:	428b      	cmp	r3, r1
 8000df0:	d302      	bcc.n	8000df8 <__udivmoddi4+0xd4>
 8000df2:	4282      	cmp	r2, r0
 8000df4:	f200 80f9 	bhi.w	8000fea <__udivmoddi4+0x2c6>
 8000df8:	1a84      	subs	r4, r0, r2
 8000dfa:	eb61 0303 	sbc.w	r3, r1, r3
 8000dfe:	2001      	movs	r0, #1
 8000e00:	469e      	mov	lr, r3
 8000e02:	2d00      	cmp	r5, #0
 8000e04:	d0e0      	beq.n	8000dc8 <__udivmoddi4+0xa4>
 8000e06:	e9c5 4e00 	strd	r4, lr, [r5]
 8000e0a:	e7dd      	b.n	8000dc8 <__udivmoddi4+0xa4>
 8000e0c:	b902      	cbnz	r2, 8000e10 <__udivmoddi4+0xec>
 8000e0e:	deff      	udf	#255	; 0xff
 8000e10:	fab2 f282 	clz	r2, r2
 8000e14:	2a00      	cmp	r2, #0
 8000e16:	f040 8092 	bne.w	8000f3e <__udivmoddi4+0x21a>
 8000e1a:	eba1 010c 	sub.w	r1, r1, ip
 8000e1e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e22:	fa1f fe8c 	uxth.w	lr, ip
 8000e26:	2601      	movs	r6, #1
 8000e28:	0c20      	lsrs	r0, r4, #16
 8000e2a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e2e:	fb07 1113 	mls	r1, r7, r3, r1
 8000e32:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e36:	fb0e f003 	mul.w	r0, lr, r3
 8000e3a:	4288      	cmp	r0, r1
 8000e3c:	d908      	bls.n	8000e50 <__udivmoddi4+0x12c>
 8000e3e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e42:	f103 38ff 	add.w	r8, r3, #4294967295
 8000e46:	d202      	bcs.n	8000e4e <__udivmoddi4+0x12a>
 8000e48:	4288      	cmp	r0, r1
 8000e4a:	f200 80cb 	bhi.w	8000fe4 <__udivmoddi4+0x2c0>
 8000e4e:	4643      	mov	r3, r8
 8000e50:	1a09      	subs	r1, r1, r0
 8000e52:	b2a4      	uxth	r4, r4
 8000e54:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e58:	fb07 1110 	mls	r1, r7, r0, r1
 8000e5c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e60:	fb0e fe00 	mul.w	lr, lr, r0
 8000e64:	45a6      	cmp	lr, r4
 8000e66:	d908      	bls.n	8000e7a <__udivmoddi4+0x156>
 8000e68:	eb1c 0404 	adds.w	r4, ip, r4
 8000e6c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e70:	d202      	bcs.n	8000e78 <__udivmoddi4+0x154>
 8000e72:	45a6      	cmp	lr, r4
 8000e74:	f200 80bb 	bhi.w	8000fee <__udivmoddi4+0x2ca>
 8000e78:	4608      	mov	r0, r1
 8000e7a:	eba4 040e 	sub.w	r4, r4, lr
 8000e7e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e82:	e79c      	b.n	8000dbe <__udivmoddi4+0x9a>
 8000e84:	f1c6 0720 	rsb	r7, r6, #32
 8000e88:	40b3      	lsls	r3, r6
 8000e8a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e8e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e92:	fa20 f407 	lsr.w	r4, r0, r7
 8000e96:	fa01 f306 	lsl.w	r3, r1, r6
 8000e9a:	431c      	orrs	r4, r3
 8000e9c:	40f9      	lsrs	r1, r7
 8000e9e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ea2:	fa00 f306 	lsl.w	r3, r0, r6
 8000ea6:	fbb1 f8f9 	udiv	r8, r1, r9
 8000eaa:	0c20      	lsrs	r0, r4, #16
 8000eac:	fa1f fe8c 	uxth.w	lr, ip
 8000eb0:	fb09 1118 	mls	r1, r9, r8, r1
 8000eb4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000eb8:	fb08 f00e 	mul.w	r0, r8, lr
 8000ebc:	4288      	cmp	r0, r1
 8000ebe:	fa02 f206 	lsl.w	r2, r2, r6
 8000ec2:	d90b      	bls.n	8000edc <__udivmoddi4+0x1b8>
 8000ec4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ec8:	f108 3aff 	add.w	sl, r8, #4294967295
 8000ecc:	f080 8088 	bcs.w	8000fe0 <__udivmoddi4+0x2bc>
 8000ed0:	4288      	cmp	r0, r1
 8000ed2:	f240 8085 	bls.w	8000fe0 <__udivmoddi4+0x2bc>
 8000ed6:	f1a8 0802 	sub.w	r8, r8, #2
 8000eda:	4461      	add	r1, ip
 8000edc:	1a09      	subs	r1, r1, r0
 8000ede:	b2a4      	uxth	r4, r4
 8000ee0:	fbb1 f0f9 	udiv	r0, r1, r9
 8000ee4:	fb09 1110 	mls	r1, r9, r0, r1
 8000ee8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000eec:	fb00 fe0e 	mul.w	lr, r0, lr
 8000ef0:	458e      	cmp	lr, r1
 8000ef2:	d908      	bls.n	8000f06 <__udivmoddi4+0x1e2>
 8000ef4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ef8:	f100 34ff 	add.w	r4, r0, #4294967295
 8000efc:	d26c      	bcs.n	8000fd8 <__udivmoddi4+0x2b4>
 8000efe:	458e      	cmp	lr, r1
 8000f00:	d96a      	bls.n	8000fd8 <__udivmoddi4+0x2b4>
 8000f02:	3802      	subs	r0, #2
 8000f04:	4461      	add	r1, ip
 8000f06:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000f0a:	fba0 9402 	umull	r9, r4, r0, r2
 8000f0e:	eba1 010e 	sub.w	r1, r1, lr
 8000f12:	42a1      	cmp	r1, r4
 8000f14:	46c8      	mov	r8, r9
 8000f16:	46a6      	mov	lr, r4
 8000f18:	d356      	bcc.n	8000fc8 <__udivmoddi4+0x2a4>
 8000f1a:	d053      	beq.n	8000fc4 <__udivmoddi4+0x2a0>
 8000f1c:	b15d      	cbz	r5, 8000f36 <__udivmoddi4+0x212>
 8000f1e:	ebb3 0208 	subs.w	r2, r3, r8
 8000f22:	eb61 010e 	sbc.w	r1, r1, lr
 8000f26:	fa01 f707 	lsl.w	r7, r1, r7
 8000f2a:	fa22 f306 	lsr.w	r3, r2, r6
 8000f2e:	40f1      	lsrs	r1, r6
 8000f30:	431f      	orrs	r7, r3
 8000f32:	e9c5 7100 	strd	r7, r1, [r5]
 8000f36:	2600      	movs	r6, #0
 8000f38:	4631      	mov	r1, r6
 8000f3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f3e:	f1c2 0320 	rsb	r3, r2, #32
 8000f42:	40d8      	lsrs	r0, r3
 8000f44:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f48:	fa21 f303 	lsr.w	r3, r1, r3
 8000f4c:	4091      	lsls	r1, r2
 8000f4e:	4301      	orrs	r1, r0
 8000f50:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f54:	fa1f fe8c 	uxth.w	lr, ip
 8000f58:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f5c:	fb07 3610 	mls	r6, r7, r0, r3
 8000f60:	0c0b      	lsrs	r3, r1, #16
 8000f62:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f66:	fb00 f60e 	mul.w	r6, r0, lr
 8000f6a:	429e      	cmp	r6, r3
 8000f6c:	fa04 f402 	lsl.w	r4, r4, r2
 8000f70:	d908      	bls.n	8000f84 <__udivmoddi4+0x260>
 8000f72:	eb1c 0303 	adds.w	r3, ip, r3
 8000f76:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f7a:	d22f      	bcs.n	8000fdc <__udivmoddi4+0x2b8>
 8000f7c:	429e      	cmp	r6, r3
 8000f7e:	d92d      	bls.n	8000fdc <__udivmoddi4+0x2b8>
 8000f80:	3802      	subs	r0, #2
 8000f82:	4463      	add	r3, ip
 8000f84:	1b9b      	subs	r3, r3, r6
 8000f86:	b289      	uxth	r1, r1
 8000f88:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f8c:	fb07 3316 	mls	r3, r7, r6, r3
 8000f90:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f94:	fb06 f30e 	mul.w	r3, r6, lr
 8000f98:	428b      	cmp	r3, r1
 8000f9a:	d908      	bls.n	8000fae <__udivmoddi4+0x28a>
 8000f9c:	eb1c 0101 	adds.w	r1, ip, r1
 8000fa0:	f106 38ff 	add.w	r8, r6, #4294967295
 8000fa4:	d216      	bcs.n	8000fd4 <__udivmoddi4+0x2b0>
 8000fa6:	428b      	cmp	r3, r1
 8000fa8:	d914      	bls.n	8000fd4 <__udivmoddi4+0x2b0>
 8000faa:	3e02      	subs	r6, #2
 8000fac:	4461      	add	r1, ip
 8000fae:	1ac9      	subs	r1, r1, r3
 8000fb0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000fb4:	e738      	b.n	8000e28 <__udivmoddi4+0x104>
 8000fb6:	462e      	mov	r6, r5
 8000fb8:	4628      	mov	r0, r5
 8000fba:	e705      	b.n	8000dc8 <__udivmoddi4+0xa4>
 8000fbc:	4606      	mov	r6, r0
 8000fbe:	e6e3      	b.n	8000d88 <__udivmoddi4+0x64>
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	e6f8      	b.n	8000db6 <__udivmoddi4+0x92>
 8000fc4:	454b      	cmp	r3, r9
 8000fc6:	d2a9      	bcs.n	8000f1c <__udivmoddi4+0x1f8>
 8000fc8:	ebb9 0802 	subs.w	r8, r9, r2
 8000fcc:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000fd0:	3801      	subs	r0, #1
 8000fd2:	e7a3      	b.n	8000f1c <__udivmoddi4+0x1f8>
 8000fd4:	4646      	mov	r6, r8
 8000fd6:	e7ea      	b.n	8000fae <__udivmoddi4+0x28a>
 8000fd8:	4620      	mov	r0, r4
 8000fda:	e794      	b.n	8000f06 <__udivmoddi4+0x1e2>
 8000fdc:	4640      	mov	r0, r8
 8000fde:	e7d1      	b.n	8000f84 <__udivmoddi4+0x260>
 8000fe0:	46d0      	mov	r8, sl
 8000fe2:	e77b      	b.n	8000edc <__udivmoddi4+0x1b8>
 8000fe4:	3b02      	subs	r3, #2
 8000fe6:	4461      	add	r1, ip
 8000fe8:	e732      	b.n	8000e50 <__udivmoddi4+0x12c>
 8000fea:	4630      	mov	r0, r6
 8000fec:	e709      	b.n	8000e02 <__udivmoddi4+0xde>
 8000fee:	4464      	add	r4, ip
 8000ff0:	3802      	subs	r0, #2
 8000ff2:	e742      	b.n	8000e7a <__udivmoddi4+0x156>

08000ff4 <__aeabi_idiv0>:
 8000ff4:	4770      	bx	lr
 8000ff6:	bf00      	nop

08000ff8 <deBounceInit>:
#include <stdio.h>
#include "stm32l4xx_hal.h"
#include "stm32l4xx_hal_gpio.h"

void deBounceInit(int16_t pin, char port, int8_t mode)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b088      	sub	sp, #32
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	4603      	mov	r3, r0
 8001000:	80fb      	strh	r3, [r7, #6]
 8001002:	460b      	mov	r3, r1
 8001004:	717b      	strb	r3, [r7, #5]
 8001006:	4613      	mov	r3, r2
 8001008:	713b      	strb	r3, [r7, #4]
	GPIO_InitTypeDef GPIO_InitStruct;
	/*Configure GPIO pin : */
	GPIO_InitStruct.Pin = GPIO_PIN_0;
 800100a:	2301      	movs	r3, #1
 800100c:	60fb      	str	r3, [r7, #12]
	switch(pin)
 800100e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001012:	2b0f      	cmp	r3, #15
 8001014:	d85a      	bhi.n	80010cc <deBounceInit+0xd4>
 8001016:	a201      	add	r2, pc, #4	; (adr r2, 800101c <deBounceInit+0x24>)
 8001018:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800101c:	0800105d 	.word	0x0800105d
 8001020:	08001063 	.word	0x08001063
 8001024:	08001069 	.word	0x08001069
 8001028:	0800106f 	.word	0x0800106f
 800102c:	08001075 	.word	0x08001075
 8001030:	0800107b 	.word	0x0800107b
 8001034:	08001081 	.word	0x08001081
 8001038:	08001087 	.word	0x08001087
 800103c:	0800108d 	.word	0x0800108d
 8001040:	08001095 	.word	0x08001095
 8001044:	0800109d 	.word	0x0800109d
 8001048:	080010a5 	.word	0x080010a5
 800104c:	080010ad 	.word	0x080010ad
 8001050:	080010b5 	.word	0x080010b5
 8001054:	080010bd 	.word	0x080010bd
 8001058:	080010c5 	.word	0x080010c5
	{
		case 0: GPIO_InitStruct.Pin = GPIO_PIN_0; break;
 800105c:	2301      	movs	r3, #1
 800105e:	60fb      	str	r3, [r7, #12]
 8001060:	e038      	b.n	80010d4 <deBounceInit+0xdc>
		case 1: GPIO_InitStruct.Pin = GPIO_PIN_1; break;
 8001062:	2302      	movs	r3, #2
 8001064:	60fb      	str	r3, [r7, #12]
 8001066:	e035      	b.n	80010d4 <deBounceInit+0xdc>
		case 2: GPIO_InitStruct.Pin = GPIO_PIN_2; break;
 8001068:	2304      	movs	r3, #4
 800106a:	60fb      	str	r3, [r7, #12]
 800106c:	e032      	b.n	80010d4 <deBounceInit+0xdc>
		case 3: GPIO_InitStruct.Pin = GPIO_PIN_3; break;
 800106e:	2308      	movs	r3, #8
 8001070:	60fb      	str	r3, [r7, #12]
 8001072:	e02f      	b.n	80010d4 <deBounceInit+0xdc>
		case 4: GPIO_InitStruct.Pin = GPIO_PIN_4; break;
 8001074:	2310      	movs	r3, #16
 8001076:	60fb      	str	r3, [r7, #12]
 8001078:	e02c      	b.n	80010d4 <deBounceInit+0xdc>
		case 5: GPIO_InitStruct.Pin = GPIO_PIN_5; break;
 800107a:	2320      	movs	r3, #32
 800107c:	60fb      	str	r3, [r7, #12]
 800107e:	e029      	b.n	80010d4 <deBounceInit+0xdc>
		case 6: GPIO_InitStruct.Pin = GPIO_PIN_6; break;
 8001080:	2340      	movs	r3, #64	; 0x40
 8001082:	60fb      	str	r3, [r7, #12]
 8001084:	e026      	b.n	80010d4 <deBounceInit+0xdc>
		case 7: GPIO_InitStruct.Pin = GPIO_PIN_7; break;
 8001086:	2380      	movs	r3, #128	; 0x80
 8001088:	60fb      	str	r3, [r7, #12]
 800108a:	e023      	b.n	80010d4 <deBounceInit+0xdc>
		case 8: GPIO_InitStruct.Pin = GPIO_PIN_8; break;
 800108c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001090:	60fb      	str	r3, [r7, #12]
 8001092:	e01f      	b.n	80010d4 <deBounceInit+0xdc>
		case 9: GPIO_InitStruct.Pin = GPIO_PIN_9; break;
 8001094:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001098:	60fb      	str	r3, [r7, #12]
 800109a:	e01b      	b.n	80010d4 <deBounceInit+0xdc>
		case 10: GPIO_InitStruct.Pin = GPIO_PIN_10; break;
 800109c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80010a0:	60fb      	str	r3, [r7, #12]
 80010a2:	e017      	b.n	80010d4 <deBounceInit+0xdc>
		case 11: GPIO_InitStruct.Pin = GPIO_PIN_11; break;
 80010a4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80010a8:	60fb      	str	r3, [r7, #12]
 80010aa:	e013      	b.n	80010d4 <deBounceInit+0xdc>
		case 12: GPIO_InitStruct.Pin = GPIO_PIN_12; break;
 80010ac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80010b0:	60fb      	str	r3, [r7, #12]
 80010b2:	e00f      	b.n	80010d4 <deBounceInit+0xdc>
		case 13: GPIO_InitStruct.Pin = GPIO_PIN_13; break;
 80010b4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80010b8:	60fb      	str	r3, [r7, #12]
 80010ba:	e00b      	b.n	80010d4 <deBounceInit+0xdc>
		case 14: GPIO_InitStruct.Pin = GPIO_PIN_14; break;
 80010bc:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80010c0:	60fb      	str	r3, [r7, #12]
 80010c2:	e007      	b.n	80010d4 <deBounceInit+0xdc>
		case 15: GPIO_InitStruct.Pin = GPIO_PIN_15; break;
 80010c4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80010c8:	60fb      	str	r3, [r7, #12]
 80010ca:	e003      	b.n	80010d4 <deBounceInit+0xdc>
		default:
			printf( "bad gpio pin number in init\n\r");
 80010cc:	4821      	ldr	r0, [pc, #132]	; (8001154 <deBounceInit+0x15c>)
 80010ce:	f006 f9d3 	bl	8007478 <iprintf>
			break;
 80010d2:	bf00      	nop
	}
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010d4:	2300      	movs	r3, #0
 80010d6:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80010d8:	2302      	movs	r3, #2
 80010da:	617b      	str	r3, [r7, #20]
	switch (mode)
 80010dc:	f997 3004 	ldrsb.w	r3, [r7, #4]
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d002      	beq.n	80010ea <deBounceInit+0xf2>
 80010e4:	2b01      	cmp	r3, #1
 80010e6:	d003      	beq.n	80010f0 <deBounceInit+0xf8>
 80010e8:	e005      	b.n	80010f6 <deBounceInit+0xfe>
	{
		case 0: GPIO_InitStruct.Pull = GPIO_PULLDOWN; break;
 80010ea:	2302      	movs	r3, #2
 80010ec:	617b      	str	r3, [r7, #20]
 80010ee:	e002      	b.n	80010f6 <deBounceInit+0xfe>
		case 1: GPIO_InitStruct.Pull = GPIO_PULLUP; break;
 80010f0:	2301      	movs	r3, #1
 80010f2:	617b      	str	r3, [r7, #20]
 80010f4:	bf00      	nop
	}
	switch (port)
 80010f6:	797b      	ldrb	r3, [r7, #5]
 80010f8:	2b43      	cmp	r3, #67	; 0x43
 80010fa:	d015      	beq.n	8001128 <deBounceInit+0x130>
 80010fc:	2b43      	cmp	r3, #67	; 0x43
 80010fe:	dc1a      	bgt.n	8001136 <deBounceInit+0x13e>
 8001100:	2b41      	cmp	r3, #65	; 0x41
 8001102:	d002      	beq.n	800110a <deBounceInit+0x112>
 8001104:	2b42      	cmp	r3, #66	; 0x42
 8001106:	d008      	beq.n	800111a <deBounceInit+0x122>
 8001108:	e015      	b.n	8001136 <deBounceInit+0x13e>
	{
		case 'A': HAL_GPIO_Init(GPIOA, &GPIO_InitStruct); break;
 800110a:	f107 030c 	add.w	r3, r7, #12
 800110e:	4619      	mov	r1, r3
 8001110:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001114:	f002 f898 	bl	8003248 <HAL_GPIO_Init>
 8001118:	e011      	b.n	800113e <deBounceInit+0x146>
		case 'B': HAL_GPIO_Init(GPIOB, &GPIO_InitStruct); break;
 800111a:	f107 030c 	add.w	r3, r7, #12
 800111e:	4619      	mov	r1, r3
 8001120:	480d      	ldr	r0, [pc, #52]	; (8001158 <deBounceInit+0x160>)
 8001122:	f002 f891 	bl	8003248 <HAL_GPIO_Init>
 8001126:	e00a      	b.n	800113e <deBounceInit+0x146>
		case 'C': HAL_GPIO_Init(GPIOC, &GPIO_InitStruct); break;
 8001128:	f107 030c 	add.w	r3, r7, #12
 800112c:	4619      	mov	r1, r3
 800112e:	480b      	ldr	r0, [pc, #44]	; (800115c <deBounceInit+0x164>)
 8001130:	f002 f88a 	bl	8003248 <HAL_GPIO_Init>
 8001134:	e003      	b.n	800113e <deBounceInit+0x146>
		default:
			printf( "bad gpio port number\n\r");
 8001136:	480a      	ldr	r0, [pc, #40]	; (8001160 <deBounceInit+0x168>)
 8001138:	f006 f99e 	bl	8007478 <iprintf>
			break;
 800113c:	bf00      	nop
	}
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800113e:	f107 030c 	add.w	r3, r7, #12
 8001142:	4619      	mov	r1, r3
 8001144:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001148:	f002 f87e 	bl	8003248 <HAL_GPIO_Init>
}
 800114c:	bf00      	nop
 800114e:	3720      	adds	r7, #32
 8001150:	46bd      	mov	sp, r7
 8001152:	bd80      	pop	{r7, pc}
 8001154:	0800bc00 	.word	0x0800bc00
 8001158:	48000400 	.word	0x48000400
 800115c:	48000800 	.word	0x48000800
 8001160:	0800bc20 	.word	0x0800bc20

08001164 <deBounceReadPin>:

int8_t deBounceReadPin(int16_t pin, char port, int8_t stableInterval)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	b08a      	sub	sp, #40	; 0x28
 8001168:	af00      	add	r7, sp, #0
 800116a:	4603      	mov	r3, r0
 800116c:	80fb      	strh	r3, [r7, #6]
 800116e:	460b      	mov	r3, r1
 8001170:	717b      	strb	r3, [r7, #5]
 8001172:	4613      	mov	r3, r2
 8001174:	713b      	strb	r3, [r7, #4]
	GPIO_PinState pinState = GPIO_PIN_RESET;	//remember variables should be initialized
 8001176:	2300      	movs	r3, #0
 8001178:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	int8_t pinStateWeAreLookingFor = 0;
 800117c:	2300      	movs	r3, #0
 800117e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	int32_t msTimeStamp = HAL_GetTick();		//get a timeStamp in ms
 8001182:	f001 ff4b 	bl	800301c <HAL_GetTick>
 8001186:	4603      	mov	r3, r0
 8001188:	623b      	str	r3, [r7, #32]

	GPIO_InitTypeDef GPIO_InitStruct;
	GPIO_InitStruct.Pin = GPIO_PIN_0;
 800118a:	2301      	movs	r3, #1
 800118c:	60fb      	str	r3, [r7, #12]
		/*Configure GPIO pin : */
		switch(pin)
 800118e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001192:	2b0f      	cmp	r3, #15
 8001194:	d85a      	bhi.n	800124c <deBounceReadPin+0xe8>
 8001196:	a201      	add	r2, pc, #4	; (adr r2, 800119c <deBounceReadPin+0x38>)
 8001198:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800119c:	080011dd 	.word	0x080011dd
 80011a0:	080011e3 	.word	0x080011e3
 80011a4:	080011e9 	.word	0x080011e9
 80011a8:	080011ef 	.word	0x080011ef
 80011ac:	080011f5 	.word	0x080011f5
 80011b0:	080011fb 	.word	0x080011fb
 80011b4:	08001201 	.word	0x08001201
 80011b8:	08001207 	.word	0x08001207
 80011bc:	0800120d 	.word	0x0800120d
 80011c0:	08001215 	.word	0x08001215
 80011c4:	0800121d 	.word	0x0800121d
 80011c8:	08001225 	.word	0x08001225
 80011cc:	0800122d 	.word	0x0800122d
 80011d0:	08001235 	.word	0x08001235
 80011d4:	0800123d 	.word	0x0800123d
 80011d8:	08001245 	.word	0x08001245
		{
			case 0: GPIO_InitStruct.Pin = GPIO_PIN_0; break;
 80011dc:	2301      	movs	r3, #1
 80011de:	60fb      	str	r3, [r7, #12]
 80011e0:	e038      	b.n	8001254 <deBounceReadPin+0xf0>
			case 1: GPIO_InitStruct.Pin = GPIO_PIN_1; break;
 80011e2:	2302      	movs	r3, #2
 80011e4:	60fb      	str	r3, [r7, #12]
 80011e6:	e035      	b.n	8001254 <deBounceReadPin+0xf0>
			case 2: GPIO_InitStruct.Pin = GPIO_PIN_2; break;
 80011e8:	2304      	movs	r3, #4
 80011ea:	60fb      	str	r3, [r7, #12]
 80011ec:	e032      	b.n	8001254 <deBounceReadPin+0xf0>
			case 3: GPIO_InitStruct.Pin = GPIO_PIN_3; break;
 80011ee:	2308      	movs	r3, #8
 80011f0:	60fb      	str	r3, [r7, #12]
 80011f2:	e02f      	b.n	8001254 <deBounceReadPin+0xf0>
			case 4: GPIO_InitStruct.Pin = GPIO_PIN_4; break;
 80011f4:	2310      	movs	r3, #16
 80011f6:	60fb      	str	r3, [r7, #12]
 80011f8:	e02c      	b.n	8001254 <deBounceReadPin+0xf0>
			case 5: GPIO_InitStruct.Pin = GPIO_PIN_5; break;
 80011fa:	2320      	movs	r3, #32
 80011fc:	60fb      	str	r3, [r7, #12]
 80011fe:	e029      	b.n	8001254 <deBounceReadPin+0xf0>
			case 6: GPIO_InitStruct.Pin = GPIO_PIN_6; break;
 8001200:	2340      	movs	r3, #64	; 0x40
 8001202:	60fb      	str	r3, [r7, #12]
 8001204:	e026      	b.n	8001254 <deBounceReadPin+0xf0>
			case 7: GPIO_InitStruct.Pin = GPIO_PIN_7; break;
 8001206:	2380      	movs	r3, #128	; 0x80
 8001208:	60fb      	str	r3, [r7, #12]
 800120a:	e023      	b.n	8001254 <deBounceReadPin+0xf0>
			case 8: GPIO_InitStruct.Pin = GPIO_PIN_8; break;
 800120c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001210:	60fb      	str	r3, [r7, #12]
 8001212:	e01f      	b.n	8001254 <deBounceReadPin+0xf0>
			case 9: GPIO_InitStruct.Pin = GPIO_PIN_9; break;
 8001214:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001218:	60fb      	str	r3, [r7, #12]
 800121a:	e01b      	b.n	8001254 <deBounceReadPin+0xf0>
			case 10: GPIO_InitStruct.Pin = GPIO_PIN_10; break;
 800121c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001220:	60fb      	str	r3, [r7, #12]
 8001222:	e017      	b.n	8001254 <deBounceReadPin+0xf0>
			case 11: GPIO_InitStruct.Pin = GPIO_PIN_11; break;
 8001224:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001228:	60fb      	str	r3, [r7, #12]
 800122a:	e013      	b.n	8001254 <deBounceReadPin+0xf0>
			case 12: GPIO_InitStruct.Pin = GPIO_PIN_12; break;
 800122c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001230:	60fb      	str	r3, [r7, #12]
 8001232:	e00f      	b.n	8001254 <deBounceReadPin+0xf0>
			case 13: GPIO_InitStruct.Pin = GPIO_PIN_13; break;
 8001234:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001238:	60fb      	str	r3, [r7, #12]
 800123a:	e00b      	b.n	8001254 <deBounceReadPin+0xf0>
			case 14: GPIO_InitStruct.Pin = GPIO_PIN_14; break;
 800123c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001240:	60fb      	str	r3, [r7, #12]
 8001242:	e007      	b.n	8001254 <deBounceReadPin+0xf0>
			case 15: GPIO_InitStruct.Pin = GPIO_PIN_15; break;
 8001244:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001248:	60fb      	str	r3, [r7, #12]
 800124a:	e003      	b.n	8001254 <deBounceReadPin+0xf0>
			default:
				printf( "bad gpio pin number in read pin\n\r");
 800124c:	4847      	ldr	r0, [pc, #284]	; (800136c <deBounceReadPin+0x208>)
 800124e:	f006 f913 	bl	8007478 <iprintf>
				break;
 8001252:	bf00      	nop
		}


	/* let's do our first read of the pin
	 * and to do that we need to incorporate the port we're going to read*/
	pinState = 0 ;
 8001254:	2300      	movs	r3, #0
 8001256:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	switch (port)
 800125a:	797b      	ldrb	r3, [r7, #5]
 800125c:	2b43      	cmp	r3, #67	; 0x43
 800125e:	d01b      	beq.n	8001298 <deBounceReadPin+0x134>
 8001260:	2b43      	cmp	r3, #67	; 0x43
 8001262:	dc23      	bgt.n	80012ac <deBounceReadPin+0x148>
 8001264:	2b41      	cmp	r3, #65	; 0x41
 8001266:	d002      	beq.n	800126e <deBounceReadPin+0x10a>
 8001268:	2b42      	cmp	r3, #66	; 0x42
 800126a:	d00b      	beq.n	8001284 <deBounceReadPin+0x120>
 800126c:	e01e      	b.n	80012ac <deBounceReadPin+0x148>
	{
		case 'A': pinState = HAL_GPIO_ReadPin(GPIOA, GPIO_InitStruct.Pin); break;
 800126e:	68fb      	ldr	r3, [r7, #12]
 8001270:	b29b      	uxth	r3, r3
 8001272:	4619      	mov	r1, r3
 8001274:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001278:	f002 f950 	bl	800351c <HAL_GPIO_ReadPin>
 800127c:	4603      	mov	r3, r0
 800127e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001282:	e017      	b.n	80012b4 <deBounceReadPin+0x150>
		case 'B': pinState = HAL_GPIO_ReadPin(GPIOB, GPIO_InitStruct.Pin); break;
 8001284:	68fb      	ldr	r3, [r7, #12]
 8001286:	b29b      	uxth	r3, r3
 8001288:	4619      	mov	r1, r3
 800128a:	4839      	ldr	r0, [pc, #228]	; (8001370 <deBounceReadPin+0x20c>)
 800128c:	f002 f946 	bl	800351c <HAL_GPIO_ReadPin>
 8001290:	4603      	mov	r3, r0
 8001292:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001296:	e00d      	b.n	80012b4 <deBounceReadPin+0x150>
		case 'C': pinState = HAL_GPIO_ReadPin(GPIOC, GPIO_InitStruct.Pin); break;
 8001298:	68fb      	ldr	r3, [r7, #12]
 800129a:	b29b      	uxth	r3, r3
 800129c:	4619      	mov	r1, r3
 800129e:	4835      	ldr	r0, [pc, #212]	; (8001374 <deBounceReadPin+0x210>)
 80012a0:	f002 f93c 	bl	800351c <HAL_GPIO_ReadPin>
 80012a4:	4603      	mov	r3, r0
 80012a6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80012aa:	e003      	b.n	80012b4 <deBounceReadPin+0x150>
		default:
			printf( "bad gpio port name in read pin\n\r");
 80012ac:	4832      	ldr	r0, [pc, #200]	; (8001378 <deBounceReadPin+0x214>)
 80012ae:	f006 f8e3 	bl	8007478 <iprintf>
			break;
 80012b2:	bf00      	nop
	}
	/* is the GPIO pin high or low 	 */
	if(pinState == GPIO_PIN_RESET )		// if low we're looking for more 0's
 80012b4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d103      	bne.n	80012c4 <deBounceReadPin+0x160>
	{
		pinStateWeAreLookingFor = 0;
 80012bc:	2300      	movs	r3, #0
 80012be:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80012c2:	e043      	b.n	800134c <deBounceReadPin+0x1e8>
	}
	else
	{//we're looking for more 1's
		pinStateWeAreLookingFor = 1;
 80012c4:	2301      	movs	r3, #1
 80012c6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	}

	/* now, let's read the pin again until x stable ms have elapsed */
	while (HAL_GetTick() < (msTimeStamp + stableInterval))
 80012ca:	e03f      	b.n	800134c <deBounceReadPin+0x1e8>
	{

		switch (port)
 80012cc:	797b      	ldrb	r3, [r7, #5]
 80012ce:	2b43      	cmp	r3, #67	; 0x43
 80012d0:	d01b      	beq.n	800130a <deBounceReadPin+0x1a6>
 80012d2:	2b43      	cmp	r3, #67	; 0x43
 80012d4:	dc23      	bgt.n	800131e <deBounceReadPin+0x1ba>
 80012d6:	2b41      	cmp	r3, #65	; 0x41
 80012d8:	d002      	beq.n	80012e0 <deBounceReadPin+0x17c>
 80012da:	2b42      	cmp	r3, #66	; 0x42
 80012dc:	d00b      	beq.n	80012f6 <deBounceReadPin+0x192>
 80012de:	e01e      	b.n	800131e <deBounceReadPin+0x1ba>
		{
			case 'A': pinState = HAL_GPIO_ReadPin(GPIOA, GPIO_InitStruct.Pin); break;
 80012e0:	68fb      	ldr	r3, [r7, #12]
 80012e2:	b29b      	uxth	r3, r3
 80012e4:	4619      	mov	r1, r3
 80012e6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80012ea:	f002 f917 	bl	800351c <HAL_GPIO_ReadPin>
 80012ee:	4603      	mov	r3, r0
 80012f0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80012f4:	e017      	b.n	8001326 <deBounceReadPin+0x1c2>
			case 'B': pinState = HAL_GPIO_ReadPin(GPIOB, GPIO_InitStruct.Pin); break;
 80012f6:	68fb      	ldr	r3, [r7, #12]
 80012f8:	b29b      	uxth	r3, r3
 80012fa:	4619      	mov	r1, r3
 80012fc:	481c      	ldr	r0, [pc, #112]	; (8001370 <deBounceReadPin+0x20c>)
 80012fe:	f002 f90d 	bl	800351c <HAL_GPIO_ReadPin>
 8001302:	4603      	mov	r3, r0
 8001304:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001308:	e00d      	b.n	8001326 <deBounceReadPin+0x1c2>
			case 'C': pinState = HAL_GPIO_ReadPin(GPIOC, GPIO_InitStruct.Pin); break;
 800130a:	68fb      	ldr	r3, [r7, #12]
 800130c:	b29b      	uxth	r3, r3
 800130e:	4619      	mov	r1, r3
 8001310:	4818      	ldr	r0, [pc, #96]	; (8001374 <deBounceReadPin+0x210>)
 8001312:	f002 f903 	bl	800351c <HAL_GPIO_ReadPin>
 8001316:	4603      	mov	r3, r0
 8001318:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800131c:	e003      	b.n	8001326 <deBounceReadPin+0x1c2>
			default:
				printf( "bad gpio port letter in read pin\n\r");
 800131e:	4817      	ldr	r0, [pc, #92]	; (800137c <deBounceReadPin+0x218>)
 8001320:	f006 f8aa 	bl	8007478 <iprintf>
				break;
 8001324:	bf00      	nop
		}
		if(pinState != pinStateWeAreLookingFor)
 8001326:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800132a:	f997 3026 	ldrsb.w	r3, [r7, #38]	; 0x26
 800132e:	429a      	cmp	r2, r3
 8001330:	d00c      	beq.n	800134c <deBounceReadPin+0x1e8>
		{
			pinStateWeAreLookingFor = !pinStateWeAreLookingFor;
 8001332:	f997 3026 	ldrsb.w	r3, [r7, #38]	; 0x26
 8001336:	2b00      	cmp	r3, #0
 8001338:	bf0c      	ite	eq
 800133a:	2301      	moveq	r3, #1
 800133c:	2300      	movne	r3, #0
 800133e:	b2db      	uxtb	r3, r3
 8001340:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
			/* reset the timeStamp as we've had a change in state			 */
			msTimeStamp = HAL_GetTick();
 8001344:	f001 fe6a 	bl	800301c <HAL_GetTick>
 8001348:	4603      	mov	r3, r0
 800134a:	623b      	str	r3, [r7, #32]
	while (HAL_GetTick() < (msTimeStamp + stableInterval))
 800134c:	f001 fe66 	bl	800301c <HAL_GetTick>
 8001350:	4601      	mov	r1, r0
 8001352:	f997 2004 	ldrsb.w	r2, [r7, #4]
 8001356:	6a3b      	ldr	r3, [r7, #32]
 8001358:	4413      	add	r3, r2
 800135a:	4299      	cmp	r1, r3
 800135c:	d3b6      	bcc.n	80012cc <deBounceReadPin+0x168>
		}
	}
	return (pinStateWeAreLookingFor);
 800135e:	f997 3026 	ldrsb.w	r3, [r7, #38]	; 0x26
}
 8001362:	4618      	mov	r0, r3
 8001364:	3728      	adds	r7, #40	; 0x28
 8001366:	46bd      	mov	sp, r7
 8001368:	bd80      	pop	{r7, pc}
 800136a:	bf00      	nop
 800136c:	0800bc38 	.word	0x0800bc38
 8001370:	48000400 	.word	0x48000400
 8001374:	48000800 	.word	0x48000800
 8001378:	0800bc5c 	.word	0x0800bc5c
 800137c:	0800bc80 	.word	0x0800bc80

08001380 <unitTest>:
void displayStrings(GPSDATA);
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void unitTest(void){
 8001380:	b580      	push	{r7, lr}
 8001382:	b0b6      	sub	sp, #216	; 0xd8
 8001384:	af00      	add	r7, sp, #0
  char testString[] = "$GPGGA,092750.000,5321.6802,N,00630.3372,W,1,8,1.03,61.7,M,55.2,M,,*76";
 8001386:	4a36      	ldr	r2, [pc, #216]	; (8001460 <unitTest+0xe0>)
 8001388:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800138c:	4611      	mov	r1, r2
 800138e:	2247      	movs	r2, #71	; 0x47
 8001390:	4618      	mov	r0, r3
 8001392:	f005 f901 	bl	8006598 <memcpy>
  char testString2[] = "$GPGGA,092751.000,5321.6802,N,00630.3371,W,1,8,1.03,61.7,M,55.3,M,,*75";
 8001396:	4a33      	ldr	r2, [pc, #204]	; (8001464 <unitTest+0xe4>)
 8001398:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800139c:	4611      	mov	r1, r2
 800139e:	2247      	movs	r2, #71	; 0x47
 80013a0:	4618      	mov	r0, r3
 80013a2:	f005 f8f9 	bl	8006598 <memcpy>
  char testString3[] = "$GPGGA,014729.10,4303.5753,N,08019.0810,W,1,6,1.761,214.682,M,0,M,0,*5D";
 80013a6:	4a30      	ldr	r2, [pc, #192]	; (8001468 <unitTest+0xe8>)
 80013a8:	463b      	mov	r3, r7
 80013aa:	4611      	mov	r1, r2
 80013ac:	2248      	movs	r2, #72	; 0x48
 80013ae:	4618      	mov	r0, r3
 80013b0:	f005 f8f2 	bl	8006598 <memcpy>
  uint8_t result = 0;
 80013b4:	2300      	movs	r3, #0
 80013b6:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  result = gpsParser(testString,(uint8_t)strlen(testString));
 80013ba:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80013be:	4618      	mov	r0, r3
 80013c0:	f7fe ff06 	bl	80001d0 <strlen>
 80013c4:	4603      	mov	r3, r0
 80013c6:	b2da      	uxtb	r2, r3
 80013c8:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80013cc:	4611      	mov	r1, r2
 80013ce:	4618      	mov	r0, r3
 80013d0:	f000 f858 	bl	8001484 <gpsParser>
 80013d4:	4603      	mov	r3, r0
 80013d6:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  if(result == 1){
 80013da:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
 80013de:	2b01      	cmp	r3, #1
 80013e0:	d103      	bne.n	80013ea <unitTest+0x6a>
    printf("\r\nTask 1 Case 1 was successful\r\n");
 80013e2:	4822      	ldr	r0, [pc, #136]	; (800146c <unitTest+0xec>)
 80013e4:	f006 f8ce 	bl	8007584 <puts>
 80013e8:	e002      	b.n	80013f0 <unitTest+0x70>
  }else{
    printf("\r\nTask 1 Case 1 was not successful\r\n");
 80013ea:	4821      	ldr	r0, [pc, #132]	; (8001470 <unitTest+0xf0>)
 80013ec:	f006 f8ca 	bl	8007584 <puts>
  }
  result = gpsParser(testString2,(uint8_t)strlen(testString2));
 80013f0:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80013f4:	4618      	mov	r0, r3
 80013f6:	f7fe feeb 	bl	80001d0 <strlen>
 80013fa:	4603      	mov	r3, r0
 80013fc:	b2da      	uxtb	r2, r3
 80013fe:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001402:	4611      	mov	r1, r2
 8001404:	4618      	mov	r0, r3
 8001406:	f000 f83d 	bl	8001484 <gpsParser>
 800140a:	4603      	mov	r3, r0
 800140c:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  if(result == 1){
 8001410:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
 8001414:	2b01      	cmp	r3, #1
 8001416:	d103      	bne.n	8001420 <unitTest+0xa0>
    printf("\r\nTask 1 Case 2 was successful\r\n");
 8001418:	4816      	ldr	r0, [pc, #88]	; (8001474 <unitTest+0xf4>)
 800141a:	f006 f8b3 	bl	8007584 <puts>
 800141e:	e002      	b.n	8001426 <unitTest+0xa6>
  }else{
    printf("\r\nTask 1 Case 2 was not successful\r\n");
 8001420:	4815      	ldr	r0, [pc, #84]	; (8001478 <unitTest+0xf8>)
 8001422:	f006 f8af 	bl	8007584 <puts>
  
  }
  result = gpsParser(testString3,(uint8_t)strlen(testString3));
 8001426:	463b      	mov	r3, r7
 8001428:	4618      	mov	r0, r3
 800142a:	f7fe fed1 	bl	80001d0 <strlen>
 800142e:	4603      	mov	r3, r0
 8001430:	b2da      	uxtb	r2, r3
 8001432:	463b      	mov	r3, r7
 8001434:	4611      	mov	r1, r2
 8001436:	4618      	mov	r0, r3
 8001438:	f000 f824 	bl	8001484 <gpsParser>
 800143c:	4603      	mov	r3, r0
 800143e:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  if(result == 1){
 8001442:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
 8001446:	2b01      	cmp	r3, #1
 8001448:	d103      	bne.n	8001452 <unitTest+0xd2>
    printf("\r\nTask 1 Case 3 was successful\r\n");
 800144a:	480c      	ldr	r0, [pc, #48]	; (800147c <unitTest+0xfc>)
 800144c:	f006 f89a 	bl	8007584 <puts>
  }else{
    printf("\r\nTask 1 Case 3 was not successful\r\n");
  }
}
 8001450:	e002      	b.n	8001458 <unitTest+0xd8>
    printf("\r\nTask 1 Case 3 was not successful\r\n");
 8001452:	480b      	ldr	r0, [pc, #44]	; (8001480 <unitTest+0x100>)
 8001454:	f006 f896 	bl	8007584 <puts>
}
 8001458:	bf00      	nop
 800145a:	37d8      	adds	r7, #216	; 0xd8
 800145c:	46bd      	mov	sp, r7
 800145e:	bd80      	pop	{r7, pc}
 8001460:	0800bd70 	.word	0x0800bd70
 8001464:	0800bdb8 	.word	0x0800bdb8
 8001468:	0800be00 	.word	0x0800be00
 800146c:	0800bca4 	.word	0x0800bca4
 8001470:	0800bcc4 	.word	0x0800bcc4
 8001474:	0800bce8 	.word	0x0800bce8
 8001478:	0800bd08 	.word	0x0800bd08
 800147c:	0800bd2c 	.word	0x0800bd2c
 8001480:	0800bd4c 	.word	0x0800bd4c

08001484 <gpsParser>:


uint8_t gpsParser(char *string,uint8_t len){
 8001484:	b5b0      	push	{r4, r5, r7, lr}
 8001486:	b0be      	sub	sp, #248	; 0xf8
 8001488:	af0e      	add	r7, sp, #56	; 0x38
 800148a:	6078      	str	r0, [r7, #4]
 800148c:	460b      	mov	r3, r1
 800148e:	70fb      	strb	r3, [r7, #3]
  int i = 0;   
 8001490:	2300      	movs	r3, #0
 8001492:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  while(*string != '\0'){
 8001496:	e083      	b.n	80015a0 <gpsParser+0x11c>
    if(*string == ','){
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	781b      	ldrb	r3, [r3, #0]
 800149c:	2b2c      	cmp	r3, #44	; 0x2c
 800149e:	d177      	bne.n	8001590 <gpsParser+0x10c>
      if(*++string == ','){
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	3301      	adds	r3, #1
 80014a4:	607b      	str	r3, [r7, #4]
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	781b      	ldrb	r3, [r3, #0]
 80014aa:	2b2c      	cmp	r3, #44	; 0x2c
 80014ac:	d16d      	bne.n	800158a <gpsParser+0x106>
        int j = 1;
 80014ae:	2301      	movs	r3, #1
 80014b0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
        char *tempString = malloc((len - i) * sizeof(char));
 80014b4:	78fa      	ldrb	r2, [r7, #3]
 80014b6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80014ba:	1ad3      	subs	r3, r2, r3
 80014bc:	4618      	mov	r0, r3
 80014be:	f005 f863 	bl	8006588 <malloc>
 80014c2:	4603      	mov	r3, r0
 80014c4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
        tempString[0] = 'X';
 80014c8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80014cc:	2258      	movs	r2, #88	; 0x58
 80014ce:	701a      	strb	r2, [r3, #0]
        while(*string != '\0'){
 80014d0:	e00e      	b.n	80014f0 <gpsParser+0x6c>
          tempString[j] = *string++;
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	1c5a      	adds	r2, r3, #1
 80014d6:	607a      	str	r2, [r7, #4]
 80014d8:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80014dc:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
 80014e0:	440a      	add	r2, r1
 80014e2:	781b      	ldrb	r3, [r3, #0]
 80014e4:	7013      	strb	r3, [r2, #0]
          j++;
 80014e6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80014ea:	3301      	adds	r3, #1
 80014ec:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
        while(*string != '\0'){
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	781b      	ldrb	r3, [r3, #0]
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d1ec      	bne.n	80014d2 <gpsParser+0x4e>
        }
        tempString[j] = '\0';
 80014f8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80014fc:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8001500:	4413      	add	r3, r2
 8001502:	2200      	movs	r2, #0
 8001504:	701a      	strb	r2, [r3, #0]
        for(int k = 0; k < j;k++){
 8001506:	2300      	movs	r3, #0
 8001508:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800150c:	e007      	b.n	800151e <gpsParser+0x9a>
          string--;
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	3b01      	subs	r3, #1
 8001512:	607b      	str	r3, [r7, #4]
        for(int k = 0; k < j;k++){
 8001514:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8001518:	3301      	adds	r3, #1
 800151a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800151e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8001522:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8001526:	429a      	cmp	r2, r3
 8001528:	dbf1      	blt.n	800150e <gpsParser+0x8a>
        }
        while(*tempString != '\0'){
 800152a:	e00a      	b.n	8001542 <gpsParser+0xbe>
          string++;
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	3301      	adds	r3, #1
 8001530:	607b      	str	r3, [r7, #4]
          *string = *tempString++;
 8001532:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001536:	1c5a      	adds	r2, r3, #1
 8001538:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
 800153c:	781a      	ldrb	r2, [r3, #0]
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	701a      	strb	r2, [r3, #0]
        while(*tempString != '\0'){
 8001542:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001546:	781b      	ldrb	r3, [r3, #0]
 8001548:	2b00      	cmp	r3, #0
 800154a:	d1ef      	bne.n	800152c <gpsParser+0xa8>
        }
        string++;
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	3301      	adds	r3, #1
 8001550:	607b      	str	r3, [r7, #4]
        *string = NULL;
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	2200      	movs	r2, #0
 8001556:	701a      	strb	r2, [r3, #0]
        for(int k = 0; k < j;k++){
 8001558:	2300      	movs	r3, #0
 800155a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800155e:	e007      	b.n	8001570 <gpsParser+0xec>
          string--;
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	3b01      	subs	r3, #1
 8001564:	607b      	str	r3, [r7, #4]
        for(int k = 0; k < j;k++){
 8001566:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800156a:	3301      	adds	r3, #1
 800156c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8001570:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8001574:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8001578:	429a      	cmp	r2, r3
 800157a:	dbf1      	blt.n	8001560 <gpsParser+0xdc>
        }
        string--;
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	3b01      	subs	r3, #1
 8001580:	607b      	str	r3, [r7, #4]
        len++;
 8001582:	78fb      	ldrb	r3, [r7, #3]
 8001584:	3301      	adds	r3, #1
 8001586:	70fb      	strb	r3, [r7, #3]
 8001588:	e002      	b.n	8001590 <gpsParser+0x10c>
      }else{
        string--;
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	3b01      	subs	r3, #1
 800158e:	607b      	str	r3, [r7, #4]
      }
    }
    string++;
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	3301      	adds	r3, #1
 8001594:	607b      	str	r3, [r7, #4]
    i++;
 8001596:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800159a:	3301      	adds	r3, #1
 800159c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  while(*string != '\0'){
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	781b      	ldrb	r3, [r3, #0]
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	f47f af77 	bne.w	8001498 <gpsParser+0x14>
  }
  for(int k = 0; k < i; k++){
 80015aa:	2300      	movs	r3, #0
 80015ac:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80015b0:	e007      	b.n	80015c2 <gpsParser+0x13e>
    string--;
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	3b01      	subs	r3, #1
 80015b6:	607b      	str	r3, [r7, #4]
  for(int k = 0; k < i; k++){
 80015b8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80015bc:	3301      	adds	r3, #1
 80015be:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80015c2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80015c6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80015ca:	429a      	cmp	r2, r3
 80015cc:	dbf1      	blt.n	80015b2 <gpsParser+0x12e>
  }
  char* token = strtok(string, ","); 
 80015ce:	49c9      	ldr	r1, [pc, #804]	; (80018f4 <gpsParser+0x470>)
 80015d0:	6878      	ldr	r0, [r7, #4]
 80015d2:	f006 fe95 	bl	8008300 <strtok>
 80015d6:	f8c7 00a4 	str.w	r0, [r7, #164]	; 0xa4
  GPSDATA gpsdata;
  for(int i = 0;i<6;i++){
 80015da:	2300      	movs	r3, #0
 80015dc:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80015e0:	e011      	b.n	8001606 <gpsParser+0x182>
    gpsdata.sentenceID[i] = *token++;
 80015e2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80015e6:	1c5a      	adds	r2, r3, #1
 80015e8:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80015ec:	7819      	ldrb	r1, [r3, #0]
 80015ee:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 80015f2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80015f6:	4413      	add	r3, r2
 80015f8:	460a      	mov	r2, r1
 80015fa:	701a      	strb	r2, [r3, #0]
  for(int i = 0;i<6;i++){
 80015fc:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001600:	3301      	adds	r3, #1
 8001602:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8001606:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800160a:	2b05      	cmp	r3, #5
 800160c:	dde9      	ble.n	80015e2 <gpsParser+0x15e>
  }
  gpsdata.sentenceID[7] = NULL;
 800160e:	2300      	movs	r3, #0
 8001610:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  token = strtok(NULL,",");
 8001614:	49b7      	ldr	r1, [pc, #732]	; (80018f4 <gpsParser+0x470>)
 8001616:	2000      	movs	r0, #0
 8001618:	f006 fe72 	bl	8008300 <strtok>
 800161c:	f8c7 00a4 	str.w	r0, [r7, #164]	; 0xa4
  UTCTime utctime;
  char * utctimeString = malloc(10 * sizeof(char));
 8001620:	200a      	movs	r0, #10
 8001622:	f004 ffb1 	bl	8006588 <malloc>
 8001626:	4603      	mov	r3, r0
 8001628:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  utctimeString = token;
 800162c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001630:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  token = strtok(NULL,",");
 8001634:	49af      	ldr	r1, [pc, #700]	; (80018f4 <gpsParser+0x470>)
 8001636:	2000      	movs	r0, #0
 8001638:	f006 fe62 	bl	8008300 <strtok>
 800163c:	f8c7 00a4 	str.w	r0, [r7, #164]	; 0xa4
  for(int i = 0; i < 2; i++){
 8001640:	2300      	movs	r3, #0
 8001642:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8001646:	e011      	b.n	800166c <gpsParser+0x1e8>
    utctime.hh[i] = *utctimeString++;
 8001648:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800164c:	1c5a      	adds	r2, r3, #1
 800164e:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8001652:	7819      	ldrb	r1, [r3, #0]
 8001654:	f107 0220 	add.w	r2, r7, #32
 8001658:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800165c:	4413      	add	r3, r2
 800165e:	460a      	mov	r2, r1
 8001660:	701a      	strb	r2, [r3, #0]
  for(int i = 0; i < 2; i++){
 8001662:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001666:	3301      	adds	r3, #1
 8001668:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800166c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001670:	2b01      	cmp	r3, #1
 8001672:	dde9      	ble.n	8001648 <gpsParser+0x1c4>
  }
  utctime.hh[2] = '\0';
 8001674:	2300      	movs	r3, #0
 8001676:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  for(int i = 0; i < 2; i++){
 800167a:	2300      	movs	r3, #0
 800167c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8001680:	e011      	b.n	80016a6 <gpsParser+0x222>
    utctime.mm[i] = *utctimeString++;
 8001682:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001686:	1c5a      	adds	r2, r3, #1
 8001688:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 800168c:	7819      	ldrb	r1, [r3, #0]
 800168e:	f107 0223 	add.w	r2, r7, #35	; 0x23
 8001692:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001696:	4413      	add	r3, r2
 8001698:	460a      	mov	r2, r1
 800169a:	701a      	strb	r2, [r3, #0]
  for(int i = 0; i < 2; i++){
 800169c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80016a0:	3301      	adds	r3, #1
 80016a2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80016a6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80016aa:	2b01      	cmp	r3, #1
 80016ac:	dde9      	ble.n	8001682 <gpsParser+0x1fe>
  }
  utctime.mm[2] = '\0';
 80016ae:	2300      	movs	r3, #0
 80016b0:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  i = 0;
 80016b4:	2300      	movs	r3, #0
 80016b6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  while(*utctimeString != '\0'){
 80016ba:	e011      	b.n	80016e0 <gpsParser+0x25c>
    utctime.ss[i] = *utctimeString++;
 80016bc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80016c0:	1c5a      	adds	r2, r3, #1
 80016c2:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 80016c6:	7819      	ldrb	r1, [r3, #0]
 80016c8:	f107 0226 	add.w	r2, r7, #38	; 0x26
 80016cc:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80016d0:	4413      	add	r3, r2
 80016d2:	460a      	mov	r2, r1
 80016d4:	701a      	strb	r2, [r3, #0]
    i++;
 80016d6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80016da:	3301      	adds	r3, #1
 80016dc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  while(*utctimeString != '\0'){
 80016e0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80016e4:	781b      	ldrb	r3, [r3, #0]
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d1e8      	bne.n	80016bc <gpsParser+0x238>
  }
  for(;i<5;i++){
 80016ea:	e00b      	b.n	8001704 <gpsParser+0x280>
    utctime.ss[i] = '0';
 80016ec:	f107 0226 	add.w	r2, r7, #38	; 0x26
 80016f0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80016f4:	4413      	add	r3, r2
 80016f6:	2230      	movs	r2, #48	; 0x30
 80016f8:	701a      	strb	r2, [r3, #0]
  for(;i<5;i++){
 80016fa:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80016fe:	3301      	adds	r3, #1
 8001700:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8001704:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001708:	2b04      	cmp	r3, #4
 800170a:	ddef      	ble.n	80016ec <gpsParser+0x268>
  }
  gpsdata.utcTime = utctime;
 800170c:	f107 0233 	add.w	r2, r7, #51	; 0x33
 8001710:	f107 0320 	add.w	r3, r7, #32
 8001714:	cb03      	ldmia	r3!, {r0, r1}
 8001716:	6010      	str	r0, [r2, #0]
 8001718:	6051      	str	r1, [r2, #4]
 800171a:	8819      	ldrh	r1, [r3, #0]
 800171c:	789b      	ldrb	r3, [r3, #2]
 800171e:	8111      	strh	r1, [r2, #8]
 8001720:	7293      	strb	r3, [r2, #10]
  char* latitudeString = malloc(11 * sizeof(char));
 8001722:	200b      	movs	r0, #11
 8001724:	f004 ff30 	bl	8006588 <malloc>
 8001728:	4603      	mov	r3, r0
 800172a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  latitudeString = token;
 800172e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001732:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  token = strtok(NULL,",");
 8001736:	496f      	ldr	r1, [pc, #444]	; (80018f4 <gpsParser+0x470>)
 8001738:	2000      	movs	r0, #0
 800173a:	f006 fde1 	bl	8008300 <strtok>
 800173e:	f8c7 00a4 	str.w	r0, [r7, #164]	; 0xa4
  Latitude latitude;
  for(int i = 0; i < 2; i++){
 8001742:	2300      	movs	r3, #0
 8001744:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8001748:	e011      	b.n	800176e <gpsParser+0x2ea>
    latitude.degrees[i] = *latitudeString++;
 800174a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800174e:	1c5a      	adds	r2, r3, #1
 8001750:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 8001754:	7819      	ldrb	r1, [r3, #0]
 8001756:	f107 0214 	add.w	r2, r7, #20
 800175a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800175e:	4413      	add	r3, r2
 8001760:	460a      	mov	r2, r1
 8001762:	701a      	strb	r2, [r3, #0]
  for(int i = 0; i < 2; i++){
 8001764:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001768:	3301      	adds	r3, #1
 800176a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800176e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001772:	2b01      	cmp	r3, #1
 8001774:	dde9      	ble.n	800174a <gpsParser+0x2c6>
  }
  latitude.degrees[2] = '\0';
 8001776:	2300      	movs	r3, #0
 8001778:	75bb      	strb	r3, [r7, #22]
  for(int i = 0; i < 2; i++){
 800177a:	2300      	movs	r3, #0
 800177c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8001780:	e011      	b.n	80017a6 <gpsParser+0x322>
    latitude.minutes[i] = *latitudeString++;
 8001782:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001786:	1c5a      	adds	r2, r3, #1
 8001788:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 800178c:	7819      	ldrb	r1, [r3, #0]
 800178e:	f107 0217 	add.w	r2, r7, #23
 8001792:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001796:	4413      	add	r3, r2
 8001798:	460a      	mov	r2, r1
 800179a:	701a      	strb	r2, [r3, #0]
  for(int i = 0; i < 2; i++){
 800179c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80017a0:	3301      	adds	r3, #1
 80017a2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80017a6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80017aa:	2b01      	cmp	r3, #1
 80017ac:	dde9      	ble.n	8001782 <gpsParser+0x2fe>
  }
  latitude.minutes[2] = '\0';
 80017ae:	2300      	movs	r3, #0
 80017b0:	767b      	strb	r3, [r7, #25]
  i = 0;
 80017b2:	2300      	movs	r3, #0
 80017b4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  while(*latitudeString != '\0'){
 80017b8:	e011      	b.n	80017de <gpsParser+0x35a>
    latitude.decimalDegrees[i] = *latitudeString++;
 80017ba:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80017be:	1c5a      	adds	r2, r3, #1
 80017c0:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 80017c4:	7819      	ldrb	r1, [r3, #0]
 80017c6:	f107 021a 	add.w	r2, r7, #26
 80017ca:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80017ce:	4413      	add	r3, r2
 80017d0:	460a      	mov	r2, r1
 80017d2:	701a      	strb	r2, [r3, #0]
    i++;
 80017d4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80017d8:	3301      	adds	r3, #1
 80017da:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  while(*latitudeString != '\0'){
 80017de:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80017e2:	781b      	ldrb	r3, [r3, #0]
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d1e8      	bne.n	80017ba <gpsParser+0x336>
  }
  for(;i<5;i++){
 80017e8:	e00b      	b.n	8001802 <gpsParser+0x37e>
    latitude.decimalDegrees[i] = '0';
 80017ea:	f107 021a 	add.w	r2, r7, #26
 80017ee:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80017f2:	4413      	add	r3, r2
 80017f4:	2230      	movs	r2, #48	; 0x30
 80017f6:	701a      	strb	r2, [r3, #0]
  for(;i<5;i++){
 80017f8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80017fc:	3301      	adds	r3, #1
 80017fe:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8001802:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001806:	2b04      	cmp	r3, #4
 8001808:	ddef      	ble.n	80017ea <gpsParser+0x366>
  } 
  gpsdata.latitude = latitude;
 800180a:	f107 023e 	add.w	r2, r7, #62	; 0x3e
 800180e:	f107 0314 	add.w	r3, r7, #20
 8001812:	cb03      	ldmia	r3!, {r0, r1}
 8001814:	6010      	str	r0, [r2, #0]
 8001816:	6051      	str	r1, [r2, #4]
 8001818:	8819      	ldrh	r1, [r3, #0]
 800181a:	789b      	ldrb	r3, [r3, #2]
 800181c:	8111      	strh	r1, [r2, #8]
 800181e:	7293      	strb	r3, [r2, #10]
  gpsdata.latitudeMeasure = *token;
 8001820:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001824:	781b      	ldrb	r3, [r3, #0]
 8001826:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  token = strtok(NULL,",");
 800182a:	4932      	ldr	r1, [pc, #200]	; (80018f4 <gpsParser+0x470>)
 800182c:	2000      	movs	r0, #0
 800182e:	f006 fd67 	bl	8008300 <strtok>
 8001832:	f8c7 00a4 	str.w	r0, [r7, #164]	; 0xa4
  Longitude longitude;
  char* longitudeString = malloc(12 * sizeof(char));
 8001836:	200c      	movs	r0, #12
 8001838:	f004 fea6 	bl	8006588 <malloc>
 800183c:	4603      	mov	r3, r0
 800183e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  longitudeString = token;
 8001842:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001846:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  token = strtok(NULL,",");
 800184a:	492a      	ldr	r1, [pc, #168]	; (80018f4 <gpsParser+0x470>)
 800184c:	2000      	movs	r0, #0
 800184e:	f006 fd57 	bl	8008300 <strtok>
 8001852:	f8c7 00a4 	str.w	r0, [r7, #164]	; 0xa4
  for(int i = 0; i < 3;i++){
 8001856:	2300      	movs	r3, #0
 8001858:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800185c:	e011      	b.n	8001882 <gpsParser+0x3fe>
    longitude.degrees[i] = *longitudeString++;
 800185e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001862:	1c5a      	adds	r2, r3, #1
 8001864:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8001868:	7819      	ldrb	r1, [r3, #0]
 800186a:	f107 0208 	add.w	r2, r7, #8
 800186e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001872:	4413      	add	r3, r2
 8001874:	460a      	mov	r2, r1
 8001876:	701a      	strb	r2, [r3, #0]
  for(int i = 0; i < 3;i++){
 8001878:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800187c:	3301      	adds	r3, #1
 800187e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8001882:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001886:	2b02      	cmp	r3, #2
 8001888:	dde9      	ble.n	800185e <gpsParser+0x3da>
  }
  longitude.degrees[3] = '\0';
 800188a:	2300      	movs	r3, #0
 800188c:	72fb      	strb	r3, [r7, #11]
  for(int i = 0; i < 2; i++){
 800188e:	2300      	movs	r3, #0
 8001890:	67fb      	str	r3, [r7, #124]	; 0x7c
 8001892:	e00e      	b.n	80018b2 <gpsParser+0x42e>
    longitude.minutes[i] = *longitudeString++;
 8001894:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001898:	1c5a      	adds	r2, r3, #1
 800189a:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 800189e:	7819      	ldrb	r1, [r3, #0]
 80018a0:	f107 020c 	add.w	r2, r7, #12
 80018a4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80018a6:	4413      	add	r3, r2
 80018a8:	460a      	mov	r2, r1
 80018aa:	701a      	strb	r2, [r3, #0]
  for(int i = 0; i < 2; i++){
 80018ac:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80018ae:	3301      	adds	r3, #1
 80018b0:	67fb      	str	r3, [r7, #124]	; 0x7c
 80018b2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80018b4:	2b01      	cmp	r3, #1
 80018b6:	dded      	ble.n	8001894 <gpsParser+0x410>
  }
  longitude.minutes[2] = '\0';
 80018b8:	2300      	movs	r3, #0
 80018ba:	73bb      	strb	r3, [r7, #14]
  i = 0;
 80018bc:	2300      	movs	r3, #0
 80018be:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  while(*longitudeString != '\0'){
 80018c2:	e011      	b.n	80018e8 <gpsParser+0x464>
    longitude.decimalDegrees[i] = *longitudeString++;
 80018c4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80018c8:	1c5a      	adds	r2, r3, #1
 80018ca:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 80018ce:	7819      	ldrb	r1, [r3, #0]
 80018d0:	f107 020f 	add.w	r2, r7, #15
 80018d4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80018d8:	4413      	add	r3, r2
 80018da:	460a      	mov	r2, r1
 80018dc:	701a      	strb	r2, [r3, #0]
    i++;
 80018de:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80018e2:	3301      	adds	r3, #1
 80018e4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  while(*longitudeString != '\0'){
 80018e8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80018ec:	781b      	ldrb	r3, [r3, #0]
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d1e8      	bne.n	80018c4 <gpsParser+0x440>
  }
  for(;i<5;i++){
 80018f2:	e00d      	b.n	8001910 <gpsParser+0x48c>
 80018f4:	0800be48 	.word	0x0800be48
    longitude.decimalDegrees[i] = '0';
 80018f8:	f107 020f 	add.w	r2, r7, #15
 80018fc:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001900:	4413      	add	r3, r2
 8001902:	2230      	movs	r2, #48	; 0x30
 8001904:	701a      	strb	r2, [r3, #0]
  for(;i<5;i++){
 8001906:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800190a:	3301      	adds	r3, #1
 800190c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8001910:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001914:	2b04      	cmp	r3, #4
 8001916:	ddef      	ble.n	80018f8 <gpsParser+0x474>
  }
  gpsdata.longitude = longitude;
 8001918:	f107 044a 	add.w	r4, r7, #74	; 0x4a
 800191c:	f107 0308 	add.w	r3, r7, #8
 8001920:	cb07      	ldmia	r3!, {r0, r1, r2}
 8001922:	6020      	str	r0, [r4, #0]
 8001924:	6061      	str	r1, [r4, #4]
 8001926:	60a2      	str	r2, [r4, #8]
  gpsdata.longitudeMeasure = *token;
 8001928:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800192c:	781b      	ldrb	r3, [r3, #0]
 800192e:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
  token = strtok(NULL,",");
 8001932:	498c      	ldr	r1, [pc, #560]	; (8001b64 <gpsParser+0x6e0>)
 8001934:	2000      	movs	r0, #0
 8001936:	f006 fce3 	bl	8008300 <strtok>
 800193a:	f8c7 00a4 	str.w	r0, [r7, #164]	; 0xa4
  gpsdata.positionFix = *token;
 800193e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001942:	781b      	ldrb	r3, [r3, #0]
 8001944:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
  token = strtok(NULL,",");
 8001948:	4986      	ldr	r1, [pc, #536]	; (8001b64 <gpsParser+0x6e0>)
 800194a:	2000      	movs	r0, #0
 800194c:	f006 fcd8 	bl	8008300 <strtok>
 8001950:	f8c7 00a4 	str.w	r0, [r7, #164]	; 0xa4
  gpsdata.satellitesUsed[0] = *token;
 8001954:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001958:	781b      	ldrb	r3, [r3, #0]
 800195a:	f887 3058 	strb.w	r3, [r7, #88]	; 0x58
  gpsdata.satellitesUsed[1] = '\0';
 800195e:	2300      	movs	r3, #0
 8001960:	f887 3059 	strb.w	r3, [r7, #89]	; 0x59
  token = strtok(NULL,",");
 8001964:	497f      	ldr	r1, [pc, #508]	; (8001b64 <gpsParser+0x6e0>)
 8001966:	2000      	movs	r0, #0
 8001968:	f006 fcca 	bl	8008300 <strtok>
 800196c:	f8c7 00a4 	str.w	r0, [r7, #164]	; 0xa4
  char* horizontalDilutionOfPrecisionString = malloc(7 * sizeof(char));
 8001970:	2007      	movs	r0, #7
 8001972:	f004 fe09 	bl	8006588 <malloc>
 8001976:	4603      	mov	r3, r0
 8001978:	67bb      	str	r3, [r7, #120]	; 0x78
  horizontalDilutionOfPrecisionString = token;
 800197a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800197e:	67bb      	str	r3, [r7, #120]	; 0x78
  token = strtok(NULL,",");
 8001980:	4978      	ldr	r1, [pc, #480]	; (8001b64 <gpsParser+0x6e0>)
 8001982:	2000      	movs	r0, #0
 8001984:	f006 fcbc 	bl	8008300 <strtok>
 8001988:	f8c7 00a4 	str.w	r0, [r7, #164]	; 0xa4
  i = 0;
 800198c:	2300      	movs	r3, #0
 800198e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  while(*horizontalDilutionOfPrecisionString != '\0'){
 8001992:	e00f      	b.n	80019b4 <gpsParser+0x530>
    gpsdata.horizontalDilutionOfPrecision[i] = *horizontalDilutionOfPrecisionString++;
 8001994:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001996:	1c5a      	adds	r2, r3, #1
 8001998:	67ba      	str	r2, [r7, #120]	; 0x78
 800199a:	7819      	ldrb	r1, [r3, #0]
 800199c:	f107 025a 	add.w	r2, r7, #90	; 0x5a
 80019a0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80019a4:	4413      	add	r3, r2
 80019a6:	460a      	mov	r2, r1
 80019a8:	701a      	strb	r2, [r3, #0]
    i++;
 80019aa:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80019ae:	3301      	adds	r3, #1
 80019b0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  while(*horizontalDilutionOfPrecisionString != '\0'){
 80019b4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80019b6:	781b      	ldrb	r3, [r3, #0]
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d1eb      	bne.n	8001994 <gpsParser+0x510>
  }
  for(;i < 6;i++){
 80019bc:	e00b      	b.n	80019d6 <gpsParser+0x552>
    gpsdata.horizontalDilutionOfPrecision[i] = '0';
 80019be:	f107 025a 	add.w	r2, r7, #90	; 0x5a
 80019c2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80019c6:	4413      	add	r3, r2
 80019c8:	2230      	movs	r2, #48	; 0x30
 80019ca:	701a      	strb	r2, [r3, #0]
  for(;i < 6;i++){
 80019cc:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80019d0:	3301      	adds	r3, #1
 80019d2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80019d6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80019da:	2b05      	cmp	r3, #5
 80019dc:	ddef      	ble.n	80019be <gpsParser+0x53a>
  }
  gpsdata.horizontalDilutionOfPrecision[7] = '\0';
 80019de:	2300      	movs	r3, #0
 80019e0:	f887 3061 	strb.w	r3, [r7, #97]	; 0x61
  char* altitudeString = malloc(8 * sizeof(char));
 80019e4:	2008      	movs	r0, #8
 80019e6:	f004 fdcf 	bl	8006588 <malloc>
 80019ea:	4603      	mov	r3, r0
 80019ec:	677b      	str	r3, [r7, #116]	; 0x74
  altitudeString = token;
 80019ee:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80019f2:	677b      	str	r3, [r7, #116]	; 0x74
  token = strtok(NULL,",");
 80019f4:	495b      	ldr	r1, [pc, #364]	; (8001b64 <gpsParser+0x6e0>)
 80019f6:	2000      	movs	r0, #0
 80019f8:	f006 fc82 	bl	8008300 <strtok>
 80019fc:	f8c7 00a4 	str.w	r0, [r7, #164]	; 0xa4
  i = 0;
 8001a00:	2300      	movs	r3, #0
 8001a02:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  while(*altitudeString != '\0'){
 8001a06:	e00f      	b.n	8001a28 <gpsParser+0x5a4>
    gpsdata.altitude[i] = *altitudeString++;
 8001a08:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001a0a:	1c5a      	adds	r2, r3, #1
 8001a0c:	677a      	str	r2, [r7, #116]	; 0x74
 8001a0e:	7819      	ldrb	r1, [r3, #0]
 8001a10:	f107 0261 	add.w	r2, r7, #97	; 0x61
 8001a14:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001a18:	4413      	add	r3, r2
 8001a1a:	460a      	mov	r2, r1
 8001a1c:	701a      	strb	r2, [r3, #0]
    i++;
 8001a1e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001a22:	3301      	adds	r3, #1
 8001a24:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  while(*altitudeString != '\0'){
 8001a28:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001a2a:	781b      	ldrb	r3, [r3, #0]
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d1eb      	bne.n	8001a08 <gpsParser+0x584>
  }
  for(;i<7;i++){
 8001a30:	e00b      	b.n	8001a4a <gpsParser+0x5c6>
    gpsdata.altitude[i] = '0';
 8001a32:	f107 0261 	add.w	r2, r7, #97	; 0x61
 8001a36:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001a3a:	4413      	add	r3, r2
 8001a3c:	2230      	movs	r2, #48	; 0x30
 8001a3e:	701a      	strb	r2, [r3, #0]
  for(;i<7;i++){
 8001a40:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001a44:	3301      	adds	r3, #1
 8001a46:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8001a4a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001a4e:	2b06      	cmp	r3, #6
 8001a50:	ddef      	ble.n	8001a32 <gpsParser+0x5ae>
  }
  gpsdata.altitudeUnits = *token;
 8001a52:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001a56:	781b      	ldrb	r3, [r3, #0]
 8001a58:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
  token = strtok(NULL,",");
 8001a5c:	4941      	ldr	r1, [pc, #260]	; (8001b64 <gpsParser+0x6e0>)
 8001a5e:	2000      	movs	r0, #0
 8001a60:	f006 fc4e 	bl	8008300 <strtok>
 8001a64:	f8c7 00a4 	str.w	r0, [r7, #164]	; 0xa4
  gpsdata.geoidSeperation = *token;
 8001a68:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001a6c:	781b      	ldrb	r3, [r3, #0]
 8001a6e:	f887 3069 	strb.w	r3, [r7, #105]	; 0x69
  token = strtok(NULL,",");
 8001a72:	493c      	ldr	r1, [pc, #240]	; (8001b64 <gpsParser+0x6e0>)
 8001a74:	2000      	movs	r0, #0
 8001a76:	f006 fc43 	bl	8008300 <strtok>
 8001a7a:	f8c7 00a4 	str.w	r0, [r7, #164]	; 0xa4
  gpsdata.inMeters = *token;
 8001a7e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001a82:	781b      	ldrb	r3, [r3, #0]
 8001a84:	f887 306a 	strb.w	r3, [r7, #106]	; 0x6a
  token = strtok(NULL,",");
 8001a88:	4936      	ldr	r1, [pc, #216]	; (8001b64 <gpsParser+0x6e0>)
 8001a8a:	2000      	movs	r0, #0
 8001a8c:	f006 fc38 	bl	8008300 <strtok>
 8001a90:	f8c7 00a4 	str.w	r0, [r7, #164]	; 0xa4
  gpsdata.ageOfDGPSDataInSeconds = *token;
 8001a94:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001a98:	781b      	ldrb	r3, [r3, #0]
 8001a9a:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
  token = strtok(NULL,",");
 8001a9e:	4931      	ldr	r1, [pc, #196]	; (8001b64 <gpsParser+0x6e0>)
 8001aa0:	2000      	movs	r0, #0
 8001aa2:	f006 fc2d 	bl	8008300 <strtok>
 8001aa6:	f8c7 00a4 	str.w	r0, [r7, #164]	; 0xa4
  char * checkSumString = malloc(5 * sizeof(char));
 8001aaa:	2005      	movs	r0, #5
 8001aac:	f004 fd6c 	bl	8006588 <malloc>
 8001ab0:	4603      	mov	r3, r0
 8001ab2:	673b      	str	r3, [r7, #112]	; 0x70
  checkSumString = token;
 8001ab4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001ab8:	673b      	str	r3, [r7, #112]	; 0x70
  token = strtok(NULL,",");
 8001aba:	492a      	ldr	r1, [pc, #168]	; (8001b64 <gpsParser+0x6e0>)
 8001abc:	2000      	movs	r0, #0
 8001abe:	f006 fc1f 	bl	8008300 <strtok>
 8001ac2:	f8c7 00a4 	str.w	r0, [r7, #164]	; 0xa4
  i = 0;
 8001ac6:	2300      	movs	r3, #0
 8001ac8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  if(*checkSumString == '*'){
 8001acc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001ace:	781b      	ldrb	r3, [r3, #0]
 8001ad0:	2b2a      	cmp	r3, #42	; 0x2a
 8001ad2:	d113      	bne.n	8001afc <gpsParser+0x678>
    checkSumString++;
 8001ad4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001ad6:	3301      	adds	r3, #1
 8001ad8:	673b      	str	r3, [r7, #112]	; 0x70
  }
  while(*checkSumString != '\0'){
 8001ada:	e00f      	b.n	8001afc <gpsParser+0x678>
    gpsdata.checkSum[i] = *checkSumString++;
 8001adc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001ade:	1c5a      	adds	r2, r3, #1
 8001ae0:	673a      	str	r2, [r7, #112]	; 0x70
 8001ae2:	7819      	ldrb	r1, [r3, #0]
 8001ae4:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 8001ae8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001aec:	4413      	add	r3, r2
 8001aee:	460a      	mov	r2, r1
 8001af0:	701a      	strb	r2, [r3, #0]
    i++;
 8001af2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001af6:	3301      	adds	r3, #1
 8001af8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  while(*checkSumString != '\0'){
 8001afc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001afe:	781b      	ldrb	r3, [r3, #0]
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d1eb      	bne.n	8001adc <gpsParser+0x658>
  }
  for(;i<4;i++){
 8001b04:	e00b      	b.n	8001b1e <gpsParser+0x69a>
    gpsdata.checkSum[i] = NULL;
 8001b06:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 8001b0a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001b0e:	4413      	add	r3, r2
 8001b10:	2200      	movs	r2, #0
 8001b12:	701a      	strb	r2, [r3, #0]
  for(;i<4;i++){
 8001b14:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001b18:	3301      	adds	r3, #1
 8001b1a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8001b1e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001b22:	2b03      	cmp	r3, #3
 8001b24:	ddef      	ble.n	8001b06 <gpsParser+0x682>
  }
  if(token != '\0'){
 8001b26:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d004      	beq.n	8001b38 <gpsParser+0x6b4>
    printf("Token has not bee fully allocated!");
 8001b2e:	480e      	ldr	r0, [pc, #56]	; (8001b68 <gpsParser+0x6e4>)
 8001b30:	f005 fca2 	bl	8007478 <iprintf>
    return 0;
 8001b34:	2300      	movs	r3, #0
 8001b36:	e010      	b.n	8001b5a <gpsParser+0x6d6>
  }
  displayStrings(gpsdata);
 8001b38:	466d      	mov	r5, sp
 8001b3a:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 8001b3e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001b40:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001b42:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001b44:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001b46:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001b48:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001b4a:	6823      	ldr	r3, [r4, #0]
 8001b4c:	602b      	str	r3, [r5, #0]
 8001b4e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001b52:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001b54:	f000 f80a 	bl	8001b6c <displayStrings>
  return 1;
 8001b58:	2301      	movs	r3, #1
}
 8001b5a:	4618      	mov	r0, r3
 8001b5c:	37c0      	adds	r7, #192	; 0xc0
 8001b5e:	46bd      	mov	sp, r7
 8001b60:	bdb0      	pop	{r4, r5, r7, pc}
 8001b62:	bf00      	nop
 8001b64:	0800be48 	.word	0x0800be48
 8001b68:	0800be4c 	.word	0x0800be4c

08001b6c <displayStrings>:


void displayStrings(GPSDATA gpsdata){
 8001b6c:	b084      	sub	sp, #16
 8001b6e:	b5b0      	push	{r4, r5, r7, lr}
 8001b70:	f5ad 7d6e 	sub.w	sp, sp, #952	; 0x3b8
 8001b74:	af04      	add	r7, sp, #16
 8001b76:	f507 746e 	add.w	r4, r7, #952	; 0x3b8
 8001b7a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  char sentenceIdString[20];
  char* sentenceID = gpsdata.sentenceID;
 8001b7e:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 8001b82:	f8c7 33a0 	str.w	r3, [r7, #928]	; 0x3a0
  snprintf(sentenceIdString,20,"Sentence ID: %s",sentenceID);
 8001b86:	f507 7062 	add.w	r0, r7, #904	; 0x388
 8001b8a:	f8d7 33a0 	ldr.w	r3, [r7, #928]	; 0x3a0
 8001b8e:	4ad5      	ldr	r2, [pc, #852]	; (8001ee4 <displayStrings+0x378>)
 8001b90:	2114      	movs	r1, #20
 8001b92:	f005 fd2d 	bl	80075f0 <sniprintf>
  char utcTimeString[64];
  snprintf(utcTimeString,64,"UTC Time: %d hr %d min %f sec",
 8001b96:	f207 33bf 	addw	r3, r7, #959	; 0x3bf
 8001b9a:	4618      	mov	r0, r3
 8001b9c:	f004 fcc6 	bl	800652c <atoi>
 8001ba0:	4605      	mov	r5, r0
 8001ba2:	f207 33c2 	addw	r3, r7, #962	; 0x3c2
 8001ba6:	4618      	mov	r0, r3
 8001ba8:	f004 fcc0 	bl	800652c <atoi>
 8001bac:	4604      	mov	r4, r0
 8001bae:	f207 33c5 	addw	r3, r7, #965	; 0x3c5
 8001bb2:	4618      	mov	r0, r3
 8001bb4:	f004 fcb7 	bl	8006526 <atof>
 8001bb8:	eeb0 7a40 	vmov.f32	s14, s0
 8001bbc:	eef0 7a60 	vmov.f32	s15, s1
 8001bc0:	f507 7052 	add.w	r0, r7, #840	; 0x348
 8001bc4:	ed8d 7b02 	vstr	d7, [sp, #8]
 8001bc8:	9400      	str	r4, [sp, #0]
 8001bca:	462b      	mov	r3, r5
 8001bcc:	4ac6      	ldr	r2, [pc, #792]	; (8001ee8 <displayStrings+0x37c>)
 8001bce:	2140      	movs	r1, #64	; 0x40
 8001bd0:	f005 fd0e 	bl	80075f0 <sniprintf>
           atoi(gpsdata.utcTime.hh),
           atoi(gpsdata.utcTime.mm),
           atof(gpsdata.utcTime.ss));
  char latitudeString[64];
  snprintf(latitudeString,64,"Latitude: %d degrees %d minutes %f decimal degrees",
 8001bd4:	f207 33ca 	addw	r3, r7, #970	; 0x3ca
 8001bd8:	4618      	mov	r0, r3
 8001bda:	f004 fca7 	bl	800652c <atoi>
 8001bde:	4605      	mov	r5, r0
 8001be0:	f207 33cd 	addw	r3, r7, #973	; 0x3cd
 8001be4:	4618      	mov	r0, r3
 8001be6:	f004 fca1 	bl	800652c <atoi>
 8001bea:	4604      	mov	r4, r0
 8001bec:	f507 7374 	add.w	r3, r7, #976	; 0x3d0
 8001bf0:	4618      	mov	r0, r3
 8001bf2:	f004 fc98 	bl	8006526 <atof>
 8001bf6:	eeb0 7a40 	vmov.f32	s14, s0
 8001bfa:	eef0 7a60 	vmov.f32	s15, s1
 8001bfe:	f507 7042 	add.w	r0, r7, #776	; 0x308
 8001c02:	ed8d 7b02 	vstr	d7, [sp, #8]
 8001c06:	9400      	str	r4, [sp, #0]
 8001c08:	462b      	mov	r3, r5
 8001c0a:	4ab8      	ldr	r2, [pc, #736]	; (8001eec <displayStrings+0x380>)
 8001c0c:	2140      	movs	r1, #64	; 0x40
 8001c0e:	f005 fcef 	bl	80075f0 <sniprintf>
           atoi(gpsdata.latitude.degrees),
           atoi(gpsdata.latitude.minutes),
           atof(gpsdata.latitude.decimalDegrees));
  char latitudeMeasureString[64];
  if(gpsdata.latitudeMeasure == 'N'){
 8001c12:	f897 33d5 	ldrb.w	r3, [r7, #981]	; 0x3d5
 8001c16:	2b4e      	cmp	r3, #78	; 0x4e
 8001c18:	d107      	bne.n	8001c2a <displayStrings+0xbe>
    snprintf(latitudeMeasureString,64,"Latitude: measured is North of the equator");
 8001c1a:	f507 7332 	add.w	r3, r7, #712	; 0x2c8
 8001c1e:	4ab4      	ldr	r2, [pc, #720]	; (8001ef0 <displayStrings+0x384>)
 8001c20:	2140      	movs	r1, #64	; 0x40
 8001c22:	4618      	mov	r0, r3
 8001c24:	f005 fce4 	bl	80075f0 <sniprintf>
 8001c28:	e006      	b.n	8001c38 <displayStrings+0xcc>
  }else{
    snprintf(latitudeMeasureString,64,"Latitude: measured is South of the equator");
 8001c2a:	f507 7332 	add.w	r3, r7, #712	; 0x2c8
 8001c2e:	4ab1      	ldr	r2, [pc, #708]	; (8001ef4 <displayStrings+0x388>)
 8001c30:	2140      	movs	r1, #64	; 0x40
 8001c32:	4618      	mov	r0, r3
 8001c34:	f005 fcdc 	bl	80075f0 <sniprintf>
  }
  char longitudeString[64];
  snprintf(longitudeString,64,"Longitude: %d degrees %d minutes %f decimal degrees",
 8001c38:	f207 33d6 	addw	r3, r7, #982	; 0x3d6
 8001c3c:	4618      	mov	r0, r3
 8001c3e:	f004 fc75 	bl	800652c <atoi>
 8001c42:	4605      	mov	r5, r0
 8001c44:	f207 33da 	addw	r3, r7, #986	; 0x3da
 8001c48:	4618      	mov	r0, r3
 8001c4a:	f004 fc6f 	bl	800652c <atoi>
 8001c4e:	4604      	mov	r4, r0
 8001c50:	f207 33dd 	addw	r3, r7, #989	; 0x3dd
 8001c54:	4618      	mov	r0, r3
 8001c56:	f004 fc66 	bl	8006526 <atof>
 8001c5a:	eeb0 7a40 	vmov.f32	s14, s0
 8001c5e:	eef0 7a60 	vmov.f32	s15, s1
 8001c62:	f507 7022 	add.w	r0, r7, #648	; 0x288
 8001c66:	ed8d 7b02 	vstr	d7, [sp, #8]
 8001c6a:	9400      	str	r4, [sp, #0]
 8001c6c:	462b      	mov	r3, r5
 8001c6e:	4aa2      	ldr	r2, [pc, #648]	; (8001ef8 <displayStrings+0x38c>)
 8001c70:	2140      	movs	r1, #64	; 0x40
 8001c72:	f005 fcbd 	bl	80075f0 <sniprintf>
            atoi(gpsdata.longitude.degrees),
            atoi(gpsdata.longitude.minutes),
            atof(gpsdata.longitude.decimalDegrees));
  char longitudeMeasureString[64];
  if(gpsdata.longitudeMeasure == 'W'){
 8001c76:	f897 33e2 	ldrb.w	r3, [r7, #994]	; 0x3e2
 8001c7a:	2b57      	cmp	r3, #87	; 0x57
 8001c7c:	d107      	bne.n	8001c8e <displayStrings+0x122>
    snprintf(longitudeMeasureString,64,"Longitude: measured is West of Greenwich England");
 8001c7e:	f507 7312 	add.w	r3, r7, #584	; 0x248
 8001c82:	4a9e      	ldr	r2, [pc, #632]	; (8001efc <displayStrings+0x390>)
 8001c84:	2140      	movs	r1, #64	; 0x40
 8001c86:	4618      	mov	r0, r3
 8001c88:	f005 fcb2 	bl	80075f0 <sniprintf>
 8001c8c:	e006      	b.n	8001c9c <displayStrings+0x130>
  }else{
    snprintf(longitudeMeasureString,64,"Longitude: measured is East of Greenwich England");
 8001c8e:	f507 7312 	add.w	r3, r7, #584	; 0x248
 8001c92:	4a9b      	ldr	r2, [pc, #620]	; (8001f00 <displayStrings+0x394>)
 8001c94:	2140      	movs	r1, #64	; 0x40
 8001c96:	4618      	mov	r0, r3
 8001c98:	f005 fcaa 	bl	80075f0 <sniprintf>
  }
  char positionFixString[64];
  if(gpsdata.positionFix == '0'){
 8001c9c:	f897 33e3 	ldrb.w	r3, [r7, #995]	; 0x3e3
 8001ca0:	2b30      	cmp	r3, #48	; 0x30
 8001ca2:	d107      	bne.n	8001cb4 <displayStrings+0x148>
    snprintf(positionFixString,64,"Position Fix: Invalid");
 8001ca4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001ca8:	4a96      	ldr	r2, [pc, #600]	; (8001f04 <displayStrings+0x398>)
 8001caa:	2140      	movs	r1, #64	; 0x40
 8001cac:	4618      	mov	r0, r3
 8001cae:	f005 fc9f 	bl	80075f0 <sniprintf>
 8001cb2:	e022      	b.n	8001cfa <displayStrings+0x18e>
  }else if(gpsdata.positionFix == '1'){
 8001cb4:	f897 33e3 	ldrb.w	r3, [r7, #995]	; 0x3e3
 8001cb8:	2b31      	cmp	r3, #49	; 0x31
 8001cba:	d107      	bne.n	8001ccc <displayStrings+0x160>
    snprintf(positionFixString,64,"Position Fix: Valid SPS");
 8001cbc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001cc0:	4a91      	ldr	r2, [pc, #580]	; (8001f08 <displayStrings+0x39c>)
 8001cc2:	2140      	movs	r1, #64	; 0x40
 8001cc4:	4618      	mov	r0, r3
 8001cc6:	f005 fc93 	bl	80075f0 <sniprintf>
 8001cca:	e016      	b.n	8001cfa <displayStrings+0x18e>
  }else if(gpsdata.positionFix == '2'){
 8001ccc:	f897 33e3 	ldrb.w	r3, [r7, #995]	; 0x3e3
 8001cd0:	2b32      	cmp	r3, #50	; 0x32
 8001cd2:	d107      	bne.n	8001ce4 <displayStrings+0x178>
    snprintf(positionFixString,64,"Position Fix: Valid DGPS");
 8001cd4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001cd8:	4a8c      	ldr	r2, [pc, #560]	; (8001f0c <displayStrings+0x3a0>)
 8001cda:	2140      	movs	r1, #64	; 0x40
 8001cdc:	4618      	mov	r0, r3
 8001cde:	f005 fc87 	bl	80075f0 <sniprintf>
 8001ce2:	e00a      	b.n	8001cfa <displayStrings+0x18e>
  }else if(gpsdata.positionFix == '3'){
 8001ce4:	f897 33e3 	ldrb.w	r3, [r7, #995]	; 0x3e3
 8001ce8:	2b33      	cmp	r3, #51	; 0x33
 8001cea:	d106      	bne.n	8001cfa <displayStrings+0x18e>
    snprintf(positionFixString,64,"Position Fix: Valid PPS");
 8001cec:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001cf0:	4a87      	ldr	r2, [pc, #540]	; (8001f10 <displayStrings+0x3a4>)
 8001cf2:	2140      	movs	r1, #64	; 0x40
 8001cf4:	4618      	mov	r0, r3
 8001cf6:	f005 fc7b 	bl	80075f0 <sniprintf>
  }
  char satellitesUsedString[64];
  snprintf(satellitesUsedString,64,"Satellites Used: %d", atoi(&gpsdata.satellitesUsed));
 8001cfa:	f507 7379 	add.w	r3, r7, #996	; 0x3e4
 8001cfe:	4618      	mov	r0, r3
 8001d00:	f004 fc14 	bl	800652c <atoi>
 8001d04:	4603      	mov	r3, r0
 8001d06:	f507 70e4 	add.w	r0, r7, #456	; 0x1c8
 8001d0a:	4a82      	ldr	r2, [pc, #520]	; (8001f14 <displayStrings+0x3a8>)
 8001d0c:	2140      	movs	r1, #64	; 0x40
 8001d0e:	f005 fc6f 	bl	80075f0 <sniprintf>
  char horizontalDilutionOfPrecisionString[64];
  snprintf(horizontalDilutionOfPrecisionString,64,"HDOP 38466 Horizontal dilution of precision %f",atof(gpsdata.horizontalDilutionOfPrecision));
 8001d12:	f207 33e6 	addw	r3, r7, #998	; 0x3e6
 8001d16:	4618      	mov	r0, r3
 8001d18:	f004 fc05 	bl	8006526 <atof>
 8001d1c:	eeb0 7a40 	vmov.f32	s14, s0
 8001d20:	eef0 7a60 	vmov.f32	s15, s1
 8001d24:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 8001d28:	ed8d 7b00 	vstr	d7, [sp]
 8001d2c:	4a7a      	ldr	r2, [pc, #488]	; (8001f18 <displayStrings+0x3ac>)
 8001d2e:	2140      	movs	r1, #64	; 0x40
 8001d30:	4618      	mov	r0, r3
 8001d32:	f005 fc5d 	bl	80075f0 <sniprintf>
  char altitudeString[68];
  snprintf(altitudeString,68,"Altitude in meters according to WGS-84 ellipsoid %f meters",atof(gpsdata.altitude));
 8001d36:	f207 33ed 	addw	r3, r7, #1005	; 0x3ed
 8001d3a:	4618      	mov	r0, r3
 8001d3c:	f004 fbf3 	bl	8006526 <atof>
 8001d40:	eeb0 7a40 	vmov.f32	s14, s0
 8001d44:	eef0 7a60 	vmov.f32	s15, s1
 8001d48:	f507 73a2 	add.w	r3, r7, #324	; 0x144
 8001d4c:	ed8d 7b00 	vstr	d7, [sp]
 8001d50:	4a72      	ldr	r2, [pc, #456]	; (8001f1c <displayStrings+0x3b0>)
 8001d52:	2144      	movs	r1, #68	; 0x44
 8001d54:	4618      	mov	r0, r3
 8001d56:	f005 fc4b 	bl	80075f0 <sniprintf>
  char altitudeUnitsString[64];
  snprintf(altitudeUnitsString,64,"Altitude Units: M = Meters");
 8001d5a:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8001d5e:	4a70      	ldr	r2, [pc, #448]	; (8001f20 <displayStrings+0x3b4>)
 8001d60:	2140      	movs	r1, #64	; 0x40
 8001d62:	4618      	mov	r0, r3
 8001d64:	f005 fc44 	bl	80075f0 <sniprintf>
  char geoidSeperationString[64];
  snprintf(geoidSeperationString,64,"Geoid Seperation %d",atoi(&gpsdata.geoidSeperation));
 8001d68:	f207 33f5 	addw	r3, r7, #1013	; 0x3f5
 8001d6c:	4618      	mov	r0, r3
 8001d6e:	f004 fbdd 	bl	800652c <atoi>
 8001d72:	4603      	mov	r3, r0
 8001d74:	f107 00c4 	add.w	r0, r7, #196	; 0xc4
 8001d78:	4a6a      	ldr	r2, [pc, #424]	; (8001f24 <displayStrings+0x3b8>)
 8001d7a:	2140      	movs	r1, #64	; 0x40
 8001d7c:	f005 fc38 	bl	80075f0 <sniprintf>
  char inMetersString[64];
  snprintf(inMetersString,64,"In Meters %c",gpsdata.inMeters);
 8001d80:	f897 33f6 	ldrb.w	r3, [r7, #1014]	; 0x3f6
 8001d84:	f107 0084 	add.w	r0, r7, #132	; 0x84
 8001d88:	4a67      	ldr	r2, [pc, #412]	; (8001f28 <displayStrings+0x3bc>)
 8001d8a:	2140      	movs	r1, #64	; 0x40
 8001d8c:	f005 fc30 	bl	80075f0 <sniprintf>
  char dgpsAgeString[64];
  if(gpsdata.ageOfDGPSDataInSeconds == 'X'){
 8001d90:	f897 33f7 	ldrb.w	r3, [r7, #1015]	; 0x3f7
 8001d94:	2b58      	cmp	r3, #88	; 0x58
 8001d96:	d107      	bne.n	8001da8 <displayStrings+0x23c>
    snprintf(dgpsAgeString,64,"DGPS Age: %d Age of DGPS data in seconds",0);
 8001d98:	f107 0044 	add.w	r0, r7, #68	; 0x44
 8001d9c:	2300      	movs	r3, #0
 8001d9e:	4a63      	ldr	r2, [pc, #396]	; (8001f2c <displayStrings+0x3c0>)
 8001da0:	2140      	movs	r1, #64	; 0x40
 8001da2:	f005 fc25 	bl	80075f0 <sniprintf>
 8001da6:	e00b      	b.n	8001dc0 <displayStrings+0x254>
  }else{
    snprintf(dgpsAgeString,64,"DGPS Age: %d Age of DGPS data in seconds",
 8001da8:	f207 33f7 	addw	r3, r7, #1015	; 0x3f7
 8001dac:	4618      	mov	r0, r3
 8001dae:	f004 fbbd 	bl	800652c <atoi>
 8001db2:	4603      	mov	r3, r0
 8001db4:	f107 0044 	add.w	r0, r7, #68	; 0x44
 8001db8:	4a5c      	ldr	r2, [pc, #368]	; (8001f2c <displayStrings+0x3c0>)
 8001dba:	2140      	movs	r1, #64	; 0x40
 8001dbc:	f005 fc18 	bl	80075f0 <sniprintf>
           atoi(&gpsdata.ageOfDGPSDataInSeconds));
  }
  char checkSumString[64];
  char *ptr;
  long checkSum = strtoul(gpsdata.checkSum,&ptr,10);
 8001dc0:	4639      	mov	r1, r7
 8001dc2:	f507 737e 	add.w	r3, r7, #1016	; 0x3f8
 8001dc6:	220a      	movs	r2, #10
 8001dc8:	4618      	mov	r0, r3
 8001dca:	f006 fbf7 	bl	80085bc <strtoul>
 8001dce:	4603      	mov	r3, r0
 8001dd0:	f8c7 339c 	str.w	r3, [r7, #924]	; 0x39c
  snprintf(checkSumString,64,"Checksum: = %lu",checkSum);
 8001dd4:	1d38      	adds	r0, r7, #4
 8001dd6:	f8d7 339c 	ldr.w	r3, [r7, #924]	; 0x39c
 8001dda:	4a55      	ldr	r2, [pc, #340]	; (8001f30 <displayStrings+0x3c4>)
 8001ddc:	2140      	movs	r1, #64	; 0x40
 8001dde:	f005 fc07 	bl	80075f0 <sniprintf>
  uint8_t continueFlag = 1;
 8001de2:	2301      	movs	r3, #1
 8001de4:	f887 33a7 	strb.w	r3, [r7, #935]	; 0x3a7
  uint8_t state = 0;
 8001de8:	2300      	movs	r3, #0
 8001dea:	f887 33a6 	strb.w	r3, [r7, #934]	; 0x3a6
  while(continueFlag){
 8001dee:	e1e1      	b.n	80021b4 <displayStrings+0x648>
    if(deBounceReadPin(pushPin,'A',10) == 0){
 8001df0:	2300      	movs	r3, #0
 8001df2:	220a      	movs	r2, #10
 8001df4:	2141      	movs	r1, #65	; 0x41
 8001df6:	4618      	mov	r0, r3
 8001df8:	f7ff f9b4 	bl	8001164 <deBounceReadPin>
 8001dfc:	4603      	mov	r3, r0
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	f040 81d8 	bne.w	80021b4 <displayStrings+0x648>
      HAL_Delay(100);
 8001e04:	2064      	movs	r0, #100	; 0x64
 8001e06:	f001 f915 	bl	8003034 <HAL_Delay>
    if(state == 0){
 8001e0a:	f897 33a6 	ldrb.w	r3, [r7, #934]	; 0x3a6
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d116      	bne.n	8001e40 <displayStrings+0x2d4>
      printf("%s\r\n",sentenceIdString);
 8001e12:	f507 7362 	add.w	r3, r7, #904	; 0x388
 8001e16:	4619      	mov	r1, r3
 8001e18:	4846      	ldr	r0, [pc, #280]	; (8001f34 <displayStrings+0x3c8>)
 8001e1a:	f005 fb2d 	bl	8007478 <iprintf>
      ssd1331_clear_screen(BLACK);
 8001e1e:	2000      	movs	r0, #0
 8001e20:	f000 fd61 	bl	80028e6 <ssd1331_clear_screen>
      ssd1331_display_string(0,10,sentenceIdString,FONT_1206,WHITE);
 8001e24:	f507 7262 	add.w	r2, r7, #904	; 0x388
 8001e28:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001e2c:	9300      	str	r3, [sp, #0]
 8001e2e:	230c      	movs	r3, #12
 8001e30:	210a      	movs	r1, #10
 8001e32:	2000      	movs	r0, #0
 8001e34:	f000 fd0e 	bl	8002854 <ssd1331_display_string>
      state = 1;
 8001e38:	2301      	movs	r3, #1
 8001e3a:	f887 33a6 	strb.w	r3, [r7, #934]	; 0x3a6
      continue;
 8001e3e:	e1b9      	b.n	80021b4 <displayStrings+0x648>
    	}
      if(state == 1){
 8001e40:	f897 33a6 	ldrb.w	r3, [r7, #934]	; 0x3a6
 8001e44:	2b01      	cmp	r3, #1
 8001e46:	d116      	bne.n	8001e76 <displayStrings+0x30a>
        printf("%s\r\n",utcTimeString);
 8001e48:	f507 7352 	add.w	r3, r7, #840	; 0x348
 8001e4c:	4619      	mov	r1, r3
 8001e4e:	4839      	ldr	r0, [pc, #228]	; (8001f34 <displayStrings+0x3c8>)
 8001e50:	f005 fb12 	bl	8007478 <iprintf>
        ssd1331_clear_screen(BLACK);
 8001e54:	2000      	movs	r0, #0
 8001e56:	f000 fd46 	bl	80028e6 <ssd1331_clear_screen>
        ssd1331_display_string(0,10,utcTimeString,FONT_1206,WHITE);
 8001e5a:	f507 7252 	add.w	r2, r7, #840	; 0x348
 8001e5e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001e62:	9300      	str	r3, [sp, #0]
 8001e64:	230c      	movs	r3, #12
 8001e66:	210a      	movs	r1, #10
 8001e68:	2000      	movs	r0, #0
 8001e6a:	f000 fcf3 	bl	8002854 <ssd1331_display_string>
        state = 2;
 8001e6e:	2302      	movs	r3, #2
 8001e70:	f887 33a6 	strb.w	r3, [r7, #934]	; 0x3a6
        continue;
 8001e74:	e19e      	b.n	80021b4 <displayStrings+0x648>
      }
        if(state == 2){
 8001e76:	f897 33a6 	ldrb.w	r3, [r7, #934]	; 0x3a6
 8001e7a:	2b02      	cmp	r3, #2
 8001e7c:	d116      	bne.n	8001eac <displayStrings+0x340>
          printf("%s\r\n",latitudeString);
 8001e7e:	f507 7342 	add.w	r3, r7, #776	; 0x308
 8001e82:	4619      	mov	r1, r3
 8001e84:	482b      	ldr	r0, [pc, #172]	; (8001f34 <displayStrings+0x3c8>)
 8001e86:	f005 faf7 	bl	8007478 <iprintf>
          ssd1331_clear_screen(BLACK);
 8001e8a:	2000      	movs	r0, #0
 8001e8c:	f000 fd2b 	bl	80028e6 <ssd1331_clear_screen>
          ssd1331_display_string(0,10,latitudeString,FONT_1206,WHITE);
 8001e90:	f507 7242 	add.w	r2, r7, #776	; 0x308
 8001e94:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001e98:	9300      	str	r3, [sp, #0]
 8001e9a:	230c      	movs	r3, #12
 8001e9c:	210a      	movs	r1, #10
 8001e9e:	2000      	movs	r0, #0
 8001ea0:	f000 fcd8 	bl	8002854 <ssd1331_display_string>
          state = 3;
 8001ea4:	2303      	movs	r3, #3
 8001ea6:	f887 33a6 	strb.w	r3, [r7, #934]	; 0x3a6
          continue;
 8001eaa:	e183      	b.n	80021b4 <displayStrings+0x648>
        }
          if(state == 3){
 8001eac:	f897 33a6 	ldrb.w	r3, [r7, #934]	; 0x3a6
 8001eb0:	2b03      	cmp	r3, #3
 8001eb2:	d141      	bne.n	8001f38 <displayStrings+0x3cc>
            printf("%s\r\n",latitudeMeasureString);
 8001eb4:	f507 7332 	add.w	r3, r7, #712	; 0x2c8
 8001eb8:	4619      	mov	r1, r3
 8001eba:	481e      	ldr	r0, [pc, #120]	; (8001f34 <displayStrings+0x3c8>)
 8001ebc:	f005 fadc 	bl	8007478 <iprintf>
            ssd1331_clear_screen(BLACK);
 8001ec0:	2000      	movs	r0, #0
 8001ec2:	f000 fd10 	bl	80028e6 <ssd1331_clear_screen>
            ssd1331_display_string(0,10,latitudeMeasureString,FONT_1206,WHITE);
 8001ec6:	f507 7232 	add.w	r2, r7, #712	; 0x2c8
 8001eca:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001ece:	9300      	str	r3, [sp, #0]
 8001ed0:	230c      	movs	r3, #12
 8001ed2:	210a      	movs	r1, #10
 8001ed4:	2000      	movs	r0, #0
 8001ed6:	f000 fcbd 	bl	8002854 <ssd1331_display_string>
            state = 4;
 8001eda:	2304      	movs	r3, #4
 8001edc:	f887 33a6 	strb.w	r3, [r7, #934]	; 0x3a6
            continue;
 8001ee0:	e168      	b.n	80021b4 <displayStrings+0x648>
 8001ee2:	bf00      	nop
 8001ee4:	0800be70 	.word	0x0800be70
 8001ee8:	0800be80 	.word	0x0800be80
 8001eec:	0800bea0 	.word	0x0800bea0
 8001ef0:	0800bed4 	.word	0x0800bed4
 8001ef4:	0800bf00 	.word	0x0800bf00
 8001ef8:	0800bf2c 	.word	0x0800bf2c
 8001efc:	0800bf60 	.word	0x0800bf60
 8001f00:	0800bf94 	.word	0x0800bf94
 8001f04:	0800bfc8 	.word	0x0800bfc8
 8001f08:	0800bfe0 	.word	0x0800bfe0
 8001f0c:	0800bff8 	.word	0x0800bff8
 8001f10:	0800c014 	.word	0x0800c014
 8001f14:	0800c02c 	.word	0x0800c02c
 8001f18:	0800c040 	.word	0x0800c040
 8001f1c:	0800c070 	.word	0x0800c070
 8001f20:	0800c0ac 	.word	0x0800c0ac
 8001f24:	0800c0c8 	.word	0x0800c0c8
 8001f28:	0800c0dc 	.word	0x0800c0dc
 8001f2c:	0800c0ec 	.word	0x0800c0ec
 8001f30:	0800c118 	.word	0x0800c118
 8001f34:	0800c128 	.word	0x0800c128
          }
            if(state == 4){
 8001f38:	f897 33a6 	ldrb.w	r3, [r7, #934]	; 0x3a6
 8001f3c:	2b04      	cmp	r3, #4
 8001f3e:	d116      	bne.n	8001f6e <displayStrings+0x402>
              printf("%s\r\n",longitudeString);
 8001f40:	f507 7322 	add.w	r3, r7, #648	; 0x288
 8001f44:	4619      	mov	r1, r3
 8001f46:	48a2      	ldr	r0, [pc, #648]	; (80021d0 <displayStrings+0x664>)
 8001f48:	f005 fa96 	bl	8007478 <iprintf>
              ssd1331_clear_screen(BLACK);
 8001f4c:	2000      	movs	r0, #0
 8001f4e:	f000 fcca 	bl	80028e6 <ssd1331_clear_screen>
              ssd1331_display_string(0,10,longitudeString,FONT_1206,WHITE);
 8001f52:	f507 7222 	add.w	r2, r7, #648	; 0x288
 8001f56:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001f5a:	9300      	str	r3, [sp, #0]
 8001f5c:	230c      	movs	r3, #12
 8001f5e:	210a      	movs	r1, #10
 8001f60:	2000      	movs	r0, #0
 8001f62:	f000 fc77 	bl	8002854 <ssd1331_display_string>
              state = 5;
 8001f66:	2305      	movs	r3, #5
 8001f68:	f887 33a6 	strb.w	r3, [r7, #934]	; 0x3a6
              continue;
 8001f6c:	e122      	b.n	80021b4 <displayStrings+0x648>
            }
              if(state == 5){
 8001f6e:	f897 33a6 	ldrb.w	r3, [r7, #934]	; 0x3a6
 8001f72:	2b05      	cmp	r3, #5
 8001f74:	d116      	bne.n	8001fa4 <displayStrings+0x438>
                printf("%s\r\n",longitudeMeasureString);
 8001f76:	f507 7312 	add.w	r3, r7, #584	; 0x248
 8001f7a:	4619      	mov	r1, r3
 8001f7c:	4894      	ldr	r0, [pc, #592]	; (80021d0 <displayStrings+0x664>)
 8001f7e:	f005 fa7b 	bl	8007478 <iprintf>
                ssd1331_clear_screen(BLACK);
 8001f82:	2000      	movs	r0, #0
 8001f84:	f000 fcaf 	bl	80028e6 <ssd1331_clear_screen>
                ssd1331_display_string(0,10,longitudeMeasureString,FONT_1206,WHITE);
 8001f88:	f507 7212 	add.w	r2, r7, #584	; 0x248
 8001f8c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001f90:	9300      	str	r3, [sp, #0]
 8001f92:	230c      	movs	r3, #12
 8001f94:	210a      	movs	r1, #10
 8001f96:	2000      	movs	r0, #0
 8001f98:	f000 fc5c 	bl	8002854 <ssd1331_display_string>
                state = 6;
 8001f9c:	2306      	movs	r3, #6
 8001f9e:	f887 33a6 	strb.w	r3, [r7, #934]	; 0x3a6
                continue;
 8001fa2:	e107      	b.n	80021b4 <displayStrings+0x648>
              }
                if(state == 6){
 8001fa4:	f897 33a6 	ldrb.w	r3, [r7, #934]	; 0x3a6
 8001fa8:	2b06      	cmp	r3, #6
 8001faa:	d116      	bne.n	8001fda <displayStrings+0x46e>
                  printf("%s\r\n",positionFixString);
 8001fac:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001fb0:	4619      	mov	r1, r3
 8001fb2:	4887      	ldr	r0, [pc, #540]	; (80021d0 <displayStrings+0x664>)
 8001fb4:	f005 fa60 	bl	8007478 <iprintf>
                  ssd1331_clear_screen(BLACK);
 8001fb8:	2000      	movs	r0, #0
 8001fba:	f000 fc94 	bl	80028e6 <ssd1331_clear_screen>
                  ssd1331_display_string(0,10,positionFixString,FONT_1206,WHITE);
 8001fbe:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001fc2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001fc6:	9300      	str	r3, [sp, #0]
 8001fc8:	230c      	movs	r3, #12
 8001fca:	210a      	movs	r1, #10
 8001fcc:	2000      	movs	r0, #0
 8001fce:	f000 fc41 	bl	8002854 <ssd1331_display_string>
                  state = 7;
 8001fd2:	2307      	movs	r3, #7
 8001fd4:	f887 33a6 	strb.w	r3, [r7, #934]	; 0x3a6
                  continue;
 8001fd8:	e0ec      	b.n	80021b4 <displayStrings+0x648>
                }
                  if(state == 7){
 8001fda:	f897 33a6 	ldrb.w	r3, [r7, #934]	; 0x3a6
 8001fde:	2b07      	cmp	r3, #7
 8001fe0:	d116      	bne.n	8002010 <displayStrings+0x4a4>
                    printf("%s\r\n",satellitesUsedString);
 8001fe2:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8001fe6:	4619      	mov	r1, r3
 8001fe8:	4879      	ldr	r0, [pc, #484]	; (80021d0 <displayStrings+0x664>)
 8001fea:	f005 fa45 	bl	8007478 <iprintf>
                    ssd1331_clear_screen(BLACK);
 8001fee:	2000      	movs	r0, #0
 8001ff0:	f000 fc79 	bl	80028e6 <ssd1331_clear_screen>
                    ssd1331_display_string(0,10,satellitesUsedString,FONT_1206,WHITE);
 8001ff4:	f507 72e4 	add.w	r2, r7, #456	; 0x1c8
 8001ff8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001ffc:	9300      	str	r3, [sp, #0]
 8001ffe:	230c      	movs	r3, #12
 8002000:	210a      	movs	r1, #10
 8002002:	2000      	movs	r0, #0
 8002004:	f000 fc26 	bl	8002854 <ssd1331_display_string>
                    state = 8;
 8002008:	2308      	movs	r3, #8
 800200a:	f887 33a6 	strb.w	r3, [r7, #934]	; 0x3a6
                    continue;
 800200e:	e0d1      	b.n	80021b4 <displayStrings+0x648>
                  }
                    if(state == 8){
 8002010:	f897 33a6 	ldrb.w	r3, [r7, #934]	; 0x3a6
 8002014:	2b08      	cmp	r3, #8
 8002016:	d116      	bne.n	8002046 <displayStrings+0x4da>
                      printf("%s\r\n",horizontalDilutionOfPrecisionString);
 8002018:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 800201c:	4619      	mov	r1, r3
 800201e:	486c      	ldr	r0, [pc, #432]	; (80021d0 <displayStrings+0x664>)
 8002020:	f005 fa2a 	bl	8007478 <iprintf>
                      ssd1331_clear_screen(BLACK);
 8002024:	2000      	movs	r0, #0
 8002026:	f000 fc5e 	bl	80028e6 <ssd1331_clear_screen>
                      ssd1331_display_string(0,10,horizontalDilutionOfPrecisionString,FONT_1206,WHITE);
 800202a:	f507 72c4 	add.w	r2, r7, #392	; 0x188
 800202e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002032:	9300      	str	r3, [sp, #0]
 8002034:	230c      	movs	r3, #12
 8002036:	210a      	movs	r1, #10
 8002038:	2000      	movs	r0, #0
 800203a:	f000 fc0b 	bl	8002854 <ssd1331_display_string>
                      state = 9;
 800203e:	2309      	movs	r3, #9
 8002040:	f887 33a6 	strb.w	r3, [r7, #934]	; 0x3a6
                      continue;
 8002044:	e0b6      	b.n	80021b4 <displayStrings+0x648>
                    }
                      if(state == 9){
 8002046:	f897 33a6 	ldrb.w	r3, [r7, #934]	; 0x3a6
 800204a:	2b09      	cmp	r3, #9
 800204c:	d116      	bne.n	800207c <displayStrings+0x510>
                        printf("%s\r\n",altitudeString);
 800204e:	f507 73a2 	add.w	r3, r7, #324	; 0x144
 8002052:	4619      	mov	r1, r3
 8002054:	485e      	ldr	r0, [pc, #376]	; (80021d0 <displayStrings+0x664>)
 8002056:	f005 fa0f 	bl	8007478 <iprintf>
                        ssd1331_clear_screen(BLACK);
 800205a:	2000      	movs	r0, #0
 800205c:	f000 fc43 	bl	80028e6 <ssd1331_clear_screen>
                        ssd1331_display_string(0,0,altitudeString,FONT_1206,WHITE);
 8002060:	f507 72a2 	add.w	r2, r7, #324	; 0x144
 8002064:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002068:	9300      	str	r3, [sp, #0]
 800206a:	230c      	movs	r3, #12
 800206c:	2100      	movs	r1, #0
 800206e:	2000      	movs	r0, #0
 8002070:	f000 fbf0 	bl	8002854 <ssd1331_display_string>
                        state = 10;
 8002074:	230a      	movs	r3, #10
 8002076:	f887 33a6 	strb.w	r3, [r7, #934]	; 0x3a6
                        continue;
 800207a:	e09b      	b.n	80021b4 <displayStrings+0x648>
                      }
                        if(state == 10){
 800207c:	f897 33a6 	ldrb.w	r3, [r7, #934]	; 0x3a6
 8002080:	2b0a      	cmp	r3, #10
 8002082:	d116      	bne.n	80020b2 <displayStrings+0x546>
                          printf("%s\r\n",altitudeUnitsString);
 8002084:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8002088:	4619      	mov	r1, r3
 800208a:	4851      	ldr	r0, [pc, #324]	; (80021d0 <displayStrings+0x664>)
 800208c:	f005 f9f4 	bl	8007478 <iprintf>
                          ssd1331_clear_screen(BLACK);
 8002090:	2000      	movs	r0, #0
 8002092:	f000 fc28 	bl	80028e6 <ssd1331_clear_screen>
                          ssd1331_display_string(0,10,altitudeUnitsString,FONT_1206,WHITE);
 8002096:	f507 7282 	add.w	r2, r7, #260	; 0x104
 800209a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800209e:	9300      	str	r3, [sp, #0]
 80020a0:	230c      	movs	r3, #12
 80020a2:	210a      	movs	r1, #10
 80020a4:	2000      	movs	r0, #0
 80020a6:	f000 fbd5 	bl	8002854 <ssd1331_display_string>
                          state = 11;
 80020aa:	230b      	movs	r3, #11
 80020ac:	f887 33a6 	strb.w	r3, [r7, #934]	; 0x3a6
                          continue;
 80020b0:	e080      	b.n	80021b4 <displayStrings+0x648>
                        }
                          if(state == 11){
 80020b2:	f897 33a6 	ldrb.w	r3, [r7, #934]	; 0x3a6
 80020b6:	2b0b      	cmp	r3, #11
 80020b8:	d116      	bne.n	80020e8 <displayStrings+0x57c>
                            printf("%s\r\n",geoidSeperationString);
 80020ba:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80020be:	4619      	mov	r1, r3
 80020c0:	4843      	ldr	r0, [pc, #268]	; (80021d0 <displayStrings+0x664>)
 80020c2:	f005 f9d9 	bl	8007478 <iprintf>
                            ssd1331_clear_screen(BLACK);
 80020c6:	2000      	movs	r0, #0
 80020c8:	f000 fc0d 	bl	80028e6 <ssd1331_clear_screen>
                            ssd1331_display_string(0,10,geoidSeperationString,FONT_1206,WHITE);
 80020cc:	f107 02c4 	add.w	r2, r7, #196	; 0xc4
 80020d0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80020d4:	9300      	str	r3, [sp, #0]
 80020d6:	230c      	movs	r3, #12
 80020d8:	210a      	movs	r1, #10
 80020da:	2000      	movs	r0, #0
 80020dc:	f000 fbba 	bl	8002854 <ssd1331_display_string>
                            state = 12;
 80020e0:	230c      	movs	r3, #12
 80020e2:	f887 33a6 	strb.w	r3, [r7, #934]	; 0x3a6
                            continue;
 80020e6:	e065      	b.n	80021b4 <displayStrings+0x648>
                          }
                            if(state == 12){
 80020e8:	f897 33a6 	ldrb.w	r3, [r7, #934]	; 0x3a6
 80020ec:	2b0c      	cmp	r3, #12
 80020ee:	d116      	bne.n	800211e <displayStrings+0x5b2>
                              printf("%s\r\n",inMetersString);
 80020f0:	f107 0384 	add.w	r3, r7, #132	; 0x84
 80020f4:	4619      	mov	r1, r3
 80020f6:	4836      	ldr	r0, [pc, #216]	; (80021d0 <displayStrings+0x664>)
 80020f8:	f005 f9be 	bl	8007478 <iprintf>
                              ssd1331_clear_screen(BLACK);
 80020fc:	2000      	movs	r0, #0
 80020fe:	f000 fbf2 	bl	80028e6 <ssd1331_clear_screen>
                              ssd1331_display_string(0,10,inMetersString,FONT_1206,WHITE);
 8002102:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8002106:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800210a:	9300      	str	r3, [sp, #0]
 800210c:	230c      	movs	r3, #12
 800210e:	210a      	movs	r1, #10
 8002110:	2000      	movs	r0, #0
 8002112:	f000 fb9f 	bl	8002854 <ssd1331_display_string>
                              state = 13;
 8002116:	230d      	movs	r3, #13
 8002118:	f887 33a6 	strb.w	r3, [r7, #934]	; 0x3a6
                              continue;
 800211c:	e04a      	b.n	80021b4 <displayStrings+0x648>
                            }
                              if(state == 13){
 800211e:	f897 33a6 	ldrb.w	r3, [r7, #934]	; 0x3a6
 8002122:	2b0d      	cmp	r3, #13
 8002124:	d116      	bne.n	8002154 <displayStrings+0x5e8>
                                printf("%s\r\n",dgpsAgeString);
 8002126:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800212a:	4619      	mov	r1, r3
 800212c:	4828      	ldr	r0, [pc, #160]	; (80021d0 <displayStrings+0x664>)
 800212e:	f005 f9a3 	bl	8007478 <iprintf>
                                ssd1331_clear_screen(BLACK);
 8002132:	2000      	movs	r0, #0
 8002134:	f000 fbd7 	bl	80028e6 <ssd1331_clear_screen>
                                ssd1331_display_string(0,10,dgpsAgeString,FONT_1206,WHITE);
 8002138:	f107 0244 	add.w	r2, r7, #68	; 0x44
 800213c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002140:	9300      	str	r3, [sp, #0]
 8002142:	230c      	movs	r3, #12
 8002144:	210a      	movs	r1, #10
 8002146:	2000      	movs	r0, #0
 8002148:	f000 fb84 	bl	8002854 <ssd1331_display_string>
                                state = 14;
 800214c:	230e      	movs	r3, #14
 800214e:	f887 33a6 	strb.w	r3, [r7, #934]	; 0x3a6
                                continue;
 8002152:	e02f      	b.n	80021b4 <displayStrings+0x648>
                              }
                                if(state == 14){
 8002154:	f897 33a6 	ldrb.w	r3, [r7, #934]	; 0x3a6
 8002158:	2b0e      	cmp	r3, #14
 800215a:	d114      	bne.n	8002186 <displayStrings+0x61a>
                                  printf("%s\r\n",checkSumString);
 800215c:	1d3b      	adds	r3, r7, #4
 800215e:	4619      	mov	r1, r3
 8002160:	481b      	ldr	r0, [pc, #108]	; (80021d0 <displayStrings+0x664>)
 8002162:	f005 f989 	bl	8007478 <iprintf>
                                  ssd1331_clear_screen(BLACK);
 8002166:	2000      	movs	r0, #0
 8002168:	f000 fbbd 	bl	80028e6 <ssd1331_clear_screen>
                                  ssd1331_display_string(0,10,checkSumString,FONT_1206,WHITE);
 800216c:	1d3a      	adds	r2, r7, #4
 800216e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002172:	9300      	str	r3, [sp, #0]
 8002174:	230c      	movs	r3, #12
 8002176:	210a      	movs	r1, #10
 8002178:	2000      	movs	r0, #0
 800217a:	f000 fb6b 	bl	8002854 <ssd1331_display_string>
                                  state = 15;
 800217e:	230f      	movs	r3, #15
 8002180:	f887 33a6 	strb.w	r3, [r7, #934]	; 0x3a6
                                  continue;
 8002184:	e016      	b.n	80021b4 <displayStrings+0x648>
                                }
                                if(state == 15){
 8002186:	f897 33a6 	ldrb.w	r3, [r7, #934]	; 0x3a6
 800218a:	2b0f      	cmp	r3, #15
 800218c:	d112      	bne.n	80021b4 <displayStrings+0x648>
                                  ssd1331_clear_screen(BLACK);
 800218e:	2000      	movs	r0, #0
 8002190:	f000 fba9 	bl	80028e6 <ssd1331_clear_screen>
                                  ssd1331_display_string(0,0,"Finished Program",FONT_1206,WHITE);
 8002194:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002198:	9300      	str	r3, [sp, #0]
 800219a:	230c      	movs	r3, #12
 800219c:	4a0d      	ldr	r2, [pc, #52]	; (80021d4 <displayStrings+0x668>)
 800219e:	2100      	movs	r1, #0
 80021a0:	2000      	movs	r0, #0
 80021a2:	f000 fb57 	bl	8002854 <ssd1331_display_string>
                                  continueFlag = 0;
 80021a6:	2300      	movs	r3, #0
 80021a8:	f887 33a7 	strb.w	r3, [r7, #935]	; 0x3a7
                                  state = 0;
 80021ac:	2300      	movs	r3, #0
 80021ae:	f887 33a6 	strb.w	r3, [r7, #934]	; 0x3a6
                                  continue;
 80021b2:	bf00      	nop
  while(continueFlag){
 80021b4:	f897 33a7 	ldrb.w	r3, [r7, #935]	; 0x3a7
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	f47f ae19 	bne.w	8001df0 <displayStrings+0x284>
                                }
    }
  }
}
 80021be:	bf00      	nop
 80021c0:	bf00      	nop
 80021c2:	f507 776a 	add.w	r7, r7, #936	; 0x3a8
 80021c6:	46bd      	mov	sp, r7
 80021c8:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 80021cc:	b004      	add	sp, #16
 80021ce:	4770      	bx	lr
 80021d0:	0800c128 	.word	0x0800c128
 80021d4:	0800c130 	.word	0x0800c130

080021d8 <pushButtonInit>:





void pushButtonInit(){
 80021d8:	b580      	push	{r7, lr}
 80021da:	af00      	add	r7, sp, #0
	deBounceInit(pushPin, 'A', 1);
 80021dc:	2300      	movs	r3, #0
 80021de:	2201      	movs	r2, #1
 80021e0:	2141      	movs	r1, #65	; 0x41
 80021e2:	4618      	mov	r0, r3
 80021e4:	f7fe ff08 	bl	8000ff8 <deBounceInit>
}
 80021e8:	bf00      	nop
 80021ea:	bd80      	pop	{r7, pc}

080021ec <displayWelcome>:
void displayWelcome(void) {
 80021ec:	b580      	push	{r7, lr}
 80021ee:	b086      	sub	sp, #24
 80021f0:	af02      	add	r7, sp, #8
	char stringBuffer[16] = { 0 };
 80021f2:	2300      	movs	r3, #0
 80021f4:	603b      	str	r3, [r7, #0]
 80021f6:	1d3b      	adds	r3, r7, #4
 80021f8:	2200      	movs	r2, #0
 80021fa:	601a      	str	r2, [r3, #0]
 80021fc:	605a      	str	r2, [r3, #4]
 80021fe:	609a      	str	r2, [r3, #8]
	ssd1331_clear_screen(BLACK);
 8002200:	2000      	movs	r0, #0
 8002202:	f000 fb70 	bl	80028e6 <ssd1331_clear_screen>
	snprintf(stringBuffer, 16, "Welcome ");
 8002206:	463b      	mov	r3, r7
 8002208:	4a08      	ldr	r2, [pc, #32]	; (800222c <displayWelcome+0x40>)
 800220a:	2110      	movs	r1, #16
 800220c:	4618      	mov	r0, r3
 800220e:	f005 f9ef 	bl	80075f0 <sniprintf>
	ssd1331_display_string(0, 0, stringBuffer, FONT_1206, WHITE);
 8002212:	463a      	mov	r2, r7
 8002214:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002218:	9300      	str	r3, [sp, #0]
 800221a:	230c      	movs	r3, #12
 800221c:	2100      	movs	r1, #0
 800221e:	2000      	movs	r0, #0
 8002220:	f000 fb18 	bl	8002854 <ssd1331_display_string>
}
 8002224:	bf00      	nop
 8002226:	3710      	adds	r7, #16
 8002228:	46bd      	mov	sp, r7
 800222a:	bd80      	pop	{r7, pc}
 800222c:	0800c144 	.word	0x0800c144

08002230 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002230:	b580      	push	{r7, lr}
 8002232:	b096      	sub	sp, #88	; 0x58
 8002234:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002236:	f000 fe88 	bl	8002f4a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800223a:	f000 f847 	bl	80022cc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800223e:	f000 f9a3 	bl	8002588 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8002242:	f000 f971 	bl	8002528 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 8002246:	f000 f8e1 	bl	800240c <MX_TIM1_Init>
  MX_SPI1_Init();
 800224a:	f000 f8a1 	bl	8002390 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  ssd1331_init();
 800224e:	f000 fb6f 	bl	8002930 <ssd1331_init>
  pushButtonInit();
 8002252:	f7ff ffc1 	bl	80021d8 <pushButtonInit>
  displayWelcome();
 8002256:	f7ff ffc9 	bl	80021ec <displayWelcome>
  printf("Starting Program\r\n");
 800225a:	4818      	ldr	r0, [pc, #96]	; (80022bc <main+0x8c>)
 800225c:	f005 f992 	bl	8007584 <puts>
  uint8_t testFlag = 1;
 8002260:	2301      	movs	r3, #1
 8002262:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  char string[80];
  while (testFlag == 0)
 8002266:	e01a      	b.n	800229e <main+0x6e>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	printf("Please Print the geo location of string");
 8002268:	4815      	ldr	r0, [pc, #84]	; (80022c0 <main+0x90>)
 800226a:	f005 f905 	bl	8007478 <iprintf>
	HAL_Delay(100);
 800226e:	2064      	movs	r0, #100	; 0x64
 8002270:	f000 fee0 	bl	8003034 <HAL_Delay>
	scanf("%s",string);
 8002274:	1d3b      	adds	r3, r7, #4
 8002276:	4619      	mov	r1, r3
 8002278:	4812      	ldr	r0, [pc, #72]	; (80022c4 <main+0x94>)
 800227a:	f005 f99b 	bl	80075b4 <iscanf>
	printf("The String is %s\r\n",string);
 800227e:	1d3b      	adds	r3, r7, #4
 8002280:	4619      	mov	r1, r3
 8002282:	4811      	ldr	r0, [pc, #68]	; (80022c8 <main+0x98>)
 8002284:	f005 f8f8 	bl	8007478 <iprintf>
	gpsParser(string,(uint8_t)strlen(string));
 8002288:	1d3b      	adds	r3, r7, #4
 800228a:	4618      	mov	r0, r3
 800228c:	f7fd ffa0 	bl	80001d0 <strlen>
 8002290:	4603      	mov	r3, r0
 8002292:	b2da      	uxtb	r2, r3
 8002294:	1d3b      	adds	r3, r7, #4
 8002296:	4611      	mov	r1, r2
 8002298:	4618      	mov	r0, r3
 800229a:	f7ff f8f3 	bl	8001484 <gpsParser>
  while (testFlag == 0)
 800229e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d0e0      	beq.n	8002268 <main+0x38>
  }
  if(testFlag == 1){
 80022a6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80022aa:	2b01      	cmp	r3, #1
 80022ac:	d101      	bne.n	80022b2 <main+0x82>
    unitTest();
 80022ae:	f7ff f867 	bl	8001380 <unitTest>
 80022b2:	2300      	movs	r3, #0
  }
  /* USER CODE END 3 */
}
 80022b4:	4618      	mov	r0, r3
 80022b6:	3758      	adds	r7, #88	; 0x58
 80022b8:	46bd      	mov	sp, r7
 80022ba:	bd80      	pop	{r7, pc}
 80022bc:	0800c150 	.word	0x0800c150
 80022c0:	0800c164 	.word	0x0800c164
 80022c4:	0800c18c 	.word	0x0800c18c
 80022c8:	0800c190 	.word	0x0800c190

080022cc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80022cc:	b580      	push	{r7, lr}
 80022ce:	b096      	sub	sp, #88	; 0x58
 80022d0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80022d2:	f107 0314 	add.w	r3, r7, #20
 80022d6:	2244      	movs	r2, #68	; 0x44
 80022d8:	2100      	movs	r1, #0
 80022da:	4618      	mov	r0, r3
 80022dc:	f004 f96a 	bl	80065b4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80022e0:	463b      	mov	r3, r7
 80022e2:	2200      	movs	r2, #0
 80022e4:	601a      	str	r2, [r3, #0]
 80022e6:	605a      	str	r2, [r3, #4]
 80022e8:	609a      	str	r2, [r3, #8]
 80022ea:	60da      	str	r2, [r3, #12]
 80022ec:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80022ee:	f44f 7000 	mov.w	r0, #512	; 0x200
 80022f2:	f001 f961 	bl	80035b8 <HAL_PWREx_ControlVoltageScaling>
 80022f6:	4603      	mov	r3, r0
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d001      	beq.n	8002300 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80022fc:	f000 f9be 	bl	800267c <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8002300:	f001 f93c 	bl	800357c <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8002304:	4b21      	ldr	r3, [pc, #132]	; (800238c <SystemClock_Config+0xc0>)
 8002306:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800230a:	4a20      	ldr	r2, [pc, #128]	; (800238c <SystemClock_Config+0xc0>)
 800230c:	f023 0318 	bic.w	r3, r3, #24
 8002310:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8002314:	2314      	movs	r3, #20
 8002316:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8002318:	2301      	movs	r3, #1
 800231a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800231c:	2301      	movs	r3, #1
 800231e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8002320:	2300      	movs	r3, #0
 8002322:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8002324:	2360      	movs	r3, #96	; 0x60
 8002326:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002328:	2302      	movs	r3, #2
 800232a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 800232c:	2301      	movs	r3, #1
 800232e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8002330:	2301      	movs	r3, #1
 8002332:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 16;
 8002334:	2310      	movs	r3, #16
 8002336:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8002338:	2307      	movs	r3, #7
 800233a:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800233c:	2302      	movs	r3, #2
 800233e:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8002340:	2302      	movs	r3, #2
 8002342:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002344:	f107 0314 	add.w	r3, r7, #20
 8002348:	4618      	mov	r0, r3
 800234a:	f001 f98b 	bl	8003664 <HAL_RCC_OscConfig>
 800234e:	4603      	mov	r3, r0
 8002350:	2b00      	cmp	r3, #0
 8002352:	d001      	beq.n	8002358 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8002354:	f000 f992 	bl	800267c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002358:	230f      	movs	r3, #15
 800235a:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800235c:	2303      	movs	r3, #3
 800235e:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002360:	2300      	movs	r3, #0
 8002362:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002364:	2300      	movs	r3, #0
 8002366:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002368:	2300      	movs	r3, #0
 800236a:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800236c:	463b      	mov	r3, r7
 800236e:	2101      	movs	r1, #1
 8002370:	4618      	mov	r0, r3
 8002372:	f001 fd8b 	bl	8003e8c <HAL_RCC_ClockConfig>
 8002376:	4603      	mov	r3, r0
 8002378:	2b00      	cmp	r3, #0
 800237a:	d001      	beq.n	8002380 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 800237c:	f000 f97e 	bl	800267c <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8002380:	f002 f99e 	bl	80046c0 <HAL_RCCEx_EnableMSIPLLMode>
}
 8002384:	bf00      	nop
 8002386:	3758      	adds	r7, #88	; 0x58
 8002388:	46bd      	mov	sp, r7
 800238a:	bd80      	pop	{r7, pc}
 800238c:	40021000 	.word	0x40021000

08002390 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8002390:	b580      	push	{r7, lr}
 8002392:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8002394:	4b1b      	ldr	r3, [pc, #108]	; (8002404 <MX_SPI1_Init+0x74>)
 8002396:	4a1c      	ldr	r2, [pc, #112]	; (8002408 <MX_SPI1_Init+0x78>)
 8002398:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800239a:	4b1a      	ldr	r3, [pc, #104]	; (8002404 <MX_SPI1_Init+0x74>)
 800239c:	f44f 7282 	mov.w	r2, #260	; 0x104
 80023a0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80023a2:	4b18      	ldr	r3, [pc, #96]	; (8002404 <MX_SPI1_Init+0x74>)
 80023a4:	2200      	movs	r2, #0
 80023a6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80023a8:	4b16      	ldr	r3, [pc, #88]	; (8002404 <MX_SPI1_Init+0x74>)
 80023aa:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80023ae:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80023b0:	4b14      	ldr	r3, [pc, #80]	; (8002404 <MX_SPI1_Init+0x74>)
 80023b2:	2200      	movs	r2, #0
 80023b4:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80023b6:	4b13      	ldr	r3, [pc, #76]	; (8002404 <MX_SPI1_Init+0x74>)
 80023b8:	2200      	movs	r2, #0
 80023ba:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80023bc:	4b11      	ldr	r3, [pc, #68]	; (8002404 <MX_SPI1_Init+0x74>)
 80023be:	f44f 7200 	mov.w	r2, #512	; 0x200
 80023c2:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 80023c4:	4b0f      	ldr	r3, [pc, #60]	; (8002404 <MX_SPI1_Init+0x74>)
 80023c6:	2210      	movs	r2, #16
 80023c8:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80023ca:	4b0e      	ldr	r3, [pc, #56]	; (8002404 <MX_SPI1_Init+0x74>)
 80023cc:	2200      	movs	r2, #0
 80023ce:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80023d0:	4b0c      	ldr	r3, [pc, #48]	; (8002404 <MX_SPI1_Init+0x74>)
 80023d2:	2200      	movs	r2, #0
 80023d4:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80023d6:	4b0b      	ldr	r3, [pc, #44]	; (8002404 <MX_SPI1_Init+0x74>)
 80023d8:	2200      	movs	r2, #0
 80023da:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80023dc:	4b09      	ldr	r3, [pc, #36]	; (8002404 <MX_SPI1_Init+0x74>)
 80023de:	2207      	movs	r2, #7
 80023e0:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80023e2:	4b08      	ldr	r3, [pc, #32]	; (8002404 <MX_SPI1_Init+0x74>)
 80023e4:	2200      	movs	r2, #0
 80023e6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80023e8:	4b06      	ldr	r3, [pc, #24]	; (8002404 <MX_SPI1_Init+0x74>)
 80023ea:	2208      	movs	r2, #8
 80023ec:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80023ee:	4805      	ldr	r0, [pc, #20]	; (8002404 <MX_SPI1_Init+0x74>)
 80023f0:	f002 fa68 	bl	80048c4 <HAL_SPI_Init>
 80023f4:	4603      	mov	r3, r0
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d001      	beq.n	80023fe <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80023fa:	f000 f93f 	bl	800267c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80023fe:	bf00      	nop
 8002400:	bd80      	pop	{r7, pc}
 8002402:	bf00      	nop
 8002404:	200001fc 	.word	0x200001fc
 8002408:	40013000 	.word	0x40013000

0800240c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800240c:	b580      	push	{r7, lr}
 800240e:	b096      	sub	sp, #88	; 0x58
 8002410:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002412:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002416:	2200      	movs	r2, #0
 8002418:	601a      	str	r2, [r3, #0]
 800241a:	605a      	str	r2, [r3, #4]
 800241c:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800241e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002422:	2200      	movs	r2, #0
 8002424:	601a      	str	r2, [r3, #0]
 8002426:	605a      	str	r2, [r3, #4]
 8002428:	609a      	str	r2, [r3, #8]
 800242a:	60da      	str	r2, [r3, #12]
 800242c:	611a      	str	r2, [r3, #16]
 800242e:	615a      	str	r2, [r3, #20]
 8002430:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002432:	1d3b      	adds	r3, r7, #4
 8002434:	222c      	movs	r2, #44	; 0x2c
 8002436:	2100      	movs	r1, #0
 8002438:	4618      	mov	r0, r3
 800243a:	f004 f8bb 	bl	80065b4 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800243e:	4b38      	ldr	r3, [pc, #224]	; (8002520 <MX_TIM1_Init+0x114>)
 8002440:	4a38      	ldr	r2, [pc, #224]	; (8002524 <MX_TIM1_Init+0x118>)
 8002442:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8002444:	4b36      	ldr	r3, [pc, #216]	; (8002520 <MX_TIM1_Init+0x114>)
 8002446:	2200      	movs	r2, #0
 8002448:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800244a:	4b35      	ldr	r3, [pc, #212]	; (8002520 <MX_TIM1_Init+0x114>)
 800244c:	2200      	movs	r2, #0
 800244e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 100;
 8002450:	4b33      	ldr	r3, [pc, #204]	; (8002520 <MX_TIM1_Init+0x114>)
 8002452:	2264      	movs	r2, #100	; 0x64
 8002454:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002456:	4b32      	ldr	r3, [pc, #200]	; (8002520 <MX_TIM1_Init+0x114>)
 8002458:	2200      	movs	r2, #0
 800245a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800245c:	4b30      	ldr	r3, [pc, #192]	; (8002520 <MX_TIM1_Init+0x114>)
 800245e:	2200      	movs	r2, #0
 8002460:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002462:	4b2f      	ldr	r3, [pc, #188]	; (8002520 <MX_TIM1_Init+0x114>)
 8002464:	2200      	movs	r2, #0
 8002466:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8002468:	482d      	ldr	r0, [pc, #180]	; (8002520 <MX_TIM1_Init+0x114>)
 800246a:	f002 fda1 	bl	8004fb0 <HAL_TIM_PWM_Init>
 800246e:	4603      	mov	r3, r0
 8002470:	2b00      	cmp	r3, #0
 8002472:	d001      	beq.n	8002478 <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 8002474:	f000 f902 	bl	800267c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002478:	2300      	movs	r3, #0
 800247a:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800247c:	2300      	movs	r3, #0
 800247e:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002480:	2300      	movs	r3, #0
 8002482:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002484:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002488:	4619      	mov	r1, r3
 800248a:	4825      	ldr	r0, [pc, #148]	; (8002520 <MX_TIM1_Init+0x114>)
 800248c:	f003 f9de 	bl	800584c <HAL_TIMEx_MasterConfigSynchronization>
 8002490:	4603      	mov	r3, r0
 8002492:	2b00      	cmp	r3, #0
 8002494:	d001      	beq.n	800249a <MX_TIM1_Init+0x8e>
  {
    Error_Handler();
 8002496:	f000 f8f1 	bl	800267c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800249a:	2360      	movs	r3, #96	; 0x60
 800249c:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 800249e:	2300      	movs	r3, #0
 80024a0:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80024a2:	2300      	movs	r3, #0
 80024a4:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80024a6:	2300      	movs	r3, #0
 80024a8:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80024aa:	2300      	movs	r3, #0
 80024ac:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80024ae:	2300      	movs	r3, #0
 80024b0:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80024b2:	2300      	movs	r3, #0
 80024b4:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80024b6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80024ba:	2200      	movs	r2, #0
 80024bc:	4619      	mov	r1, r3
 80024be:	4818      	ldr	r0, [pc, #96]	; (8002520 <MX_TIM1_Init+0x114>)
 80024c0:	f002 fdce 	bl	8005060 <HAL_TIM_PWM_ConfigChannel>
 80024c4:	4603      	mov	r3, r0
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d001      	beq.n	80024ce <MX_TIM1_Init+0xc2>
  {
    Error_Handler();
 80024ca:	f000 f8d7 	bl	800267c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80024ce:	2300      	movs	r3, #0
 80024d0:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80024d2:	2300      	movs	r3, #0
 80024d4:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80024d6:	2300      	movs	r3, #0
 80024d8:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80024da:	2300      	movs	r3, #0
 80024dc:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80024de:	2300      	movs	r3, #0
 80024e0:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80024e2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80024e6:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80024e8:	2300      	movs	r3, #0
 80024ea:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80024ec:	2300      	movs	r3, #0
 80024ee:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80024f0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80024f4:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 80024f6:	2300      	movs	r3, #0
 80024f8:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80024fa:	2300      	movs	r3, #0
 80024fc:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80024fe:	1d3b      	adds	r3, r7, #4
 8002500:	4619      	mov	r1, r3
 8002502:	4807      	ldr	r0, [pc, #28]	; (8002520 <MX_TIM1_Init+0x114>)
 8002504:	f003 fa08 	bl	8005918 <HAL_TIMEx_ConfigBreakDeadTime>
 8002508:	4603      	mov	r3, r0
 800250a:	2b00      	cmp	r3, #0
 800250c:	d001      	beq.n	8002512 <MX_TIM1_Init+0x106>
  {
    Error_Handler();
 800250e:	f000 f8b5 	bl	800267c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8002512:	4803      	ldr	r0, [pc, #12]	; (8002520 <MX_TIM1_Init+0x114>)
 8002514:	f000 fb40 	bl	8002b98 <HAL_TIM_MspPostInit>

}
 8002518:	bf00      	nop
 800251a:	3758      	adds	r7, #88	; 0x58
 800251c:	46bd      	mov	sp, r7
 800251e:	bd80      	pop	{r7, pc}
 8002520:	20000260 	.word	0x20000260
 8002524:	40012c00 	.word	0x40012c00

08002528 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002528:	b580      	push	{r7, lr}
 800252a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800252c:	4b14      	ldr	r3, [pc, #80]	; (8002580 <MX_USART2_UART_Init+0x58>)
 800252e:	4a15      	ldr	r2, [pc, #84]	; (8002584 <MX_USART2_UART_Init+0x5c>)
 8002530:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002532:	4b13      	ldr	r3, [pc, #76]	; (8002580 <MX_USART2_UART_Init+0x58>)
 8002534:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002538:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800253a:	4b11      	ldr	r3, [pc, #68]	; (8002580 <MX_USART2_UART_Init+0x58>)
 800253c:	2200      	movs	r2, #0
 800253e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002540:	4b0f      	ldr	r3, [pc, #60]	; (8002580 <MX_USART2_UART_Init+0x58>)
 8002542:	2200      	movs	r2, #0
 8002544:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002546:	4b0e      	ldr	r3, [pc, #56]	; (8002580 <MX_USART2_UART_Init+0x58>)
 8002548:	2200      	movs	r2, #0
 800254a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800254c:	4b0c      	ldr	r3, [pc, #48]	; (8002580 <MX_USART2_UART_Init+0x58>)
 800254e:	220c      	movs	r2, #12
 8002550:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002552:	4b0b      	ldr	r3, [pc, #44]	; (8002580 <MX_USART2_UART_Init+0x58>)
 8002554:	2200      	movs	r2, #0
 8002556:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002558:	4b09      	ldr	r3, [pc, #36]	; (8002580 <MX_USART2_UART_Init+0x58>)
 800255a:	2200      	movs	r2, #0
 800255c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800255e:	4b08      	ldr	r3, [pc, #32]	; (8002580 <MX_USART2_UART_Init+0x58>)
 8002560:	2200      	movs	r2, #0
 8002562:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002564:	4b06      	ldr	r3, [pc, #24]	; (8002580 <MX_USART2_UART_Init+0x58>)
 8002566:	2200      	movs	r2, #0
 8002568:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800256a:	4805      	ldr	r0, [pc, #20]	; (8002580 <MX_USART2_UART_Init+0x58>)
 800256c:	f003 fa4c 	bl	8005a08 <HAL_UART_Init>
 8002570:	4603      	mov	r3, r0
 8002572:	2b00      	cmp	r3, #0
 8002574:	d001      	beq.n	800257a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8002576:	f000 f881 	bl	800267c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800257a:	bf00      	nop
 800257c:	bd80      	pop	{r7, pc}
 800257e:	bf00      	nop
 8002580:	200002ac 	.word	0x200002ac
 8002584:	40004400 	.word	0x40004400

08002588 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002588:	b580      	push	{r7, lr}
 800258a:	b088      	sub	sp, #32
 800258c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800258e:	f107 030c 	add.w	r3, r7, #12
 8002592:	2200      	movs	r2, #0
 8002594:	601a      	str	r2, [r3, #0]
 8002596:	605a      	str	r2, [r3, #4]
 8002598:	609a      	str	r2, [r3, #8]
 800259a:	60da      	str	r2, [r3, #12]
 800259c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800259e:	4b35      	ldr	r3, [pc, #212]	; (8002674 <MX_GPIO_Init+0xec>)
 80025a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80025a2:	4a34      	ldr	r2, [pc, #208]	; (8002674 <MX_GPIO_Init+0xec>)
 80025a4:	f043 0304 	orr.w	r3, r3, #4
 80025a8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80025aa:	4b32      	ldr	r3, [pc, #200]	; (8002674 <MX_GPIO_Init+0xec>)
 80025ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80025ae:	f003 0304 	and.w	r3, r3, #4
 80025b2:	60bb      	str	r3, [r7, #8]
 80025b4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80025b6:	4b2f      	ldr	r3, [pc, #188]	; (8002674 <MX_GPIO_Init+0xec>)
 80025b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80025ba:	4a2e      	ldr	r2, [pc, #184]	; (8002674 <MX_GPIO_Init+0xec>)
 80025bc:	f043 0301 	orr.w	r3, r3, #1
 80025c0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80025c2:	4b2c      	ldr	r3, [pc, #176]	; (8002674 <MX_GPIO_Init+0xec>)
 80025c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80025c6:	f003 0301 	and.w	r3, r3, #1
 80025ca:	607b      	str	r3, [r7, #4]
 80025cc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80025ce:	4b29      	ldr	r3, [pc, #164]	; (8002674 <MX_GPIO_Init+0xec>)
 80025d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80025d2:	4a28      	ldr	r2, [pc, #160]	; (8002674 <MX_GPIO_Init+0xec>)
 80025d4:	f043 0302 	orr.w	r3, r3, #2
 80025d8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80025da:	4b26      	ldr	r3, [pc, #152]	; (8002674 <MX_GPIO_Init+0xec>)
 80025dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80025de:	f003 0302 	and.w	r3, r3, #2
 80025e2:	603b      	str	r3, [r7, #0]
 80025e4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|SSD1331_CS_Pin|SSD1331_DC_Pin|SSD1331_RES_Pin, GPIO_PIN_RESET);
 80025e6:	2200      	movs	r2, #0
 80025e8:	2178      	movs	r1, #120	; 0x78
 80025ea:	4823      	ldr	r0, [pc, #140]	; (8002678 <MX_GPIO_Init+0xf0>)
 80025ec:	f000 ffae 	bl	800354c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : chequing_Pin saving_Pin Ok_Pin Cancel_Pin */
  GPIO_InitStruct.Pin = chequing_Pin|saving_Pin|Ok_Pin|Cancel_Pin;
 80025f0:	231b      	movs	r3, #27
 80025f2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80025f4:	2300      	movs	r3, #0
 80025f6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025f8:	2300      	movs	r3, #0
 80025fa:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80025fc:	f107 030c 	add.w	r3, r7, #12
 8002600:	4619      	mov	r1, r3
 8002602:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002606:	f000 fe1f 	bl	8003248 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA5 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_12;
 800260a:	f44f 5381 	mov.w	r3, #4128	; 0x1020
 800260e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002610:	2302      	movs	r3, #2
 8002612:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002614:	2300      	movs	r3, #0
 8002616:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002618:	2303      	movs	r3, #3
 800261a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800261c:	2305      	movs	r3, #5
 800261e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002620:	f107 030c 	add.w	r3, r7, #12
 8002624:	4619      	mov	r1, r3
 8002626:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800262a:	f000 fe0d 	bl	8003248 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 800262e:	2380      	movs	r3, #128	; 0x80
 8002630:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002632:	2302      	movs	r3, #2
 8002634:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002636:	2300      	movs	r3, #0
 8002638:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800263a:	2300      	movs	r3, #0
 800263c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800263e:	2301      	movs	r3, #1
 8002640:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002642:	f107 030c 	add.w	r3, r7, #12
 8002646:	4619      	mov	r1, r3
 8002648:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800264c:	f000 fdfc 	bl	8003248 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin SSD1331_CS_Pin SSD1331_DC_Pin SSD1331_RES_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|SSD1331_CS_Pin|SSD1331_DC_Pin|SSD1331_RES_Pin;
 8002650:	2378      	movs	r3, #120	; 0x78
 8002652:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002654:	2301      	movs	r3, #1
 8002656:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002658:	2300      	movs	r3, #0
 800265a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800265c:	2300      	movs	r3, #0
 800265e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002660:	f107 030c 	add.w	r3, r7, #12
 8002664:	4619      	mov	r1, r3
 8002666:	4804      	ldr	r0, [pc, #16]	; (8002678 <MX_GPIO_Init+0xf0>)
 8002668:	f000 fdee 	bl	8003248 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800266c:	bf00      	nop
 800266e:	3720      	adds	r7, #32
 8002670:	46bd      	mov	sp, r7
 8002672:	bd80      	pop	{r7, pc}
 8002674:	40021000 	.word	0x40021000
 8002678:	48000400 	.word	0x48000400

0800267c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800267c:	b480      	push	{r7}
 800267e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002680:	b672      	cpsid	i
}
 8002682:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002684:	e7fe      	b.n	8002684 <Error_Handler+0x8>
	...

08002688 <ssd1331_write_byte>:
   *						   0: Writes to the command register
   *						   1: Writes to the display data ram
   * @retval None
 **/
static void ssd1331_write_byte(uint8_t chData, uint8_t chCmd) 
{
 8002688:	b580      	push	{r7, lr}
 800268a:	b082      	sub	sp, #8
 800268c:	af00      	add	r7, sp, #0
 800268e:	4603      	mov	r3, r0
 8002690:	460a      	mov	r2, r1
 8002692:	71fb      	strb	r3, [r7, #7]
 8002694:	4613      	mov	r3, r2
 8002696:	71bb      	strb	r3, [r7, #6]
	if (chCmd) {
 8002698:	79bb      	ldrb	r3, [r7, #6]
 800269a:	2b00      	cmp	r3, #0
 800269c:	d005      	beq.n	80026aa <ssd1331_write_byte+0x22>
	 	__SSD1331_DC_SET();
 800269e:	2201      	movs	r2, #1
 80026a0:	2120      	movs	r1, #32
 80026a2:	4811      	ldr	r0, [pc, #68]	; (80026e8 <ssd1331_write_byte+0x60>)
 80026a4:	f000 ff52 	bl	800354c <HAL_GPIO_WritePin>
 80026a8:	e004      	b.n	80026b4 <ssd1331_write_byte+0x2c>
	} else {
	 	__SSD1331_DC_CLR();
 80026aa:	2200      	movs	r2, #0
 80026ac:	2120      	movs	r1, #32
 80026ae:	480e      	ldr	r0, [pc, #56]	; (80026e8 <ssd1331_write_byte+0x60>)
 80026b0:	f000 ff4c 	bl	800354c <HAL_GPIO_WritePin>
	}
	
	__SSD1331_CS_CLR();
 80026b4:	2200      	movs	r2, #0
 80026b6:	2110      	movs	r1, #16
 80026b8:	480b      	ldr	r0, [pc, #44]	; (80026e8 <ssd1331_write_byte+0x60>)
 80026ba:	f000 ff47 	bl	800354c <HAL_GPIO_WritePin>
	__SSD1331_WRITE_BYTE(chData);
 80026be:	1df9      	adds	r1, r7, #7
 80026c0:	2364      	movs	r3, #100	; 0x64
 80026c2:	2201      	movs	r2, #1
 80026c4:	4809      	ldr	r0, [pc, #36]	; (80026ec <ssd1331_write_byte+0x64>)
 80026c6:	f002 f9a0 	bl	8004a0a <HAL_SPI_Transmit>
	
	__SSD1331_CS_SET();
 80026ca:	2201      	movs	r2, #1
 80026cc:	2110      	movs	r1, #16
 80026ce:	4806      	ldr	r0, [pc, #24]	; (80026e8 <ssd1331_write_byte+0x60>)
 80026d0:	f000 ff3c 	bl	800354c <HAL_GPIO_WritePin>
	__SSD1331_DC_SET();
 80026d4:	2201      	movs	r2, #1
 80026d6:	2120      	movs	r1, #32
 80026d8:	4803      	ldr	r0, [pc, #12]	; (80026e8 <ssd1331_write_byte+0x60>)
 80026da:	f000 ff37 	bl	800354c <HAL_GPIO_WritePin>
}
 80026de:	bf00      	nop
 80026e0:	3708      	adds	r7, #8
 80026e2:	46bd      	mov	sp, r7
 80026e4:	bd80      	pop	{r7, pc}
 80026e6:	bf00      	nop
 80026e8:	48000400 	.word	0x48000400
 80026ec:	200001fc 	.word	0x200001fc

080026f0 <ssd1331_draw_point>:

void ssd1331_draw_point(uint8_t chXpos, uint8_t chYpos, uint16_t hwColor) 
{
 80026f0:	b580      	push	{r7, lr}
 80026f2:	b082      	sub	sp, #8
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	4603      	mov	r3, r0
 80026f8:	71fb      	strb	r3, [r7, #7]
 80026fa:	460b      	mov	r3, r1
 80026fc:	71bb      	strb	r3, [r7, #6]
 80026fe:	4613      	mov	r3, r2
 8002700:	80bb      	strh	r3, [r7, #4]
	if (chXpos >= OLED_WIDTH || chYpos >= OLED_HEIGHT) {
 8002702:	79fb      	ldrb	r3, [r7, #7]
 8002704:	2b5f      	cmp	r3, #95	; 0x5f
 8002706:	d82b      	bhi.n	8002760 <ssd1331_draw_point+0x70>
 8002708:	79bb      	ldrb	r3, [r7, #6]
 800270a:	2b3f      	cmp	r3, #63	; 0x3f
 800270c:	d828      	bhi.n	8002760 <ssd1331_draw_point+0x70>
		return;
	}

    //set column point
    ssd1331_write_byte(SET_COLUMN_ADDRESS, SSD1331_CMD);
 800270e:	2100      	movs	r1, #0
 8002710:	2015      	movs	r0, #21
 8002712:	f7ff ffb9 	bl	8002688 <ssd1331_write_byte>
    ssd1331_write_byte(chXpos, SSD1331_CMD);
 8002716:	79fb      	ldrb	r3, [r7, #7]
 8002718:	2100      	movs	r1, #0
 800271a:	4618      	mov	r0, r3
 800271c:	f7ff ffb4 	bl	8002688 <ssd1331_write_byte>
    ssd1331_write_byte(OLED_WIDTH - 1, SSD1331_CMD);
 8002720:	2100      	movs	r1, #0
 8002722:	205f      	movs	r0, #95	; 0x5f
 8002724:	f7ff ffb0 	bl	8002688 <ssd1331_write_byte>
    //set row point
    ssd1331_write_byte(SET_ROW_ADDRESS, SSD1331_CMD);
 8002728:	2100      	movs	r1, #0
 800272a:	2075      	movs	r0, #117	; 0x75
 800272c:	f7ff ffac 	bl	8002688 <ssd1331_write_byte>
    ssd1331_write_byte(chYpos, SSD1331_CMD);
 8002730:	79bb      	ldrb	r3, [r7, #6]
 8002732:	2100      	movs	r1, #0
 8002734:	4618      	mov	r0, r3
 8002736:	f7ff ffa7 	bl	8002688 <ssd1331_write_byte>
    ssd1331_write_byte(OLED_HEIGHT - 1, SSD1331_CMD);
 800273a:	2100      	movs	r1, #0
 800273c:	203f      	movs	r0, #63	; 0x3f
 800273e:	f7ff ffa3 	bl	8002688 <ssd1331_write_byte>
    
    //fill 16bit colour
	ssd1331_write_byte(hwColor >> 8, SSD1331_DATA);
 8002742:	88bb      	ldrh	r3, [r7, #4]
 8002744:	0a1b      	lsrs	r3, r3, #8
 8002746:	b29b      	uxth	r3, r3
 8002748:	b2db      	uxtb	r3, r3
 800274a:	2101      	movs	r1, #1
 800274c:	4618      	mov	r0, r3
 800274e:	f7ff ff9b 	bl	8002688 <ssd1331_write_byte>
	ssd1331_write_byte(hwColor, SSD1331_DATA);   
 8002752:	88bb      	ldrh	r3, [r7, #4]
 8002754:	b2db      	uxtb	r3, r3
 8002756:	2101      	movs	r1, #1
 8002758:	4618      	mov	r0, r3
 800275a:	f7ff ff95 	bl	8002688 <ssd1331_write_byte>
 800275e:	e000      	b.n	8002762 <ssd1331_draw_point+0x72>
		return;
 8002760:	bf00      	nop
}
 8002762:	3708      	adds	r7, #8
 8002764:	46bd      	mov	sp, r7
 8002766:	bd80      	pop	{r7, pc}

08002768 <ssd1331_display_char>:
  * @param  chSize: 
  * @param  chMode
  * @retval 
**/
void ssd1331_display_char(uint8_t chXpos, uint8_t chYpos, uint8_t chChr, uint8_t chSize, uint16_t hwColor)
{      	
 8002768:	b590      	push	{r4, r7, lr}
 800276a:	b085      	sub	sp, #20
 800276c:	af00      	add	r7, sp, #0
 800276e:	4604      	mov	r4, r0
 8002770:	4608      	mov	r0, r1
 8002772:	4611      	mov	r1, r2
 8002774:	461a      	mov	r2, r3
 8002776:	4623      	mov	r3, r4
 8002778:	71fb      	strb	r3, [r7, #7]
 800277a:	4603      	mov	r3, r0
 800277c:	71bb      	strb	r3, [r7, #6]
 800277e:	460b      	mov	r3, r1
 8002780:	717b      	strb	r3, [r7, #5]
 8002782:	4613      	mov	r3, r2
 8002784:	713b      	strb	r3, [r7, #4]
	uint8_t i, j, chTemp;
	uint8_t chYpos0 = chYpos;
 8002786:	79bb      	ldrb	r3, [r7, #6]
 8002788:	733b      	strb	r3, [r7, #12]

	chTemp = 0;
 800278a:	2300      	movs	r3, #0
 800278c:	737b      	strb	r3, [r7, #13]
	if (chXpos >= OLED_WIDTH || chYpos >= OLED_HEIGHT) {
 800278e:	79fb      	ldrb	r3, [r7, #7]
 8002790:	2b5f      	cmp	r3, #95	; 0x5f
 8002792:	d857      	bhi.n	8002844 <ssd1331_display_char+0xdc>
 8002794:	79bb      	ldrb	r3, [r7, #6]
 8002796:	2b3f      	cmp	r3, #63	; 0x3f
 8002798:	d854      	bhi.n	8002844 <ssd1331_display_char+0xdc>
		return;
	}
					   
    for (i = 0; i < chSize; i ++) {   
 800279a:	2300      	movs	r3, #0
 800279c:	73fb      	strb	r3, [r7, #15]
 800279e:	e04c      	b.n	800283a <ssd1331_display_char+0xd2>
		if (FONT_1206 == chSize) {
 80027a0:	793b      	ldrb	r3, [r7, #4]
 80027a2:	2b0c      	cmp	r3, #12
 80027a4:	d10d      	bne.n	80027c2 <ssd1331_display_char+0x5a>
			chTemp = c_chFont1206[chChr - 0x20][i];  
 80027a6:	797b      	ldrb	r3, [r7, #5]
 80027a8:	f1a3 0220 	sub.w	r2, r3, #32
 80027ac:	7bf9      	ldrb	r1, [r7, #15]
 80027ae:	4827      	ldr	r0, [pc, #156]	; (800284c <ssd1331_display_char+0xe4>)
 80027b0:	4613      	mov	r3, r2
 80027b2:	005b      	lsls	r3, r3, #1
 80027b4:	4413      	add	r3, r2
 80027b6:	009b      	lsls	r3, r3, #2
 80027b8:	4403      	add	r3, r0
 80027ba:	440b      	add	r3, r1
 80027bc:	781b      	ldrb	r3, [r3, #0]
 80027be:	737b      	strb	r3, [r7, #13]
 80027c0:	e00c      	b.n	80027dc <ssd1331_display_char+0x74>
		} else if (FONT_1608 == chSize) { 
 80027c2:	793b      	ldrb	r3, [r7, #4]
 80027c4:	2b10      	cmp	r3, #16
 80027c6:	d109      	bne.n	80027dc <ssd1331_display_char+0x74>
			chTemp = c_chFont1608[chChr - 0x20][i];
 80027c8:	797b      	ldrb	r3, [r7, #5]
 80027ca:	f1a3 0220 	sub.w	r2, r3, #32
 80027ce:	7bfb      	ldrb	r3, [r7, #15]
 80027d0:	491f      	ldr	r1, [pc, #124]	; (8002850 <ssd1331_display_char+0xe8>)
 80027d2:	0112      	lsls	r2, r2, #4
 80027d4:	440a      	add	r2, r1
 80027d6:	4413      	add	r3, r2
 80027d8:	781b      	ldrb	r3, [r3, #0]
 80027da:	737b      	strb	r3, [r7, #13]
		}
		
        for (j = 0; j < 8; j ++) {
 80027dc:	2300      	movs	r3, #0
 80027de:	73bb      	strb	r3, [r7, #14]
 80027e0:	e025      	b.n	800282e <ssd1331_display_char+0xc6>
    		if (chTemp & 0x80) {
 80027e2:	f997 300d 	ldrsb.w	r3, [r7, #13]
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	da06      	bge.n	80027f8 <ssd1331_display_char+0x90>
		  ssd1331_draw_point(chXpos, chYpos, hwColor);
 80027ea:	8c3a      	ldrh	r2, [r7, #32]
 80027ec:	79b9      	ldrb	r1, [r7, #6]
 80027ee:	79fb      	ldrb	r3, [r7, #7]
 80027f0:	4618      	mov	r0, r3
 80027f2:	f7ff ff7d 	bl	80026f0 <ssd1331_draw_point>
 80027f6:	e005      	b.n	8002804 <ssd1331_display_char+0x9c>
    		} else {
		  ssd1331_draw_point(chXpos, chYpos, 0);
 80027f8:	79b9      	ldrb	r1, [r7, #6]
 80027fa:	79fb      	ldrb	r3, [r7, #7]
 80027fc:	2200      	movs	r2, #0
 80027fe:	4618      	mov	r0, r3
 8002800:	f7ff ff76 	bl	80026f0 <ssd1331_draw_point>
		}		  
			chTemp <<= 1;
 8002804:	7b7b      	ldrb	r3, [r7, #13]
 8002806:	005b      	lsls	r3, r3, #1
 8002808:	737b      	strb	r3, [r7, #13]
			chYpos ++;
 800280a:	79bb      	ldrb	r3, [r7, #6]
 800280c:	3301      	adds	r3, #1
 800280e:	71bb      	strb	r3, [r7, #6]
			if ((chYpos - chYpos0) == chSize) {
 8002810:	79ba      	ldrb	r2, [r7, #6]
 8002812:	7b3b      	ldrb	r3, [r7, #12]
 8002814:	1ad2      	subs	r2, r2, r3
 8002816:	793b      	ldrb	r3, [r7, #4]
 8002818:	429a      	cmp	r2, r3
 800281a:	d105      	bne.n	8002828 <ssd1331_display_char+0xc0>
				chYpos = chYpos0;
 800281c:	7b3b      	ldrb	r3, [r7, #12]
 800281e:	71bb      	strb	r3, [r7, #6]
				chXpos ++;
 8002820:	79fb      	ldrb	r3, [r7, #7]
 8002822:	3301      	adds	r3, #1
 8002824:	71fb      	strb	r3, [r7, #7]
				break;
 8002826:	e005      	b.n	8002834 <ssd1331_display_char+0xcc>
        for (j = 0; j < 8; j ++) {
 8002828:	7bbb      	ldrb	r3, [r7, #14]
 800282a:	3301      	adds	r3, #1
 800282c:	73bb      	strb	r3, [r7, #14]
 800282e:	7bbb      	ldrb	r3, [r7, #14]
 8002830:	2b07      	cmp	r3, #7
 8002832:	d9d6      	bls.n	80027e2 <ssd1331_display_char+0x7a>
    for (i = 0; i < chSize; i ++) {   
 8002834:	7bfb      	ldrb	r3, [r7, #15]
 8002836:	3301      	adds	r3, #1
 8002838:	73fb      	strb	r3, [r7, #15]
 800283a:	7bfa      	ldrb	r2, [r7, #15]
 800283c:	793b      	ldrb	r3, [r7, #4]
 800283e:	429a      	cmp	r2, r3
 8002840:	d3ae      	bcc.n	80027a0 <ssd1331_display_char+0x38>
 8002842:	e000      	b.n	8002846 <ssd1331_display_char+0xde>
		return;
 8002844:	bf00      	nop
			}
		}  	 
    } 
}
 8002846:	3714      	adds	r7, #20
 8002848:	46bd      	mov	sp, r7
 800284a:	bd90      	pop	{r4, r7, pc}
 800284c:	0800c1b0 	.word	0x0800c1b0
 8002850:	0800c624 	.word	0x0800c624

08002854 <ssd1331_display_string>:
  * @param  pchString: Pointer to a string to display on the screen 
  *         
  * @retval  None
**/
void ssd1331_display_string(uint8_t chXpos, uint8_t chYpos, const char *pchString, uint8_t chSize, uint16_t hwColor)
{
 8002854:	b590      	push	{r4, r7, lr}
 8002856:	b085      	sub	sp, #20
 8002858:	af02      	add	r7, sp, #8
 800285a:	603a      	str	r2, [r7, #0]
 800285c:	461a      	mov	r2, r3
 800285e:	4603      	mov	r3, r0
 8002860:	71fb      	strb	r3, [r7, #7]
 8002862:	460b      	mov	r3, r1
 8002864:	71bb      	strb	r3, [r7, #6]
 8002866:	4613      	mov	r3, r2
 8002868:	717b      	strb	r3, [r7, #5]
	if (chXpos >= OLED_WIDTH || chYpos >= OLED_HEIGHT) {
 800286a:	79fb      	ldrb	r3, [r7, #7]
 800286c:	2b5f      	cmp	r3, #95	; 0x5f
 800286e:	d836      	bhi.n	80028de <ssd1331_display_string+0x8a>
 8002870:	79bb      	ldrb	r3, [r7, #6]
 8002872:	2b3f      	cmp	r3, #63	; 0x3f
 8002874:	d833      	bhi.n	80028de <ssd1331_display_string+0x8a>
		return;
	}
	
    while (*pchString != '\0') {       
 8002876:	e02d      	b.n	80028d4 <ssd1331_display_string+0x80>
        if (chXpos > (OLED_WIDTH - chSize / 2)) {
 8002878:	79fa      	ldrb	r2, [r7, #7]
 800287a:	797b      	ldrb	r3, [r7, #5]
 800287c:	085b      	lsrs	r3, r3, #1
 800287e:	b2db      	uxtb	r3, r3
 8002880:	f1c3 0360 	rsb	r3, r3, #96	; 0x60
 8002884:	429a      	cmp	r2, r3
 8002886:	dd12      	ble.n	80028ae <ssd1331_display_string+0x5a>
			chXpos = 0;
 8002888:	2300      	movs	r3, #0
 800288a:	71fb      	strb	r3, [r7, #7]
			chYpos += chSize;
 800288c:	79ba      	ldrb	r2, [r7, #6]
 800288e:	797b      	ldrb	r3, [r7, #5]
 8002890:	4413      	add	r3, r2
 8002892:	71bb      	strb	r3, [r7, #6]
			if (chYpos > (OLED_HEIGHT - chSize)) {
 8002894:	79ba      	ldrb	r2, [r7, #6]
 8002896:	797b      	ldrb	r3, [r7, #5]
 8002898:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 800289c:	429a      	cmp	r2, r3
 800289e:	dd06      	ble.n	80028ae <ssd1331_display_string+0x5a>
				chYpos = chXpos = 0;
 80028a0:	2300      	movs	r3, #0
 80028a2:	71fb      	strb	r3, [r7, #7]
 80028a4:	79fb      	ldrb	r3, [r7, #7]
 80028a6:	71bb      	strb	r3, [r7, #6]
				ssd1331_clear_screen(0x00);
 80028a8:	2000      	movs	r0, #0
 80028aa:	f000 f81c 	bl	80028e6 <ssd1331_clear_screen>
			}
		}
		
        ssd1331_display_char(chXpos, chYpos, *pchString, chSize, hwColor);
 80028ae:	683b      	ldr	r3, [r7, #0]
 80028b0:	781a      	ldrb	r2, [r3, #0]
 80028b2:	797c      	ldrb	r4, [r7, #5]
 80028b4:	79b9      	ldrb	r1, [r7, #6]
 80028b6:	79f8      	ldrb	r0, [r7, #7]
 80028b8:	8b3b      	ldrh	r3, [r7, #24]
 80028ba:	9300      	str	r3, [sp, #0]
 80028bc:	4623      	mov	r3, r4
 80028be:	f7ff ff53 	bl	8002768 <ssd1331_display_char>
        chXpos += chSize / 2;
 80028c2:	797b      	ldrb	r3, [r7, #5]
 80028c4:	085b      	lsrs	r3, r3, #1
 80028c6:	b2da      	uxtb	r2, r3
 80028c8:	79fb      	ldrb	r3, [r7, #7]
 80028ca:	4413      	add	r3, r2
 80028cc:	71fb      	strb	r3, [r7, #7]
        pchString ++;
 80028ce:	683b      	ldr	r3, [r7, #0]
 80028d0:	3301      	adds	r3, #1
 80028d2:	603b      	str	r3, [r7, #0]
    while (*pchString != '\0') {       
 80028d4:	683b      	ldr	r3, [r7, #0]
 80028d6:	781b      	ldrb	r3, [r3, #0]
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d1cd      	bne.n	8002878 <ssd1331_display_string+0x24>
 80028dc:	e000      	b.n	80028e0 <ssd1331_display_string+0x8c>
		return;
 80028de:	bf00      	nop
    } 
}
 80028e0:	370c      	adds	r7, #12
 80028e2:	46bd      	mov	sp, r7
 80028e4:	bd90      	pop	{r4, r7, pc}

080028e6 <ssd1331_clear_screen>:
        }
    }
}

void ssd1331_clear_screen(uint16_t hwColor)  
{
 80028e6:	b580      	push	{r7, lr}
 80028e8:	b084      	sub	sp, #16
 80028ea:	af00      	add	r7, sp, #0
 80028ec:	4603      	mov	r3, r0
 80028ee:	80fb      	strh	r3, [r7, #6]
	uint16_t i, j;
	
	for(i = 0; i < OLED_HEIGHT; i ++){
 80028f0:	2300      	movs	r3, #0
 80028f2:	81fb      	strh	r3, [r7, #14]
 80028f4:	e013      	b.n	800291e <ssd1331_clear_screen+0x38>
		for(j = 0; j < OLED_WIDTH; j ++){
 80028f6:	2300      	movs	r3, #0
 80028f8:	81bb      	strh	r3, [r7, #12]
 80028fa:	e00a      	b.n	8002912 <ssd1331_clear_screen+0x2c>
			ssd1331_draw_point(j, i, hwColor);
 80028fc:	89bb      	ldrh	r3, [r7, #12]
 80028fe:	b2db      	uxtb	r3, r3
 8002900:	89fa      	ldrh	r2, [r7, #14]
 8002902:	b2d1      	uxtb	r1, r2
 8002904:	88fa      	ldrh	r2, [r7, #6]
 8002906:	4618      	mov	r0, r3
 8002908:	f7ff fef2 	bl	80026f0 <ssd1331_draw_point>
		for(j = 0; j < OLED_WIDTH; j ++){
 800290c:	89bb      	ldrh	r3, [r7, #12]
 800290e:	3301      	adds	r3, #1
 8002910:	81bb      	strh	r3, [r7, #12]
 8002912:	89bb      	ldrh	r3, [r7, #12]
 8002914:	2b5f      	cmp	r3, #95	; 0x5f
 8002916:	d9f1      	bls.n	80028fc <ssd1331_clear_screen+0x16>
	for(i = 0; i < OLED_HEIGHT; i ++){
 8002918:	89fb      	ldrh	r3, [r7, #14]
 800291a:	3301      	adds	r3, #1
 800291c:	81fb      	strh	r3, [r7, #14]
 800291e:	89fb      	ldrh	r3, [r7, #14]
 8002920:	2b3f      	cmp	r3, #63	; 0x3f
 8002922:	d9e8      	bls.n	80028f6 <ssd1331_clear_screen+0x10>
		}
	}
}
 8002924:	bf00      	nop
 8002926:	bf00      	nop
 8002928:	3710      	adds	r7, #16
 800292a:	46bd      	mov	sp, r7
 800292c:	bd80      	pop	{r7, pc}
	...

08002930 <ssd1331_init>:


void ssd1331_init(void)
{
 8002930:	b580      	push	{r7, lr}
 8002932:	af00      	add	r7, sp, #0
  __SSD1331_RES_SET();  //RES set
 8002934:	2201      	movs	r2, #1
 8002936:	2140      	movs	r1, #64	; 0x40
 8002938:	4852      	ldr	r0, [pc, #328]	; (8002a84 <ssd1331_init+0x154>)
 800293a:	f000 fe07 	bl	800354c <HAL_GPIO_WritePin>
  __SSD1331_CS_SET();
 800293e:	2201      	movs	r2, #1
 8002940:	2110      	movs	r1, #16
 8002942:	4850      	ldr	r0, [pc, #320]	; (8002a84 <ssd1331_init+0x154>)
 8002944:	f000 fe02 	bl	800354c <HAL_GPIO_WritePin>
	
  ssd1331_write_byte(DISPLAY_OFF, SSD1331_CMD);          //Display Off
 8002948:	2100      	movs	r1, #0
 800294a:	20ae      	movs	r0, #174	; 0xae
 800294c:	f7ff fe9c 	bl	8002688 <ssd1331_write_byte>
  ssd1331_write_byte(SET_CONTRAST_A, SSD1331_CMD);       //Set contrast for color A
 8002950:	2100      	movs	r1, #0
 8002952:	2081      	movs	r0, #129	; 0x81
 8002954:	f7ff fe98 	bl	8002688 <ssd1331_write_byte>
  ssd1331_write_byte(0xFF, SSD1331_CMD);                     //145 0x91
 8002958:	2100      	movs	r1, #0
 800295a:	20ff      	movs	r0, #255	; 0xff
 800295c:	f7ff fe94 	bl	8002688 <ssd1331_write_byte>
  ssd1331_write_byte(SET_CONTRAST_B, SSD1331_CMD);       //Set contrast for color B
 8002960:	2100      	movs	r1, #0
 8002962:	2082      	movs	r0, #130	; 0x82
 8002964:	f7ff fe90 	bl	8002688 <ssd1331_write_byte>
  ssd1331_write_byte(0xFF, SSD1331_CMD);                     //80 0x50
 8002968:	2100      	movs	r1, #0
 800296a:	20ff      	movs	r0, #255	; 0xff
 800296c:	f7ff fe8c 	bl	8002688 <ssd1331_write_byte>
  ssd1331_write_byte(SET_CONTRAST_C, SSD1331_CMD);       //Set contrast for color C
 8002970:	2100      	movs	r1, #0
 8002972:	2083      	movs	r0, #131	; 0x83
 8002974:	f7ff fe88 	bl	8002688 <ssd1331_write_byte>
  ssd1331_write_byte(0xFF, SSD1331_CMD);                     //125 0x7D
 8002978:	2100      	movs	r1, #0
 800297a:	20ff      	movs	r0, #255	; 0xff
 800297c:	f7ff fe84 	bl	8002688 <ssd1331_write_byte>
  ssd1331_write_byte(MASTER_CURRENT_CONTROL, SSD1331_CMD);//master current control
 8002980:	2100      	movs	r1, #0
 8002982:	2087      	movs	r0, #135	; 0x87
 8002984:	f7ff fe80 	bl	8002688 <ssd1331_write_byte>
  ssd1331_write_byte(0x06, SSD1331_CMD);                     //6
 8002988:	2100      	movs	r1, #0
 800298a:	2006      	movs	r0, #6
 800298c:	f7ff fe7c 	bl	8002688 <ssd1331_write_byte>
  ssd1331_write_byte(SET_PRECHARGE_SPEED_A, SSD1331_CMD);//Set Second Pre-change Speed For ColorA
 8002990:	2100      	movs	r1, #0
 8002992:	208a      	movs	r0, #138	; 0x8a
 8002994:	f7ff fe78 	bl	8002688 <ssd1331_write_byte>
  ssd1331_write_byte(0x64, SSD1331_CMD);                     //100
 8002998:	2100      	movs	r1, #0
 800299a:	2064      	movs	r0, #100	; 0x64
 800299c:	f7ff fe74 	bl	8002688 <ssd1331_write_byte>
  ssd1331_write_byte(SET_PRECHARGE_SPEED_B, SSD1331_CMD);//Set Second Pre-change Speed For ColorB
 80029a0:	2100      	movs	r1, #0
 80029a2:	208b      	movs	r0, #139	; 0x8b
 80029a4:	f7ff fe70 	bl	8002688 <ssd1331_write_byte>
  ssd1331_write_byte(0x78, SSD1331_CMD);                     //120
 80029a8:	2100      	movs	r1, #0
 80029aa:	2078      	movs	r0, #120	; 0x78
 80029ac:	f7ff fe6c 	bl	8002688 <ssd1331_write_byte>
  ssd1331_write_byte(SET_PRECHARGE_SPEED_C, SSD1331_CMD);//Set Second Pre-change Speed For ColorC
 80029b0:	2100      	movs	r1, #0
 80029b2:	208c      	movs	r0, #140	; 0x8c
 80029b4:	f7ff fe68 	bl	8002688 <ssd1331_write_byte>
  ssd1331_write_byte(0x64, SSD1331_CMD);                     //100
 80029b8:	2100      	movs	r1, #0
 80029ba:	2064      	movs	r0, #100	; 0x64
 80029bc:	f7ff fe64 	bl	8002688 <ssd1331_write_byte>
  ssd1331_write_byte(SET_REMAP, SSD1331_CMD);            //set remap & data format
 80029c0:	2100      	movs	r1, #0
 80029c2:	20a0      	movs	r0, #160	; 0xa0
 80029c4:	f7ff fe60 	bl	8002688 <ssd1331_write_byte>
  ssd1331_write_byte(0x72, SSD1331_CMD);                     //0x72              
 80029c8:	2100      	movs	r1, #0
 80029ca:	2072      	movs	r0, #114	; 0x72
 80029cc:	f7ff fe5c 	bl	8002688 <ssd1331_write_byte>
  ssd1331_write_byte(SET_DISPLAY_START_LINE, SSD1331_CMD);//Set display Start Line
 80029d0:	2100      	movs	r1, #0
 80029d2:	20a1      	movs	r0, #161	; 0xa1
 80029d4:	f7ff fe58 	bl	8002688 <ssd1331_write_byte>
  ssd1331_write_byte(0x0, SSD1331_CMD);
 80029d8:	2100      	movs	r1, #0
 80029da:	2000      	movs	r0, #0
 80029dc:	f7ff fe54 	bl	8002688 <ssd1331_write_byte>
  ssd1331_write_byte(SET_DISPLAY_OFFSET, SSD1331_CMD);   //Set display offset
 80029e0:	2100      	movs	r1, #0
 80029e2:	20a2      	movs	r0, #162	; 0xa2
 80029e4:	f7ff fe50 	bl	8002688 <ssd1331_write_byte>
  ssd1331_write_byte(0x0, SSD1331_CMD);
 80029e8:	2100      	movs	r1, #0
 80029ea:	2000      	movs	r0, #0
 80029ec:	f7ff fe4c 	bl	8002688 <ssd1331_write_byte>
  ssd1331_write_byte(NORMAL_DISPLAY, SSD1331_CMD);       //Set display mode
 80029f0:	2100      	movs	r1, #0
 80029f2:	20a4      	movs	r0, #164	; 0xa4
 80029f4:	f7ff fe48 	bl	8002688 <ssd1331_write_byte>
  ssd1331_write_byte(SET_MULTIPLEX_RATIO, SSD1331_CMD);  //Set multiplex ratio
 80029f8:	2100      	movs	r1, #0
 80029fa:	20a8      	movs	r0, #168	; 0xa8
 80029fc:	f7ff fe44 	bl	8002688 <ssd1331_write_byte>
  ssd1331_write_byte(0x3F, SSD1331_CMD);
 8002a00:	2100      	movs	r1, #0
 8002a02:	203f      	movs	r0, #63	; 0x3f
 8002a04:	f7ff fe40 	bl	8002688 <ssd1331_write_byte>
  ssd1331_write_byte(SET_MASTER_CONFIGURE, SSD1331_CMD); //Set master configuration
 8002a08:	2100      	movs	r1, #0
 8002a0a:	20ad      	movs	r0, #173	; 0xad
 8002a0c:	f7ff fe3c 	bl	8002688 <ssd1331_write_byte>
  ssd1331_write_byte(0x8E, SSD1331_CMD);
 8002a10:	2100      	movs	r1, #0
 8002a12:	208e      	movs	r0, #142	; 0x8e
 8002a14:	f7ff fe38 	bl	8002688 <ssd1331_write_byte>
  ssd1331_write_byte(POWER_SAVE_MODE, SSD1331_CMD);      //Set Power Save Mode
 8002a18:	2100      	movs	r1, #0
 8002a1a:	20b0      	movs	r0, #176	; 0xb0
 8002a1c:	f7ff fe34 	bl	8002688 <ssd1331_write_byte>
  ssd1331_write_byte(0x00, SSD1331_CMD);                     //0x00
 8002a20:	2100      	movs	r1, #0
 8002a22:	2000      	movs	r0, #0
 8002a24:	f7ff fe30 	bl	8002688 <ssd1331_write_byte>
  ssd1331_write_byte(PHASE_PERIOD_ADJUSTMENT, SSD1331_CMD);//phase 1 and 2 period adjustment
 8002a28:	2100      	movs	r1, #0
 8002a2a:	20b1      	movs	r0, #177	; 0xb1
 8002a2c:	f7ff fe2c 	bl	8002688 <ssd1331_write_byte>
  ssd1331_write_byte(0x31, SSD1331_CMD);                     //0x31
 8002a30:	2100      	movs	r1, #0
 8002a32:	2031      	movs	r0, #49	; 0x31
 8002a34:	f7ff fe28 	bl	8002688 <ssd1331_write_byte>
  ssd1331_write_byte(DISPLAY_CLOCK_DIV, SSD1331_CMD);    //display clock divider/oscillator frequency
 8002a38:	2100      	movs	r1, #0
 8002a3a:	20b3      	movs	r0, #179	; 0xb3
 8002a3c:	f7ff fe24 	bl	8002688 <ssd1331_write_byte>
  ssd1331_write_byte(0xF0, SSD1331_CMD);
 8002a40:	2100      	movs	r1, #0
 8002a42:	20f0      	movs	r0, #240	; 0xf0
 8002a44:	f7ff fe20 	bl	8002688 <ssd1331_write_byte>
  ssd1331_write_byte(SET_PRECHARGE_VOLTAGE, SSD1331_CMD);//Set Pre-Change Level
 8002a48:	2100      	movs	r1, #0
 8002a4a:	20bb      	movs	r0, #187	; 0xbb
 8002a4c:	f7ff fe1c 	bl	8002688 <ssd1331_write_byte>
  ssd1331_write_byte(0x3A, SSD1331_CMD);
 8002a50:	2100      	movs	r1, #0
 8002a52:	203a      	movs	r0, #58	; 0x3a
 8002a54:	f7ff fe18 	bl	8002688 <ssd1331_write_byte>
  ssd1331_write_byte(SET_V_VOLTAGE, SSD1331_CMD);        //Set vcomH
 8002a58:	2100      	movs	r1, #0
 8002a5a:	20be      	movs	r0, #190	; 0xbe
 8002a5c:	f7ff fe14 	bl	8002688 <ssd1331_write_byte>
  ssd1331_write_byte(0x3E, SSD1331_CMD);
 8002a60:	2100      	movs	r1, #0
 8002a62:	203e      	movs	r0, #62	; 0x3e
 8002a64:	f7ff fe10 	bl	8002688 <ssd1331_write_byte>
  ssd1331_write_byte(DEACTIVE_SCROLLING, SSD1331_CMD);   //disable scrolling
 8002a68:	2100      	movs	r1, #0
 8002a6a:	202e      	movs	r0, #46	; 0x2e
 8002a6c:	f7ff fe0c 	bl	8002688 <ssd1331_write_byte>
  ssd1331_write_byte(NORMAL_BRIGHTNESS_DISPLAY_ON, SSD1331_CMD);//set display on
 8002a70:	2100      	movs	r1, #0
 8002a72:	20af      	movs	r0, #175	; 0xaf
 8002a74:	f7ff fe08 	bl	8002688 <ssd1331_write_byte>
  
  //ssd1331_fill_rect(0, 0, 96, 64, 0x0000);
  ssd1331_clear_screen(0x0000);
 8002a78:	2000      	movs	r0, #0
 8002a7a:	f7ff ff34 	bl	80028e6 <ssd1331_clear_screen>
}
 8002a7e:	bf00      	nop
 8002a80:	bd80      	pop	{r7, pc}
 8002a82:	bf00      	nop
 8002a84:	48000400 	.word	0x48000400

08002a88 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002a88:	b480      	push	{r7}
 8002a8a:	b083      	sub	sp, #12
 8002a8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002a8e:	4b0f      	ldr	r3, [pc, #60]	; (8002acc <HAL_MspInit+0x44>)
 8002a90:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002a92:	4a0e      	ldr	r2, [pc, #56]	; (8002acc <HAL_MspInit+0x44>)
 8002a94:	f043 0301 	orr.w	r3, r3, #1
 8002a98:	6613      	str	r3, [r2, #96]	; 0x60
 8002a9a:	4b0c      	ldr	r3, [pc, #48]	; (8002acc <HAL_MspInit+0x44>)
 8002a9c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002a9e:	f003 0301 	and.w	r3, r3, #1
 8002aa2:	607b      	str	r3, [r7, #4]
 8002aa4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002aa6:	4b09      	ldr	r3, [pc, #36]	; (8002acc <HAL_MspInit+0x44>)
 8002aa8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002aaa:	4a08      	ldr	r2, [pc, #32]	; (8002acc <HAL_MspInit+0x44>)
 8002aac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ab0:	6593      	str	r3, [r2, #88]	; 0x58
 8002ab2:	4b06      	ldr	r3, [pc, #24]	; (8002acc <HAL_MspInit+0x44>)
 8002ab4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ab6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002aba:	603b      	str	r3, [r7, #0]
 8002abc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002abe:	bf00      	nop
 8002ac0:	370c      	adds	r7, #12
 8002ac2:	46bd      	mov	sp, r7
 8002ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac8:	4770      	bx	lr
 8002aca:	bf00      	nop
 8002acc:	40021000 	.word	0x40021000

08002ad0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002ad0:	b580      	push	{r7, lr}
 8002ad2:	b08a      	sub	sp, #40	; 0x28
 8002ad4:	af00      	add	r7, sp, #0
 8002ad6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ad8:	f107 0314 	add.w	r3, r7, #20
 8002adc:	2200      	movs	r2, #0
 8002ade:	601a      	str	r2, [r3, #0]
 8002ae0:	605a      	str	r2, [r3, #4]
 8002ae2:	609a      	str	r2, [r3, #8]
 8002ae4:	60da      	str	r2, [r3, #12]
 8002ae6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	4a18      	ldr	r2, [pc, #96]	; (8002b50 <HAL_SPI_MspInit+0x80>)
 8002aee:	4293      	cmp	r3, r2
 8002af0:	d129      	bne.n	8002b46 <HAL_SPI_MspInit+0x76>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002af2:	4b18      	ldr	r3, [pc, #96]	; (8002b54 <HAL_SPI_MspInit+0x84>)
 8002af4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002af6:	4a17      	ldr	r2, [pc, #92]	; (8002b54 <HAL_SPI_MspInit+0x84>)
 8002af8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002afc:	6613      	str	r3, [r2, #96]	; 0x60
 8002afe:	4b15      	ldr	r3, [pc, #84]	; (8002b54 <HAL_SPI_MspInit+0x84>)
 8002b00:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b02:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002b06:	613b      	str	r3, [r7, #16]
 8002b08:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b0a:	4b12      	ldr	r3, [pc, #72]	; (8002b54 <HAL_SPI_MspInit+0x84>)
 8002b0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b0e:	4a11      	ldr	r2, [pc, #68]	; (8002b54 <HAL_SPI_MspInit+0x84>)
 8002b10:	f043 0301 	orr.w	r3, r3, #1
 8002b14:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002b16:	4b0f      	ldr	r3, [pc, #60]	; (8002b54 <HAL_SPI_MspInit+0x84>)
 8002b18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b1a:	f003 0301 	and.w	r3, r3, #1
 8002b1e:	60fb      	str	r3, [r7, #12]
 8002b20:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA12     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_12;
 8002b22:	f44f 5381 	mov.w	r3, #4128	; 0x1020
 8002b26:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b28:	2302      	movs	r3, #2
 8002b2a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b2c:	2300      	movs	r3, #0
 8002b2e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b30:	2303      	movs	r3, #3
 8002b32:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002b34:	2305      	movs	r3, #5
 8002b36:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b38:	f107 0314 	add.w	r3, r7, #20
 8002b3c:	4619      	mov	r1, r3
 8002b3e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002b42:	f000 fb81 	bl	8003248 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8002b46:	bf00      	nop
 8002b48:	3728      	adds	r7, #40	; 0x28
 8002b4a:	46bd      	mov	sp, r7
 8002b4c:	bd80      	pop	{r7, pc}
 8002b4e:	bf00      	nop
 8002b50:	40013000 	.word	0x40013000
 8002b54:	40021000 	.word	0x40021000

08002b58 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8002b58:	b480      	push	{r7}
 8002b5a:	b085      	sub	sp, #20
 8002b5c:	af00      	add	r7, sp, #0
 8002b5e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	4a0a      	ldr	r2, [pc, #40]	; (8002b90 <HAL_TIM_PWM_MspInit+0x38>)
 8002b66:	4293      	cmp	r3, r2
 8002b68:	d10b      	bne.n	8002b82 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002b6a:	4b0a      	ldr	r3, [pc, #40]	; (8002b94 <HAL_TIM_PWM_MspInit+0x3c>)
 8002b6c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b6e:	4a09      	ldr	r2, [pc, #36]	; (8002b94 <HAL_TIM_PWM_MspInit+0x3c>)
 8002b70:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002b74:	6613      	str	r3, [r2, #96]	; 0x60
 8002b76:	4b07      	ldr	r3, [pc, #28]	; (8002b94 <HAL_TIM_PWM_MspInit+0x3c>)
 8002b78:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b7a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002b7e:	60fb      	str	r3, [r7, #12]
 8002b80:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8002b82:	bf00      	nop
 8002b84:	3714      	adds	r7, #20
 8002b86:	46bd      	mov	sp, r7
 8002b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b8c:	4770      	bx	lr
 8002b8e:	bf00      	nop
 8002b90:	40012c00 	.word	0x40012c00
 8002b94:	40021000 	.word	0x40021000

08002b98 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002b98:	b580      	push	{r7, lr}
 8002b9a:	b088      	sub	sp, #32
 8002b9c:	af00      	add	r7, sp, #0
 8002b9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ba0:	f107 030c 	add.w	r3, r7, #12
 8002ba4:	2200      	movs	r2, #0
 8002ba6:	601a      	str	r2, [r3, #0]
 8002ba8:	605a      	str	r2, [r3, #4]
 8002baa:	609a      	str	r2, [r3, #8]
 8002bac:	60da      	str	r2, [r3, #12]
 8002bae:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	4a11      	ldr	r2, [pc, #68]	; (8002bfc <HAL_TIM_MspPostInit+0x64>)
 8002bb6:	4293      	cmp	r3, r2
 8002bb8:	d11c      	bne.n	8002bf4 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002bba:	4b11      	ldr	r3, [pc, #68]	; (8002c00 <HAL_TIM_MspPostInit+0x68>)
 8002bbc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002bbe:	4a10      	ldr	r2, [pc, #64]	; (8002c00 <HAL_TIM_MspPostInit+0x68>)
 8002bc0:	f043 0301 	orr.w	r3, r3, #1
 8002bc4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002bc6:	4b0e      	ldr	r3, [pc, #56]	; (8002c00 <HAL_TIM_MspPostInit+0x68>)
 8002bc8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002bca:	f003 0301 	and.w	r3, r3, #1
 8002bce:	60bb      	str	r3, [r7, #8]
 8002bd0:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA7     ------> TIM1_CH1N
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8002bd2:	2380      	movs	r3, #128	; 0x80
 8002bd4:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bd6:	2302      	movs	r3, #2
 8002bd8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bda:	2300      	movs	r3, #0
 8002bdc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002bde:	2300      	movs	r3, #0
 8002be0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002be2:	2301      	movs	r3, #1
 8002be4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002be6:	f107 030c 	add.w	r3, r7, #12
 8002bea:	4619      	mov	r1, r3
 8002bec:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002bf0:	f000 fb2a 	bl	8003248 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8002bf4:	bf00      	nop
 8002bf6:	3720      	adds	r7, #32
 8002bf8:	46bd      	mov	sp, r7
 8002bfa:	bd80      	pop	{r7, pc}
 8002bfc:	40012c00 	.word	0x40012c00
 8002c00:	40021000 	.word	0x40021000

08002c04 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002c04:	b580      	push	{r7, lr}
 8002c06:	b09e      	sub	sp, #120	; 0x78
 8002c08:	af00      	add	r7, sp, #0
 8002c0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c0c:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8002c10:	2200      	movs	r2, #0
 8002c12:	601a      	str	r2, [r3, #0]
 8002c14:	605a      	str	r2, [r3, #4]
 8002c16:	609a      	str	r2, [r3, #8]
 8002c18:	60da      	str	r2, [r3, #12]
 8002c1a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002c1c:	f107 0310 	add.w	r3, r7, #16
 8002c20:	2254      	movs	r2, #84	; 0x54
 8002c22:	2100      	movs	r1, #0
 8002c24:	4618      	mov	r0, r3
 8002c26:	f003 fcc5 	bl	80065b4 <memset>
  if(huart->Instance==USART2)
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	4a28      	ldr	r2, [pc, #160]	; (8002cd0 <HAL_UART_MspInit+0xcc>)
 8002c30:	4293      	cmp	r3, r2
 8002c32:	d148      	bne.n	8002cc6 <HAL_UART_MspInit+0xc2>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8002c34:	2302      	movs	r3, #2
 8002c36:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8002c38:	2300      	movs	r3, #0
 8002c3a:	637b      	str	r3, [r7, #52]	; 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002c3c:	f107 0310 	add.w	r3, r7, #16
 8002c40:	4618      	mov	r0, r3
 8002c42:	f001 fb47 	bl	80042d4 <HAL_RCCEx_PeriphCLKConfig>
 8002c46:	4603      	mov	r3, r0
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d001      	beq.n	8002c50 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002c4c:	f7ff fd16 	bl	800267c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002c50:	4b20      	ldr	r3, [pc, #128]	; (8002cd4 <HAL_UART_MspInit+0xd0>)
 8002c52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c54:	4a1f      	ldr	r2, [pc, #124]	; (8002cd4 <HAL_UART_MspInit+0xd0>)
 8002c56:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002c5a:	6593      	str	r3, [r2, #88]	; 0x58
 8002c5c:	4b1d      	ldr	r3, [pc, #116]	; (8002cd4 <HAL_UART_MspInit+0xd0>)
 8002c5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c60:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c64:	60fb      	str	r3, [r7, #12]
 8002c66:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c68:	4b1a      	ldr	r3, [pc, #104]	; (8002cd4 <HAL_UART_MspInit+0xd0>)
 8002c6a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c6c:	4a19      	ldr	r2, [pc, #100]	; (8002cd4 <HAL_UART_MspInit+0xd0>)
 8002c6e:	f043 0301 	orr.w	r3, r3, #1
 8002c72:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002c74:	4b17      	ldr	r3, [pc, #92]	; (8002cd4 <HAL_UART_MspInit+0xd0>)
 8002c76:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c78:	f003 0301 	and.w	r3, r3, #1
 8002c7c:	60bb      	str	r3, [r7, #8]
 8002c7e:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15 (JTDI)     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 8002c80:	2304      	movs	r3, #4
 8002c82:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c84:	2302      	movs	r3, #2
 8002c86:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c88:	2300      	movs	r3, #0
 8002c8a:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c8c:	2303      	movs	r3, #3
 8002c8e:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002c90:	2307      	movs	r3, #7
 8002c92:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8002c94:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8002c98:	4619      	mov	r1, r3
 8002c9a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002c9e:	f000 fad3 	bl	8003248 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_RX_Pin;
 8002ca2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002ca6:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ca8:	2302      	movs	r3, #2
 8002caa:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cac:	2300      	movs	r3, #0
 8002cae:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002cb0:	2303      	movs	r3, #3
 8002cb2:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 8002cb4:	2303      	movs	r3, #3
 8002cb6:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8002cb8:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8002cbc:	4619      	mov	r1, r3
 8002cbe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002cc2:	f000 fac1 	bl	8003248 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002cc6:	bf00      	nop
 8002cc8:	3778      	adds	r7, #120	; 0x78
 8002cca:	46bd      	mov	sp, r7
 8002ccc:	bd80      	pop	{r7, pc}
 8002cce:	bf00      	nop
 8002cd0:	40004400 	.word	0x40004400
 8002cd4:	40021000 	.word	0x40021000

08002cd8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002cd8:	b480      	push	{r7}
 8002cda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002cdc:	e7fe      	b.n	8002cdc <NMI_Handler+0x4>

08002cde <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002cde:	b480      	push	{r7}
 8002ce0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002ce2:	e7fe      	b.n	8002ce2 <HardFault_Handler+0x4>

08002ce4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002ce4:	b480      	push	{r7}
 8002ce6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002ce8:	e7fe      	b.n	8002ce8 <MemManage_Handler+0x4>

08002cea <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002cea:	b480      	push	{r7}
 8002cec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002cee:	e7fe      	b.n	8002cee <BusFault_Handler+0x4>

08002cf0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002cf0:	b480      	push	{r7}
 8002cf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002cf4:	e7fe      	b.n	8002cf4 <UsageFault_Handler+0x4>

08002cf6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002cf6:	b480      	push	{r7}
 8002cf8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002cfa:	bf00      	nop
 8002cfc:	46bd      	mov	sp, r7
 8002cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d02:	4770      	bx	lr

08002d04 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002d04:	b480      	push	{r7}
 8002d06:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002d08:	bf00      	nop
 8002d0a:	46bd      	mov	sp, r7
 8002d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d10:	4770      	bx	lr

08002d12 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002d12:	b480      	push	{r7}
 8002d14:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002d16:	bf00      	nop
 8002d18:	46bd      	mov	sp, r7
 8002d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d1e:	4770      	bx	lr

08002d20 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002d20:	b580      	push	{r7, lr}
 8002d22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002d24:	f000 f966 	bl	8002ff4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002d28:	bf00      	nop
 8002d2a:	bd80      	pop	{r7, pc}

08002d2c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002d2c:	b480      	push	{r7}
 8002d2e:	af00      	add	r7, sp, #0
	return 1;
 8002d30:	2301      	movs	r3, #1
}
 8002d32:	4618      	mov	r0, r3
 8002d34:	46bd      	mov	sp, r7
 8002d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d3a:	4770      	bx	lr

08002d3c <_kill>:

int _kill(int pid, int sig)
{
 8002d3c:	b580      	push	{r7, lr}
 8002d3e:	b082      	sub	sp, #8
 8002d40:	af00      	add	r7, sp, #0
 8002d42:	6078      	str	r0, [r7, #4]
 8002d44:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002d46:	f003 fbf5 	bl	8006534 <__errno>
 8002d4a:	4603      	mov	r3, r0
 8002d4c:	2216      	movs	r2, #22
 8002d4e:	601a      	str	r2, [r3, #0]
	return -1;
 8002d50:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002d54:	4618      	mov	r0, r3
 8002d56:	3708      	adds	r7, #8
 8002d58:	46bd      	mov	sp, r7
 8002d5a:	bd80      	pop	{r7, pc}

08002d5c <_exit>:

void _exit (int status)
{
 8002d5c:	b580      	push	{r7, lr}
 8002d5e:	b082      	sub	sp, #8
 8002d60:	af00      	add	r7, sp, #0
 8002d62:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002d64:	f04f 31ff 	mov.w	r1, #4294967295
 8002d68:	6878      	ldr	r0, [r7, #4]
 8002d6a:	f7ff ffe7 	bl	8002d3c <_kill>
	while (1) {}		/* Make sure we hang here */
 8002d6e:	e7fe      	b.n	8002d6e <_exit+0x12>

08002d70 <_read>:
}

int _read (int file, char *ptr, int len)
{
 8002d70:	b580      	push	{r7, lr}
 8002d72:	b086      	sub	sp, #24
 8002d74:	af00      	add	r7, sp, #0
 8002d76:	60f8      	str	r0, [r7, #12]
 8002d78:	60b9      	str	r1, [r7, #8]
 8002d7a:	607a      	str	r2, [r7, #4]
//	}

	// Conestoga College implemented change to cause VCP to be used for stdin
	extern UART_HandleTypeDef huart2;

	int returnVal= 0;
 8002d7c:	2300      	movs	r3, #0
 8002d7e:	617b      	str	r3, [r7, #20]
	len = 1;						// over ride the read and only get 1 char
 8002d80:	2301      	movs	r3, #1
 8002d82:	607b      	str	r3, [r7, #4]

	returnVal = HAL_UART_Receive(&huart2, (uint8_t *)ptr, len, 0xffffffff);
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	b29a      	uxth	r2, r3
 8002d88:	f04f 33ff 	mov.w	r3, #4294967295
 8002d8c:	68b9      	ldr	r1, [r7, #8]
 8002d8e:	480a      	ldr	r0, [pc, #40]	; (8002db8 <_read+0x48>)
 8002d90:	f002 ff1c 	bl	8005bcc <HAL_UART_Receive>
 8002d94:	4603      	mov	r3, r0
 8002d96:	617b      	str	r3, [r7, #20]
	if( returnVal == HAL_OK )
 8002d98:	697b      	ldr	r3, [r7, #20]
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d101      	bne.n	8002da2 <_read+0x32>
		return len;
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	e006      	b.n	8002db0 <_read+0x40>
	else if( returnVal == HAL_TIMEOUT )
 8002da2:	697b      	ldr	r3, [r7, #20]
 8002da4:	2b03      	cmp	r3, #3
 8002da6:	d101      	bne.n	8002dac <_read+0x3c>
		return 0;
 8002da8:	2300      	movs	r3, #0
 8002daa:	e001      	b.n	8002db0 <_read+0x40>
	else
		return EOF;
 8002dac:	f04f 33ff 	mov.w	r3, #4294967295

}
 8002db0:	4618      	mov	r0, r3
 8002db2:	3718      	adds	r7, #24
 8002db4:	46bd      	mov	sp, r7
 8002db6:	bd80      	pop	{r7, pc}
 8002db8:	200002ac 	.word	0x200002ac

08002dbc <_write>:

int _write(int file, char *ptr, int len){
 8002dbc:	b580      	push	{r7, lr}
 8002dbe:	b086      	sub	sp, #24
 8002dc0:	af00      	add	r7, sp, #0
 8002dc2:	60f8      	str	r0, [r7, #12]
 8002dc4:	60b9      	str	r1, [r7, #8]
 8002dc6:	607a      	str	r2, [r7, #4]
	extern UART_HandleTypeDef huart2;
	HAL_StatusTypeDef result = HAL_OK;
 8002dc8:	2300      	movs	r3, #0
 8002dca:	75fb      	strb	r3, [r7, #23]
	result = HAL_UART_Transmit(&huart2, (uint8_t *)ptr, len, HAL_MAX_DELAY);
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	b29a      	uxth	r2, r3
 8002dd0:	f04f 33ff 	mov.w	r3, #4294967295
 8002dd4:	68b9      	ldr	r1, [r7, #8]
 8002dd6:	4809      	ldr	r0, [pc, #36]	; (8002dfc <_write+0x40>)
 8002dd8:	f002 fe64 	bl	8005aa4 <HAL_UART_Transmit>
 8002ddc:	4603      	mov	r3, r0
 8002dde:	75fb      	strb	r3, [r7, #23]
	if(result == HAL_ERROR || result == HAL_BUSY)
 8002de0:	7dfb      	ldrb	r3, [r7, #23]
 8002de2:	2b01      	cmp	r3, #1
 8002de4:	d002      	beq.n	8002dec <_write+0x30>
 8002de6:	7dfb      	ldrb	r3, [r7, #23]
 8002de8:	2b02      	cmp	r3, #2
 8002dea:	d101      	bne.n	8002df0 <_write+0x34>
	{
		Error_Handler();
 8002dec:	f7ff fc46 	bl	800267c <Error_Handler>
	}

	return len;
 8002df0:	687b      	ldr	r3, [r7, #4]
}
 8002df2:	4618      	mov	r0, r3
 8002df4:	3718      	adds	r7, #24
 8002df6:	46bd      	mov	sp, r7
 8002df8:	bd80      	pop	{r7, pc}
 8002dfa:	bf00      	nop
 8002dfc:	200002ac 	.word	0x200002ac

08002e00 <_close>:



int _close(int file)
{
 8002e00:	b480      	push	{r7}
 8002e02:	b083      	sub	sp, #12
 8002e04:	af00      	add	r7, sp, #0
 8002e06:	6078      	str	r0, [r7, #4]
	return -1;
 8002e08:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002e0c:	4618      	mov	r0, r3
 8002e0e:	370c      	adds	r7, #12
 8002e10:	46bd      	mov	sp, r7
 8002e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e16:	4770      	bx	lr

08002e18 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002e18:	b480      	push	{r7}
 8002e1a:	b083      	sub	sp, #12
 8002e1c:	af00      	add	r7, sp, #0
 8002e1e:	6078      	str	r0, [r7, #4]
 8002e20:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002e22:	683b      	ldr	r3, [r7, #0]
 8002e24:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002e28:	605a      	str	r2, [r3, #4]
	return 0;
 8002e2a:	2300      	movs	r3, #0
}
 8002e2c:	4618      	mov	r0, r3
 8002e2e:	370c      	adds	r7, #12
 8002e30:	46bd      	mov	sp, r7
 8002e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e36:	4770      	bx	lr

08002e38 <_isatty>:

int _isatty(int file)
{
 8002e38:	b480      	push	{r7}
 8002e3a:	b083      	sub	sp, #12
 8002e3c:	af00      	add	r7, sp, #0
 8002e3e:	6078      	str	r0, [r7, #4]
	return 1;
 8002e40:	2301      	movs	r3, #1
}
 8002e42:	4618      	mov	r0, r3
 8002e44:	370c      	adds	r7, #12
 8002e46:	46bd      	mov	sp, r7
 8002e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e4c:	4770      	bx	lr

08002e4e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002e4e:	b480      	push	{r7}
 8002e50:	b085      	sub	sp, #20
 8002e52:	af00      	add	r7, sp, #0
 8002e54:	60f8      	str	r0, [r7, #12]
 8002e56:	60b9      	str	r1, [r7, #8]
 8002e58:	607a      	str	r2, [r7, #4]
	return 0;
 8002e5a:	2300      	movs	r3, #0
}
 8002e5c:	4618      	mov	r0, r3
 8002e5e:	3714      	adds	r7, #20
 8002e60:	46bd      	mov	sp, r7
 8002e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e66:	4770      	bx	lr

08002e68 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002e68:	b580      	push	{r7, lr}
 8002e6a:	b086      	sub	sp, #24
 8002e6c:	af00      	add	r7, sp, #0
 8002e6e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002e70:	4a14      	ldr	r2, [pc, #80]	; (8002ec4 <_sbrk+0x5c>)
 8002e72:	4b15      	ldr	r3, [pc, #84]	; (8002ec8 <_sbrk+0x60>)
 8002e74:	1ad3      	subs	r3, r2, r3
 8002e76:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002e78:	697b      	ldr	r3, [r7, #20]
 8002e7a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002e7c:	4b13      	ldr	r3, [pc, #76]	; (8002ecc <_sbrk+0x64>)
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d102      	bne.n	8002e8a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002e84:	4b11      	ldr	r3, [pc, #68]	; (8002ecc <_sbrk+0x64>)
 8002e86:	4a12      	ldr	r2, [pc, #72]	; (8002ed0 <_sbrk+0x68>)
 8002e88:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002e8a:	4b10      	ldr	r3, [pc, #64]	; (8002ecc <_sbrk+0x64>)
 8002e8c:	681a      	ldr	r2, [r3, #0]
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	4413      	add	r3, r2
 8002e92:	693a      	ldr	r2, [r7, #16]
 8002e94:	429a      	cmp	r2, r3
 8002e96:	d207      	bcs.n	8002ea8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002e98:	f003 fb4c 	bl	8006534 <__errno>
 8002e9c:	4603      	mov	r3, r0
 8002e9e:	220c      	movs	r2, #12
 8002ea0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002ea2:	f04f 33ff 	mov.w	r3, #4294967295
 8002ea6:	e009      	b.n	8002ebc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002ea8:	4b08      	ldr	r3, [pc, #32]	; (8002ecc <_sbrk+0x64>)
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002eae:	4b07      	ldr	r3, [pc, #28]	; (8002ecc <_sbrk+0x64>)
 8002eb0:	681a      	ldr	r2, [r3, #0]
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	4413      	add	r3, r2
 8002eb6:	4a05      	ldr	r2, [pc, #20]	; (8002ecc <_sbrk+0x64>)
 8002eb8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002eba:	68fb      	ldr	r3, [r7, #12]
}
 8002ebc:	4618      	mov	r0, r3
 8002ebe:	3718      	adds	r7, #24
 8002ec0:	46bd      	mov	sp, r7
 8002ec2:	bd80      	pop	{r7, pc}
 8002ec4:	20010000 	.word	0x20010000
 8002ec8:	00000400 	.word	0x00000400
 8002ecc:	20000330 	.word	0x20000330
 8002ed0:	20000348 	.word	0x20000348

08002ed4 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8002ed4:	b480      	push	{r7}
 8002ed6:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
  #endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8002ed8:	4b06      	ldr	r3, [pc, #24]	; (8002ef4 <SystemInit+0x20>)
 8002eda:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ede:	4a05      	ldr	r2, [pc, #20]	; (8002ef4 <SystemInit+0x20>)
 8002ee0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002ee4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8002ee8:	bf00      	nop
 8002eea:	46bd      	mov	sp, r7
 8002eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef0:	4770      	bx	lr
 8002ef2:	bf00      	nop
 8002ef4:	e000ed00 	.word	0xe000ed00

08002ef8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8002ef8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002f30 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002efc:	f7ff ffea 	bl	8002ed4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002f00:	480c      	ldr	r0, [pc, #48]	; (8002f34 <LoopForever+0x6>)
  ldr r1, =_edata
 8002f02:	490d      	ldr	r1, [pc, #52]	; (8002f38 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002f04:	4a0d      	ldr	r2, [pc, #52]	; (8002f3c <LoopForever+0xe>)
  movs r3, #0
 8002f06:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002f08:	e002      	b.n	8002f10 <LoopCopyDataInit>

08002f0a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002f0a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002f0c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002f0e:	3304      	adds	r3, #4

08002f10 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002f10:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002f12:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002f14:	d3f9      	bcc.n	8002f0a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002f16:	4a0a      	ldr	r2, [pc, #40]	; (8002f40 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002f18:	4c0a      	ldr	r4, [pc, #40]	; (8002f44 <LoopForever+0x16>)
  movs r3, #0
 8002f1a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002f1c:	e001      	b.n	8002f22 <LoopFillZerobss>

08002f1e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002f1e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002f20:	3204      	adds	r2, #4

08002f22 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002f22:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002f24:	d3fb      	bcc.n	8002f1e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002f26:	f003 fb0b 	bl	8006540 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002f2a:	f7ff f981 	bl	8002230 <main>

08002f2e <LoopForever>:

LoopForever:
    b LoopForever
 8002f2e:	e7fe      	b.n	8002f2e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8002f30:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8002f34:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002f38:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 8002f3c:	0800d188 	.word	0x0800d188
  ldr r2, =_sbss
 8002f40:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8002f44:	20000348 	.word	0x20000348

08002f48 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002f48:	e7fe      	b.n	8002f48 <ADC1_IRQHandler>

08002f4a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002f4a:	b580      	push	{r7, lr}
 8002f4c:	b082      	sub	sp, #8
 8002f4e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002f50:	2300      	movs	r3, #0
 8002f52:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002f54:	2003      	movs	r0, #3
 8002f56:	f000 f943 	bl	80031e0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002f5a:	2000      	movs	r0, #0
 8002f5c:	f000 f80e 	bl	8002f7c <HAL_InitTick>
 8002f60:	4603      	mov	r3, r0
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d002      	beq.n	8002f6c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002f66:	2301      	movs	r3, #1
 8002f68:	71fb      	strb	r3, [r7, #7]
 8002f6a:	e001      	b.n	8002f70 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002f6c:	f7ff fd8c 	bl	8002a88 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002f70:	79fb      	ldrb	r3, [r7, #7]
}
 8002f72:	4618      	mov	r0, r3
 8002f74:	3708      	adds	r7, #8
 8002f76:	46bd      	mov	sp, r7
 8002f78:	bd80      	pop	{r7, pc}
	...

08002f7c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002f7c:	b580      	push	{r7, lr}
 8002f7e:	b084      	sub	sp, #16
 8002f80:	af00      	add	r7, sp, #0
 8002f82:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002f84:	2300      	movs	r3, #0
 8002f86:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8002f88:	4b17      	ldr	r3, [pc, #92]	; (8002fe8 <HAL_InitTick+0x6c>)
 8002f8a:	781b      	ldrb	r3, [r3, #0]
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d023      	beq.n	8002fd8 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8002f90:	4b16      	ldr	r3, [pc, #88]	; (8002fec <HAL_InitTick+0x70>)
 8002f92:	681a      	ldr	r2, [r3, #0]
 8002f94:	4b14      	ldr	r3, [pc, #80]	; (8002fe8 <HAL_InitTick+0x6c>)
 8002f96:	781b      	ldrb	r3, [r3, #0]
 8002f98:	4619      	mov	r1, r3
 8002f9a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002f9e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002fa2:	fbb2 f3f3 	udiv	r3, r2, r3
 8002fa6:	4618      	mov	r0, r3
 8002fa8:	f000 f941 	bl	800322e <HAL_SYSTICK_Config>
 8002fac:	4603      	mov	r3, r0
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d10f      	bne.n	8002fd2 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	2b0f      	cmp	r3, #15
 8002fb6:	d809      	bhi.n	8002fcc <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002fb8:	2200      	movs	r2, #0
 8002fba:	6879      	ldr	r1, [r7, #4]
 8002fbc:	f04f 30ff 	mov.w	r0, #4294967295
 8002fc0:	f000 f919 	bl	80031f6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002fc4:	4a0a      	ldr	r2, [pc, #40]	; (8002ff0 <HAL_InitTick+0x74>)
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	6013      	str	r3, [r2, #0]
 8002fca:	e007      	b.n	8002fdc <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8002fcc:	2301      	movs	r3, #1
 8002fce:	73fb      	strb	r3, [r7, #15]
 8002fd0:	e004      	b.n	8002fdc <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002fd2:	2301      	movs	r3, #1
 8002fd4:	73fb      	strb	r3, [r7, #15]
 8002fd6:	e001      	b.n	8002fdc <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002fd8:	2301      	movs	r3, #1
 8002fda:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002fdc:	7bfb      	ldrb	r3, [r7, #15]
}
 8002fde:	4618      	mov	r0, r3
 8002fe0:	3710      	adds	r7, #16
 8002fe2:	46bd      	mov	sp, r7
 8002fe4:	bd80      	pop	{r7, pc}
 8002fe6:	bf00      	nop
 8002fe8:	20000008 	.word	0x20000008
 8002fec:	20000000 	.word	0x20000000
 8002ff0:	20000004 	.word	0x20000004

08002ff4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002ff4:	b480      	push	{r7}
 8002ff6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002ff8:	4b06      	ldr	r3, [pc, #24]	; (8003014 <HAL_IncTick+0x20>)
 8002ffa:	781b      	ldrb	r3, [r3, #0]
 8002ffc:	461a      	mov	r2, r3
 8002ffe:	4b06      	ldr	r3, [pc, #24]	; (8003018 <HAL_IncTick+0x24>)
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	4413      	add	r3, r2
 8003004:	4a04      	ldr	r2, [pc, #16]	; (8003018 <HAL_IncTick+0x24>)
 8003006:	6013      	str	r3, [r2, #0]
}
 8003008:	bf00      	nop
 800300a:	46bd      	mov	sp, r7
 800300c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003010:	4770      	bx	lr
 8003012:	bf00      	nop
 8003014:	20000008 	.word	0x20000008
 8003018:	20000334 	.word	0x20000334

0800301c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800301c:	b480      	push	{r7}
 800301e:	af00      	add	r7, sp, #0
  return uwTick;
 8003020:	4b03      	ldr	r3, [pc, #12]	; (8003030 <HAL_GetTick+0x14>)
 8003022:	681b      	ldr	r3, [r3, #0]
}
 8003024:	4618      	mov	r0, r3
 8003026:	46bd      	mov	sp, r7
 8003028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800302c:	4770      	bx	lr
 800302e:	bf00      	nop
 8003030:	20000334 	.word	0x20000334

08003034 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003034:	b580      	push	{r7, lr}
 8003036:	b084      	sub	sp, #16
 8003038:	af00      	add	r7, sp, #0
 800303a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800303c:	f7ff ffee 	bl	800301c <HAL_GetTick>
 8003040:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	f1b3 3fff 	cmp.w	r3, #4294967295
 800304c:	d005      	beq.n	800305a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800304e:	4b0a      	ldr	r3, [pc, #40]	; (8003078 <HAL_Delay+0x44>)
 8003050:	781b      	ldrb	r3, [r3, #0]
 8003052:	461a      	mov	r2, r3
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	4413      	add	r3, r2
 8003058:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800305a:	bf00      	nop
 800305c:	f7ff ffde 	bl	800301c <HAL_GetTick>
 8003060:	4602      	mov	r2, r0
 8003062:	68bb      	ldr	r3, [r7, #8]
 8003064:	1ad3      	subs	r3, r2, r3
 8003066:	68fa      	ldr	r2, [r7, #12]
 8003068:	429a      	cmp	r2, r3
 800306a:	d8f7      	bhi.n	800305c <HAL_Delay+0x28>
  {
  }
}
 800306c:	bf00      	nop
 800306e:	bf00      	nop
 8003070:	3710      	adds	r7, #16
 8003072:	46bd      	mov	sp, r7
 8003074:	bd80      	pop	{r7, pc}
 8003076:	bf00      	nop
 8003078:	20000008 	.word	0x20000008

0800307c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800307c:	b480      	push	{r7}
 800307e:	b085      	sub	sp, #20
 8003080:	af00      	add	r7, sp, #0
 8003082:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	f003 0307 	and.w	r3, r3, #7
 800308a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800308c:	4b0c      	ldr	r3, [pc, #48]	; (80030c0 <__NVIC_SetPriorityGrouping+0x44>)
 800308e:	68db      	ldr	r3, [r3, #12]
 8003090:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003092:	68ba      	ldr	r2, [r7, #8]
 8003094:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003098:	4013      	ands	r3, r2
 800309a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80030a0:	68bb      	ldr	r3, [r7, #8]
 80030a2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80030a4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80030a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80030ac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80030ae:	4a04      	ldr	r2, [pc, #16]	; (80030c0 <__NVIC_SetPriorityGrouping+0x44>)
 80030b0:	68bb      	ldr	r3, [r7, #8]
 80030b2:	60d3      	str	r3, [r2, #12]
}
 80030b4:	bf00      	nop
 80030b6:	3714      	adds	r7, #20
 80030b8:	46bd      	mov	sp, r7
 80030ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030be:	4770      	bx	lr
 80030c0:	e000ed00 	.word	0xe000ed00

080030c4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80030c4:	b480      	push	{r7}
 80030c6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80030c8:	4b04      	ldr	r3, [pc, #16]	; (80030dc <__NVIC_GetPriorityGrouping+0x18>)
 80030ca:	68db      	ldr	r3, [r3, #12]
 80030cc:	0a1b      	lsrs	r3, r3, #8
 80030ce:	f003 0307 	and.w	r3, r3, #7
}
 80030d2:	4618      	mov	r0, r3
 80030d4:	46bd      	mov	sp, r7
 80030d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030da:	4770      	bx	lr
 80030dc:	e000ed00 	.word	0xe000ed00

080030e0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80030e0:	b480      	push	{r7}
 80030e2:	b083      	sub	sp, #12
 80030e4:	af00      	add	r7, sp, #0
 80030e6:	4603      	mov	r3, r0
 80030e8:	6039      	str	r1, [r7, #0]
 80030ea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80030ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	db0a      	blt.n	800310a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80030f4:	683b      	ldr	r3, [r7, #0]
 80030f6:	b2da      	uxtb	r2, r3
 80030f8:	490c      	ldr	r1, [pc, #48]	; (800312c <__NVIC_SetPriority+0x4c>)
 80030fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030fe:	0112      	lsls	r2, r2, #4
 8003100:	b2d2      	uxtb	r2, r2
 8003102:	440b      	add	r3, r1
 8003104:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003108:	e00a      	b.n	8003120 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800310a:	683b      	ldr	r3, [r7, #0]
 800310c:	b2da      	uxtb	r2, r3
 800310e:	4908      	ldr	r1, [pc, #32]	; (8003130 <__NVIC_SetPriority+0x50>)
 8003110:	79fb      	ldrb	r3, [r7, #7]
 8003112:	f003 030f 	and.w	r3, r3, #15
 8003116:	3b04      	subs	r3, #4
 8003118:	0112      	lsls	r2, r2, #4
 800311a:	b2d2      	uxtb	r2, r2
 800311c:	440b      	add	r3, r1
 800311e:	761a      	strb	r2, [r3, #24]
}
 8003120:	bf00      	nop
 8003122:	370c      	adds	r7, #12
 8003124:	46bd      	mov	sp, r7
 8003126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800312a:	4770      	bx	lr
 800312c:	e000e100 	.word	0xe000e100
 8003130:	e000ed00 	.word	0xe000ed00

08003134 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003134:	b480      	push	{r7}
 8003136:	b089      	sub	sp, #36	; 0x24
 8003138:	af00      	add	r7, sp, #0
 800313a:	60f8      	str	r0, [r7, #12]
 800313c:	60b9      	str	r1, [r7, #8]
 800313e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	f003 0307 	and.w	r3, r3, #7
 8003146:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003148:	69fb      	ldr	r3, [r7, #28]
 800314a:	f1c3 0307 	rsb	r3, r3, #7
 800314e:	2b04      	cmp	r3, #4
 8003150:	bf28      	it	cs
 8003152:	2304      	movcs	r3, #4
 8003154:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003156:	69fb      	ldr	r3, [r7, #28]
 8003158:	3304      	adds	r3, #4
 800315a:	2b06      	cmp	r3, #6
 800315c:	d902      	bls.n	8003164 <NVIC_EncodePriority+0x30>
 800315e:	69fb      	ldr	r3, [r7, #28]
 8003160:	3b03      	subs	r3, #3
 8003162:	e000      	b.n	8003166 <NVIC_EncodePriority+0x32>
 8003164:	2300      	movs	r3, #0
 8003166:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003168:	f04f 32ff 	mov.w	r2, #4294967295
 800316c:	69bb      	ldr	r3, [r7, #24]
 800316e:	fa02 f303 	lsl.w	r3, r2, r3
 8003172:	43da      	mvns	r2, r3
 8003174:	68bb      	ldr	r3, [r7, #8]
 8003176:	401a      	ands	r2, r3
 8003178:	697b      	ldr	r3, [r7, #20]
 800317a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800317c:	f04f 31ff 	mov.w	r1, #4294967295
 8003180:	697b      	ldr	r3, [r7, #20]
 8003182:	fa01 f303 	lsl.w	r3, r1, r3
 8003186:	43d9      	mvns	r1, r3
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800318c:	4313      	orrs	r3, r2
         );
}
 800318e:	4618      	mov	r0, r3
 8003190:	3724      	adds	r7, #36	; 0x24
 8003192:	46bd      	mov	sp, r7
 8003194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003198:	4770      	bx	lr
	...

0800319c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800319c:	b580      	push	{r7, lr}
 800319e:	b082      	sub	sp, #8
 80031a0:	af00      	add	r7, sp, #0
 80031a2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	3b01      	subs	r3, #1
 80031a8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80031ac:	d301      	bcc.n	80031b2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80031ae:	2301      	movs	r3, #1
 80031b0:	e00f      	b.n	80031d2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80031b2:	4a0a      	ldr	r2, [pc, #40]	; (80031dc <SysTick_Config+0x40>)
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	3b01      	subs	r3, #1
 80031b8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80031ba:	210f      	movs	r1, #15
 80031bc:	f04f 30ff 	mov.w	r0, #4294967295
 80031c0:	f7ff ff8e 	bl	80030e0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80031c4:	4b05      	ldr	r3, [pc, #20]	; (80031dc <SysTick_Config+0x40>)
 80031c6:	2200      	movs	r2, #0
 80031c8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80031ca:	4b04      	ldr	r3, [pc, #16]	; (80031dc <SysTick_Config+0x40>)
 80031cc:	2207      	movs	r2, #7
 80031ce:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80031d0:	2300      	movs	r3, #0
}
 80031d2:	4618      	mov	r0, r3
 80031d4:	3708      	adds	r7, #8
 80031d6:	46bd      	mov	sp, r7
 80031d8:	bd80      	pop	{r7, pc}
 80031da:	bf00      	nop
 80031dc:	e000e010 	.word	0xe000e010

080031e0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80031e0:	b580      	push	{r7, lr}
 80031e2:	b082      	sub	sp, #8
 80031e4:	af00      	add	r7, sp, #0
 80031e6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80031e8:	6878      	ldr	r0, [r7, #4]
 80031ea:	f7ff ff47 	bl	800307c <__NVIC_SetPriorityGrouping>
}
 80031ee:	bf00      	nop
 80031f0:	3708      	adds	r7, #8
 80031f2:	46bd      	mov	sp, r7
 80031f4:	bd80      	pop	{r7, pc}

080031f6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80031f6:	b580      	push	{r7, lr}
 80031f8:	b086      	sub	sp, #24
 80031fa:	af00      	add	r7, sp, #0
 80031fc:	4603      	mov	r3, r0
 80031fe:	60b9      	str	r1, [r7, #8]
 8003200:	607a      	str	r2, [r7, #4]
 8003202:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003204:	2300      	movs	r3, #0
 8003206:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003208:	f7ff ff5c 	bl	80030c4 <__NVIC_GetPriorityGrouping>
 800320c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800320e:	687a      	ldr	r2, [r7, #4]
 8003210:	68b9      	ldr	r1, [r7, #8]
 8003212:	6978      	ldr	r0, [r7, #20]
 8003214:	f7ff ff8e 	bl	8003134 <NVIC_EncodePriority>
 8003218:	4602      	mov	r2, r0
 800321a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800321e:	4611      	mov	r1, r2
 8003220:	4618      	mov	r0, r3
 8003222:	f7ff ff5d 	bl	80030e0 <__NVIC_SetPriority>
}
 8003226:	bf00      	nop
 8003228:	3718      	adds	r7, #24
 800322a:	46bd      	mov	sp, r7
 800322c:	bd80      	pop	{r7, pc}

0800322e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800322e:	b580      	push	{r7, lr}
 8003230:	b082      	sub	sp, #8
 8003232:	af00      	add	r7, sp, #0
 8003234:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003236:	6878      	ldr	r0, [r7, #4]
 8003238:	f7ff ffb0 	bl	800319c <SysTick_Config>
 800323c:	4603      	mov	r3, r0
}
 800323e:	4618      	mov	r0, r3
 8003240:	3708      	adds	r7, #8
 8003242:	46bd      	mov	sp, r7
 8003244:	bd80      	pop	{r7, pc}
	...

08003248 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003248:	b480      	push	{r7}
 800324a:	b087      	sub	sp, #28
 800324c:	af00      	add	r7, sp, #0
 800324e:	6078      	str	r0, [r7, #4]
 8003250:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003252:	2300      	movs	r3, #0
 8003254:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003256:	e148      	b.n	80034ea <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003258:	683b      	ldr	r3, [r7, #0]
 800325a:	681a      	ldr	r2, [r3, #0]
 800325c:	2101      	movs	r1, #1
 800325e:	697b      	ldr	r3, [r7, #20]
 8003260:	fa01 f303 	lsl.w	r3, r1, r3
 8003264:	4013      	ands	r3, r2
 8003266:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	2b00      	cmp	r3, #0
 800326c:	f000 813a 	beq.w	80034e4 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003270:	683b      	ldr	r3, [r7, #0]
 8003272:	685b      	ldr	r3, [r3, #4]
 8003274:	f003 0303 	and.w	r3, r3, #3
 8003278:	2b01      	cmp	r3, #1
 800327a:	d005      	beq.n	8003288 <HAL_GPIO_Init+0x40>
 800327c:	683b      	ldr	r3, [r7, #0]
 800327e:	685b      	ldr	r3, [r3, #4]
 8003280:	f003 0303 	and.w	r3, r3, #3
 8003284:	2b02      	cmp	r3, #2
 8003286:	d130      	bne.n	80032ea <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	689b      	ldr	r3, [r3, #8]
 800328c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800328e:	697b      	ldr	r3, [r7, #20]
 8003290:	005b      	lsls	r3, r3, #1
 8003292:	2203      	movs	r2, #3
 8003294:	fa02 f303 	lsl.w	r3, r2, r3
 8003298:	43db      	mvns	r3, r3
 800329a:	693a      	ldr	r2, [r7, #16]
 800329c:	4013      	ands	r3, r2
 800329e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80032a0:	683b      	ldr	r3, [r7, #0]
 80032a2:	68da      	ldr	r2, [r3, #12]
 80032a4:	697b      	ldr	r3, [r7, #20]
 80032a6:	005b      	lsls	r3, r3, #1
 80032a8:	fa02 f303 	lsl.w	r3, r2, r3
 80032ac:	693a      	ldr	r2, [r7, #16]
 80032ae:	4313      	orrs	r3, r2
 80032b0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	693a      	ldr	r2, [r7, #16]
 80032b6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	685b      	ldr	r3, [r3, #4]
 80032bc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80032be:	2201      	movs	r2, #1
 80032c0:	697b      	ldr	r3, [r7, #20]
 80032c2:	fa02 f303 	lsl.w	r3, r2, r3
 80032c6:	43db      	mvns	r3, r3
 80032c8:	693a      	ldr	r2, [r7, #16]
 80032ca:	4013      	ands	r3, r2
 80032cc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80032ce:	683b      	ldr	r3, [r7, #0]
 80032d0:	685b      	ldr	r3, [r3, #4]
 80032d2:	091b      	lsrs	r3, r3, #4
 80032d4:	f003 0201 	and.w	r2, r3, #1
 80032d8:	697b      	ldr	r3, [r7, #20]
 80032da:	fa02 f303 	lsl.w	r3, r2, r3
 80032de:	693a      	ldr	r2, [r7, #16]
 80032e0:	4313      	orrs	r3, r2
 80032e2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	693a      	ldr	r2, [r7, #16]
 80032e8:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80032ea:	683b      	ldr	r3, [r7, #0]
 80032ec:	685b      	ldr	r3, [r3, #4]
 80032ee:	f003 0303 	and.w	r3, r3, #3
 80032f2:	2b03      	cmp	r3, #3
 80032f4:	d017      	beq.n	8003326 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	68db      	ldr	r3, [r3, #12]
 80032fa:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80032fc:	697b      	ldr	r3, [r7, #20]
 80032fe:	005b      	lsls	r3, r3, #1
 8003300:	2203      	movs	r2, #3
 8003302:	fa02 f303 	lsl.w	r3, r2, r3
 8003306:	43db      	mvns	r3, r3
 8003308:	693a      	ldr	r2, [r7, #16]
 800330a:	4013      	ands	r3, r2
 800330c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800330e:	683b      	ldr	r3, [r7, #0]
 8003310:	689a      	ldr	r2, [r3, #8]
 8003312:	697b      	ldr	r3, [r7, #20]
 8003314:	005b      	lsls	r3, r3, #1
 8003316:	fa02 f303 	lsl.w	r3, r2, r3
 800331a:	693a      	ldr	r2, [r7, #16]
 800331c:	4313      	orrs	r3, r2
 800331e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	693a      	ldr	r2, [r7, #16]
 8003324:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003326:	683b      	ldr	r3, [r7, #0]
 8003328:	685b      	ldr	r3, [r3, #4]
 800332a:	f003 0303 	and.w	r3, r3, #3
 800332e:	2b02      	cmp	r3, #2
 8003330:	d123      	bne.n	800337a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003332:	697b      	ldr	r3, [r7, #20]
 8003334:	08da      	lsrs	r2, r3, #3
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	3208      	adds	r2, #8
 800333a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800333e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003340:	697b      	ldr	r3, [r7, #20]
 8003342:	f003 0307 	and.w	r3, r3, #7
 8003346:	009b      	lsls	r3, r3, #2
 8003348:	220f      	movs	r2, #15
 800334a:	fa02 f303 	lsl.w	r3, r2, r3
 800334e:	43db      	mvns	r3, r3
 8003350:	693a      	ldr	r2, [r7, #16]
 8003352:	4013      	ands	r3, r2
 8003354:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003356:	683b      	ldr	r3, [r7, #0]
 8003358:	691a      	ldr	r2, [r3, #16]
 800335a:	697b      	ldr	r3, [r7, #20]
 800335c:	f003 0307 	and.w	r3, r3, #7
 8003360:	009b      	lsls	r3, r3, #2
 8003362:	fa02 f303 	lsl.w	r3, r2, r3
 8003366:	693a      	ldr	r2, [r7, #16]
 8003368:	4313      	orrs	r3, r2
 800336a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800336c:	697b      	ldr	r3, [r7, #20]
 800336e:	08da      	lsrs	r2, r3, #3
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	3208      	adds	r2, #8
 8003374:	6939      	ldr	r1, [r7, #16]
 8003376:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003380:	697b      	ldr	r3, [r7, #20]
 8003382:	005b      	lsls	r3, r3, #1
 8003384:	2203      	movs	r2, #3
 8003386:	fa02 f303 	lsl.w	r3, r2, r3
 800338a:	43db      	mvns	r3, r3
 800338c:	693a      	ldr	r2, [r7, #16]
 800338e:	4013      	ands	r3, r2
 8003390:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003392:	683b      	ldr	r3, [r7, #0]
 8003394:	685b      	ldr	r3, [r3, #4]
 8003396:	f003 0203 	and.w	r2, r3, #3
 800339a:	697b      	ldr	r3, [r7, #20]
 800339c:	005b      	lsls	r3, r3, #1
 800339e:	fa02 f303 	lsl.w	r3, r2, r3
 80033a2:	693a      	ldr	r2, [r7, #16]
 80033a4:	4313      	orrs	r3, r2
 80033a6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	693a      	ldr	r2, [r7, #16]
 80033ac:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80033ae:	683b      	ldr	r3, [r7, #0]
 80033b0:	685b      	ldr	r3, [r3, #4]
 80033b2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	f000 8094 	beq.w	80034e4 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80033bc:	4b52      	ldr	r3, [pc, #328]	; (8003508 <HAL_GPIO_Init+0x2c0>)
 80033be:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80033c0:	4a51      	ldr	r2, [pc, #324]	; (8003508 <HAL_GPIO_Init+0x2c0>)
 80033c2:	f043 0301 	orr.w	r3, r3, #1
 80033c6:	6613      	str	r3, [r2, #96]	; 0x60
 80033c8:	4b4f      	ldr	r3, [pc, #316]	; (8003508 <HAL_GPIO_Init+0x2c0>)
 80033ca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80033cc:	f003 0301 	and.w	r3, r3, #1
 80033d0:	60bb      	str	r3, [r7, #8]
 80033d2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80033d4:	4a4d      	ldr	r2, [pc, #308]	; (800350c <HAL_GPIO_Init+0x2c4>)
 80033d6:	697b      	ldr	r3, [r7, #20]
 80033d8:	089b      	lsrs	r3, r3, #2
 80033da:	3302      	adds	r3, #2
 80033dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80033e0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80033e2:	697b      	ldr	r3, [r7, #20]
 80033e4:	f003 0303 	and.w	r3, r3, #3
 80033e8:	009b      	lsls	r3, r3, #2
 80033ea:	220f      	movs	r2, #15
 80033ec:	fa02 f303 	lsl.w	r3, r2, r3
 80033f0:	43db      	mvns	r3, r3
 80033f2:	693a      	ldr	r2, [r7, #16]
 80033f4:	4013      	ands	r3, r2
 80033f6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80033fe:	d00d      	beq.n	800341c <HAL_GPIO_Init+0x1d4>
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	4a43      	ldr	r2, [pc, #268]	; (8003510 <HAL_GPIO_Init+0x2c8>)
 8003404:	4293      	cmp	r3, r2
 8003406:	d007      	beq.n	8003418 <HAL_GPIO_Init+0x1d0>
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	4a42      	ldr	r2, [pc, #264]	; (8003514 <HAL_GPIO_Init+0x2cc>)
 800340c:	4293      	cmp	r3, r2
 800340e:	d101      	bne.n	8003414 <HAL_GPIO_Init+0x1cc>
 8003410:	2302      	movs	r3, #2
 8003412:	e004      	b.n	800341e <HAL_GPIO_Init+0x1d6>
 8003414:	2307      	movs	r3, #7
 8003416:	e002      	b.n	800341e <HAL_GPIO_Init+0x1d6>
 8003418:	2301      	movs	r3, #1
 800341a:	e000      	b.n	800341e <HAL_GPIO_Init+0x1d6>
 800341c:	2300      	movs	r3, #0
 800341e:	697a      	ldr	r2, [r7, #20]
 8003420:	f002 0203 	and.w	r2, r2, #3
 8003424:	0092      	lsls	r2, r2, #2
 8003426:	4093      	lsls	r3, r2
 8003428:	693a      	ldr	r2, [r7, #16]
 800342a:	4313      	orrs	r3, r2
 800342c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800342e:	4937      	ldr	r1, [pc, #220]	; (800350c <HAL_GPIO_Init+0x2c4>)
 8003430:	697b      	ldr	r3, [r7, #20]
 8003432:	089b      	lsrs	r3, r3, #2
 8003434:	3302      	adds	r3, #2
 8003436:	693a      	ldr	r2, [r7, #16]
 8003438:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800343c:	4b36      	ldr	r3, [pc, #216]	; (8003518 <HAL_GPIO_Init+0x2d0>)
 800343e:	689b      	ldr	r3, [r3, #8]
 8003440:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	43db      	mvns	r3, r3
 8003446:	693a      	ldr	r2, [r7, #16]
 8003448:	4013      	ands	r3, r2
 800344a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800344c:	683b      	ldr	r3, [r7, #0]
 800344e:	685b      	ldr	r3, [r3, #4]
 8003450:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003454:	2b00      	cmp	r3, #0
 8003456:	d003      	beq.n	8003460 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8003458:	693a      	ldr	r2, [r7, #16]
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	4313      	orrs	r3, r2
 800345e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003460:	4a2d      	ldr	r2, [pc, #180]	; (8003518 <HAL_GPIO_Init+0x2d0>)
 8003462:	693b      	ldr	r3, [r7, #16]
 8003464:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003466:	4b2c      	ldr	r3, [pc, #176]	; (8003518 <HAL_GPIO_Init+0x2d0>)
 8003468:	68db      	ldr	r3, [r3, #12]
 800346a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	43db      	mvns	r3, r3
 8003470:	693a      	ldr	r2, [r7, #16]
 8003472:	4013      	ands	r3, r2
 8003474:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003476:	683b      	ldr	r3, [r7, #0]
 8003478:	685b      	ldr	r3, [r3, #4]
 800347a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800347e:	2b00      	cmp	r3, #0
 8003480:	d003      	beq.n	800348a <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8003482:	693a      	ldr	r2, [r7, #16]
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	4313      	orrs	r3, r2
 8003488:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800348a:	4a23      	ldr	r2, [pc, #140]	; (8003518 <HAL_GPIO_Init+0x2d0>)
 800348c:	693b      	ldr	r3, [r7, #16]
 800348e:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8003490:	4b21      	ldr	r3, [pc, #132]	; (8003518 <HAL_GPIO_Init+0x2d0>)
 8003492:	685b      	ldr	r3, [r3, #4]
 8003494:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	43db      	mvns	r3, r3
 800349a:	693a      	ldr	r2, [r7, #16]
 800349c:	4013      	ands	r3, r2
 800349e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80034a0:	683b      	ldr	r3, [r7, #0]
 80034a2:	685b      	ldr	r3, [r3, #4]
 80034a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d003      	beq.n	80034b4 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 80034ac:	693a      	ldr	r2, [r7, #16]
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	4313      	orrs	r3, r2
 80034b2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80034b4:	4a18      	ldr	r2, [pc, #96]	; (8003518 <HAL_GPIO_Init+0x2d0>)
 80034b6:	693b      	ldr	r3, [r7, #16]
 80034b8:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80034ba:	4b17      	ldr	r3, [pc, #92]	; (8003518 <HAL_GPIO_Init+0x2d0>)
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	43db      	mvns	r3, r3
 80034c4:	693a      	ldr	r2, [r7, #16]
 80034c6:	4013      	ands	r3, r2
 80034c8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80034ca:	683b      	ldr	r3, [r7, #0]
 80034cc:	685b      	ldr	r3, [r3, #4]
 80034ce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d003      	beq.n	80034de <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 80034d6:	693a      	ldr	r2, [r7, #16]
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	4313      	orrs	r3, r2
 80034dc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80034de:	4a0e      	ldr	r2, [pc, #56]	; (8003518 <HAL_GPIO_Init+0x2d0>)
 80034e0:	693b      	ldr	r3, [r7, #16]
 80034e2:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80034e4:	697b      	ldr	r3, [r7, #20]
 80034e6:	3301      	adds	r3, #1
 80034e8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80034ea:	683b      	ldr	r3, [r7, #0]
 80034ec:	681a      	ldr	r2, [r3, #0]
 80034ee:	697b      	ldr	r3, [r7, #20]
 80034f0:	fa22 f303 	lsr.w	r3, r2, r3
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	f47f aeaf 	bne.w	8003258 <HAL_GPIO_Init+0x10>
  }
}
 80034fa:	bf00      	nop
 80034fc:	bf00      	nop
 80034fe:	371c      	adds	r7, #28
 8003500:	46bd      	mov	sp, r7
 8003502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003506:	4770      	bx	lr
 8003508:	40021000 	.word	0x40021000
 800350c:	40010000 	.word	0x40010000
 8003510:	48000400 	.word	0x48000400
 8003514:	48000800 	.word	0x48000800
 8003518:	40010400 	.word	0x40010400

0800351c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800351c:	b480      	push	{r7}
 800351e:	b085      	sub	sp, #20
 8003520:	af00      	add	r7, sp, #0
 8003522:	6078      	str	r0, [r7, #4]
 8003524:	460b      	mov	r3, r1
 8003526:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	691a      	ldr	r2, [r3, #16]
 800352c:	887b      	ldrh	r3, [r7, #2]
 800352e:	4013      	ands	r3, r2
 8003530:	2b00      	cmp	r3, #0
 8003532:	d002      	beq.n	800353a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003534:	2301      	movs	r3, #1
 8003536:	73fb      	strb	r3, [r7, #15]
 8003538:	e001      	b.n	800353e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800353a:	2300      	movs	r3, #0
 800353c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800353e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003540:	4618      	mov	r0, r3
 8003542:	3714      	adds	r7, #20
 8003544:	46bd      	mov	sp, r7
 8003546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800354a:	4770      	bx	lr

0800354c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800354c:	b480      	push	{r7}
 800354e:	b083      	sub	sp, #12
 8003550:	af00      	add	r7, sp, #0
 8003552:	6078      	str	r0, [r7, #4]
 8003554:	460b      	mov	r3, r1
 8003556:	807b      	strh	r3, [r7, #2]
 8003558:	4613      	mov	r3, r2
 800355a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800355c:	787b      	ldrb	r3, [r7, #1]
 800355e:	2b00      	cmp	r3, #0
 8003560:	d003      	beq.n	800356a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003562:	887a      	ldrh	r2, [r7, #2]
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003568:	e002      	b.n	8003570 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800356a:	887a      	ldrh	r2, [r7, #2]
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003570:	bf00      	nop
 8003572:	370c      	adds	r7, #12
 8003574:	46bd      	mov	sp, r7
 8003576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800357a:	4770      	bx	lr

0800357c <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800357c:	b480      	push	{r7}
 800357e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003580:	4b05      	ldr	r3, [pc, #20]	; (8003598 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	4a04      	ldr	r2, [pc, #16]	; (8003598 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003586:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800358a:	6013      	str	r3, [r2, #0]
}
 800358c:	bf00      	nop
 800358e:	46bd      	mov	sp, r7
 8003590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003594:	4770      	bx	lr
 8003596:	bf00      	nop
 8003598:	40007000 	.word	0x40007000

0800359c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800359c:	b480      	push	{r7}
 800359e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80035a0:	4b04      	ldr	r3, [pc, #16]	; (80035b4 <HAL_PWREx_GetVoltageRange+0x18>)
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80035a8:	4618      	mov	r0, r3
 80035aa:	46bd      	mov	sp, r7
 80035ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b0:	4770      	bx	lr
 80035b2:	bf00      	nop
 80035b4:	40007000 	.word	0x40007000

080035b8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80035b8:	b480      	push	{r7}
 80035ba:	b085      	sub	sp, #20
 80035bc:	af00      	add	r7, sp, #0
 80035be:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80035c6:	d130      	bne.n	800362a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80035c8:	4b23      	ldr	r3, [pc, #140]	; (8003658 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80035d0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80035d4:	d038      	beq.n	8003648 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80035d6:	4b20      	ldr	r3, [pc, #128]	; (8003658 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80035de:	4a1e      	ldr	r2, [pc, #120]	; (8003658 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80035e0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80035e4:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80035e6:	4b1d      	ldr	r3, [pc, #116]	; (800365c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	2232      	movs	r2, #50	; 0x32
 80035ec:	fb02 f303 	mul.w	r3, r2, r3
 80035f0:	4a1b      	ldr	r2, [pc, #108]	; (8003660 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80035f2:	fba2 2303 	umull	r2, r3, r2, r3
 80035f6:	0c9b      	lsrs	r3, r3, #18
 80035f8:	3301      	adds	r3, #1
 80035fa:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80035fc:	e002      	b.n	8003604 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	3b01      	subs	r3, #1
 8003602:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003604:	4b14      	ldr	r3, [pc, #80]	; (8003658 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003606:	695b      	ldr	r3, [r3, #20]
 8003608:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800360c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003610:	d102      	bne.n	8003618 <HAL_PWREx_ControlVoltageScaling+0x60>
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	2b00      	cmp	r3, #0
 8003616:	d1f2      	bne.n	80035fe <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003618:	4b0f      	ldr	r3, [pc, #60]	; (8003658 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800361a:	695b      	ldr	r3, [r3, #20]
 800361c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003620:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003624:	d110      	bne.n	8003648 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8003626:	2303      	movs	r3, #3
 8003628:	e00f      	b.n	800364a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800362a:	4b0b      	ldr	r3, [pc, #44]	; (8003658 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003632:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003636:	d007      	beq.n	8003648 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003638:	4b07      	ldr	r3, [pc, #28]	; (8003658 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003640:	4a05      	ldr	r2, [pc, #20]	; (8003658 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003642:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003646:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003648:	2300      	movs	r3, #0
}
 800364a:	4618      	mov	r0, r3
 800364c:	3714      	adds	r7, #20
 800364e:	46bd      	mov	sp, r7
 8003650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003654:	4770      	bx	lr
 8003656:	bf00      	nop
 8003658:	40007000 	.word	0x40007000
 800365c:	20000000 	.word	0x20000000
 8003660:	431bde83 	.word	0x431bde83

08003664 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003664:	b580      	push	{r7, lr}
 8003666:	b088      	sub	sp, #32
 8003668:	af00      	add	r7, sp, #0
 800366a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	2b00      	cmp	r3, #0
 8003670:	d102      	bne.n	8003678 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8003672:	2301      	movs	r3, #1
 8003674:	f000 bc02 	b.w	8003e7c <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003678:	4b96      	ldr	r3, [pc, #600]	; (80038d4 <HAL_RCC_OscConfig+0x270>)
 800367a:	689b      	ldr	r3, [r3, #8]
 800367c:	f003 030c 	and.w	r3, r3, #12
 8003680:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003682:	4b94      	ldr	r3, [pc, #592]	; (80038d4 <HAL_RCC_OscConfig+0x270>)
 8003684:	68db      	ldr	r3, [r3, #12]
 8003686:	f003 0303 	and.w	r3, r3, #3
 800368a:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	f003 0310 	and.w	r3, r3, #16
 8003694:	2b00      	cmp	r3, #0
 8003696:	f000 80e4 	beq.w	8003862 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800369a:	69bb      	ldr	r3, [r7, #24]
 800369c:	2b00      	cmp	r3, #0
 800369e:	d007      	beq.n	80036b0 <HAL_RCC_OscConfig+0x4c>
 80036a0:	69bb      	ldr	r3, [r7, #24]
 80036a2:	2b0c      	cmp	r3, #12
 80036a4:	f040 808b 	bne.w	80037be <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80036a8:	697b      	ldr	r3, [r7, #20]
 80036aa:	2b01      	cmp	r3, #1
 80036ac:	f040 8087 	bne.w	80037be <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80036b0:	4b88      	ldr	r3, [pc, #544]	; (80038d4 <HAL_RCC_OscConfig+0x270>)
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	f003 0302 	and.w	r3, r3, #2
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d005      	beq.n	80036c8 <HAL_RCC_OscConfig+0x64>
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	699b      	ldr	r3, [r3, #24]
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d101      	bne.n	80036c8 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80036c4:	2301      	movs	r3, #1
 80036c6:	e3d9      	b.n	8003e7c <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	6a1a      	ldr	r2, [r3, #32]
 80036cc:	4b81      	ldr	r3, [pc, #516]	; (80038d4 <HAL_RCC_OscConfig+0x270>)
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	f003 0308 	and.w	r3, r3, #8
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d004      	beq.n	80036e2 <HAL_RCC_OscConfig+0x7e>
 80036d8:	4b7e      	ldr	r3, [pc, #504]	; (80038d4 <HAL_RCC_OscConfig+0x270>)
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80036e0:	e005      	b.n	80036ee <HAL_RCC_OscConfig+0x8a>
 80036e2:	4b7c      	ldr	r3, [pc, #496]	; (80038d4 <HAL_RCC_OscConfig+0x270>)
 80036e4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80036e8:	091b      	lsrs	r3, r3, #4
 80036ea:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80036ee:	4293      	cmp	r3, r2
 80036f0:	d223      	bcs.n	800373a <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	6a1b      	ldr	r3, [r3, #32]
 80036f6:	4618      	mov	r0, r3
 80036f8:	f000 fd8c 	bl	8004214 <RCC_SetFlashLatencyFromMSIRange>
 80036fc:	4603      	mov	r3, r0
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d001      	beq.n	8003706 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8003702:	2301      	movs	r3, #1
 8003704:	e3ba      	b.n	8003e7c <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003706:	4b73      	ldr	r3, [pc, #460]	; (80038d4 <HAL_RCC_OscConfig+0x270>)
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	4a72      	ldr	r2, [pc, #456]	; (80038d4 <HAL_RCC_OscConfig+0x270>)
 800370c:	f043 0308 	orr.w	r3, r3, #8
 8003710:	6013      	str	r3, [r2, #0]
 8003712:	4b70      	ldr	r3, [pc, #448]	; (80038d4 <HAL_RCC_OscConfig+0x270>)
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	6a1b      	ldr	r3, [r3, #32]
 800371e:	496d      	ldr	r1, [pc, #436]	; (80038d4 <HAL_RCC_OscConfig+0x270>)
 8003720:	4313      	orrs	r3, r2
 8003722:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003724:	4b6b      	ldr	r3, [pc, #428]	; (80038d4 <HAL_RCC_OscConfig+0x270>)
 8003726:	685b      	ldr	r3, [r3, #4]
 8003728:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	69db      	ldr	r3, [r3, #28]
 8003730:	021b      	lsls	r3, r3, #8
 8003732:	4968      	ldr	r1, [pc, #416]	; (80038d4 <HAL_RCC_OscConfig+0x270>)
 8003734:	4313      	orrs	r3, r2
 8003736:	604b      	str	r3, [r1, #4]
 8003738:	e025      	b.n	8003786 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800373a:	4b66      	ldr	r3, [pc, #408]	; (80038d4 <HAL_RCC_OscConfig+0x270>)
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	4a65      	ldr	r2, [pc, #404]	; (80038d4 <HAL_RCC_OscConfig+0x270>)
 8003740:	f043 0308 	orr.w	r3, r3, #8
 8003744:	6013      	str	r3, [r2, #0]
 8003746:	4b63      	ldr	r3, [pc, #396]	; (80038d4 <HAL_RCC_OscConfig+0x270>)
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	6a1b      	ldr	r3, [r3, #32]
 8003752:	4960      	ldr	r1, [pc, #384]	; (80038d4 <HAL_RCC_OscConfig+0x270>)
 8003754:	4313      	orrs	r3, r2
 8003756:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003758:	4b5e      	ldr	r3, [pc, #376]	; (80038d4 <HAL_RCC_OscConfig+0x270>)
 800375a:	685b      	ldr	r3, [r3, #4]
 800375c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	69db      	ldr	r3, [r3, #28]
 8003764:	021b      	lsls	r3, r3, #8
 8003766:	495b      	ldr	r1, [pc, #364]	; (80038d4 <HAL_RCC_OscConfig+0x270>)
 8003768:	4313      	orrs	r3, r2
 800376a:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800376c:	69bb      	ldr	r3, [r7, #24]
 800376e:	2b00      	cmp	r3, #0
 8003770:	d109      	bne.n	8003786 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	6a1b      	ldr	r3, [r3, #32]
 8003776:	4618      	mov	r0, r3
 8003778:	f000 fd4c 	bl	8004214 <RCC_SetFlashLatencyFromMSIRange>
 800377c:	4603      	mov	r3, r0
 800377e:	2b00      	cmp	r3, #0
 8003780:	d001      	beq.n	8003786 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8003782:	2301      	movs	r3, #1
 8003784:	e37a      	b.n	8003e7c <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003786:	f000 fc81 	bl	800408c <HAL_RCC_GetSysClockFreq>
 800378a:	4602      	mov	r2, r0
 800378c:	4b51      	ldr	r3, [pc, #324]	; (80038d4 <HAL_RCC_OscConfig+0x270>)
 800378e:	689b      	ldr	r3, [r3, #8]
 8003790:	091b      	lsrs	r3, r3, #4
 8003792:	f003 030f 	and.w	r3, r3, #15
 8003796:	4950      	ldr	r1, [pc, #320]	; (80038d8 <HAL_RCC_OscConfig+0x274>)
 8003798:	5ccb      	ldrb	r3, [r1, r3]
 800379a:	f003 031f 	and.w	r3, r3, #31
 800379e:	fa22 f303 	lsr.w	r3, r2, r3
 80037a2:	4a4e      	ldr	r2, [pc, #312]	; (80038dc <HAL_RCC_OscConfig+0x278>)
 80037a4:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80037a6:	4b4e      	ldr	r3, [pc, #312]	; (80038e0 <HAL_RCC_OscConfig+0x27c>)
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	4618      	mov	r0, r3
 80037ac:	f7ff fbe6 	bl	8002f7c <HAL_InitTick>
 80037b0:	4603      	mov	r3, r0
 80037b2:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80037b4:	7bfb      	ldrb	r3, [r7, #15]
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d052      	beq.n	8003860 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 80037ba:	7bfb      	ldrb	r3, [r7, #15]
 80037bc:	e35e      	b.n	8003e7c <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	699b      	ldr	r3, [r3, #24]
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d032      	beq.n	800382c <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80037c6:	4b43      	ldr	r3, [pc, #268]	; (80038d4 <HAL_RCC_OscConfig+0x270>)
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	4a42      	ldr	r2, [pc, #264]	; (80038d4 <HAL_RCC_OscConfig+0x270>)
 80037cc:	f043 0301 	orr.w	r3, r3, #1
 80037d0:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80037d2:	f7ff fc23 	bl	800301c <HAL_GetTick>
 80037d6:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80037d8:	e008      	b.n	80037ec <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80037da:	f7ff fc1f 	bl	800301c <HAL_GetTick>
 80037de:	4602      	mov	r2, r0
 80037e0:	693b      	ldr	r3, [r7, #16]
 80037e2:	1ad3      	subs	r3, r2, r3
 80037e4:	2b02      	cmp	r3, #2
 80037e6:	d901      	bls.n	80037ec <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80037e8:	2303      	movs	r3, #3
 80037ea:	e347      	b.n	8003e7c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80037ec:	4b39      	ldr	r3, [pc, #228]	; (80038d4 <HAL_RCC_OscConfig+0x270>)
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	f003 0302 	and.w	r3, r3, #2
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d0f0      	beq.n	80037da <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80037f8:	4b36      	ldr	r3, [pc, #216]	; (80038d4 <HAL_RCC_OscConfig+0x270>)
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	4a35      	ldr	r2, [pc, #212]	; (80038d4 <HAL_RCC_OscConfig+0x270>)
 80037fe:	f043 0308 	orr.w	r3, r3, #8
 8003802:	6013      	str	r3, [r2, #0]
 8003804:	4b33      	ldr	r3, [pc, #204]	; (80038d4 <HAL_RCC_OscConfig+0x270>)
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	6a1b      	ldr	r3, [r3, #32]
 8003810:	4930      	ldr	r1, [pc, #192]	; (80038d4 <HAL_RCC_OscConfig+0x270>)
 8003812:	4313      	orrs	r3, r2
 8003814:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003816:	4b2f      	ldr	r3, [pc, #188]	; (80038d4 <HAL_RCC_OscConfig+0x270>)
 8003818:	685b      	ldr	r3, [r3, #4]
 800381a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	69db      	ldr	r3, [r3, #28]
 8003822:	021b      	lsls	r3, r3, #8
 8003824:	492b      	ldr	r1, [pc, #172]	; (80038d4 <HAL_RCC_OscConfig+0x270>)
 8003826:	4313      	orrs	r3, r2
 8003828:	604b      	str	r3, [r1, #4]
 800382a:	e01a      	b.n	8003862 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800382c:	4b29      	ldr	r3, [pc, #164]	; (80038d4 <HAL_RCC_OscConfig+0x270>)
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	4a28      	ldr	r2, [pc, #160]	; (80038d4 <HAL_RCC_OscConfig+0x270>)
 8003832:	f023 0301 	bic.w	r3, r3, #1
 8003836:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003838:	f7ff fbf0 	bl	800301c <HAL_GetTick>
 800383c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800383e:	e008      	b.n	8003852 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003840:	f7ff fbec 	bl	800301c <HAL_GetTick>
 8003844:	4602      	mov	r2, r0
 8003846:	693b      	ldr	r3, [r7, #16]
 8003848:	1ad3      	subs	r3, r2, r3
 800384a:	2b02      	cmp	r3, #2
 800384c:	d901      	bls.n	8003852 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 800384e:	2303      	movs	r3, #3
 8003850:	e314      	b.n	8003e7c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003852:	4b20      	ldr	r3, [pc, #128]	; (80038d4 <HAL_RCC_OscConfig+0x270>)
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	f003 0302 	and.w	r3, r3, #2
 800385a:	2b00      	cmp	r3, #0
 800385c:	d1f0      	bne.n	8003840 <HAL_RCC_OscConfig+0x1dc>
 800385e:	e000      	b.n	8003862 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003860:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	f003 0301 	and.w	r3, r3, #1
 800386a:	2b00      	cmp	r3, #0
 800386c:	d073      	beq.n	8003956 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800386e:	69bb      	ldr	r3, [r7, #24]
 8003870:	2b08      	cmp	r3, #8
 8003872:	d005      	beq.n	8003880 <HAL_RCC_OscConfig+0x21c>
 8003874:	69bb      	ldr	r3, [r7, #24]
 8003876:	2b0c      	cmp	r3, #12
 8003878:	d10e      	bne.n	8003898 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800387a:	697b      	ldr	r3, [r7, #20]
 800387c:	2b03      	cmp	r3, #3
 800387e:	d10b      	bne.n	8003898 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003880:	4b14      	ldr	r3, [pc, #80]	; (80038d4 <HAL_RCC_OscConfig+0x270>)
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003888:	2b00      	cmp	r3, #0
 800388a:	d063      	beq.n	8003954 <HAL_RCC_OscConfig+0x2f0>
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	685b      	ldr	r3, [r3, #4]
 8003890:	2b00      	cmp	r3, #0
 8003892:	d15f      	bne.n	8003954 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003894:	2301      	movs	r3, #1
 8003896:	e2f1      	b.n	8003e7c <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	685b      	ldr	r3, [r3, #4]
 800389c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80038a0:	d106      	bne.n	80038b0 <HAL_RCC_OscConfig+0x24c>
 80038a2:	4b0c      	ldr	r3, [pc, #48]	; (80038d4 <HAL_RCC_OscConfig+0x270>)
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	4a0b      	ldr	r2, [pc, #44]	; (80038d4 <HAL_RCC_OscConfig+0x270>)
 80038a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80038ac:	6013      	str	r3, [r2, #0]
 80038ae:	e025      	b.n	80038fc <HAL_RCC_OscConfig+0x298>
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	685b      	ldr	r3, [r3, #4]
 80038b4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80038b8:	d114      	bne.n	80038e4 <HAL_RCC_OscConfig+0x280>
 80038ba:	4b06      	ldr	r3, [pc, #24]	; (80038d4 <HAL_RCC_OscConfig+0x270>)
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	4a05      	ldr	r2, [pc, #20]	; (80038d4 <HAL_RCC_OscConfig+0x270>)
 80038c0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80038c4:	6013      	str	r3, [r2, #0]
 80038c6:	4b03      	ldr	r3, [pc, #12]	; (80038d4 <HAL_RCC_OscConfig+0x270>)
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	4a02      	ldr	r2, [pc, #8]	; (80038d4 <HAL_RCC_OscConfig+0x270>)
 80038cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80038d0:	6013      	str	r3, [r2, #0]
 80038d2:	e013      	b.n	80038fc <HAL_RCC_OscConfig+0x298>
 80038d4:	40021000 	.word	0x40021000
 80038d8:	0800cc14 	.word	0x0800cc14
 80038dc:	20000000 	.word	0x20000000
 80038e0:	20000004 	.word	0x20000004
 80038e4:	4ba0      	ldr	r3, [pc, #640]	; (8003b68 <HAL_RCC_OscConfig+0x504>)
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	4a9f      	ldr	r2, [pc, #636]	; (8003b68 <HAL_RCC_OscConfig+0x504>)
 80038ea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80038ee:	6013      	str	r3, [r2, #0]
 80038f0:	4b9d      	ldr	r3, [pc, #628]	; (8003b68 <HAL_RCC_OscConfig+0x504>)
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	4a9c      	ldr	r2, [pc, #624]	; (8003b68 <HAL_RCC_OscConfig+0x504>)
 80038f6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80038fa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	685b      	ldr	r3, [r3, #4]
 8003900:	2b00      	cmp	r3, #0
 8003902:	d013      	beq.n	800392c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003904:	f7ff fb8a 	bl	800301c <HAL_GetTick>
 8003908:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800390a:	e008      	b.n	800391e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800390c:	f7ff fb86 	bl	800301c <HAL_GetTick>
 8003910:	4602      	mov	r2, r0
 8003912:	693b      	ldr	r3, [r7, #16]
 8003914:	1ad3      	subs	r3, r2, r3
 8003916:	2b64      	cmp	r3, #100	; 0x64
 8003918:	d901      	bls.n	800391e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800391a:	2303      	movs	r3, #3
 800391c:	e2ae      	b.n	8003e7c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800391e:	4b92      	ldr	r3, [pc, #584]	; (8003b68 <HAL_RCC_OscConfig+0x504>)
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003926:	2b00      	cmp	r3, #0
 8003928:	d0f0      	beq.n	800390c <HAL_RCC_OscConfig+0x2a8>
 800392a:	e014      	b.n	8003956 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800392c:	f7ff fb76 	bl	800301c <HAL_GetTick>
 8003930:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003932:	e008      	b.n	8003946 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003934:	f7ff fb72 	bl	800301c <HAL_GetTick>
 8003938:	4602      	mov	r2, r0
 800393a:	693b      	ldr	r3, [r7, #16]
 800393c:	1ad3      	subs	r3, r2, r3
 800393e:	2b64      	cmp	r3, #100	; 0x64
 8003940:	d901      	bls.n	8003946 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8003942:	2303      	movs	r3, #3
 8003944:	e29a      	b.n	8003e7c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003946:	4b88      	ldr	r3, [pc, #544]	; (8003b68 <HAL_RCC_OscConfig+0x504>)
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800394e:	2b00      	cmp	r3, #0
 8003950:	d1f0      	bne.n	8003934 <HAL_RCC_OscConfig+0x2d0>
 8003952:	e000      	b.n	8003956 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003954:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	f003 0302 	and.w	r3, r3, #2
 800395e:	2b00      	cmp	r3, #0
 8003960:	d060      	beq.n	8003a24 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003962:	69bb      	ldr	r3, [r7, #24]
 8003964:	2b04      	cmp	r3, #4
 8003966:	d005      	beq.n	8003974 <HAL_RCC_OscConfig+0x310>
 8003968:	69bb      	ldr	r3, [r7, #24]
 800396a:	2b0c      	cmp	r3, #12
 800396c:	d119      	bne.n	80039a2 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800396e:	697b      	ldr	r3, [r7, #20]
 8003970:	2b02      	cmp	r3, #2
 8003972:	d116      	bne.n	80039a2 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003974:	4b7c      	ldr	r3, [pc, #496]	; (8003b68 <HAL_RCC_OscConfig+0x504>)
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800397c:	2b00      	cmp	r3, #0
 800397e:	d005      	beq.n	800398c <HAL_RCC_OscConfig+0x328>
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	68db      	ldr	r3, [r3, #12]
 8003984:	2b00      	cmp	r3, #0
 8003986:	d101      	bne.n	800398c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003988:	2301      	movs	r3, #1
 800398a:	e277      	b.n	8003e7c <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800398c:	4b76      	ldr	r3, [pc, #472]	; (8003b68 <HAL_RCC_OscConfig+0x504>)
 800398e:	685b      	ldr	r3, [r3, #4]
 8003990:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	691b      	ldr	r3, [r3, #16]
 8003998:	061b      	lsls	r3, r3, #24
 800399a:	4973      	ldr	r1, [pc, #460]	; (8003b68 <HAL_RCC_OscConfig+0x504>)
 800399c:	4313      	orrs	r3, r2
 800399e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80039a0:	e040      	b.n	8003a24 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	68db      	ldr	r3, [r3, #12]
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d023      	beq.n	80039f2 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80039aa:	4b6f      	ldr	r3, [pc, #444]	; (8003b68 <HAL_RCC_OscConfig+0x504>)
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	4a6e      	ldr	r2, [pc, #440]	; (8003b68 <HAL_RCC_OscConfig+0x504>)
 80039b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80039b4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039b6:	f7ff fb31 	bl	800301c <HAL_GetTick>
 80039ba:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80039bc:	e008      	b.n	80039d0 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80039be:	f7ff fb2d 	bl	800301c <HAL_GetTick>
 80039c2:	4602      	mov	r2, r0
 80039c4:	693b      	ldr	r3, [r7, #16]
 80039c6:	1ad3      	subs	r3, r2, r3
 80039c8:	2b02      	cmp	r3, #2
 80039ca:	d901      	bls.n	80039d0 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80039cc:	2303      	movs	r3, #3
 80039ce:	e255      	b.n	8003e7c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80039d0:	4b65      	ldr	r3, [pc, #404]	; (8003b68 <HAL_RCC_OscConfig+0x504>)
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d0f0      	beq.n	80039be <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80039dc:	4b62      	ldr	r3, [pc, #392]	; (8003b68 <HAL_RCC_OscConfig+0x504>)
 80039de:	685b      	ldr	r3, [r3, #4]
 80039e0:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	691b      	ldr	r3, [r3, #16]
 80039e8:	061b      	lsls	r3, r3, #24
 80039ea:	495f      	ldr	r1, [pc, #380]	; (8003b68 <HAL_RCC_OscConfig+0x504>)
 80039ec:	4313      	orrs	r3, r2
 80039ee:	604b      	str	r3, [r1, #4]
 80039f0:	e018      	b.n	8003a24 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80039f2:	4b5d      	ldr	r3, [pc, #372]	; (8003b68 <HAL_RCC_OscConfig+0x504>)
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	4a5c      	ldr	r2, [pc, #368]	; (8003b68 <HAL_RCC_OscConfig+0x504>)
 80039f8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80039fc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039fe:	f7ff fb0d 	bl	800301c <HAL_GetTick>
 8003a02:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003a04:	e008      	b.n	8003a18 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003a06:	f7ff fb09 	bl	800301c <HAL_GetTick>
 8003a0a:	4602      	mov	r2, r0
 8003a0c:	693b      	ldr	r3, [r7, #16]
 8003a0e:	1ad3      	subs	r3, r2, r3
 8003a10:	2b02      	cmp	r3, #2
 8003a12:	d901      	bls.n	8003a18 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003a14:	2303      	movs	r3, #3
 8003a16:	e231      	b.n	8003e7c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003a18:	4b53      	ldr	r3, [pc, #332]	; (8003b68 <HAL_RCC_OscConfig+0x504>)
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d1f0      	bne.n	8003a06 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	f003 0308 	and.w	r3, r3, #8
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d03c      	beq.n	8003aaa <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	695b      	ldr	r3, [r3, #20]
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d01c      	beq.n	8003a72 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003a38:	4b4b      	ldr	r3, [pc, #300]	; (8003b68 <HAL_RCC_OscConfig+0x504>)
 8003a3a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003a3e:	4a4a      	ldr	r2, [pc, #296]	; (8003b68 <HAL_RCC_OscConfig+0x504>)
 8003a40:	f043 0301 	orr.w	r3, r3, #1
 8003a44:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a48:	f7ff fae8 	bl	800301c <HAL_GetTick>
 8003a4c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003a4e:	e008      	b.n	8003a62 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003a50:	f7ff fae4 	bl	800301c <HAL_GetTick>
 8003a54:	4602      	mov	r2, r0
 8003a56:	693b      	ldr	r3, [r7, #16]
 8003a58:	1ad3      	subs	r3, r2, r3
 8003a5a:	2b02      	cmp	r3, #2
 8003a5c:	d901      	bls.n	8003a62 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003a5e:	2303      	movs	r3, #3
 8003a60:	e20c      	b.n	8003e7c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003a62:	4b41      	ldr	r3, [pc, #260]	; (8003b68 <HAL_RCC_OscConfig+0x504>)
 8003a64:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003a68:	f003 0302 	and.w	r3, r3, #2
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d0ef      	beq.n	8003a50 <HAL_RCC_OscConfig+0x3ec>
 8003a70:	e01b      	b.n	8003aaa <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003a72:	4b3d      	ldr	r3, [pc, #244]	; (8003b68 <HAL_RCC_OscConfig+0x504>)
 8003a74:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003a78:	4a3b      	ldr	r2, [pc, #236]	; (8003b68 <HAL_RCC_OscConfig+0x504>)
 8003a7a:	f023 0301 	bic.w	r3, r3, #1
 8003a7e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a82:	f7ff facb 	bl	800301c <HAL_GetTick>
 8003a86:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003a88:	e008      	b.n	8003a9c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003a8a:	f7ff fac7 	bl	800301c <HAL_GetTick>
 8003a8e:	4602      	mov	r2, r0
 8003a90:	693b      	ldr	r3, [r7, #16]
 8003a92:	1ad3      	subs	r3, r2, r3
 8003a94:	2b02      	cmp	r3, #2
 8003a96:	d901      	bls.n	8003a9c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003a98:	2303      	movs	r3, #3
 8003a9a:	e1ef      	b.n	8003e7c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003a9c:	4b32      	ldr	r3, [pc, #200]	; (8003b68 <HAL_RCC_OscConfig+0x504>)
 8003a9e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003aa2:	f003 0302 	and.w	r3, r3, #2
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d1ef      	bne.n	8003a8a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	f003 0304 	and.w	r3, r3, #4
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	f000 80a6 	beq.w	8003c04 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003ab8:	2300      	movs	r3, #0
 8003aba:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003abc:	4b2a      	ldr	r3, [pc, #168]	; (8003b68 <HAL_RCC_OscConfig+0x504>)
 8003abe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ac0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d10d      	bne.n	8003ae4 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003ac8:	4b27      	ldr	r3, [pc, #156]	; (8003b68 <HAL_RCC_OscConfig+0x504>)
 8003aca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003acc:	4a26      	ldr	r2, [pc, #152]	; (8003b68 <HAL_RCC_OscConfig+0x504>)
 8003ace:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003ad2:	6593      	str	r3, [r2, #88]	; 0x58
 8003ad4:	4b24      	ldr	r3, [pc, #144]	; (8003b68 <HAL_RCC_OscConfig+0x504>)
 8003ad6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ad8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003adc:	60bb      	str	r3, [r7, #8]
 8003ade:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003ae0:	2301      	movs	r3, #1
 8003ae2:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003ae4:	4b21      	ldr	r3, [pc, #132]	; (8003b6c <HAL_RCC_OscConfig+0x508>)
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d118      	bne.n	8003b22 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003af0:	4b1e      	ldr	r3, [pc, #120]	; (8003b6c <HAL_RCC_OscConfig+0x508>)
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	4a1d      	ldr	r2, [pc, #116]	; (8003b6c <HAL_RCC_OscConfig+0x508>)
 8003af6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003afa:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003afc:	f7ff fa8e 	bl	800301c <HAL_GetTick>
 8003b00:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003b02:	e008      	b.n	8003b16 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b04:	f7ff fa8a 	bl	800301c <HAL_GetTick>
 8003b08:	4602      	mov	r2, r0
 8003b0a:	693b      	ldr	r3, [r7, #16]
 8003b0c:	1ad3      	subs	r3, r2, r3
 8003b0e:	2b02      	cmp	r3, #2
 8003b10:	d901      	bls.n	8003b16 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8003b12:	2303      	movs	r3, #3
 8003b14:	e1b2      	b.n	8003e7c <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003b16:	4b15      	ldr	r3, [pc, #84]	; (8003b6c <HAL_RCC_OscConfig+0x508>)
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d0f0      	beq.n	8003b04 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	689b      	ldr	r3, [r3, #8]
 8003b26:	2b01      	cmp	r3, #1
 8003b28:	d108      	bne.n	8003b3c <HAL_RCC_OscConfig+0x4d8>
 8003b2a:	4b0f      	ldr	r3, [pc, #60]	; (8003b68 <HAL_RCC_OscConfig+0x504>)
 8003b2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b30:	4a0d      	ldr	r2, [pc, #52]	; (8003b68 <HAL_RCC_OscConfig+0x504>)
 8003b32:	f043 0301 	orr.w	r3, r3, #1
 8003b36:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003b3a:	e029      	b.n	8003b90 <HAL_RCC_OscConfig+0x52c>
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	689b      	ldr	r3, [r3, #8]
 8003b40:	2b05      	cmp	r3, #5
 8003b42:	d115      	bne.n	8003b70 <HAL_RCC_OscConfig+0x50c>
 8003b44:	4b08      	ldr	r3, [pc, #32]	; (8003b68 <HAL_RCC_OscConfig+0x504>)
 8003b46:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b4a:	4a07      	ldr	r2, [pc, #28]	; (8003b68 <HAL_RCC_OscConfig+0x504>)
 8003b4c:	f043 0304 	orr.w	r3, r3, #4
 8003b50:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003b54:	4b04      	ldr	r3, [pc, #16]	; (8003b68 <HAL_RCC_OscConfig+0x504>)
 8003b56:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b5a:	4a03      	ldr	r2, [pc, #12]	; (8003b68 <HAL_RCC_OscConfig+0x504>)
 8003b5c:	f043 0301 	orr.w	r3, r3, #1
 8003b60:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003b64:	e014      	b.n	8003b90 <HAL_RCC_OscConfig+0x52c>
 8003b66:	bf00      	nop
 8003b68:	40021000 	.word	0x40021000
 8003b6c:	40007000 	.word	0x40007000
 8003b70:	4b9a      	ldr	r3, [pc, #616]	; (8003ddc <HAL_RCC_OscConfig+0x778>)
 8003b72:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b76:	4a99      	ldr	r2, [pc, #612]	; (8003ddc <HAL_RCC_OscConfig+0x778>)
 8003b78:	f023 0301 	bic.w	r3, r3, #1
 8003b7c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003b80:	4b96      	ldr	r3, [pc, #600]	; (8003ddc <HAL_RCC_OscConfig+0x778>)
 8003b82:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b86:	4a95      	ldr	r2, [pc, #596]	; (8003ddc <HAL_RCC_OscConfig+0x778>)
 8003b88:	f023 0304 	bic.w	r3, r3, #4
 8003b8c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	689b      	ldr	r3, [r3, #8]
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d016      	beq.n	8003bc6 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b98:	f7ff fa40 	bl	800301c <HAL_GetTick>
 8003b9c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003b9e:	e00a      	b.n	8003bb6 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003ba0:	f7ff fa3c 	bl	800301c <HAL_GetTick>
 8003ba4:	4602      	mov	r2, r0
 8003ba6:	693b      	ldr	r3, [r7, #16]
 8003ba8:	1ad3      	subs	r3, r2, r3
 8003baa:	f241 3288 	movw	r2, #5000	; 0x1388
 8003bae:	4293      	cmp	r3, r2
 8003bb0:	d901      	bls.n	8003bb6 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8003bb2:	2303      	movs	r3, #3
 8003bb4:	e162      	b.n	8003e7c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003bb6:	4b89      	ldr	r3, [pc, #548]	; (8003ddc <HAL_RCC_OscConfig+0x778>)
 8003bb8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003bbc:	f003 0302 	and.w	r3, r3, #2
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d0ed      	beq.n	8003ba0 <HAL_RCC_OscConfig+0x53c>
 8003bc4:	e015      	b.n	8003bf2 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003bc6:	f7ff fa29 	bl	800301c <HAL_GetTick>
 8003bca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003bcc:	e00a      	b.n	8003be4 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003bce:	f7ff fa25 	bl	800301c <HAL_GetTick>
 8003bd2:	4602      	mov	r2, r0
 8003bd4:	693b      	ldr	r3, [r7, #16]
 8003bd6:	1ad3      	subs	r3, r2, r3
 8003bd8:	f241 3288 	movw	r2, #5000	; 0x1388
 8003bdc:	4293      	cmp	r3, r2
 8003bde:	d901      	bls.n	8003be4 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003be0:	2303      	movs	r3, #3
 8003be2:	e14b      	b.n	8003e7c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003be4:	4b7d      	ldr	r3, [pc, #500]	; (8003ddc <HAL_RCC_OscConfig+0x778>)
 8003be6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003bea:	f003 0302 	and.w	r3, r3, #2
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d1ed      	bne.n	8003bce <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003bf2:	7ffb      	ldrb	r3, [r7, #31]
 8003bf4:	2b01      	cmp	r3, #1
 8003bf6:	d105      	bne.n	8003c04 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003bf8:	4b78      	ldr	r3, [pc, #480]	; (8003ddc <HAL_RCC_OscConfig+0x778>)
 8003bfa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003bfc:	4a77      	ldr	r2, [pc, #476]	; (8003ddc <HAL_RCC_OscConfig+0x778>)
 8003bfe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003c02:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	f003 0320 	and.w	r3, r3, #32
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d03c      	beq.n	8003c8a <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d01c      	beq.n	8003c52 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003c18:	4b70      	ldr	r3, [pc, #448]	; (8003ddc <HAL_RCC_OscConfig+0x778>)
 8003c1a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003c1e:	4a6f      	ldr	r2, [pc, #444]	; (8003ddc <HAL_RCC_OscConfig+0x778>)
 8003c20:	f043 0301 	orr.w	r3, r3, #1
 8003c24:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c28:	f7ff f9f8 	bl	800301c <HAL_GetTick>
 8003c2c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003c2e:	e008      	b.n	8003c42 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003c30:	f7ff f9f4 	bl	800301c <HAL_GetTick>
 8003c34:	4602      	mov	r2, r0
 8003c36:	693b      	ldr	r3, [r7, #16]
 8003c38:	1ad3      	subs	r3, r2, r3
 8003c3a:	2b02      	cmp	r3, #2
 8003c3c:	d901      	bls.n	8003c42 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8003c3e:	2303      	movs	r3, #3
 8003c40:	e11c      	b.n	8003e7c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003c42:	4b66      	ldr	r3, [pc, #408]	; (8003ddc <HAL_RCC_OscConfig+0x778>)
 8003c44:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003c48:	f003 0302 	and.w	r3, r3, #2
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d0ef      	beq.n	8003c30 <HAL_RCC_OscConfig+0x5cc>
 8003c50:	e01b      	b.n	8003c8a <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003c52:	4b62      	ldr	r3, [pc, #392]	; (8003ddc <HAL_RCC_OscConfig+0x778>)
 8003c54:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003c58:	4a60      	ldr	r2, [pc, #384]	; (8003ddc <HAL_RCC_OscConfig+0x778>)
 8003c5a:	f023 0301 	bic.w	r3, r3, #1
 8003c5e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c62:	f7ff f9db 	bl	800301c <HAL_GetTick>
 8003c66:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003c68:	e008      	b.n	8003c7c <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003c6a:	f7ff f9d7 	bl	800301c <HAL_GetTick>
 8003c6e:	4602      	mov	r2, r0
 8003c70:	693b      	ldr	r3, [r7, #16]
 8003c72:	1ad3      	subs	r3, r2, r3
 8003c74:	2b02      	cmp	r3, #2
 8003c76:	d901      	bls.n	8003c7c <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8003c78:	2303      	movs	r3, #3
 8003c7a:	e0ff      	b.n	8003e7c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003c7c:	4b57      	ldr	r3, [pc, #348]	; (8003ddc <HAL_RCC_OscConfig+0x778>)
 8003c7e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003c82:	f003 0302 	and.w	r3, r3, #2
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d1ef      	bne.n	8003c6a <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	f000 80f3 	beq.w	8003e7a <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c98:	2b02      	cmp	r3, #2
 8003c9a:	f040 80c9 	bne.w	8003e30 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003c9e:	4b4f      	ldr	r3, [pc, #316]	; (8003ddc <HAL_RCC_OscConfig+0x778>)
 8003ca0:	68db      	ldr	r3, [r3, #12]
 8003ca2:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003ca4:	697b      	ldr	r3, [r7, #20]
 8003ca6:	f003 0203 	and.w	r2, r3, #3
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cae:	429a      	cmp	r2, r3
 8003cb0:	d12c      	bne.n	8003d0c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003cb2:	697b      	ldr	r3, [r7, #20]
 8003cb4:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cbc:	3b01      	subs	r3, #1
 8003cbe:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003cc0:	429a      	cmp	r2, r3
 8003cc2:	d123      	bne.n	8003d0c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003cc4:	697b      	ldr	r3, [r7, #20]
 8003cc6:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003cce:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003cd0:	429a      	cmp	r2, r3
 8003cd2:	d11b      	bne.n	8003d0c <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003cd4:	697b      	ldr	r3, [r7, #20]
 8003cd6:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cde:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003ce0:	429a      	cmp	r2, r3
 8003ce2:	d113      	bne.n	8003d0c <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003ce4:	697b      	ldr	r3, [r7, #20]
 8003ce6:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003cee:	085b      	lsrs	r3, r3, #1
 8003cf0:	3b01      	subs	r3, #1
 8003cf2:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003cf4:	429a      	cmp	r2, r3
 8003cf6:	d109      	bne.n	8003d0c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003cf8:	697b      	ldr	r3, [r7, #20]
 8003cfa:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d02:	085b      	lsrs	r3, r3, #1
 8003d04:	3b01      	subs	r3, #1
 8003d06:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003d08:	429a      	cmp	r2, r3
 8003d0a:	d06b      	beq.n	8003de4 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003d0c:	69bb      	ldr	r3, [r7, #24]
 8003d0e:	2b0c      	cmp	r3, #12
 8003d10:	d062      	beq.n	8003dd8 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003d12:	4b32      	ldr	r3, [pc, #200]	; (8003ddc <HAL_RCC_OscConfig+0x778>)
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d001      	beq.n	8003d22 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8003d1e:	2301      	movs	r3, #1
 8003d20:	e0ac      	b.n	8003e7c <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003d22:	4b2e      	ldr	r3, [pc, #184]	; (8003ddc <HAL_RCC_OscConfig+0x778>)
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	4a2d      	ldr	r2, [pc, #180]	; (8003ddc <HAL_RCC_OscConfig+0x778>)
 8003d28:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003d2c:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003d2e:	f7ff f975 	bl	800301c <HAL_GetTick>
 8003d32:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003d34:	e008      	b.n	8003d48 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d36:	f7ff f971 	bl	800301c <HAL_GetTick>
 8003d3a:	4602      	mov	r2, r0
 8003d3c:	693b      	ldr	r3, [r7, #16]
 8003d3e:	1ad3      	subs	r3, r2, r3
 8003d40:	2b02      	cmp	r3, #2
 8003d42:	d901      	bls.n	8003d48 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8003d44:	2303      	movs	r3, #3
 8003d46:	e099      	b.n	8003e7c <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003d48:	4b24      	ldr	r3, [pc, #144]	; (8003ddc <HAL_RCC_OscConfig+0x778>)
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d1f0      	bne.n	8003d36 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003d54:	4b21      	ldr	r3, [pc, #132]	; (8003ddc <HAL_RCC_OscConfig+0x778>)
 8003d56:	68da      	ldr	r2, [r3, #12]
 8003d58:	4b21      	ldr	r3, [pc, #132]	; (8003de0 <HAL_RCC_OscConfig+0x77c>)
 8003d5a:	4013      	ands	r3, r2
 8003d5c:	687a      	ldr	r2, [r7, #4]
 8003d5e:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8003d60:	687a      	ldr	r2, [r7, #4]
 8003d62:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003d64:	3a01      	subs	r2, #1
 8003d66:	0112      	lsls	r2, r2, #4
 8003d68:	4311      	orrs	r1, r2
 8003d6a:	687a      	ldr	r2, [r7, #4]
 8003d6c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003d6e:	0212      	lsls	r2, r2, #8
 8003d70:	4311      	orrs	r1, r2
 8003d72:	687a      	ldr	r2, [r7, #4]
 8003d74:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003d76:	0852      	lsrs	r2, r2, #1
 8003d78:	3a01      	subs	r2, #1
 8003d7a:	0552      	lsls	r2, r2, #21
 8003d7c:	4311      	orrs	r1, r2
 8003d7e:	687a      	ldr	r2, [r7, #4]
 8003d80:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003d82:	0852      	lsrs	r2, r2, #1
 8003d84:	3a01      	subs	r2, #1
 8003d86:	0652      	lsls	r2, r2, #25
 8003d88:	4311      	orrs	r1, r2
 8003d8a:	687a      	ldr	r2, [r7, #4]
 8003d8c:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003d8e:	06d2      	lsls	r2, r2, #27
 8003d90:	430a      	orrs	r2, r1
 8003d92:	4912      	ldr	r1, [pc, #72]	; (8003ddc <HAL_RCC_OscConfig+0x778>)
 8003d94:	4313      	orrs	r3, r2
 8003d96:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003d98:	4b10      	ldr	r3, [pc, #64]	; (8003ddc <HAL_RCC_OscConfig+0x778>)
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	4a0f      	ldr	r2, [pc, #60]	; (8003ddc <HAL_RCC_OscConfig+0x778>)
 8003d9e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003da2:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003da4:	4b0d      	ldr	r3, [pc, #52]	; (8003ddc <HAL_RCC_OscConfig+0x778>)
 8003da6:	68db      	ldr	r3, [r3, #12]
 8003da8:	4a0c      	ldr	r2, [pc, #48]	; (8003ddc <HAL_RCC_OscConfig+0x778>)
 8003daa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003dae:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003db0:	f7ff f934 	bl	800301c <HAL_GetTick>
 8003db4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003db6:	e008      	b.n	8003dca <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003db8:	f7ff f930 	bl	800301c <HAL_GetTick>
 8003dbc:	4602      	mov	r2, r0
 8003dbe:	693b      	ldr	r3, [r7, #16]
 8003dc0:	1ad3      	subs	r3, r2, r3
 8003dc2:	2b02      	cmp	r3, #2
 8003dc4:	d901      	bls.n	8003dca <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8003dc6:	2303      	movs	r3, #3
 8003dc8:	e058      	b.n	8003e7c <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003dca:	4b04      	ldr	r3, [pc, #16]	; (8003ddc <HAL_RCC_OscConfig+0x778>)
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d0f0      	beq.n	8003db8 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003dd6:	e050      	b.n	8003e7a <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003dd8:	2301      	movs	r3, #1
 8003dda:	e04f      	b.n	8003e7c <HAL_RCC_OscConfig+0x818>
 8003ddc:	40021000 	.word	0x40021000
 8003de0:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003de4:	4b27      	ldr	r3, [pc, #156]	; (8003e84 <HAL_RCC_OscConfig+0x820>)
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d144      	bne.n	8003e7a <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003df0:	4b24      	ldr	r3, [pc, #144]	; (8003e84 <HAL_RCC_OscConfig+0x820>)
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	4a23      	ldr	r2, [pc, #140]	; (8003e84 <HAL_RCC_OscConfig+0x820>)
 8003df6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003dfa:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003dfc:	4b21      	ldr	r3, [pc, #132]	; (8003e84 <HAL_RCC_OscConfig+0x820>)
 8003dfe:	68db      	ldr	r3, [r3, #12]
 8003e00:	4a20      	ldr	r2, [pc, #128]	; (8003e84 <HAL_RCC_OscConfig+0x820>)
 8003e02:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003e06:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003e08:	f7ff f908 	bl	800301c <HAL_GetTick>
 8003e0c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003e0e:	e008      	b.n	8003e22 <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e10:	f7ff f904 	bl	800301c <HAL_GetTick>
 8003e14:	4602      	mov	r2, r0
 8003e16:	693b      	ldr	r3, [r7, #16]
 8003e18:	1ad3      	subs	r3, r2, r3
 8003e1a:	2b02      	cmp	r3, #2
 8003e1c:	d901      	bls.n	8003e22 <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 8003e1e:	2303      	movs	r3, #3
 8003e20:	e02c      	b.n	8003e7c <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003e22:	4b18      	ldr	r3, [pc, #96]	; (8003e84 <HAL_RCC_OscConfig+0x820>)
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d0f0      	beq.n	8003e10 <HAL_RCC_OscConfig+0x7ac>
 8003e2e:	e024      	b.n	8003e7a <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003e30:	69bb      	ldr	r3, [r7, #24]
 8003e32:	2b0c      	cmp	r3, #12
 8003e34:	d01f      	beq.n	8003e76 <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e36:	4b13      	ldr	r3, [pc, #76]	; (8003e84 <HAL_RCC_OscConfig+0x820>)
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	4a12      	ldr	r2, [pc, #72]	; (8003e84 <HAL_RCC_OscConfig+0x820>)
 8003e3c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003e40:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e42:	f7ff f8eb 	bl	800301c <HAL_GetTick>
 8003e46:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003e48:	e008      	b.n	8003e5c <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e4a:	f7ff f8e7 	bl	800301c <HAL_GetTick>
 8003e4e:	4602      	mov	r2, r0
 8003e50:	693b      	ldr	r3, [r7, #16]
 8003e52:	1ad3      	subs	r3, r2, r3
 8003e54:	2b02      	cmp	r3, #2
 8003e56:	d901      	bls.n	8003e5c <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8003e58:	2303      	movs	r3, #3
 8003e5a:	e00f      	b.n	8003e7c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003e5c:	4b09      	ldr	r3, [pc, #36]	; (8003e84 <HAL_RCC_OscConfig+0x820>)
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d1f0      	bne.n	8003e4a <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8003e68:	4b06      	ldr	r3, [pc, #24]	; (8003e84 <HAL_RCC_OscConfig+0x820>)
 8003e6a:	68da      	ldr	r2, [r3, #12]
 8003e6c:	4905      	ldr	r1, [pc, #20]	; (8003e84 <HAL_RCC_OscConfig+0x820>)
 8003e6e:	4b06      	ldr	r3, [pc, #24]	; (8003e88 <HAL_RCC_OscConfig+0x824>)
 8003e70:	4013      	ands	r3, r2
 8003e72:	60cb      	str	r3, [r1, #12]
 8003e74:	e001      	b.n	8003e7a <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003e76:	2301      	movs	r3, #1
 8003e78:	e000      	b.n	8003e7c <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8003e7a:	2300      	movs	r3, #0
}
 8003e7c:	4618      	mov	r0, r3
 8003e7e:	3720      	adds	r7, #32
 8003e80:	46bd      	mov	sp, r7
 8003e82:	bd80      	pop	{r7, pc}
 8003e84:	40021000 	.word	0x40021000
 8003e88:	feeefffc 	.word	0xfeeefffc

08003e8c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003e8c:	b580      	push	{r7, lr}
 8003e8e:	b084      	sub	sp, #16
 8003e90:	af00      	add	r7, sp, #0
 8003e92:	6078      	str	r0, [r7, #4]
 8003e94:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d101      	bne.n	8003ea0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003e9c:	2301      	movs	r3, #1
 8003e9e:	e0e7      	b.n	8004070 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003ea0:	4b75      	ldr	r3, [pc, #468]	; (8004078 <HAL_RCC_ClockConfig+0x1ec>)
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	f003 0307 	and.w	r3, r3, #7
 8003ea8:	683a      	ldr	r2, [r7, #0]
 8003eaa:	429a      	cmp	r2, r3
 8003eac:	d910      	bls.n	8003ed0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003eae:	4b72      	ldr	r3, [pc, #456]	; (8004078 <HAL_RCC_ClockConfig+0x1ec>)
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	f023 0207 	bic.w	r2, r3, #7
 8003eb6:	4970      	ldr	r1, [pc, #448]	; (8004078 <HAL_RCC_ClockConfig+0x1ec>)
 8003eb8:	683b      	ldr	r3, [r7, #0]
 8003eba:	4313      	orrs	r3, r2
 8003ebc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003ebe:	4b6e      	ldr	r3, [pc, #440]	; (8004078 <HAL_RCC_ClockConfig+0x1ec>)
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	f003 0307 	and.w	r3, r3, #7
 8003ec6:	683a      	ldr	r2, [r7, #0]
 8003ec8:	429a      	cmp	r2, r3
 8003eca:	d001      	beq.n	8003ed0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003ecc:	2301      	movs	r3, #1
 8003ece:	e0cf      	b.n	8004070 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	f003 0302 	and.w	r3, r3, #2
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d010      	beq.n	8003efe <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	689a      	ldr	r2, [r3, #8]
 8003ee0:	4b66      	ldr	r3, [pc, #408]	; (800407c <HAL_RCC_ClockConfig+0x1f0>)
 8003ee2:	689b      	ldr	r3, [r3, #8]
 8003ee4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003ee8:	429a      	cmp	r2, r3
 8003eea:	d908      	bls.n	8003efe <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003eec:	4b63      	ldr	r3, [pc, #396]	; (800407c <HAL_RCC_ClockConfig+0x1f0>)
 8003eee:	689b      	ldr	r3, [r3, #8]
 8003ef0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	689b      	ldr	r3, [r3, #8]
 8003ef8:	4960      	ldr	r1, [pc, #384]	; (800407c <HAL_RCC_ClockConfig+0x1f0>)
 8003efa:	4313      	orrs	r3, r2
 8003efc:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	f003 0301 	and.w	r3, r3, #1
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d04c      	beq.n	8003fa4 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	685b      	ldr	r3, [r3, #4]
 8003f0e:	2b03      	cmp	r3, #3
 8003f10:	d107      	bne.n	8003f22 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003f12:	4b5a      	ldr	r3, [pc, #360]	; (800407c <HAL_RCC_ClockConfig+0x1f0>)
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d121      	bne.n	8003f62 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8003f1e:	2301      	movs	r3, #1
 8003f20:	e0a6      	b.n	8004070 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	685b      	ldr	r3, [r3, #4]
 8003f26:	2b02      	cmp	r3, #2
 8003f28:	d107      	bne.n	8003f3a <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003f2a:	4b54      	ldr	r3, [pc, #336]	; (800407c <HAL_RCC_ClockConfig+0x1f0>)
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d115      	bne.n	8003f62 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003f36:	2301      	movs	r3, #1
 8003f38:	e09a      	b.n	8004070 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	685b      	ldr	r3, [r3, #4]
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d107      	bne.n	8003f52 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003f42:	4b4e      	ldr	r3, [pc, #312]	; (800407c <HAL_RCC_ClockConfig+0x1f0>)
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	f003 0302 	and.w	r3, r3, #2
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d109      	bne.n	8003f62 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003f4e:	2301      	movs	r3, #1
 8003f50:	e08e      	b.n	8004070 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003f52:	4b4a      	ldr	r3, [pc, #296]	; (800407c <HAL_RCC_ClockConfig+0x1f0>)
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d101      	bne.n	8003f62 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003f5e:	2301      	movs	r3, #1
 8003f60:	e086      	b.n	8004070 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003f62:	4b46      	ldr	r3, [pc, #280]	; (800407c <HAL_RCC_ClockConfig+0x1f0>)
 8003f64:	689b      	ldr	r3, [r3, #8]
 8003f66:	f023 0203 	bic.w	r2, r3, #3
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	685b      	ldr	r3, [r3, #4]
 8003f6e:	4943      	ldr	r1, [pc, #268]	; (800407c <HAL_RCC_ClockConfig+0x1f0>)
 8003f70:	4313      	orrs	r3, r2
 8003f72:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003f74:	f7ff f852 	bl	800301c <HAL_GetTick>
 8003f78:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f7a:	e00a      	b.n	8003f92 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003f7c:	f7ff f84e 	bl	800301c <HAL_GetTick>
 8003f80:	4602      	mov	r2, r0
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	1ad3      	subs	r3, r2, r3
 8003f86:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f8a:	4293      	cmp	r3, r2
 8003f8c:	d901      	bls.n	8003f92 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8003f8e:	2303      	movs	r3, #3
 8003f90:	e06e      	b.n	8004070 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f92:	4b3a      	ldr	r3, [pc, #232]	; (800407c <HAL_RCC_ClockConfig+0x1f0>)
 8003f94:	689b      	ldr	r3, [r3, #8]
 8003f96:	f003 020c 	and.w	r2, r3, #12
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	685b      	ldr	r3, [r3, #4]
 8003f9e:	009b      	lsls	r3, r3, #2
 8003fa0:	429a      	cmp	r2, r3
 8003fa2:	d1eb      	bne.n	8003f7c <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	f003 0302 	and.w	r3, r3, #2
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d010      	beq.n	8003fd2 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	689a      	ldr	r2, [r3, #8]
 8003fb4:	4b31      	ldr	r3, [pc, #196]	; (800407c <HAL_RCC_ClockConfig+0x1f0>)
 8003fb6:	689b      	ldr	r3, [r3, #8]
 8003fb8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003fbc:	429a      	cmp	r2, r3
 8003fbe:	d208      	bcs.n	8003fd2 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003fc0:	4b2e      	ldr	r3, [pc, #184]	; (800407c <HAL_RCC_ClockConfig+0x1f0>)
 8003fc2:	689b      	ldr	r3, [r3, #8]
 8003fc4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	689b      	ldr	r3, [r3, #8]
 8003fcc:	492b      	ldr	r1, [pc, #172]	; (800407c <HAL_RCC_ClockConfig+0x1f0>)
 8003fce:	4313      	orrs	r3, r2
 8003fd0:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003fd2:	4b29      	ldr	r3, [pc, #164]	; (8004078 <HAL_RCC_ClockConfig+0x1ec>)
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	f003 0307 	and.w	r3, r3, #7
 8003fda:	683a      	ldr	r2, [r7, #0]
 8003fdc:	429a      	cmp	r2, r3
 8003fde:	d210      	bcs.n	8004002 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003fe0:	4b25      	ldr	r3, [pc, #148]	; (8004078 <HAL_RCC_ClockConfig+0x1ec>)
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	f023 0207 	bic.w	r2, r3, #7
 8003fe8:	4923      	ldr	r1, [pc, #140]	; (8004078 <HAL_RCC_ClockConfig+0x1ec>)
 8003fea:	683b      	ldr	r3, [r7, #0]
 8003fec:	4313      	orrs	r3, r2
 8003fee:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003ff0:	4b21      	ldr	r3, [pc, #132]	; (8004078 <HAL_RCC_ClockConfig+0x1ec>)
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	f003 0307 	and.w	r3, r3, #7
 8003ff8:	683a      	ldr	r2, [r7, #0]
 8003ffa:	429a      	cmp	r2, r3
 8003ffc:	d001      	beq.n	8004002 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8003ffe:	2301      	movs	r3, #1
 8004000:	e036      	b.n	8004070 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	f003 0304 	and.w	r3, r3, #4
 800400a:	2b00      	cmp	r3, #0
 800400c:	d008      	beq.n	8004020 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800400e:	4b1b      	ldr	r3, [pc, #108]	; (800407c <HAL_RCC_ClockConfig+0x1f0>)
 8004010:	689b      	ldr	r3, [r3, #8]
 8004012:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	68db      	ldr	r3, [r3, #12]
 800401a:	4918      	ldr	r1, [pc, #96]	; (800407c <HAL_RCC_ClockConfig+0x1f0>)
 800401c:	4313      	orrs	r3, r2
 800401e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	f003 0308 	and.w	r3, r3, #8
 8004028:	2b00      	cmp	r3, #0
 800402a:	d009      	beq.n	8004040 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800402c:	4b13      	ldr	r3, [pc, #76]	; (800407c <HAL_RCC_ClockConfig+0x1f0>)
 800402e:	689b      	ldr	r3, [r3, #8]
 8004030:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	691b      	ldr	r3, [r3, #16]
 8004038:	00db      	lsls	r3, r3, #3
 800403a:	4910      	ldr	r1, [pc, #64]	; (800407c <HAL_RCC_ClockConfig+0x1f0>)
 800403c:	4313      	orrs	r3, r2
 800403e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004040:	f000 f824 	bl	800408c <HAL_RCC_GetSysClockFreq>
 8004044:	4602      	mov	r2, r0
 8004046:	4b0d      	ldr	r3, [pc, #52]	; (800407c <HAL_RCC_ClockConfig+0x1f0>)
 8004048:	689b      	ldr	r3, [r3, #8]
 800404a:	091b      	lsrs	r3, r3, #4
 800404c:	f003 030f 	and.w	r3, r3, #15
 8004050:	490b      	ldr	r1, [pc, #44]	; (8004080 <HAL_RCC_ClockConfig+0x1f4>)
 8004052:	5ccb      	ldrb	r3, [r1, r3]
 8004054:	f003 031f 	and.w	r3, r3, #31
 8004058:	fa22 f303 	lsr.w	r3, r2, r3
 800405c:	4a09      	ldr	r2, [pc, #36]	; (8004084 <HAL_RCC_ClockConfig+0x1f8>)
 800405e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004060:	4b09      	ldr	r3, [pc, #36]	; (8004088 <HAL_RCC_ClockConfig+0x1fc>)
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	4618      	mov	r0, r3
 8004066:	f7fe ff89 	bl	8002f7c <HAL_InitTick>
 800406a:	4603      	mov	r3, r0
 800406c:	72fb      	strb	r3, [r7, #11]

  return status;
 800406e:	7afb      	ldrb	r3, [r7, #11]
}
 8004070:	4618      	mov	r0, r3
 8004072:	3710      	adds	r7, #16
 8004074:	46bd      	mov	sp, r7
 8004076:	bd80      	pop	{r7, pc}
 8004078:	40022000 	.word	0x40022000
 800407c:	40021000 	.word	0x40021000
 8004080:	0800cc14 	.word	0x0800cc14
 8004084:	20000000 	.word	0x20000000
 8004088:	20000004 	.word	0x20000004

0800408c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800408c:	b480      	push	{r7}
 800408e:	b089      	sub	sp, #36	; 0x24
 8004090:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8004092:	2300      	movs	r3, #0
 8004094:	61fb      	str	r3, [r7, #28]
 8004096:	2300      	movs	r3, #0
 8004098:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800409a:	4b3e      	ldr	r3, [pc, #248]	; (8004194 <HAL_RCC_GetSysClockFreq+0x108>)
 800409c:	689b      	ldr	r3, [r3, #8]
 800409e:	f003 030c 	and.w	r3, r3, #12
 80040a2:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80040a4:	4b3b      	ldr	r3, [pc, #236]	; (8004194 <HAL_RCC_GetSysClockFreq+0x108>)
 80040a6:	68db      	ldr	r3, [r3, #12]
 80040a8:	f003 0303 	and.w	r3, r3, #3
 80040ac:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80040ae:	693b      	ldr	r3, [r7, #16]
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d005      	beq.n	80040c0 <HAL_RCC_GetSysClockFreq+0x34>
 80040b4:	693b      	ldr	r3, [r7, #16]
 80040b6:	2b0c      	cmp	r3, #12
 80040b8:	d121      	bne.n	80040fe <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	2b01      	cmp	r3, #1
 80040be:	d11e      	bne.n	80040fe <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80040c0:	4b34      	ldr	r3, [pc, #208]	; (8004194 <HAL_RCC_GetSysClockFreq+0x108>)
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	f003 0308 	and.w	r3, r3, #8
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d107      	bne.n	80040dc <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80040cc:	4b31      	ldr	r3, [pc, #196]	; (8004194 <HAL_RCC_GetSysClockFreq+0x108>)
 80040ce:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80040d2:	0a1b      	lsrs	r3, r3, #8
 80040d4:	f003 030f 	and.w	r3, r3, #15
 80040d8:	61fb      	str	r3, [r7, #28]
 80040da:	e005      	b.n	80040e8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80040dc:	4b2d      	ldr	r3, [pc, #180]	; (8004194 <HAL_RCC_GetSysClockFreq+0x108>)
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	091b      	lsrs	r3, r3, #4
 80040e2:	f003 030f 	and.w	r3, r3, #15
 80040e6:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80040e8:	4a2b      	ldr	r2, [pc, #172]	; (8004198 <HAL_RCC_GetSysClockFreq+0x10c>)
 80040ea:	69fb      	ldr	r3, [r7, #28]
 80040ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80040f0:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80040f2:	693b      	ldr	r3, [r7, #16]
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d10d      	bne.n	8004114 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80040f8:	69fb      	ldr	r3, [r7, #28]
 80040fa:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80040fc:	e00a      	b.n	8004114 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80040fe:	693b      	ldr	r3, [r7, #16]
 8004100:	2b04      	cmp	r3, #4
 8004102:	d102      	bne.n	800410a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004104:	4b25      	ldr	r3, [pc, #148]	; (800419c <HAL_RCC_GetSysClockFreq+0x110>)
 8004106:	61bb      	str	r3, [r7, #24]
 8004108:	e004      	b.n	8004114 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800410a:	693b      	ldr	r3, [r7, #16]
 800410c:	2b08      	cmp	r3, #8
 800410e:	d101      	bne.n	8004114 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004110:	4b23      	ldr	r3, [pc, #140]	; (80041a0 <HAL_RCC_GetSysClockFreq+0x114>)
 8004112:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004114:	693b      	ldr	r3, [r7, #16]
 8004116:	2b0c      	cmp	r3, #12
 8004118:	d134      	bne.n	8004184 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800411a:	4b1e      	ldr	r3, [pc, #120]	; (8004194 <HAL_RCC_GetSysClockFreq+0x108>)
 800411c:	68db      	ldr	r3, [r3, #12]
 800411e:	f003 0303 	and.w	r3, r3, #3
 8004122:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004124:	68bb      	ldr	r3, [r7, #8]
 8004126:	2b02      	cmp	r3, #2
 8004128:	d003      	beq.n	8004132 <HAL_RCC_GetSysClockFreq+0xa6>
 800412a:	68bb      	ldr	r3, [r7, #8]
 800412c:	2b03      	cmp	r3, #3
 800412e:	d003      	beq.n	8004138 <HAL_RCC_GetSysClockFreq+0xac>
 8004130:	e005      	b.n	800413e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8004132:	4b1a      	ldr	r3, [pc, #104]	; (800419c <HAL_RCC_GetSysClockFreq+0x110>)
 8004134:	617b      	str	r3, [r7, #20]
      break;
 8004136:	e005      	b.n	8004144 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8004138:	4b19      	ldr	r3, [pc, #100]	; (80041a0 <HAL_RCC_GetSysClockFreq+0x114>)
 800413a:	617b      	str	r3, [r7, #20]
      break;
 800413c:	e002      	b.n	8004144 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800413e:	69fb      	ldr	r3, [r7, #28]
 8004140:	617b      	str	r3, [r7, #20]
      break;
 8004142:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004144:	4b13      	ldr	r3, [pc, #76]	; (8004194 <HAL_RCC_GetSysClockFreq+0x108>)
 8004146:	68db      	ldr	r3, [r3, #12]
 8004148:	091b      	lsrs	r3, r3, #4
 800414a:	f003 0307 	and.w	r3, r3, #7
 800414e:	3301      	adds	r3, #1
 8004150:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004152:	4b10      	ldr	r3, [pc, #64]	; (8004194 <HAL_RCC_GetSysClockFreq+0x108>)
 8004154:	68db      	ldr	r3, [r3, #12]
 8004156:	0a1b      	lsrs	r3, r3, #8
 8004158:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800415c:	697a      	ldr	r2, [r7, #20]
 800415e:	fb03 f202 	mul.w	r2, r3, r2
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	fbb2 f3f3 	udiv	r3, r2, r3
 8004168:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800416a:	4b0a      	ldr	r3, [pc, #40]	; (8004194 <HAL_RCC_GetSysClockFreq+0x108>)
 800416c:	68db      	ldr	r3, [r3, #12]
 800416e:	0e5b      	lsrs	r3, r3, #25
 8004170:	f003 0303 	and.w	r3, r3, #3
 8004174:	3301      	adds	r3, #1
 8004176:	005b      	lsls	r3, r3, #1
 8004178:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800417a:	697a      	ldr	r2, [r7, #20]
 800417c:	683b      	ldr	r3, [r7, #0]
 800417e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004182:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004184:	69bb      	ldr	r3, [r7, #24]
}
 8004186:	4618      	mov	r0, r3
 8004188:	3724      	adds	r7, #36	; 0x24
 800418a:	46bd      	mov	sp, r7
 800418c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004190:	4770      	bx	lr
 8004192:	bf00      	nop
 8004194:	40021000 	.word	0x40021000
 8004198:	0800cc2c 	.word	0x0800cc2c
 800419c:	00f42400 	.word	0x00f42400
 80041a0:	007a1200 	.word	0x007a1200

080041a4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80041a4:	b480      	push	{r7}
 80041a6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80041a8:	4b03      	ldr	r3, [pc, #12]	; (80041b8 <HAL_RCC_GetHCLKFreq+0x14>)
 80041aa:	681b      	ldr	r3, [r3, #0]
}
 80041ac:	4618      	mov	r0, r3
 80041ae:	46bd      	mov	sp, r7
 80041b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b4:	4770      	bx	lr
 80041b6:	bf00      	nop
 80041b8:	20000000 	.word	0x20000000

080041bc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80041bc:	b580      	push	{r7, lr}
 80041be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80041c0:	f7ff fff0 	bl	80041a4 <HAL_RCC_GetHCLKFreq>
 80041c4:	4602      	mov	r2, r0
 80041c6:	4b06      	ldr	r3, [pc, #24]	; (80041e0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80041c8:	689b      	ldr	r3, [r3, #8]
 80041ca:	0a1b      	lsrs	r3, r3, #8
 80041cc:	f003 0307 	and.w	r3, r3, #7
 80041d0:	4904      	ldr	r1, [pc, #16]	; (80041e4 <HAL_RCC_GetPCLK1Freq+0x28>)
 80041d2:	5ccb      	ldrb	r3, [r1, r3]
 80041d4:	f003 031f 	and.w	r3, r3, #31
 80041d8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80041dc:	4618      	mov	r0, r3
 80041de:	bd80      	pop	{r7, pc}
 80041e0:	40021000 	.word	0x40021000
 80041e4:	0800cc24 	.word	0x0800cc24

080041e8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80041e8:	b580      	push	{r7, lr}
 80041ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80041ec:	f7ff ffda 	bl	80041a4 <HAL_RCC_GetHCLKFreq>
 80041f0:	4602      	mov	r2, r0
 80041f2:	4b06      	ldr	r3, [pc, #24]	; (800420c <HAL_RCC_GetPCLK2Freq+0x24>)
 80041f4:	689b      	ldr	r3, [r3, #8]
 80041f6:	0adb      	lsrs	r3, r3, #11
 80041f8:	f003 0307 	and.w	r3, r3, #7
 80041fc:	4904      	ldr	r1, [pc, #16]	; (8004210 <HAL_RCC_GetPCLK2Freq+0x28>)
 80041fe:	5ccb      	ldrb	r3, [r1, r3]
 8004200:	f003 031f 	and.w	r3, r3, #31
 8004204:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004208:	4618      	mov	r0, r3
 800420a:	bd80      	pop	{r7, pc}
 800420c:	40021000 	.word	0x40021000
 8004210:	0800cc24 	.word	0x0800cc24

08004214 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004214:	b580      	push	{r7, lr}
 8004216:	b086      	sub	sp, #24
 8004218:	af00      	add	r7, sp, #0
 800421a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800421c:	2300      	movs	r3, #0
 800421e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004220:	4b2a      	ldr	r3, [pc, #168]	; (80042cc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004222:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004224:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004228:	2b00      	cmp	r3, #0
 800422a:	d003      	beq.n	8004234 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800422c:	f7ff f9b6 	bl	800359c <HAL_PWREx_GetVoltageRange>
 8004230:	6178      	str	r0, [r7, #20]
 8004232:	e014      	b.n	800425e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004234:	4b25      	ldr	r3, [pc, #148]	; (80042cc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004236:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004238:	4a24      	ldr	r2, [pc, #144]	; (80042cc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800423a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800423e:	6593      	str	r3, [r2, #88]	; 0x58
 8004240:	4b22      	ldr	r3, [pc, #136]	; (80042cc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004242:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004244:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004248:	60fb      	str	r3, [r7, #12]
 800424a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800424c:	f7ff f9a6 	bl	800359c <HAL_PWREx_GetVoltageRange>
 8004250:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8004252:	4b1e      	ldr	r3, [pc, #120]	; (80042cc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004254:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004256:	4a1d      	ldr	r2, [pc, #116]	; (80042cc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004258:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800425c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800425e:	697b      	ldr	r3, [r7, #20]
 8004260:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004264:	d10b      	bne.n	800427e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	2b80      	cmp	r3, #128	; 0x80
 800426a:	d919      	bls.n	80042a0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	2ba0      	cmp	r3, #160	; 0xa0
 8004270:	d902      	bls.n	8004278 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004272:	2302      	movs	r3, #2
 8004274:	613b      	str	r3, [r7, #16]
 8004276:	e013      	b.n	80042a0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004278:	2301      	movs	r3, #1
 800427a:	613b      	str	r3, [r7, #16]
 800427c:	e010      	b.n	80042a0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	2b80      	cmp	r3, #128	; 0x80
 8004282:	d902      	bls.n	800428a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8004284:	2303      	movs	r3, #3
 8004286:	613b      	str	r3, [r7, #16]
 8004288:	e00a      	b.n	80042a0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	2b80      	cmp	r3, #128	; 0x80
 800428e:	d102      	bne.n	8004296 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004290:	2302      	movs	r3, #2
 8004292:	613b      	str	r3, [r7, #16]
 8004294:	e004      	b.n	80042a0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	2b70      	cmp	r3, #112	; 0x70
 800429a:	d101      	bne.n	80042a0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800429c:	2301      	movs	r3, #1
 800429e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80042a0:	4b0b      	ldr	r3, [pc, #44]	; (80042d0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	f023 0207 	bic.w	r2, r3, #7
 80042a8:	4909      	ldr	r1, [pc, #36]	; (80042d0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80042aa:	693b      	ldr	r3, [r7, #16]
 80042ac:	4313      	orrs	r3, r2
 80042ae:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80042b0:	4b07      	ldr	r3, [pc, #28]	; (80042d0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	f003 0307 	and.w	r3, r3, #7
 80042b8:	693a      	ldr	r2, [r7, #16]
 80042ba:	429a      	cmp	r2, r3
 80042bc:	d001      	beq.n	80042c2 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80042be:	2301      	movs	r3, #1
 80042c0:	e000      	b.n	80042c4 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80042c2:	2300      	movs	r3, #0
}
 80042c4:	4618      	mov	r0, r3
 80042c6:	3718      	adds	r7, #24
 80042c8:	46bd      	mov	sp, r7
 80042ca:	bd80      	pop	{r7, pc}
 80042cc:	40021000 	.word	0x40021000
 80042d0:	40022000 	.word	0x40022000

080042d4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80042d4:	b580      	push	{r7, lr}
 80042d6:	b086      	sub	sp, #24
 80042d8:	af00      	add	r7, sp, #0
 80042da:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80042dc:	2300      	movs	r3, #0
 80042de:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80042e0:	2300      	movs	r3, #0
 80042e2:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d031      	beq.n	8004354 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042f4:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80042f8:	d01a      	beq.n	8004330 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 80042fa:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80042fe:	d814      	bhi.n	800432a <HAL_RCCEx_PeriphCLKConfig+0x56>
 8004300:	2b00      	cmp	r3, #0
 8004302:	d009      	beq.n	8004318 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8004304:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004308:	d10f      	bne.n	800432a <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 800430a:	4b5d      	ldr	r3, [pc, #372]	; (8004480 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800430c:	68db      	ldr	r3, [r3, #12]
 800430e:	4a5c      	ldr	r2, [pc, #368]	; (8004480 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004310:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004314:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004316:	e00c      	b.n	8004332 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	3304      	adds	r3, #4
 800431c:	2100      	movs	r1, #0
 800431e:	4618      	mov	r0, r3
 8004320:	f000 f9de 	bl	80046e0 <RCCEx_PLLSAI1_Config>
 8004324:	4603      	mov	r3, r0
 8004326:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004328:	e003      	b.n	8004332 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800432a:	2301      	movs	r3, #1
 800432c:	74fb      	strb	r3, [r7, #19]
      break;
 800432e:	e000      	b.n	8004332 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8004330:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004332:	7cfb      	ldrb	r3, [r7, #19]
 8004334:	2b00      	cmp	r3, #0
 8004336:	d10b      	bne.n	8004350 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004338:	4b51      	ldr	r3, [pc, #324]	; (8004480 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800433a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800433e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004346:	494e      	ldr	r1, [pc, #312]	; (8004480 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004348:	4313      	orrs	r3, r2
 800434a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800434e:	e001      	b.n	8004354 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004350:	7cfb      	ldrb	r3, [r7, #19]
 8004352:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800435c:	2b00      	cmp	r3, #0
 800435e:	f000 809e 	beq.w	800449e <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004362:	2300      	movs	r3, #0
 8004364:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004366:	4b46      	ldr	r3, [pc, #280]	; (8004480 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004368:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800436a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800436e:	2b00      	cmp	r3, #0
 8004370:	d101      	bne.n	8004376 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8004372:	2301      	movs	r3, #1
 8004374:	e000      	b.n	8004378 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8004376:	2300      	movs	r3, #0
 8004378:	2b00      	cmp	r3, #0
 800437a:	d00d      	beq.n	8004398 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800437c:	4b40      	ldr	r3, [pc, #256]	; (8004480 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800437e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004380:	4a3f      	ldr	r2, [pc, #252]	; (8004480 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004382:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004386:	6593      	str	r3, [r2, #88]	; 0x58
 8004388:	4b3d      	ldr	r3, [pc, #244]	; (8004480 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800438a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800438c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004390:	60bb      	str	r3, [r7, #8]
 8004392:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004394:	2301      	movs	r3, #1
 8004396:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004398:	4b3a      	ldr	r3, [pc, #232]	; (8004484 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	4a39      	ldr	r2, [pc, #228]	; (8004484 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800439e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80043a2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80043a4:	f7fe fe3a 	bl	800301c <HAL_GetTick>
 80043a8:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80043aa:	e009      	b.n	80043c0 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80043ac:	f7fe fe36 	bl	800301c <HAL_GetTick>
 80043b0:	4602      	mov	r2, r0
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	1ad3      	subs	r3, r2, r3
 80043b6:	2b02      	cmp	r3, #2
 80043b8:	d902      	bls.n	80043c0 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 80043ba:	2303      	movs	r3, #3
 80043bc:	74fb      	strb	r3, [r7, #19]
        break;
 80043be:	e005      	b.n	80043cc <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80043c0:	4b30      	ldr	r3, [pc, #192]	; (8004484 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d0ef      	beq.n	80043ac <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 80043cc:	7cfb      	ldrb	r3, [r7, #19]
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d15a      	bne.n	8004488 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80043d2:	4b2b      	ldr	r3, [pc, #172]	; (8004480 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80043d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043d8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80043dc:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80043de:	697b      	ldr	r3, [r7, #20]
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d01e      	beq.n	8004422 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80043e8:	697a      	ldr	r2, [r7, #20]
 80043ea:	429a      	cmp	r2, r3
 80043ec:	d019      	beq.n	8004422 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80043ee:	4b24      	ldr	r3, [pc, #144]	; (8004480 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80043f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043f4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80043f8:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80043fa:	4b21      	ldr	r3, [pc, #132]	; (8004480 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80043fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004400:	4a1f      	ldr	r2, [pc, #124]	; (8004480 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004402:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004406:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800440a:	4b1d      	ldr	r3, [pc, #116]	; (8004480 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800440c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004410:	4a1b      	ldr	r2, [pc, #108]	; (8004480 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004412:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004416:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800441a:	4a19      	ldr	r2, [pc, #100]	; (8004480 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800441c:	697b      	ldr	r3, [r7, #20]
 800441e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004422:	697b      	ldr	r3, [r7, #20]
 8004424:	f003 0301 	and.w	r3, r3, #1
 8004428:	2b00      	cmp	r3, #0
 800442a:	d016      	beq.n	800445a <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800442c:	f7fe fdf6 	bl	800301c <HAL_GetTick>
 8004430:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004432:	e00b      	b.n	800444c <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004434:	f7fe fdf2 	bl	800301c <HAL_GetTick>
 8004438:	4602      	mov	r2, r0
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	1ad3      	subs	r3, r2, r3
 800443e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004442:	4293      	cmp	r3, r2
 8004444:	d902      	bls.n	800444c <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8004446:	2303      	movs	r3, #3
 8004448:	74fb      	strb	r3, [r7, #19]
            break;
 800444a:	e006      	b.n	800445a <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800444c:	4b0c      	ldr	r3, [pc, #48]	; (8004480 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800444e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004452:	f003 0302 	and.w	r3, r3, #2
 8004456:	2b00      	cmp	r3, #0
 8004458:	d0ec      	beq.n	8004434 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 800445a:	7cfb      	ldrb	r3, [r7, #19]
 800445c:	2b00      	cmp	r3, #0
 800445e:	d10b      	bne.n	8004478 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004460:	4b07      	ldr	r3, [pc, #28]	; (8004480 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004462:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004466:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800446e:	4904      	ldr	r1, [pc, #16]	; (8004480 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004470:	4313      	orrs	r3, r2
 8004472:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004476:	e009      	b.n	800448c <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004478:	7cfb      	ldrb	r3, [r7, #19]
 800447a:	74bb      	strb	r3, [r7, #18]
 800447c:	e006      	b.n	800448c <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 800447e:	bf00      	nop
 8004480:	40021000 	.word	0x40021000
 8004484:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004488:	7cfb      	ldrb	r3, [r7, #19]
 800448a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800448c:	7c7b      	ldrb	r3, [r7, #17]
 800448e:	2b01      	cmp	r3, #1
 8004490:	d105      	bne.n	800449e <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004492:	4b8a      	ldr	r3, [pc, #552]	; (80046bc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004494:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004496:	4a89      	ldr	r2, [pc, #548]	; (80046bc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004498:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800449c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	f003 0301 	and.w	r3, r3, #1
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d00a      	beq.n	80044c0 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80044aa:	4b84      	ldr	r3, [pc, #528]	; (80046bc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80044ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044b0:	f023 0203 	bic.w	r2, r3, #3
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	6a1b      	ldr	r3, [r3, #32]
 80044b8:	4980      	ldr	r1, [pc, #512]	; (80046bc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80044ba:	4313      	orrs	r3, r2
 80044bc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	f003 0302 	and.w	r3, r3, #2
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d00a      	beq.n	80044e2 <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80044cc:	4b7b      	ldr	r3, [pc, #492]	; (80046bc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80044ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044d2:	f023 020c 	bic.w	r2, r3, #12
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044da:	4978      	ldr	r1, [pc, #480]	; (80046bc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80044dc:	4313      	orrs	r3, r2
 80044de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	f003 0320 	and.w	r3, r3, #32
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d00a      	beq.n	8004504 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80044ee:	4b73      	ldr	r3, [pc, #460]	; (80046bc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80044f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044f4:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044fc:	496f      	ldr	r1, [pc, #444]	; (80046bc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80044fe:	4313      	orrs	r3, r2
 8004500:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800450c:	2b00      	cmp	r3, #0
 800450e:	d00a      	beq.n	8004526 <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004510:	4b6a      	ldr	r3, [pc, #424]	; (80046bc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004512:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004516:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800451e:	4967      	ldr	r1, [pc, #412]	; (80046bc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004520:	4313      	orrs	r3, r2
 8004522:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800452e:	2b00      	cmp	r3, #0
 8004530:	d00a      	beq.n	8004548 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004532:	4b62      	ldr	r3, [pc, #392]	; (80046bc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004534:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004538:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004540:	495e      	ldr	r1, [pc, #376]	; (80046bc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004542:	4313      	orrs	r3, r2
 8004544:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004550:	2b00      	cmp	r3, #0
 8004552:	d00a      	beq.n	800456a <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004554:	4b59      	ldr	r3, [pc, #356]	; (80046bc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004556:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800455a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004562:	4956      	ldr	r1, [pc, #344]	; (80046bc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004564:	4313      	orrs	r3, r2
 8004566:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004572:	2b00      	cmp	r3, #0
 8004574:	d00a      	beq.n	800458c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004576:	4b51      	ldr	r3, [pc, #324]	; (80046bc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004578:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800457c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004584:	494d      	ldr	r1, [pc, #308]	; (80046bc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004586:	4313      	orrs	r3, r2
 8004588:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004594:	2b00      	cmp	r3, #0
 8004596:	d028      	beq.n	80045ea <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004598:	4b48      	ldr	r3, [pc, #288]	; (80046bc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800459a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800459e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045a6:	4945      	ldr	r1, [pc, #276]	; (80046bc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80045a8:	4313      	orrs	r3, r2
 80045aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045b2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80045b6:	d106      	bne.n	80045c6 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80045b8:	4b40      	ldr	r3, [pc, #256]	; (80046bc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80045ba:	68db      	ldr	r3, [r3, #12]
 80045bc:	4a3f      	ldr	r2, [pc, #252]	; (80046bc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80045be:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80045c2:	60d3      	str	r3, [r2, #12]
 80045c4:	e011      	b.n	80045ea <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045ca:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80045ce:	d10c      	bne.n	80045ea <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	3304      	adds	r3, #4
 80045d4:	2101      	movs	r1, #1
 80045d6:	4618      	mov	r0, r3
 80045d8:	f000 f882 	bl	80046e0 <RCCEx_PLLSAI1_Config>
 80045dc:	4603      	mov	r3, r0
 80045de:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80045e0:	7cfb      	ldrb	r3, [r7, #19]
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d001      	beq.n	80045ea <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 80045e6:	7cfb      	ldrb	r3, [r7, #19]
 80045e8:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d028      	beq.n	8004648 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80045f6:	4b31      	ldr	r3, [pc, #196]	; (80046bc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80045f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045fc:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004604:	492d      	ldr	r1, [pc, #180]	; (80046bc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004606:	4313      	orrs	r3, r2
 8004608:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004610:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004614:	d106      	bne.n	8004624 <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004616:	4b29      	ldr	r3, [pc, #164]	; (80046bc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004618:	68db      	ldr	r3, [r3, #12]
 800461a:	4a28      	ldr	r2, [pc, #160]	; (80046bc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800461c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004620:	60d3      	str	r3, [r2, #12]
 8004622:	e011      	b.n	8004648 <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004628:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800462c:	d10c      	bne.n	8004648 <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	3304      	adds	r3, #4
 8004632:	2101      	movs	r1, #1
 8004634:	4618      	mov	r0, r3
 8004636:	f000 f853 	bl	80046e0 <RCCEx_PLLSAI1_Config>
 800463a:	4603      	mov	r3, r0
 800463c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800463e:	7cfb      	ldrb	r3, [r7, #19]
 8004640:	2b00      	cmp	r3, #0
 8004642:	d001      	beq.n	8004648 <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 8004644:	7cfb      	ldrb	r3, [r7, #19]
 8004646:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004650:	2b00      	cmp	r3, #0
 8004652:	d01c      	beq.n	800468e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004654:	4b19      	ldr	r3, [pc, #100]	; (80046bc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004656:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800465a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004662:	4916      	ldr	r1, [pc, #88]	; (80046bc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004664:	4313      	orrs	r3, r2
 8004666:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800466e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004672:	d10c      	bne.n	800468e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	3304      	adds	r3, #4
 8004678:	2102      	movs	r1, #2
 800467a:	4618      	mov	r0, r3
 800467c:	f000 f830 	bl	80046e0 <RCCEx_PLLSAI1_Config>
 8004680:	4603      	mov	r3, r0
 8004682:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004684:	7cfb      	ldrb	r3, [r7, #19]
 8004686:	2b00      	cmp	r3, #0
 8004688:	d001      	beq.n	800468e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 800468a:	7cfb      	ldrb	r3, [r7, #19]
 800468c:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004696:	2b00      	cmp	r3, #0
 8004698:	d00a      	beq.n	80046b0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800469a:	4b08      	ldr	r3, [pc, #32]	; (80046bc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800469c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046a0:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80046a8:	4904      	ldr	r1, [pc, #16]	; (80046bc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80046aa:	4313      	orrs	r3, r2
 80046ac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80046b0:	7cbb      	ldrb	r3, [r7, #18]
}
 80046b2:	4618      	mov	r0, r3
 80046b4:	3718      	adds	r7, #24
 80046b6:	46bd      	mov	sp, r7
 80046b8:	bd80      	pop	{r7, pc}
 80046ba:	bf00      	nop
 80046bc:	40021000 	.word	0x40021000

080046c0 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 80046c0:	b480      	push	{r7}
 80046c2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 80046c4:	4b05      	ldr	r3, [pc, #20]	; (80046dc <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	4a04      	ldr	r2, [pc, #16]	; (80046dc <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80046ca:	f043 0304 	orr.w	r3, r3, #4
 80046ce:	6013      	str	r3, [r2, #0]
}
 80046d0:	bf00      	nop
 80046d2:	46bd      	mov	sp, r7
 80046d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046d8:	4770      	bx	lr
 80046da:	bf00      	nop
 80046dc:	40021000 	.word	0x40021000

080046e0 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80046e0:	b580      	push	{r7, lr}
 80046e2:	b084      	sub	sp, #16
 80046e4:	af00      	add	r7, sp, #0
 80046e6:	6078      	str	r0, [r7, #4]
 80046e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80046ea:	2300      	movs	r3, #0
 80046ec:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80046ee:	4b74      	ldr	r3, [pc, #464]	; (80048c0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80046f0:	68db      	ldr	r3, [r3, #12]
 80046f2:	f003 0303 	and.w	r3, r3, #3
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d018      	beq.n	800472c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80046fa:	4b71      	ldr	r3, [pc, #452]	; (80048c0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80046fc:	68db      	ldr	r3, [r3, #12]
 80046fe:	f003 0203 	and.w	r2, r3, #3
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	429a      	cmp	r2, r3
 8004708:	d10d      	bne.n	8004726 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
       ||
 800470e:	2b00      	cmp	r3, #0
 8004710:	d009      	beq.n	8004726 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8004712:	4b6b      	ldr	r3, [pc, #428]	; (80048c0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004714:	68db      	ldr	r3, [r3, #12]
 8004716:	091b      	lsrs	r3, r3, #4
 8004718:	f003 0307 	and.w	r3, r3, #7
 800471c:	1c5a      	adds	r2, r3, #1
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	685b      	ldr	r3, [r3, #4]
       ||
 8004722:	429a      	cmp	r2, r3
 8004724:	d047      	beq.n	80047b6 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004726:	2301      	movs	r3, #1
 8004728:	73fb      	strb	r3, [r7, #15]
 800472a:	e044      	b.n	80047b6 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	2b03      	cmp	r3, #3
 8004732:	d018      	beq.n	8004766 <RCCEx_PLLSAI1_Config+0x86>
 8004734:	2b03      	cmp	r3, #3
 8004736:	d825      	bhi.n	8004784 <RCCEx_PLLSAI1_Config+0xa4>
 8004738:	2b01      	cmp	r3, #1
 800473a:	d002      	beq.n	8004742 <RCCEx_PLLSAI1_Config+0x62>
 800473c:	2b02      	cmp	r3, #2
 800473e:	d009      	beq.n	8004754 <RCCEx_PLLSAI1_Config+0x74>
 8004740:	e020      	b.n	8004784 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004742:	4b5f      	ldr	r3, [pc, #380]	; (80048c0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	f003 0302 	and.w	r3, r3, #2
 800474a:	2b00      	cmp	r3, #0
 800474c:	d11d      	bne.n	800478a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800474e:	2301      	movs	r3, #1
 8004750:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004752:	e01a      	b.n	800478a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004754:	4b5a      	ldr	r3, [pc, #360]	; (80048c0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800475c:	2b00      	cmp	r3, #0
 800475e:	d116      	bne.n	800478e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8004760:	2301      	movs	r3, #1
 8004762:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004764:	e013      	b.n	800478e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004766:	4b56      	ldr	r3, [pc, #344]	; (80048c0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800476e:	2b00      	cmp	r3, #0
 8004770:	d10f      	bne.n	8004792 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004772:	4b53      	ldr	r3, [pc, #332]	; (80048c0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800477a:	2b00      	cmp	r3, #0
 800477c:	d109      	bne.n	8004792 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800477e:	2301      	movs	r3, #1
 8004780:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004782:	e006      	b.n	8004792 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004784:	2301      	movs	r3, #1
 8004786:	73fb      	strb	r3, [r7, #15]
      break;
 8004788:	e004      	b.n	8004794 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800478a:	bf00      	nop
 800478c:	e002      	b.n	8004794 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800478e:	bf00      	nop
 8004790:	e000      	b.n	8004794 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004792:	bf00      	nop
    }

    if(status == HAL_OK)
 8004794:	7bfb      	ldrb	r3, [r7, #15]
 8004796:	2b00      	cmp	r3, #0
 8004798:	d10d      	bne.n	80047b6 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800479a:	4b49      	ldr	r3, [pc, #292]	; (80048c0 <RCCEx_PLLSAI1_Config+0x1e0>)
 800479c:	68db      	ldr	r3, [r3, #12]
 800479e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	6819      	ldr	r1, [r3, #0]
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	685b      	ldr	r3, [r3, #4]
 80047aa:	3b01      	subs	r3, #1
 80047ac:	011b      	lsls	r3, r3, #4
 80047ae:	430b      	orrs	r3, r1
 80047b0:	4943      	ldr	r1, [pc, #268]	; (80048c0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80047b2:	4313      	orrs	r3, r2
 80047b4:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80047b6:	7bfb      	ldrb	r3, [r7, #15]
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d17c      	bne.n	80048b6 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80047bc:	4b40      	ldr	r3, [pc, #256]	; (80048c0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	4a3f      	ldr	r2, [pc, #252]	; (80048c0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80047c2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80047c6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80047c8:	f7fe fc28 	bl	800301c <HAL_GetTick>
 80047cc:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80047ce:	e009      	b.n	80047e4 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80047d0:	f7fe fc24 	bl	800301c <HAL_GetTick>
 80047d4:	4602      	mov	r2, r0
 80047d6:	68bb      	ldr	r3, [r7, #8]
 80047d8:	1ad3      	subs	r3, r2, r3
 80047da:	2b02      	cmp	r3, #2
 80047dc:	d902      	bls.n	80047e4 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80047de:	2303      	movs	r3, #3
 80047e0:	73fb      	strb	r3, [r7, #15]
        break;
 80047e2:	e005      	b.n	80047f0 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80047e4:	4b36      	ldr	r3, [pc, #216]	; (80048c0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d1ef      	bne.n	80047d0 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80047f0:	7bfb      	ldrb	r3, [r7, #15]
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d15f      	bne.n	80048b6 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80047f6:	683b      	ldr	r3, [r7, #0]
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d110      	bne.n	800481e <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80047fc:	4b30      	ldr	r3, [pc, #192]	; (80048c0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80047fe:	691b      	ldr	r3, [r3, #16]
 8004800:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8004804:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004808:	687a      	ldr	r2, [r7, #4]
 800480a:	6892      	ldr	r2, [r2, #8]
 800480c:	0211      	lsls	r1, r2, #8
 800480e:	687a      	ldr	r2, [r7, #4]
 8004810:	68d2      	ldr	r2, [r2, #12]
 8004812:	06d2      	lsls	r2, r2, #27
 8004814:	430a      	orrs	r2, r1
 8004816:	492a      	ldr	r1, [pc, #168]	; (80048c0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004818:	4313      	orrs	r3, r2
 800481a:	610b      	str	r3, [r1, #16]
 800481c:	e027      	b.n	800486e <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800481e:	683b      	ldr	r3, [r7, #0]
 8004820:	2b01      	cmp	r3, #1
 8004822:	d112      	bne.n	800484a <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004824:	4b26      	ldr	r3, [pc, #152]	; (80048c0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004826:	691b      	ldr	r3, [r3, #16]
 8004828:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800482c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004830:	687a      	ldr	r2, [r7, #4]
 8004832:	6892      	ldr	r2, [r2, #8]
 8004834:	0211      	lsls	r1, r2, #8
 8004836:	687a      	ldr	r2, [r7, #4]
 8004838:	6912      	ldr	r2, [r2, #16]
 800483a:	0852      	lsrs	r2, r2, #1
 800483c:	3a01      	subs	r2, #1
 800483e:	0552      	lsls	r2, r2, #21
 8004840:	430a      	orrs	r2, r1
 8004842:	491f      	ldr	r1, [pc, #124]	; (80048c0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004844:	4313      	orrs	r3, r2
 8004846:	610b      	str	r3, [r1, #16]
 8004848:	e011      	b.n	800486e <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800484a:	4b1d      	ldr	r3, [pc, #116]	; (80048c0 <RCCEx_PLLSAI1_Config+0x1e0>)
 800484c:	691b      	ldr	r3, [r3, #16]
 800484e:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004852:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004856:	687a      	ldr	r2, [r7, #4]
 8004858:	6892      	ldr	r2, [r2, #8]
 800485a:	0211      	lsls	r1, r2, #8
 800485c:	687a      	ldr	r2, [r7, #4]
 800485e:	6952      	ldr	r2, [r2, #20]
 8004860:	0852      	lsrs	r2, r2, #1
 8004862:	3a01      	subs	r2, #1
 8004864:	0652      	lsls	r2, r2, #25
 8004866:	430a      	orrs	r2, r1
 8004868:	4915      	ldr	r1, [pc, #84]	; (80048c0 <RCCEx_PLLSAI1_Config+0x1e0>)
 800486a:	4313      	orrs	r3, r2
 800486c:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800486e:	4b14      	ldr	r3, [pc, #80]	; (80048c0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	4a13      	ldr	r2, [pc, #76]	; (80048c0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004874:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004878:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800487a:	f7fe fbcf 	bl	800301c <HAL_GetTick>
 800487e:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004880:	e009      	b.n	8004896 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004882:	f7fe fbcb 	bl	800301c <HAL_GetTick>
 8004886:	4602      	mov	r2, r0
 8004888:	68bb      	ldr	r3, [r7, #8]
 800488a:	1ad3      	subs	r3, r2, r3
 800488c:	2b02      	cmp	r3, #2
 800488e:	d902      	bls.n	8004896 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8004890:	2303      	movs	r3, #3
 8004892:	73fb      	strb	r3, [r7, #15]
          break;
 8004894:	e005      	b.n	80048a2 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004896:	4b0a      	ldr	r3, [pc, #40]	; (80048c0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d0ef      	beq.n	8004882 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 80048a2:	7bfb      	ldrb	r3, [r7, #15]
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d106      	bne.n	80048b6 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80048a8:	4b05      	ldr	r3, [pc, #20]	; (80048c0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80048aa:	691a      	ldr	r2, [r3, #16]
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	699b      	ldr	r3, [r3, #24]
 80048b0:	4903      	ldr	r1, [pc, #12]	; (80048c0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80048b2:	4313      	orrs	r3, r2
 80048b4:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80048b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80048b8:	4618      	mov	r0, r3
 80048ba:	3710      	adds	r7, #16
 80048bc:	46bd      	mov	sp, r7
 80048be:	bd80      	pop	{r7, pc}
 80048c0:	40021000 	.word	0x40021000

080048c4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80048c4:	b580      	push	{r7, lr}
 80048c6:	b084      	sub	sp, #16
 80048c8:	af00      	add	r7, sp, #0
 80048ca:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d101      	bne.n	80048d6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80048d2:	2301      	movs	r3, #1
 80048d4:	e095      	b.n	8004a02 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d108      	bne.n	80048f0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	685b      	ldr	r3, [r3, #4]
 80048e2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80048e6:	d009      	beq.n	80048fc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	2200      	movs	r2, #0
 80048ec:	61da      	str	r2, [r3, #28]
 80048ee:	e005      	b.n	80048fc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	2200      	movs	r2, #0
 80048f4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	2200      	movs	r2, #0
 80048fa:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	2200      	movs	r2, #0
 8004900:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004908:	b2db      	uxtb	r3, r3
 800490a:	2b00      	cmp	r3, #0
 800490c:	d106      	bne.n	800491c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	2200      	movs	r2, #0
 8004912:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004916:	6878      	ldr	r0, [r7, #4]
 8004918:	f7fe f8da 	bl	8002ad0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	2202      	movs	r2, #2
 8004920:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	681a      	ldr	r2, [r3, #0]
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004932:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	68db      	ldr	r3, [r3, #12]
 8004938:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800493c:	d902      	bls.n	8004944 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800493e:	2300      	movs	r3, #0
 8004940:	60fb      	str	r3, [r7, #12]
 8004942:	e002      	b.n	800494a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004944:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004948:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	68db      	ldr	r3, [r3, #12]
 800494e:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8004952:	d007      	beq.n	8004964 <HAL_SPI_Init+0xa0>
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	68db      	ldr	r3, [r3, #12]
 8004958:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800495c:	d002      	beq.n	8004964 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	2200      	movs	r2, #0
 8004962:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	685b      	ldr	r3, [r3, #4]
 8004968:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	689b      	ldr	r3, [r3, #8]
 8004970:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004974:	431a      	orrs	r2, r3
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	691b      	ldr	r3, [r3, #16]
 800497a:	f003 0302 	and.w	r3, r3, #2
 800497e:	431a      	orrs	r2, r3
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	695b      	ldr	r3, [r3, #20]
 8004984:	f003 0301 	and.w	r3, r3, #1
 8004988:	431a      	orrs	r2, r3
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	699b      	ldr	r3, [r3, #24]
 800498e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004992:	431a      	orrs	r2, r3
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	69db      	ldr	r3, [r3, #28]
 8004998:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800499c:	431a      	orrs	r2, r3
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	6a1b      	ldr	r3, [r3, #32]
 80049a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80049a6:	ea42 0103 	orr.w	r1, r2, r3
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049ae:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	430a      	orrs	r2, r1
 80049b8:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	699b      	ldr	r3, [r3, #24]
 80049be:	0c1b      	lsrs	r3, r3, #16
 80049c0:	f003 0204 	and.w	r2, r3, #4
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049c8:	f003 0310 	and.w	r3, r3, #16
 80049cc:	431a      	orrs	r2, r3
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80049d2:	f003 0308 	and.w	r3, r3, #8
 80049d6:	431a      	orrs	r2, r3
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	68db      	ldr	r3, [r3, #12]
 80049dc:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80049e0:	ea42 0103 	orr.w	r1, r2, r3
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	430a      	orrs	r2, r1
 80049f0:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	2200      	movs	r2, #0
 80049f6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	2201      	movs	r2, #1
 80049fc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8004a00:	2300      	movs	r3, #0
}
 8004a02:	4618      	mov	r0, r3
 8004a04:	3710      	adds	r7, #16
 8004a06:	46bd      	mov	sp, r7
 8004a08:	bd80      	pop	{r7, pc}

08004a0a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004a0a:	b580      	push	{r7, lr}
 8004a0c:	b088      	sub	sp, #32
 8004a0e:	af00      	add	r7, sp, #0
 8004a10:	60f8      	str	r0, [r7, #12]
 8004a12:	60b9      	str	r1, [r7, #8]
 8004a14:	603b      	str	r3, [r7, #0]
 8004a16:	4613      	mov	r3, r2
 8004a18:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004a1a:	2300      	movs	r3, #0
 8004a1c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004a24:	2b01      	cmp	r3, #1
 8004a26:	d101      	bne.n	8004a2c <HAL_SPI_Transmit+0x22>
 8004a28:	2302      	movs	r3, #2
 8004a2a:	e158      	b.n	8004cde <HAL_SPI_Transmit+0x2d4>
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	2201      	movs	r2, #1
 8004a30:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004a34:	f7fe faf2 	bl	800301c <HAL_GetTick>
 8004a38:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8004a3a:	88fb      	ldrh	r3, [r7, #6]
 8004a3c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004a44:	b2db      	uxtb	r3, r3
 8004a46:	2b01      	cmp	r3, #1
 8004a48:	d002      	beq.n	8004a50 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8004a4a:	2302      	movs	r3, #2
 8004a4c:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004a4e:	e13d      	b.n	8004ccc <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 8004a50:	68bb      	ldr	r3, [r7, #8]
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d002      	beq.n	8004a5c <HAL_SPI_Transmit+0x52>
 8004a56:	88fb      	ldrh	r3, [r7, #6]
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d102      	bne.n	8004a62 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8004a5c:	2301      	movs	r3, #1
 8004a5e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004a60:	e134      	b.n	8004ccc <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	2203      	movs	r2, #3
 8004a66:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	2200      	movs	r2, #0
 8004a6e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	68ba      	ldr	r2, [r7, #8]
 8004a74:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	88fa      	ldrh	r2, [r7, #6]
 8004a7a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	88fa      	ldrh	r2, [r7, #6]
 8004a80:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	2200      	movs	r2, #0
 8004a86:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	2200      	movs	r2, #0
 8004a8c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	2200      	movs	r2, #0
 8004a94:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	2200      	movs	r2, #0
 8004a9c:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	2200      	movs	r2, #0
 8004aa2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	689b      	ldr	r3, [r3, #8]
 8004aa8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004aac:	d10f      	bne.n	8004ace <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	681a      	ldr	r2, [r3, #0]
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004abc:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	681a      	ldr	r2, [r3, #0]
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004acc:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ad8:	2b40      	cmp	r3, #64	; 0x40
 8004ada:	d007      	beq.n	8004aec <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	681a      	ldr	r2, [r3, #0]
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004aea:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	68db      	ldr	r3, [r3, #12]
 8004af0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004af4:	d94b      	bls.n	8004b8e <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	685b      	ldr	r3, [r3, #4]
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d002      	beq.n	8004b04 <HAL_SPI_Transmit+0xfa>
 8004afe:	8afb      	ldrh	r3, [r7, #22]
 8004b00:	2b01      	cmp	r3, #1
 8004b02:	d13e      	bne.n	8004b82 <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b08:	881a      	ldrh	r2, [r3, #0]
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b14:	1c9a      	adds	r2, r3, #2
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004b1e:	b29b      	uxth	r3, r3
 8004b20:	3b01      	subs	r3, #1
 8004b22:	b29a      	uxth	r2, r3
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004b28:	e02b      	b.n	8004b82 <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	689b      	ldr	r3, [r3, #8]
 8004b30:	f003 0302 	and.w	r3, r3, #2
 8004b34:	2b02      	cmp	r3, #2
 8004b36:	d112      	bne.n	8004b5e <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b3c:	881a      	ldrh	r2, [r3, #0]
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b48:	1c9a      	adds	r2, r3, #2
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004b52:	b29b      	uxth	r3, r3
 8004b54:	3b01      	subs	r3, #1
 8004b56:	b29a      	uxth	r2, r3
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004b5c:	e011      	b.n	8004b82 <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004b5e:	f7fe fa5d 	bl	800301c <HAL_GetTick>
 8004b62:	4602      	mov	r2, r0
 8004b64:	69bb      	ldr	r3, [r7, #24]
 8004b66:	1ad3      	subs	r3, r2, r3
 8004b68:	683a      	ldr	r2, [r7, #0]
 8004b6a:	429a      	cmp	r2, r3
 8004b6c:	d803      	bhi.n	8004b76 <HAL_SPI_Transmit+0x16c>
 8004b6e:	683b      	ldr	r3, [r7, #0]
 8004b70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b74:	d102      	bne.n	8004b7c <HAL_SPI_Transmit+0x172>
 8004b76:	683b      	ldr	r3, [r7, #0]
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d102      	bne.n	8004b82 <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8004b7c:	2303      	movs	r3, #3
 8004b7e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004b80:	e0a4      	b.n	8004ccc <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004b86:	b29b      	uxth	r3, r3
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d1ce      	bne.n	8004b2a <HAL_SPI_Transmit+0x120>
 8004b8c:	e07c      	b.n	8004c88 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	685b      	ldr	r3, [r3, #4]
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d002      	beq.n	8004b9c <HAL_SPI_Transmit+0x192>
 8004b96:	8afb      	ldrh	r3, [r7, #22]
 8004b98:	2b01      	cmp	r3, #1
 8004b9a:	d170      	bne.n	8004c7e <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004ba0:	b29b      	uxth	r3, r3
 8004ba2:	2b01      	cmp	r3, #1
 8004ba4:	d912      	bls.n	8004bcc <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004baa:	881a      	ldrh	r2, [r3, #0]
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bb6:	1c9a      	adds	r2, r3, #2
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004bc0:	b29b      	uxth	r3, r3
 8004bc2:	3b02      	subs	r3, #2
 8004bc4:	b29a      	uxth	r2, r3
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004bca:	e058      	b.n	8004c7e <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	330c      	adds	r3, #12
 8004bd6:	7812      	ldrb	r2, [r2, #0]
 8004bd8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bde:	1c5a      	adds	r2, r3, #1
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004be8:	b29b      	uxth	r3, r3
 8004bea:	3b01      	subs	r3, #1
 8004bec:	b29a      	uxth	r2, r3
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8004bf2:	e044      	b.n	8004c7e <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	689b      	ldr	r3, [r3, #8]
 8004bfa:	f003 0302 	and.w	r3, r3, #2
 8004bfe:	2b02      	cmp	r3, #2
 8004c00:	d12b      	bne.n	8004c5a <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004c06:	b29b      	uxth	r3, r3
 8004c08:	2b01      	cmp	r3, #1
 8004c0a:	d912      	bls.n	8004c32 <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c10:	881a      	ldrh	r2, [r3, #0]
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c1c:	1c9a      	adds	r2, r3, #2
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004c26:	b29b      	uxth	r3, r3
 8004c28:	3b02      	subs	r3, #2
 8004c2a:	b29a      	uxth	r2, r3
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004c30:	e025      	b.n	8004c7e <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	330c      	adds	r3, #12
 8004c3c:	7812      	ldrb	r2, [r2, #0]
 8004c3e:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c44:	1c5a      	adds	r2, r3, #1
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004c4e:	b29b      	uxth	r3, r3
 8004c50:	3b01      	subs	r3, #1
 8004c52:	b29a      	uxth	r2, r3
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004c58:	e011      	b.n	8004c7e <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004c5a:	f7fe f9df 	bl	800301c <HAL_GetTick>
 8004c5e:	4602      	mov	r2, r0
 8004c60:	69bb      	ldr	r3, [r7, #24]
 8004c62:	1ad3      	subs	r3, r2, r3
 8004c64:	683a      	ldr	r2, [r7, #0]
 8004c66:	429a      	cmp	r2, r3
 8004c68:	d803      	bhi.n	8004c72 <HAL_SPI_Transmit+0x268>
 8004c6a:	683b      	ldr	r3, [r7, #0]
 8004c6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c70:	d102      	bne.n	8004c78 <HAL_SPI_Transmit+0x26e>
 8004c72:	683b      	ldr	r3, [r7, #0]
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d102      	bne.n	8004c7e <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8004c78:	2303      	movs	r3, #3
 8004c7a:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004c7c:	e026      	b.n	8004ccc <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004c82:	b29b      	uxth	r3, r3
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d1b5      	bne.n	8004bf4 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004c88:	69ba      	ldr	r2, [r7, #24]
 8004c8a:	6839      	ldr	r1, [r7, #0]
 8004c8c:	68f8      	ldr	r0, [r7, #12]
 8004c8e:	f000 f949 	bl	8004f24 <SPI_EndRxTxTransaction>
 8004c92:	4603      	mov	r3, r0
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d002      	beq.n	8004c9e <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	2220      	movs	r2, #32
 8004c9c:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	689b      	ldr	r3, [r3, #8]
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d10a      	bne.n	8004cbc <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004ca6:	2300      	movs	r3, #0
 8004ca8:	613b      	str	r3, [r7, #16]
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	68db      	ldr	r3, [r3, #12]
 8004cb0:	613b      	str	r3, [r7, #16]
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	689b      	ldr	r3, [r3, #8]
 8004cb8:	613b      	str	r3, [r7, #16]
 8004cba:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d002      	beq.n	8004cca <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8004cc4:	2301      	movs	r3, #1
 8004cc6:	77fb      	strb	r3, [r7, #31]
 8004cc8:	e000      	b.n	8004ccc <HAL_SPI_Transmit+0x2c2>
  }

error:
 8004cca:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	2201      	movs	r2, #1
 8004cd0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	2200      	movs	r2, #0
 8004cd8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8004cdc:	7ffb      	ldrb	r3, [r7, #31]
}
 8004cde:	4618      	mov	r0, r3
 8004ce0:	3720      	adds	r7, #32
 8004ce2:	46bd      	mov	sp, r7
 8004ce4:	bd80      	pop	{r7, pc}
	...

08004ce8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004ce8:	b580      	push	{r7, lr}
 8004cea:	b088      	sub	sp, #32
 8004cec:	af00      	add	r7, sp, #0
 8004cee:	60f8      	str	r0, [r7, #12]
 8004cf0:	60b9      	str	r1, [r7, #8]
 8004cf2:	603b      	str	r3, [r7, #0]
 8004cf4:	4613      	mov	r3, r2
 8004cf6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004cf8:	f7fe f990 	bl	800301c <HAL_GetTick>
 8004cfc:	4602      	mov	r2, r0
 8004cfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d00:	1a9b      	subs	r3, r3, r2
 8004d02:	683a      	ldr	r2, [r7, #0]
 8004d04:	4413      	add	r3, r2
 8004d06:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004d08:	f7fe f988 	bl	800301c <HAL_GetTick>
 8004d0c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004d0e:	4b39      	ldr	r3, [pc, #228]	; (8004df4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	015b      	lsls	r3, r3, #5
 8004d14:	0d1b      	lsrs	r3, r3, #20
 8004d16:	69fa      	ldr	r2, [r7, #28]
 8004d18:	fb02 f303 	mul.w	r3, r2, r3
 8004d1c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004d1e:	e054      	b.n	8004dca <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004d20:	683b      	ldr	r3, [r7, #0]
 8004d22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d26:	d050      	beq.n	8004dca <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004d28:	f7fe f978 	bl	800301c <HAL_GetTick>
 8004d2c:	4602      	mov	r2, r0
 8004d2e:	69bb      	ldr	r3, [r7, #24]
 8004d30:	1ad3      	subs	r3, r2, r3
 8004d32:	69fa      	ldr	r2, [r7, #28]
 8004d34:	429a      	cmp	r2, r3
 8004d36:	d902      	bls.n	8004d3e <SPI_WaitFlagStateUntilTimeout+0x56>
 8004d38:	69fb      	ldr	r3, [r7, #28]
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d13d      	bne.n	8004dba <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	685a      	ldr	r2, [r3, #4]
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004d4c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	685b      	ldr	r3, [r3, #4]
 8004d52:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004d56:	d111      	bne.n	8004d7c <SPI_WaitFlagStateUntilTimeout+0x94>
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	689b      	ldr	r3, [r3, #8]
 8004d5c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004d60:	d004      	beq.n	8004d6c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	689b      	ldr	r3, [r3, #8]
 8004d66:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004d6a:	d107      	bne.n	8004d7c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	681a      	ldr	r2, [r3, #0]
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004d7a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d80:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004d84:	d10f      	bne.n	8004da6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	681a      	ldr	r2, [r3, #0]
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004d94:	601a      	str	r2, [r3, #0]
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	681a      	ldr	r2, [r3, #0]
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004da4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	2201      	movs	r2, #1
 8004daa:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	2200      	movs	r2, #0
 8004db2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8004db6:	2303      	movs	r3, #3
 8004db8:	e017      	b.n	8004dea <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004dba:	697b      	ldr	r3, [r7, #20]
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d101      	bne.n	8004dc4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004dc0:	2300      	movs	r3, #0
 8004dc2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004dc4:	697b      	ldr	r3, [r7, #20]
 8004dc6:	3b01      	subs	r3, #1
 8004dc8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	689a      	ldr	r2, [r3, #8]
 8004dd0:	68bb      	ldr	r3, [r7, #8]
 8004dd2:	4013      	ands	r3, r2
 8004dd4:	68ba      	ldr	r2, [r7, #8]
 8004dd6:	429a      	cmp	r2, r3
 8004dd8:	bf0c      	ite	eq
 8004dda:	2301      	moveq	r3, #1
 8004ddc:	2300      	movne	r3, #0
 8004dde:	b2db      	uxtb	r3, r3
 8004de0:	461a      	mov	r2, r3
 8004de2:	79fb      	ldrb	r3, [r7, #7]
 8004de4:	429a      	cmp	r2, r3
 8004de6:	d19b      	bne.n	8004d20 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004de8:	2300      	movs	r3, #0
}
 8004dea:	4618      	mov	r0, r3
 8004dec:	3720      	adds	r7, #32
 8004dee:	46bd      	mov	sp, r7
 8004df0:	bd80      	pop	{r7, pc}
 8004df2:	bf00      	nop
 8004df4:	20000000 	.word	0x20000000

08004df8 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004df8:	b580      	push	{r7, lr}
 8004dfa:	b08a      	sub	sp, #40	; 0x28
 8004dfc:	af00      	add	r7, sp, #0
 8004dfe:	60f8      	str	r0, [r7, #12]
 8004e00:	60b9      	str	r1, [r7, #8]
 8004e02:	607a      	str	r2, [r7, #4]
 8004e04:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8004e06:	2300      	movs	r3, #0
 8004e08:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8004e0a:	f7fe f907 	bl	800301c <HAL_GetTick>
 8004e0e:	4602      	mov	r2, r0
 8004e10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e12:	1a9b      	subs	r3, r3, r2
 8004e14:	683a      	ldr	r2, [r7, #0]
 8004e16:	4413      	add	r3, r2
 8004e18:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8004e1a:	f7fe f8ff 	bl	800301c <HAL_GetTick>
 8004e1e:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	330c      	adds	r3, #12
 8004e26:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8004e28:	4b3d      	ldr	r3, [pc, #244]	; (8004f20 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8004e2a:	681a      	ldr	r2, [r3, #0]
 8004e2c:	4613      	mov	r3, r2
 8004e2e:	009b      	lsls	r3, r3, #2
 8004e30:	4413      	add	r3, r2
 8004e32:	00da      	lsls	r2, r3, #3
 8004e34:	1ad3      	subs	r3, r2, r3
 8004e36:	0d1b      	lsrs	r3, r3, #20
 8004e38:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e3a:	fb02 f303 	mul.w	r3, r2, r3
 8004e3e:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8004e40:	e060      	b.n	8004f04 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8004e42:	68bb      	ldr	r3, [r7, #8]
 8004e44:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8004e48:	d107      	bne.n	8004e5a <SPI_WaitFifoStateUntilTimeout+0x62>
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d104      	bne.n	8004e5a <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8004e50:	69fb      	ldr	r3, [r7, #28]
 8004e52:	781b      	ldrb	r3, [r3, #0]
 8004e54:	b2db      	uxtb	r3, r3
 8004e56:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8004e58:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8004e5a:	683b      	ldr	r3, [r7, #0]
 8004e5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e60:	d050      	beq.n	8004f04 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004e62:	f7fe f8db 	bl	800301c <HAL_GetTick>
 8004e66:	4602      	mov	r2, r0
 8004e68:	6a3b      	ldr	r3, [r7, #32]
 8004e6a:	1ad3      	subs	r3, r2, r3
 8004e6c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e6e:	429a      	cmp	r2, r3
 8004e70:	d902      	bls.n	8004e78 <SPI_WaitFifoStateUntilTimeout+0x80>
 8004e72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d13d      	bne.n	8004ef4 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	685a      	ldr	r2, [r3, #4]
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004e86:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	685b      	ldr	r3, [r3, #4]
 8004e8c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004e90:	d111      	bne.n	8004eb6 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	689b      	ldr	r3, [r3, #8]
 8004e96:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004e9a:	d004      	beq.n	8004ea6 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	689b      	ldr	r3, [r3, #8]
 8004ea0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004ea4:	d107      	bne.n	8004eb6 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	681a      	ldr	r2, [r3, #0]
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004eb4:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004eba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004ebe:	d10f      	bne.n	8004ee0 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	681a      	ldr	r2, [r3, #0]
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004ece:	601a      	str	r2, [r3, #0]
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	681a      	ldr	r2, [r3, #0]
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004ede:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	2201      	movs	r2, #1
 8004ee4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	2200      	movs	r2, #0
 8004eec:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8004ef0:	2303      	movs	r3, #3
 8004ef2:	e010      	b.n	8004f16 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004ef4:	69bb      	ldr	r3, [r7, #24]
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d101      	bne.n	8004efe <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8004efa:	2300      	movs	r3, #0
 8004efc:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8004efe:	69bb      	ldr	r3, [r7, #24]
 8004f00:	3b01      	subs	r3, #1
 8004f02:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	689a      	ldr	r2, [r3, #8]
 8004f0a:	68bb      	ldr	r3, [r7, #8]
 8004f0c:	4013      	ands	r3, r2
 8004f0e:	687a      	ldr	r2, [r7, #4]
 8004f10:	429a      	cmp	r2, r3
 8004f12:	d196      	bne.n	8004e42 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8004f14:	2300      	movs	r3, #0
}
 8004f16:	4618      	mov	r0, r3
 8004f18:	3728      	adds	r7, #40	; 0x28
 8004f1a:	46bd      	mov	sp, r7
 8004f1c:	bd80      	pop	{r7, pc}
 8004f1e:	bf00      	nop
 8004f20:	20000000 	.word	0x20000000

08004f24 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004f24:	b580      	push	{r7, lr}
 8004f26:	b086      	sub	sp, #24
 8004f28:	af02      	add	r7, sp, #8
 8004f2a:	60f8      	str	r0, [r7, #12]
 8004f2c:	60b9      	str	r1, [r7, #8]
 8004f2e:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	9300      	str	r3, [sp, #0]
 8004f34:	68bb      	ldr	r3, [r7, #8]
 8004f36:	2200      	movs	r2, #0
 8004f38:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8004f3c:	68f8      	ldr	r0, [r7, #12]
 8004f3e:	f7ff ff5b 	bl	8004df8 <SPI_WaitFifoStateUntilTimeout>
 8004f42:	4603      	mov	r3, r0
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d007      	beq.n	8004f58 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004f4c:	f043 0220 	orr.w	r2, r3, #32
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004f54:	2303      	movs	r3, #3
 8004f56:	e027      	b.n	8004fa8 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	9300      	str	r3, [sp, #0]
 8004f5c:	68bb      	ldr	r3, [r7, #8]
 8004f5e:	2200      	movs	r2, #0
 8004f60:	2180      	movs	r1, #128	; 0x80
 8004f62:	68f8      	ldr	r0, [r7, #12]
 8004f64:	f7ff fec0 	bl	8004ce8 <SPI_WaitFlagStateUntilTimeout>
 8004f68:	4603      	mov	r3, r0
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d007      	beq.n	8004f7e <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004f72:	f043 0220 	orr.w	r2, r3, #32
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004f7a:	2303      	movs	r3, #3
 8004f7c:	e014      	b.n	8004fa8 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	9300      	str	r3, [sp, #0]
 8004f82:	68bb      	ldr	r3, [r7, #8]
 8004f84:	2200      	movs	r2, #0
 8004f86:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8004f8a:	68f8      	ldr	r0, [r7, #12]
 8004f8c:	f7ff ff34 	bl	8004df8 <SPI_WaitFifoStateUntilTimeout>
 8004f90:	4603      	mov	r3, r0
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d007      	beq.n	8004fa6 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004f9a:	f043 0220 	orr.w	r2, r3, #32
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004fa2:	2303      	movs	r3, #3
 8004fa4:	e000      	b.n	8004fa8 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8004fa6:	2300      	movs	r3, #0
}
 8004fa8:	4618      	mov	r0, r3
 8004faa:	3710      	adds	r7, #16
 8004fac:	46bd      	mov	sp, r7
 8004fae:	bd80      	pop	{r7, pc}

08004fb0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004fb0:	b580      	push	{r7, lr}
 8004fb2:	b082      	sub	sp, #8
 8004fb4:	af00      	add	r7, sp, #0
 8004fb6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d101      	bne.n	8004fc2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004fbe:	2301      	movs	r3, #1
 8004fc0:	e049      	b.n	8005056 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004fc8:	b2db      	uxtb	r3, r3
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d106      	bne.n	8004fdc <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	2200      	movs	r2, #0
 8004fd2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004fd6:	6878      	ldr	r0, [r7, #4]
 8004fd8:	f7fd fdbe 	bl	8002b58 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	2202      	movs	r2, #2
 8004fe0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681a      	ldr	r2, [r3, #0]
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	3304      	adds	r3, #4
 8004fec:	4619      	mov	r1, r3
 8004fee:	4610      	mov	r0, r2
 8004ff0:	f000 f94a 	bl	8005288 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	2201      	movs	r2, #1
 8004ff8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	2201      	movs	r2, #1
 8005000:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	2201      	movs	r2, #1
 8005008:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	2201      	movs	r2, #1
 8005010:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	2201      	movs	r2, #1
 8005018:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	2201      	movs	r2, #1
 8005020:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	2201      	movs	r2, #1
 8005028:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	2201      	movs	r2, #1
 8005030:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	2201      	movs	r2, #1
 8005038:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	2201      	movs	r2, #1
 8005040:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	2201      	movs	r2, #1
 8005048:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	2201      	movs	r2, #1
 8005050:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005054:	2300      	movs	r3, #0
}
 8005056:	4618      	mov	r0, r3
 8005058:	3708      	adds	r7, #8
 800505a:	46bd      	mov	sp, r7
 800505c:	bd80      	pop	{r7, pc}
	...

08005060 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005060:	b580      	push	{r7, lr}
 8005062:	b086      	sub	sp, #24
 8005064:	af00      	add	r7, sp, #0
 8005066:	60f8      	str	r0, [r7, #12]
 8005068:	60b9      	str	r1, [r7, #8]
 800506a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800506c:	2300      	movs	r3, #0
 800506e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005076:	2b01      	cmp	r3, #1
 8005078:	d101      	bne.n	800507e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800507a:	2302      	movs	r3, #2
 800507c:	e0ff      	b.n	800527e <HAL_TIM_PWM_ConfigChannel+0x21e>
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	2201      	movs	r2, #1
 8005082:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	2b14      	cmp	r3, #20
 800508a:	f200 80f0 	bhi.w	800526e <HAL_TIM_PWM_ConfigChannel+0x20e>
 800508e:	a201      	add	r2, pc, #4	; (adr r2, 8005094 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005090:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005094:	080050e9 	.word	0x080050e9
 8005098:	0800526f 	.word	0x0800526f
 800509c:	0800526f 	.word	0x0800526f
 80050a0:	0800526f 	.word	0x0800526f
 80050a4:	08005129 	.word	0x08005129
 80050a8:	0800526f 	.word	0x0800526f
 80050ac:	0800526f 	.word	0x0800526f
 80050b0:	0800526f 	.word	0x0800526f
 80050b4:	0800516b 	.word	0x0800516b
 80050b8:	0800526f 	.word	0x0800526f
 80050bc:	0800526f 	.word	0x0800526f
 80050c0:	0800526f 	.word	0x0800526f
 80050c4:	080051ab 	.word	0x080051ab
 80050c8:	0800526f 	.word	0x0800526f
 80050cc:	0800526f 	.word	0x0800526f
 80050d0:	0800526f 	.word	0x0800526f
 80050d4:	080051ed 	.word	0x080051ed
 80050d8:	0800526f 	.word	0x0800526f
 80050dc:	0800526f 	.word	0x0800526f
 80050e0:	0800526f 	.word	0x0800526f
 80050e4:	0800522d 	.word	0x0800522d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	68b9      	ldr	r1, [r7, #8]
 80050ee:	4618      	mov	r0, r3
 80050f0:	f000 f92e 	bl	8005350 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	699a      	ldr	r2, [r3, #24]
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	f042 0208 	orr.w	r2, r2, #8
 8005102:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	699a      	ldr	r2, [r3, #24]
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	f022 0204 	bic.w	r2, r2, #4
 8005112:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	6999      	ldr	r1, [r3, #24]
 800511a:	68bb      	ldr	r3, [r7, #8]
 800511c:	691a      	ldr	r2, [r3, #16]
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	430a      	orrs	r2, r1
 8005124:	619a      	str	r2, [r3, #24]
      break;
 8005126:	e0a5      	b.n	8005274 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	68b9      	ldr	r1, [r7, #8]
 800512e:	4618      	mov	r0, r3
 8005130:	f000 f98a 	bl	8005448 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	699a      	ldr	r2, [r3, #24]
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005142:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	699a      	ldr	r2, [r3, #24]
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005152:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	6999      	ldr	r1, [r3, #24]
 800515a:	68bb      	ldr	r3, [r7, #8]
 800515c:	691b      	ldr	r3, [r3, #16]
 800515e:	021a      	lsls	r2, r3, #8
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	430a      	orrs	r2, r1
 8005166:	619a      	str	r2, [r3, #24]
      break;
 8005168:	e084      	b.n	8005274 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	68b9      	ldr	r1, [r7, #8]
 8005170:	4618      	mov	r0, r3
 8005172:	f000 f9e3 	bl	800553c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	69da      	ldr	r2, [r3, #28]
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	f042 0208 	orr.w	r2, r2, #8
 8005184:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	69da      	ldr	r2, [r3, #28]
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	f022 0204 	bic.w	r2, r2, #4
 8005194:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	69d9      	ldr	r1, [r3, #28]
 800519c:	68bb      	ldr	r3, [r7, #8]
 800519e:	691a      	ldr	r2, [r3, #16]
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	430a      	orrs	r2, r1
 80051a6:	61da      	str	r2, [r3, #28]
      break;
 80051a8:	e064      	b.n	8005274 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	68b9      	ldr	r1, [r7, #8]
 80051b0:	4618      	mov	r0, r3
 80051b2:	f000 fa3b 	bl	800562c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	69da      	ldr	r2, [r3, #28]
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80051c4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	69da      	ldr	r2, [r3, #28]
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80051d4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	69d9      	ldr	r1, [r3, #28]
 80051dc:	68bb      	ldr	r3, [r7, #8]
 80051de:	691b      	ldr	r3, [r3, #16]
 80051e0:	021a      	lsls	r2, r3, #8
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	430a      	orrs	r2, r1
 80051e8:	61da      	str	r2, [r3, #28]
      break;
 80051ea:	e043      	b.n	8005274 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	68b9      	ldr	r1, [r7, #8]
 80051f2:	4618      	mov	r0, r3
 80051f4:	f000 fa78 	bl	80056e8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	f042 0208 	orr.w	r2, r2, #8
 8005206:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	f022 0204 	bic.w	r2, r2, #4
 8005216:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800521e:	68bb      	ldr	r3, [r7, #8]
 8005220:	691a      	ldr	r2, [r3, #16]
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	430a      	orrs	r2, r1
 8005228:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800522a:	e023      	b.n	8005274 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	68b9      	ldr	r1, [r7, #8]
 8005232:	4618      	mov	r0, r3
 8005234:	f000 fab0 	bl	8005798 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005246:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005256:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800525e:	68bb      	ldr	r3, [r7, #8]
 8005260:	691b      	ldr	r3, [r3, #16]
 8005262:	021a      	lsls	r2, r3, #8
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	430a      	orrs	r2, r1
 800526a:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800526c:	e002      	b.n	8005274 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800526e:	2301      	movs	r3, #1
 8005270:	75fb      	strb	r3, [r7, #23]
      break;
 8005272:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	2200      	movs	r2, #0
 8005278:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800527c:	7dfb      	ldrb	r3, [r7, #23]
}
 800527e:	4618      	mov	r0, r3
 8005280:	3718      	adds	r7, #24
 8005282:	46bd      	mov	sp, r7
 8005284:	bd80      	pop	{r7, pc}
 8005286:	bf00      	nop

08005288 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005288:	b480      	push	{r7}
 800528a:	b085      	sub	sp, #20
 800528c:	af00      	add	r7, sp, #0
 800528e:	6078      	str	r0, [r7, #4]
 8005290:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	4a2a      	ldr	r2, [pc, #168]	; (8005344 <TIM_Base_SetConfig+0xbc>)
 800529c:	4293      	cmp	r3, r2
 800529e:	d003      	beq.n	80052a8 <TIM_Base_SetConfig+0x20>
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80052a6:	d108      	bne.n	80052ba <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80052ae:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80052b0:	683b      	ldr	r3, [r7, #0]
 80052b2:	685b      	ldr	r3, [r3, #4]
 80052b4:	68fa      	ldr	r2, [r7, #12]
 80052b6:	4313      	orrs	r3, r2
 80052b8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	4a21      	ldr	r2, [pc, #132]	; (8005344 <TIM_Base_SetConfig+0xbc>)
 80052be:	4293      	cmp	r3, r2
 80052c0:	d00b      	beq.n	80052da <TIM_Base_SetConfig+0x52>
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80052c8:	d007      	beq.n	80052da <TIM_Base_SetConfig+0x52>
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	4a1e      	ldr	r2, [pc, #120]	; (8005348 <TIM_Base_SetConfig+0xc0>)
 80052ce:	4293      	cmp	r3, r2
 80052d0:	d003      	beq.n	80052da <TIM_Base_SetConfig+0x52>
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	4a1d      	ldr	r2, [pc, #116]	; (800534c <TIM_Base_SetConfig+0xc4>)
 80052d6:	4293      	cmp	r3, r2
 80052d8:	d108      	bne.n	80052ec <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80052e0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80052e2:	683b      	ldr	r3, [r7, #0]
 80052e4:	68db      	ldr	r3, [r3, #12]
 80052e6:	68fa      	ldr	r2, [r7, #12]
 80052e8:	4313      	orrs	r3, r2
 80052ea:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80052f2:	683b      	ldr	r3, [r7, #0]
 80052f4:	695b      	ldr	r3, [r3, #20]
 80052f6:	4313      	orrs	r3, r2
 80052f8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	68fa      	ldr	r2, [r7, #12]
 80052fe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005300:	683b      	ldr	r3, [r7, #0]
 8005302:	689a      	ldr	r2, [r3, #8]
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005308:	683b      	ldr	r3, [r7, #0]
 800530a:	681a      	ldr	r2, [r3, #0]
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	4a0c      	ldr	r2, [pc, #48]	; (8005344 <TIM_Base_SetConfig+0xbc>)
 8005314:	4293      	cmp	r3, r2
 8005316:	d007      	beq.n	8005328 <TIM_Base_SetConfig+0xa0>
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	4a0b      	ldr	r2, [pc, #44]	; (8005348 <TIM_Base_SetConfig+0xc0>)
 800531c:	4293      	cmp	r3, r2
 800531e:	d003      	beq.n	8005328 <TIM_Base_SetConfig+0xa0>
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	4a0a      	ldr	r2, [pc, #40]	; (800534c <TIM_Base_SetConfig+0xc4>)
 8005324:	4293      	cmp	r3, r2
 8005326:	d103      	bne.n	8005330 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005328:	683b      	ldr	r3, [r7, #0]
 800532a:	691a      	ldr	r2, [r3, #16]
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	2201      	movs	r2, #1
 8005334:	615a      	str	r2, [r3, #20]
}
 8005336:	bf00      	nop
 8005338:	3714      	adds	r7, #20
 800533a:	46bd      	mov	sp, r7
 800533c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005340:	4770      	bx	lr
 8005342:	bf00      	nop
 8005344:	40012c00 	.word	0x40012c00
 8005348:	40014000 	.word	0x40014000
 800534c:	40014400 	.word	0x40014400

08005350 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005350:	b480      	push	{r7}
 8005352:	b087      	sub	sp, #28
 8005354:	af00      	add	r7, sp, #0
 8005356:	6078      	str	r0, [r7, #4]
 8005358:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	6a1b      	ldr	r3, [r3, #32]
 800535e:	f023 0201 	bic.w	r2, r3, #1
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	6a1b      	ldr	r3, [r3, #32]
 800536a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	685b      	ldr	r3, [r3, #4]
 8005370:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	699b      	ldr	r3, [r3, #24]
 8005376:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800537e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005382:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	f023 0303 	bic.w	r3, r3, #3
 800538a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800538c:	683b      	ldr	r3, [r7, #0]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	68fa      	ldr	r2, [r7, #12]
 8005392:	4313      	orrs	r3, r2
 8005394:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005396:	697b      	ldr	r3, [r7, #20]
 8005398:	f023 0302 	bic.w	r3, r3, #2
 800539c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800539e:	683b      	ldr	r3, [r7, #0]
 80053a0:	689b      	ldr	r3, [r3, #8]
 80053a2:	697a      	ldr	r2, [r7, #20]
 80053a4:	4313      	orrs	r3, r2
 80053a6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	4a24      	ldr	r2, [pc, #144]	; (800543c <TIM_OC1_SetConfig+0xec>)
 80053ac:	4293      	cmp	r3, r2
 80053ae:	d007      	beq.n	80053c0 <TIM_OC1_SetConfig+0x70>
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	4a23      	ldr	r2, [pc, #140]	; (8005440 <TIM_OC1_SetConfig+0xf0>)
 80053b4:	4293      	cmp	r3, r2
 80053b6:	d003      	beq.n	80053c0 <TIM_OC1_SetConfig+0x70>
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	4a22      	ldr	r2, [pc, #136]	; (8005444 <TIM_OC1_SetConfig+0xf4>)
 80053bc:	4293      	cmp	r3, r2
 80053be:	d10c      	bne.n	80053da <TIM_OC1_SetConfig+0x8a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80053c0:	697b      	ldr	r3, [r7, #20]
 80053c2:	f023 0308 	bic.w	r3, r3, #8
 80053c6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80053c8:	683b      	ldr	r3, [r7, #0]
 80053ca:	68db      	ldr	r3, [r3, #12]
 80053cc:	697a      	ldr	r2, [r7, #20]
 80053ce:	4313      	orrs	r3, r2
 80053d0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80053d2:	697b      	ldr	r3, [r7, #20]
 80053d4:	f023 0304 	bic.w	r3, r3, #4
 80053d8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	4a17      	ldr	r2, [pc, #92]	; (800543c <TIM_OC1_SetConfig+0xec>)
 80053de:	4293      	cmp	r3, r2
 80053e0:	d007      	beq.n	80053f2 <TIM_OC1_SetConfig+0xa2>
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	4a16      	ldr	r2, [pc, #88]	; (8005440 <TIM_OC1_SetConfig+0xf0>)
 80053e6:	4293      	cmp	r3, r2
 80053e8:	d003      	beq.n	80053f2 <TIM_OC1_SetConfig+0xa2>
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	4a15      	ldr	r2, [pc, #84]	; (8005444 <TIM_OC1_SetConfig+0xf4>)
 80053ee:	4293      	cmp	r3, r2
 80053f0:	d111      	bne.n	8005416 <TIM_OC1_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80053f2:	693b      	ldr	r3, [r7, #16]
 80053f4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80053f8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80053fa:	693b      	ldr	r3, [r7, #16]
 80053fc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005400:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005402:	683b      	ldr	r3, [r7, #0]
 8005404:	695b      	ldr	r3, [r3, #20]
 8005406:	693a      	ldr	r2, [r7, #16]
 8005408:	4313      	orrs	r3, r2
 800540a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800540c:	683b      	ldr	r3, [r7, #0]
 800540e:	699b      	ldr	r3, [r3, #24]
 8005410:	693a      	ldr	r2, [r7, #16]
 8005412:	4313      	orrs	r3, r2
 8005414:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	693a      	ldr	r2, [r7, #16]
 800541a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	68fa      	ldr	r2, [r7, #12]
 8005420:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005422:	683b      	ldr	r3, [r7, #0]
 8005424:	685a      	ldr	r2, [r3, #4]
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	697a      	ldr	r2, [r7, #20]
 800542e:	621a      	str	r2, [r3, #32]
}
 8005430:	bf00      	nop
 8005432:	371c      	adds	r7, #28
 8005434:	46bd      	mov	sp, r7
 8005436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800543a:	4770      	bx	lr
 800543c:	40012c00 	.word	0x40012c00
 8005440:	40014000 	.word	0x40014000
 8005444:	40014400 	.word	0x40014400

08005448 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005448:	b480      	push	{r7}
 800544a:	b087      	sub	sp, #28
 800544c:	af00      	add	r7, sp, #0
 800544e:	6078      	str	r0, [r7, #4]
 8005450:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	6a1b      	ldr	r3, [r3, #32]
 8005456:	f023 0210 	bic.w	r2, r3, #16
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	6a1b      	ldr	r3, [r3, #32]
 8005462:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	685b      	ldr	r3, [r3, #4]
 8005468:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	699b      	ldr	r3, [r3, #24]
 800546e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005476:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800547a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005482:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005484:	683b      	ldr	r3, [r7, #0]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	021b      	lsls	r3, r3, #8
 800548a:	68fa      	ldr	r2, [r7, #12]
 800548c:	4313      	orrs	r3, r2
 800548e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005490:	697b      	ldr	r3, [r7, #20]
 8005492:	f023 0320 	bic.w	r3, r3, #32
 8005496:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005498:	683b      	ldr	r3, [r7, #0]
 800549a:	689b      	ldr	r3, [r3, #8]
 800549c:	011b      	lsls	r3, r3, #4
 800549e:	697a      	ldr	r2, [r7, #20]
 80054a0:	4313      	orrs	r3, r2
 80054a2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	4a22      	ldr	r2, [pc, #136]	; (8005530 <TIM_OC2_SetConfig+0xe8>)
 80054a8:	4293      	cmp	r3, r2
 80054aa:	d10d      	bne.n	80054c8 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80054ac:	697b      	ldr	r3, [r7, #20]
 80054ae:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80054b2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80054b4:	683b      	ldr	r3, [r7, #0]
 80054b6:	68db      	ldr	r3, [r3, #12]
 80054b8:	011b      	lsls	r3, r3, #4
 80054ba:	697a      	ldr	r2, [r7, #20]
 80054bc:	4313      	orrs	r3, r2
 80054be:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80054c0:	697b      	ldr	r3, [r7, #20]
 80054c2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80054c6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	4a19      	ldr	r2, [pc, #100]	; (8005530 <TIM_OC2_SetConfig+0xe8>)
 80054cc:	4293      	cmp	r3, r2
 80054ce:	d007      	beq.n	80054e0 <TIM_OC2_SetConfig+0x98>
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	4a18      	ldr	r2, [pc, #96]	; (8005534 <TIM_OC2_SetConfig+0xec>)
 80054d4:	4293      	cmp	r3, r2
 80054d6:	d003      	beq.n	80054e0 <TIM_OC2_SetConfig+0x98>
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	4a17      	ldr	r2, [pc, #92]	; (8005538 <TIM_OC2_SetConfig+0xf0>)
 80054dc:	4293      	cmp	r3, r2
 80054de:	d113      	bne.n	8005508 <TIM_OC2_SetConfig+0xc0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80054e0:	693b      	ldr	r3, [r7, #16]
 80054e2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80054e6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80054e8:	693b      	ldr	r3, [r7, #16]
 80054ea:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80054ee:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80054f0:	683b      	ldr	r3, [r7, #0]
 80054f2:	695b      	ldr	r3, [r3, #20]
 80054f4:	009b      	lsls	r3, r3, #2
 80054f6:	693a      	ldr	r2, [r7, #16]
 80054f8:	4313      	orrs	r3, r2
 80054fa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80054fc:	683b      	ldr	r3, [r7, #0]
 80054fe:	699b      	ldr	r3, [r3, #24]
 8005500:	009b      	lsls	r3, r3, #2
 8005502:	693a      	ldr	r2, [r7, #16]
 8005504:	4313      	orrs	r3, r2
 8005506:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	693a      	ldr	r2, [r7, #16]
 800550c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	68fa      	ldr	r2, [r7, #12]
 8005512:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005514:	683b      	ldr	r3, [r7, #0]
 8005516:	685a      	ldr	r2, [r3, #4]
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	697a      	ldr	r2, [r7, #20]
 8005520:	621a      	str	r2, [r3, #32]
}
 8005522:	bf00      	nop
 8005524:	371c      	adds	r7, #28
 8005526:	46bd      	mov	sp, r7
 8005528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800552c:	4770      	bx	lr
 800552e:	bf00      	nop
 8005530:	40012c00 	.word	0x40012c00
 8005534:	40014000 	.word	0x40014000
 8005538:	40014400 	.word	0x40014400

0800553c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800553c:	b480      	push	{r7}
 800553e:	b087      	sub	sp, #28
 8005540:	af00      	add	r7, sp, #0
 8005542:	6078      	str	r0, [r7, #4]
 8005544:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	6a1b      	ldr	r3, [r3, #32]
 800554a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	6a1b      	ldr	r3, [r3, #32]
 8005556:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	685b      	ldr	r3, [r3, #4]
 800555c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	69db      	ldr	r3, [r3, #28]
 8005562:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800556a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800556e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	f023 0303 	bic.w	r3, r3, #3
 8005576:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005578:	683b      	ldr	r3, [r7, #0]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	68fa      	ldr	r2, [r7, #12]
 800557e:	4313      	orrs	r3, r2
 8005580:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005582:	697b      	ldr	r3, [r7, #20]
 8005584:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005588:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800558a:	683b      	ldr	r3, [r7, #0]
 800558c:	689b      	ldr	r3, [r3, #8]
 800558e:	021b      	lsls	r3, r3, #8
 8005590:	697a      	ldr	r2, [r7, #20]
 8005592:	4313      	orrs	r3, r2
 8005594:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	4a21      	ldr	r2, [pc, #132]	; (8005620 <TIM_OC3_SetConfig+0xe4>)
 800559a:	4293      	cmp	r3, r2
 800559c:	d10d      	bne.n	80055ba <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800559e:	697b      	ldr	r3, [r7, #20]
 80055a0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80055a4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80055a6:	683b      	ldr	r3, [r7, #0]
 80055a8:	68db      	ldr	r3, [r3, #12]
 80055aa:	021b      	lsls	r3, r3, #8
 80055ac:	697a      	ldr	r2, [r7, #20]
 80055ae:	4313      	orrs	r3, r2
 80055b0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80055b2:	697b      	ldr	r3, [r7, #20]
 80055b4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80055b8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	4a18      	ldr	r2, [pc, #96]	; (8005620 <TIM_OC3_SetConfig+0xe4>)
 80055be:	4293      	cmp	r3, r2
 80055c0:	d007      	beq.n	80055d2 <TIM_OC3_SetConfig+0x96>
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	4a17      	ldr	r2, [pc, #92]	; (8005624 <TIM_OC3_SetConfig+0xe8>)
 80055c6:	4293      	cmp	r3, r2
 80055c8:	d003      	beq.n	80055d2 <TIM_OC3_SetConfig+0x96>
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	4a16      	ldr	r2, [pc, #88]	; (8005628 <TIM_OC3_SetConfig+0xec>)
 80055ce:	4293      	cmp	r3, r2
 80055d0:	d113      	bne.n	80055fa <TIM_OC3_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80055d2:	693b      	ldr	r3, [r7, #16]
 80055d4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80055d8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80055da:	693b      	ldr	r3, [r7, #16]
 80055dc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80055e0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80055e2:	683b      	ldr	r3, [r7, #0]
 80055e4:	695b      	ldr	r3, [r3, #20]
 80055e6:	011b      	lsls	r3, r3, #4
 80055e8:	693a      	ldr	r2, [r7, #16]
 80055ea:	4313      	orrs	r3, r2
 80055ec:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80055ee:	683b      	ldr	r3, [r7, #0]
 80055f0:	699b      	ldr	r3, [r3, #24]
 80055f2:	011b      	lsls	r3, r3, #4
 80055f4:	693a      	ldr	r2, [r7, #16]
 80055f6:	4313      	orrs	r3, r2
 80055f8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	693a      	ldr	r2, [r7, #16]
 80055fe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	68fa      	ldr	r2, [r7, #12]
 8005604:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005606:	683b      	ldr	r3, [r7, #0]
 8005608:	685a      	ldr	r2, [r3, #4]
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	697a      	ldr	r2, [r7, #20]
 8005612:	621a      	str	r2, [r3, #32]
}
 8005614:	bf00      	nop
 8005616:	371c      	adds	r7, #28
 8005618:	46bd      	mov	sp, r7
 800561a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800561e:	4770      	bx	lr
 8005620:	40012c00 	.word	0x40012c00
 8005624:	40014000 	.word	0x40014000
 8005628:	40014400 	.word	0x40014400

0800562c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800562c:	b480      	push	{r7}
 800562e:	b087      	sub	sp, #28
 8005630:	af00      	add	r7, sp, #0
 8005632:	6078      	str	r0, [r7, #4]
 8005634:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	6a1b      	ldr	r3, [r3, #32]
 800563a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	6a1b      	ldr	r3, [r3, #32]
 8005646:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	685b      	ldr	r3, [r3, #4]
 800564c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	69db      	ldr	r3, [r3, #28]
 8005652:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800565a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800565e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005666:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005668:	683b      	ldr	r3, [r7, #0]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	021b      	lsls	r3, r3, #8
 800566e:	68fa      	ldr	r2, [r7, #12]
 8005670:	4313      	orrs	r3, r2
 8005672:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005674:	693b      	ldr	r3, [r7, #16]
 8005676:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800567a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800567c:	683b      	ldr	r3, [r7, #0]
 800567e:	689b      	ldr	r3, [r3, #8]
 8005680:	031b      	lsls	r3, r3, #12
 8005682:	693a      	ldr	r2, [r7, #16]
 8005684:	4313      	orrs	r3, r2
 8005686:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	4a14      	ldr	r2, [pc, #80]	; (80056dc <TIM_OC4_SetConfig+0xb0>)
 800568c:	4293      	cmp	r3, r2
 800568e:	d007      	beq.n	80056a0 <TIM_OC4_SetConfig+0x74>
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	4a13      	ldr	r2, [pc, #76]	; (80056e0 <TIM_OC4_SetConfig+0xb4>)
 8005694:	4293      	cmp	r3, r2
 8005696:	d003      	beq.n	80056a0 <TIM_OC4_SetConfig+0x74>
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	4a12      	ldr	r2, [pc, #72]	; (80056e4 <TIM_OC4_SetConfig+0xb8>)
 800569c:	4293      	cmp	r3, r2
 800569e:	d109      	bne.n	80056b4 <TIM_OC4_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80056a0:	697b      	ldr	r3, [r7, #20]
 80056a2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80056a6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80056a8:	683b      	ldr	r3, [r7, #0]
 80056aa:	695b      	ldr	r3, [r3, #20]
 80056ac:	019b      	lsls	r3, r3, #6
 80056ae:	697a      	ldr	r2, [r7, #20]
 80056b0:	4313      	orrs	r3, r2
 80056b2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	697a      	ldr	r2, [r7, #20]
 80056b8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	68fa      	ldr	r2, [r7, #12]
 80056be:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80056c0:	683b      	ldr	r3, [r7, #0]
 80056c2:	685a      	ldr	r2, [r3, #4]
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	693a      	ldr	r2, [r7, #16]
 80056cc:	621a      	str	r2, [r3, #32]
}
 80056ce:	bf00      	nop
 80056d0:	371c      	adds	r7, #28
 80056d2:	46bd      	mov	sp, r7
 80056d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056d8:	4770      	bx	lr
 80056da:	bf00      	nop
 80056dc:	40012c00 	.word	0x40012c00
 80056e0:	40014000 	.word	0x40014000
 80056e4:	40014400 	.word	0x40014400

080056e8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80056e8:	b480      	push	{r7}
 80056ea:	b087      	sub	sp, #28
 80056ec:	af00      	add	r7, sp, #0
 80056ee:	6078      	str	r0, [r7, #4]
 80056f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	6a1b      	ldr	r3, [r3, #32]
 80056f6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	6a1b      	ldr	r3, [r3, #32]
 8005702:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	685b      	ldr	r3, [r3, #4]
 8005708:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800570e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005716:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800571a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800571c:	683b      	ldr	r3, [r7, #0]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	68fa      	ldr	r2, [r7, #12]
 8005722:	4313      	orrs	r3, r2
 8005724:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005726:	693b      	ldr	r3, [r7, #16]
 8005728:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800572c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800572e:	683b      	ldr	r3, [r7, #0]
 8005730:	689b      	ldr	r3, [r3, #8]
 8005732:	041b      	lsls	r3, r3, #16
 8005734:	693a      	ldr	r2, [r7, #16]
 8005736:	4313      	orrs	r3, r2
 8005738:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	4a13      	ldr	r2, [pc, #76]	; (800578c <TIM_OC5_SetConfig+0xa4>)
 800573e:	4293      	cmp	r3, r2
 8005740:	d007      	beq.n	8005752 <TIM_OC5_SetConfig+0x6a>
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	4a12      	ldr	r2, [pc, #72]	; (8005790 <TIM_OC5_SetConfig+0xa8>)
 8005746:	4293      	cmp	r3, r2
 8005748:	d003      	beq.n	8005752 <TIM_OC5_SetConfig+0x6a>
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	4a11      	ldr	r2, [pc, #68]	; (8005794 <TIM_OC5_SetConfig+0xac>)
 800574e:	4293      	cmp	r3, r2
 8005750:	d109      	bne.n	8005766 <TIM_OC5_SetConfig+0x7e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005752:	697b      	ldr	r3, [r7, #20]
 8005754:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005758:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800575a:	683b      	ldr	r3, [r7, #0]
 800575c:	695b      	ldr	r3, [r3, #20]
 800575e:	021b      	lsls	r3, r3, #8
 8005760:	697a      	ldr	r2, [r7, #20]
 8005762:	4313      	orrs	r3, r2
 8005764:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	697a      	ldr	r2, [r7, #20]
 800576a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	68fa      	ldr	r2, [r7, #12]
 8005770:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005772:	683b      	ldr	r3, [r7, #0]
 8005774:	685a      	ldr	r2, [r3, #4]
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	693a      	ldr	r2, [r7, #16]
 800577e:	621a      	str	r2, [r3, #32]
}
 8005780:	bf00      	nop
 8005782:	371c      	adds	r7, #28
 8005784:	46bd      	mov	sp, r7
 8005786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800578a:	4770      	bx	lr
 800578c:	40012c00 	.word	0x40012c00
 8005790:	40014000 	.word	0x40014000
 8005794:	40014400 	.word	0x40014400

08005798 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005798:	b480      	push	{r7}
 800579a:	b087      	sub	sp, #28
 800579c:	af00      	add	r7, sp, #0
 800579e:	6078      	str	r0, [r7, #4]
 80057a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	6a1b      	ldr	r3, [r3, #32]
 80057a6:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	6a1b      	ldr	r3, [r3, #32]
 80057b2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	685b      	ldr	r3, [r3, #4]
 80057b8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80057be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80057c6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80057ca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80057cc:	683b      	ldr	r3, [r7, #0]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	021b      	lsls	r3, r3, #8
 80057d2:	68fa      	ldr	r2, [r7, #12]
 80057d4:	4313      	orrs	r3, r2
 80057d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80057d8:	693b      	ldr	r3, [r7, #16]
 80057da:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80057de:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80057e0:	683b      	ldr	r3, [r7, #0]
 80057e2:	689b      	ldr	r3, [r3, #8]
 80057e4:	051b      	lsls	r3, r3, #20
 80057e6:	693a      	ldr	r2, [r7, #16]
 80057e8:	4313      	orrs	r3, r2
 80057ea:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	4a14      	ldr	r2, [pc, #80]	; (8005840 <TIM_OC6_SetConfig+0xa8>)
 80057f0:	4293      	cmp	r3, r2
 80057f2:	d007      	beq.n	8005804 <TIM_OC6_SetConfig+0x6c>
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	4a13      	ldr	r2, [pc, #76]	; (8005844 <TIM_OC6_SetConfig+0xac>)
 80057f8:	4293      	cmp	r3, r2
 80057fa:	d003      	beq.n	8005804 <TIM_OC6_SetConfig+0x6c>
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	4a12      	ldr	r2, [pc, #72]	; (8005848 <TIM_OC6_SetConfig+0xb0>)
 8005800:	4293      	cmp	r3, r2
 8005802:	d109      	bne.n	8005818 <TIM_OC6_SetConfig+0x80>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005804:	697b      	ldr	r3, [r7, #20]
 8005806:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800580a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800580c:	683b      	ldr	r3, [r7, #0]
 800580e:	695b      	ldr	r3, [r3, #20]
 8005810:	029b      	lsls	r3, r3, #10
 8005812:	697a      	ldr	r2, [r7, #20]
 8005814:	4313      	orrs	r3, r2
 8005816:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	697a      	ldr	r2, [r7, #20]
 800581c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	68fa      	ldr	r2, [r7, #12]
 8005822:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005824:	683b      	ldr	r3, [r7, #0]
 8005826:	685a      	ldr	r2, [r3, #4]
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	693a      	ldr	r2, [r7, #16]
 8005830:	621a      	str	r2, [r3, #32]
}
 8005832:	bf00      	nop
 8005834:	371c      	adds	r7, #28
 8005836:	46bd      	mov	sp, r7
 8005838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800583c:	4770      	bx	lr
 800583e:	bf00      	nop
 8005840:	40012c00 	.word	0x40012c00
 8005844:	40014000 	.word	0x40014000
 8005848:	40014400 	.word	0x40014400

0800584c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800584c:	b480      	push	{r7}
 800584e:	b085      	sub	sp, #20
 8005850:	af00      	add	r7, sp, #0
 8005852:	6078      	str	r0, [r7, #4]
 8005854:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800585c:	2b01      	cmp	r3, #1
 800585e:	d101      	bne.n	8005864 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005860:	2302      	movs	r3, #2
 8005862:	e04f      	b.n	8005904 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	2201      	movs	r2, #1
 8005868:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	2202      	movs	r2, #2
 8005870:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	685b      	ldr	r3, [r3, #4]
 800587a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	689b      	ldr	r3, [r3, #8]
 8005882:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	4a21      	ldr	r2, [pc, #132]	; (8005910 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800588a:	4293      	cmp	r3, r2
 800588c:	d108      	bne.n	80058a0 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005894:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005896:	683b      	ldr	r3, [r7, #0]
 8005898:	685b      	ldr	r3, [r3, #4]
 800589a:	68fa      	ldr	r2, [r7, #12]
 800589c:	4313      	orrs	r3, r2
 800589e:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80058a6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80058a8:	683b      	ldr	r3, [r7, #0]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	68fa      	ldr	r2, [r7, #12]
 80058ae:	4313      	orrs	r3, r2
 80058b0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	68fa      	ldr	r2, [r7, #12]
 80058b8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	4a14      	ldr	r2, [pc, #80]	; (8005910 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80058c0:	4293      	cmp	r3, r2
 80058c2:	d009      	beq.n	80058d8 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80058cc:	d004      	beq.n	80058d8 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	4a10      	ldr	r2, [pc, #64]	; (8005914 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80058d4:	4293      	cmp	r3, r2
 80058d6:	d10c      	bne.n	80058f2 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80058d8:	68bb      	ldr	r3, [r7, #8]
 80058da:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80058de:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80058e0:	683b      	ldr	r3, [r7, #0]
 80058e2:	689b      	ldr	r3, [r3, #8]
 80058e4:	68ba      	ldr	r2, [r7, #8]
 80058e6:	4313      	orrs	r3, r2
 80058e8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	68ba      	ldr	r2, [r7, #8]
 80058f0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	2201      	movs	r2, #1
 80058f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	2200      	movs	r2, #0
 80058fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005902:	2300      	movs	r3, #0
}
 8005904:	4618      	mov	r0, r3
 8005906:	3714      	adds	r7, #20
 8005908:	46bd      	mov	sp, r7
 800590a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800590e:	4770      	bx	lr
 8005910:	40012c00 	.word	0x40012c00
 8005914:	40014000 	.word	0x40014000

08005918 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005918:	b480      	push	{r7}
 800591a:	b085      	sub	sp, #20
 800591c:	af00      	add	r7, sp, #0
 800591e:	6078      	str	r0, [r7, #4]
 8005920:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005922:	2300      	movs	r3, #0
 8005924:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800592c:	2b01      	cmp	r3, #1
 800592e:	d101      	bne.n	8005934 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005930:	2302      	movs	r3, #2
 8005932:	e060      	b.n	80059f6 <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	2201      	movs	r2, #1
 8005938:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8005942:	683b      	ldr	r3, [r7, #0]
 8005944:	68db      	ldr	r3, [r3, #12]
 8005946:	4313      	orrs	r3, r2
 8005948:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005950:	683b      	ldr	r3, [r7, #0]
 8005952:	689b      	ldr	r3, [r3, #8]
 8005954:	4313      	orrs	r3, r2
 8005956:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800595e:	683b      	ldr	r3, [r7, #0]
 8005960:	685b      	ldr	r3, [r3, #4]
 8005962:	4313      	orrs	r3, r2
 8005964:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800596c:	683b      	ldr	r3, [r7, #0]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	4313      	orrs	r3, r2
 8005972:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800597a:	683b      	ldr	r3, [r7, #0]
 800597c:	691b      	ldr	r3, [r3, #16]
 800597e:	4313      	orrs	r3, r2
 8005980:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8005988:	683b      	ldr	r3, [r7, #0]
 800598a:	695b      	ldr	r3, [r3, #20]
 800598c:	4313      	orrs	r3, r2
 800598e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8005996:	683b      	ldr	r3, [r7, #0]
 8005998:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800599a:	4313      	orrs	r3, r2
 800599c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 80059a4:	683b      	ldr	r3, [r7, #0]
 80059a6:	699b      	ldr	r3, [r3, #24]
 80059a8:	041b      	lsls	r3, r3, #16
 80059aa:	4313      	orrs	r3, r2
 80059ac:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	4a14      	ldr	r2, [pc, #80]	; (8005a04 <HAL_TIMEx_ConfigBreakDeadTime+0xec>)
 80059b4:	4293      	cmp	r3, r2
 80059b6:	d115      	bne.n	80059e4 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 80059be:	683b      	ldr	r3, [r7, #0]
 80059c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059c2:	051b      	lsls	r3, r3, #20
 80059c4:	4313      	orrs	r3, r2
 80059c6:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80059ce:	683b      	ldr	r3, [r7, #0]
 80059d0:	69db      	ldr	r3, [r3, #28]
 80059d2:	4313      	orrs	r3, r2
 80059d4:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80059dc:	683b      	ldr	r3, [r7, #0]
 80059de:	6a1b      	ldr	r3, [r3, #32]
 80059e0:	4313      	orrs	r3, r2
 80059e2:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	68fa      	ldr	r2, [r7, #12]
 80059ea:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	2200      	movs	r2, #0
 80059f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80059f4:	2300      	movs	r3, #0
}
 80059f6:	4618      	mov	r0, r3
 80059f8:	3714      	adds	r7, #20
 80059fa:	46bd      	mov	sp, r7
 80059fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a00:	4770      	bx	lr
 8005a02:	bf00      	nop
 8005a04:	40012c00 	.word	0x40012c00

08005a08 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005a08:	b580      	push	{r7, lr}
 8005a0a:	b082      	sub	sp, #8
 8005a0c:	af00      	add	r7, sp, #0
 8005a0e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d101      	bne.n	8005a1a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005a16:	2301      	movs	r3, #1
 8005a18:	e040      	b.n	8005a9c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d106      	bne.n	8005a30 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	2200      	movs	r2, #0
 8005a26:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005a2a:	6878      	ldr	r0, [r7, #4]
 8005a2c:	f7fd f8ea 	bl	8002c04 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	2224      	movs	r2, #36	; 0x24
 8005a34:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	681a      	ldr	r2, [r3, #0]
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	f022 0201 	bic.w	r2, r2, #1
 8005a44:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005a46:	6878      	ldr	r0, [r7, #4]
 8005a48:	f000 f992 	bl	8005d70 <UART_SetConfig>
 8005a4c:	4603      	mov	r3, r0
 8005a4e:	2b01      	cmp	r3, #1
 8005a50:	d101      	bne.n	8005a56 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8005a52:	2301      	movs	r3, #1
 8005a54:	e022      	b.n	8005a9c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d002      	beq.n	8005a64 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8005a5e:	6878      	ldr	r0, [r7, #4]
 8005a60:	f000 fbb2 	bl	80061c8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	685a      	ldr	r2, [r3, #4]
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005a72:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	689a      	ldr	r2, [r3, #8]
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005a82:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	681a      	ldr	r2, [r3, #0]
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	f042 0201 	orr.w	r2, r2, #1
 8005a92:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005a94:	6878      	ldr	r0, [r7, #4]
 8005a96:	f000 fc39 	bl	800630c <UART_CheckIdleState>
 8005a9a:	4603      	mov	r3, r0
}
 8005a9c:	4618      	mov	r0, r3
 8005a9e:	3708      	adds	r7, #8
 8005aa0:	46bd      	mov	sp, r7
 8005aa2:	bd80      	pop	{r7, pc}

08005aa4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005aa4:	b580      	push	{r7, lr}
 8005aa6:	b08a      	sub	sp, #40	; 0x28
 8005aa8:	af02      	add	r7, sp, #8
 8005aaa:	60f8      	str	r0, [r7, #12]
 8005aac:	60b9      	str	r1, [r7, #8]
 8005aae:	603b      	str	r3, [r7, #0]
 8005ab0:	4613      	mov	r3, r2
 8005ab2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005ab8:	2b20      	cmp	r3, #32
 8005aba:	f040 8082 	bne.w	8005bc2 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8005abe:	68bb      	ldr	r3, [r7, #8]
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d002      	beq.n	8005aca <HAL_UART_Transmit+0x26>
 8005ac4:	88fb      	ldrh	r3, [r7, #6]
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d101      	bne.n	8005ace <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8005aca:	2301      	movs	r3, #1
 8005acc:	e07a      	b.n	8005bc4 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8005ad4:	2b01      	cmp	r3, #1
 8005ad6:	d101      	bne.n	8005adc <HAL_UART_Transmit+0x38>
 8005ad8:	2302      	movs	r3, #2
 8005ada:	e073      	b.n	8005bc4 <HAL_UART_Transmit+0x120>
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	2201      	movs	r2, #1
 8005ae0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	2200      	movs	r2, #0
 8005ae8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	2221      	movs	r2, #33	; 0x21
 8005af0:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005af2:	f7fd fa93 	bl	800301c <HAL_GetTick>
 8005af6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	88fa      	ldrh	r2, [r7, #6]
 8005afc:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	88fa      	ldrh	r2, [r7, #6]
 8005b04:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	689b      	ldr	r3, [r3, #8]
 8005b0c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005b10:	d108      	bne.n	8005b24 <HAL_UART_Transmit+0x80>
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	691b      	ldr	r3, [r3, #16]
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d104      	bne.n	8005b24 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8005b1a:	2300      	movs	r3, #0
 8005b1c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005b1e:	68bb      	ldr	r3, [r7, #8]
 8005b20:	61bb      	str	r3, [r7, #24]
 8005b22:	e003      	b.n	8005b2c <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8005b24:	68bb      	ldr	r3, [r7, #8]
 8005b26:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005b28:	2300      	movs	r3, #0
 8005b2a:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	2200      	movs	r2, #0
 8005b30:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8005b34:	e02d      	b.n	8005b92 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005b36:	683b      	ldr	r3, [r7, #0]
 8005b38:	9300      	str	r3, [sp, #0]
 8005b3a:	697b      	ldr	r3, [r7, #20]
 8005b3c:	2200      	movs	r2, #0
 8005b3e:	2180      	movs	r1, #128	; 0x80
 8005b40:	68f8      	ldr	r0, [r7, #12]
 8005b42:	f000 fc2c 	bl	800639e <UART_WaitOnFlagUntilTimeout>
 8005b46:	4603      	mov	r3, r0
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d001      	beq.n	8005b50 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8005b4c:	2303      	movs	r3, #3
 8005b4e:	e039      	b.n	8005bc4 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8005b50:	69fb      	ldr	r3, [r7, #28]
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d10b      	bne.n	8005b6e <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005b56:	69bb      	ldr	r3, [r7, #24]
 8005b58:	881a      	ldrh	r2, [r3, #0]
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005b62:	b292      	uxth	r2, r2
 8005b64:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8005b66:	69bb      	ldr	r3, [r7, #24]
 8005b68:	3302      	adds	r3, #2
 8005b6a:	61bb      	str	r3, [r7, #24]
 8005b6c:	e008      	b.n	8005b80 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005b6e:	69fb      	ldr	r3, [r7, #28]
 8005b70:	781a      	ldrb	r2, [r3, #0]
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	b292      	uxth	r2, r2
 8005b78:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005b7a:	69fb      	ldr	r3, [r7, #28]
 8005b7c:	3301      	adds	r3, #1
 8005b7e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005b86:	b29b      	uxth	r3, r3
 8005b88:	3b01      	subs	r3, #1
 8005b8a:	b29a      	uxth	r2, r3
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005b98:	b29b      	uxth	r3, r3
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d1cb      	bne.n	8005b36 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005b9e:	683b      	ldr	r3, [r7, #0]
 8005ba0:	9300      	str	r3, [sp, #0]
 8005ba2:	697b      	ldr	r3, [r7, #20]
 8005ba4:	2200      	movs	r2, #0
 8005ba6:	2140      	movs	r1, #64	; 0x40
 8005ba8:	68f8      	ldr	r0, [r7, #12]
 8005baa:	f000 fbf8 	bl	800639e <UART_WaitOnFlagUntilTimeout>
 8005bae:	4603      	mov	r3, r0
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d001      	beq.n	8005bb8 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8005bb4:	2303      	movs	r3, #3
 8005bb6:	e005      	b.n	8005bc4 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	2220      	movs	r2, #32
 8005bbc:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8005bbe:	2300      	movs	r3, #0
 8005bc0:	e000      	b.n	8005bc4 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8005bc2:	2302      	movs	r3, #2
  }
}
 8005bc4:	4618      	mov	r0, r3
 8005bc6:	3720      	adds	r7, #32
 8005bc8:	46bd      	mov	sp, r7
 8005bca:	bd80      	pop	{r7, pc}

08005bcc <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005bcc:	b580      	push	{r7, lr}
 8005bce:	b08a      	sub	sp, #40	; 0x28
 8005bd0:	af02      	add	r7, sp, #8
 8005bd2:	60f8      	str	r0, [r7, #12]
 8005bd4:	60b9      	str	r1, [r7, #8]
 8005bd6:	603b      	str	r3, [r7, #0]
 8005bd8:	4613      	mov	r3, r2
 8005bda:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005be0:	2b20      	cmp	r3, #32
 8005be2:	f040 80bf 	bne.w	8005d64 <HAL_UART_Receive+0x198>
  {
    if ((pData == NULL) || (Size == 0U))
 8005be6:	68bb      	ldr	r3, [r7, #8]
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d002      	beq.n	8005bf2 <HAL_UART_Receive+0x26>
 8005bec:	88fb      	ldrh	r3, [r7, #6]
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d101      	bne.n	8005bf6 <HAL_UART_Receive+0x2a>
    {
      return  HAL_ERROR;
 8005bf2:	2301      	movs	r3, #1
 8005bf4:	e0b7      	b.n	8005d66 <HAL_UART_Receive+0x19a>
    }

    __HAL_LOCK(huart);
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8005bfc:	2b01      	cmp	r3, #1
 8005bfe:	d101      	bne.n	8005c04 <HAL_UART_Receive+0x38>
 8005c00:	2302      	movs	r3, #2
 8005c02:	e0b0      	b.n	8005d66 <HAL_UART_Receive+0x19a>
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	2201      	movs	r2, #1
 8005c08:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	2200      	movs	r2, #0
 8005c10:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	2222      	movs	r2, #34	; 0x22
 8005c18:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	2200      	movs	r2, #0
 8005c1e:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005c20:	f7fd f9fc 	bl	800301c <HAL_GetTick>
 8005c24:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	88fa      	ldrh	r2, [r7, #6]
 8005c2a:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	88fa      	ldrh	r2, [r7, #6]
 8005c32:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	689b      	ldr	r3, [r3, #8]
 8005c3a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005c3e:	d10e      	bne.n	8005c5e <HAL_UART_Receive+0x92>
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	691b      	ldr	r3, [r3, #16]
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d105      	bne.n	8005c54 <HAL_UART_Receive+0x88>
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	f240 12ff 	movw	r2, #511	; 0x1ff
 8005c4e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005c52:	e02d      	b.n	8005cb0 <HAL_UART_Receive+0xe4>
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	22ff      	movs	r2, #255	; 0xff
 8005c58:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005c5c:	e028      	b.n	8005cb0 <HAL_UART_Receive+0xe4>
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	689b      	ldr	r3, [r3, #8]
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d10d      	bne.n	8005c82 <HAL_UART_Receive+0xb6>
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	691b      	ldr	r3, [r3, #16]
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d104      	bne.n	8005c78 <HAL_UART_Receive+0xac>
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	22ff      	movs	r2, #255	; 0xff
 8005c72:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005c76:	e01b      	b.n	8005cb0 <HAL_UART_Receive+0xe4>
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	227f      	movs	r2, #127	; 0x7f
 8005c7c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005c80:	e016      	b.n	8005cb0 <HAL_UART_Receive+0xe4>
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	689b      	ldr	r3, [r3, #8]
 8005c86:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005c8a:	d10d      	bne.n	8005ca8 <HAL_UART_Receive+0xdc>
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	691b      	ldr	r3, [r3, #16]
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d104      	bne.n	8005c9e <HAL_UART_Receive+0xd2>
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	227f      	movs	r2, #127	; 0x7f
 8005c98:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005c9c:	e008      	b.n	8005cb0 <HAL_UART_Receive+0xe4>
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	223f      	movs	r2, #63	; 0x3f
 8005ca2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005ca6:	e003      	b.n	8005cb0 <HAL_UART_Receive+0xe4>
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	2200      	movs	r2, #0
 8005cac:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005cb6:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	689b      	ldr	r3, [r3, #8]
 8005cbc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005cc0:	d108      	bne.n	8005cd4 <HAL_UART_Receive+0x108>
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	691b      	ldr	r3, [r3, #16]
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d104      	bne.n	8005cd4 <HAL_UART_Receive+0x108>
    {
      pdata8bits  = NULL;
 8005cca:	2300      	movs	r3, #0
 8005ccc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005cce:	68bb      	ldr	r3, [r7, #8]
 8005cd0:	61bb      	str	r3, [r7, #24]
 8005cd2:	e003      	b.n	8005cdc <HAL_UART_Receive+0x110>
    }
    else
    {
      pdata8bits  = pData;
 8005cd4:	68bb      	ldr	r3, [r7, #8]
 8005cd6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005cd8:	2300      	movs	r3, #0
 8005cda:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	2200      	movs	r2, #0
 8005ce0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8005ce4:	e033      	b.n	8005d4e <HAL_UART_Receive+0x182>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8005ce6:	683b      	ldr	r3, [r7, #0]
 8005ce8:	9300      	str	r3, [sp, #0]
 8005cea:	697b      	ldr	r3, [r7, #20]
 8005cec:	2200      	movs	r2, #0
 8005cee:	2120      	movs	r1, #32
 8005cf0:	68f8      	ldr	r0, [r7, #12]
 8005cf2:	f000 fb54 	bl	800639e <UART_WaitOnFlagUntilTimeout>
 8005cf6:	4603      	mov	r3, r0
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d001      	beq.n	8005d00 <HAL_UART_Receive+0x134>
      {
        return HAL_TIMEOUT;
 8005cfc:	2303      	movs	r3, #3
 8005cfe:	e032      	b.n	8005d66 <HAL_UART_Receive+0x19a>
      }
      if (pdata8bits == NULL)
 8005d00:	69fb      	ldr	r3, [r7, #28]
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d10c      	bne.n	8005d20 <HAL_UART_Receive+0x154>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8005d0c:	b29a      	uxth	r2, r3
 8005d0e:	8a7b      	ldrh	r3, [r7, #18]
 8005d10:	4013      	ands	r3, r2
 8005d12:	b29a      	uxth	r2, r3
 8005d14:	69bb      	ldr	r3, [r7, #24]
 8005d16:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8005d18:	69bb      	ldr	r3, [r7, #24]
 8005d1a:	3302      	adds	r3, #2
 8005d1c:	61bb      	str	r3, [r7, #24]
 8005d1e:	e00d      	b.n	8005d3c <HAL_UART_Receive+0x170>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8005d26:	b29b      	uxth	r3, r3
 8005d28:	b2da      	uxtb	r2, r3
 8005d2a:	8a7b      	ldrh	r3, [r7, #18]
 8005d2c:	b2db      	uxtb	r3, r3
 8005d2e:	4013      	ands	r3, r2
 8005d30:	b2da      	uxtb	r2, r3
 8005d32:	69fb      	ldr	r3, [r7, #28]
 8005d34:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8005d36:	69fb      	ldr	r3, [r7, #28]
 8005d38:	3301      	adds	r3, #1
 8005d3a:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005d42:	b29b      	uxth	r3, r3
 8005d44:	3b01      	subs	r3, #1
 8005d46:	b29a      	uxth	r2, r3
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005d54:	b29b      	uxth	r3, r3
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d1c5      	bne.n	8005ce6 <HAL_UART_Receive+0x11a>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	2220      	movs	r2, #32
 8005d5e:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8005d60:	2300      	movs	r3, #0
 8005d62:	e000      	b.n	8005d66 <HAL_UART_Receive+0x19a>
  }
  else
  {
    return HAL_BUSY;
 8005d64:	2302      	movs	r3, #2
  }
}
 8005d66:	4618      	mov	r0, r3
 8005d68:	3720      	adds	r7, #32
 8005d6a:	46bd      	mov	sp, r7
 8005d6c:	bd80      	pop	{r7, pc}
	...

08005d70 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005d70:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005d74:	b08a      	sub	sp, #40	; 0x28
 8005d76:	af00      	add	r7, sp, #0
 8005d78:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005d7a:	2300      	movs	r3, #0
 8005d7c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	689a      	ldr	r2, [r3, #8]
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	691b      	ldr	r3, [r3, #16]
 8005d88:	431a      	orrs	r2, r3
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	695b      	ldr	r3, [r3, #20]
 8005d8e:	431a      	orrs	r2, r3
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	69db      	ldr	r3, [r3, #28]
 8005d94:	4313      	orrs	r3, r2
 8005d96:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	681a      	ldr	r2, [r3, #0]
 8005d9e:	4bb4      	ldr	r3, [pc, #720]	; (8006070 <UART_SetConfig+0x300>)
 8005da0:	4013      	ands	r3, r2
 8005da2:	68fa      	ldr	r2, [r7, #12]
 8005da4:	6812      	ldr	r2, [r2, #0]
 8005da6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005da8:	430b      	orrs	r3, r1
 8005daa:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	685b      	ldr	r3, [r3, #4]
 8005db2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	68da      	ldr	r2, [r3, #12]
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	430a      	orrs	r2, r1
 8005dc0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	699b      	ldr	r3, [r3, #24]
 8005dc6:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	4aa9      	ldr	r2, [pc, #676]	; (8006074 <UART_SetConfig+0x304>)
 8005dce:	4293      	cmp	r3, r2
 8005dd0:	d004      	beq.n	8005ddc <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	6a1b      	ldr	r3, [r3, #32]
 8005dd6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005dd8:	4313      	orrs	r3, r2
 8005dda:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	689b      	ldr	r3, [r3, #8]
 8005de2:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005dec:	430a      	orrs	r2, r1
 8005dee:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	4aa0      	ldr	r2, [pc, #640]	; (8006078 <UART_SetConfig+0x308>)
 8005df6:	4293      	cmp	r3, r2
 8005df8:	d126      	bne.n	8005e48 <UART_SetConfig+0xd8>
 8005dfa:	4ba0      	ldr	r3, [pc, #640]	; (800607c <UART_SetConfig+0x30c>)
 8005dfc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e00:	f003 0303 	and.w	r3, r3, #3
 8005e04:	2b03      	cmp	r3, #3
 8005e06:	d81b      	bhi.n	8005e40 <UART_SetConfig+0xd0>
 8005e08:	a201      	add	r2, pc, #4	; (adr r2, 8005e10 <UART_SetConfig+0xa0>)
 8005e0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e0e:	bf00      	nop
 8005e10:	08005e21 	.word	0x08005e21
 8005e14:	08005e31 	.word	0x08005e31
 8005e18:	08005e29 	.word	0x08005e29
 8005e1c:	08005e39 	.word	0x08005e39
 8005e20:	2301      	movs	r3, #1
 8005e22:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005e26:	e080      	b.n	8005f2a <UART_SetConfig+0x1ba>
 8005e28:	2302      	movs	r3, #2
 8005e2a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005e2e:	e07c      	b.n	8005f2a <UART_SetConfig+0x1ba>
 8005e30:	2304      	movs	r3, #4
 8005e32:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005e36:	e078      	b.n	8005f2a <UART_SetConfig+0x1ba>
 8005e38:	2308      	movs	r3, #8
 8005e3a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005e3e:	e074      	b.n	8005f2a <UART_SetConfig+0x1ba>
 8005e40:	2310      	movs	r3, #16
 8005e42:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005e46:	e070      	b.n	8005f2a <UART_SetConfig+0x1ba>
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	4a8c      	ldr	r2, [pc, #560]	; (8006080 <UART_SetConfig+0x310>)
 8005e4e:	4293      	cmp	r3, r2
 8005e50:	d138      	bne.n	8005ec4 <UART_SetConfig+0x154>
 8005e52:	4b8a      	ldr	r3, [pc, #552]	; (800607c <UART_SetConfig+0x30c>)
 8005e54:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e58:	f003 030c 	and.w	r3, r3, #12
 8005e5c:	2b0c      	cmp	r3, #12
 8005e5e:	d82d      	bhi.n	8005ebc <UART_SetConfig+0x14c>
 8005e60:	a201      	add	r2, pc, #4	; (adr r2, 8005e68 <UART_SetConfig+0xf8>)
 8005e62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e66:	bf00      	nop
 8005e68:	08005e9d 	.word	0x08005e9d
 8005e6c:	08005ebd 	.word	0x08005ebd
 8005e70:	08005ebd 	.word	0x08005ebd
 8005e74:	08005ebd 	.word	0x08005ebd
 8005e78:	08005ead 	.word	0x08005ead
 8005e7c:	08005ebd 	.word	0x08005ebd
 8005e80:	08005ebd 	.word	0x08005ebd
 8005e84:	08005ebd 	.word	0x08005ebd
 8005e88:	08005ea5 	.word	0x08005ea5
 8005e8c:	08005ebd 	.word	0x08005ebd
 8005e90:	08005ebd 	.word	0x08005ebd
 8005e94:	08005ebd 	.word	0x08005ebd
 8005e98:	08005eb5 	.word	0x08005eb5
 8005e9c:	2300      	movs	r3, #0
 8005e9e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005ea2:	e042      	b.n	8005f2a <UART_SetConfig+0x1ba>
 8005ea4:	2302      	movs	r3, #2
 8005ea6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005eaa:	e03e      	b.n	8005f2a <UART_SetConfig+0x1ba>
 8005eac:	2304      	movs	r3, #4
 8005eae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005eb2:	e03a      	b.n	8005f2a <UART_SetConfig+0x1ba>
 8005eb4:	2308      	movs	r3, #8
 8005eb6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005eba:	e036      	b.n	8005f2a <UART_SetConfig+0x1ba>
 8005ebc:	2310      	movs	r3, #16
 8005ebe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005ec2:	e032      	b.n	8005f2a <UART_SetConfig+0x1ba>
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	4a6a      	ldr	r2, [pc, #424]	; (8006074 <UART_SetConfig+0x304>)
 8005eca:	4293      	cmp	r3, r2
 8005ecc:	d12a      	bne.n	8005f24 <UART_SetConfig+0x1b4>
 8005ece:	4b6b      	ldr	r3, [pc, #428]	; (800607c <UART_SetConfig+0x30c>)
 8005ed0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ed4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005ed8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005edc:	d01a      	beq.n	8005f14 <UART_SetConfig+0x1a4>
 8005ede:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005ee2:	d81b      	bhi.n	8005f1c <UART_SetConfig+0x1ac>
 8005ee4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005ee8:	d00c      	beq.n	8005f04 <UART_SetConfig+0x194>
 8005eea:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005eee:	d815      	bhi.n	8005f1c <UART_SetConfig+0x1ac>
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d003      	beq.n	8005efc <UART_SetConfig+0x18c>
 8005ef4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005ef8:	d008      	beq.n	8005f0c <UART_SetConfig+0x19c>
 8005efa:	e00f      	b.n	8005f1c <UART_SetConfig+0x1ac>
 8005efc:	2300      	movs	r3, #0
 8005efe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005f02:	e012      	b.n	8005f2a <UART_SetConfig+0x1ba>
 8005f04:	2302      	movs	r3, #2
 8005f06:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005f0a:	e00e      	b.n	8005f2a <UART_SetConfig+0x1ba>
 8005f0c:	2304      	movs	r3, #4
 8005f0e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005f12:	e00a      	b.n	8005f2a <UART_SetConfig+0x1ba>
 8005f14:	2308      	movs	r3, #8
 8005f16:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005f1a:	e006      	b.n	8005f2a <UART_SetConfig+0x1ba>
 8005f1c:	2310      	movs	r3, #16
 8005f1e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005f22:	e002      	b.n	8005f2a <UART_SetConfig+0x1ba>
 8005f24:	2310      	movs	r3, #16
 8005f26:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	4a51      	ldr	r2, [pc, #324]	; (8006074 <UART_SetConfig+0x304>)
 8005f30:	4293      	cmp	r3, r2
 8005f32:	d17a      	bne.n	800602a <UART_SetConfig+0x2ba>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005f34:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005f38:	2b08      	cmp	r3, #8
 8005f3a:	d824      	bhi.n	8005f86 <UART_SetConfig+0x216>
 8005f3c:	a201      	add	r2, pc, #4	; (adr r2, 8005f44 <UART_SetConfig+0x1d4>)
 8005f3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f42:	bf00      	nop
 8005f44:	08005f69 	.word	0x08005f69
 8005f48:	08005f87 	.word	0x08005f87
 8005f4c:	08005f71 	.word	0x08005f71
 8005f50:	08005f87 	.word	0x08005f87
 8005f54:	08005f77 	.word	0x08005f77
 8005f58:	08005f87 	.word	0x08005f87
 8005f5c:	08005f87 	.word	0x08005f87
 8005f60:	08005f87 	.word	0x08005f87
 8005f64:	08005f7f 	.word	0x08005f7f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005f68:	f7fe f928 	bl	80041bc <HAL_RCC_GetPCLK1Freq>
 8005f6c:	61f8      	str	r0, [r7, #28]
        break;
 8005f6e:	e010      	b.n	8005f92 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005f70:	4b44      	ldr	r3, [pc, #272]	; (8006084 <UART_SetConfig+0x314>)
 8005f72:	61fb      	str	r3, [r7, #28]
        break;
 8005f74:	e00d      	b.n	8005f92 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005f76:	f7fe f889 	bl	800408c <HAL_RCC_GetSysClockFreq>
 8005f7a:	61f8      	str	r0, [r7, #28]
        break;
 8005f7c:	e009      	b.n	8005f92 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005f7e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005f82:	61fb      	str	r3, [r7, #28]
        break;
 8005f84:	e005      	b.n	8005f92 <UART_SetConfig+0x222>
      default:
        pclk = 0U;
 8005f86:	2300      	movs	r3, #0
 8005f88:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005f8a:	2301      	movs	r3, #1
 8005f8c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8005f90:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005f92:	69fb      	ldr	r3, [r7, #28]
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	f000 8107 	beq.w	80061a8 <UART_SetConfig+0x438>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	685a      	ldr	r2, [r3, #4]
 8005f9e:	4613      	mov	r3, r2
 8005fa0:	005b      	lsls	r3, r3, #1
 8005fa2:	4413      	add	r3, r2
 8005fa4:	69fa      	ldr	r2, [r7, #28]
 8005fa6:	429a      	cmp	r2, r3
 8005fa8:	d305      	bcc.n	8005fb6 <UART_SetConfig+0x246>
          (pclk > (4096U * huart->Init.BaudRate)))
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	685b      	ldr	r3, [r3, #4]
 8005fae:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005fb0:	69fa      	ldr	r2, [r7, #28]
 8005fb2:	429a      	cmp	r2, r3
 8005fb4:	d903      	bls.n	8005fbe <UART_SetConfig+0x24e>
      {
        ret = HAL_ERROR;
 8005fb6:	2301      	movs	r3, #1
 8005fb8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8005fbc:	e0f4      	b.n	80061a8 <UART_SetConfig+0x438>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8005fbe:	69fb      	ldr	r3, [r7, #28]
 8005fc0:	2200      	movs	r2, #0
 8005fc2:	461c      	mov	r4, r3
 8005fc4:	4615      	mov	r5, r2
 8005fc6:	f04f 0200 	mov.w	r2, #0
 8005fca:	f04f 0300 	mov.w	r3, #0
 8005fce:	022b      	lsls	r3, r5, #8
 8005fd0:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8005fd4:	0222      	lsls	r2, r4, #8
 8005fd6:	68f9      	ldr	r1, [r7, #12]
 8005fd8:	6849      	ldr	r1, [r1, #4]
 8005fda:	0849      	lsrs	r1, r1, #1
 8005fdc:	2000      	movs	r0, #0
 8005fde:	4688      	mov	r8, r1
 8005fe0:	4681      	mov	r9, r0
 8005fe2:	eb12 0a08 	adds.w	sl, r2, r8
 8005fe6:	eb43 0b09 	adc.w	fp, r3, r9
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	685b      	ldr	r3, [r3, #4]
 8005fee:	2200      	movs	r2, #0
 8005ff0:	603b      	str	r3, [r7, #0]
 8005ff2:	607a      	str	r2, [r7, #4]
 8005ff4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005ff8:	4650      	mov	r0, sl
 8005ffa:	4659      	mov	r1, fp
 8005ffc:	f7fa fe44 	bl	8000c88 <__aeabi_uldivmod>
 8006000:	4602      	mov	r2, r0
 8006002:	460b      	mov	r3, r1
 8006004:	4613      	mov	r3, r2
 8006006:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006008:	69bb      	ldr	r3, [r7, #24]
 800600a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800600e:	d308      	bcc.n	8006022 <UART_SetConfig+0x2b2>
 8006010:	69bb      	ldr	r3, [r7, #24]
 8006012:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006016:	d204      	bcs.n	8006022 <UART_SetConfig+0x2b2>
        {
          huart->Instance->BRR = usartdiv;
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	69ba      	ldr	r2, [r7, #24]
 800601e:	60da      	str	r2, [r3, #12]
 8006020:	e0c2      	b.n	80061a8 <UART_SetConfig+0x438>
        }
        else
        {
          ret = HAL_ERROR;
 8006022:	2301      	movs	r3, #1
 8006024:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8006028:	e0be      	b.n	80061a8 <UART_SetConfig+0x438>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	69db      	ldr	r3, [r3, #28]
 800602e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006032:	d16a      	bne.n	800610a <UART_SetConfig+0x39a>
  {
    switch (clocksource)
 8006034:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006038:	2b08      	cmp	r3, #8
 800603a:	d834      	bhi.n	80060a6 <UART_SetConfig+0x336>
 800603c:	a201      	add	r2, pc, #4	; (adr r2, 8006044 <UART_SetConfig+0x2d4>)
 800603e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006042:	bf00      	nop
 8006044:	08006069 	.word	0x08006069
 8006048:	08006089 	.word	0x08006089
 800604c:	08006091 	.word	0x08006091
 8006050:	080060a7 	.word	0x080060a7
 8006054:	08006097 	.word	0x08006097
 8006058:	080060a7 	.word	0x080060a7
 800605c:	080060a7 	.word	0x080060a7
 8006060:	080060a7 	.word	0x080060a7
 8006064:	0800609f 	.word	0x0800609f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006068:	f7fe f8a8 	bl	80041bc <HAL_RCC_GetPCLK1Freq>
 800606c:	61f8      	str	r0, [r7, #28]
        break;
 800606e:	e020      	b.n	80060b2 <UART_SetConfig+0x342>
 8006070:	efff69f3 	.word	0xefff69f3
 8006074:	40008000 	.word	0x40008000
 8006078:	40013800 	.word	0x40013800
 800607c:	40021000 	.word	0x40021000
 8006080:	40004400 	.word	0x40004400
 8006084:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006088:	f7fe f8ae 	bl	80041e8 <HAL_RCC_GetPCLK2Freq>
 800608c:	61f8      	str	r0, [r7, #28]
        break;
 800608e:	e010      	b.n	80060b2 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006090:	4b4c      	ldr	r3, [pc, #304]	; (80061c4 <UART_SetConfig+0x454>)
 8006092:	61fb      	str	r3, [r7, #28]
        break;
 8006094:	e00d      	b.n	80060b2 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006096:	f7fd fff9 	bl	800408c <HAL_RCC_GetSysClockFreq>
 800609a:	61f8      	str	r0, [r7, #28]
        break;
 800609c:	e009      	b.n	80060b2 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800609e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80060a2:	61fb      	str	r3, [r7, #28]
        break;
 80060a4:	e005      	b.n	80060b2 <UART_SetConfig+0x342>
      default:
        pclk = 0U;
 80060a6:	2300      	movs	r3, #0
 80060a8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80060aa:	2301      	movs	r3, #1
 80060ac:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80060b0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80060b2:	69fb      	ldr	r3, [r7, #28]
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	d077      	beq.n	80061a8 <UART_SetConfig+0x438>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80060b8:	69fb      	ldr	r3, [r7, #28]
 80060ba:	005a      	lsls	r2, r3, #1
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	685b      	ldr	r3, [r3, #4]
 80060c0:	085b      	lsrs	r3, r3, #1
 80060c2:	441a      	add	r2, r3
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	685b      	ldr	r3, [r3, #4]
 80060c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80060cc:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80060ce:	69bb      	ldr	r3, [r7, #24]
 80060d0:	2b0f      	cmp	r3, #15
 80060d2:	d916      	bls.n	8006102 <UART_SetConfig+0x392>
 80060d4:	69bb      	ldr	r3, [r7, #24]
 80060d6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80060da:	d212      	bcs.n	8006102 <UART_SetConfig+0x392>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80060dc:	69bb      	ldr	r3, [r7, #24]
 80060de:	b29b      	uxth	r3, r3
 80060e0:	f023 030f 	bic.w	r3, r3, #15
 80060e4:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80060e6:	69bb      	ldr	r3, [r7, #24]
 80060e8:	085b      	lsrs	r3, r3, #1
 80060ea:	b29b      	uxth	r3, r3
 80060ec:	f003 0307 	and.w	r3, r3, #7
 80060f0:	b29a      	uxth	r2, r3
 80060f2:	8afb      	ldrh	r3, [r7, #22]
 80060f4:	4313      	orrs	r3, r2
 80060f6:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	8afa      	ldrh	r2, [r7, #22]
 80060fe:	60da      	str	r2, [r3, #12]
 8006100:	e052      	b.n	80061a8 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 8006102:	2301      	movs	r3, #1
 8006104:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8006108:	e04e      	b.n	80061a8 <UART_SetConfig+0x438>
      }
    }
  }
  else
  {
    switch (clocksource)
 800610a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800610e:	2b08      	cmp	r3, #8
 8006110:	d827      	bhi.n	8006162 <UART_SetConfig+0x3f2>
 8006112:	a201      	add	r2, pc, #4	; (adr r2, 8006118 <UART_SetConfig+0x3a8>)
 8006114:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006118:	0800613d 	.word	0x0800613d
 800611c:	08006145 	.word	0x08006145
 8006120:	0800614d 	.word	0x0800614d
 8006124:	08006163 	.word	0x08006163
 8006128:	08006153 	.word	0x08006153
 800612c:	08006163 	.word	0x08006163
 8006130:	08006163 	.word	0x08006163
 8006134:	08006163 	.word	0x08006163
 8006138:	0800615b 	.word	0x0800615b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800613c:	f7fe f83e 	bl	80041bc <HAL_RCC_GetPCLK1Freq>
 8006140:	61f8      	str	r0, [r7, #28]
        break;
 8006142:	e014      	b.n	800616e <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006144:	f7fe f850 	bl	80041e8 <HAL_RCC_GetPCLK2Freq>
 8006148:	61f8      	str	r0, [r7, #28]
        break;
 800614a:	e010      	b.n	800616e <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800614c:	4b1d      	ldr	r3, [pc, #116]	; (80061c4 <UART_SetConfig+0x454>)
 800614e:	61fb      	str	r3, [r7, #28]
        break;
 8006150:	e00d      	b.n	800616e <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006152:	f7fd ff9b 	bl	800408c <HAL_RCC_GetSysClockFreq>
 8006156:	61f8      	str	r0, [r7, #28]
        break;
 8006158:	e009      	b.n	800616e <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800615a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800615e:	61fb      	str	r3, [r7, #28]
        break;
 8006160:	e005      	b.n	800616e <UART_SetConfig+0x3fe>
      default:
        pclk = 0U;
 8006162:	2300      	movs	r3, #0
 8006164:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006166:	2301      	movs	r3, #1
 8006168:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800616c:	bf00      	nop
    }

    if (pclk != 0U)
 800616e:	69fb      	ldr	r3, [r7, #28]
 8006170:	2b00      	cmp	r3, #0
 8006172:	d019      	beq.n	80061a8 <UART_SetConfig+0x438>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	685b      	ldr	r3, [r3, #4]
 8006178:	085a      	lsrs	r2, r3, #1
 800617a:	69fb      	ldr	r3, [r7, #28]
 800617c:	441a      	add	r2, r3
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	685b      	ldr	r3, [r3, #4]
 8006182:	fbb2 f3f3 	udiv	r3, r2, r3
 8006186:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006188:	69bb      	ldr	r3, [r7, #24]
 800618a:	2b0f      	cmp	r3, #15
 800618c:	d909      	bls.n	80061a2 <UART_SetConfig+0x432>
 800618e:	69bb      	ldr	r3, [r7, #24]
 8006190:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006194:	d205      	bcs.n	80061a2 <UART_SetConfig+0x432>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006196:	69bb      	ldr	r3, [r7, #24]
 8006198:	b29a      	uxth	r2, r3
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	60da      	str	r2, [r3, #12]
 80061a0:	e002      	b.n	80061a8 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 80061a2:	2301      	movs	r3, #1
 80061a4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	2200      	movs	r2, #0
 80061ac:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	2200      	movs	r2, #0
 80061b2:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80061b4:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 80061b8:	4618      	mov	r0, r3
 80061ba:	3728      	adds	r7, #40	; 0x28
 80061bc:	46bd      	mov	sp, r7
 80061be:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80061c2:	bf00      	nop
 80061c4:	00f42400 	.word	0x00f42400

080061c8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80061c8:	b480      	push	{r7}
 80061ca:	b083      	sub	sp, #12
 80061cc:	af00      	add	r7, sp, #0
 80061ce:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061d4:	f003 0301 	and.w	r3, r3, #1
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d00a      	beq.n	80061f2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	685b      	ldr	r3, [r3, #4]
 80061e2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	430a      	orrs	r2, r1
 80061f0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061f6:	f003 0302 	and.w	r3, r3, #2
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	d00a      	beq.n	8006214 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	685b      	ldr	r3, [r3, #4]
 8006204:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	430a      	orrs	r2, r1
 8006212:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006218:	f003 0304 	and.w	r3, r3, #4
 800621c:	2b00      	cmp	r3, #0
 800621e:	d00a      	beq.n	8006236 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	685b      	ldr	r3, [r3, #4]
 8006226:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	430a      	orrs	r2, r1
 8006234:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800623a:	f003 0308 	and.w	r3, r3, #8
 800623e:	2b00      	cmp	r3, #0
 8006240:	d00a      	beq.n	8006258 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	685b      	ldr	r3, [r3, #4]
 8006248:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	430a      	orrs	r2, r1
 8006256:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800625c:	f003 0310 	and.w	r3, r3, #16
 8006260:	2b00      	cmp	r3, #0
 8006262:	d00a      	beq.n	800627a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	689b      	ldr	r3, [r3, #8]
 800626a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	430a      	orrs	r2, r1
 8006278:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800627e:	f003 0320 	and.w	r3, r3, #32
 8006282:	2b00      	cmp	r3, #0
 8006284:	d00a      	beq.n	800629c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	689b      	ldr	r3, [r3, #8]
 800628c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	430a      	orrs	r2, r1
 800629a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	d01a      	beq.n	80062de <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	685b      	ldr	r3, [r3, #4]
 80062ae:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	430a      	orrs	r2, r1
 80062bc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062c2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80062c6:	d10a      	bne.n	80062de <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	685b      	ldr	r3, [r3, #4]
 80062ce:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	430a      	orrs	r2, r1
 80062dc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d00a      	beq.n	8006300 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	685b      	ldr	r3, [r3, #4]
 80062f0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	430a      	orrs	r2, r1
 80062fe:	605a      	str	r2, [r3, #4]
  }
}
 8006300:	bf00      	nop
 8006302:	370c      	adds	r7, #12
 8006304:	46bd      	mov	sp, r7
 8006306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800630a:	4770      	bx	lr

0800630c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800630c:	b580      	push	{r7, lr}
 800630e:	b086      	sub	sp, #24
 8006310:	af02      	add	r7, sp, #8
 8006312:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	2200      	movs	r2, #0
 8006318:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800631c:	f7fc fe7e 	bl	800301c <HAL_GetTick>
 8006320:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	f003 0308 	and.w	r3, r3, #8
 800632c:	2b08      	cmp	r3, #8
 800632e:	d10e      	bne.n	800634e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006330:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006334:	9300      	str	r3, [sp, #0]
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	2200      	movs	r2, #0
 800633a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800633e:	6878      	ldr	r0, [r7, #4]
 8006340:	f000 f82d 	bl	800639e <UART_WaitOnFlagUntilTimeout>
 8006344:	4603      	mov	r3, r0
 8006346:	2b00      	cmp	r3, #0
 8006348:	d001      	beq.n	800634e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800634a:	2303      	movs	r3, #3
 800634c:	e023      	b.n	8006396 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	f003 0304 	and.w	r3, r3, #4
 8006358:	2b04      	cmp	r3, #4
 800635a:	d10e      	bne.n	800637a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800635c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006360:	9300      	str	r3, [sp, #0]
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	2200      	movs	r2, #0
 8006366:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800636a:	6878      	ldr	r0, [r7, #4]
 800636c:	f000 f817 	bl	800639e <UART_WaitOnFlagUntilTimeout>
 8006370:	4603      	mov	r3, r0
 8006372:	2b00      	cmp	r3, #0
 8006374:	d001      	beq.n	800637a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006376:	2303      	movs	r3, #3
 8006378:	e00d      	b.n	8006396 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	2220      	movs	r2, #32
 800637e:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	2220      	movs	r2, #32
 8006384:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	2200      	movs	r2, #0
 800638a:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	2200      	movs	r2, #0
 8006390:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8006394:	2300      	movs	r3, #0
}
 8006396:	4618      	mov	r0, r3
 8006398:	3710      	adds	r7, #16
 800639a:	46bd      	mov	sp, r7
 800639c:	bd80      	pop	{r7, pc}

0800639e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800639e:	b580      	push	{r7, lr}
 80063a0:	b09c      	sub	sp, #112	; 0x70
 80063a2:	af00      	add	r7, sp, #0
 80063a4:	60f8      	str	r0, [r7, #12]
 80063a6:	60b9      	str	r1, [r7, #8]
 80063a8:	603b      	str	r3, [r7, #0]
 80063aa:	4613      	mov	r3, r2
 80063ac:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80063ae:	e0a5      	b.n	80064fc <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80063b0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80063b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80063b6:	f000 80a1 	beq.w	80064fc <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80063ba:	f7fc fe2f 	bl	800301c <HAL_GetTick>
 80063be:	4602      	mov	r2, r0
 80063c0:	683b      	ldr	r3, [r7, #0]
 80063c2:	1ad3      	subs	r3, r2, r3
 80063c4:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80063c6:	429a      	cmp	r2, r3
 80063c8:	d302      	bcc.n	80063d0 <UART_WaitOnFlagUntilTimeout+0x32>
 80063ca:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	d13e      	bne.n	800644e <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063d6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80063d8:	e853 3f00 	ldrex	r3, [r3]
 80063dc:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80063de:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80063e0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80063e4:	667b      	str	r3, [r7, #100]	; 0x64
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	461a      	mov	r2, r3
 80063ec:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80063ee:	65fb      	str	r3, [r7, #92]	; 0x5c
 80063f0:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063f2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80063f4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80063f6:	e841 2300 	strex	r3, r2, [r1]
 80063fa:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80063fc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80063fe:	2b00      	cmp	r3, #0
 8006400:	d1e6      	bne.n	80063d0 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	3308      	adds	r3, #8
 8006408:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800640a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800640c:	e853 3f00 	ldrex	r3, [r3]
 8006410:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006412:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006414:	f023 0301 	bic.w	r3, r3, #1
 8006418:	663b      	str	r3, [r7, #96]	; 0x60
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	3308      	adds	r3, #8
 8006420:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006422:	64ba      	str	r2, [r7, #72]	; 0x48
 8006424:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006426:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006428:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800642a:	e841 2300 	strex	r3, r2, [r1]
 800642e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8006430:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006432:	2b00      	cmp	r3, #0
 8006434:	d1e5      	bne.n	8006402 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	2220      	movs	r2, #32
 800643a:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	2220      	movs	r2, #32
 8006440:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	2200      	movs	r2, #0
 8006446:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800644a:	2303      	movs	r3, #3
 800644c:	e067      	b.n	800651e <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	f003 0304 	and.w	r3, r3, #4
 8006458:	2b00      	cmp	r3, #0
 800645a:	d04f      	beq.n	80064fc <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	69db      	ldr	r3, [r3, #28]
 8006462:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006466:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800646a:	d147      	bne.n	80064fc <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006474:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800647c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800647e:	e853 3f00 	ldrex	r3, [r3]
 8006482:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006484:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006486:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800648a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	461a      	mov	r2, r3
 8006492:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006494:	637b      	str	r3, [r7, #52]	; 0x34
 8006496:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006498:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800649a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800649c:	e841 2300 	strex	r3, r2, [r1]
 80064a0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80064a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	d1e6      	bne.n	8006476 <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	3308      	adds	r3, #8
 80064ae:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064b0:	697b      	ldr	r3, [r7, #20]
 80064b2:	e853 3f00 	ldrex	r3, [r3]
 80064b6:	613b      	str	r3, [r7, #16]
   return(result);
 80064b8:	693b      	ldr	r3, [r7, #16]
 80064ba:	f023 0301 	bic.w	r3, r3, #1
 80064be:	66bb      	str	r3, [r7, #104]	; 0x68
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	3308      	adds	r3, #8
 80064c6:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80064c8:	623a      	str	r2, [r7, #32]
 80064ca:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064cc:	69f9      	ldr	r1, [r7, #28]
 80064ce:	6a3a      	ldr	r2, [r7, #32]
 80064d0:	e841 2300 	strex	r3, r2, [r1]
 80064d4:	61bb      	str	r3, [r7, #24]
   return(result);
 80064d6:	69bb      	ldr	r3, [r7, #24]
 80064d8:	2b00      	cmp	r3, #0
 80064da:	d1e5      	bne.n	80064a8 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	2220      	movs	r2, #32
 80064e0:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	2220      	movs	r2, #32
 80064e6:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	2220      	movs	r2, #32
 80064ec:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	2200      	movs	r2, #0
 80064f4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80064f8:	2303      	movs	r3, #3
 80064fa:	e010      	b.n	800651e <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	69da      	ldr	r2, [r3, #28]
 8006502:	68bb      	ldr	r3, [r7, #8]
 8006504:	4013      	ands	r3, r2
 8006506:	68ba      	ldr	r2, [r7, #8]
 8006508:	429a      	cmp	r2, r3
 800650a:	bf0c      	ite	eq
 800650c:	2301      	moveq	r3, #1
 800650e:	2300      	movne	r3, #0
 8006510:	b2db      	uxtb	r3, r3
 8006512:	461a      	mov	r2, r3
 8006514:	79fb      	ldrb	r3, [r7, #7]
 8006516:	429a      	cmp	r2, r3
 8006518:	f43f af4a 	beq.w	80063b0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800651c:	2300      	movs	r3, #0
}
 800651e:	4618      	mov	r0, r3
 8006520:	3770      	adds	r7, #112	; 0x70
 8006522:	46bd      	mov	sp, r7
 8006524:	bd80      	pop	{r7, pc}

08006526 <atof>:
 8006526:	2100      	movs	r1, #0
 8006528:	f001 bede 	b.w	80082e8 <strtod>

0800652c <atoi>:
 800652c:	220a      	movs	r2, #10
 800652e:	2100      	movs	r1, #0
 8006530:	f001 bfc6 	b.w	80084c0 <strtol>

08006534 <__errno>:
 8006534:	4b01      	ldr	r3, [pc, #4]	; (800653c <__errno+0x8>)
 8006536:	6818      	ldr	r0, [r3, #0]
 8006538:	4770      	bx	lr
 800653a:	bf00      	nop
 800653c:	2000000c 	.word	0x2000000c

08006540 <__libc_init_array>:
 8006540:	b570      	push	{r4, r5, r6, lr}
 8006542:	4d0d      	ldr	r5, [pc, #52]	; (8006578 <__libc_init_array+0x38>)
 8006544:	4c0d      	ldr	r4, [pc, #52]	; (800657c <__libc_init_array+0x3c>)
 8006546:	1b64      	subs	r4, r4, r5
 8006548:	10a4      	asrs	r4, r4, #2
 800654a:	2600      	movs	r6, #0
 800654c:	42a6      	cmp	r6, r4
 800654e:	d109      	bne.n	8006564 <__libc_init_array+0x24>
 8006550:	4d0b      	ldr	r5, [pc, #44]	; (8006580 <__libc_init_array+0x40>)
 8006552:	4c0c      	ldr	r4, [pc, #48]	; (8006584 <__libc_init_array+0x44>)
 8006554:	f005 fb46 	bl	800bbe4 <_init>
 8006558:	1b64      	subs	r4, r4, r5
 800655a:	10a4      	asrs	r4, r4, #2
 800655c:	2600      	movs	r6, #0
 800655e:	42a6      	cmp	r6, r4
 8006560:	d105      	bne.n	800656e <__libc_init_array+0x2e>
 8006562:	bd70      	pop	{r4, r5, r6, pc}
 8006564:	f855 3b04 	ldr.w	r3, [r5], #4
 8006568:	4798      	blx	r3
 800656a:	3601      	adds	r6, #1
 800656c:	e7ee      	b.n	800654c <__libc_init_array+0xc>
 800656e:	f855 3b04 	ldr.w	r3, [r5], #4
 8006572:	4798      	blx	r3
 8006574:	3601      	adds	r6, #1
 8006576:	e7f2      	b.n	800655e <__libc_init_array+0x1e>
 8006578:	0800d180 	.word	0x0800d180
 800657c:	0800d180 	.word	0x0800d180
 8006580:	0800d180 	.word	0x0800d180
 8006584:	0800d184 	.word	0x0800d184

08006588 <malloc>:
 8006588:	4b02      	ldr	r3, [pc, #8]	; (8006594 <malloc+0xc>)
 800658a:	4601      	mov	r1, r0
 800658c:	6818      	ldr	r0, [r3, #0]
 800658e:	f000 b885 	b.w	800669c <_malloc_r>
 8006592:	bf00      	nop
 8006594:	2000000c 	.word	0x2000000c

08006598 <memcpy>:
 8006598:	440a      	add	r2, r1
 800659a:	4291      	cmp	r1, r2
 800659c:	f100 33ff 	add.w	r3, r0, #4294967295
 80065a0:	d100      	bne.n	80065a4 <memcpy+0xc>
 80065a2:	4770      	bx	lr
 80065a4:	b510      	push	{r4, lr}
 80065a6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80065aa:	f803 4f01 	strb.w	r4, [r3, #1]!
 80065ae:	4291      	cmp	r1, r2
 80065b0:	d1f9      	bne.n	80065a6 <memcpy+0xe>
 80065b2:	bd10      	pop	{r4, pc}

080065b4 <memset>:
 80065b4:	4402      	add	r2, r0
 80065b6:	4603      	mov	r3, r0
 80065b8:	4293      	cmp	r3, r2
 80065ba:	d100      	bne.n	80065be <memset+0xa>
 80065bc:	4770      	bx	lr
 80065be:	f803 1b01 	strb.w	r1, [r3], #1
 80065c2:	e7f9      	b.n	80065b8 <memset+0x4>

080065c4 <_free_r>:
 80065c4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80065c6:	2900      	cmp	r1, #0
 80065c8:	d044      	beq.n	8006654 <_free_r+0x90>
 80065ca:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80065ce:	9001      	str	r0, [sp, #4]
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	f1a1 0404 	sub.w	r4, r1, #4
 80065d6:	bfb8      	it	lt
 80065d8:	18e4      	addlt	r4, r4, r3
 80065da:	f003 fd39 	bl	800a050 <__malloc_lock>
 80065de:	4a1e      	ldr	r2, [pc, #120]	; (8006658 <_free_r+0x94>)
 80065e0:	9801      	ldr	r0, [sp, #4]
 80065e2:	6813      	ldr	r3, [r2, #0]
 80065e4:	b933      	cbnz	r3, 80065f4 <_free_r+0x30>
 80065e6:	6063      	str	r3, [r4, #4]
 80065e8:	6014      	str	r4, [r2, #0]
 80065ea:	b003      	add	sp, #12
 80065ec:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80065f0:	f003 bd34 	b.w	800a05c <__malloc_unlock>
 80065f4:	42a3      	cmp	r3, r4
 80065f6:	d908      	bls.n	800660a <_free_r+0x46>
 80065f8:	6825      	ldr	r5, [r4, #0]
 80065fa:	1961      	adds	r1, r4, r5
 80065fc:	428b      	cmp	r3, r1
 80065fe:	bf01      	itttt	eq
 8006600:	6819      	ldreq	r1, [r3, #0]
 8006602:	685b      	ldreq	r3, [r3, #4]
 8006604:	1949      	addeq	r1, r1, r5
 8006606:	6021      	streq	r1, [r4, #0]
 8006608:	e7ed      	b.n	80065e6 <_free_r+0x22>
 800660a:	461a      	mov	r2, r3
 800660c:	685b      	ldr	r3, [r3, #4]
 800660e:	b10b      	cbz	r3, 8006614 <_free_r+0x50>
 8006610:	42a3      	cmp	r3, r4
 8006612:	d9fa      	bls.n	800660a <_free_r+0x46>
 8006614:	6811      	ldr	r1, [r2, #0]
 8006616:	1855      	adds	r5, r2, r1
 8006618:	42a5      	cmp	r5, r4
 800661a:	d10b      	bne.n	8006634 <_free_r+0x70>
 800661c:	6824      	ldr	r4, [r4, #0]
 800661e:	4421      	add	r1, r4
 8006620:	1854      	adds	r4, r2, r1
 8006622:	42a3      	cmp	r3, r4
 8006624:	6011      	str	r1, [r2, #0]
 8006626:	d1e0      	bne.n	80065ea <_free_r+0x26>
 8006628:	681c      	ldr	r4, [r3, #0]
 800662a:	685b      	ldr	r3, [r3, #4]
 800662c:	6053      	str	r3, [r2, #4]
 800662e:	4421      	add	r1, r4
 8006630:	6011      	str	r1, [r2, #0]
 8006632:	e7da      	b.n	80065ea <_free_r+0x26>
 8006634:	d902      	bls.n	800663c <_free_r+0x78>
 8006636:	230c      	movs	r3, #12
 8006638:	6003      	str	r3, [r0, #0]
 800663a:	e7d6      	b.n	80065ea <_free_r+0x26>
 800663c:	6825      	ldr	r5, [r4, #0]
 800663e:	1961      	adds	r1, r4, r5
 8006640:	428b      	cmp	r3, r1
 8006642:	bf04      	itt	eq
 8006644:	6819      	ldreq	r1, [r3, #0]
 8006646:	685b      	ldreq	r3, [r3, #4]
 8006648:	6063      	str	r3, [r4, #4]
 800664a:	bf04      	itt	eq
 800664c:	1949      	addeq	r1, r1, r5
 800664e:	6021      	streq	r1, [r4, #0]
 8006650:	6054      	str	r4, [r2, #4]
 8006652:	e7ca      	b.n	80065ea <_free_r+0x26>
 8006654:	b003      	add	sp, #12
 8006656:	bd30      	pop	{r4, r5, pc}
 8006658:	20000338 	.word	0x20000338

0800665c <sbrk_aligned>:
 800665c:	b570      	push	{r4, r5, r6, lr}
 800665e:	4e0e      	ldr	r6, [pc, #56]	; (8006698 <sbrk_aligned+0x3c>)
 8006660:	460c      	mov	r4, r1
 8006662:	6831      	ldr	r1, [r6, #0]
 8006664:	4605      	mov	r5, r0
 8006666:	b911      	cbnz	r1, 800666e <sbrk_aligned+0x12>
 8006668:	f000 ff94 	bl	8007594 <_sbrk_r>
 800666c:	6030      	str	r0, [r6, #0]
 800666e:	4621      	mov	r1, r4
 8006670:	4628      	mov	r0, r5
 8006672:	f000 ff8f 	bl	8007594 <_sbrk_r>
 8006676:	1c43      	adds	r3, r0, #1
 8006678:	d00a      	beq.n	8006690 <sbrk_aligned+0x34>
 800667a:	1cc4      	adds	r4, r0, #3
 800667c:	f024 0403 	bic.w	r4, r4, #3
 8006680:	42a0      	cmp	r0, r4
 8006682:	d007      	beq.n	8006694 <sbrk_aligned+0x38>
 8006684:	1a21      	subs	r1, r4, r0
 8006686:	4628      	mov	r0, r5
 8006688:	f000 ff84 	bl	8007594 <_sbrk_r>
 800668c:	3001      	adds	r0, #1
 800668e:	d101      	bne.n	8006694 <sbrk_aligned+0x38>
 8006690:	f04f 34ff 	mov.w	r4, #4294967295
 8006694:	4620      	mov	r0, r4
 8006696:	bd70      	pop	{r4, r5, r6, pc}
 8006698:	2000033c 	.word	0x2000033c

0800669c <_malloc_r>:
 800669c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80066a0:	1ccd      	adds	r5, r1, #3
 80066a2:	f025 0503 	bic.w	r5, r5, #3
 80066a6:	3508      	adds	r5, #8
 80066a8:	2d0c      	cmp	r5, #12
 80066aa:	bf38      	it	cc
 80066ac:	250c      	movcc	r5, #12
 80066ae:	2d00      	cmp	r5, #0
 80066b0:	4607      	mov	r7, r0
 80066b2:	db01      	blt.n	80066b8 <_malloc_r+0x1c>
 80066b4:	42a9      	cmp	r1, r5
 80066b6:	d905      	bls.n	80066c4 <_malloc_r+0x28>
 80066b8:	230c      	movs	r3, #12
 80066ba:	603b      	str	r3, [r7, #0]
 80066bc:	2600      	movs	r6, #0
 80066be:	4630      	mov	r0, r6
 80066c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80066c4:	4e2e      	ldr	r6, [pc, #184]	; (8006780 <_malloc_r+0xe4>)
 80066c6:	f003 fcc3 	bl	800a050 <__malloc_lock>
 80066ca:	6833      	ldr	r3, [r6, #0]
 80066cc:	461c      	mov	r4, r3
 80066ce:	bb34      	cbnz	r4, 800671e <_malloc_r+0x82>
 80066d0:	4629      	mov	r1, r5
 80066d2:	4638      	mov	r0, r7
 80066d4:	f7ff ffc2 	bl	800665c <sbrk_aligned>
 80066d8:	1c43      	adds	r3, r0, #1
 80066da:	4604      	mov	r4, r0
 80066dc:	d14d      	bne.n	800677a <_malloc_r+0xde>
 80066de:	6834      	ldr	r4, [r6, #0]
 80066e0:	4626      	mov	r6, r4
 80066e2:	2e00      	cmp	r6, #0
 80066e4:	d140      	bne.n	8006768 <_malloc_r+0xcc>
 80066e6:	6823      	ldr	r3, [r4, #0]
 80066e8:	4631      	mov	r1, r6
 80066ea:	4638      	mov	r0, r7
 80066ec:	eb04 0803 	add.w	r8, r4, r3
 80066f0:	f000 ff50 	bl	8007594 <_sbrk_r>
 80066f4:	4580      	cmp	r8, r0
 80066f6:	d13a      	bne.n	800676e <_malloc_r+0xd2>
 80066f8:	6821      	ldr	r1, [r4, #0]
 80066fa:	3503      	adds	r5, #3
 80066fc:	1a6d      	subs	r5, r5, r1
 80066fe:	f025 0503 	bic.w	r5, r5, #3
 8006702:	3508      	adds	r5, #8
 8006704:	2d0c      	cmp	r5, #12
 8006706:	bf38      	it	cc
 8006708:	250c      	movcc	r5, #12
 800670a:	4629      	mov	r1, r5
 800670c:	4638      	mov	r0, r7
 800670e:	f7ff ffa5 	bl	800665c <sbrk_aligned>
 8006712:	3001      	adds	r0, #1
 8006714:	d02b      	beq.n	800676e <_malloc_r+0xd2>
 8006716:	6823      	ldr	r3, [r4, #0]
 8006718:	442b      	add	r3, r5
 800671a:	6023      	str	r3, [r4, #0]
 800671c:	e00e      	b.n	800673c <_malloc_r+0xa0>
 800671e:	6822      	ldr	r2, [r4, #0]
 8006720:	1b52      	subs	r2, r2, r5
 8006722:	d41e      	bmi.n	8006762 <_malloc_r+0xc6>
 8006724:	2a0b      	cmp	r2, #11
 8006726:	d916      	bls.n	8006756 <_malloc_r+0xba>
 8006728:	1961      	adds	r1, r4, r5
 800672a:	42a3      	cmp	r3, r4
 800672c:	6025      	str	r5, [r4, #0]
 800672e:	bf18      	it	ne
 8006730:	6059      	strne	r1, [r3, #4]
 8006732:	6863      	ldr	r3, [r4, #4]
 8006734:	bf08      	it	eq
 8006736:	6031      	streq	r1, [r6, #0]
 8006738:	5162      	str	r2, [r4, r5]
 800673a:	604b      	str	r3, [r1, #4]
 800673c:	4638      	mov	r0, r7
 800673e:	f104 060b 	add.w	r6, r4, #11
 8006742:	f003 fc8b 	bl	800a05c <__malloc_unlock>
 8006746:	f026 0607 	bic.w	r6, r6, #7
 800674a:	1d23      	adds	r3, r4, #4
 800674c:	1af2      	subs	r2, r6, r3
 800674e:	d0b6      	beq.n	80066be <_malloc_r+0x22>
 8006750:	1b9b      	subs	r3, r3, r6
 8006752:	50a3      	str	r3, [r4, r2]
 8006754:	e7b3      	b.n	80066be <_malloc_r+0x22>
 8006756:	6862      	ldr	r2, [r4, #4]
 8006758:	42a3      	cmp	r3, r4
 800675a:	bf0c      	ite	eq
 800675c:	6032      	streq	r2, [r6, #0]
 800675e:	605a      	strne	r2, [r3, #4]
 8006760:	e7ec      	b.n	800673c <_malloc_r+0xa0>
 8006762:	4623      	mov	r3, r4
 8006764:	6864      	ldr	r4, [r4, #4]
 8006766:	e7b2      	b.n	80066ce <_malloc_r+0x32>
 8006768:	4634      	mov	r4, r6
 800676a:	6876      	ldr	r6, [r6, #4]
 800676c:	e7b9      	b.n	80066e2 <_malloc_r+0x46>
 800676e:	230c      	movs	r3, #12
 8006770:	603b      	str	r3, [r7, #0]
 8006772:	4638      	mov	r0, r7
 8006774:	f003 fc72 	bl	800a05c <__malloc_unlock>
 8006778:	e7a1      	b.n	80066be <_malloc_r+0x22>
 800677a:	6025      	str	r5, [r4, #0]
 800677c:	e7de      	b.n	800673c <_malloc_r+0xa0>
 800677e:	bf00      	nop
 8006780:	20000338 	.word	0x20000338

08006784 <__cvt>:
 8006784:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006788:	ec55 4b10 	vmov	r4, r5, d0
 800678c:	2d00      	cmp	r5, #0
 800678e:	460e      	mov	r6, r1
 8006790:	4619      	mov	r1, r3
 8006792:	462b      	mov	r3, r5
 8006794:	bfbb      	ittet	lt
 8006796:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800679a:	461d      	movlt	r5, r3
 800679c:	2300      	movge	r3, #0
 800679e:	232d      	movlt	r3, #45	; 0x2d
 80067a0:	700b      	strb	r3, [r1, #0]
 80067a2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80067a4:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80067a8:	4691      	mov	r9, r2
 80067aa:	f023 0820 	bic.w	r8, r3, #32
 80067ae:	bfbc      	itt	lt
 80067b0:	4622      	movlt	r2, r4
 80067b2:	4614      	movlt	r4, r2
 80067b4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80067b8:	d005      	beq.n	80067c6 <__cvt+0x42>
 80067ba:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80067be:	d100      	bne.n	80067c2 <__cvt+0x3e>
 80067c0:	3601      	adds	r6, #1
 80067c2:	2102      	movs	r1, #2
 80067c4:	e000      	b.n	80067c8 <__cvt+0x44>
 80067c6:	2103      	movs	r1, #3
 80067c8:	ab03      	add	r3, sp, #12
 80067ca:	9301      	str	r3, [sp, #4]
 80067cc:	ab02      	add	r3, sp, #8
 80067ce:	9300      	str	r3, [sp, #0]
 80067d0:	ec45 4b10 	vmov	d0, r4, r5
 80067d4:	4653      	mov	r3, sl
 80067d6:	4632      	mov	r2, r6
 80067d8:	f002 f866 	bl	80088a8 <_dtoa_r>
 80067dc:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80067e0:	4607      	mov	r7, r0
 80067e2:	d102      	bne.n	80067ea <__cvt+0x66>
 80067e4:	f019 0f01 	tst.w	r9, #1
 80067e8:	d022      	beq.n	8006830 <__cvt+0xac>
 80067ea:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80067ee:	eb07 0906 	add.w	r9, r7, r6
 80067f2:	d110      	bne.n	8006816 <__cvt+0x92>
 80067f4:	783b      	ldrb	r3, [r7, #0]
 80067f6:	2b30      	cmp	r3, #48	; 0x30
 80067f8:	d10a      	bne.n	8006810 <__cvt+0x8c>
 80067fa:	2200      	movs	r2, #0
 80067fc:	2300      	movs	r3, #0
 80067fe:	4620      	mov	r0, r4
 8006800:	4629      	mov	r1, r5
 8006802:	f7fa f961 	bl	8000ac8 <__aeabi_dcmpeq>
 8006806:	b918      	cbnz	r0, 8006810 <__cvt+0x8c>
 8006808:	f1c6 0601 	rsb	r6, r6, #1
 800680c:	f8ca 6000 	str.w	r6, [sl]
 8006810:	f8da 3000 	ldr.w	r3, [sl]
 8006814:	4499      	add	r9, r3
 8006816:	2200      	movs	r2, #0
 8006818:	2300      	movs	r3, #0
 800681a:	4620      	mov	r0, r4
 800681c:	4629      	mov	r1, r5
 800681e:	f7fa f953 	bl	8000ac8 <__aeabi_dcmpeq>
 8006822:	b108      	cbz	r0, 8006828 <__cvt+0xa4>
 8006824:	f8cd 900c 	str.w	r9, [sp, #12]
 8006828:	2230      	movs	r2, #48	; 0x30
 800682a:	9b03      	ldr	r3, [sp, #12]
 800682c:	454b      	cmp	r3, r9
 800682e:	d307      	bcc.n	8006840 <__cvt+0xbc>
 8006830:	9b03      	ldr	r3, [sp, #12]
 8006832:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006834:	1bdb      	subs	r3, r3, r7
 8006836:	4638      	mov	r0, r7
 8006838:	6013      	str	r3, [r2, #0]
 800683a:	b004      	add	sp, #16
 800683c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006840:	1c59      	adds	r1, r3, #1
 8006842:	9103      	str	r1, [sp, #12]
 8006844:	701a      	strb	r2, [r3, #0]
 8006846:	e7f0      	b.n	800682a <__cvt+0xa6>

08006848 <__exponent>:
 8006848:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800684a:	4603      	mov	r3, r0
 800684c:	2900      	cmp	r1, #0
 800684e:	bfb8      	it	lt
 8006850:	4249      	neglt	r1, r1
 8006852:	f803 2b02 	strb.w	r2, [r3], #2
 8006856:	bfb4      	ite	lt
 8006858:	222d      	movlt	r2, #45	; 0x2d
 800685a:	222b      	movge	r2, #43	; 0x2b
 800685c:	2909      	cmp	r1, #9
 800685e:	7042      	strb	r2, [r0, #1]
 8006860:	dd2a      	ble.n	80068b8 <__exponent+0x70>
 8006862:	f10d 0407 	add.w	r4, sp, #7
 8006866:	46a4      	mov	ip, r4
 8006868:	270a      	movs	r7, #10
 800686a:	46a6      	mov	lr, r4
 800686c:	460a      	mov	r2, r1
 800686e:	fb91 f6f7 	sdiv	r6, r1, r7
 8006872:	fb07 1516 	mls	r5, r7, r6, r1
 8006876:	3530      	adds	r5, #48	; 0x30
 8006878:	2a63      	cmp	r2, #99	; 0x63
 800687a:	f104 34ff 	add.w	r4, r4, #4294967295
 800687e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8006882:	4631      	mov	r1, r6
 8006884:	dcf1      	bgt.n	800686a <__exponent+0x22>
 8006886:	3130      	adds	r1, #48	; 0x30
 8006888:	f1ae 0502 	sub.w	r5, lr, #2
 800688c:	f804 1c01 	strb.w	r1, [r4, #-1]
 8006890:	1c44      	adds	r4, r0, #1
 8006892:	4629      	mov	r1, r5
 8006894:	4561      	cmp	r1, ip
 8006896:	d30a      	bcc.n	80068ae <__exponent+0x66>
 8006898:	f10d 0209 	add.w	r2, sp, #9
 800689c:	eba2 020e 	sub.w	r2, r2, lr
 80068a0:	4565      	cmp	r5, ip
 80068a2:	bf88      	it	hi
 80068a4:	2200      	movhi	r2, #0
 80068a6:	4413      	add	r3, r2
 80068a8:	1a18      	subs	r0, r3, r0
 80068aa:	b003      	add	sp, #12
 80068ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80068ae:	f811 2b01 	ldrb.w	r2, [r1], #1
 80068b2:	f804 2f01 	strb.w	r2, [r4, #1]!
 80068b6:	e7ed      	b.n	8006894 <__exponent+0x4c>
 80068b8:	2330      	movs	r3, #48	; 0x30
 80068ba:	3130      	adds	r1, #48	; 0x30
 80068bc:	7083      	strb	r3, [r0, #2]
 80068be:	70c1      	strb	r1, [r0, #3]
 80068c0:	1d03      	adds	r3, r0, #4
 80068c2:	e7f1      	b.n	80068a8 <__exponent+0x60>

080068c4 <_printf_float>:
 80068c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80068c8:	ed2d 8b02 	vpush	{d8}
 80068cc:	b08d      	sub	sp, #52	; 0x34
 80068ce:	460c      	mov	r4, r1
 80068d0:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80068d4:	4616      	mov	r6, r2
 80068d6:	461f      	mov	r7, r3
 80068d8:	4605      	mov	r5, r0
 80068da:	f003 fb3b 	bl	8009f54 <_localeconv_r>
 80068de:	f8d0 a000 	ldr.w	sl, [r0]
 80068e2:	4650      	mov	r0, sl
 80068e4:	f7f9 fc74 	bl	80001d0 <strlen>
 80068e8:	2300      	movs	r3, #0
 80068ea:	930a      	str	r3, [sp, #40]	; 0x28
 80068ec:	6823      	ldr	r3, [r4, #0]
 80068ee:	9305      	str	r3, [sp, #20]
 80068f0:	f8d8 3000 	ldr.w	r3, [r8]
 80068f4:	f894 b018 	ldrb.w	fp, [r4, #24]
 80068f8:	3307      	adds	r3, #7
 80068fa:	f023 0307 	bic.w	r3, r3, #7
 80068fe:	f103 0208 	add.w	r2, r3, #8
 8006902:	f8c8 2000 	str.w	r2, [r8]
 8006906:	e9d3 2300 	ldrd	r2, r3, [r3]
 800690a:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800690e:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8006912:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8006916:	9307      	str	r3, [sp, #28]
 8006918:	f8cd 8018 	str.w	r8, [sp, #24]
 800691c:	ee08 0a10 	vmov	s16, r0
 8006920:	4b9f      	ldr	r3, [pc, #636]	; (8006ba0 <_printf_float+0x2dc>)
 8006922:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006926:	f04f 32ff 	mov.w	r2, #4294967295
 800692a:	f7fa f8ff 	bl	8000b2c <__aeabi_dcmpun>
 800692e:	bb88      	cbnz	r0, 8006994 <_printf_float+0xd0>
 8006930:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006934:	4b9a      	ldr	r3, [pc, #616]	; (8006ba0 <_printf_float+0x2dc>)
 8006936:	f04f 32ff 	mov.w	r2, #4294967295
 800693a:	f7fa f8d9 	bl	8000af0 <__aeabi_dcmple>
 800693e:	bb48      	cbnz	r0, 8006994 <_printf_float+0xd0>
 8006940:	2200      	movs	r2, #0
 8006942:	2300      	movs	r3, #0
 8006944:	4640      	mov	r0, r8
 8006946:	4649      	mov	r1, r9
 8006948:	f7fa f8c8 	bl	8000adc <__aeabi_dcmplt>
 800694c:	b110      	cbz	r0, 8006954 <_printf_float+0x90>
 800694e:	232d      	movs	r3, #45	; 0x2d
 8006950:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006954:	4b93      	ldr	r3, [pc, #588]	; (8006ba4 <_printf_float+0x2e0>)
 8006956:	4894      	ldr	r0, [pc, #592]	; (8006ba8 <_printf_float+0x2e4>)
 8006958:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800695c:	bf94      	ite	ls
 800695e:	4698      	movls	r8, r3
 8006960:	4680      	movhi	r8, r0
 8006962:	2303      	movs	r3, #3
 8006964:	6123      	str	r3, [r4, #16]
 8006966:	9b05      	ldr	r3, [sp, #20]
 8006968:	f023 0204 	bic.w	r2, r3, #4
 800696c:	6022      	str	r2, [r4, #0]
 800696e:	f04f 0900 	mov.w	r9, #0
 8006972:	9700      	str	r7, [sp, #0]
 8006974:	4633      	mov	r3, r6
 8006976:	aa0b      	add	r2, sp, #44	; 0x2c
 8006978:	4621      	mov	r1, r4
 800697a:	4628      	mov	r0, r5
 800697c:	f000 f9d8 	bl	8006d30 <_printf_common>
 8006980:	3001      	adds	r0, #1
 8006982:	f040 8090 	bne.w	8006aa6 <_printf_float+0x1e2>
 8006986:	f04f 30ff 	mov.w	r0, #4294967295
 800698a:	b00d      	add	sp, #52	; 0x34
 800698c:	ecbd 8b02 	vpop	{d8}
 8006990:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006994:	4642      	mov	r2, r8
 8006996:	464b      	mov	r3, r9
 8006998:	4640      	mov	r0, r8
 800699a:	4649      	mov	r1, r9
 800699c:	f7fa f8c6 	bl	8000b2c <__aeabi_dcmpun>
 80069a0:	b140      	cbz	r0, 80069b4 <_printf_float+0xf0>
 80069a2:	464b      	mov	r3, r9
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	bfbc      	itt	lt
 80069a8:	232d      	movlt	r3, #45	; 0x2d
 80069aa:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80069ae:	487f      	ldr	r0, [pc, #508]	; (8006bac <_printf_float+0x2e8>)
 80069b0:	4b7f      	ldr	r3, [pc, #508]	; (8006bb0 <_printf_float+0x2ec>)
 80069b2:	e7d1      	b.n	8006958 <_printf_float+0x94>
 80069b4:	6863      	ldr	r3, [r4, #4]
 80069b6:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80069ba:	9206      	str	r2, [sp, #24]
 80069bc:	1c5a      	adds	r2, r3, #1
 80069be:	d13f      	bne.n	8006a40 <_printf_float+0x17c>
 80069c0:	2306      	movs	r3, #6
 80069c2:	6063      	str	r3, [r4, #4]
 80069c4:	9b05      	ldr	r3, [sp, #20]
 80069c6:	6861      	ldr	r1, [r4, #4]
 80069c8:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80069cc:	2300      	movs	r3, #0
 80069ce:	9303      	str	r3, [sp, #12]
 80069d0:	ab0a      	add	r3, sp, #40	; 0x28
 80069d2:	e9cd b301 	strd	fp, r3, [sp, #4]
 80069d6:	ab09      	add	r3, sp, #36	; 0x24
 80069d8:	ec49 8b10 	vmov	d0, r8, r9
 80069dc:	9300      	str	r3, [sp, #0]
 80069de:	6022      	str	r2, [r4, #0]
 80069e0:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80069e4:	4628      	mov	r0, r5
 80069e6:	f7ff fecd 	bl	8006784 <__cvt>
 80069ea:	9b06      	ldr	r3, [sp, #24]
 80069ec:	9909      	ldr	r1, [sp, #36]	; 0x24
 80069ee:	2b47      	cmp	r3, #71	; 0x47
 80069f0:	4680      	mov	r8, r0
 80069f2:	d108      	bne.n	8006a06 <_printf_float+0x142>
 80069f4:	1cc8      	adds	r0, r1, #3
 80069f6:	db02      	blt.n	80069fe <_printf_float+0x13a>
 80069f8:	6863      	ldr	r3, [r4, #4]
 80069fa:	4299      	cmp	r1, r3
 80069fc:	dd41      	ble.n	8006a82 <_printf_float+0x1be>
 80069fe:	f1ab 0b02 	sub.w	fp, fp, #2
 8006a02:	fa5f fb8b 	uxtb.w	fp, fp
 8006a06:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8006a0a:	d820      	bhi.n	8006a4e <_printf_float+0x18a>
 8006a0c:	3901      	subs	r1, #1
 8006a0e:	465a      	mov	r2, fp
 8006a10:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8006a14:	9109      	str	r1, [sp, #36]	; 0x24
 8006a16:	f7ff ff17 	bl	8006848 <__exponent>
 8006a1a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006a1c:	1813      	adds	r3, r2, r0
 8006a1e:	2a01      	cmp	r2, #1
 8006a20:	4681      	mov	r9, r0
 8006a22:	6123      	str	r3, [r4, #16]
 8006a24:	dc02      	bgt.n	8006a2c <_printf_float+0x168>
 8006a26:	6822      	ldr	r2, [r4, #0]
 8006a28:	07d2      	lsls	r2, r2, #31
 8006a2a:	d501      	bpl.n	8006a30 <_printf_float+0x16c>
 8006a2c:	3301      	adds	r3, #1
 8006a2e:	6123      	str	r3, [r4, #16]
 8006a30:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	d09c      	beq.n	8006972 <_printf_float+0xae>
 8006a38:	232d      	movs	r3, #45	; 0x2d
 8006a3a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006a3e:	e798      	b.n	8006972 <_printf_float+0xae>
 8006a40:	9a06      	ldr	r2, [sp, #24]
 8006a42:	2a47      	cmp	r2, #71	; 0x47
 8006a44:	d1be      	bne.n	80069c4 <_printf_float+0x100>
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	d1bc      	bne.n	80069c4 <_printf_float+0x100>
 8006a4a:	2301      	movs	r3, #1
 8006a4c:	e7b9      	b.n	80069c2 <_printf_float+0xfe>
 8006a4e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8006a52:	d118      	bne.n	8006a86 <_printf_float+0x1c2>
 8006a54:	2900      	cmp	r1, #0
 8006a56:	6863      	ldr	r3, [r4, #4]
 8006a58:	dd0b      	ble.n	8006a72 <_printf_float+0x1ae>
 8006a5a:	6121      	str	r1, [r4, #16]
 8006a5c:	b913      	cbnz	r3, 8006a64 <_printf_float+0x1a0>
 8006a5e:	6822      	ldr	r2, [r4, #0]
 8006a60:	07d0      	lsls	r0, r2, #31
 8006a62:	d502      	bpl.n	8006a6a <_printf_float+0x1a6>
 8006a64:	3301      	adds	r3, #1
 8006a66:	440b      	add	r3, r1
 8006a68:	6123      	str	r3, [r4, #16]
 8006a6a:	65a1      	str	r1, [r4, #88]	; 0x58
 8006a6c:	f04f 0900 	mov.w	r9, #0
 8006a70:	e7de      	b.n	8006a30 <_printf_float+0x16c>
 8006a72:	b913      	cbnz	r3, 8006a7a <_printf_float+0x1b6>
 8006a74:	6822      	ldr	r2, [r4, #0]
 8006a76:	07d2      	lsls	r2, r2, #31
 8006a78:	d501      	bpl.n	8006a7e <_printf_float+0x1ba>
 8006a7a:	3302      	adds	r3, #2
 8006a7c:	e7f4      	b.n	8006a68 <_printf_float+0x1a4>
 8006a7e:	2301      	movs	r3, #1
 8006a80:	e7f2      	b.n	8006a68 <_printf_float+0x1a4>
 8006a82:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8006a86:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006a88:	4299      	cmp	r1, r3
 8006a8a:	db05      	blt.n	8006a98 <_printf_float+0x1d4>
 8006a8c:	6823      	ldr	r3, [r4, #0]
 8006a8e:	6121      	str	r1, [r4, #16]
 8006a90:	07d8      	lsls	r0, r3, #31
 8006a92:	d5ea      	bpl.n	8006a6a <_printf_float+0x1a6>
 8006a94:	1c4b      	adds	r3, r1, #1
 8006a96:	e7e7      	b.n	8006a68 <_printf_float+0x1a4>
 8006a98:	2900      	cmp	r1, #0
 8006a9a:	bfd4      	ite	le
 8006a9c:	f1c1 0202 	rsble	r2, r1, #2
 8006aa0:	2201      	movgt	r2, #1
 8006aa2:	4413      	add	r3, r2
 8006aa4:	e7e0      	b.n	8006a68 <_printf_float+0x1a4>
 8006aa6:	6823      	ldr	r3, [r4, #0]
 8006aa8:	055a      	lsls	r2, r3, #21
 8006aaa:	d407      	bmi.n	8006abc <_printf_float+0x1f8>
 8006aac:	6923      	ldr	r3, [r4, #16]
 8006aae:	4642      	mov	r2, r8
 8006ab0:	4631      	mov	r1, r6
 8006ab2:	4628      	mov	r0, r5
 8006ab4:	47b8      	blx	r7
 8006ab6:	3001      	adds	r0, #1
 8006ab8:	d12c      	bne.n	8006b14 <_printf_float+0x250>
 8006aba:	e764      	b.n	8006986 <_printf_float+0xc2>
 8006abc:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8006ac0:	f240 80e0 	bls.w	8006c84 <_printf_float+0x3c0>
 8006ac4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006ac8:	2200      	movs	r2, #0
 8006aca:	2300      	movs	r3, #0
 8006acc:	f7f9 fffc 	bl	8000ac8 <__aeabi_dcmpeq>
 8006ad0:	2800      	cmp	r0, #0
 8006ad2:	d034      	beq.n	8006b3e <_printf_float+0x27a>
 8006ad4:	4a37      	ldr	r2, [pc, #220]	; (8006bb4 <_printf_float+0x2f0>)
 8006ad6:	2301      	movs	r3, #1
 8006ad8:	4631      	mov	r1, r6
 8006ada:	4628      	mov	r0, r5
 8006adc:	47b8      	blx	r7
 8006ade:	3001      	adds	r0, #1
 8006ae0:	f43f af51 	beq.w	8006986 <_printf_float+0xc2>
 8006ae4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006ae8:	429a      	cmp	r2, r3
 8006aea:	db02      	blt.n	8006af2 <_printf_float+0x22e>
 8006aec:	6823      	ldr	r3, [r4, #0]
 8006aee:	07d8      	lsls	r0, r3, #31
 8006af0:	d510      	bpl.n	8006b14 <_printf_float+0x250>
 8006af2:	ee18 3a10 	vmov	r3, s16
 8006af6:	4652      	mov	r2, sl
 8006af8:	4631      	mov	r1, r6
 8006afa:	4628      	mov	r0, r5
 8006afc:	47b8      	blx	r7
 8006afe:	3001      	adds	r0, #1
 8006b00:	f43f af41 	beq.w	8006986 <_printf_float+0xc2>
 8006b04:	f04f 0800 	mov.w	r8, #0
 8006b08:	f104 091a 	add.w	r9, r4, #26
 8006b0c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006b0e:	3b01      	subs	r3, #1
 8006b10:	4543      	cmp	r3, r8
 8006b12:	dc09      	bgt.n	8006b28 <_printf_float+0x264>
 8006b14:	6823      	ldr	r3, [r4, #0]
 8006b16:	079b      	lsls	r3, r3, #30
 8006b18:	f100 8105 	bmi.w	8006d26 <_printf_float+0x462>
 8006b1c:	68e0      	ldr	r0, [r4, #12]
 8006b1e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006b20:	4298      	cmp	r0, r3
 8006b22:	bfb8      	it	lt
 8006b24:	4618      	movlt	r0, r3
 8006b26:	e730      	b.n	800698a <_printf_float+0xc6>
 8006b28:	2301      	movs	r3, #1
 8006b2a:	464a      	mov	r2, r9
 8006b2c:	4631      	mov	r1, r6
 8006b2e:	4628      	mov	r0, r5
 8006b30:	47b8      	blx	r7
 8006b32:	3001      	adds	r0, #1
 8006b34:	f43f af27 	beq.w	8006986 <_printf_float+0xc2>
 8006b38:	f108 0801 	add.w	r8, r8, #1
 8006b3c:	e7e6      	b.n	8006b0c <_printf_float+0x248>
 8006b3e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006b40:	2b00      	cmp	r3, #0
 8006b42:	dc39      	bgt.n	8006bb8 <_printf_float+0x2f4>
 8006b44:	4a1b      	ldr	r2, [pc, #108]	; (8006bb4 <_printf_float+0x2f0>)
 8006b46:	2301      	movs	r3, #1
 8006b48:	4631      	mov	r1, r6
 8006b4a:	4628      	mov	r0, r5
 8006b4c:	47b8      	blx	r7
 8006b4e:	3001      	adds	r0, #1
 8006b50:	f43f af19 	beq.w	8006986 <_printf_float+0xc2>
 8006b54:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006b58:	4313      	orrs	r3, r2
 8006b5a:	d102      	bne.n	8006b62 <_printf_float+0x29e>
 8006b5c:	6823      	ldr	r3, [r4, #0]
 8006b5e:	07d9      	lsls	r1, r3, #31
 8006b60:	d5d8      	bpl.n	8006b14 <_printf_float+0x250>
 8006b62:	ee18 3a10 	vmov	r3, s16
 8006b66:	4652      	mov	r2, sl
 8006b68:	4631      	mov	r1, r6
 8006b6a:	4628      	mov	r0, r5
 8006b6c:	47b8      	blx	r7
 8006b6e:	3001      	adds	r0, #1
 8006b70:	f43f af09 	beq.w	8006986 <_printf_float+0xc2>
 8006b74:	f04f 0900 	mov.w	r9, #0
 8006b78:	f104 0a1a 	add.w	sl, r4, #26
 8006b7c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006b7e:	425b      	negs	r3, r3
 8006b80:	454b      	cmp	r3, r9
 8006b82:	dc01      	bgt.n	8006b88 <_printf_float+0x2c4>
 8006b84:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006b86:	e792      	b.n	8006aae <_printf_float+0x1ea>
 8006b88:	2301      	movs	r3, #1
 8006b8a:	4652      	mov	r2, sl
 8006b8c:	4631      	mov	r1, r6
 8006b8e:	4628      	mov	r0, r5
 8006b90:	47b8      	blx	r7
 8006b92:	3001      	adds	r0, #1
 8006b94:	f43f aef7 	beq.w	8006986 <_printf_float+0xc2>
 8006b98:	f109 0901 	add.w	r9, r9, #1
 8006b9c:	e7ee      	b.n	8006b7c <_printf_float+0x2b8>
 8006b9e:	bf00      	nop
 8006ba0:	7fefffff 	.word	0x7fefffff
 8006ba4:	0800cc60 	.word	0x0800cc60
 8006ba8:	0800cc64 	.word	0x0800cc64
 8006bac:	0800cc6c 	.word	0x0800cc6c
 8006bb0:	0800cc68 	.word	0x0800cc68
 8006bb4:	0800d161 	.word	0x0800d161
 8006bb8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006bba:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006bbc:	429a      	cmp	r2, r3
 8006bbe:	bfa8      	it	ge
 8006bc0:	461a      	movge	r2, r3
 8006bc2:	2a00      	cmp	r2, #0
 8006bc4:	4691      	mov	r9, r2
 8006bc6:	dc37      	bgt.n	8006c38 <_printf_float+0x374>
 8006bc8:	f04f 0b00 	mov.w	fp, #0
 8006bcc:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006bd0:	f104 021a 	add.w	r2, r4, #26
 8006bd4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006bd6:	9305      	str	r3, [sp, #20]
 8006bd8:	eba3 0309 	sub.w	r3, r3, r9
 8006bdc:	455b      	cmp	r3, fp
 8006bde:	dc33      	bgt.n	8006c48 <_printf_float+0x384>
 8006be0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006be4:	429a      	cmp	r2, r3
 8006be6:	db3b      	blt.n	8006c60 <_printf_float+0x39c>
 8006be8:	6823      	ldr	r3, [r4, #0]
 8006bea:	07da      	lsls	r2, r3, #31
 8006bec:	d438      	bmi.n	8006c60 <_printf_float+0x39c>
 8006bee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006bf0:	9a05      	ldr	r2, [sp, #20]
 8006bf2:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006bf4:	1a9a      	subs	r2, r3, r2
 8006bf6:	eba3 0901 	sub.w	r9, r3, r1
 8006bfa:	4591      	cmp	r9, r2
 8006bfc:	bfa8      	it	ge
 8006bfe:	4691      	movge	r9, r2
 8006c00:	f1b9 0f00 	cmp.w	r9, #0
 8006c04:	dc35      	bgt.n	8006c72 <_printf_float+0x3ae>
 8006c06:	f04f 0800 	mov.w	r8, #0
 8006c0a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006c0e:	f104 0a1a 	add.w	sl, r4, #26
 8006c12:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006c16:	1a9b      	subs	r3, r3, r2
 8006c18:	eba3 0309 	sub.w	r3, r3, r9
 8006c1c:	4543      	cmp	r3, r8
 8006c1e:	f77f af79 	ble.w	8006b14 <_printf_float+0x250>
 8006c22:	2301      	movs	r3, #1
 8006c24:	4652      	mov	r2, sl
 8006c26:	4631      	mov	r1, r6
 8006c28:	4628      	mov	r0, r5
 8006c2a:	47b8      	blx	r7
 8006c2c:	3001      	adds	r0, #1
 8006c2e:	f43f aeaa 	beq.w	8006986 <_printf_float+0xc2>
 8006c32:	f108 0801 	add.w	r8, r8, #1
 8006c36:	e7ec      	b.n	8006c12 <_printf_float+0x34e>
 8006c38:	4613      	mov	r3, r2
 8006c3a:	4631      	mov	r1, r6
 8006c3c:	4642      	mov	r2, r8
 8006c3e:	4628      	mov	r0, r5
 8006c40:	47b8      	blx	r7
 8006c42:	3001      	adds	r0, #1
 8006c44:	d1c0      	bne.n	8006bc8 <_printf_float+0x304>
 8006c46:	e69e      	b.n	8006986 <_printf_float+0xc2>
 8006c48:	2301      	movs	r3, #1
 8006c4a:	4631      	mov	r1, r6
 8006c4c:	4628      	mov	r0, r5
 8006c4e:	9205      	str	r2, [sp, #20]
 8006c50:	47b8      	blx	r7
 8006c52:	3001      	adds	r0, #1
 8006c54:	f43f ae97 	beq.w	8006986 <_printf_float+0xc2>
 8006c58:	9a05      	ldr	r2, [sp, #20]
 8006c5a:	f10b 0b01 	add.w	fp, fp, #1
 8006c5e:	e7b9      	b.n	8006bd4 <_printf_float+0x310>
 8006c60:	ee18 3a10 	vmov	r3, s16
 8006c64:	4652      	mov	r2, sl
 8006c66:	4631      	mov	r1, r6
 8006c68:	4628      	mov	r0, r5
 8006c6a:	47b8      	blx	r7
 8006c6c:	3001      	adds	r0, #1
 8006c6e:	d1be      	bne.n	8006bee <_printf_float+0x32a>
 8006c70:	e689      	b.n	8006986 <_printf_float+0xc2>
 8006c72:	9a05      	ldr	r2, [sp, #20]
 8006c74:	464b      	mov	r3, r9
 8006c76:	4442      	add	r2, r8
 8006c78:	4631      	mov	r1, r6
 8006c7a:	4628      	mov	r0, r5
 8006c7c:	47b8      	blx	r7
 8006c7e:	3001      	adds	r0, #1
 8006c80:	d1c1      	bne.n	8006c06 <_printf_float+0x342>
 8006c82:	e680      	b.n	8006986 <_printf_float+0xc2>
 8006c84:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006c86:	2a01      	cmp	r2, #1
 8006c88:	dc01      	bgt.n	8006c8e <_printf_float+0x3ca>
 8006c8a:	07db      	lsls	r3, r3, #31
 8006c8c:	d538      	bpl.n	8006d00 <_printf_float+0x43c>
 8006c8e:	2301      	movs	r3, #1
 8006c90:	4642      	mov	r2, r8
 8006c92:	4631      	mov	r1, r6
 8006c94:	4628      	mov	r0, r5
 8006c96:	47b8      	blx	r7
 8006c98:	3001      	adds	r0, #1
 8006c9a:	f43f ae74 	beq.w	8006986 <_printf_float+0xc2>
 8006c9e:	ee18 3a10 	vmov	r3, s16
 8006ca2:	4652      	mov	r2, sl
 8006ca4:	4631      	mov	r1, r6
 8006ca6:	4628      	mov	r0, r5
 8006ca8:	47b8      	blx	r7
 8006caa:	3001      	adds	r0, #1
 8006cac:	f43f ae6b 	beq.w	8006986 <_printf_float+0xc2>
 8006cb0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006cb4:	2200      	movs	r2, #0
 8006cb6:	2300      	movs	r3, #0
 8006cb8:	f7f9 ff06 	bl	8000ac8 <__aeabi_dcmpeq>
 8006cbc:	b9d8      	cbnz	r0, 8006cf6 <_printf_float+0x432>
 8006cbe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006cc0:	f108 0201 	add.w	r2, r8, #1
 8006cc4:	3b01      	subs	r3, #1
 8006cc6:	4631      	mov	r1, r6
 8006cc8:	4628      	mov	r0, r5
 8006cca:	47b8      	blx	r7
 8006ccc:	3001      	adds	r0, #1
 8006cce:	d10e      	bne.n	8006cee <_printf_float+0x42a>
 8006cd0:	e659      	b.n	8006986 <_printf_float+0xc2>
 8006cd2:	2301      	movs	r3, #1
 8006cd4:	4652      	mov	r2, sl
 8006cd6:	4631      	mov	r1, r6
 8006cd8:	4628      	mov	r0, r5
 8006cda:	47b8      	blx	r7
 8006cdc:	3001      	adds	r0, #1
 8006cde:	f43f ae52 	beq.w	8006986 <_printf_float+0xc2>
 8006ce2:	f108 0801 	add.w	r8, r8, #1
 8006ce6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006ce8:	3b01      	subs	r3, #1
 8006cea:	4543      	cmp	r3, r8
 8006cec:	dcf1      	bgt.n	8006cd2 <_printf_float+0x40e>
 8006cee:	464b      	mov	r3, r9
 8006cf0:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8006cf4:	e6dc      	b.n	8006ab0 <_printf_float+0x1ec>
 8006cf6:	f04f 0800 	mov.w	r8, #0
 8006cfa:	f104 0a1a 	add.w	sl, r4, #26
 8006cfe:	e7f2      	b.n	8006ce6 <_printf_float+0x422>
 8006d00:	2301      	movs	r3, #1
 8006d02:	4642      	mov	r2, r8
 8006d04:	e7df      	b.n	8006cc6 <_printf_float+0x402>
 8006d06:	2301      	movs	r3, #1
 8006d08:	464a      	mov	r2, r9
 8006d0a:	4631      	mov	r1, r6
 8006d0c:	4628      	mov	r0, r5
 8006d0e:	47b8      	blx	r7
 8006d10:	3001      	adds	r0, #1
 8006d12:	f43f ae38 	beq.w	8006986 <_printf_float+0xc2>
 8006d16:	f108 0801 	add.w	r8, r8, #1
 8006d1a:	68e3      	ldr	r3, [r4, #12]
 8006d1c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006d1e:	1a5b      	subs	r3, r3, r1
 8006d20:	4543      	cmp	r3, r8
 8006d22:	dcf0      	bgt.n	8006d06 <_printf_float+0x442>
 8006d24:	e6fa      	b.n	8006b1c <_printf_float+0x258>
 8006d26:	f04f 0800 	mov.w	r8, #0
 8006d2a:	f104 0919 	add.w	r9, r4, #25
 8006d2e:	e7f4      	b.n	8006d1a <_printf_float+0x456>

08006d30 <_printf_common>:
 8006d30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006d34:	4616      	mov	r6, r2
 8006d36:	4699      	mov	r9, r3
 8006d38:	688a      	ldr	r2, [r1, #8]
 8006d3a:	690b      	ldr	r3, [r1, #16]
 8006d3c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006d40:	4293      	cmp	r3, r2
 8006d42:	bfb8      	it	lt
 8006d44:	4613      	movlt	r3, r2
 8006d46:	6033      	str	r3, [r6, #0]
 8006d48:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006d4c:	4607      	mov	r7, r0
 8006d4e:	460c      	mov	r4, r1
 8006d50:	b10a      	cbz	r2, 8006d56 <_printf_common+0x26>
 8006d52:	3301      	adds	r3, #1
 8006d54:	6033      	str	r3, [r6, #0]
 8006d56:	6823      	ldr	r3, [r4, #0]
 8006d58:	0699      	lsls	r1, r3, #26
 8006d5a:	bf42      	ittt	mi
 8006d5c:	6833      	ldrmi	r3, [r6, #0]
 8006d5e:	3302      	addmi	r3, #2
 8006d60:	6033      	strmi	r3, [r6, #0]
 8006d62:	6825      	ldr	r5, [r4, #0]
 8006d64:	f015 0506 	ands.w	r5, r5, #6
 8006d68:	d106      	bne.n	8006d78 <_printf_common+0x48>
 8006d6a:	f104 0a19 	add.w	sl, r4, #25
 8006d6e:	68e3      	ldr	r3, [r4, #12]
 8006d70:	6832      	ldr	r2, [r6, #0]
 8006d72:	1a9b      	subs	r3, r3, r2
 8006d74:	42ab      	cmp	r3, r5
 8006d76:	dc26      	bgt.n	8006dc6 <_printf_common+0x96>
 8006d78:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006d7c:	1e13      	subs	r3, r2, #0
 8006d7e:	6822      	ldr	r2, [r4, #0]
 8006d80:	bf18      	it	ne
 8006d82:	2301      	movne	r3, #1
 8006d84:	0692      	lsls	r2, r2, #26
 8006d86:	d42b      	bmi.n	8006de0 <_printf_common+0xb0>
 8006d88:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006d8c:	4649      	mov	r1, r9
 8006d8e:	4638      	mov	r0, r7
 8006d90:	47c0      	blx	r8
 8006d92:	3001      	adds	r0, #1
 8006d94:	d01e      	beq.n	8006dd4 <_printf_common+0xa4>
 8006d96:	6823      	ldr	r3, [r4, #0]
 8006d98:	68e5      	ldr	r5, [r4, #12]
 8006d9a:	6832      	ldr	r2, [r6, #0]
 8006d9c:	f003 0306 	and.w	r3, r3, #6
 8006da0:	2b04      	cmp	r3, #4
 8006da2:	bf08      	it	eq
 8006da4:	1aad      	subeq	r5, r5, r2
 8006da6:	68a3      	ldr	r3, [r4, #8]
 8006da8:	6922      	ldr	r2, [r4, #16]
 8006daa:	bf0c      	ite	eq
 8006dac:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006db0:	2500      	movne	r5, #0
 8006db2:	4293      	cmp	r3, r2
 8006db4:	bfc4      	itt	gt
 8006db6:	1a9b      	subgt	r3, r3, r2
 8006db8:	18ed      	addgt	r5, r5, r3
 8006dba:	2600      	movs	r6, #0
 8006dbc:	341a      	adds	r4, #26
 8006dbe:	42b5      	cmp	r5, r6
 8006dc0:	d11a      	bne.n	8006df8 <_printf_common+0xc8>
 8006dc2:	2000      	movs	r0, #0
 8006dc4:	e008      	b.n	8006dd8 <_printf_common+0xa8>
 8006dc6:	2301      	movs	r3, #1
 8006dc8:	4652      	mov	r2, sl
 8006dca:	4649      	mov	r1, r9
 8006dcc:	4638      	mov	r0, r7
 8006dce:	47c0      	blx	r8
 8006dd0:	3001      	adds	r0, #1
 8006dd2:	d103      	bne.n	8006ddc <_printf_common+0xac>
 8006dd4:	f04f 30ff 	mov.w	r0, #4294967295
 8006dd8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006ddc:	3501      	adds	r5, #1
 8006dde:	e7c6      	b.n	8006d6e <_printf_common+0x3e>
 8006de0:	18e1      	adds	r1, r4, r3
 8006de2:	1c5a      	adds	r2, r3, #1
 8006de4:	2030      	movs	r0, #48	; 0x30
 8006de6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006dea:	4422      	add	r2, r4
 8006dec:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006df0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006df4:	3302      	adds	r3, #2
 8006df6:	e7c7      	b.n	8006d88 <_printf_common+0x58>
 8006df8:	2301      	movs	r3, #1
 8006dfa:	4622      	mov	r2, r4
 8006dfc:	4649      	mov	r1, r9
 8006dfe:	4638      	mov	r0, r7
 8006e00:	47c0      	blx	r8
 8006e02:	3001      	adds	r0, #1
 8006e04:	d0e6      	beq.n	8006dd4 <_printf_common+0xa4>
 8006e06:	3601      	adds	r6, #1
 8006e08:	e7d9      	b.n	8006dbe <_printf_common+0x8e>
	...

08006e0c <_printf_i>:
 8006e0c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006e10:	7e0f      	ldrb	r7, [r1, #24]
 8006e12:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006e14:	2f78      	cmp	r7, #120	; 0x78
 8006e16:	4691      	mov	r9, r2
 8006e18:	4680      	mov	r8, r0
 8006e1a:	460c      	mov	r4, r1
 8006e1c:	469a      	mov	sl, r3
 8006e1e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006e22:	d807      	bhi.n	8006e34 <_printf_i+0x28>
 8006e24:	2f62      	cmp	r7, #98	; 0x62
 8006e26:	d80a      	bhi.n	8006e3e <_printf_i+0x32>
 8006e28:	2f00      	cmp	r7, #0
 8006e2a:	f000 80d8 	beq.w	8006fde <_printf_i+0x1d2>
 8006e2e:	2f58      	cmp	r7, #88	; 0x58
 8006e30:	f000 80a3 	beq.w	8006f7a <_printf_i+0x16e>
 8006e34:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006e38:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006e3c:	e03a      	b.n	8006eb4 <_printf_i+0xa8>
 8006e3e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006e42:	2b15      	cmp	r3, #21
 8006e44:	d8f6      	bhi.n	8006e34 <_printf_i+0x28>
 8006e46:	a101      	add	r1, pc, #4	; (adr r1, 8006e4c <_printf_i+0x40>)
 8006e48:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006e4c:	08006ea5 	.word	0x08006ea5
 8006e50:	08006eb9 	.word	0x08006eb9
 8006e54:	08006e35 	.word	0x08006e35
 8006e58:	08006e35 	.word	0x08006e35
 8006e5c:	08006e35 	.word	0x08006e35
 8006e60:	08006e35 	.word	0x08006e35
 8006e64:	08006eb9 	.word	0x08006eb9
 8006e68:	08006e35 	.word	0x08006e35
 8006e6c:	08006e35 	.word	0x08006e35
 8006e70:	08006e35 	.word	0x08006e35
 8006e74:	08006e35 	.word	0x08006e35
 8006e78:	08006fc5 	.word	0x08006fc5
 8006e7c:	08006ee9 	.word	0x08006ee9
 8006e80:	08006fa7 	.word	0x08006fa7
 8006e84:	08006e35 	.word	0x08006e35
 8006e88:	08006e35 	.word	0x08006e35
 8006e8c:	08006fe7 	.word	0x08006fe7
 8006e90:	08006e35 	.word	0x08006e35
 8006e94:	08006ee9 	.word	0x08006ee9
 8006e98:	08006e35 	.word	0x08006e35
 8006e9c:	08006e35 	.word	0x08006e35
 8006ea0:	08006faf 	.word	0x08006faf
 8006ea4:	682b      	ldr	r3, [r5, #0]
 8006ea6:	1d1a      	adds	r2, r3, #4
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	602a      	str	r2, [r5, #0]
 8006eac:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006eb0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006eb4:	2301      	movs	r3, #1
 8006eb6:	e0a3      	b.n	8007000 <_printf_i+0x1f4>
 8006eb8:	6820      	ldr	r0, [r4, #0]
 8006eba:	6829      	ldr	r1, [r5, #0]
 8006ebc:	0606      	lsls	r6, r0, #24
 8006ebe:	f101 0304 	add.w	r3, r1, #4
 8006ec2:	d50a      	bpl.n	8006eda <_printf_i+0xce>
 8006ec4:	680e      	ldr	r6, [r1, #0]
 8006ec6:	602b      	str	r3, [r5, #0]
 8006ec8:	2e00      	cmp	r6, #0
 8006eca:	da03      	bge.n	8006ed4 <_printf_i+0xc8>
 8006ecc:	232d      	movs	r3, #45	; 0x2d
 8006ece:	4276      	negs	r6, r6
 8006ed0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006ed4:	485e      	ldr	r0, [pc, #376]	; (8007050 <_printf_i+0x244>)
 8006ed6:	230a      	movs	r3, #10
 8006ed8:	e019      	b.n	8006f0e <_printf_i+0x102>
 8006eda:	680e      	ldr	r6, [r1, #0]
 8006edc:	602b      	str	r3, [r5, #0]
 8006ede:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006ee2:	bf18      	it	ne
 8006ee4:	b236      	sxthne	r6, r6
 8006ee6:	e7ef      	b.n	8006ec8 <_printf_i+0xbc>
 8006ee8:	682b      	ldr	r3, [r5, #0]
 8006eea:	6820      	ldr	r0, [r4, #0]
 8006eec:	1d19      	adds	r1, r3, #4
 8006eee:	6029      	str	r1, [r5, #0]
 8006ef0:	0601      	lsls	r1, r0, #24
 8006ef2:	d501      	bpl.n	8006ef8 <_printf_i+0xec>
 8006ef4:	681e      	ldr	r6, [r3, #0]
 8006ef6:	e002      	b.n	8006efe <_printf_i+0xf2>
 8006ef8:	0646      	lsls	r6, r0, #25
 8006efa:	d5fb      	bpl.n	8006ef4 <_printf_i+0xe8>
 8006efc:	881e      	ldrh	r6, [r3, #0]
 8006efe:	4854      	ldr	r0, [pc, #336]	; (8007050 <_printf_i+0x244>)
 8006f00:	2f6f      	cmp	r7, #111	; 0x6f
 8006f02:	bf0c      	ite	eq
 8006f04:	2308      	moveq	r3, #8
 8006f06:	230a      	movne	r3, #10
 8006f08:	2100      	movs	r1, #0
 8006f0a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006f0e:	6865      	ldr	r5, [r4, #4]
 8006f10:	60a5      	str	r5, [r4, #8]
 8006f12:	2d00      	cmp	r5, #0
 8006f14:	bfa2      	ittt	ge
 8006f16:	6821      	ldrge	r1, [r4, #0]
 8006f18:	f021 0104 	bicge.w	r1, r1, #4
 8006f1c:	6021      	strge	r1, [r4, #0]
 8006f1e:	b90e      	cbnz	r6, 8006f24 <_printf_i+0x118>
 8006f20:	2d00      	cmp	r5, #0
 8006f22:	d04d      	beq.n	8006fc0 <_printf_i+0x1b4>
 8006f24:	4615      	mov	r5, r2
 8006f26:	fbb6 f1f3 	udiv	r1, r6, r3
 8006f2a:	fb03 6711 	mls	r7, r3, r1, r6
 8006f2e:	5dc7      	ldrb	r7, [r0, r7]
 8006f30:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006f34:	4637      	mov	r7, r6
 8006f36:	42bb      	cmp	r3, r7
 8006f38:	460e      	mov	r6, r1
 8006f3a:	d9f4      	bls.n	8006f26 <_printf_i+0x11a>
 8006f3c:	2b08      	cmp	r3, #8
 8006f3e:	d10b      	bne.n	8006f58 <_printf_i+0x14c>
 8006f40:	6823      	ldr	r3, [r4, #0]
 8006f42:	07de      	lsls	r6, r3, #31
 8006f44:	d508      	bpl.n	8006f58 <_printf_i+0x14c>
 8006f46:	6923      	ldr	r3, [r4, #16]
 8006f48:	6861      	ldr	r1, [r4, #4]
 8006f4a:	4299      	cmp	r1, r3
 8006f4c:	bfde      	ittt	le
 8006f4e:	2330      	movle	r3, #48	; 0x30
 8006f50:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006f54:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006f58:	1b52      	subs	r2, r2, r5
 8006f5a:	6122      	str	r2, [r4, #16]
 8006f5c:	f8cd a000 	str.w	sl, [sp]
 8006f60:	464b      	mov	r3, r9
 8006f62:	aa03      	add	r2, sp, #12
 8006f64:	4621      	mov	r1, r4
 8006f66:	4640      	mov	r0, r8
 8006f68:	f7ff fee2 	bl	8006d30 <_printf_common>
 8006f6c:	3001      	adds	r0, #1
 8006f6e:	d14c      	bne.n	800700a <_printf_i+0x1fe>
 8006f70:	f04f 30ff 	mov.w	r0, #4294967295
 8006f74:	b004      	add	sp, #16
 8006f76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006f7a:	4835      	ldr	r0, [pc, #212]	; (8007050 <_printf_i+0x244>)
 8006f7c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8006f80:	6829      	ldr	r1, [r5, #0]
 8006f82:	6823      	ldr	r3, [r4, #0]
 8006f84:	f851 6b04 	ldr.w	r6, [r1], #4
 8006f88:	6029      	str	r1, [r5, #0]
 8006f8a:	061d      	lsls	r5, r3, #24
 8006f8c:	d514      	bpl.n	8006fb8 <_printf_i+0x1ac>
 8006f8e:	07df      	lsls	r7, r3, #31
 8006f90:	bf44      	itt	mi
 8006f92:	f043 0320 	orrmi.w	r3, r3, #32
 8006f96:	6023      	strmi	r3, [r4, #0]
 8006f98:	b91e      	cbnz	r6, 8006fa2 <_printf_i+0x196>
 8006f9a:	6823      	ldr	r3, [r4, #0]
 8006f9c:	f023 0320 	bic.w	r3, r3, #32
 8006fa0:	6023      	str	r3, [r4, #0]
 8006fa2:	2310      	movs	r3, #16
 8006fa4:	e7b0      	b.n	8006f08 <_printf_i+0xfc>
 8006fa6:	6823      	ldr	r3, [r4, #0]
 8006fa8:	f043 0320 	orr.w	r3, r3, #32
 8006fac:	6023      	str	r3, [r4, #0]
 8006fae:	2378      	movs	r3, #120	; 0x78
 8006fb0:	4828      	ldr	r0, [pc, #160]	; (8007054 <_printf_i+0x248>)
 8006fb2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006fb6:	e7e3      	b.n	8006f80 <_printf_i+0x174>
 8006fb8:	0659      	lsls	r1, r3, #25
 8006fba:	bf48      	it	mi
 8006fbc:	b2b6      	uxthmi	r6, r6
 8006fbe:	e7e6      	b.n	8006f8e <_printf_i+0x182>
 8006fc0:	4615      	mov	r5, r2
 8006fc2:	e7bb      	b.n	8006f3c <_printf_i+0x130>
 8006fc4:	682b      	ldr	r3, [r5, #0]
 8006fc6:	6826      	ldr	r6, [r4, #0]
 8006fc8:	6961      	ldr	r1, [r4, #20]
 8006fca:	1d18      	adds	r0, r3, #4
 8006fcc:	6028      	str	r0, [r5, #0]
 8006fce:	0635      	lsls	r5, r6, #24
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	d501      	bpl.n	8006fd8 <_printf_i+0x1cc>
 8006fd4:	6019      	str	r1, [r3, #0]
 8006fd6:	e002      	b.n	8006fde <_printf_i+0x1d2>
 8006fd8:	0670      	lsls	r0, r6, #25
 8006fda:	d5fb      	bpl.n	8006fd4 <_printf_i+0x1c8>
 8006fdc:	8019      	strh	r1, [r3, #0]
 8006fde:	2300      	movs	r3, #0
 8006fe0:	6123      	str	r3, [r4, #16]
 8006fe2:	4615      	mov	r5, r2
 8006fe4:	e7ba      	b.n	8006f5c <_printf_i+0x150>
 8006fe6:	682b      	ldr	r3, [r5, #0]
 8006fe8:	1d1a      	adds	r2, r3, #4
 8006fea:	602a      	str	r2, [r5, #0]
 8006fec:	681d      	ldr	r5, [r3, #0]
 8006fee:	6862      	ldr	r2, [r4, #4]
 8006ff0:	2100      	movs	r1, #0
 8006ff2:	4628      	mov	r0, r5
 8006ff4:	f7f9 f8f4 	bl	80001e0 <memchr>
 8006ff8:	b108      	cbz	r0, 8006ffe <_printf_i+0x1f2>
 8006ffa:	1b40      	subs	r0, r0, r5
 8006ffc:	6060      	str	r0, [r4, #4]
 8006ffe:	6863      	ldr	r3, [r4, #4]
 8007000:	6123      	str	r3, [r4, #16]
 8007002:	2300      	movs	r3, #0
 8007004:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007008:	e7a8      	b.n	8006f5c <_printf_i+0x150>
 800700a:	6923      	ldr	r3, [r4, #16]
 800700c:	462a      	mov	r2, r5
 800700e:	4649      	mov	r1, r9
 8007010:	4640      	mov	r0, r8
 8007012:	47d0      	blx	sl
 8007014:	3001      	adds	r0, #1
 8007016:	d0ab      	beq.n	8006f70 <_printf_i+0x164>
 8007018:	6823      	ldr	r3, [r4, #0]
 800701a:	079b      	lsls	r3, r3, #30
 800701c:	d413      	bmi.n	8007046 <_printf_i+0x23a>
 800701e:	68e0      	ldr	r0, [r4, #12]
 8007020:	9b03      	ldr	r3, [sp, #12]
 8007022:	4298      	cmp	r0, r3
 8007024:	bfb8      	it	lt
 8007026:	4618      	movlt	r0, r3
 8007028:	e7a4      	b.n	8006f74 <_printf_i+0x168>
 800702a:	2301      	movs	r3, #1
 800702c:	4632      	mov	r2, r6
 800702e:	4649      	mov	r1, r9
 8007030:	4640      	mov	r0, r8
 8007032:	47d0      	blx	sl
 8007034:	3001      	adds	r0, #1
 8007036:	d09b      	beq.n	8006f70 <_printf_i+0x164>
 8007038:	3501      	adds	r5, #1
 800703a:	68e3      	ldr	r3, [r4, #12]
 800703c:	9903      	ldr	r1, [sp, #12]
 800703e:	1a5b      	subs	r3, r3, r1
 8007040:	42ab      	cmp	r3, r5
 8007042:	dcf2      	bgt.n	800702a <_printf_i+0x21e>
 8007044:	e7eb      	b.n	800701e <_printf_i+0x212>
 8007046:	2500      	movs	r5, #0
 8007048:	f104 0619 	add.w	r6, r4, #25
 800704c:	e7f5      	b.n	800703a <_printf_i+0x22e>
 800704e:	bf00      	nop
 8007050:	0800cc70 	.word	0x0800cc70
 8007054:	0800cc81 	.word	0x0800cc81

08007058 <_scanf_float>:
 8007058:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800705c:	b087      	sub	sp, #28
 800705e:	4617      	mov	r7, r2
 8007060:	9303      	str	r3, [sp, #12]
 8007062:	688b      	ldr	r3, [r1, #8]
 8007064:	1e5a      	subs	r2, r3, #1
 8007066:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800706a:	bf83      	ittte	hi
 800706c:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8007070:	195b      	addhi	r3, r3, r5
 8007072:	9302      	strhi	r3, [sp, #8]
 8007074:	2300      	movls	r3, #0
 8007076:	bf86      	itte	hi
 8007078:	f240 135d 	movwhi	r3, #349	; 0x15d
 800707c:	608b      	strhi	r3, [r1, #8]
 800707e:	9302      	strls	r3, [sp, #8]
 8007080:	680b      	ldr	r3, [r1, #0]
 8007082:	468b      	mov	fp, r1
 8007084:	2500      	movs	r5, #0
 8007086:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800708a:	f84b 3b1c 	str.w	r3, [fp], #28
 800708e:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8007092:	4680      	mov	r8, r0
 8007094:	460c      	mov	r4, r1
 8007096:	465e      	mov	r6, fp
 8007098:	46aa      	mov	sl, r5
 800709a:	46a9      	mov	r9, r5
 800709c:	9501      	str	r5, [sp, #4]
 800709e:	68a2      	ldr	r2, [r4, #8]
 80070a0:	b152      	cbz	r2, 80070b8 <_scanf_float+0x60>
 80070a2:	683b      	ldr	r3, [r7, #0]
 80070a4:	781b      	ldrb	r3, [r3, #0]
 80070a6:	2b4e      	cmp	r3, #78	; 0x4e
 80070a8:	d864      	bhi.n	8007174 <_scanf_float+0x11c>
 80070aa:	2b40      	cmp	r3, #64	; 0x40
 80070ac:	d83c      	bhi.n	8007128 <_scanf_float+0xd0>
 80070ae:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 80070b2:	b2c8      	uxtb	r0, r1
 80070b4:	280e      	cmp	r0, #14
 80070b6:	d93a      	bls.n	800712e <_scanf_float+0xd6>
 80070b8:	f1b9 0f00 	cmp.w	r9, #0
 80070bc:	d003      	beq.n	80070c6 <_scanf_float+0x6e>
 80070be:	6823      	ldr	r3, [r4, #0]
 80070c0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80070c4:	6023      	str	r3, [r4, #0]
 80070c6:	f10a 3aff 	add.w	sl, sl, #4294967295
 80070ca:	f1ba 0f01 	cmp.w	sl, #1
 80070ce:	f200 8113 	bhi.w	80072f8 <_scanf_float+0x2a0>
 80070d2:	455e      	cmp	r6, fp
 80070d4:	f200 8105 	bhi.w	80072e2 <_scanf_float+0x28a>
 80070d8:	2501      	movs	r5, #1
 80070da:	4628      	mov	r0, r5
 80070dc:	b007      	add	sp, #28
 80070de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80070e2:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 80070e6:	2a0d      	cmp	r2, #13
 80070e8:	d8e6      	bhi.n	80070b8 <_scanf_float+0x60>
 80070ea:	a101      	add	r1, pc, #4	; (adr r1, 80070f0 <_scanf_float+0x98>)
 80070ec:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80070f0:	0800722f 	.word	0x0800722f
 80070f4:	080070b9 	.word	0x080070b9
 80070f8:	080070b9 	.word	0x080070b9
 80070fc:	080070b9 	.word	0x080070b9
 8007100:	0800728f 	.word	0x0800728f
 8007104:	08007267 	.word	0x08007267
 8007108:	080070b9 	.word	0x080070b9
 800710c:	080070b9 	.word	0x080070b9
 8007110:	0800723d 	.word	0x0800723d
 8007114:	080070b9 	.word	0x080070b9
 8007118:	080070b9 	.word	0x080070b9
 800711c:	080070b9 	.word	0x080070b9
 8007120:	080070b9 	.word	0x080070b9
 8007124:	080071f5 	.word	0x080071f5
 8007128:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800712c:	e7db      	b.n	80070e6 <_scanf_float+0x8e>
 800712e:	290e      	cmp	r1, #14
 8007130:	d8c2      	bhi.n	80070b8 <_scanf_float+0x60>
 8007132:	a001      	add	r0, pc, #4	; (adr r0, 8007138 <_scanf_float+0xe0>)
 8007134:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8007138:	080071e7 	.word	0x080071e7
 800713c:	080070b9 	.word	0x080070b9
 8007140:	080071e7 	.word	0x080071e7
 8007144:	0800727b 	.word	0x0800727b
 8007148:	080070b9 	.word	0x080070b9
 800714c:	08007195 	.word	0x08007195
 8007150:	080071d1 	.word	0x080071d1
 8007154:	080071d1 	.word	0x080071d1
 8007158:	080071d1 	.word	0x080071d1
 800715c:	080071d1 	.word	0x080071d1
 8007160:	080071d1 	.word	0x080071d1
 8007164:	080071d1 	.word	0x080071d1
 8007168:	080071d1 	.word	0x080071d1
 800716c:	080071d1 	.word	0x080071d1
 8007170:	080071d1 	.word	0x080071d1
 8007174:	2b6e      	cmp	r3, #110	; 0x6e
 8007176:	d809      	bhi.n	800718c <_scanf_float+0x134>
 8007178:	2b60      	cmp	r3, #96	; 0x60
 800717a:	d8b2      	bhi.n	80070e2 <_scanf_float+0x8a>
 800717c:	2b54      	cmp	r3, #84	; 0x54
 800717e:	d077      	beq.n	8007270 <_scanf_float+0x218>
 8007180:	2b59      	cmp	r3, #89	; 0x59
 8007182:	d199      	bne.n	80070b8 <_scanf_float+0x60>
 8007184:	2d07      	cmp	r5, #7
 8007186:	d197      	bne.n	80070b8 <_scanf_float+0x60>
 8007188:	2508      	movs	r5, #8
 800718a:	e029      	b.n	80071e0 <_scanf_float+0x188>
 800718c:	2b74      	cmp	r3, #116	; 0x74
 800718e:	d06f      	beq.n	8007270 <_scanf_float+0x218>
 8007190:	2b79      	cmp	r3, #121	; 0x79
 8007192:	e7f6      	b.n	8007182 <_scanf_float+0x12a>
 8007194:	6821      	ldr	r1, [r4, #0]
 8007196:	05c8      	lsls	r0, r1, #23
 8007198:	d51a      	bpl.n	80071d0 <_scanf_float+0x178>
 800719a:	9b02      	ldr	r3, [sp, #8]
 800719c:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 80071a0:	6021      	str	r1, [r4, #0]
 80071a2:	f109 0901 	add.w	r9, r9, #1
 80071a6:	b11b      	cbz	r3, 80071b0 <_scanf_float+0x158>
 80071a8:	3b01      	subs	r3, #1
 80071aa:	3201      	adds	r2, #1
 80071ac:	9302      	str	r3, [sp, #8]
 80071ae:	60a2      	str	r2, [r4, #8]
 80071b0:	68a3      	ldr	r3, [r4, #8]
 80071b2:	3b01      	subs	r3, #1
 80071b4:	60a3      	str	r3, [r4, #8]
 80071b6:	6923      	ldr	r3, [r4, #16]
 80071b8:	3301      	adds	r3, #1
 80071ba:	6123      	str	r3, [r4, #16]
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	3b01      	subs	r3, #1
 80071c0:	2b00      	cmp	r3, #0
 80071c2:	607b      	str	r3, [r7, #4]
 80071c4:	f340 8084 	ble.w	80072d0 <_scanf_float+0x278>
 80071c8:	683b      	ldr	r3, [r7, #0]
 80071ca:	3301      	adds	r3, #1
 80071cc:	603b      	str	r3, [r7, #0]
 80071ce:	e766      	b.n	800709e <_scanf_float+0x46>
 80071d0:	eb1a 0f05 	cmn.w	sl, r5
 80071d4:	f47f af70 	bne.w	80070b8 <_scanf_float+0x60>
 80071d8:	6822      	ldr	r2, [r4, #0]
 80071da:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 80071de:	6022      	str	r2, [r4, #0]
 80071e0:	f806 3b01 	strb.w	r3, [r6], #1
 80071e4:	e7e4      	b.n	80071b0 <_scanf_float+0x158>
 80071e6:	6822      	ldr	r2, [r4, #0]
 80071e8:	0610      	lsls	r0, r2, #24
 80071ea:	f57f af65 	bpl.w	80070b8 <_scanf_float+0x60>
 80071ee:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80071f2:	e7f4      	b.n	80071de <_scanf_float+0x186>
 80071f4:	f1ba 0f00 	cmp.w	sl, #0
 80071f8:	d10e      	bne.n	8007218 <_scanf_float+0x1c0>
 80071fa:	f1b9 0f00 	cmp.w	r9, #0
 80071fe:	d10e      	bne.n	800721e <_scanf_float+0x1c6>
 8007200:	6822      	ldr	r2, [r4, #0]
 8007202:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8007206:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800720a:	d108      	bne.n	800721e <_scanf_float+0x1c6>
 800720c:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8007210:	6022      	str	r2, [r4, #0]
 8007212:	f04f 0a01 	mov.w	sl, #1
 8007216:	e7e3      	b.n	80071e0 <_scanf_float+0x188>
 8007218:	f1ba 0f02 	cmp.w	sl, #2
 800721c:	d055      	beq.n	80072ca <_scanf_float+0x272>
 800721e:	2d01      	cmp	r5, #1
 8007220:	d002      	beq.n	8007228 <_scanf_float+0x1d0>
 8007222:	2d04      	cmp	r5, #4
 8007224:	f47f af48 	bne.w	80070b8 <_scanf_float+0x60>
 8007228:	3501      	adds	r5, #1
 800722a:	b2ed      	uxtb	r5, r5
 800722c:	e7d8      	b.n	80071e0 <_scanf_float+0x188>
 800722e:	f1ba 0f01 	cmp.w	sl, #1
 8007232:	f47f af41 	bne.w	80070b8 <_scanf_float+0x60>
 8007236:	f04f 0a02 	mov.w	sl, #2
 800723a:	e7d1      	b.n	80071e0 <_scanf_float+0x188>
 800723c:	b97d      	cbnz	r5, 800725e <_scanf_float+0x206>
 800723e:	f1b9 0f00 	cmp.w	r9, #0
 8007242:	f47f af3c 	bne.w	80070be <_scanf_float+0x66>
 8007246:	6822      	ldr	r2, [r4, #0]
 8007248:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800724c:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8007250:	f47f af39 	bne.w	80070c6 <_scanf_float+0x6e>
 8007254:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8007258:	6022      	str	r2, [r4, #0]
 800725a:	2501      	movs	r5, #1
 800725c:	e7c0      	b.n	80071e0 <_scanf_float+0x188>
 800725e:	2d03      	cmp	r5, #3
 8007260:	d0e2      	beq.n	8007228 <_scanf_float+0x1d0>
 8007262:	2d05      	cmp	r5, #5
 8007264:	e7de      	b.n	8007224 <_scanf_float+0x1cc>
 8007266:	2d02      	cmp	r5, #2
 8007268:	f47f af26 	bne.w	80070b8 <_scanf_float+0x60>
 800726c:	2503      	movs	r5, #3
 800726e:	e7b7      	b.n	80071e0 <_scanf_float+0x188>
 8007270:	2d06      	cmp	r5, #6
 8007272:	f47f af21 	bne.w	80070b8 <_scanf_float+0x60>
 8007276:	2507      	movs	r5, #7
 8007278:	e7b2      	b.n	80071e0 <_scanf_float+0x188>
 800727a:	6822      	ldr	r2, [r4, #0]
 800727c:	0591      	lsls	r1, r2, #22
 800727e:	f57f af1b 	bpl.w	80070b8 <_scanf_float+0x60>
 8007282:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8007286:	6022      	str	r2, [r4, #0]
 8007288:	f8cd 9004 	str.w	r9, [sp, #4]
 800728c:	e7a8      	b.n	80071e0 <_scanf_float+0x188>
 800728e:	6822      	ldr	r2, [r4, #0]
 8007290:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8007294:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8007298:	d006      	beq.n	80072a8 <_scanf_float+0x250>
 800729a:	0550      	lsls	r0, r2, #21
 800729c:	f57f af0c 	bpl.w	80070b8 <_scanf_float+0x60>
 80072a0:	f1b9 0f00 	cmp.w	r9, #0
 80072a4:	f43f af0f 	beq.w	80070c6 <_scanf_float+0x6e>
 80072a8:	0591      	lsls	r1, r2, #22
 80072aa:	bf58      	it	pl
 80072ac:	9901      	ldrpl	r1, [sp, #4]
 80072ae:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80072b2:	bf58      	it	pl
 80072b4:	eba9 0101 	subpl.w	r1, r9, r1
 80072b8:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 80072bc:	bf58      	it	pl
 80072be:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 80072c2:	6022      	str	r2, [r4, #0]
 80072c4:	f04f 0900 	mov.w	r9, #0
 80072c8:	e78a      	b.n	80071e0 <_scanf_float+0x188>
 80072ca:	f04f 0a03 	mov.w	sl, #3
 80072ce:	e787      	b.n	80071e0 <_scanf_float+0x188>
 80072d0:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80072d4:	4639      	mov	r1, r7
 80072d6:	4640      	mov	r0, r8
 80072d8:	4798      	blx	r3
 80072da:	2800      	cmp	r0, #0
 80072dc:	f43f aedf 	beq.w	800709e <_scanf_float+0x46>
 80072e0:	e6ea      	b.n	80070b8 <_scanf_float+0x60>
 80072e2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80072e6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80072ea:	463a      	mov	r2, r7
 80072ec:	4640      	mov	r0, r8
 80072ee:	4798      	blx	r3
 80072f0:	6923      	ldr	r3, [r4, #16]
 80072f2:	3b01      	subs	r3, #1
 80072f4:	6123      	str	r3, [r4, #16]
 80072f6:	e6ec      	b.n	80070d2 <_scanf_float+0x7a>
 80072f8:	1e6b      	subs	r3, r5, #1
 80072fa:	2b06      	cmp	r3, #6
 80072fc:	d825      	bhi.n	800734a <_scanf_float+0x2f2>
 80072fe:	2d02      	cmp	r5, #2
 8007300:	d836      	bhi.n	8007370 <_scanf_float+0x318>
 8007302:	455e      	cmp	r6, fp
 8007304:	f67f aee8 	bls.w	80070d8 <_scanf_float+0x80>
 8007308:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800730c:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8007310:	463a      	mov	r2, r7
 8007312:	4640      	mov	r0, r8
 8007314:	4798      	blx	r3
 8007316:	6923      	ldr	r3, [r4, #16]
 8007318:	3b01      	subs	r3, #1
 800731a:	6123      	str	r3, [r4, #16]
 800731c:	e7f1      	b.n	8007302 <_scanf_float+0x2aa>
 800731e:	9802      	ldr	r0, [sp, #8]
 8007320:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007324:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8007328:	9002      	str	r0, [sp, #8]
 800732a:	463a      	mov	r2, r7
 800732c:	4640      	mov	r0, r8
 800732e:	4798      	blx	r3
 8007330:	6923      	ldr	r3, [r4, #16]
 8007332:	3b01      	subs	r3, #1
 8007334:	6123      	str	r3, [r4, #16]
 8007336:	f10a 3aff 	add.w	sl, sl, #4294967295
 800733a:	fa5f fa8a 	uxtb.w	sl, sl
 800733e:	f1ba 0f02 	cmp.w	sl, #2
 8007342:	d1ec      	bne.n	800731e <_scanf_float+0x2c6>
 8007344:	3d03      	subs	r5, #3
 8007346:	b2ed      	uxtb	r5, r5
 8007348:	1b76      	subs	r6, r6, r5
 800734a:	6823      	ldr	r3, [r4, #0]
 800734c:	05da      	lsls	r2, r3, #23
 800734e:	d52f      	bpl.n	80073b0 <_scanf_float+0x358>
 8007350:	055b      	lsls	r3, r3, #21
 8007352:	d510      	bpl.n	8007376 <_scanf_float+0x31e>
 8007354:	455e      	cmp	r6, fp
 8007356:	f67f aebf 	bls.w	80070d8 <_scanf_float+0x80>
 800735a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800735e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8007362:	463a      	mov	r2, r7
 8007364:	4640      	mov	r0, r8
 8007366:	4798      	blx	r3
 8007368:	6923      	ldr	r3, [r4, #16]
 800736a:	3b01      	subs	r3, #1
 800736c:	6123      	str	r3, [r4, #16]
 800736e:	e7f1      	b.n	8007354 <_scanf_float+0x2fc>
 8007370:	46aa      	mov	sl, r5
 8007372:	9602      	str	r6, [sp, #8]
 8007374:	e7df      	b.n	8007336 <_scanf_float+0x2de>
 8007376:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800737a:	6923      	ldr	r3, [r4, #16]
 800737c:	2965      	cmp	r1, #101	; 0x65
 800737e:	f103 33ff 	add.w	r3, r3, #4294967295
 8007382:	f106 35ff 	add.w	r5, r6, #4294967295
 8007386:	6123      	str	r3, [r4, #16]
 8007388:	d00c      	beq.n	80073a4 <_scanf_float+0x34c>
 800738a:	2945      	cmp	r1, #69	; 0x45
 800738c:	d00a      	beq.n	80073a4 <_scanf_float+0x34c>
 800738e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007392:	463a      	mov	r2, r7
 8007394:	4640      	mov	r0, r8
 8007396:	4798      	blx	r3
 8007398:	6923      	ldr	r3, [r4, #16]
 800739a:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800739e:	3b01      	subs	r3, #1
 80073a0:	1eb5      	subs	r5, r6, #2
 80073a2:	6123      	str	r3, [r4, #16]
 80073a4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80073a8:	463a      	mov	r2, r7
 80073aa:	4640      	mov	r0, r8
 80073ac:	4798      	blx	r3
 80073ae:	462e      	mov	r6, r5
 80073b0:	6825      	ldr	r5, [r4, #0]
 80073b2:	f015 0510 	ands.w	r5, r5, #16
 80073b6:	d159      	bne.n	800746c <_scanf_float+0x414>
 80073b8:	7035      	strb	r5, [r6, #0]
 80073ba:	6823      	ldr	r3, [r4, #0]
 80073bc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80073c0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80073c4:	d11b      	bne.n	80073fe <_scanf_float+0x3a6>
 80073c6:	9b01      	ldr	r3, [sp, #4]
 80073c8:	454b      	cmp	r3, r9
 80073ca:	eba3 0209 	sub.w	r2, r3, r9
 80073ce:	d123      	bne.n	8007418 <_scanf_float+0x3c0>
 80073d0:	2200      	movs	r2, #0
 80073d2:	4659      	mov	r1, fp
 80073d4:	4640      	mov	r0, r8
 80073d6:	f000 ff81 	bl	80082dc <_strtod_r>
 80073da:	6822      	ldr	r2, [r4, #0]
 80073dc:	9b03      	ldr	r3, [sp, #12]
 80073de:	f012 0f02 	tst.w	r2, #2
 80073e2:	ec57 6b10 	vmov	r6, r7, d0
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	d021      	beq.n	800742e <_scanf_float+0x3d6>
 80073ea:	9903      	ldr	r1, [sp, #12]
 80073ec:	1d1a      	adds	r2, r3, #4
 80073ee:	600a      	str	r2, [r1, #0]
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	e9c3 6700 	strd	r6, r7, [r3]
 80073f6:	68e3      	ldr	r3, [r4, #12]
 80073f8:	3301      	adds	r3, #1
 80073fa:	60e3      	str	r3, [r4, #12]
 80073fc:	e66d      	b.n	80070da <_scanf_float+0x82>
 80073fe:	9b04      	ldr	r3, [sp, #16]
 8007400:	2b00      	cmp	r3, #0
 8007402:	d0e5      	beq.n	80073d0 <_scanf_float+0x378>
 8007404:	9905      	ldr	r1, [sp, #20]
 8007406:	230a      	movs	r3, #10
 8007408:	462a      	mov	r2, r5
 800740a:	3101      	adds	r1, #1
 800740c:	4640      	mov	r0, r8
 800740e:	f001 f855 	bl	80084bc <_strtol_r>
 8007412:	9b04      	ldr	r3, [sp, #16]
 8007414:	9e05      	ldr	r6, [sp, #20]
 8007416:	1ac2      	subs	r2, r0, r3
 8007418:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800741c:	429e      	cmp	r6, r3
 800741e:	bf28      	it	cs
 8007420:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8007424:	4912      	ldr	r1, [pc, #72]	; (8007470 <_scanf_float+0x418>)
 8007426:	4630      	mov	r0, r6
 8007428:	f000 f916 	bl	8007658 <siprintf>
 800742c:	e7d0      	b.n	80073d0 <_scanf_float+0x378>
 800742e:	9903      	ldr	r1, [sp, #12]
 8007430:	f012 0f04 	tst.w	r2, #4
 8007434:	f103 0204 	add.w	r2, r3, #4
 8007438:	600a      	str	r2, [r1, #0]
 800743a:	d1d9      	bne.n	80073f0 <_scanf_float+0x398>
 800743c:	f8d3 8000 	ldr.w	r8, [r3]
 8007440:	ee10 2a10 	vmov	r2, s0
 8007444:	ee10 0a10 	vmov	r0, s0
 8007448:	463b      	mov	r3, r7
 800744a:	4639      	mov	r1, r7
 800744c:	f7f9 fb6e 	bl	8000b2c <__aeabi_dcmpun>
 8007450:	b128      	cbz	r0, 800745e <_scanf_float+0x406>
 8007452:	4808      	ldr	r0, [pc, #32]	; (8007474 <_scanf_float+0x41c>)
 8007454:	f000 f8c6 	bl	80075e4 <nanf>
 8007458:	ed88 0a00 	vstr	s0, [r8]
 800745c:	e7cb      	b.n	80073f6 <_scanf_float+0x39e>
 800745e:	4630      	mov	r0, r6
 8007460:	4639      	mov	r1, r7
 8007462:	f7f9 fbc1 	bl	8000be8 <__aeabi_d2f>
 8007466:	f8c8 0000 	str.w	r0, [r8]
 800746a:	e7c4      	b.n	80073f6 <_scanf_float+0x39e>
 800746c:	2500      	movs	r5, #0
 800746e:	e634      	b.n	80070da <_scanf_float+0x82>
 8007470:	0800cc92 	.word	0x0800cc92
 8007474:	0800cd97 	.word	0x0800cd97

08007478 <iprintf>:
 8007478:	b40f      	push	{r0, r1, r2, r3}
 800747a:	4b0a      	ldr	r3, [pc, #40]	; (80074a4 <iprintf+0x2c>)
 800747c:	b513      	push	{r0, r1, r4, lr}
 800747e:	681c      	ldr	r4, [r3, #0]
 8007480:	b124      	cbz	r4, 800748c <iprintf+0x14>
 8007482:	69a3      	ldr	r3, [r4, #24]
 8007484:	b913      	cbnz	r3, 800748c <iprintf+0x14>
 8007486:	4620      	mov	r0, r4
 8007488:	f002 f928 	bl	80096dc <__sinit>
 800748c:	ab05      	add	r3, sp, #20
 800748e:	9a04      	ldr	r2, [sp, #16]
 8007490:	68a1      	ldr	r1, [r4, #8]
 8007492:	9301      	str	r3, [sp, #4]
 8007494:	4620      	mov	r0, r4
 8007496:	f003 fc43 	bl	800ad20 <_vfiprintf_r>
 800749a:	b002      	add	sp, #8
 800749c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80074a0:	b004      	add	sp, #16
 80074a2:	4770      	bx	lr
 80074a4:	2000000c 	.word	0x2000000c

080074a8 <_puts_r>:
 80074a8:	b570      	push	{r4, r5, r6, lr}
 80074aa:	460e      	mov	r6, r1
 80074ac:	4605      	mov	r5, r0
 80074ae:	b118      	cbz	r0, 80074b8 <_puts_r+0x10>
 80074b0:	6983      	ldr	r3, [r0, #24]
 80074b2:	b90b      	cbnz	r3, 80074b8 <_puts_r+0x10>
 80074b4:	f002 f912 	bl	80096dc <__sinit>
 80074b8:	69ab      	ldr	r3, [r5, #24]
 80074ba:	68ac      	ldr	r4, [r5, #8]
 80074bc:	b913      	cbnz	r3, 80074c4 <_puts_r+0x1c>
 80074be:	4628      	mov	r0, r5
 80074c0:	f002 f90c 	bl	80096dc <__sinit>
 80074c4:	4b2c      	ldr	r3, [pc, #176]	; (8007578 <_puts_r+0xd0>)
 80074c6:	429c      	cmp	r4, r3
 80074c8:	d120      	bne.n	800750c <_puts_r+0x64>
 80074ca:	686c      	ldr	r4, [r5, #4]
 80074cc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80074ce:	07db      	lsls	r3, r3, #31
 80074d0:	d405      	bmi.n	80074de <_puts_r+0x36>
 80074d2:	89a3      	ldrh	r3, [r4, #12]
 80074d4:	0598      	lsls	r0, r3, #22
 80074d6:	d402      	bmi.n	80074de <_puts_r+0x36>
 80074d8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80074da:	f002 fd40 	bl	8009f5e <__retarget_lock_acquire_recursive>
 80074de:	89a3      	ldrh	r3, [r4, #12]
 80074e0:	0719      	lsls	r1, r3, #28
 80074e2:	d51d      	bpl.n	8007520 <_puts_r+0x78>
 80074e4:	6923      	ldr	r3, [r4, #16]
 80074e6:	b1db      	cbz	r3, 8007520 <_puts_r+0x78>
 80074e8:	3e01      	subs	r6, #1
 80074ea:	68a3      	ldr	r3, [r4, #8]
 80074ec:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80074f0:	3b01      	subs	r3, #1
 80074f2:	60a3      	str	r3, [r4, #8]
 80074f4:	bb39      	cbnz	r1, 8007546 <_puts_r+0x9e>
 80074f6:	2b00      	cmp	r3, #0
 80074f8:	da38      	bge.n	800756c <_puts_r+0xc4>
 80074fa:	4622      	mov	r2, r4
 80074fc:	210a      	movs	r1, #10
 80074fe:	4628      	mov	r0, r5
 8007500:	f001 f866 	bl	80085d0 <__swbuf_r>
 8007504:	3001      	adds	r0, #1
 8007506:	d011      	beq.n	800752c <_puts_r+0x84>
 8007508:	250a      	movs	r5, #10
 800750a:	e011      	b.n	8007530 <_puts_r+0x88>
 800750c:	4b1b      	ldr	r3, [pc, #108]	; (800757c <_puts_r+0xd4>)
 800750e:	429c      	cmp	r4, r3
 8007510:	d101      	bne.n	8007516 <_puts_r+0x6e>
 8007512:	68ac      	ldr	r4, [r5, #8]
 8007514:	e7da      	b.n	80074cc <_puts_r+0x24>
 8007516:	4b1a      	ldr	r3, [pc, #104]	; (8007580 <_puts_r+0xd8>)
 8007518:	429c      	cmp	r4, r3
 800751a:	bf08      	it	eq
 800751c:	68ec      	ldreq	r4, [r5, #12]
 800751e:	e7d5      	b.n	80074cc <_puts_r+0x24>
 8007520:	4621      	mov	r1, r4
 8007522:	4628      	mov	r0, r5
 8007524:	f001 f8a6 	bl	8008674 <__swsetup_r>
 8007528:	2800      	cmp	r0, #0
 800752a:	d0dd      	beq.n	80074e8 <_puts_r+0x40>
 800752c:	f04f 35ff 	mov.w	r5, #4294967295
 8007530:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007532:	07da      	lsls	r2, r3, #31
 8007534:	d405      	bmi.n	8007542 <_puts_r+0x9a>
 8007536:	89a3      	ldrh	r3, [r4, #12]
 8007538:	059b      	lsls	r3, r3, #22
 800753a:	d402      	bmi.n	8007542 <_puts_r+0x9a>
 800753c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800753e:	f002 fd0f 	bl	8009f60 <__retarget_lock_release_recursive>
 8007542:	4628      	mov	r0, r5
 8007544:	bd70      	pop	{r4, r5, r6, pc}
 8007546:	2b00      	cmp	r3, #0
 8007548:	da04      	bge.n	8007554 <_puts_r+0xac>
 800754a:	69a2      	ldr	r2, [r4, #24]
 800754c:	429a      	cmp	r2, r3
 800754e:	dc06      	bgt.n	800755e <_puts_r+0xb6>
 8007550:	290a      	cmp	r1, #10
 8007552:	d004      	beq.n	800755e <_puts_r+0xb6>
 8007554:	6823      	ldr	r3, [r4, #0]
 8007556:	1c5a      	adds	r2, r3, #1
 8007558:	6022      	str	r2, [r4, #0]
 800755a:	7019      	strb	r1, [r3, #0]
 800755c:	e7c5      	b.n	80074ea <_puts_r+0x42>
 800755e:	4622      	mov	r2, r4
 8007560:	4628      	mov	r0, r5
 8007562:	f001 f835 	bl	80085d0 <__swbuf_r>
 8007566:	3001      	adds	r0, #1
 8007568:	d1bf      	bne.n	80074ea <_puts_r+0x42>
 800756a:	e7df      	b.n	800752c <_puts_r+0x84>
 800756c:	6823      	ldr	r3, [r4, #0]
 800756e:	250a      	movs	r5, #10
 8007570:	1c5a      	adds	r2, r3, #1
 8007572:	6022      	str	r2, [r4, #0]
 8007574:	701d      	strb	r5, [r3, #0]
 8007576:	e7db      	b.n	8007530 <_puts_r+0x88>
 8007578:	0800cf34 	.word	0x0800cf34
 800757c:	0800cf54 	.word	0x0800cf54
 8007580:	0800cf14 	.word	0x0800cf14

08007584 <puts>:
 8007584:	4b02      	ldr	r3, [pc, #8]	; (8007590 <puts+0xc>)
 8007586:	4601      	mov	r1, r0
 8007588:	6818      	ldr	r0, [r3, #0]
 800758a:	f7ff bf8d 	b.w	80074a8 <_puts_r>
 800758e:	bf00      	nop
 8007590:	2000000c 	.word	0x2000000c

08007594 <_sbrk_r>:
 8007594:	b538      	push	{r3, r4, r5, lr}
 8007596:	4d06      	ldr	r5, [pc, #24]	; (80075b0 <_sbrk_r+0x1c>)
 8007598:	2300      	movs	r3, #0
 800759a:	4604      	mov	r4, r0
 800759c:	4608      	mov	r0, r1
 800759e:	602b      	str	r3, [r5, #0]
 80075a0:	f7fb fc62 	bl	8002e68 <_sbrk>
 80075a4:	1c43      	adds	r3, r0, #1
 80075a6:	d102      	bne.n	80075ae <_sbrk_r+0x1a>
 80075a8:	682b      	ldr	r3, [r5, #0]
 80075aa:	b103      	cbz	r3, 80075ae <_sbrk_r+0x1a>
 80075ac:	6023      	str	r3, [r4, #0]
 80075ae:	bd38      	pop	{r3, r4, r5, pc}
 80075b0:	20000344 	.word	0x20000344

080075b4 <iscanf>:
 80075b4:	b40f      	push	{r0, r1, r2, r3}
 80075b6:	4b0a      	ldr	r3, [pc, #40]	; (80075e0 <iscanf+0x2c>)
 80075b8:	b513      	push	{r0, r1, r4, lr}
 80075ba:	681c      	ldr	r4, [r3, #0]
 80075bc:	b124      	cbz	r4, 80075c8 <iscanf+0x14>
 80075be:	69a3      	ldr	r3, [r4, #24]
 80075c0:	b913      	cbnz	r3, 80075c8 <iscanf+0x14>
 80075c2:	4620      	mov	r0, r4
 80075c4:	f002 f88a 	bl	80096dc <__sinit>
 80075c8:	ab05      	add	r3, sp, #20
 80075ca:	9a04      	ldr	r2, [sp, #16]
 80075cc:	6861      	ldr	r1, [r4, #4]
 80075ce:	9301      	str	r3, [sp, #4]
 80075d0:	4620      	mov	r0, r4
 80075d2:	f003 fe7b 	bl	800b2cc <_vfiscanf_r>
 80075d6:	b002      	add	sp, #8
 80075d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80075dc:	b004      	add	sp, #16
 80075de:	4770      	bx	lr
 80075e0:	2000000c 	.word	0x2000000c

080075e4 <nanf>:
 80075e4:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80075ec <nanf+0x8>
 80075e8:	4770      	bx	lr
 80075ea:	bf00      	nop
 80075ec:	7fc00000 	.word	0x7fc00000

080075f0 <sniprintf>:
 80075f0:	b40c      	push	{r2, r3}
 80075f2:	b530      	push	{r4, r5, lr}
 80075f4:	4b17      	ldr	r3, [pc, #92]	; (8007654 <sniprintf+0x64>)
 80075f6:	1e0c      	subs	r4, r1, #0
 80075f8:	681d      	ldr	r5, [r3, #0]
 80075fa:	b09d      	sub	sp, #116	; 0x74
 80075fc:	da08      	bge.n	8007610 <sniprintf+0x20>
 80075fe:	238b      	movs	r3, #139	; 0x8b
 8007600:	602b      	str	r3, [r5, #0]
 8007602:	f04f 30ff 	mov.w	r0, #4294967295
 8007606:	b01d      	add	sp, #116	; 0x74
 8007608:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800760c:	b002      	add	sp, #8
 800760e:	4770      	bx	lr
 8007610:	f44f 7302 	mov.w	r3, #520	; 0x208
 8007614:	f8ad 3014 	strh.w	r3, [sp, #20]
 8007618:	bf14      	ite	ne
 800761a:	f104 33ff 	addne.w	r3, r4, #4294967295
 800761e:	4623      	moveq	r3, r4
 8007620:	9304      	str	r3, [sp, #16]
 8007622:	9307      	str	r3, [sp, #28]
 8007624:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8007628:	9002      	str	r0, [sp, #8]
 800762a:	9006      	str	r0, [sp, #24]
 800762c:	f8ad 3016 	strh.w	r3, [sp, #22]
 8007630:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8007632:	ab21      	add	r3, sp, #132	; 0x84
 8007634:	a902      	add	r1, sp, #8
 8007636:	4628      	mov	r0, r5
 8007638:	9301      	str	r3, [sp, #4]
 800763a:	f003 fa47 	bl	800aacc <_svfiprintf_r>
 800763e:	1c43      	adds	r3, r0, #1
 8007640:	bfbc      	itt	lt
 8007642:	238b      	movlt	r3, #139	; 0x8b
 8007644:	602b      	strlt	r3, [r5, #0]
 8007646:	2c00      	cmp	r4, #0
 8007648:	d0dd      	beq.n	8007606 <sniprintf+0x16>
 800764a:	9b02      	ldr	r3, [sp, #8]
 800764c:	2200      	movs	r2, #0
 800764e:	701a      	strb	r2, [r3, #0]
 8007650:	e7d9      	b.n	8007606 <sniprintf+0x16>
 8007652:	bf00      	nop
 8007654:	2000000c 	.word	0x2000000c

08007658 <siprintf>:
 8007658:	b40e      	push	{r1, r2, r3}
 800765a:	b500      	push	{lr}
 800765c:	b09c      	sub	sp, #112	; 0x70
 800765e:	ab1d      	add	r3, sp, #116	; 0x74
 8007660:	9002      	str	r0, [sp, #8]
 8007662:	9006      	str	r0, [sp, #24]
 8007664:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007668:	4809      	ldr	r0, [pc, #36]	; (8007690 <siprintf+0x38>)
 800766a:	9107      	str	r1, [sp, #28]
 800766c:	9104      	str	r1, [sp, #16]
 800766e:	4909      	ldr	r1, [pc, #36]	; (8007694 <siprintf+0x3c>)
 8007670:	f853 2b04 	ldr.w	r2, [r3], #4
 8007674:	9105      	str	r1, [sp, #20]
 8007676:	6800      	ldr	r0, [r0, #0]
 8007678:	9301      	str	r3, [sp, #4]
 800767a:	a902      	add	r1, sp, #8
 800767c:	f003 fa26 	bl	800aacc <_svfiprintf_r>
 8007680:	9b02      	ldr	r3, [sp, #8]
 8007682:	2200      	movs	r2, #0
 8007684:	701a      	strb	r2, [r3, #0]
 8007686:	b01c      	add	sp, #112	; 0x70
 8007688:	f85d eb04 	ldr.w	lr, [sp], #4
 800768c:	b003      	add	sp, #12
 800768e:	4770      	bx	lr
 8007690:	2000000c 	.word	0x2000000c
 8007694:	ffff0208 	.word	0xffff0208

08007698 <sulp>:
 8007698:	b570      	push	{r4, r5, r6, lr}
 800769a:	4604      	mov	r4, r0
 800769c:	460d      	mov	r5, r1
 800769e:	ec45 4b10 	vmov	d0, r4, r5
 80076a2:	4616      	mov	r6, r2
 80076a4:	f003 f852 	bl	800a74c <__ulp>
 80076a8:	ec51 0b10 	vmov	r0, r1, d0
 80076ac:	b17e      	cbz	r6, 80076ce <sulp+0x36>
 80076ae:	f3c5 530a 	ubfx	r3, r5, #20, #11
 80076b2:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80076b6:	2b00      	cmp	r3, #0
 80076b8:	dd09      	ble.n	80076ce <sulp+0x36>
 80076ba:	051b      	lsls	r3, r3, #20
 80076bc:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 80076c0:	2400      	movs	r4, #0
 80076c2:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 80076c6:	4622      	mov	r2, r4
 80076c8:	462b      	mov	r3, r5
 80076ca:	f7f8 ff95 	bl	80005f8 <__aeabi_dmul>
 80076ce:	bd70      	pop	{r4, r5, r6, pc}

080076d0 <_strtod_l>:
 80076d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80076d4:	ed2d 8b02 	vpush	{d8}
 80076d8:	b09d      	sub	sp, #116	; 0x74
 80076da:	461f      	mov	r7, r3
 80076dc:	2300      	movs	r3, #0
 80076de:	9318      	str	r3, [sp, #96]	; 0x60
 80076e0:	4ba2      	ldr	r3, [pc, #648]	; (800796c <_strtod_l+0x29c>)
 80076e2:	9213      	str	r2, [sp, #76]	; 0x4c
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	9305      	str	r3, [sp, #20]
 80076e8:	4604      	mov	r4, r0
 80076ea:	4618      	mov	r0, r3
 80076ec:	4688      	mov	r8, r1
 80076ee:	f7f8 fd6f 	bl	80001d0 <strlen>
 80076f2:	f04f 0a00 	mov.w	sl, #0
 80076f6:	4605      	mov	r5, r0
 80076f8:	f04f 0b00 	mov.w	fp, #0
 80076fc:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8007700:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007702:	781a      	ldrb	r2, [r3, #0]
 8007704:	2a2b      	cmp	r2, #43	; 0x2b
 8007706:	d04e      	beq.n	80077a6 <_strtod_l+0xd6>
 8007708:	d83b      	bhi.n	8007782 <_strtod_l+0xb2>
 800770a:	2a0d      	cmp	r2, #13
 800770c:	d834      	bhi.n	8007778 <_strtod_l+0xa8>
 800770e:	2a08      	cmp	r2, #8
 8007710:	d834      	bhi.n	800777c <_strtod_l+0xac>
 8007712:	2a00      	cmp	r2, #0
 8007714:	d03e      	beq.n	8007794 <_strtod_l+0xc4>
 8007716:	2300      	movs	r3, #0
 8007718:	930a      	str	r3, [sp, #40]	; 0x28
 800771a:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800771c:	7833      	ldrb	r3, [r6, #0]
 800771e:	2b30      	cmp	r3, #48	; 0x30
 8007720:	f040 80b0 	bne.w	8007884 <_strtod_l+0x1b4>
 8007724:	7873      	ldrb	r3, [r6, #1]
 8007726:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800772a:	2b58      	cmp	r3, #88	; 0x58
 800772c:	d168      	bne.n	8007800 <_strtod_l+0x130>
 800772e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007730:	9301      	str	r3, [sp, #4]
 8007732:	ab18      	add	r3, sp, #96	; 0x60
 8007734:	9702      	str	r7, [sp, #8]
 8007736:	9300      	str	r3, [sp, #0]
 8007738:	4a8d      	ldr	r2, [pc, #564]	; (8007970 <_strtod_l+0x2a0>)
 800773a:	ab19      	add	r3, sp, #100	; 0x64
 800773c:	a917      	add	r1, sp, #92	; 0x5c
 800773e:	4620      	mov	r0, r4
 8007740:	f002 f900 	bl	8009944 <__gethex>
 8007744:	f010 0707 	ands.w	r7, r0, #7
 8007748:	4605      	mov	r5, r0
 800774a:	d005      	beq.n	8007758 <_strtod_l+0x88>
 800774c:	2f06      	cmp	r7, #6
 800774e:	d12c      	bne.n	80077aa <_strtod_l+0xda>
 8007750:	3601      	adds	r6, #1
 8007752:	2300      	movs	r3, #0
 8007754:	9617      	str	r6, [sp, #92]	; 0x5c
 8007756:	930a      	str	r3, [sp, #40]	; 0x28
 8007758:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800775a:	2b00      	cmp	r3, #0
 800775c:	f040 8590 	bne.w	8008280 <_strtod_l+0xbb0>
 8007760:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007762:	b1eb      	cbz	r3, 80077a0 <_strtod_l+0xd0>
 8007764:	4652      	mov	r2, sl
 8007766:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800776a:	ec43 2b10 	vmov	d0, r2, r3
 800776e:	b01d      	add	sp, #116	; 0x74
 8007770:	ecbd 8b02 	vpop	{d8}
 8007774:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007778:	2a20      	cmp	r2, #32
 800777a:	d1cc      	bne.n	8007716 <_strtod_l+0x46>
 800777c:	3301      	adds	r3, #1
 800777e:	9317      	str	r3, [sp, #92]	; 0x5c
 8007780:	e7be      	b.n	8007700 <_strtod_l+0x30>
 8007782:	2a2d      	cmp	r2, #45	; 0x2d
 8007784:	d1c7      	bne.n	8007716 <_strtod_l+0x46>
 8007786:	2201      	movs	r2, #1
 8007788:	920a      	str	r2, [sp, #40]	; 0x28
 800778a:	1c5a      	adds	r2, r3, #1
 800778c:	9217      	str	r2, [sp, #92]	; 0x5c
 800778e:	785b      	ldrb	r3, [r3, #1]
 8007790:	2b00      	cmp	r3, #0
 8007792:	d1c2      	bne.n	800771a <_strtod_l+0x4a>
 8007794:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8007796:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800779a:	2b00      	cmp	r3, #0
 800779c:	f040 856e 	bne.w	800827c <_strtod_l+0xbac>
 80077a0:	4652      	mov	r2, sl
 80077a2:	465b      	mov	r3, fp
 80077a4:	e7e1      	b.n	800776a <_strtod_l+0x9a>
 80077a6:	2200      	movs	r2, #0
 80077a8:	e7ee      	b.n	8007788 <_strtod_l+0xb8>
 80077aa:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80077ac:	b13a      	cbz	r2, 80077be <_strtod_l+0xee>
 80077ae:	2135      	movs	r1, #53	; 0x35
 80077b0:	a81a      	add	r0, sp, #104	; 0x68
 80077b2:	f003 f8d6 	bl	800a962 <__copybits>
 80077b6:	9918      	ldr	r1, [sp, #96]	; 0x60
 80077b8:	4620      	mov	r0, r4
 80077ba:	f002 fc95 	bl	800a0e8 <_Bfree>
 80077be:	3f01      	subs	r7, #1
 80077c0:	2f04      	cmp	r7, #4
 80077c2:	d806      	bhi.n	80077d2 <_strtod_l+0x102>
 80077c4:	e8df f007 	tbb	[pc, r7]
 80077c8:	1714030a 	.word	0x1714030a
 80077cc:	0a          	.byte	0x0a
 80077cd:	00          	.byte	0x00
 80077ce:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 80077d2:	0728      	lsls	r0, r5, #28
 80077d4:	d5c0      	bpl.n	8007758 <_strtod_l+0x88>
 80077d6:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 80077da:	e7bd      	b.n	8007758 <_strtod_l+0x88>
 80077dc:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 80077e0:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80077e2:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80077e6:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80077ea:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 80077ee:	e7f0      	b.n	80077d2 <_strtod_l+0x102>
 80077f0:	f8df b180 	ldr.w	fp, [pc, #384]	; 8007974 <_strtod_l+0x2a4>
 80077f4:	e7ed      	b.n	80077d2 <_strtod_l+0x102>
 80077f6:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 80077fa:	f04f 3aff 	mov.w	sl, #4294967295
 80077fe:	e7e8      	b.n	80077d2 <_strtod_l+0x102>
 8007800:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007802:	1c5a      	adds	r2, r3, #1
 8007804:	9217      	str	r2, [sp, #92]	; 0x5c
 8007806:	785b      	ldrb	r3, [r3, #1]
 8007808:	2b30      	cmp	r3, #48	; 0x30
 800780a:	d0f9      	beq.n	8007800 <_strtod_l+0x130>
 800780c:	2b00      	cmp	r3, #0
 800780e:	d0a3      	beq.n	8007758 <_strtod_l+0x88>
 8007810:	2301      	movs	r3, #1
 8007812:	f04f 0900 	mov.w	r9, #0
 8007816:	9304      	str	r3, [sp, #16]
 8007818:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800781a:	9308      	str	r3, [sp, #32]
 800781c:	f8cd 901c 	str.w	r9, [sp, #28]
 8007820:	464f      	mov	r7, r9
 8007822:	220a      	movs	r2, #10
 8007824:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8007826:	7806      	ldrb	r6, [r0, #0]
 8007828:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800782c:	b2d9      	uxtb	r1, r3
 800782e:	2909      	cmp	r1, #9
 8007830:	d92a      	bls.n	8007888 <_strtod_l+0x1b8>
 8007832:	9905      	ldr	r1, [sp, #20]
 8007834:	462a      	mov	r2, r5
 8007836:	f003 ffda 	bl	800b7ee <strncmp>
 800783a:	b398      	cbz	r0, 80078a4 <_strtod_l+0x1d4>
 800783c:	2000      	movs	r0, #0
 800783e:	4632      	mov	r2, r6
 8007840:	463d      	mov	r5, r7
 8007842:	9005      	str	r0, [sp, #20]
 8007844:	4603      	mov	r3, r0
 8007846:	2a65      	cmp	r2, #101	; 0x65
 8007848:	d001      	beq.n	800784e <_strtod_l+0x17e>
 800784a:	2a45      	cmp	r2, #69	; 0x45
 800784c:	d118      	bne.n	8007880 <_strtod_l+0x1b0>
 800784e:	b91d      	cbnz	r5, 8007858 <_strtod_l+0x188>
 8007850:	9a04      	ldr	r2, [sp, #16]
 8007852:	4302      	orrs	r2, r0
 8007854:	d09e      	beq.n	8007794 <_strtod_l+0xc4>
 8007856:	2500      	movs	r5, #0
 8007858:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 800785c:	f108 0201 	add.w	r2, r8, #1
 8007860:	9217      	str	r2, [sp, #92]	; 0x5c
 8007862:	f898 2001 	ldrb.w	r2, [r8, #1]
 8007866:	2a2b      	cmp	r2, #43	; 0x2b
 8007868:	d075      	beq.n	8007956 <_strtod_l+0x286>
 800786a:	2a2d      	cmp	r2, #45	; 0x2d
 800786c:	d07b      	beq.n	8007966 <_strtod_l+0x296>
 800786e:	f04f 0c00 	mov.w	ip, #0
 8007872:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8007876:	2909      	cmp	r1, #9
 8007878:	f240 8082 	bls.w	8007980 <_strtod_l+0x2b0>
 800787c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8007880:	2600      	movs	r6, #0
 8007882:	e09d      	b.n	80079c0 <_strtod_l+0x2f0>
 8007884:	2300      	movs	r3, #0
 8007886:	e7c4      	b.n	8007812 <_strtod_l+0x142>
 8007888:	2f08      	cmp	r7, #8
 800788a:	bfd8      	it	le
 800788c:	9907      	ldrle	r1, [sp, #28]
 800788e:	f100 0001 	add.w	r0, r0, #1
 8007892:	bfda      	itte	le
 8007894:	fb02 3301 	mlale	r3, r2, r1, r3
 8007898:	9307      	strle	r3, [sp, #28]
 800789a:	fb02 3909 	mlagt	r9, r2, r9, r3
 800789e:	3701      	adds	r7, #1
 80078a0:	9017      	str	r0, [sp, #92]	; 0x5c
 80078a2:	e7bf      	b.n	8007824 <_strtod_l+0x154>
 80078a4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80078a6:	195a      	adds	r2, r3, r5
 80078a8:	9217      	str	r2, [sp, #92]	; 0x5c
 80078aa:	5d5a      	ldrb	r2, [r3, r5]
 80078ac:	2f00      	cmp	r7, #0
 80078ae:	d037      	beq.n	8007920 <_strtod_l+0x250>
 80078b0:	9005      	str	r0, [sp, #20]
 80078b2:	463d      	mov	r5, r7
 80078b4:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 80078b8:	2b09      	cmp	r3, #9
 80078ba:	d912      	bls.n	80078e2 <_strtod_l+0x212>
 80078bc:	2301      	movs	r3, #1
 80078be:	e7c2      	b.n	8007846 <_strtod_l+0x176>
 80078c0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80078c2:	1c5a      	adds	r2, r3, #1
 80078c4:	9217      	str	r2, [sp, #92]	; 0x5c
 80078c6:	785a      	ldrb	r2, [r3, #1]
 80078c8:	3001      	adds	r0, #1
 80078ca:	2a30      	cmp	r2, #48	; 0x30
 80078cc:	d0f8      	beq.n	80078c0 <_strtod_l+0x1f0>
 80078ce:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 80078d2:	2b08      	cmp	r3, #8
 80078d4:	f200 84d9 	bhi.w	800828a <_strtod_l+0xbba>
 80078d8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80078da:	9005      	str	r0, [sp, #20]
 80078dc:	2000      	movs	r0, #0
 80078de:	9308      	str	r3, [sp, #32]
 80078e0:	4605      	mov	r5, r0
 80078e2:	3a30      	subs	r2, #48	; 0x30
 80078e4:	f100 0301 	add.w	r3, r0, #1
 80078e8:	d014      	beq.n	8007914 <_strtod_l+0x244>
 80078ea:	9905      	ldr	r1, [sp, #20]
 80078ec:	4419      	add	r1, r3
 80078ee:	9105      	str	r1, [sp, #20]
 80078f0:	462b      	mov	r3, r5
 80078f2:	eb00 0e05 	add.w	lr, r0, r5
 80078f6:	210a      	movs	r1, #10
 80078f8:	4573      	cmp	r3, lr
 80078fa:	d113      	bne.n	8007924 <_strtod_l+0x254>
 80078fc:	182b      	adds	r3, r5, r0
 80078fe:	2b08      	cmp	r3, #8
 8007900:	f105 0501 	add.w	r5, r5, #1
 8007904:	4405      	add	r5, r0
 8007906:	dc1c      	bgt.n	8007942 <_strtod_l+0x272>
 8007908:	9907      	ldr	r1, [sp, #28]
 800790a:	230a      	movs	r3, #10
 800790c:	fb03 2301 	mla	r3, r3, r1, r2
 8007910:	9307      	str	r3, [sp, #28]
 8007912:	2300      	movs	r3, #0
 8007914:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8007916:	1c51      	adds	r1, r2, #1
 8007918:	9117      	str	r1, [sp, #92]	; 0x5c
 800791a:	7852      	ldrb	r2, [r2, #1]
 800791c:	4618      	mov	r0, r3
 800791e:	e7c9      	b.n	80078b4 <_strtod_l+0x1e4>
 8007920:	4638      	mov	r0, r7
 8007922:	e7d2      	b.n	80078ca <_strtod_l+0x1fa>
 8007924:	2b08      	cmp	r3, #8
 8007926:	dc04      	bgt.n	8007932 <_strtod_l+0x262>
 8007928:	9e07      	ldr	r6, [sp, #28]
 800792a:	434e      	muls	r6, r1
 800792c:	9607      	str	r6, [sp, #28]
 800792e:	3301      	adds	r3, #1
 8007930:	e7e2      	b.n	80078f8 <_strtod_l+0x228>
 8007932:	f103 0c01 	add.w	ip, r3, #1
 8007936:	f1bc 0f10 	cmp.w	ip, #16
 800793a:	bfd8      	it	le
 800793c:	fb01 f909 	mulle.w	r9, r1, r9
 8007940:	e7f5      	b.n	800792e <_strtod_l+0x25e>
 8007942:	2d10      	cmp	r5, #16
 8007944:	bfdc      	itt	le
 8007946:	230a      	movle	r3, #10
 8007948:	fb03 2909 	mlale	r9, r3, r9, r2
 800794c:	e7e1      	b.n	8007912 <_strtod_l+0x242>
 800794e:	2300      	movs	r3, #0
 8007950:	9305      	str	r3, [sp, #20]
 8007952:	2301      	movs	r3, #1
 8007954:	e77c      	b.n	8007850 <_strtod_l+0x180>
 8007956:	f04f 0c00 	mov.w	ip, #0
 800795a:	f108 0202 	add.w	r2, r8, #2
 800795e:	9217      	str	r2, [sp, #92]	; 0x5c
 8007960:	f898 2002 	ldrb.w	r2, [r8, #2]
 8007964:	e785      	b.n	8007872 <_strtod_l+0x1a2>
 8007966:	f04f 0c01 	mov.w	ip, #1
 800796a:	e7f6      	b.n	800795a <_strtod_l+0x28a>
 800796c:	0800cfdc 	.word	0x0800cfdc
 8007970:	0800cc98 	.word	0x0800cc98
 8007974:	7ff00000 	.word	0x7ff00000
 8007978:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800797a:	1c51      	adds	r1, r2, #1
 800797c:	9117      	str	r1, [sp, #92]	; 0x5c
 800797e:	7852      	ldrb	r2, [r2, #1]
 8007980:	2a30      	cmp	r2, #48	; 0x30
 8007982:	d0f9      	beq.n	8007978 <_strtod_l+0x2a8>
 8007984:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8007988:	2908      	cmp	r1, #8
 800798a:	f63f af79 	bhi.w	8007880 <_strtod_l+0x1b0>
 800798e:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 8007992:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8007994:	9206      	str	r2, [sp, #24]
 8007996:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8007998:	1c51      	adds	r1, r2, #1
 800799a:	9117      	str	r1, [sp, #92]	; 0x5c
 800799c:	7852      	ldrb	r2, [r2, #1]
 800799e:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 80079a2:	2e09      	cmp	r6, #9
 80079a4:	d937      	bls.n	8007a16 <_strtod_l+0x346>
 80079a6:	9e06      	ldr	r6, [sp, #24]
 80079a8:	1b89      	subs	r1, r1, r6
 80079aa:	2908      	cmp	r1, #8
 80079ac:	f644 661f 	movw	r6, #19999	; 0x4e1f
 80079b0:	dc02      	bgt.n	80079b8 <_strtod_l+0x2e8>
 80079b2:	4576      	cmp	r6, lr
 80079b4:	bfa8      	it	ge
 80079b6:	4676      	movge	r6, lr
 80079b8:	f1bc 0f00 	cmp.w	ip, #0
 80079bc:	d000      	beq.n	80079c0 <_strtod_l+0x2f0>
 80079be:	4276      	negs	r6, r6
 80079c0:	2d00      	cmp	r5, #0
 80079c2:	d14d      	bne.n	8007a60 <_strtod_l+0x390>
 80079c4:	9904      	ldr	r1, [sp, #16]
 80079c6:	4301      	orrs	r1, r0
 80079c8:	f47f aec6 	bne.w	8007758 <_strtod_l+0x88>
 80079cc:	2b00      	cmp	r3, #0
 80079ce:	f47f aee1 	bne.w	8007794 <_strtod_l+0xc4>
 80079d2:	2a69      	cmp	r2, #105	; 0x69
 80079d4:	d027      	beq.n	8007a26 <_strtod_l+0x356>
 80079d6:	dc24      	bgt.n	8007a22 <_strtod_l+0x352>
 80079d8:	2a49      	cmp	r2, #73	; 0x49
 80079da:	d024      	beq.n	8007a26 <_strtod_l+0x356>
 80079dc:	2a4e      	cmp	r2, #78	; 0x4e
 80079de:	f47f aed9 	bne.w	8007794 <_strtod_l+0xc4>
 80079e2:	499f      	ldr	r1, [pc, #636]	; (8007c60 <_strtod_l+0x590>)
 80079e4:	a817      	add	r0, sp, #92	; 0x5c
 80079e6:	f002 fa05 	bl	8009df4 <__match>
 80079ea:	2800      	cmp	r0, #0
 80079ec:	f43f aed2 	beq.w	8007794 <_strtod_l+0xc4>
 80079f0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80079f2:	781b      	ldrb	r3, [r3, #0]
 80079f4:	2b28      	cmp	r3, #40	; 0x28
 80079f6:	d12d      	bne.n	8007a54 <_strtod_l+0x384>
 80079f8:	499a      	ldr	r1, [pc, #616]	; (8007c64 <_strtod_l+0x594>)
 80079fa:	aa1a      	add	r2, sp, #104	; 0x68
 80079fc:	a817      	add	r0, sp, #92	; 0x5c
 80079fe:	f002 fa0d 	bl	8009e1c <__hexnan>
 8007a02:	2805      	cmp	r0, #5
 8007a04:	d126      	bne.n	8007a54 <_strtod_l+0x384>
 8007a06:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007a08:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 8007a0c:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8007a10:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8007a14:	e6a0      	b.n	8007758 <_strtod_l+0x88>
 8007a16:	210a      	movs	r1, #10
 8007a18:	fb01 2e0e 	mla	lr, r1, lr, r2
 8007a1c:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8007a20:	e7b9      	b.n	8007996 <_strtod_l+0x2c6>
 8007a22:	2a6e      	cmp	r2, #110	; 0x6e
 8007a24:	e7db      	b.n	80079de <_strtod_l+0x30e>
 8007a26:	4990      	ldr	r1, [pc, #576]	; (8007c68 <_strtod_l+0x598>)
 8007a28:	a817      	add	r0, sp, #92	; 0x5c
 8007a2a:	f002 f9e3 	bl	8009df4 <__match>
 8007a2e:	2800      	cmp	r0, #0
 8007a30:	f43f aeb0 	beq.w	8007794 <_strtod_l+0xc4>
 8007a34:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007a36:	498d      	ldr	r1, [pc, #564]	; (8007c6c <_strtod_l+0x59c>)
 8007a38:	3b01      	subs	r3, #1
 8007a3a:	a817      	add	r0, sp, #92	; 0x5c
 8007a3c:	9317      	str	r3, [sp, #92]	; 0x5c
 8007a3e:	f002 f9d9 	bl	8009df4 <__match>
 8007a42:	b910      	cbnz	r0, 8007a4a <_strtod_l+0x37a>
 8007a44:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007a46:	3301      	adds	r3, #1
 8007a48:	9317      	str	r3, [sp, #92]	; 0x5c
 8007a4a:	f8df b230 	ldr.w	fp, [pc, #560]	; 8007c7c <_strtod_l+0x5ac>
 8007a4e:	f04f 0a00 	mov.w	sl, #0
 8007a52:	e681      	b.n	8007758 <_strtod_l+0x88>
 8007a54:	4886      	ldr	r0, [pc, #536]	; (8007c70 <_strtod_l+0x5a0>)
 8007a56:	f003 fe47 	bl	800b6e8 <nan>
 8007a5a:	ec5b ab10 	vmov	sl, fp, d0
 8007a5e:	e67b      	b.n	8007758 <_strtod_l+0x88>
 8007a60:	9b05      	ldr	r3, [sp, #20]
 8007a62:	9807      	ldr	r0, [sp, #28]
 8007a64:	1af3      	subs	r3, r6, r3
 8007a66:	2f00      	cmp	r7, #0
 8007a68:	bf08      	it	eq
 8007a6a:	462f      	moveq	r7, r5
 8007a6c:	2d10      	cmp	r5, #16
 8007a6e:	9306      	str	r3, [sp, #24]
 8007a70:	46a8      	mov	r8, r5
 8007a72:	bfa8      	it	ge
 8007a74:	f04f 0810 	movge.w	r8, #16
 8007a78:	f7f8 fd44 	bl	8000504 <__aeabi_ui2d>
 8007a7c:	2d09      	cmp	r5, #9
 8007a7e:	4682      	mov	sl, r0
 8007a80:	468b      	mov	fp, r1
 8007a82:	dd13      	ble.n	8007aac <_strtod_l+0x3dc>
 8007a84:	4b7b      	ldr	r3, [pc, #492]	; (8007c74 <_strtod_l+0x5a4>)
 8007a86:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8007a8a:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8007a8e:	f7f8 fdb3 	bl	80005f8 <__aeabi_dmul>
 8007a92:	4682      	mov	sl, r0
 8007a94:	4648      	mov	r0, r9
 8007a96:	468b      	mov	fp, r1
 8007a98:	f7f8 fd34 	bl	8000504 <__aeabi_ui2d>
 8007a9c:	4602      	mov	r2, r0
 8007a9e:	460b      	mov	r3, r1
 8007aa0:	4650      	mov	r0, sl
 8007aa2:	4659      	mov	r1, fp
 8007aa4:	f7f8 fbf2 	bl	800028c <__adddf3>
 8007aa8:	4682      	mov	sl, r0
 8007aaa:	468b      	mov	fp, r1
 8007aac:	2d0f      	cmp	r5, #15
 8007aae:	dc38      	bgt.n	8007b22 <_strtod_l+0x452>
 8007ab0:	9b06      	ldr	r3, [sp, #24]
 8007ab2:	2b00      	cmp	r3, #0
 8007ab4:	f43f ae50 	beq.w	8007758 <_strtod_l+0x88>
 8007ab8:	dd24      	ble.n	8007b04 <_strtod_l+0x434>
 8007aba:	2b16      	cmp	r3, #22
 8007abc:	dc0b      	bgt.n	8007ad6 <_strtod_l+0x406>
 8007abe:	496d      	ldr	r1, [pc, #436]	; (8007c74 <_strtod_l+0x5a4>)
 8007ac0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8007ac4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007ac8:	4652      	mov	r2, sl
 8007aca:	465b      	mov	r3, fp
 8007acc:	f7f8 fd94 	bl	80005f8 <__aeabi_dmul>
 8007ad0:	4682      	mov	sl, r0
 8007ad2:	468b      	mov	fp, r1
 8007ad4:	e640      	b.n	8007758 <_strtod_l+0x88>
 8007ad6:	9a06      	ldr	r2, [sp, #24]
 8007ad8:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 8007adc:	4293      	cmp	r3, r2
 8007ade:	db20      	blt.n	8007b22 <_strtod_l+0x452>
 8007ae0:	4c64      	ldr	r4, [pc, #400]	; (8007c74 <_strtod_l+0x5a4>)
 8007ae2:	f1c5 050f 	rsb	r5, r5, #15
 8007ae6:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8007aea:	4652      	mov	r2, sl
 8007aec:	465b      	mov	r3, fp
 8007aee:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007af2:	f7f8 fd81 	bl	80005f8 <__aeabi_dmul>
 8007af6:	9b06      	ldr	r3, [sp, #24]
 8007af8:	1b5d      	subs	r5, r3, r5
 8007afa:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8007afe:	e9d4 2300 	ldrd	r2, r3, [r4]
 8007b02:	e7e3      	b.n	8007acc <_strtod_l+0x3fc>
 8007b04:	9b06      	ldr	r3, [sp, #24]
 8007b06:	3316      	adds	r3, #22
 8007b08:	db0b      	blt.n	8007b22 <_strtod_l+0x452>
 8007b0a:	9b05      	ldr	r3, [sp, #20]
 8007b0c:	1b9e      	subs	r6, r3, r6
 8007b0e:	4b59      	ldr	r3, [pc, #356]	; (8007c74 <_strtod_l+0x5a4>)
 8007b10:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 8007b14:	e9d6 2300 	ldrd	r2, r3, [r6]
 8007b18:	4650      	mov	r0, sl
 8007b1a:	4659      	mov	r1, fp
 8007b1c:	f7f8 fe96 	bl	800084c <__aeabi_ddiv>
 8007b20:	e7d6      	b.n	8007ad0 <_strtod_l+0x400>
 8007b22:	9b06      	ldr	r3, [sp, #24]
 8007b24:	eba5 0808 	sub.w	r8, r5, r8
 8007b28:	4498      	add	r8, r3
 8007b2a:	f1b8 0f00 	cmp.w	r8, #0
 8007b2e:	dd74      	ble.n	8007c1a <_strtod_l+0x54a>
 8007b30:	f018 030f 	ands.w	r3, r8, #15
 8007b34:	d00a      	beq.n	8007b4c <_strtod_l+0x47c>
 8007b36:	494f      	ldr	r1, [pc, #316]	; (8007c74 <_strtod_l+0x5a4>)
 8007b38:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8007b3c:	4652      	mov	r2, sl
 8007b3e:	465b      	mov	r3, fp
 8007b40:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007b44:	f7f8 fd58 	bl	80005f8 <__aeabi_dmul>
 8007b48:	4682      	mov	sl, r0
 8007b4a:	468b      	mov	fp, r1
 8007b4c:	f038 080f 	bics.w	r8, r8, #15
 8007b50:	d04f      	beq.n	8007bf2 <_strtod_l+0x522>
 8007b52:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8007b56:	dd22      	ble.n	8007b9e <_strtod_l+0x4ce>
 8007b58:	2500      	movs	r5, #0
 8007b5a:	462e      	mov	r6, r5
 8007b5c:	9507      	str	r5, [sp, #28]
 8007b5e:	9505      	str	r5, [sp, #20]
 8007b60:	2322      	movs	r3, #34	; 0x22
 8007b62:	f8df b118 	ldr.w	fp, [pc, #280]	; 8007c7c <_strtod_l+0x5ac>
 8007b66:	6023      	str	r3, [r4, #0]
 8007b68:	f04f 0a00 	mov.w	sl, #0
 8007b6c:	9b07      	ldr	r3, [sp, #28]
 8007b6e:	2b00      	cmp	r3, #0
 8007b70:	f43f adf2 	beq.w	8007758 <_strtod_l+0x88>
 8007b74:	9918      	ldr	r1, [sp, #96]	; 0x60
 8007b76:	4620      	mov	r0, r4
 8007b78:	f002 fab6 	bl	800a0e8 <_Bfree>
 8007b7c:	9905      	ldr	r1, [sp, #20]
 8007b7e:	4620      	mov	r0, r4
 8007b80:	f002 fab2 	bl	800a0e8 <_Bfree>
 8007b84:	4631      	mov	r1, r6
 8007b86:	4620      	mov	r0, r4
 8007b88:	f002 faae 	bl	800a0e8 <_Bfree>
 8007b8c:	9907      	ldr	r1, [sp, #28]
 8007b8e:	4620      	mov	r0, r4
 8007b90:	f002 faaa 	bl	800a0e8 <_Bfree>
 8007b94:	4629      	mov	r1, r5
 8007b96:	4620      	mov	r0, r4
 8007b98:	f002 faa6 	bl	800a0e8 <_Bfree>
 8007b9c:	e5dc      	b.n	8007758 <_strtod_l+0x88>
 8007b9e:	4b36      	ldr	r3, [pc, #216]	; (8007c78 <_strtod_l+0x5a8>)
 8007ba0:	9304      	str	r3, [sp, #16]
 8007ba2:	2300      	movs	r3, #0
 8007ba4:	ea4f 1828 	mov.w	r8, r8, asr #4
 8007ba8:	4650      	mov	r0, sl
 8007baa:	4659      	mov	r1, fp
 8007bac:	4699      	mov	r9, r3
 8007bae:	f1b8 0f01 	cmp.w	r8, #1
 8007bb2:	dc21      	bgt.n	8007bf8 <_strtod_l+0x528>
 8007bb4:	b10b      	cbz	r3, 8007bba <_strtod_l+0x4ea>
 8007bb6:	4682      	mov	sl, r0
 8007bb8:	468b      	mov	fp, r1
 8007bba:	4b2f      	ldr	r3, [pc, #188]	; (8007c78 <_strtod_l+0x5a8>)
 8007bbc:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8007bc0:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 8007bc4:	4652      	mov	r2, sl
 8007bc6:	465b      	mov	r3, fp
 8007bc8:	e9d9 0100 	ldrd	r0, r1, [r9]
 8007bcc:	f7f8 fd14 	bl	80005f8 <__aeabi_dmul>
 8007bd0:	4b2a      	ldr	r3, [pc, #168]	; (8007c7c <_strtod_l+0x5ac>)
 8007bd2:	460a      	mov	r2, r1
 8007bd4:	400b      	ands	r3, r1
 8007bd6:	492a      	ldr	r1, [pc, #168]	; (8007c80 <_strtod_l+0x5b0>)
 8007bd8:	428b      	cmp	r3, r1
 8007bda:	4682      	mov	sl, r0
 8007bdc:	d8bc      	bhi.n	8007b58 <_strtod_l+0x488>
 8007bde:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8007be2:	428b      	cmp	r3, r1
 8007be4:	bf86      	itte	hi
 8007be6:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 8007c84 <_strtod_l+0x5b4>
 8007bea:	f04f 3aff 	movhi.w	sl, #4294967295
 8007bee:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8007bf2:	2300      	movs	r3, #0
 8007bf4:	9304      	str	r3, [sp, #16]
 8007bf6:	e084      	b.n	8007d02 <_strtod_l+0x632>
 8007bf8:	f018 0f01 	tst.w	r8, #1
 8007bfc:	d005      	beq.n	8007c0a <_strtod_l+0x53a>
 8007bfe:	9b04      	ldr	r3, [sp, #16]
 8007c00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c04:	f7f8 fcf8 	bl	80005f8 <__aeabi_dmul>
 8007c08:	2301      	movs	r3, #1
 8007c0a:	9a04      	ldr	r2, [sp, #16]
 8007c0c:	3208      	adds	r2, #8
 8007c0e:	f109 0901 	add.w	r9, r9, #1
 8007c12:	ea4f 0868 	mov.w	r8, r8, asr #1
 8007c16:	9204      	str	r2, [sp, #16]
 8007c18:	e7c9      	b.n	8007bae <_strtod_l+0x4de>
 8007c1a:	d0ea      	beq.n	8007bf2 <_strtod_l+0x522>
 8007c1c:	f1c8 0800 	rsb	r8, r8, #0
 8007c20:	f018 020f 	ands.w	r2, r8, #15
 8007c24:	d00a      	beq.n	8007c3c <_strtod_l+0x56c>
 8007c26:	4b13      	ldr	r3, [pc, #76]	; (8007c74 <_strtod_l+0x5a4>)
 8007c28:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007c2c:	4650      	mov	r0, sl
 8007c2e:	4659      	mov	r1, fp
 8007c30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c34:	f7f8 fe0a 	bl	800084c <__aeabi_ddiv>
 8007c38:	4682      	mov	sl, r0
 8007c3a:	468b      	mov	fp, r1
 8007c3c:	ea5f 1828 	movs.w	r8, r8, asr #4
 8007c40:	d0d7      	beq.n	8007bf2 <_strtod_l+0x522>
 8007c42:	f1b8 0f1f 	cmp.w	r8, #31
 8007c46:	dd1f      	ble.n	8007c88 <_strtod_l+0x5b8>
 8007c48:	2500      	movs	r5, #0
 8007c4a:	462e      	mov	r6, r5
 8007c4c:	9507      	str	r5, [sp, #28]
 8007c4e:	9505      	str	r5, [sp, #20]
 8007c50:	2322      	movs	r3, #34	; 0x22
 8007c52:	f04f 0a00 	mov.w	sl, #0
 8007c56:	f04f 0b00 	mov.w	fp, #0
 8007c5a:	6023      	str	r3, [r4, #0]
 8007c5c:	e786      	b.n	8007b6c <_strtod_l+0x49c>
 8007c5e:	bf00      	nop
 8007c60:	0800cc6d 	.word	0x0800cc6d
 8007c64:	0800ccac 	.word	0x0800ccac
 8007c68:	0800cc65 	.word	0x0800cc65
 8007c6c:	0800ce9c 	.word	0x0800ce9c
 8007c70:	0800cd97 	.word	0x0800cd97
 8007c74:	0800d078 	.word	0x0800d078
 8007c78:	0800d050 	.word	0x0800d050
 8007c7c:	7ff00000 	.word	0x7ff00000
 8007c80:	7ca00000 	.word	0x7ca00000
 8007c84:	7fefffff 	.word	0x7fefffff
 8007c88:	f018 0310 	ands.w	r3, r8, #16
 8007c8c:	bf18      	it	ne
 8007c8e:	236a      	movne	r3, #106	; 0x6a
 8007c90:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 8008040 <_strtod_l+0x970>
 8007c94:	9304      	str	r3, [sp, #16]
 8007c96:	4650      	mov	r0, sl
 8007c98:	4659      	mov	r1, fp
 8007c9a:	2300      	movs	r3, #0
 8007c9c:	f018 0f01 	tst.w	r8, #1
 8007ca0:	d004      	beq.n	8007cac <_strtod_l+0x5dc>
 8007ca2:	e9d9 2300 	ldrd	r2, r3, [r9]
 8007ca6:	f7f8 fca7 	bl	80005f8 <__aeabi_dmul>
 8007caa:	2301      	movs	r3, #1
 8007cac:	ea5f 0868 	movs.w	r8, r8, asr #1
 8007cb0:	f109 0908 	add.w	r9, r9, #8
 8007cb4:	d1f2      	bne.n	8007c9c <_strtod_l+0x5cc>
 8007cb6:	b10b      	cbz	r3, 8007cbc <_strtod_l+0x5ec>
 8007cb8:	4682      	mov	sl, r0
 8007cba:	468b      	mov	fp, r1
 8007cbc:	9b04      	ldr	r3, [sp, #16]
 8007cbe:	b1c3      	cbz	r3, 8007cf2 <_strtod_l+0x622>
 8007cc0:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8007cc4:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8007cc8:	2b00      	cmp	r3, #0
 8007cca:	4659      	mov	r1, fp
 8007ccc:	dd11      	ble.n	8007cf2 <_strtod_l+0x622>
 8007cce:	2b1f      	cmp	r3, #31
 8007cd0:	f340 8124 	ble.w	8007f1c <_strtod_l+0x84c>
 8007cd4:	2b34      	cmp	r3, #52	; 0x34
 8007cd6:	bfde      	ittt	le
 8007cd8:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8007cdc:	f04f 33ff 	movle.w	r3, #4294967295
 8007ce0:	fa03 f202 	lslle.w	r2, r3, r2
 8007ce4:	f04f 0a00 	mov.w	sl, #0
 8007ce8:	bfcc      	ite	gt
 8007cea:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8007cee:	ea02 0b01 	andle.w	fp, r2, r1
 8007cf2:	2200      	movs	r2, #0
 8007cf4:	2300      	movs	r3, #0
 8007cf6:	4650      	mov	r0, sl
 8007cf8:	4659      	mov	r1, fp
 8007cfa:	f7f8 fee5 	bl	8000ac8 <__aeabi_dcmpeq>
 8007cfe:	2800      	cmp	r0, #0
 8007d00:	d1a2      	bne.n	8007c48 <_strtod_l+0x578>
 8007d02:	9b07      	ldr	r3, [sp, #28]
 8007d04:	9300      	str	r3, [sp, #0]
 8007d06:	9908      	ldr	r1, [sp, #32]
 8007d08:	462b      	mov	r3, r5
 8007d0a:	463a      	mov	r2, r7
 8007d0c:	4620      	mov	r0, r4
 8007d0e:	f002 fa53 	bl	800a1b8 <__s2b>
 8007d12:	9007      	str	r0, [sp, #28]
 8007d14:	2800      	cmp	r0, #0
 8007d16:	f43f af1f 	beq.w	8007b58 <_strtod_l+0x488>
 8007d1a:	9b05      	ldr	r3, [sp, #20]
 8007d1c:	1b9e      	subs	r6, r3, r6
 8007d1e:	9b06      	ldr	r3, [sp, #24]
 8007d20:	2b00      	cmp	r3, #0
 8007d22:	bfb4      	ite	lt
 8007d24:	4633      	movlt	r3, r6
 8007d26:	2300      	movge	r3, #0
 8007d28:	930c      	str	r3, [sp, #48]	; 0x30
 8007d2a:	9b06      	ldr	r3, [sp, #24]
 8007d2c:	2500      	movs	r5, #0
 8007d2e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8007d32:	9312      	str	r3, [sp, #72]	; 0x48
 8007d34:	462e      	mov	r6, r5
 8007d36:	9b07      	ldr	r3, [sp, #28]
 8007d38:	4620      	mov	r0, r4
 8007d3a:	6859      	ldr	r1, [r3, #4]
 8007d3c:	f002 f994 	bl	800a068 <_Balloc>
 8007d40:	9005      	str	r0, [sp, #20]
 8007d42:	2800      	cmp	r0, #0
 8007d44:	f43f af0c 	beq.w	8007b60 <_strtod_l+0x490>
 8007d48:	9b07      	ldr	r3, [sp, #28]
 8007d4a:	691a      	ldr	r2, [r3, #16]
 8007d4c:	3202      	adds	r2, #2
 8007d4e:	f103 010c 	add.w	r1, r3, #12
 8007d52:	0092      	lsls	r2, r2, #2
 8007d54:	300c      	adds	r0, #12
 8007d56:	f7fe fc1f 	bl	8006598 <memcpy>
 8007d5a:	ec4b ab10 	vmov	d0, sl, fp
 8007d5e:	aa1a      	add	r2, sp, #104	; 0x68
 8007d60:	a919      	add	r1, sp, #100	; 0x64
 8007d62:	4620      	mov	r0, r4
 8007d64:	f002 fd6e 	bl	800a844 <__d2b>
 8007d68:	ec4b ab18 	vmov	d8, sl, fp
 8007d6c:	9018      	str	r0, [sp, #96]	; 0x60
 8007d6e:	2800      	cmp	r0, #0
 8007d70:	f43f aef6 	beq.w	8007b60 <_strtod_l+0x490>
 8007d74:	2101      	movs	r1, #1
 8007d76:	4620      	mov	r0, r4
 8007d78:	f002 fab8 	bl	800a2ec <__i2b>
 8007d7c:	4606      	mov	r6, r0
 8007d7e:	2800      	cmp	r0, #0
 8007d80:	f43f aeee 	beq.w	8007b60 <_strtod_l+0x490>
 8007d84:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007d86:	9904      	ldr	r1, [sp, #16]
 8007d88:	2b00      	cmp	r3, #0
 8007d8a:	bfab      	itete	ge
 8007d8c:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 8007d8e:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 8007d90:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 8007d92:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 8007d96:	bfac      	ite	ge
 8007d98:	eb03 0902 	addge.w	r9, r3, r2
 8007d9c:	1ad7      	sublt	r7, r2, r3
 8007d9e:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8007da0:	eba3 0801 	sub.w	r8, r3, r1
 8007da4:	4490      	add	r8, r2
 8007da6:	4ba1      	ldr	r3, [pc, #644]	; (800802c <_strtod_l+0x95c>)
 8007da8:	f108 38ff 	add.w	r8, r8, #4294967295
 8007dac:	4598      	cmp	r8, r3
 8007dae:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8007db2:	f280 80c7 	bge.w	8007f44 <_strtod_l+0x874>
 8007db6:	eba3 0308 	sub.w	r3, r3, r8
 8007dba:	2b1f      	cmp	r3, #31
 8007dbc:	eba2 0203 	sub.w	r2, r2, r3
 8007dc0:	f04f 0101 	mov.w	r1, #1
 8007dc4:	f300 80b1 	bgt.w	8007f2a <_strtod_l+0x85a>
 8007dc8:	fa01 f303 	lsl.w	r3, r1, r3
 8007dcc:	930d      	str	r3, [sp, #52]	; 0x34
 8007dce:	2300      	movs	r3, #0
 8007dd0:	9308      	str	r3, [sp, #32]
 8007dd2:	eb09 0802 	add.w	r8, r9, r2
 8007dd6:	9b04      	ldr	r3, [sp, #16]
 8007dd8:	45c1      	cmp	r9, r8
 8007dda:	4417      	add	r7, r2
 8007ddc:	441f      	add	r7, r3
 8007dde:	464b      	mov	r3, r9
 8007de0:	bfa8      	it	ge
 8007de2:	4643      	movge	r3, r8
 8007de4:	42bb      	cmp	r3, r7
 8007de6:	bfa8      	it	ge
 8007de8:	463b      	movge	r3, r7
 8007dea:	2b00      	cmp	r3, #0
 8007dec:	bfc2      	ittt	gt
 8007dee:	eba8 0803 	subgt.w	r8, r8, r3
 8007df2:	1aff      	subgt	r7, r7, r3
 8007df4:	eba9 0903 	subgt.w	r9, r9, r3
 8007df8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007dfa:	2b00      	cmp	r3, #0
 8007dfc:	dd17      	ble.n	8007e2e <_strtod_l+0x75e>
 8007dfe:	4631      	mov	r1, r6
 8007e00:	461a      	mov	r2, r3
 8007e02:	4620      	mov	r0, r4
 8007e04:	f002 fb32 	bl	800a46c <__pow5mult>
 8007e08:	4606      	mov	r6, r0
 8007e0a:	2800      	cmp	r0, #0
 8007e0c:	f43f aea8 	beq.w	8007b60 <_strtod_l+0x490>
 8007e10:	4601      	mov	r1, r0
 8007e12:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8007e14:	4620      	mov	r0, r4
 8007e16:	f002 fa7f 	bl	800a318 <__multiply>
 8007e1a:	900b      	str	r0, [sp, #44]	; 0x2c
 8007e1c:	2800      	cmp	r0, #0
 8007e1e:	f43f ae9f 	beq.w	8007b60 <_strtod_l+0x490>
 8007e22:	9918      	ldr	r1, [sp, #96]	; 0x60
 8007e24:	4620      	mov	r0, r4
 8007e26:	f002 f95f 	bl	800a0e8 <_Bfree>
 8007e2a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007e2c:	9318      	str	r3, [sp, #96]	; 0x60
 8007e2e:	f1b8 0f00 	cmp.w	r8, #0
 8007e32:	f300 808c 	bgt.w	8007f4e <_strtod_l+0x87e>
 8007e36:	9b06      	ldr	r3, [sp, #24]
 8007e38:	2b00      	cmp	r3, #0
 8007e3a:	dd08      	ble.n	8007e4e <_strtod_l+0x77e>
 8007e3c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8007e3e:	9905      	ldr	r1, [sp, #20]
 8007e40:	4620      	mov	r0, r4
 8007e42:	f002 fb13 	bl	800a46c <__pow5mult>
 8007e46:	9005      	str	r0, [sp, #20]
 8007e48:	2800      	cmp	r0, #0
 8007e4a:	f43f ae89 	beq.w	8007b60 <_strtod_l+0x490>
 8007e4e:	2f00      	cmp	r7, #0
 8007e50:	dd08      	ble.n	8007e64 <_strtod_l+0x794>
 8007e52:	9905      	ldr	r1, [sp, #20]
 8007e54:	463a      	mov	r2, r7
 8007e56:	4620      	mov	r0, r4
 8007e58:	f002 fb62 	bl	800a520 <__lshift>
 8007e5c:	9005      	str	r0, [sp, #20]
 8007e5e:	2800      	cmp	r0, #0
 8007e60:	f43f ae7e 	beq.w	8007b60 <_strtod_l+0x490>
 8007e64:	f1b9 0f00 	cmp.w	r9, #0
 8007e68:	dd08      	ble.n	8007e7c <_strtod_l+0x7ac>
 8007e6a:	4631      	mov	r1, r6
 8007e6c:	464a      	mov	r2, r9
 8007e6e:	4620      	mov	r0, r4
 8007e70:	f002 fb56 	bl	800a520 <__lshift>
 8007e74:	4606      	mov	r6, r0
 8007e76:	2800      	cmp	r0, #0
 8007e78:	f43f ae72 	beq.w	8007b60 <_strtod_l+0x490>
 8007e7c:	9a05      	ldr	r2, [sp, #20]
 8007e7e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8007e80:	4620      	mov	r0, r4
 8007e82:	f002 fbd9 	bl	800a638 <__mdiff>
 8007e86:	4605      	mov	r5, r0
 8007e88:	2800      	cmp	r0, #0
 8007e8a:	f43f ae69 	beq.w	8007b60 <_strtod_l+0x490>
 8007e8e:	68c3      	ldr	r3, [r0, #12]
 8007e90:	930b      	str	r3, [sp, #44]	; 0x2c
 8007e92:	2300      	movs	r3, #0
 8007e94:	60c3      	str	r3, [r0, #12]
 8007e96:	4631      	mov	r1, r6
 8007e98:	f002 fbb2 	bl	800a600 <__mcmp>
 8007e9c:	2800      	cmp	r0, #0
 8007e9e:	da60      	bge.n	8007f62 <_strtod_l+0x892>
 8007ea0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007ea2:	ea53 030a 	orrs.w	r3, r3, sl
 8007ea6:	f040 8082 	bne.w	8007fae <_strtod_l+0x8de>
 8007eaa:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007eae:	2b00      	cmp	r3, #0
 8007eb0:	d17d      	bne.n	8007fae <_strtod_l+0x8de>
 8007eb2:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8007eb6:	0d1b      	lsrs	r3, r3, #20
 8007eb8:	051b      	lsls	r3, r3, #20
 8007eba:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8007ebe:	d976      	bls.n	8007fae <_strtod_l+0x8de>
 8007ec0:	696b      	ldr	r3, [r5, #20]
 8007ec2:	b913      	cbnz	r3, 8007eca <_strtod_l+0x7fa>
 8007ec4:	692b      	ldr	r3, [r5, #16]
 8007ec6:	2b01      	cmp	r3, #1
 8007ec8:	dd71      	ble.n	8007fae <_strtod_l+0x8de>
 8007eca:	4629      	mov	r1, r5
 8007ecc:	2201      	movs	r2, #1
 8007ece:	4620      	mov	r0, r4
 8007ed0:	f002 fb26 	bl	800a520 <__lshift>
 8007ed4:	4631      	mov	r1, r6
 8007ed6:	4605      	mov	r5, r0
 8007ed8:	f002 fb92 	bl	800a600 <__mcmp>
 8007edc:	2800      	cmp	r0, #0
 8007ede:	dd66      	ble.n	8007fae <_strtod_l+0x8de>
 8007ee0:	9904      	ldr	r1, [sp, #16]
 8007ee2:	4a53      	ldr	r2, [pc, #332]	; (8008030 <_strtod_l+0x960>)
 8007ee4:	465b      	mov	r3, fp
 8007ee6:	2900      	cmp	r1, #0
 8007ee8:	f000 8081 	beq.w	8007fee <_strtod_l+0x91e>
 8007eec:	ea02 010b 	and.w	r1, r2, fp
 8007ef0:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8007ef4:	dc7b      	bgt.n	8007fee <_strtod_l+0x91e>
 8007ef6:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8007efa:	f77f aea9 	ble.w	8007c50 <_strtod_l+0x580>
 8007efe:	4b4d      	ldr	r3, [pc, #308]	; (8008034 <_strtod_l+0x964>)
 8007f00:	4650      	mov	r0, sl
 8007f02:	4659      	mov	r1, fp
 8007f04:	2200      	movs	r2, #0
 8007f06:	f7f8 fb77 	bl	80005f8 <__aeabi_dmul>
 8007f0a:	460b      	mov	r3, r1
 8007f0c:	4303      	orrs	r3, r0
 8007f0e:	bf08      	it	eq
 8007f10:	2322      	moveq	r3, #34	; 0x22
 8007f12:	4682      	mov	sl, r0
 8007f14:	468b      	mov	fp, r1
 8007f16:	bf08      	it	eq
 8007f18:	6023      	streq	r3, [r4, #0]
 8007f1a:	e62b      	b.n	8007b74 <_strtod_l+0x4a4>
 8007f1c:	f04f 32ff 	mov.w	r2, #4294967295
 8007f20:	fa02 f303 	lsl.w	r3, r2, r3
 8007f24:	ea03 0a0a 	and.w	sl, r3, sl
 8007f28:	e6e3      	b.n	8007cf2 <_strtod_l+0x622>
 8007f2a:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 8007f2e:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 8007f32:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 8007f36:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 8007f3a:	fa01 f308 	lsl.w	r3, r1, r8
 8007f3e:	9308      	str	r3, [sp, #32]
 8007f40:	910d      	str	r1, [sp, #52]	; 0x34
 8007f42:	e746      	b.n	8007dd2 <_strtod_l+0x702>
 8007f44:	2300      	movs	r3, #0
 8007f46:	9308      	str	r3, [sp, #32]
 8007f48:	2301      	movs	r3, #1
 8007f4a:	930d      	str	r3, [sp, #52]	; 0x34
 8007f4c:	e741      	b.n	8007dd2 <_strtod_l+0x702>
 8007f4e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8007f50:	4642      	mov	r2, r8
 8007f52:	4620      	mov	r0, r4
 8007f54:	f002 fae4 	bl	800a520 <__lshift>
 8007f58:	9018      	str	r0, [sp, #96]	; 0x60
 8007f5a:	2800      	cmp	r0, #0
 8007f5c:	f47f af6b 	bne.w	8007e36 <_strtod_l+0x766>
 8007f60:	e5fe      	b.n	8007b60 <_strtod_l+0x490>
 8007f62:	465f      	mov	r7, fp
 8007f64:	d16e      	bne.n	8008044 <_strtod_l+0x974>
 8007f66:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007f68:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007f6c:	b342      	cbz	r2, 8007fc0 <_strtod_l+0x8f0>
 8007f6e:	4a32      	ldr	r2, [pc, #200]	; (8008038 <_strtod_l+0x968>)
 8007f70:	4293      	cmp	r3, r2
 8007f72:	d128      	bne.n	8007fc6 <_strtod_l+0x8f6>
 8007f74:	9b04      	ldr	r3, [sp, #16]
 8007f76:	4651      	mov	r1, sl
 8007f78:	b1eb      	cbz	r3, 8007fb6 <_strtod_l+0x8e6>
 8007f7a:	4b2d      	ldr	r3, [pc, #180]	; (8008030 <_strtod_l+0x960>)
 8007f7c:	403b      	ands	r3, r7
 8007f7e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8007f82:	f04f 32ff 	mov.w	r2, #4294967295
 8007f86:	d819      	bhi.n	8007fbc <_strtod_l+0x8ec>
 8007f88:	0d1b      	lsrs	r3, r3, #20
 8007f8a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8007f8e:	fa02 f303 	lsl.w	r3, r2, r3
 8007f92:	4299      	cmp	r1, r3
 8007f94:	d117      	bne.n	8007fc6 <_strtod_l+0x8f6>
 8007f96:	4b29      	ldr	r3, [pc, #164]	; (800803c <_strtod_l+0x96c>)
 8007f98:	429f      	cmp	r7, r3
 8007f9a:	d102      	bne.n	8007fa2 <_strtod_l+0x8d2>
 8007f9c:	3101      	adds	r1, #1
 8007f9e:	f43f addf 	beq.w	8007b60 <_strtod_l+0x490>
 8007fa2:	4b23      	ldr	r3, [pc, #140]	; (8008030 <_strtod_l+0x960>)
 8007fa4:	403b      	ands	r3, r7
 8007fa6:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8007faa:	f04f 0a00 	mov.w	sl, #0
 8007fae:	9b04      	ldr	r3, [sp, #16]
 8007fb0:	2b00      	cmp	r3, #0
 8007fb2:	d1a4      	bne.n	8007efe <_strtod_l+0x82e>
 8007fb4:	e5de      	b.n	8007b74 <_strtod_l+0x4a4>
 8007fb6:	f04f 33ff 	mov.w	r3, #4294967295
 8007fba:	e7ea      	b.n	8007f92 <_strtod_l+0x8c2>
 8007fbc:	4613      	mov	r3, r2
 8007fbe:	e7e8      	b.n	8007f92 <_strtod_l+0x8c2>
 8007fc0:	ea53 030a 	orrs.w	r3, r3, sl
 8007fc4:	d08c      	beq.n	8007ee0 <_strtod_l+0x810>
 8007fc6:	9b08      	ldr	r3, [sp, #32]
 8007fc8:	b1db      	cbz	r3, 8008002 <_strtod_l+0x932>
 8007fca:	423b      	tst	r3, r7
 8007fcc:	d0ef      	beq.n	8007fae <_strtod_l+0x8de>
 8007fce:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007fd0:	9a04      	ldr	r2, [sp, #16]
 8007fd2:	4650      	mov	r0, sl
 8007fd4:	4659      	mov	r1, fp
 8007fd6:	b1c3      	cbz	r3, 800800a <_strtod_l+0x93a>
 8007fd8:	f7ff fb5e 	bl	8007698 <sulp>
 8007fdc:	4602      	mov	r2, r0
 8007fde:	460b      	mov	r3, r1
 8007fe0:	ec51 0b18 	vmov	r0, r1, d8
 8007fe4:	f7f8 f952 	bl	800028c <__adddf3>
 8007fe8:	4682      	mov	sl, r0
 8007fea:	468b      	mov	fp, r1
 8007fec:	e7df      	b.n	8007fae <_strtod_l+0x8de>
 8007fee:	4013      	ands	r3, r2
 8007ff0:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8007ff4:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8007ff8:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8007ffc:	f04f 3aff 	mov.w	sl, #4294967295
 8008000:	e7d5      	b.n	8007fae <_strtod_l+0x8de>
 8008002:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008004:	ea13 0f0a 	tst.w	r3, sl
 8008008:	e7e0      	b.n	8007fcc <_strtod_l+0x8fc>
 800800a:	f7ff fb45 	bl	8007698 <sulp>
 800800e:	4602      	mov	r2, r0
 8008010:	460b      	mov	r3, r1
 8008012:	ec51 0b18 	vmov	r0, r1, d8
 8008016:	f7f8 f937 	bl	8000288 <__aeabi_dsub>
 800801a:	2200      	movs	r2, #0
 800801c:	2300      	movs	r3, #0
 800801e:	4682      	mov	sl, r0
 8008020:	468b      	mov	fp, r1
 8008022:	f7f8 fd51 	bl	8000ac8 <__aeabi_dcmpeq>
 8008026:	2800      	cmp	r0, #0
 8008028:	d0c1      	beq.n	8007fae <_strtod_l+0x8de>
 800802a:	e611      	b.n	8007c50 <_strtod_l+0x580>
 800802c:	fffffc02 	.word	0xfffffc02
 8008030:	7ff00000 	.word	0x7ff00000
 8008034:	39500000 	.word	0x39500000
 8008038:	000fffff 	.word	0x000fffff
 800803c:	7fefffff 	.word	0x7fefffff
 8008040:	0800ccc0 	.word	0x0800ccc0
 8008044:	4631      	mov	r1, r6
 8008046:	4628      	mov	r0, r5
 8008048:	f002 fc58 	bl	800a8fc <__ratio>
 800804c:	ec59 8b10 	vmov	r8, r9, d0
 8008050:	ee10 0a10 	vmov	r0, s0
 8008054:	2200      	movs	r2, #0
 8008056:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800805a:	4649      	mov	r1, r9
 800805c:	f7f8 fd48 	bl	8000af0 <__aeabi_dcmple>
 8008060:	2800      	cmp	r0, #0
 8008062:	d07a      	beq.n	800815a <_strtod_l+0xa8a>
 8008064:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008066:	2b00      	cmp	r3, #0
 8008068:	d04a      	beq.n	8008100 <_strtod_l+0xa30>
 800806a:	4b95      	ldr	r3, [pc, #596]	; (80082c0 <_strtod_l+0xbf0>)
 800806c:	2200      	movs	r2, #0
 800806e:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8008072:	f8df 924c 	ldr.w	r9, [pc, #588]	; 80082c0 <_strtod_l+0xbf0>
 8008076:	f04f 0800 	mov.w	r8, #0
 800807a:	4b92      	ldr	r3, [pc, #584]	; (80082c4 <_strtod_l+0xbf4>)
 800807c:	403b      	ands	r3, r7
 800807e:	930d      	str	r3, [sp, #52]	; 0x34
 8008080:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008082:	4b91      	ldr	r3, [pc, #580]	; (80082c8 <_strtod_l+0xbf8>)
 8008084:	429a      	cmp	r2, r3
 8008086:	f040 80b0 	bne.w	80081ea <_strtod_l+0xb1a>
 800808a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800808e:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 8008092:	ec4b ab10 	vmov	d0, sl, fp
 8008096:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800809a:	f002 fb57 	bl	800a74c <__ulp>
 800809e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80080a2:	ec53 2b10 	vmov	r2, r3, d0
 80080a6:	f7f8 faa7 	bl	80005f8 <__aeabi_dmul>
 80080aa:	4652      	mov	r2, sl
 80080ac:	465b      	mov	r3, fp
 80080ae:	f7f8 f8ed 	bl	800028c <__adddf3>
 80080b2:	460b      	mov	r3, r1
 80080b4:	4983      	ldr	r1, [pc, #524]	; (80082c4 <_strtod_l+0xbf4>)
 80080b6:	4a85      	ldr	r2, [pc, #532]	; (80082cc <_strtod_l+0xbfc>)
 80080b8:	4019      	ands	r1, r3
 80080ba:	4291      	cmp	r1, r2
 80080bc:	4682      	mov	sl, r0
 80080be:	d960      	bls.n	8008182 <_strtod_l+0xab2>
 80080c0:	ee18 3a90 	vmov	r3, s17
 80080c4:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 80080c8:	4293      	cmp	r3, r2
 80080ca:	d104      	bne.n	80080d6 <_strtod_l+0xa06>
 80080cc:	ee18 3a10 	vmov	r3, s16
 80080d0:	3301      	adds	r3, #1
 80080d2:	f43f ad45 	beq.w	8007b60 <_strtod_l+0x490>
 80080d6:	f8df b200 	ldr.w	fp, [pc, #512]	; 80082d8 <_strtod_l+0xc08>
 80080da:	f04f 3aff 	mov.w	sl, #4294967295
 80080de:	9918      	ldr	r1, [sp, #96]	; 0x60
 80080e0:	4620      	mov	r0, r4
 80080e2:	f002 f801 	bl	800a0e8 <_Bfree>
 80080e6:	9905      	ldr	r1, [sp, #20]
 80080e8:	4620      	mov	r0, r4
 80080ea:	f001 fffd 	bl	800a0e8 <_Bfree>
 80080ee:	4631      	mov	r1, r6
 80080f0:	4620      	mov	r0, r4
 80080f2:	f001 fff9 	bl	800a0e8 <_Bfree>
 80080f6:	4629      	mov	r1, r5
 80080f8:	4620      	mov	r0, r4
 80080fa:	f001 fff5 	bl	800a0e8 <_Bfree>
 80080fe:	e61a      	b.n	8007d36 <_strtod_l+0x666>
 8008100:	f1ba 0f00 	cmp.w	sl, #0
 8008104:	d11b      	bne.n	800813e <_strtod_l+0xa6e>
 8008106:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800810a:	b9f3      	cbnz	r3, 800814a <_strtod_l+0xa7a>
 800810c:	4b6c      	ldr	r3, [pc, #432]	; (80082c0 <_strtod_l+0xbf0>)
 800810e:	2200      	movs	r2, #0
 8008110:	4640      	mov	r0, r8
 8008112:	4649      	mov	r1, r9
 8008114:	f7f8 fce2 	bl	8000adc <__aeabi_dcmplt>
 8008118:	b9d0      	cbnz	r0, 8008150 <_strtod_l+0xa80>
 800811a:	4640      	mov	r0, r8
 800811c:	4649      	mov	r1, r9
 800811e:	4b6c      	ldr	r3, [pc, #432]	; (80082d0 <_strtod_l+0xc00>)
 8008120:	2200      	movs	r2, #0
 8008122:	f7f8 fa69 	bl	80005f8 <__aeabi_dmul>
 8008126:	4680      	mov	r8, r0
 8008128:	4689      	mov	r9, r1
 800812a:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800812e:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 8008132:	9315      	str	r3, [sp, #84]	; 0x54
 8008134:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8008138:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800813c:	e79d      	b.n	800807a <_strtod_l+0x9aa>
 800813e:	f1ba 0f01 	cmp.w	sl, #1
 8008142:	d102      	bne.n	800814a <_strtod_l+0xa7a>
 8008144:	2f00      	cmp	r7, #0
 8008146:	f43f ad83 	beq.w	8007c50 <_strtod_l+0x580>
 800814a:	4b62      	ldr	r3, [pc, #392]	; (80082d4 <_strtod_l+0xc04>)
 800814c:	2200      	movs	r2, #0
 800814e:	e78e      	b.n	800806e <_strtod_l+0x99e>
 8008150:	f8df 917c 	ldr.w	r9, [pc, #380]	; 80082d0 <_strtod_l+0xc00>
 8008154:	f04f 0800 	mov.w	r8, #0
 8008158:	e7e7      	b.n	800812a <_strtod_l+0xa5a>
 800815a:	4b5d      	ldr	r3, [pc, #372]	; (80082d0 <_strtod_l+0xc00>)
 800815c:	4640      	mov	r0, r8
 800815e:	4649      	mov	r1, r9
 8008160:	2200      	movs	r2, #0
 8008162:	f7f8 fa49 	bl	80005f8 <__aeabi_dmul>
 8008166:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008168:	4680      	mov	r8, r0
 800816a:	4689      	mov	r9, r1
 800816c:	b933      	cbnz	r3, 800817c <_strtod_l+0xaac>
 800816e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008172:	900e      	str	r0, [sp, #56]	; 0x38
 8008174:	930f      	str	r3, [sp, #60]	; 0x3c
 8008176:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800817a:	e7dd      	b.n	8008138 <_strtod_l+0xa68>
 800817c:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 8008180:	e7f9      	b.n	8008176 <_strtod_l+0xaa6>
 8008182:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8008186:	9b04      	ldr	r3, [sp, #16]
 8008188:	2b00      	cmp	r3, #0
 800818a:	d1a8      	bne.n	80080de <_strtod_l+0xa0e>
 800818c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8008190:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008192:	0d1b      	lsrs	r3, r3, #20
 8008194:	051b      	lsls	r3, r3, #20
 8008196:	429a      	cmp	r2, r3
 8008198:	d1a1      	bne.n	80080de <_strtod_l+0xa0e>
 800819a:	4640      	mov	r0, r8
 800819c:	4649      	mov	r1, r9
 800819e:	f7f8 fd8b 	bl	8000cb8 <__aeabi_d2lz>
 80081a2:	f7f8 f9fb 	bl	800059c <__aeabi_l2d>
 80081a6:	4602      	mov	r2, r0
 80081a8:	460b      	mov	r3, r1
 80081aa:	4640      	mov	r0, r8
 80081ac:	4649      	mov	r1, r9
 80081ae:	f7f8 f86b 	bl	8000288 <__aeabi_dsub>
 80081b2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80081b4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80081b8:	ea43 030a 	orr.w	r3, r3, sl
 80081bc:	4313      	orrs	r3, r2
 80081be:	4680      	mov	r8, r0
 80081c0:	4689      	mov	r9, r1
 80081c2:	d055      	beq.n	8008270 <_strtod_l+0xba0>
 80081c4:	a336      	add	r3, pc, #216	; (adr r3, 80082a0 <_strtod_l+0xbd0>)
 80081c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081ca:	f7f8 fc87 	bl	8000adc <__aeabi_dcmplt>
 80081ce:	2800      	cmp	r0, #0
 80081d0:	f47f acd0 	bne.w	8007b74 <_strtod_l+0x4a4>
 80081d4:	a334      	add	r3, pc, #208	; (adr r3, 80082a8 <_strtod_l+0xbd8>)
 80081d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081da:	4640      	mov	r0, r8
 80081dc:	4649      	mov	r1, r9
 80081de:	f7f8 fc9b 	bl	8000b18 <__aeabi_dcmpgt>
 80081e2:	2800      	cmp	r0, #0
 80081e4:	f43f af7b 	beq.w	80080de <_strtod_l+0xa0e>
 80081e8:	e4c4      	b.n	8007b74 <_strtod_l+0x4a4>
 80081ea:	9b04      	ldr	r3, [sp, #16]
 80081ec:	b333      	cbz	r3, 800823c <_strtod_l+0xb6c>
 80081ee:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80081f0:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80081f4:	d822      	bhi.n	800823c <_strtod_l+0xb6c>
 80081f6:	a32e      	add	r3, pc, #184	; (adr r3, 80082b0 <_strtod_l+0xbe0>)
 80081f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081fc:	4640      	mov	r0, r8
 80081fe:	4649      	mov	r1, r9
 8008200:	f7f8 fc76 	bl	8000af0 <__aeabi_dcmple>
 8008204:	b1a0      	cbz	r0, 8008230 <_strtod_l+0xb60>
 8008206:	4649      	mov	r1, r9
 8008208:	4640      	mov	r0, r8
 800820a:	f7f8 fccd 	bl	8000ba8 <__aeabi_d2uiz>
 800820e:	2801      	cmp	r0, #1
 8008210:	bf38      	it	cc
 8008212:	2001      	movcc	r0, #1
 8008214:	f7f8 f976 	bl	8000504 <__aeabi_ui2d>
 8008218:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800821a:	4680      	mov	r8, r0
 800821c:	4689      	mov	r9, r1
 800821e:	bb23      	cbnz	r3, 800826a <_strtod_l+0xb9a>
 8008220:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008224:	9010      	str	r0, [sp, #64]	; 0x40
 8008226:	9311      	str	r3, [sp, #68]	; 0x44
 8008228:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800822c:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8008230:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008232:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008234:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8008238:	1a9b      	subs	r3, r3, r2
 800823a:	9309      	str	r3, [sp, #36]	; 0x24
 800823c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8008240:	eeb0 0a48 	vmov.f32	s0, s16
 8008244:	eef0 0a68 	vmov.f32	s1, s17
 8008248:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800824c:	f002 fa7e 	bl	800a74c <__ulp>
 8008250:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8008254:	ec53 2b10 	vmov	r2, r3, d0
 8008258:	f7f8 f9ce 	bl	80005f8 <__aeabi_dmul>
 800825c:	ec53 2b18 	vmov	r2, r3, d8
 8008260:	f7f8 f814 	bl	800028c <__adddf3>
 8008264:	4682      	mov	sl, r0
 8008266:	468b      	mov	fp, r1
 8008268:	e78d      	b.n	8008186 <_strtod_l+0xab6>
 800826a:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 800826e:	e7db      	b.n	8008228 <_strtod_l+0xb58>
 8008270:	a311      	add	r3, pc, #68	; (adr r3, 80082b8 <_strtod_l+0xbe8>)
 8008272:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008276:	f7f8 fc31 	bl	8000adc <__aeabi_dcmplt>
 800827a:	e7b2      	b.n	80081e2 <_strtod_l+0xb12>
 800827c:	2300      	movs	r3, #0
 800827e:	930a      	str	r3, [sp, #40]	; 0x28
 8008280:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8008282:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008284:	6013      	str	r3, [r2, #0]
 8008286:	f7ff ba6b 	b.w	8007760 <_strtod_l+0x90>
 800828a:	2a65      	cmp	r2, #101	; 0x65
 800828c:	f43f ab5f 	beq.w	800794e <_strtod_l+0x27e>
 8008290:	2a45      	cmp	r2, #69	; 0x45
 8008292:	f43f ab5c 	beq.w	800794e <_strtod_l+0x27e>
 8008296:	2301      	movs	r3, #1
 8008298:	f7ff bb94 	b.w	80079c4 <_strtod_l+0x2f4>
 800829c:	f3af 8000 	nop.w
 80082a0:	94a03595 	.word	0x94a03595
 80082a4:	3fdfffff 	.word	0x3fdfffff
 80082a8:	35afe535 	.word	0x35afe535
 80082ac:	3fe00000 	.word	0x3fe00000
 80082b0:	ffc00000 	.word	0xffc00000
 80082b4:	41dfffff 	.word	0x41dfffff
 80082b8:	94a03595 	.word	0x94a03595
 80082bc:	3fcfffff 	.word	0x3fcfffff
 80082c0:	3ff00000 	.word	0x3ff00000
 80082c4:	7ff00000 	.word	0x7ff00000
 80082c8:	7fe00000 	.word	0x7fe00000
 80082cc:	7c9fffff 	.word	0x7c9fffff
 80082d0:	3fe00000 	.word	0x3fe00000
 80082d4:	bff00000 	.word	0xbff00000
 80082d8:	7fefffff 	.word	0x7fefffff

080082dc <_strtod_r>:
 80082dc:	4b01      	ldr	r3, [pc, #4]	; (80082e4 <_strtod_r+0x8>)
 80082de:	f7ff b9f7 	b.w	80076d0 <_strtod_l>
 80082e2:	bf00      	nop
 80082e4:	20000074 	.word	0x20000074

080082e8 <strtod>:
 80082e8:	460a      	mov	r2, r1
 80082ea:	4601      	mov	r1, r0
 80082ec:	4802      	ldr	r0, [pc, #8]	; (80082f8 <strtod+0x10>)
 80082ee:	4b03      	ldr	r3, [pc, #12]	; (80082fc <strtod+0x14>)
 80082f0:	6800      	ldr	r0, [r0, #0]
 80082f2:	f7ff b9ed 	b.w	80076d0 <_strtod_l>
 80082f6:	bf00      	nop
 80082f8:	2000000c 	.word	0x2000000c
 80082fc:	20000074 	.word	0x20000074

08008300 <strtok>:
 8008300:	4b16      	ldr	r3, [pc, #88]	; (800835c <strtok+0x5c>)
 8008302:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008304:	681e      	ldr	r6, [r3, #0]
 8008306:	6db4      	ldr	r4, [r6, #88]	; 0x58
 8008308:	4605      	mov	r5, r0
 800830a:	b9fc      	cbnz	r4, 800834c <strtok+0x4c>
 800830c:	2050      	movs	r0, #80	; 0x50
 800830e:	9101      	str	r1, [sp, #4]
 8008310:	f7fe f93a 	bl	8006588 <malloc>
 8008314:	9901      	ldr	r1, [sp, #4]
 8008316:	65b0      	str	r0, [r6, #88]	; 0x58
 8008318:	4602      	mov	r2, r0
 800831a:	b920      	cbnz	r0, 8008326 <strtok+0x26>
 800831c:	4b10      	ldr	r3, [pc, #64]	; (8008360 <strtok+0x60>)
 800831e:	4811      	ldr	r0, [pc, #68]	; (8008364 <strtok+0x64>)
 8008320:	2157      	movs	r1, #87	; 0x57
 8008322:	f000 fa15 	bl	8008750 <__assert_func>
 8008326:	e9c0 4400 	strd	r4, r4, [r0]
 800832a:	e9c0 4402 	strd	r4, r4, [r0, #8]
 800832e:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8008332:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 8008336:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 800833a:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 800833e:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 8008342:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 8008346:	6184      	str	r4, [r0, #24]
 8008348:	7704      	strb	r4, [r0, #28]
 800834a:	6244      	str	r4, [r0, #36]	; 0x24
 800834c:	6db2      	ldr	r2, [r6, #88]	; 0x58
 800834e:	2301      	movs	r3, #1
 8008350:	4628      	mov	r0, r5
 8008352:	b002      	add	sp, #8
 8008354:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8008358:	f000 b806 	b.w	8008368 <__strtok_r>
 800835c:	2000000c 	.word	0x2000000c
 8008360:	0800cce8 	.word	0x0800cce8
 8008364:	0800ccff 	.word	0x0800ccff

08008368 <__strtok_r>:
 8008368:	b5f0      	push	{r4, r5, r6, r7, lr}
 800836a:	b908      	cbnz	r0, 8008370 <__strtok_r+0x8>
 800836c:	6810      	ldr	r0, [r2, #0]
 800836e:	b188      	cbz	r0, 8008394 <__strtok_r+0x2c>
 8008370:	4604      	mov	r4, r0
 8008372:	4620      	mov	r0, r4
 8008374:	f814 5b01 	ldrb.w	r5, [r4], #1
 8008378:	460f      	mov	r7, r1
 800837a:	f817 6b01 	ldrb.w	r6, [r7], #1
 800837e:	b91e      	cbnz	r6, 8008388 <__strtok_r+0x20>
 8008380:	b965      	cbnz	r5, 800839c <__strtok_r+0x34>
 8008382:	6015      	str	r5, [r2, #0]
 8008384:	4628      	mov	r0, r5
 8008386:	e005      	b.n	8008394 <__strtok_r+0x2c>
 8008388:	42b5      	cmp	r5, r6
 800838a:	d1f6      	bne.n	800837a <__strtok_r+0x12>
 800838c:	2b00      	cmp	r3, #0
 800838e:	d1f0      	bne.n	8008372 <__strtok_r+0xa>
 8008390:	6014      	str	r4, [r2, #0]
 8008392:	7003      	strb	r3, [r0, #0]
 8008394:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008396:	461c      	mov	r4, r3
 8008398:	e00c      	b.n	80083b4 <__strtok_r+0x4c>
 800839a:	b915      	cbnz	r5, 80083a2 <__strtok_r+0x3a>
 800839c:	f814 3b01 	ldrb.w	r3, [r4], #1
 80083a0:	460e      	mov	r6, r1
 80083a2:	f816 5b01 	ldrb.w	r5, [r6], #1
 80083a6:	42ab      	cmp	r3, r5
 80083a8:	d1f7      	bne.n	800839a <__strtok_r+0x32>
 80083aa:	2b00      	cmp	r3, #0
 80083ac:	d0f3      	beq.n	8008396 <__strtok_r+0x2e>
 80083ae:	2300      	movs	r3, #0
 80083b0:	f804 3c01 	strb.w	r3, [r4, #-1]
 80083b4:	6014      	str	r4, [r2, #0]
 80083b6:	e7ed      	b.n	8008394 <__strtok_r+0x2c>

080083b8 <_strtol_l.constprop.0>:
 80083b8:	2b01      	cmp	r3, #1
 80083ba:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80083be:	d001      	beq.n	80083c4 <_strtol_l.constprop.0+0xc>
 80083c0:	2b24      	cmp	r3, #36	; 0x24
 80083c2:	d906      	bls.n	80083d2 <_strtol_l.constprop.0+0x1a>
 80083c4:	f7fe f8b6 	bl	8006534 <__errno>
 80083c8:	2316      	movs	r3, #22
 80083ca:	6003      	str	r3, [r0, #0]
 80083cc:	2000      	movs	r0, #0
 80083ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80083d2:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 80084b8 <_strtol_l.constprop.0+0x100>
 80083d6:	460d      	mov	r5, r1
 80083d8:	462e      	mov	r6, r5
 80083da:	f815 4b01 	ldrb.w	r4, [r5], #1
 80083de:	f814 700c 	ldrb.w	r7, [r4, ip]
 80083e2:	f017 0708 	ands.w	r7, r7, #8
 80083e6:	d1f7      	bne.n	80083d8 <_strtol_l.constprop.0+0x20>
 80083e8:	2c2d      	cmp	r4, #45	; 0x2d
 80083ea:	d132      	bne.n	8008452 <_strtol_l.constprop.0+0x9a>
 80083ec:	782c      	ldrb	r4, [r5, #0]
 80083ee:	2701      	movs	r7, #1
 80083f0:	1cb5      	adds	r5, r6, #2
 80083f2:	2b00      	cmp	r3, #0
 80083f4:	d05b      	beq.n	80084ae <_strtol_l.constprop.0+0xf6>
 80083f6:	2b10      	cmp	r3, #16
 80083f8:	d109      	bne.n	800840e <_strtol_l.constprop.0+0x56>
 80083fa:	2c30      	cmp	r4, #48	; 0x30
 80083fc:	d107      	bne.n	800840e <_strtol_l.constprop.0+0x56>
 80083fe:	782c      	ldrb	r4, [r5, #0]
 8008400:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8008404:	2c58      	cmp	r4, #88	; 0x58
 8008406:	d14d      	bne.n	80084a4 <_strtol_l.constprop.0+0xec>
 8008408:	786c      	ldrb	r4, [r5, #1]
 800840a:	2310      	movs	r3, #16
 800840c:	3502      	adds	r5, #2
 800840e:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8008412:	f108 38ff 	add.w	r8, r8, #4294967295
 8008416:	f04f 0c00 	mov.w	ip, #0
 800841a:	fbb8 f9f3 	udiv	r9, r8, r3
 800841e:	4666      	mov	r6, ip
 8008420:	fb03 8a19 	mls	sl, r3, r9, r8
 8008424:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8008428:	f1be 0f09 	cmp.w	lr, #9
 800842c:	d816      	bhi.n	800845c <_strtol_l.constprop.0+0xa4>
 800842e:	4674      	mov	r4, lr
 8008430:	42a3      	cmp	r3, r4
 8008432:	dd24      	ble.n	800847e <_strtol_l.constprop.0+0xc6>
 8008434:	f1bc 0f00 	cmp.w	ip, #0
 8008438:	db1e      	blt.n	8008478 <_strtol_l.constprop.0+0xc0>
 800843a:	45b1      	cmp	r9, r6
 800843c:	d31c      	bcc.n	8008478 <_strtol_l.constprop.0+0xc0>
 800843e:	d101      	bne.n	8008444 <_strtol_l.constprop.0+0x8c>
 8008440:	45a2      	cmp	sl, r4
 8008442:	db19      	blt.n	8008478 <_strtol_l.constprop.0+0xc0>
 8008444:	fb06 4603 	mla	r6, r6, r3, r4
 8008448:	f04f 0c01 	mov.w	ip, #1
 800844c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008450:	e7e8      	b.n	8008424 <_strtol_l.constprop.0+0x6c>
 8008452:	2c2b      	cmp	r4, #43	; 0x2b
 8008454:	bf04      	itt	eq
 8008456:	782c      	ldrbeq	r4, [r5, #0]
 8008458:	1cb5      	addeq	r5, r6, #2
 800845a:	e7ca      	b.n	80083f2 <_strtol_l.constprop.0+0x3a>
 800845c:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8008460:	f1be 0f19 	cmp.w	lr, #25
 8008464:	d801      	bhi.n	800846a <_strtol_l.constprop.0+0xb2>
 8008466:	3c37      	subs	r4, #55	; 0x37
 8008468:	e7e2      	b.n	8008430 <_strtol_l.constprop.0+0x78>
 800846a:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800846e:	f1be 0f19 	cmp.w	lr, #25
 8008472:	d804      	bhi.n	800847e <_strtol_l.constprop.0+0xc6>
 8008474:	3c57      	subs	r4, #87	; 0x57
 8008476:	e7db      	b.n	8008430 <_strtol_l.constprop.0+0x78>
 8008478:	f04f 3cff 	mov.w	ip, #4294967295
 800847c:	e7e6      	b.n	800844c <_strtol_l.constprop.0+0x94>
 800847e:	f1bc 0f00 	cmp.w	ip, #0
 8008482:	da05      	bge.n	8008490 <_strtol_l.constprop.0+0xd8>
 8008484:	2322      	movs	r3, #34	; 0x22
 8008486:	6003      	str	r3, [r0, #0]
 8008488:	4646      	mov	r6, r8
 800848a:	b942      	cbnz	r2, 800849e <_strtol_l.constprop.0+0xe6>
 800848c:	4630      	mov	r0, r6
 800848e:	e79e      	b.n	80083ce <_strtol_l.constprop.0+0x16>
 8008490:	b107      	cbz	r7, 8008494 <_strtol_l.constprop.0+0xdc>
 8008492:	4276      	negs	r6, r6
 8008494:	2a00      	cmp	r2, #0
 8008496:	d0f9      	beq.n	800848c <_strtol_l.constprop.0+0xd4>
 8008498:	f1bc 0f00 	cmp.w	ip, #0
 800849c:	d000      	beq.n	80084a0 <_strtol_l.constprop.0+0xe8>
 800849e:	1e69      	subs	r1, r5, #1
 80084a0:	6011      	str	r1, [r2, #0]
 80084a2:	e7f3      	b.n	800848c <_strtol_l.constprop.0+0xd4>
 80084a4:	2430      	movs	r4, #48	; 0x30
 80084a6:	2b00      	cmp	r3, #0
 80084a8:	d1b1      	bne.n	800840e <_strtol_l.constprop.0+0x56>
 80084aa:	2308      	movs	r3, #8
 80084ac:	e7af      	b.n	800840e <_strtol_l.constprop.0+0x56>
 80084ae:	2c30      	cmp	r4, #48	; 0x30
 80084b0:	d0a5      	beq.n	80083fe <_strtol_l.constprop.0+0x46>
 80084b2:	230a      	movs	r3, #10
 80084b4:	e7ab      	b.n	800840e <_strtol_l.constprop.0+0x56>
 80084b6:	bf00      	nop
 80084b8:	0800cd99 	.word	0x0800cd99

080084bc <_strtol_r>:
 80084bc:	f7ff bf7c 	b.w	80083b8 <_strtol_l.constprop.0>

080084c0 <strtol>:
 80084c0:	4613      	mov	r3, r2
 80084c2:	460a      	mov	r2, r1
 80084c4:	4601      	mov	r1, r0
 80084c6:	4802      	ldr	r0, [pc, #8]	; (80084d0 <strtol+0x10>)
 80084c8:	6800      	ldr	r0, [r0, #0]
 80084ca:	f7ff bf75 	b.w	80083b8 <_strtol_l.constprop.0>
 80084ce:	bf00      	nop
 80084d0:	2000000c 	.word	0x2000000c

080084d4 <_strtoul_l.constprop.0>:
 80084d4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80084d8:	4f36      	ldr	r7, [pc, #216]	; (80085b4 <_strtoul_l.constprop.0+0xe0>)
 80084da:	4686      	mov	lr, r0
 80084dc:	460d      	mov	r5, r1
 80084de:	4628      	mov	r0, r5
 80084e0:	f815 4b01 	ldrb.w	r4, [r5], #1
 80084e4:	5de6      	ldrb	r6, [r4, r7]
 80084e6:	f016 0608 	ands.w	r6, r6, #8
 80084ea:	d1f8      	bne.n	80084de <_strtoul_l.constprop.0+0xa>
 80084ec:	2c2d      	cmp	r4, #45	; 0x2d
 80084ee:	d12f      	bne.n	8008550 <_strtoul_l.constprop.0+0x7c>
 80084f0:	782c      	ldrb	r4, [r5, #0]
 80084f2:	2601      	movs	r6, #1
 80084f4:	1c85      	adds	r5, r0, #2
 80084f6:	2b00      	cmp	r3, #0
 80084f8:	d057      	beq.n	80085aa <_strtoul_l.constprop.0+0xd6>
 80084fa:	2b10      	cmp	r3, #16
 80084fc:	d109      	bne.n	8008512 <_strtoul_l.constprop.0+0x3e>
 80084fe:	2c30      	cmp	r4, #48	; 0x30
 8008500:	d107      	bne.n	8008512 <_strtoul_l.constprop.0+0x3e>
 8008502:	7828      	ldrb	r0, [r5, #0]
 8008504:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8008508:	2858      	cmp	r0, #88	; 0x58
 800850a:	d149      	bne.n	80085a0 <_strtoul_l.constprop.0+0xcc>
 800850c:	786c      	ldrb	r4, [r5, #1]
 800850e:	2310      	movs	r3, #16
 8008510:	3502      	adds	r5, #2
 8008512:	f04f 38ff 	mov.w	r8, #4294967295
 8008516:	2700      	movs	r7, #0
 8008518:	fbb8 f8f3 	udiv	r8, r8, r3
 800851c:	fb03 f908 	mul.w	r9, r3, r8
 8008520:	ea6f 0909 	mvn.w	r9, r9
 8008524:	4638      	mov	r0, r7
 8008526:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800852a:	f1bc 0f09 	cmp.w	ip, #9
 800852e:	d814      	bhi.n	800855a <_strtoul_l.constprop.0+0x86>
 8008530:	4664      	mov	r4, ip
 8008532:	42a3      	cmp	r3, r4
 8008534:	dd22      	ble.n	800857c <_strtoul_l.constprop.0+0xa8>
 8008536:	2f00      	cmp	r7, #0
 8008538:	db1d      	blt.n	8008576 <_strtoul_l.constprop.0+0xa2>
 800853a:	4580      	cmp	r8, r0
 800853c:	d31b      	bcc.n	8008576 <_strtoul_l.constprop.0+0xa2>
 800853e:	d101      	bne.n	8008544 <_strtoul_l.constprop.0+0x70>
 8008540:	45a1      	cmp	r9, r4
 8008542:	db18      	blt.n	8008576 <_strtoul_l.constprop.0+0xa2>
 8008544:	fb00 4003 	mla	r0, r0, r3, r4
 8008548:	2701      	movs	r7, #1
 800854a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800854e:	e7ea      	b.n	8008526 <_strtoul_l.constprop.0+0x52>
 8008550:	2c2b      	cmp	r4, #43	; 0x2b
 8008552:	bf04      	itt	eq
 8008554:	782c      	ldrbeq	r4, [r5, #0]
 8008556:	1c85      	addeq	r5, r0, #2
 8008558:	e7cd      	b.n	80084f6 <_strtoul_l.constprop.0+0x22>
 800855a:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800855e:	f1bc 0f19 	cmp.w	ip, #25
 8008562:	d801      	bhi.n	8008568 <_strtoul_l.constprop.0+0x94>
 8008564:	3c37      	subs	r4, #55	; 0x37
 8008566:	e7e4      	b.n	8008532 <_strtoul_l.constprop.0+0x5e>
 8008568:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800856c:	f1bc 0f19 	cmp.w	ip, #25
 8008570:	d804      	bhi.n	800857c <_strtoul_l.constprop.0+0xa8>
 8008572:	3c57      	subs	r4, #87	; 0x57
 8008574:	e7dd      	b.n	8008532 <_strtoul_l.constprop.0+0x5e>
 8008576:	f04f 37ff 	mov.w	r7, #4294967295
 800857a:	e7e6      	b.n	800854a <_strtoul_l.constprop.0+0x76>
 800857c:	2f00      	cmp	r7, #0
 800857e:	da07      	bge.n	8008590 <_strtoul_l.constprop.0+0xbc>
 8008580:	2322      	movs	r3, #34	; 0x22
 8008582:	f8ce 3000 	str.w	r3, [lr]
 8008586:	f04f 30ff 	mov.w	r0, #4294967295
 800858a:	b932      	cbnz	r2, 800859a <_strtoul_l.constprop.0+0xc6>
 800858c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008590:	b106      	cbz	r6, 8008594 <_strtoul_l.constprop.0+0xc0>
 8008592:	4240      	negs	r0, r0
 8008594:	2a00      	cmp	r2, #0
 8008596:	d0f9      	beq.n	800858c <_strtoul_l.constprop.0+0xb8>
 8008598:	b107      	cbz	r7, 800859c <_strtoul_l.constprop.0+0xc8>
 800859a:	1e69      	subs	r1, r5, #1
 800859c:	6011      	str	r1, [r2, #0]
 800859e:	e7f5      	b.n	800858c <_strtoul_l.constprop.0+0xb8>
 80085a0:	2430      	movs	r4, #48	; 0x30
 80085a2:	2b00      	cmp	r3, #0
 80085a4:	d1b5      	bne.n	8008512 <_strtoul_l.constprop.0+0x3e>
 80085a6:	2308      	movs	r3, #8
 80085a8:	e7b3      	b.n	8008512 <_strtoul_l.constprop.0+0x3e>
 80085aa:	2c30      	cmp	r4, #48	; 0x30
 80085ac:	d0a9      	beq.n	8008502 <_strtoul_l.constprop.0+0x2e>
 80085ae:	230a      	movs	r3, #10
 80085b0:	e7af      	b.n	8008512 <_strtoul_l.constprop.0+0x3e>
 80085b2:	bf00      	nop
 80085b4:	0800cd99 	.word	0x0800cd99

080085b8 <_strtoul_r>:
 80085b8:	f7ff bf8c 	b.w	80084d4 <_strtoul_l.constprop.0>

080085bc <strtoul>:
 80085bc:	4613      	mov	r3, r2
 80085be:	460a      	mov	r2, r1
 80085c0:	4601      	mov	r1, r0
 80085c2:	4802      	ldr	r0, [pc, #8]	; (80085cc <strtoul+0x10>)
 80085c4:	6800      	ldr	r0, [r0, #0]
 80085c6:	f7ff bf85 	b.w	80084d4 <_strtoul_l.constprop.0>
 80085ca:	bf00      	nop
 80085cc:	2000000c 	.word	0x2000000c

080085d0 <__swbuf_r>:
 80085d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80085d2:	460e      	mov	r6, r1
 80085d4:	4614      	mov	r4, r2
 80085d6:	4605      	mov	r5, r0
 80085d8:	b118      	cbz	r0, 80085e2 <__swbuf_r+0x12>
 80085da:	6983      	ldr	r3, [r0, #24]
 80085dc:	b90b      	cbnz	r3, 80085e2 <__swbuf_r+0x12>
 80085de:	f001 f87d 	bl	80096dc <__sinit>
 80085e2:	4b21      	ldr	r3, [pc, #132]	; (8008668 <__swbuf_r+0x98>)
 80085e4:	429c      	cmp	r4, r3
 80085e6:	d12b      	bne.n	8008640 <__swbuf_r+0x70>
 80085e8:	686c      	ldr	r4, [r5, #4]
 80085ea:	69a3      	ldr	r3, [r4, #24]
 80085ec:	60a3      	str	r3, [r4, #8]
 80085ee:	89a3      	ldrh	r3, [r4, #12]
 80085f0:	071a      	lsls	r2, r3, #28
 80085f2:	d52f      	bpl.n	8008654 <__swbuf_r+0x84>
 80085f4:	6923      	ldr	r3, [r4, #16]
 80085f6:	b36b      	cbz	r3, 8008654 <__swbuf_r+0x84>
 80085f8:	6923      	ldr	r3, [r4, #16]
 80085fa:	6820      	ldr	r0, [r4, #0]
 80085fc:	1ac0      	subs	r0, r0, r3
 80085fe:	6963      	ldr	r3, [r4, #20]
 8008600:	b2f6      	uxtb	r6, r6
 8008602:	4283      	cmp	r3, r0
 8008604:	4637      	mov	r7, r6
 8008606:	dc04      	bgt.n	8008612 <__swbuf_r+0x42>
 8008608:	4621      	mov	r1, r4
 800860a:	4628      	mov	r0, r5
 800860c:	f000 ffc0 	bl	8009590 <_fflush_r>
 8008610:	bb30      	cbnz	r0, 8008660 <__swbuf_r+0x90>
 8008612:	68a3      	ldr	r3, [r4, #8]
 8008614:	3b01      	subs	r3, #1
 8008616:	60a3      	str	r3, [r4, #8]
 8008618:	6823      	ldr	r3, [r4, #0]
 800861a:	1c5a      	adds	r2, r3, #1
 800861c:	6022      	str	r2, [r4, #0]
 800861e:	701e      	strb	r6, [r3, #0]
 8008620:	6963      	ldr	r3, [r4, #20]
 8008622:	3001      	adds	r0, #1
 8008624:	4283      	cmp	r3, r0
 8008626:	d004      	beq.n	8008632 <__swbuf_r+0x62>
 8008628:	89a3      	ldrh	r3, [r4, #12]
 800862a:	07db      	lsls	r3, r3, #31
 800862c:	d506      	bpl.n	800863c <__swbuf_r+0x6c>
 800862e:	2e0a      	cmp	r6, #10
 8008630:	d104      	bne.n	800863c <__swbuf_r+0x6c>
 8008632:	4621      	mov	r1, r4
 8008634:	4628      	mov	r0, r5
 8008636:	f000 ffab 	bl	8009590 <_fflush_r>
 800863a:	b988      	cbnz	r0, 8008660 <__swbuf_r+0x90>
 800863c:	4638      	mov	r0, r7
 800863e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008640:	4b0a      	ldr	r3, [pc, #40]	; (800866c <__swbuf_r+0x9c>)
 8008642:	429c      	cmp	r4, r3
 8008644:	d101      	bne.n	800864a <__swbuf_r+0x7a>
 8008646:	68ac      	ldr	r4, [r5, #8]
 8008648:	e7cf      	b.n	80085ea <__swbuf_r+0x1a>
 800864a:	4b09      	ldr	r3, [pc, #36]	; (8008670 <__swbuf_r+0xa0>)
 800864c:	429c      	cmp	r4, r3
 800864e:	bf08      	it	eq
 8008650:	68ec      	ldreq	r4, [r5, #12]
 8008652:	e7ca      	b.n	80085ea <__swbuf_r+0x1a>
 8008654:	4621      	mov	r1, r4
 8008656:	4628      	mov	r0, r5
 8008658:	f000 f80c 	bl	8008674 <__swsetup_r>
 800865c:	2800      	cmp	r0, #0
 800865e:	d0cb      	beq.n	80085f8 <__swbuf_r+0x28>
 8008660:	f04f 37ff 	mov.w	r7, #4294967295
 8008664:	e7ea      	b.n	800863c <__swbuf_r+0x6c>
 8008666:	bf00      	nop
 8008668:	0800cf34 	.word	0x0800cf34
 800866c:	0800cf54 	.word	0x0800cf54
 8008670:	0800cf14 	.word	0x0800cf14

08008674 <__swsetup_r>:
 8008674:	4b32      	ldr	r3, [pc, #200]	; (8008740 <__swsetup_r+0xcc>)
 8008676:	b570      	push	{r4, r5, r6, lr}
 8008678:	681d      	ldr	r5, [r3, #0]
 800867a:	4606      	mov	r6, r0
 800867c:	460c      	mov	r4, r1
 800867e:	b125      	cbz	r5, 800868a <__swsetup_r+0x16>
 8008680:	69ab      	ldr	r3, [r5, #24]
 8008682:	b913      	cbnz	r3, 800868a <__swsetup_r+0x16>
 8008684:	4628      	mov	r0, r5
 8008686:	f001 f829 	bl	80096dc <__sinit>
 800868a:	4b2e      	ldr	r3, [pc, #184]	; (8008744 <__swsetup_r+0xd0>)
 800868c:	429c      	cmp	r4, r3
 800868e:	d10f      	bne.n	80086b0 <__swsetup_r+0x3c>
 8008690:	686c      	ldr	r4, [r5, #4]
 8008692:	89a3      	ldrh	r3, [r4, #12]
 8008694:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008698:	0719      	lsls	r1, r3, #28
 800869a:	d42c      	bmi.n	80086f6 <__swsetup_r+0x82>
 800869c:	06dd      	lsls	r5, r3, #27
 800869e:	d411      	bmi.n	80086c4 <__swsetup_r+0x50>
 80086a0:	2309      	movs	r3, #9
 80086a2:	6033      	str	r3, [r6, #0]
 80086a4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80086a8:	81a3      	strh	r3, [r4, #12]
 80086aa:	f04f 30ff 	mov.w	r0, #4294967295
 80086ae:	e03e      	b.n	800872e <__swsetup_r+0xba>
 80086b0:	4b25      	ldr	r3, [pc, #148]	; (8008748 <__swsetup_r+0xd4>)
 80086b2:	429c      	cmp	r4, r3
 80086b4:	d101      	bne.n	80086ba <__swsetup_r+0x46>
 80086b6:	68ac      	ldr	r4, [r5, #8]
 80086b8:	e7eb      	b.n	8008692 <__swsetup_r+0x1e>
 80086ba:	4b24      	ldr	r3, [pc, #144]	; (800874c <__swsetup_r+0xd8>)
 80086bc:	429c      	cmp	r4, r3
 80086be:	bf08      	it	eq
 80086c0:	68ec      	ldreq	r4, [r5, #12]
 80086c2:	e7e6      	b.n	8008692 <__swsetup_r+0x1e>
 80086c4:	0758      	lsls	r0, r3, #29
 80086c6:	d512      	bpl.n	80086ee <__swsetup_r+0x7a>
 80086c8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80086ca:	b141      	cbz	r1, 80086de <__swsetup_r+0x6a>
 80086cc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80086d0:	4299      	cmp	r1, r3
 80086d2:	d002      	beq.n	80086da <__swsetup_r+0x66>
 80086d4:	4630      	mov	r0, r6
 80086d6:	f7fd ff75 	bl	80065c4 <_free_r>
 80086da:	2300      	movs	r3, #0
 80086dc:	6363      	str	r3, [r4, #52]	; 0x34
 80086de:	89a3      	ldrh	r3, [r4, #12]
 80086e0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80086e4:	81a3      	strh	r3, [r4, #12]
 80086e6:	2300      	movs	r3, #0
 80086e8:	6063      	str	r3, [r4, #4]
 80086ea:	6923      	ldr	r3, [r4, #16]
 80086ec:	6023      	str	r3, [r4, #0]
 80086ee:	89a3      	ldrh	r3, [r4, #12]
 80086f0:	f043 0308 	orr.w	r3, r3, #8
 80086f4:	81a3      	strh	r3, [r4, #12]
 80086f6:	6923      	ldr	r3, [r4, #16]
 80086f8:	b94b      	cbnz	r3, 800870e <__swsetup_r+0x9a>
 80086fa:	89a3      	ldrh	r3, [r4, #12]
 80086fc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008700:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008704:	d003      	beq.n	800870e <__swsetup_r+0x9a>
 8008706:	4621      	mov	r1, r4
 8008708:	4630      	mov	r0, r6
 800870a:	f001 fc4f 	bl	8009fac <__smakebuf_r>
 800870e:	89a0      	ldrh	r0, [r4, #12]
 8008710:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008714:	f010 0301 	ands.w	r3, r0, #1
 8008718:	d00a      	beq.n	8008730 <__swsetup_r+0xbc>
 800871a:	2300      	movs	r3, #0
 800871c:	60a3      	str	r3, [r4, #8]
 800871e:	6963      	ldr	r3, [r4, #20]
 8008720:	425b      	negs	r3, r3
 8008722:	61a3      	str	r3, [r4, #24]
 8008724:	6923      	ldr	r3, [r4, #16]
 8008726:	b943      	cbnz	r3, 800873a <__swsetup_r+0xc6>
 8008728:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800872c:	d1ba      	bne.n	80086a4 <__swsetup_r+0x30>
 800872e:	bd70      	pop	{r4, r5, r6, pc}
 8008730:	0781      	lsls	r1, r0, #30
 8008732:	bf58      	it	pl
 8008734:	6963      	ldrpl	r3, [r4, #20]
 8008736:	60a3      	str	r3, [r4, #8]
 8008738:	e7f4      	b.n	8008724 <__swsetup_r+0xb0>
 800873a:	2000      	movs	r0, #0
 800873c:	e7f7      	b.n	800872e <__swsetup_r+0xba>
 800873e:	bf00      	nop
 8008740:	2000000c 	.word	0x2000000c
 8008744:	0800cf34 	.word	0x0800cf34
 8008748:	0800cf54 	.word	0x0800cf54
 800874c:	0800cf14 	.word	0x0800cf14

08008750 <__assert_func>:
 8008750:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008752:	4614      	mov	r4, r2
 8008754:	461a      	mov	r2, r3
 8008756:	4b09      	ldr	r3, [pc, #36]	; (800877c <__assert_func+0x2c>)
 8008758:	681b      	ldr	r3, [r3, #0]
 800875a:	4605      	mov	r5, r0
 800875c:	68d8      	ldr	r0, [r3, #12]
 800875e:	b14c      	cbz	r4, 8008774 <__assert_func+0x24>
 8008760:	4b07      	ldr	r3, [pc, #28]	; (8008780 <__assert_func+0x30>)
 8008762:	9100      	str	r1, [sp, #0]
 8008764:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008768:	4906      	ldr	r1, [pc, #24]	; (8008784 <__assert_func+0x34>)
 800876a:	462b      	mov	r3, r5
 800876c:	f001 f834 	bl	80097d8 <fiprintf>
 8008770:	f003 f944 	bl	800b9fc <abort>
 8008774:	4b04      	ldr	r3, [pc, #16]	; (8008788 <__assert_func+0x38>)
 8008776:	461c      	mov	r4, r3
 8008778:	e7f3      	b.n	8008762 <__assert_func+0x12>
 800877a:	bf00      	nop
 800877c:	2000000c 	.word	0x2000000c
 8008780:	0800cd5c 	.word	0x0800cd5c
 8008784:	0800cd69 	.word	0x0800cd69
 8008788:	0800cd97 	.word	0x0800cd97

0800878c <quorem>:
 800878c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008790:	6903      	ldr	r3, [r0, #16]
 8008792:	690c      	ldr	r4, [r1, #16]
 8008794:	42a3      	cmp	r3, r4
 8008796:	4607      	mov	r7, r0
 8008798:	f2c0 8081 	blt.w	800889e <quorem+0x112>
 800879c:	3c01      	subs	r4, #1
 800879e:	f101 0814 	add.w	r8, r1, #20
 80087a2:	f100 0514 	add.w	r5, r0, #20
 80087a6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80087aa:	9301      	str	r3, [sp, #4]
 80087ac:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80087b0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80087b4:	3301      	adds	r3, #1
 80087b6:	429a      	cmp	r2, r3
 80087b8:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80087bc:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80087c0:	fbb2 f6f3 	udiv	r6, r2, r3
 80087c4:	d331      	bcc.n	800882a <quorem+0x9e>
 80087c6:	f04f 0e00 	mov.w	lr, #0
 80087ca:	4640      	mov	r0, r8
 80087cc:	46ac      	mov	ip, r5
 80087ce:	46f2      	mov	sl, lr
 80087d0:	f850 2b04 	ldr.w	r2, [r0], #4
 80087d4:	b293      	uxth	r3, r2
 80087d6:	fb06 e303 	mla	r3, r6, r3, lr
 80087da:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80087de:	b29b      	uxth	r3, r3
 80087e0:	ebaa 0303 	sub.w	r3, sl, r3
 80087e4:	f8dc a000 	ldr.w	sl, [ip]
 80087e8:	0c12      	lsrs	r2, r2, #16
 80087ea:	fa13 f38a 	uxtah	r3, r3, sl
 80087ee:	fb06 e202 	mla	r2, r6, r2, lr
 80087f2:	9300      	str	r3, [sp, #0]
 80087f4:	9b00      	ldr	r3, [sp, #0]
 80087f6:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80087fa:	b292      	uxth	r2, r2
 80087fc:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8008800:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008804:	f8bd 3000 	ldrh.w	r3, [sp]
 8008808:	4581      	cmp	r9, r0
 800880a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800880e:	f84c 3b04 	str.w	r3, [ip], #4
 8008812:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8008816:	d2db      	bcs.n	80087d0 <quorem+0x44>
 8008818:	f855 300b 	ldr.w	r3, [r5, fp]
 800881c:	b92b      	cbnz	r3, 800882a <quorem+0x9e>
 800881e:	9b01      	ldr	r3, [sp, #4]
 8008820:	3b04      	subs	r3, #4
 8008822:	429d      	cmp	r5, r3
 8008824:	461a      	mov	r2, r3
 8008826:	d32e      	bcc.n	8008886 <quorem+0xfa>
 8008828:	613c      	str	r4, [r7, #16]
 800882a:	4638      	mov	r0, r7
 800882c:	f001 fee8 	bl	800a600 <__mcmp>
 8008830:	2800      	cmp	r0, #0
 8008832:	db24      	blt.n	800887e <quorem+0xf2>
 8008834:	3601      	adds	r6, #1
 8008836:	4628      	mov	r0, r5
 8008838:	f04f 0c00 	mov.w	ip, #0
 800883c:	f858 2b04 	ldr.w	r2, [r8], #4
 8008840:	f8d0 e000 	ldr.w	lr, [r0]
 8008844:	b293      	uxth	r3, r2
 8008846:	ebac 0303 	sub.w	r3, ip, r3
 800884a:	0c12      	lsrs	r2, r2, #16
 800884c:	fa13 f38e 	uxtah	r3, r3, lr
 8008850:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8008854:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008858:	b29b      	uxth	r3, r3
 800885a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800885e:	45c1      	cmp	r9, r8
 8008860:	f840 3b04 	str.w	r3, [r0], #4
 8008864:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8008868:	d2e8      	bcs.n	800883c <quorem+0xb0>
 800886a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800886e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008872:	b922      	cbnz	r2, 800887e <quorem+0xf2>
 8008874:	3b04      	subs	r3, #4
 8008876:	429d      	cmp	r5, r3
 8008878:	461a      	mov	r2, r3
 800887a:	d30a      	bcc.n	8008892 <quorem+0x106>
 800887c:	613c      	str	r4, [r7, #16]
 800887e:	4630      	mov	r0, r6
 8008880:	b003      	add	sp, #12
 8008882:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008886:	6812      	ldr	r2, [r2, #0]
 8008888:	3b04      	subs	r3, #4
 800888a:	2a00      	cmp	r2, #0
 800888c:	d1cc      	bne.n	8008828 <quorem+0x9c>
 800888e:	3c01      	subs	r4, #1
 8008890:	e7c7      	b.n	8008822 <quorem+0x96>
 8008892:	6812      	ldr	r2, [r2, #0]
 8008894:	3b04      	subs	r3, #4
 8008896:	2a00      	cmp	r2, #0
 8008898:	d1f0      	bne.n	800887c <quorem+0xf0>
 800889a:	3c01      	subs	r4, #1
 800889c:	e7eb      	b.n	8008876 <quorem+0xea>
 800889e:	2000      	movs	r0, #0
 80088a0:	e7ee      	b.n	8008880 <quorem+0xf4>
 80088a2:	0000      	movs	r0, r0
 80088a4:	0000      	movs	r0, r0
	...

080088a8 <_dtoa_r>:
 80088a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80088ac:	ed2d 8b04 	vpush	{d8-d9}
 80088b0:	ec57 6b10 	vmov	r6, r7, d0
 80088b4:	b093      	sub	sp, #76	; 0x4c
 80088b6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80088b8:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80088bc:	9106      	str	r1, [sp, #24]
 80088be:	ee10 aa10 	vmov	sl, s0
 80088c2:	4604      	mov	r4, r0
 80088c4:	9209      	str	r2, [sp, #36]	; 0x24
 80088c6:	930c      	str	r3, [sp, #48]	; 0x30
 80088c8:	46bb      	mov	fp, r7
 80088ca:	b975      	cbnz	r5, 80088ea <_dtoa_r+0x42>
 80088cc:	2010      	movs	r0, #16
 80088ce:	f7fd fe5b 	bl	8006588 <malloc>
 80088d2:	4602      	mov	r2, r0
 80088d4:	6260      	str	r0, [r4, #36]	; 0x24
 80088d6:	b920      	cbnz	r0, 80088e2 <_dtoa_r+0x3a>
 80088d8:	4ba7      	ldr	r3, [pc, #668]	; (8008b78 <_dtoa_r+0x2d0>)
 80088da:	21ea      	movs	r1, #234	; 0xea
 80088dc:	48a7      	ldr	r0, [pc, #668]	; (8008b7c <_dtoa_r+0x2d4>)
 80088de:	f7ff ff37 	bl	8008750 <__assert_func>
 80088e2:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80088e6:	6005      	str	r5, [r0, #0]
 80088e8:	60c5      	str	r5, [r0, #12]
 80088ea:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80088ec:	6819      	ldr	r1, [r3, #0]
 80088ee:	b151      	cbz	r1, 8008906 <_dtoa_r+0x5e>
 80088f0:	685a      	ldr	r2, [r3, #4]
 80088f2:	604a      	str	r2, [r1, #4]
 80088f4:	2301      	movs	r3, #1
 80088f6:	4093      	lsls	r3, r2
 80088f8:	608b      	str	r3, [r1, #8]
 80088fa:	4620      	mov	r0, r4
 80088fc:	f001 fbf4 	bl	800a0e8 <_Bfree>
 8008900:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008902:	2200      	movs	r2, #0
 8008904:	601a      	str	r2, [r3, #0]
 8008906:	1e3b      	subs	r3, r7, #0
 8008908:	bfaa      	itet	ge
 800890a:	2300      	movge	r3, #0
 800890c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8008910:	f8c8 3000 	strge.w	r3, [r8]
 8008914:	4b9a      	ldr	r3, [pc, #616]	; (8008b80 <_dtoa_r+0x2d8>)
 8008916:	bfbc      	itt	lt
 8008918:	2201      	movlt	r2, #1
 800891a:	f8c8 2000 	strlt.w	r2, [r8]
 800891e:	ea33 030b 	bics.w	r3, r3, fp
 8008922:	d11b      	bne.n	800895c <_dtoa_r+0xb4>
 8008924:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008926:	f242 730f 	movw	r3, #9999	; 0x270f
 800892a:	6013      	str	r3, [r2, #0]
 800892c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008930:	4333      	orrs	r3, r6
 8008932:	f000 8592 	beq.w	800945a <_dtoa_r+0xbb2>
 8008936:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008938:	b963      	cbnz	r3, 8008954 <_dtoa_r+0xac>
 800893a:	4b92      	ldr	r3, [pc, #584]	; (8008b84 <_dtoa_r+0x2dc>)
 800893c:	e022      	b.n	8008984 <_dtoa_r+0xdc>
 800893e:	4b92      	ldr	r3, [pc, #584]	; (8008b88 <_dtoa_r+0x2e0>)
 8008940:	9301      	str	r3, [sp, #4]
 8008942:	3308      	adds	r3, #8
 8008944:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8008946:	6013      	str	r3, [r2, #0]
 8008948:	9801      	ldr	r0, [sp, #4]
 800894a:	b013      	add	sp, #76	; 0x4c
 800894c:	ecbd 8b04 	vpop	{d8-d9}
 8008950:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008954:	4b8b      	ldr	r3, [pc, #556]	; (8008b84 <_dtoa_r+0x2dc>)
 8008956:	9301      	str	r3, [sp, #4]
 8008958:	3303      	adds	r3, #3
 800895a:	e7f3      	b.n	8008944 <_dtoa_r+0x9c>
 800895c:	2200      	movs	r2, #0
 800895e:	2300      	movs	r3, #0
 8008960:	4650      	mov	r0, sl
 8008962:	4659      	mov	r1, fp
 8008964:	f7f8 f8b0 	bl	8000ac8 <__aeabi_dcmpeq>
 8008968:	ec4b ab19 	vmov	d9, sl, fp
 800896c:	4680      	mov	r8, r0
 800896e:	b158      	cbz	r0, 8008988 <_dtoa_r+0xe0>
 8008970:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008972:	2301      	movs	r3, #1
 8008974:	6013      	str	r3, [r2, #0]
 8008976:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008978:	2b00      	cmp	r3, #0
 800897a:	f000 856b 	beq.w	8009454 <_dtoa_r+0xbac>
 800897e:	4883      	ldr	r0, [pc, #524]	; (8008b8c <_dtoa_r+0x2e4>)
 8008980:	6018      	str	r0, [r3, #0]
 8008982:	1e43      	subs	r3, r0, #1
 8008984:	9301      	str	r3, [sp, #4]
 8008986:	e7df      	b.n	8008948 <_dtoa_r+0xa0>
 8008988:	ec4b ab10 	vmov	d0, sl, fp
 800898c:	aa10      	add	r2, sp, #64	; 0x40
 800898e:	a911      	add	r1, sp, #68	; 0x44
 8008990:	4620      	mov	r0, r4
 8008992:	f001 ff57 	bl	800a844 <__d2b>
 8008996:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800899a:	ee08 0a10 	vmov	s16, r0
 800899e:	2d00      	cmp	r5, #0
 80089a0:	f000 8084 	beq.w	8008aac <_dtoa_r+0x204>
 80089a4:	ee19 3a90 	vmov	r3, s19
 80089a8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80089ac:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 80089b0:	4656      	mov	r6, sl
 80089b2:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 80089b6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80089ba:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 80089be:	4b74      	ldr	r3, [pc, #464]	; (8008b90 <_dtoa_r+0x2e8>)
 80089c0:	2200      	movs	r2, #0
 80089c2:	4630      	mov	r0, r6
 80089c4:	4639      	mov	r1, r7
 80089c6:	f7f7 fc5f 	bl	8000288 <__aeabi_dsub>
 80089ca:	a365      	add	r3, pc, #404	; (adr r3, 8008b60 <_dtoa_r+0x2b8>)
 80089cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089d0:	f7f7 fe12 	bl	80005f8 <__aeabi_dmul>
 80089d4:	a364      	add	r3, pc, #400	; (adr r3, 8008b68 <_dtoa_r+0x2c0>)
 80089d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089da:	f7f7 fc57 	bl	800028c <__adddf3>
 80089de:	4606      	mov	r6, r0
 80089e0:	4628      	mov	r0, r5
 80089e2:	460f      	mov	r7, r1
 80089e4:	f7f7 fd9e 	bl	8000524 <__aeabi_i2d>
 80089e8:	a361      	add	r3, pc, #388	; (adr r3, 8008b70 <_dtoa_r+0x2c8>)
 80089ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089ee:	f7f7 fe03 	bl	80005f8 <__aeabi_dmul>
 80089f2:	4602      	mov	r2, r0
 80089f4:	460b      	mov	r3, r1
 80089f6:	4630      	mov	r0, r6
 80089f8:	4639      	mov	r1, r7
 80089fa:	f7f7 fc47 	bl	800028c <__adddf3>
 80089fe:	4606      	mov	r6, r0
 8008a00:	460f      	mov	r7, r1
 8008a02:	f7f8 f8a9 	bl	8000b58 <__aeabi_d2iz>
 8008a06:	2200      	movs	r2, #0
 8008a08:	9000      	str	r0, [sp, #0]
 8008a0a:	2300      	movs	r3, #0
 8008a0c:	4630      	mov	r0, r6
 8008a0e:	4639      	mov	r1, r7
 8008a10:	f7f8 f864 	bl	8000adc <__aeabi_dcmplt>
 8008a14:	b150      	cbz	r0, 8008a2c <_dtoa_r+0x184>
 8008a16:	9800      	ldr	r0, [sp, #0]
 8008a18:	f7f7 fd84 	bl	8000524 <__aeabi_i2d>
 8008a1c:	4632      	mov	r2, r6
 8008a1e:	463b      	mov	r3, r7
 8008a20:	f7f8 f852 	bl	8000ac8 <__aeabi_dcmpeq>
 8008a24:	b910      	cbnz	r0, 8008a2c <_dtoa_r+0x184>
 8008a26:	9b00      	ldr	r3, [sp, #0]
 8008a28:	3b01      	subs	r3, #1
 8008a2a:	9300      	str	r3, [sp, #0]
 8008a2c:	9b00      	ldr	r3, [sp, #0]
 8008a2e:	2b16      	cmp	r3, #22
 8008a30:	d85a      	bhi.n	8008ae8 <_dtoa_r+0x240>
 8008a32:	9a00      	ldr	r2, [sp, #0]
 8008a34:	4b57      	ldr	r3, [pc, #348]	; (8008b94 <_dtoa_r+0x2ec>)
 8008a36:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008a3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a3e:	ec51 0b19 	vmov	r0, r1, d9
 8008a42:	f7f8 f84b 	bl	8000adc <__aeabi_dcmplt>
 8008a46:	2800      	cmp	r0, #0
 8008a48:	d050      	beq.n	8008aec <_dtoa_r+0x244>
 8008a4a:	9b00      	ldr	r3, [sp, #0]
 8008a4c:	3b01      	subs	r3, #1
 8008a4e:	9300      	str	r3, [sp, #0]
 8008a50:	2300      	movs	r3, #0
 8008a52:	930b      	str	r3, [sp, #44]	; 0x2c
 8008a54:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008a56:	1b5d      	subs	r5, r3, r5
 8008a58:	1e6b      	subs	r3, r5, #1
 8008a5a:	9305      	str	r3, [sp, #20]
 8008a5c:	bf45      	ittet	mi
 8008a5e:	f1c5 0301 	rsbmi	r3, r5, #1
 8008a62:	9304      	strmi	r3, [sp, #16]
 8008a64:	2300      	movpl	r3, #0
 8008a66:	2300      	movmi	r3, #0
 8008a68:	bf4c      	ite	mi
 8008a6a:	9305      	strmi	r3, [sp, #20]
 8008a6c:	9304      	strpl	r3, [sp, #16]
 8008a6e:	9b00      	ldr	r3, [sp, #0]
 8008a70:	2b00      	cmp	r3, #0
 8008a72:	db3d      	blt.n	8008af0 <_dtoa_r+0x248>
 8008a74:	9b05      	ldr	r3, [sp, #20]
 8008a76:	9a00      	ldr	r2, [sp, #0]
 8008a78:	920a      	str	r2, [sp, #40]	; 0x28
 8008a7a:	4413      	add	r3, r2
 8008a7c:	9305      	str	r3, [sp, #20]
 8008a7e:	2300      	movs	r3, #0
 8008a80:	9307      	str	r3, [sp, #28]
 8008a82:	9b06      	ldr	r3, [sp, #24]
 8008a84:	2b09      	cmp	r3, #9
 8008a86:	f200 8089 	bhi.w	8008b9c <_dtoa_r+0x2f4>
 8008a8a:	2b05      	cmp	r3, #5
 8008a8c:	bfc4      	itt	gt
 8008a8e:	3b04      	subgt	r3, #4
 8008a90:	9306      	strgt	r3, [sp, #24]
 8008a92:	9b06      	ldr	r3, [sp, #24]
 8008a94:	f1a3 0302 	sub.w	r3, r3, #2
 8008a98:	bfcc      	ite	gt
 8008a9a:	2500      	movgt	r5, #0
 8008a9c:	2501      	movle	r5, #1
 8008a9e:	2b03      	cmp	r3, #3
 8008aa0:	f200 8087 	bhi.w	8008bb2 <_dtoa_r+0x30a>
 8008aa4:	e8df f003 	tbb	[pc, r3]
 8008aa8:	59383a2d 	.word	0x59383a2d
 8008aac:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8008ab0:	441d      	add	r5, r3
 8008ab2:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8008ab6:	2b20      	cmp	r3, #32
 8008ab8:	bfc1      	itttt	gt
 8008aba:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8008abe:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8008ac2:	fa0b f303 	lslgt.w	r3, fp, r3
 8008ac6:	fa26 f000 	lsrgt.w	r0, r6, r0
 8008aca:	bfda      	itte	le
 8008acc:	f1c3 0320 	rsble	r3, r3, #32
 8008ad0:	fa06 f003 	lslle.w	r0, r6, r3
 8008ad4:	4318      	orrgt	r0, r3
 8008ad6:	f7f7 fd15 	bl	8000504 <__aeabi_ui2d>
 8008ada:	2301      	movs	r3, #1
 8008adc:	4606      	mov	r6, r0
 8008ade:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8008ae2:	3d01      	subs	r5, #1
 8008ae4:	930e      	str	r3, [sp, #56]	; 0x38
 8008ae6:	e76a      	b.n	80089be <_dtoa_r+0x116>
 8008ae8:	2301      	movs	r3, #1
 8008aea:	e7b2      	b.n	8008a52 <_dtoa_r+0x1aa>
 8008aec:	900b      	str	r0, [sp, #44]	; 0x2c
 8008aee:	e7b1      	b.n	8008a54 <_dtoa_r+0x1ac>
 8008af0:	9b04      	ldr	r3, [sp, #16]
 8008af2:	9a00      	ldr	r2, [sp, #0]
 8008af4:	1a9b      	subs	r3, r3, r2
 8008af6:	9304      	str	r3, [sp, #16]
 8008af8:	4253      	negs	r3, r2
 8008afa:	9307      	str	r3, [sp, #28]
 8008afc:	2300      	movs	r3, #0
 8008afe:	930a      	str	r3, [sp, #40]	; 0x28
 8008b00:	e7bf      	b.n	8008a82 <_dtoa_r+0x1da>
 8008b02:	2300      	movs	r3, #0
 8008b04:	9308      	str	r3, [sp, #32]
 8008b06:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008b08:	2b00      	cmp	r3, #0
 8008b0a:	dc55      	bgt.n	8008bb8 <_dtoa_r+0x310>
 8008b0c:	2301      	movs	r3, #1
 8008b0e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8008b12:	461a      	mov	r2, r3
 8008b14:	9209      	str	r2, [sp, #36]	; 0x24
 8008b16:	e00c      	b.n	8008b32 <_dtoa_r+0x28a>
 8008b18:	2301      	movs	r3, #1
 8008b1a:	e7f3      	b.n	8008b04 <_dtoa_r+0x25c>
 8008b1c:	2300      	movs	r3, #0
 8008b1e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008b20:	9308      	str	r3, [sp, #32]
 8008b22:	9b00      	ldr	r3, [sp, #0]
 8008b24:	4413      	add	r3, r2
 8008b26:	9302      	str	r3, [sp, #8]
 8008b28:	3301      	adds	r3, #1
 8008b2a:	2b01      	cmp	r3, #1
 8008b2c:	9303      	str	r3, [sp, #12]
 8008b2e:	bfb8      	it	lt
 8008b30:	2301      	movlt	r3, #1
 8008b32:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8008b34:	2200      	movs	r2, #0
 8008b36:	6042      	str	r2, [r0, #4]
 8008b38:	2204      	movs	r2, #4
 8008b3a:	f102 0614 	add.w	r6, r2, #20
 8008b3e:	429e      	cmp	r6, r3
 8008b40:	6841      	ldr	r1, [r0, #4]
 8008b42:	d93d      	bls.n	8008bc0 <_dtoa_r+0x318>
 8008b44:	4620      	mov	r0, r4
 8008b46:	f001 fa8f 	bl	800a068 <_Balloc>
 8008b4a:	9001      	str	r0, [sp, #4]
 8008b4c:	2800      	cmp	r0, #0
 8008b4e:	d13b      	bne.n	8008bc8 <_dtoa_r+0x320>
 8008b50:	4b11      	ldr	r3, [pc, #68]	; (8008b98 <_dtoa_r+0x2f0>)
 8008b52:	4602      	mov	r2, r0
 8008b54:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8008b58:	e6c0      	b.n	80088dc <_dtoa_r+0x34>
 8008b5a:	2301      	movs	r3, #1
 8008b5c:	e7df      	b.n	8008b1e <_dtoa_r+0x276>
 8008b5e:	bf00      	nop
 8008b60:	636f4361 	.word	0x636f4361
 8008b64:	3fd287a7 	.word	0x3fd287a7
 8008b68:	8b60c8b3 	.word	0x8b60c8b3
 8008b6c:	3fc68a28 	.word	0x3fc68a28
 8008b70:	509f79fb 	.word	0x509f79fb
 8008b74:	3fd34413 	.word	0x3fd34413
 8008b78:	0800cce8 	.word	0x0800cce8
 8008b7c:	0800cea6 	.word	0x0800cea6
 8008b80:	7ff00000 	.word	0x7ff00000
 8008b84:	0800cea2 	.word	0x0800cea2
 8008b88:	0800ce99 	.word	0x0800ce99
 8008b8c:	0800d162 	.word	0x0800d162
 8008b90:	3ff80000 	.word	0x3ff80000
 8008b94:	0800d078 	.word	0x0800d078
 8008b98:	0800cf01 	.word	0x0800cf01
 8008b9c:	2501      	movs	r5, #1
 8008b9e:	2300      	movs	r3, #0
 8008ba0:	9306      	str	r3, [sp, #24]
 8008ba2:	9508      	str	r5, [sp, #32]
 8008ba4:	f04f 33ff 	mov.w	r3, #4294967295
 8008ba8:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8008bac:	2200      	movs	r2, #0
 8008bae:	2312      	movs	r3, #18
 8008bb0:	e7b0      	b.n	8008b14 <_dtoa_r+0x26c>
 8008bb2:	2301      	movs	r3, #1
 8008bb4:	9308      	str	r3, [sp, #32]
 8008bb6:	e7f5      	b.n	8008ba4 <_dtoa_r+0x2fc>
 8008bb8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008bba:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8008bbe:	e7b8      	b.n	8008b32 <_dtoa_r+0x28a>
 8008bc0:	3101      	adds	r1, #1
 8008bc2:	6041      	str	r1, [r0, #4]
 8008bc4:	0052      	lsls	r2, r2, #1
 8008bc6:	e7b8      	b.n	8008b3a <_dtoa_r+0x292>
 8008bc8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008bca:	9a01      	ldr	r2, [sp, #4]
 8008bcc:	601a      	str	r2, [r3, #0]
 8008bce:	9b03      	ldr	r3, [sp, #12]
 8008bd0:	2b0e      	cmp	r3, #14
 8008bd2:	f200 809d 	bhi.w	8008d10 <_dtoa_r+0x468>
 8008bd6:	2d00      	cmp	r5, #0
 8008bd8:	f000 809a 	beq.w	8008d10 <_dtoa_r+0x468>
 8008bdc:	9b00      	ldr	r3, [sp, #0]
 8008bde:	2b00      	cmp	r3, #0
 8008be0:	dd32      	ble.n	8008c48 <_dtoa_r+0x3a0>
 8008be2:	4ab7      	ldr	r2, [pc, #732]	; (8008ec0 <_dtoa_r+0x618>)
 8008be4:	f003 030f 	and.w	r3, r3, #15
 8008be8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8008bec:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008bf0:	9b00      	ldr	r3, [sp, #0]
 8008bf2:	05d8      	lsls	r0, r3, #23
 8008bf4:	ea4f 1723 	mov.w	r7, r3, asr #4
 8008bf8:	d516      	bpl.n	8008c28 <_dtoa_r+0x380>
 8008bfa:	4bb2      	ldr	r3, [pc, #712]	; (8008ec4 <_dtoa_r+0x61c>)
 8008bfc:	ec51 0b19 	vmov	r0, r1, d9
 8008c00:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008c04:	f7f7 fe22 	bl	800084c <__aeabi_ddiv>
 8008c08:	f007 070f 	and.w	r7, r7, #15
 8008c0c:	4682      	mov	sl, r0
 8008c0e:	468b      	mov	fp, r1
 8008c10:	2503      	movs	r5, #3
 8008c12:	4eac      	ldr	r6, [pc, #688]	; (8008ec4 <_dtoa_r+0x61c>)
 8008c14:	b957      	cbnz	r7, 8008c2c <_dtoa_r+0x384>
 8008c16:	4642      	mov	r2, r8
 8008c18:	464b      	mov	r3, r9
 8008c1a:	4650      	mov	r0, sl
 8008c1c:	4659      	mov	r1, fp
 8008c1e:	f7f7 fe15 	bl	800084c <__aeabi_ddiv>
 8008c22:	4682      	mov	sl, r0
 8008c24:	468b      	mov	fp, r1
 8008c26:	e028      	b.n	8008c7a <_dtoa_r+0x3d2>
 8008c28:	2502      	movs	r5, #2
 8008c2a:	e7f2      	b.n	8008c12 <_dtoa_r+0x36a>
 8008c2c:	07f9      	lsls	r1, r7, #31
 8008c2e:	d508      	bpl.n	8008c42 <_dtoa_r+0x39a>
 8008c30:	4640      	mov	r0, r8
 8008c32:	4649      	mov	r1, r9
 8008c34:	e9d6 2300 	ldrd	r2, r3, [r6]
 8008c38:	f7f7 fcde 	bl	80005f8 <__aeabi_dmul>
 8008c3c:	3501      	adds	r5, #1
 8008c3e:	4680      	mov	r8, r0
 8008c40:	4689      	mov	r9, r1
 8008c42:	107f      	asrs	r7, r7, #1
 8008c44:	3608      	adds	r6, #8
 8008c46:	e7e5      	b.n	8008c14 <_dtoa_r+0x36c>
 8008c48:	f000 809b 	beq.w	8008d82 <_dtoa_r+0x4da>
 8008c4c:	9b00      	ldr	r3, [sp, #0]
 8008c4e:	4f9d      	ldr	r7, [pc, #628]	; (8008ec4 <_dtoa_r+0x61c>)
 8008c50:	425e      	negs	r6, r3
 8008c52:	4b9b      	ldr	r3, [pc, #620]	; (8008ec0 <_dtoa_r+0x618>)
 8008c54:	f006 020f 	and.w	r2, r6, #15
 8008c58:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008c5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c60:	ec51 0b19 	vmov	r0, r1, d9
 8008c64:	f7f7 fcc8 	bl	80005f8 <__aeabi_dmul>
 8008c68:	1136      	asrs	r6, r6, #4
 8008c6a:	4682      	mov	sl, r0
 8008c6c:	468b      	mov	fp, r1
 8008c6e:	2300      	movs	r3, #0
 8008c70:	2502      	movs	r5, #2
 8008c72:	2e00      	cmp	r6, #0
 8008c74:	d17a      	bne.n	8008d6c <_dtoa_r+0x4c4>
 8008c76:	2b00      	cmp	r3, #0
 8008c78:	d1d3      	bne.n	8008c22 <_dtoa_r+0x37a>
 8008c7a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008c7c:	2b00      	cmp	r3, #0
 8008c7e:	f000 8082 	beq.w	8008d86 <_dtoa_r+0x4de>
 8008c82:	4b91      	ldr	r3, [pc, #580]	; (8008ec8 <_dtoa_r+0x620>)
 8008c84:	2200      	movs	r2, #0
 8008c86:	4650      	mov	r0, sl
 8008c88:	4659      	mov	r1, fp
 8008c8a:	f7f7 ff27 	bl	8000adc <__aeabi_dcmplt>
 8008c8e:	2800      	cmp	r0, #0
 8008c90:	d079      	beq.n	8008d86 <_dtoa_r+0x4de>
 8008c92:	9b03      	ldr	r3, [sp, #12]
 8008c94:	2b00      	cmp	r3, #0
 8008c96:	d076      	beq.n	8008d86 <_dtoa_r+0x4de>
 8008c98:	9b02      	ldr	r3, [sp, #8]
 8008c9a:	2b00      	cmp	r3, #0
 8008c9c:	dd36      	ble.n	8008d0c <_dtoa_r+0x464>
 8008c9e:	9b00      	ldr	r3, [sp, #0]
 8008ca0:	4650      	mov	r0, sl
 8008ca2:	4659      	mov	r1, fp
 8008ca4:	1e5f      	subs	r7, r3, #1
 8008ca6:	2200      	movs	r2, #0
 8008ca8:	4b88      	ldr	r3, [pc, #544]	; (8008ecc <_dtoa_r+0x624>)
 8008caa:	f7f7 fca5 	bl	80005f8 <__aeabi_dmul>
 8008cae:	9e02      	ldr	r6, [sp, #8]
 8008cb0:	4682      	mov	sl, r0
 8008cb2:	468b      	mov	fp, r1
 8008cb4:	3501      	adds	r5, #1
 8008cb6:	4628      	mov	r0, r5
 8008cb8:	f7f7 fc34 	bl	8000524 <__aeabi_i2d>
 8008cbc:	4652      	mov	r2, sl
 8008cbe:	465b      	mov	r3, fp
 8008cc0:	f7f7 fc9a 	bl	80005f8 <__aeabi_dmul>
 8008cc4:	4b82      	ldr	r3, [pc, #520]	; (8008ed0 <_dtoa_r+0x628>)
 8008cc6:	2200      	movs	r2, #0
 8008cc8:	f7f7 fae0 	bl	800028c <__adddf3>
 8008ccc:	46d0      	mov	r8, sl
 8008cce:	46d9      	mov	r9, fp
 8008cd0:	4682      	mov	sl, r0
 8008cd2:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8008cd6:	2e00      	cmp	r6, #0
 8008cd8:	d158      	bne.n	8008d8c <_dtoa_r+0x4e4>
 8008cda:	4b7e      	ldr	r3, [pc, #504]	; (8008ed4 <_dtoa_r+0x62c>)
 8008cdc:	2200      	movs	r2, #0
 8008cde:	4640      	mov	r0, r8
 8008ce0:	4649      	mov	r1, r9
 8008ce2:	f7f7 fad1 	bl	8000288 <__aeabi_dsub>
 8008ce6:	4652      	mov	r2, sl
 8008ce8:	465b      	mov	r3, fp
 8008cea:	4680      	mov	r8, r0
 8008cec:	4689      	mov	r9, r1
 8008cee:	f7f7 ff13 	bl	8000b18 <__aeabi_dcmpgt>
 8008cf2:	2800      	cmp	r0, #0
 8008cf4:	f040 8295 	bne.w	8009222 <_dtoa_r+0x97a>
 8008cf8:	4652      	mov	r2, sl
 8008cfa:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8008cfe:	4640      	mov	r0, r8
 8008d00:	4649      	mov	r1, r9
 8008d02:	f7f7 feeb 	bl	8000adc <__aeabi_dcmplt>
 8008d06:	2800      	cmp	r0, #0
 8008d08:	f040 8289 	bne.w	800921e <_dtoa_r+0x976>
 8008d0c:	ec5b ab19 	vmov	sl, fp, d9
 8008d10:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008d12:	2b00      	cmp	r3, #0
 8008d14:	f2c0 8148 	blt.w	8008fa8 <_dtoa_r+0x700>
 8008d18:	9a00      	ldr	r2, [sp, #0]
 8008d1a:	2a0e      	cmp	r2, #14
 8008d1c:	f300 8144 	bgt.w	8008fa8 <_dtoa_r+0x700>
 8008d20:	4b67      	ldr	r3, [pc, #412]	; (8008ec0 <_dtoa_r+0x618>)
 8008d22:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008d26:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008d2a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008d2c:	2b00      	cmp	r3, #0
 8008d2e:	f280 80d5 	bge.w	8008edc <_dtoa_r+0x634>
 8008d32:	9b03      	ldr	r3, [sp, #12]
 8008d34:	2b00      	cmp	r3, #0
 8008d36:	f300 80d1 	bgt.w	8008edc <_dtoa_r+0x634>
 8008d3a:	f040 826f 	bne.w	800921c <_dtoa_r+0x974>
 8008d3e:	4b65      	ldr	r3, [pc, #404]	; (8008ed4 <_dtoa_r+0x62c>)
 8008d40:	2200      	movs	r2, #0
 8008d42:	4640      	mov	r0, r8
 8008d44:	4649      	mov	r1, r9
 8008d46:	f7f7 fc57 	bl	80005f8 <__aeabi_dmul>
 8008d4a:	4652      	mov	r2, sl
 8008d4c:	465b      	mov	r3, fp
 8008d4e:	f7f7 fed9 	bl	8000b04 <__aeabi_dcmpge>
 8008d52:	9e03      	ldr	r6, [sp, #12]
 8008d54:	4637      	mov	r7, r6
 8008d56:	2800      	cmp	r0, #0
 8008d58:	f040 8245 	bne.w	80091e6 <_dtoa_r+0x93e>
 8008d5c:	9d01      	ldr	r5, [sp, #4]
 8008d5e:	2331      	movs	r3, #49	; 0x31
 8008d60:	f805 3b01 	strb.w	r3, [r5], #1
 8008d64:	9b00      	ldr	r3, [sp, #0]
 8008d66:	3301      	adds	r3, #1
 8008d68:	9300      	str	r3, [sp, #0]
 8008d6a:	e240      	b.n	80091ee <_dtoa_r+0x946>
 8008d6c:	07f2      	lsls	r2, r6, #31
 8008d6e:	d505      	bpl.n	8008d7c <_dtoa_r+0x4d4>
 8008d70:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008d74:	f7f7 fc40 	bl	80005f8 <__aeabi_dmul>
 8008d78:	3501      	adds	r5, #1
 8008d7a:	2301      	movs	r3, #1
 8008d7c:	1076      	asrs	r6, r6, #1
 8008d7e:	3708      	adds	r7, #8
 8008d80:	e777      	b.n	8008c72 <_dtoa_r+0x3ca>
 8008d82:	2502      	movs	r5, #2
 8008d84:	e779      	b.n	8008c7a <_dtoa_r+0x3d2>
 8008d86:	9f00      	ldr	r7, [sp, #0]
 8008d88:	9e03      	ldr	r6, [sp, #12]
 8008d8a:	e794      	b.n	8008cb6 <_dtoa_r+0x40e>
 8008d8c:	9901      	ldr	r1, [sp, #4]
 8008d8e:	4b4c      	ldr	r3, [pc, #304]	; (8008ec0 <_dtoa_r+0x618>)
 8008d90:	4431      	add	r1, r6
 8008d92:	910d      	str	r1, [sp, #52]	; 0x34
 8008d94:	9908      	ldr	r1, [sp, #32]
 8008d96:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8008d9a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8008d9e:	2900      	cmp	r1, #0
 8008da0:	d043      	beq.n	8008e2a <_dtoa_r+0x582>
 8008da2:	494d      	ldr	r1, [pc, #308]	; (8008ed8 <_dtoa_r+0x630>)
 8008da4:	2000      	movs	r0, #0
 8008da6:	f7f7 fd51 	bl	800084c <__aeabi_ddiv>
 8008daa:	4652      	mov	r2, sl
 8008dac:	465b      	mov	r3, fp
 8008dae:	f7f7 fa6b 	bl	8000288 <__aeabi_dsub>
 8008db2:	9d01      	ldr	r5, [sp, #4]
 8008db4:	4682      	mov	sl, r0
 8008db6:	468b      	mov	fp, r1
 8008db8:	4649      	mov	r1, r9
 8008dba:	4640      	mov	r0, r8
 8008dbc:	f7f7 fecc 	bl	8000b58 <__aeabi_d2iz>
 8008dc0:	4606      	mov	r6, r0
 8008dc2:	f7f7 fbaf 	bl	8000524 <__aeabi_i2d>
 8008dc6:	4602      	mov	r2, r0
 8008dc8:	460b      	mov	r3, r1
 8008dca:	4640      	mov	r0, r8
 8008dcc:	4649      	mov	r1, r9
 8008dce:	f7f7 fa5b 	bl	8000288 <__aeabi_dsub>
 8008dd2:	3630      	adds	r6, #48	; 0x30
 8008dd4:	f805 6b01 	strb.w	r6, [r5], #1
 8008dd8:	4652      	mov	r2, sl
 8008dda:	465b      	mov	r3, fp
 8008ddc:	4680      	mov	r8, r0
 8008dde:	4689      	mov	r9, r1
 8008de0:	f7f7 fe7c 	bl	8000adc <__aeabi_dcmplt>
 8008de4:	2800      	cmp	r0, #0
 8008de6:	d163      	bne.n	8008eb0 <_dtoa_r+0x608>
 8008de8:	4642      	mov	r2, r8
 8008dea:	464b      	mov	r3, r9
 8008dec:	4936      	ldr	r1, [pc, #216]	; (8008ec8 <_dtoa_r+0x620>)
 8008dee:	2000      	movs	r0, #0
 8008df0:	f7f7 fa4a 	bl	8000288 <__aeabi_dsub>
 8008df4:	4652      	mov	r2, sl
 8008df6:	465b      	mov	r3, fp
 8008df8:	f7f7 fe70 	bl	8000adc <__aeabi_dcmplt>
 8008dfc:	2800      	cmp	r0, #0
 8008dfe:	f040 80b5 	bne.w	8008f6c <_dtoa_r+0x6c4>
 8008e02:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008e04:	429d      	cmp	r5, r3
 8008e06:	d081      	beq.n	8008d0c <_dtoa_r+0x464>
 8008e08:	4b30      	ldr	r3, [pc, #192]	; (8008ecc <_dtoa_r+0x624>)
 8008e0a:	2200      	movs	r2, #0
 8008e0c:	4650      	mov	r0, sl
 8008e0e:	4659      	mov	r1, fp
 8008e10:	f7f7 fbf2 	bl	80005f8 <__aeabi_dmul>
 8008e14:	4b2d      	ldr	r3, [pc, #180]	; (8008ecc <_dtoa_r+0x624>)
 8008e16:	4682      	mov	sl, r0
 8008e18:	468b      	mov	fp, r1
 8008e1a:	4640      	mov	r0, r8
 8008e1c:	4649      	mov	r1, r9
 8008e1e:	2200      	movs	r2, #0
 8008e20:	f7f7 fbea 	bl	80005f8 <__aeabi_dmul>
 8008e24:	4680      	mov	r8, r0
 8008e26:	4689      	mov	r9, r1
 8008e28:	e7c6      	b.n	8008db8 <_dtoa_r+0x510>
 8008e2a:	4650      	mov	r0, sl
 8008e2c:	4659      	mov	r1, fp
 8008e2e:	f7f7 fbe3 	bl	80005f8 <__aeabi_dmul>
 8008e32:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008e34:	9d01      	ldr	r5, [sp, #4]
 8008e36:	930f      	str	r3, [sp, #60]	; 0x3c
 8008e38:	4682      	mov	sl, r0
 8008e3a:	468b      	mov	fp, r1
 8008e3c:	4649      	mov	r1, r9
 8008e3e:	4640      	mov	r0, r8
 8008e40:	f7f7 fe8a 	bl	8000b58 <__aeabi_d2iz>
 8008e44:	4606      	mov	r6, r0
 8008e46:	f7f7 fb6d 	bl	8000524 <__aeabi_i2d>
 8008e4a:	3630      	adds	r6, #48	; 0x30
 8008e4c:	4602      	mov	r2, r0
 8008e4e:	460b      	mov	r3, r1
 8008e50:	4640      	mov	r0, r8
 8008e52:	4649      	mov	r1, r9
 8008e54:	f7f7 fa18 	bl	8000288 <__aeabi_dsub>
 8008e58:	f805 6b01 	strb.w	r6, [r5], #1
 8008e5c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008e5e:	429d      	cmp	r5, r3
 8008e60:	4680      	mov	r8, r0
 8008e62:	4689      	mov	r9, r1
 8008e64:	f04f 0200 	mov.w	r2, #0
 8008e68:	d124      	bne.n	8008eb4 <_dtoa_r+0x60c>
 8008e6a:	4b1b      	ldr	r3, [pc, #108]	; (8008ed8 <_dtoa_r+0x630>)
 8008e6c:	4650      	mov	r0, sl
 8008e6e:	4659      	mov	r1, fp
 8008e70:	f7f7 fa0c 	bl	800028c <__adddf3>
 8008e74:	4602      	mov	r2, r0
 8008e76:	460b      	mov	r3, r1
 8008e78:	4640      	mov	r0, r8
 8008e7a:	4649      	mov	r1, r9
 8008e7c:	f7f7 fe4c 	bl	8000b18 <__aeabi_dcmpgt>
 8008e80:	2800      	cmp	r0, #0
 8008e82:	d173      	bne.n	8008f6c <_dtoa_r+0x6c4>
 8008e84:	4652      	mov	r2, sl
 8008e86:	465b      	mov	r3, fp
 8008e88:	4913      	ldr	r1, [pc, #76]	; (8008ed8 <_dtoa_r+0x630>)
 8008e8a:	2000      	movs	r0, #0
 8008e8c:	f7f7 f9fc 	bl	8000288 <__aeabi_dsub>
 8008e90:	4602      	mov	r2, r0
 8008e92:	460b      	mov	r3, r1
 8008e94:	4640      	mov	r0, r8
 8008e96:	4649      	mov	r1, r9
 8008e98:	f7f7 fe20 	bl	8000adc <__aeabi_dcmplt>
 8008e9c:	2800      	cmp	r0, #0
 8008e9e:	f43f af35 	beq.w	8008d0c <_dtoa_r+0x464>
 8008ea2:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8008ea4:	1e6b      	subs	r3, r5, #1
 8008ea6:	930f      	str	r3, [sp, #60]	; 0x3c
 8008ea8:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8008eac:	2b30      	cmp	r3, #48	; 0x30
 8008eae:	d0f8      	beq.n	8008ea2 <_dtoa_r+0x5fa>
 8008eb0:	9700      	str	r7, [sp, #0]
 8008eb2:	e049      	b.n	8008f48 <_dtoa_r+0x6a0>
 8008eb4:	4b05      	ldr	r3, [pc, #20]	; (8008ecc <_dtoa_r+0x624>)
 8008eb6:	f7f7 fb9f 	bl	80005f8 <__aeabi_dmul>
 8008eba:	4680      	mov	r8, r0
 8008ebc:	4689      	mov	r9, r1
 8008ebe:	e7bd      	b.n	8008e3c <_dtoa_r+0x594>
 8008ec0:	0800d078 	.word	0x0800d078
 8008ec4:	0800d050 	.word	0x0800d050
 8008ec8:	3ff00000 	.word	0x3ff00000
 8008ecc:	40240000 	.word	0x40240000
 8008ed0:	401c0000 	.word	0x401c0000
 8008ed4:	40140000 	.word	0x40140000
 8008ed8:	3fe00000 	.word	0x3fe00000
 8008edc:	9d01      	ldr	r5, [sp, #4]
 8008ede:	4656      	mov	r6, sl
 8008ee0:	465f      	mov	r7, fp
 8008ee2:	4642      	mov	r2, r8
 8008ee4:	464b      	mov	r3, r9
 8008ee6:	4630      	mov	r0, r6
 8008ee8:	4639      	mov	r1, r7
 8008eea:	f7f7 fcaf 	bl	800084c <__aeabi_ddiv>
 8008eee:	f7f7 fe33 	bl	8000b58 <__aeabi_d2iz>
 8008ef2:	4682      	mov	sl, r0
 8008ef4:	f7f7 fb16 	bl	8000524 <__aeabi_i2d>
 8008ef8:	4642      	mov	r2, r8
 8008efa:	464b      	mov	r3, r9
 8008efc:	f7f7 fb7c 	bl	80005f8 <__aeabi_dmul>
 8008f00:	4602      	mov	r2, r0
 8008f02:	460b      	mov	r3, r1
 8008f04:	4630      	mov	r0, r6
 8008f06:	4639      	mov	r1, r7
 8008f08:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8008f0c:	f7f7 f9bc 	bl	8000288 <__aeabi_dsub>
 8008f10:	f805 6b01 	strb.w	r6, [r5], #1
 8008f14:	9e01      	ldr	r6, [sp, #4]
 8008f16:	9f03      	ldr	r7, [sp, #12]
 8008f18:	1bae      	subs	r6, r5, r6
 8008f1a:	42b7      	cmp	r7, r6
 8008f1c:	4602      	mov	r2, r0
 8008f1e:	460b      	mov	r3, r1
 8008f20:	d135      	bne.n	8008f8e <_dtoa_r+0x6e6>
 8008f22:	f7f7 f9b3 	bl	800028c <__adddf3>
 8008f26:	4642      	mov	r2, r8
 8008f28:	464b      	mov	r3, r9
 8008f2a:	4606      	mov	r6, r0
 8008f2c:	460f      	mov	r7, r1
 8008f2e:	f7f7 fdf3 	bl	8000b18 <__aeabi_dcmpgt>
 8008f32:	b9d0      	cbnz	r0, 8008f6a <_dtoa_r+0x6c2>
 8008f34:	4642      	mov	r2, r8
 8008f36:	464b      	mov	r3, r9
 8008f38:	4630      	mov	r0, r6
 8008f3a:	4639      	mov	r1, r7
 8008f3c:	f7f7 fdc4 	bl	8000ac8 <__aeabi_dcmpeq>
 8008f40:	b110      	cbz	r0, 8008f48 <_dtoa_r+0x6a0>
 8008f42:	f01a 0f01 	tst.w	sl, #1
 8008f46:	d110      	bne.n	8008f6a <_dtoa_r+0x6c2>
 8008f48:	4620      	mov	r0, r4
 8008f4a:	ee18 1a10 	vmov	r1, s16
 8008f4e:	f001 f8cb 	bl	800a0e8 <_Bfree>
 8008f52:	2300      	movs	r3, #0
 8008f54:	9800      	ldr	r0, [sp, #0]
 8008f56:	702b      	strb	r3, [r5, #0]
 8008f58:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008f5a:	3001      	adds	r0, #1
 8008f5c:	6018      	str	r0, [r3, #0]
 8008f5e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008f60:	2b00      	cmp	r3, #0
 8008f62:	f43f acf1 	beq.w	8008948 <_dtoa_r+0xa0>
 8008f66:	601d      	str	r5, [r3, #0]
 8008f68:	e4ee      	b.n	8008948 <_dtoa_r+0xa0>
 8008f6a:	9f00      	ldr	r7, [sp, #0]
 8008f6c:	462b      	mov	r3, r5
 8008f6e:	461d      	mov	r5, r3
 8008f70:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008f74:	2a39      	cmp	r2, #57	; 0x39
 8008f76:	d106      	bne.n	8008f86 <_dtoa_r+0x6de>
 8008f78:	9a01      	ldr	r2, [sp, #4]
 8008f7a:	429a      	cmp	r2, r3
 8008f7c:	d1f7      	bne.n	8008f6e <_dtoa_r+0x6c6>
 8008f7e:	9901      	ldr	r1, [sp, #4]
 8008f80:	2230      	movs	r2, #48	; 0x30
 8008f82:	3701      	adds	r7, #1
 8008f84:	700a      	strb	r2, [r1, #0]
 8008f86:	781a      	ldrb	r2, [r3, #0]
 8008f88:	3201      	adds	r2, #1
 8008f8a:	701a      	strb	r2, [r3, #0]
 8008f8c:	e790      	b.n	8008eb0 <_dtoa_r+0x608>
 8008f8e:	4ba6      	ldr	r3, [pc, #664]	; (8009228 <_dtoa_r+0x980>)
 8008f90:	2200      	movs	r2, #0
 8008f92:	f7f7 fb31 	bl	80005f8 <__aeabi_dmul>
 8008f96:	2200      	movs	r2, #0
 8008f98:	2300      	movs	r3, #0
 8008f9a:	4606      	mov	r6, r0
 8008f9c:	460f      	mov	r7, r1
 8008f9e:	f7f7 fd93 	bl	8000ac8 <__aeabi_dcmpeq>
 8008fa2:	2800      	cmp	r0, #0
 8008fa4:	d09d      	beq.n	8008ee2 <_dtoa_r+0x63a>
 8008fa6:	e7cf      	b.n	8008f48 <_dtoa_r+0x6a0>
 8008fa8:	9a08      	ldr	r2, [sp, #32]
 8008faa:	2a00      	cmp	r2, #0
 8008fac:	f000 80d7 	beq.w	800915e <_dtoa_r+0x8b6>
 8008fb0:	9a06      	ldr	r2, [sp, #24]
 8008fb2:	2a01      	cmp	r2, #1
 8008fb4:	f300 80ba 	bgt.w	800912c <_dtoa_r+0x884>
 8008fb8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008fba:	2a00      	cmp	r2, #0
 8008fbc:	f000 80b2 	beq.w	8009124 <_dtoa_r+0x87c>
 8008fc0:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8008fc4:	9e07      	ldr	r6, [sp, #28]
 8008fc6:	9d04      	ldr	r5, [sp, #16]
 8008fc8:	9a04      	ldr	r2, [sp, #16]
 8008fca:	441a      	add	r2, r3
 8008fcc:	9204      	str	r2, [sp, #16]
 8008fce:	9a05      	ldr	r2, [sp, #20]
 8008fd0:	2101      	movs	r1, #1
 8008fd2:	441a      	add	r2, r3
 8008fd4:	4620      	mov	r0, r4
 8008fd6:	9205      	str	r2, [sp, #20]
 8008fd8:	f001 f988 	bl	800a2ec <__i2b>
 8008fdc:	4607      	mov	r7, r0
 8008fde:	2d00      	cmp	r5, #0
 8008fe0:	dd0c      	ble.n	8008ffc <_dtoa_r+0x754>
 8008fe2:	9b05      	ldr	r3, [sp, #20]
 8008fe4:	2b00      	cmp	r3, #0
 8008fe6:	dd09      	ble.n	8008ffc <_dtoa_r+0x754>
 8008fe8:	42ab      	cmp	r3, r5
 8008fea:	9a04      	ldr	r2, [sp, #16]
 8008fec:	bfa8      	it	ge
 8008fee:	462b      	movge	r3, r5
 8008ff0:	1ad2      	subs	r2, r2, r3
 8008ff2:	9204      	str	r2, [sp, #16]
 8008ff4:	9a05      	ldr	r2, [sp, #20]
 8008ff6:	1aed      	subs	r5, r5, r3
 8008ff8:	1ad3      	subs	r3, r2, r3
 8008ffa:	9305      	str	r3, [sp, #20]
 8008ffc:	9b07      	ldr	r3, [sp, #28]
 8008ffe:	b31b      	cbz	r3, 8009048 <_dtoa_r+0x7a0>
 8009000:	9b08      	ldr	r3, [sp, #32]
 8009002:	2b00      	cmp	r3, #0
 8009004:	f000 80af 	beq.w	8009166 <_dtoa_r+0x8be>
 8009008:	2e00      	cmp	r6, #0
 800900a:	dd13      	ble.n	8009034 <_dtoa_r+0x78c>
 800900c:	4639      	mov	r1, r7
 800900e:	4632      	mov	r2, r6
 8009010:	4620      	mov	r0, r4
 8009012:	f001 fa2b 	bl	800a46c <__pow5mult>
 8009016:	ee18 2a10 	vmov	r2, s16
 800901a:	4601      	mov	r1, r0
 800901c:	4607      	mov	r7, r0
 800901e:	4620      	mov	r0, r4
 8009020:	f001 f97a 	bl	800a318 <__multiply>
 8009024:	ee18 1a10 	vmov	r1, s16
 8009028:	4680      	mov	r8, r0
 800902a:	4620      	mov	r0, r4
 800902c:	f001 f85c 	bl	800a0e8 <_Bfree>
 8009030:	ee08 8a10 	vmov	s16, r8
 8009034:	9b07      	ldr	r3, [sp, #28]
 8009036:	1b9a      	subs	r2, r3, r6
 8009038:	d006      	beq.n	8009048 <_dtoa_r+0x7a0>
 800903a:	ee18 1a10 	vmov	r1, s16
 800903e:	4620      	mov	r0, r4
 8009040:	f001 fa14 	bl	800a46c <__pow5mult>
 8009044:	ee08 0a10 	vmov	s16, r0
 8009048:	2101      	movs	r1, #1
 800904a:	4620      	mov	r0, r4
 800904c:	f001 f94e 	bl	800a2ec <__i2b>
 8009050:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009052:	2b00      	cmp	r3, #0
 8009054:	4606      	mov	r6, r0
 8009056:	f340 8088 	ble.w	800916a <_dtoa_r+0x8c2>
 800905a:	461a      	mov	r2, r3
 800905c:	4601      	mov	r1, r0
 800905e:	4620      	mov	r0, r4
 8009060:	f001 fa04 	bl	800a46c <__pow5mult>
 8009064:	9b06      	ldr	r3, [sp, #24]
 8009066:	2b01      	cmp	r3, #1
 8009068:	4606      	mov	r6, r0
 800906a:	f340 8081 	ble.w	8009170 <_dtoa_r+0x8c8>
 800906e:	f04f 0800 	mov.w	r8, #0
 8009072:	6933      	ldr	r3, [r6, #16]
 8009074:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8009078:	6918      	ldr	r0, [r3, #16]
 800907a:	f001 f8e7 	bl	800a24c <__hi0bits>
 800907e:	f1c0 0020 	rsb	r0, r0, #32
 8009082:	9b05      	ldr	r3, [sp, #20]
 8009084:	4418      	add	r0, r3
 8009086:	f010 001f 	ands.w	r0, r0, #31
 800908a:	f000 8092 	beq.w	80091b2 <_dtoa_r+0x90a>
 800908e:	f1c0 0320 	rsb	r3, r0, #32
 8009092:	2b04      	cmp	r3, #4
 8009094:	f340 808a 	ble.w	80091ac <_dtoa_r+0x904>
 8009098:	f1c0 001c 	rsb	r0, r0, #28
 800909c:	9b04      	ldr	r3, [sp, #16]
 800909e:	4403      	add	r3, r0
 80090a0:	9304      	str	r3, [sp, #16]
 80090a2:	9b05      	ldr	r3, [sp, #20]
 80090a4:	4403      	add	r3, r0
 80090a6:	4405      	add	r5, r0
 80090a8:	9305      	str	r3, [sp, #20]
 80090aa:	9b04      	ldr	r3, [sp, #16]
 80090ac:	2b00      	cmp	r3, #0
 80090ae:	dd07      	ble.n	80090c0 <_dtoa_r+0x818>
 80090b0:	ee18 1a10 	vmov	r1, s16
 80090b4:	461a      	mov	r2, r3
 80090b6:	4620      	mov	r0, r4
 80090b8:	f001 fa32 	bl	800a520 <__lshift>
 80090bc:	ee08 0a10 	vmov	s16, r0
 80090c0:	9b05      	ldr	r3, [sp, #20]
 80090c2:	2b00      	cmp	r3, #0
 80090c4:	dd05      	ble.n	80090d2 <_dtoa_r+0x82a>
 80090c6:	4631      	mov	r1, r6
 80090c8:	461a      	mov	r2, r3
 80090ca:	4620      	mov	r0, r4
 80090cc:	f001 fa28 	bl	800a520 <__lshift>
 80090d0:	4606      	mov	r6, r0
 80090d2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80090d4:	2b00      	cmp	r3, #0
 80090d6:	d06e      	beq.n	80091b6 <_dtoa_r+0x90e>
 80090d8:	ee18 0a10 	vmov	r0, s16
 80090dc:	4631      	mov	r1, r6
 80090de:	f001 fa8f 	bl	800a600 <__mcmp>
 80090e2:	2800      	cmp	r0, #0
 80090e4:	da67      	bge.n	80091b6 <_dtoa_r+0x90e>
 80090e6:	9b00      	ldr	r3, [sp, #0]
 80090e8:	3b01      	subs	r3, #1
 80090ea:	ee18 1a10 	vmov	r1, s16
 80090ee:	9300      	str	r3, [sp, #0]
 80090f0:	220a      	movs	r2, #10
 80090f2:	2300      	movs	r3, #0
 80090f4:	4620      	mov	r0, r4
 80090f6:	f001 f819 	bl	800a12c <__multadd>
 80090fa:	9b08      	ldr	r3, [sp, #32]
 80090fc:	ee08 0a10 	vmov	s16, r0
 8009100:	2b00      	cmp	r3, #0
 8009102:	f000 81b1 	beq.w	8009468 <_dtoa_r+0xbc0>
 8009106:	2300      	movs	r3, #0
 8009108:	4639      	mov	r1, r7
 800910a:	220a      	movs	r2, #10
 800910c:	4620      	mov	r0, r4
 800910e:	f001 f80d 	bl	800a12c <__multadd>
 8009112:	9b02      	ldr	r3, [sp, #8]
 8009114:	2b00      	cmp	r3, #0
 8009116:	4607      	mov	r7, r0
 8009118:	f300 808e 	bgt.w	8009238 <_dtoa_r+0x990>
 800911c:	9b06      	ldr	r3, [sp, #24]
 800911e:	2b02      	cmp	r3, #2
 8009120:	dc51      	bgt.n	80091c6 <_dtoa_r+0x91e>
 8009122:	e089      	b.n	8009238 <_dtoa_r+0x990>
 8009124:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009126:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800912a:	e74b      	b.n	8008fc4 <_dtoa_r+0x71c>
 800912c:	9b03      	ldr	r3, [sp, #12]
 800912e:	1e5e      	subs	r6, r3, #1
 8009130:	9b07      	ldr	r3, [sp, #28]
 8009132:	42b3      	cmp	r3, r6
 8009134:	bfbf      	itttt	lt
 8009136:	9b07      	ldrlt	r3, [sp, #28]
 8009138:	9607      	strlt	r6, [sp, #28]
 800913a:	1af2      	sublt	r2, r6, r3
 800913c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800913e:	bfb6      	itet	lt
 8009140:	189b      	addlt	r3, r3, r2
 8009142:	1b9e      	subge	r6, r3, r6
 8009144:	930a      	strlt	r3, [sp, #40]	; 0x28
 8009146:	9b03      	ldr	r3, [sp, #12]
 8009148:	bfb8      	it	lt
 800914a:	2600      	movlt	r6, #0
 800914c:	2b00      	cmp	r3, #0
 800914e:	bfb7      	itett	lt
 8009150:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8009154:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8009158:	1a9d      	sublt	r5, r3, r2
 800915a:	2300      	movlt	r3, #0
 800915c:	e734      	b.n	8008fc8 <_dtoa_r+0x720>
 800915e:	9e07      	ldr	r6, [sp, #28]
 8009160:	9d04      	ldr	r5, [sp, #16]
 8009162:	9f08      	ldr	r7, [sp, #32]
 8009164:	e73b      	b.n	8008fde <_dtoa_r+0x736>
 8009166:	9a07      	ldr	r2, [sp, #28]
 8009168:	e767      	b.n	800903a <_dtoa_r+0x792>
 800916a:	9b06      	ldr	r3, [sp, #24]
 800916c:	2b01      	cmp	r3, #1
 800916e:	dc18      	bgt.n	80091a2 <_dtoa_r+0x8fa>
 8009170:	f1ba 0f00 	cmp.w	sl, #0
 8009174:	d115      	bne.n	80091a2 <_dtoa_r+0x8fa>
 8009176:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800917a:	b993      	cbnz	r3, 80091a2 <_dtoa_r+0x8fa>
 800917c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8009180:	0d1b      	lsrs	r3, r3, #20
 8009182:	051b      	lsls	r3, r3, #20
 8009184:	b183      	cbz	r3, 80091a8 <_dtoa_r+0x900>
 8009186:	9b04      	ldr	r3, [sp, #16]
 8009188:	3301      	adds	r3, #1
 800918a:	9304      	str	r3, [sp, #16]
 800918c:	9b05      	ldr	r3, [sp, #20]
 800918e:	3301      	adds	r3, #1
 8009190:	9305      	str	r3, [sp, #20]
 8009192:	f04f 0801 	mov.w	r8, #1
 8009196:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009198:	2b00      	cmp	r3, #0
 800919a:	f47f af6a 	bne.w	8009072 <_dtoa_r+0x7ca>
 800919e:	2001      	movs	r0, #1
 80091a0:	e76f      	b.n	8009082 <_dtoa_r+0x7da>
 80091a2:	f04f 0800 	mov.w	r8, #0
 80091a6:	e7f6      	b.n	8009196 <_dtoa_r+0x8ee>
 80091a8:	4698      	mov	r8, r3
 80091aa:	e7f4      	b.n	8009196 <_dtoa_r+0x8ee>
 80091ac:	f43f af7d 	beq.w	80090aa <_dtoa_r+0x802>
 80091b0:	4618      	mov	r0, r3
 80091b2:	301c      	adds	r0, #28
 80091b4:	e772      	b.n	800909c <_dtoa_r+0x7f4>
 80091b6:	9b03      	ldr	r3, [sp, #12]
 80091b8:	2b00      	cmp	r3, #0
 80091ba:	dc37      	bgt.n	800922c <_dtoa_r+0x984>
 80091bc:	9b06      	ldr	r3, [sp, #24]
 80091be:	2b02      	cmp	r3, #2
 80091c0:	dd34      	ble.n	800922c <_dtoa_r+0x984>
 80091c2:	9b03      	ldr	r3, [sp, #12]
 80091c4:	9302      	str	r3, [sp, #8]
 80091c6:	9b02      	ldr	r3, [sp, #8]
 80091c8:	b96b      	cbnz	r3, 80091e6 <_dtoa_r+0x93e>
 80091ca:	4631      	mov	r1, r6
 80091cc:	2205      	movs	r2, #5
 80091ce:	4620      	mov	r0, r4
 80091d0:	f000 ffac 	bl	800a12c <__multadd>
 80091d4:	4601      	mov	r1, r0
 80091d6:	4606      	mov	r6, r0
 80091d8:	ee18 0a10 	vmov	r0, s16
 80091dc:	f001 fa10 	bl	800a600 <__mcmp>
 80091e0:	2800      	cmp	r0, #0
 80091e2:	f73f adbb 	bgt.w	8008d5c <_dtoa_r+0x4b4>
 80091e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80091e8:	9d01      	ldr	r5, [sp, #4]
 80091ea:	43db      	mvns	r3, r3
 80091ec:	9300      	str	r3, [sp, #0]
 80091ee:	f04f 0800 	mov.w	r8, #0
 80091f2:	4631      	mov	r1, r6
 80091f4:	4620      	mov	r0, r4
 80091f6:	f000 ff77 	bl	800a0e8 <_Bfree>
 80091fa:	2f00      	cmp	r7, #0
 80091fc:	f43f aea4 	beq.w	8008f48 <_dtoa_r+0x6a0>
 8009200:	f1b8 0f00 	cmp.w	r8, #0
 8009204:	d005      	beq.n	8009212 <_dtoa_r+0x96a>
 8009206:	45b8      	cmp	r8, r7
 8009208:	d003      	beq.n	8009212 <_dtoa_r+0x96a>
 800920a:	4641      	mov	r1, r8
 800920c:	4620      	mov	r0, r4
 800920e:	f000 ff6b 	bl	800a0e8 <_Bfree>
 8009212:	4639      	mov	r1, r7
 8009214:	4620      	mov	r0, r4
 8009216:	f000 ff67 	bl	800a0e8 <_Bfree>
 800921a:	e695      	b.n	8008f48 <_dtoa_r+0x6a0>
 800921c:	2600      	movs	r6, #0
 800921e:	4637      	mov	r7, r6
 8009220:	e7e1      	b.n	80091e6 <_dtoa_r+0x93e>
 8009222:	9700      	str	r7, [sp, #0]
 8009224:	4637      	mov	r7, r6
 8009226:	e599      	b.n	8008d5c <_dtoa_r+0x4b4>
 8009228:	40240000 	.word	0x40240000
 800922c:	9b08      	ldr	r3, [sp, #32]
 800922e:	2b00      	cmp	r3, #0
 8009230:	f000 80ca 	beq.w	80093c8 <_dtoa_r+0xb20>
 8009234:	9b03      	ldr	r3, [sp, #12]
 8009236:	9302      	str	r3, [sp, #8]
 8009238:	2d00      	cmp	r5, #0
 800923a:	dd05      	ble.n	8009248 <_dtoa_r+0x9a0>
 800923c:	4639      	mov	r1, r7
 800923e:	462a      	mov	r2, r5
 8009240:	4620      	mov	r0, r4
 8009242:	f001 f96d 	bl	800a520 <__lshift>
 8009246:	4607      	mov	r7, r0
 8009248:	f1b8 0f00 	cmp.w	r8, #0
 800924c:	d05b      	beq.n	8009306 <_dtoa_r+0xa5e>
 800924e:	6879      	ldr	r1, [r7, #4]
 8009250:	4620      	mov	r0, r4
 8009252:	f000 ff09 	bl	800a068 <_Balloc>
 8009256:	4605      	mov	r5, r0
 8009258:	b928      	cbnz	r0, 8009266 <_dtoa_r+0x9be>
 800925a:	4b87      	ldr	r3, [pc, #540]	; (8009478 <_dtoa_r+0xbd0>)
 800925c:	4602      	mov	r2, r0
 800925e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8009262:	f7ff bb3b 	b.w	80088dc <_dtoa_r+0x34>
 8009266:	693a      	ldr	r2, [r7, #16]
 8009268:	3202      	adds	r2, #2
 800926a:	0092      	lsls	r2, r2, #2
 800926c:	f107 010c 	add.w	r1, r7, #12
 8009270:	300c      	adds	r0, #12
 8009272:	f7fd f991 	bl	8006598 <memcpy>
 8009276:	2201      	movs	r2, #1
 8009278:	4629      	mov	r1, r5
 800927a:	4620      	mov	r0, r4
 800927c:	f001 f950 	bl	800a520 <__lshift>
 8009280:	9b01      	ldr	r3, [sp, #4]
 8009282:	f103 0901 	add.w	r9, r3, #1
 8009286:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800928a:	4413      	add	r3, r2
 800928c:	9305      	str	r3, [sp, #20]
 800928e:	f00a 0301 	and.w	r3, sl, #1
 8009292:	46b8      	mov	r8, r7
 8009294:	9304      	str	r3, [sp, #16]
 8009296:	4607      	mov	r7, r0
 8009298:	4631      	mov	r1, r6
 800929a:	ee18 0a10 	vmov	r0, s16
 800929e:	f7ff fa75 	bl	800878c <quorem>
 80092a2:	4641      	mov	r1, r8
 80092a4:	9002      	str	r0, [sp, #8]
 80092a6:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 80092aa:	ee18 0a10 	vmov	r0, s16
 80092ae:	f001 f9a7 	bl	800a600 <__mcmp>
 80092b2:	463a      	mov	r2, r7
 80092b4:	9003      	str	r0, [sp, #12]
 80092b6:	4631      	mov	r1, r6
 80092b8:	4620      	mov	r0, r4
 80092ba:	f001 f9bd 	bl	800a638 <__mdiff>
 80092be:	68c2      	ldr	r2, [r0, #12]
 80092c0:	f109 3bff 	add.w	fp, r9, #4294967295
 80092c4:	4605      	mov	r5, r0
 80092c6:	bb02      	cbnz	r2, 800930a <_dtoa_r+0xa62>
 80092c8:	4601      	mov	r1, r0
 80092ca:	ee18 0a10 	vmov	r0, s16
 80092ce:	f001 f997 	bl	800a600 <__mcmp>
 80092d2:	4602      	mov	r2, r0
 80092d4:	4629      	mov	r1, r5
 80092d6:	4620      	mov	r0, r4
 80092d8:	9207      	str	r2, [sp, #28]
 80092da:	f000 ff05 	bl	800a0e8 <_Bfree>
 80092de:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 80092e2:	ea43 0102 	orr.w	r1, r3, r2
 80092e6:	9b04      	ldr	r3, [sp, #16]
 80092e8:	430b      	orrs	r3, r1
 80092ea:	464d      	mov	r5, r9
 80092ec:	d10f      	bne.n	800930e <_dtoa_r+0xa66>
 80092ee:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80092f2:	d02a      	beq.n	800934a <_dtoa_r+0xaa2>
 80092f4:	9b03      	ldr	r3, [sp, #12]
 80092f6:	2b00      	cmp	r3, #0
 80092f8:	dd02      	ble.n	8009300 <_dtoa_r+0xa58>
 80092fa:	9b02      	ldr	r3, [sp, #8]
 80092fc:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8009300:	f88b a000 	strb.w	sl, [fp]
 8009304:	e775      	b.n	80091f2 <_dtoa_r+0x94a>
 8009306:	4638      	mov	r0, r7
 8009308:	e7ba      	b.n	8009280 <_dtoa_r+0x9d8>
 800930a:	2201      	movs	r2, #1
 800930c:	e7e2      	b.n	80092d4 <_dtoa_r+0xa2c>
 800930e:	9b03      	ldr	r3, [sp, #12]
 8009310:	2b00      	cmp	r3, #0
 8009312:	db04      	blt.n	800931e <_dtoa_r+0xa76>
 8009314:	9906      	ldr	r1, [sp, #24]
 8009316:	430b      	orrs	r3, r1
 8009318:	9904      	ldr	r1, [sp, #16]
 800931a:	430b      	orrs	r3, r1
 800931c:	d122      	bne.n	8009364 <_dtoa_r+0xabc>
 800931e:	2a00      	cmp	r2, #0
 8009320:	ddee      	ble.n	8009300 <_dtoa_r+0xa58>
 8009322:	ee18 1a10 	vmov	r1, s16
 8009326:	2201      	movs	r2, #1
 8009328:	4620      	mov	r0, r4
 800932a:	f001 f8f9 	bl	800a520 <__lshift>
 800932e:	4631      	mov	r1, r6
 8009330:	ee08 0a10 	vmov	s16, r0
 8009334:	f001 f964 	bl	800a600 <__mcmp>
 8009338:	2800      	cmp	r0, #0
 800933a:	dc03      	bgt.n	8009344 <_dtoa_r+0xa9c>
 800933c:	d1e0      	bne.n	8009300 <_dtoa_r+0xa58>
 800933e:	f01a 0f01 	tst.w	sl, #1
 8009342:	d0dd      	beq.n	8009300 <_dtoa_r+0xa58>
 8009344:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8009348:	d1d7      	bne.n	80092fa <_dtoa_r+0xa52>
 800934a:	2339      	movs	r3, #57	; 0x39
 800934c:	f88b 3000 	strb.w	r3, [fp]
 8009350:	462b      	mov	r3, r5
 8009352:	461d      	mov	r5, r3
 8009354:	3b01      	subs	r3, #1
 8009356:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800935a:	2a39      	cmp	r2, #57	; 0x39
 800935c:	d071      	beq.n	8009442 <_dtoa_r+0xb9a>
 800935e:	3201      	adds	r2, #1
 8009360:	701a      	strb	r2, [r3, #0]
 8009362:	e746      	b.n	80091f2 <_dtoa_r+0x94a>
 8009364:	2a00      	cmp	r2, #0
 8009366:	dd07      	ble.n	8009378 <_dtoa_r+0xad0>
 8009368:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800936c:	d0ed      	beq.n	800934a <_dtoa_r+0xaa2>
 800936e:	f10a 0301 	add.w	r3, sl, #1
 8009372:	f88b 3000 	strb.w	r3, [fp]
 8009376:	e73c      	b.n	80091f2 <_dtoa_r+0x94a>
 8009378:	9b05      	ldr	r3, [sp, #20]
 800937a:	f809 ac01 	strb.w	sl, [r9, #-1]
 800937e:	4599      	cmp	r9, r3
 8009380:	d047      	beq.n	8009412 <_dtoa_r+0xb6a>
 8009382:	ee18 1a10 	vmov	r1, s16
 8009386:	2300      	movs	r3, #0
 8009388:	220a      	movs	r2, #10
 800938a:	4620      	mov	r0, r4
 800938c:	f000 fece 	bl	800a12c <__multadd>
 8009390:	45b8      	cmp	r8, r7
 8009392:	ee08 0a10 	vmov	s16, r0
 8009396:	f04f 0300 	mov.w	r3, #0
 800939a:	f04f 020a 	mov.w	r2, #10
 800939e:	4641      	mov	r1, r8
 80093a0:	4620      	mov	r0, r4
 80093a2:	d106      	bne.n	80093b2 <_dtoa_r+0xb0a>
 80093a4:	f000 fec2 	bl	800a12c <__multadd>
 80093a8:	4680      	mov	r8, r0
 80093aa:	4607      	mov	r7, r0
 80093ac:	f109 0901 	add.w	r9, r9, #1
 80093b0:	e772      	b.n	8009298 <_dtoa_r+0x9f0>
 80093b2:	f000 febb 	bl	800a12c <__multadd>
 80093b6:	4639      	mov	r1, r7
 80093b8:	4680      	mov	r8, r0
 80093ba:	2300      	movs	r3, #0
 80093bc:	220a      	movs	r2, #10
 80093be:	4620      	mov	r0, r4
 80093c0:	f000 feb4 	bl	800a12c <__multadd>
 80093c4:	4607      	mov	r7, r0
 80093c6:	e7f1      	b.n	80093ac <_dtoa_r+0xb04>
 80093c8:	9b03      	ldr	r3, [sp, #12]
 80093ca:	9302      	str	r3, [sp, #8]
 80093cc:	9d01      	ldr	r5, [sp, #4]
 80093ce:	ee18 0a10 	vmov	r0, s16
 80093d2:	4631      	mov	r1, r6
 80093d4:	f7ff f9da 	bl	800878c <quorem>
 80093d8:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 80093dc:	9b01      	ldr	r3, [sp, #4]
 80093de:	f805 ab01 	strb.w	sl, [r5], #1
 80093e2:	1aea      	subs	r2, r5, r3
 80093e4:	9b02      	ldr	r3, [sp, #8]
 80093e6:	4293      	cmp	r3, r2
 80093e8:	dd09      	ble.n	80093fe <_dtoa_r+0xb56>
 80093ea:	ee18 1a10 	vmov	r1, s16
 80093ee:	2300      	movs	r3, #0
 80093f0:	220a      	movs	r2, #10
 80093f2:	4620      	mov	r0, r4
 80093f4:	f000 fe9a 	bl	800a12c <__multadd>
 80093f8:	ee08 0a10 	vmov	s16, r0
 80093fc:	e7e7      	b.n	80093ce <_dtoa_r+0xb26>
 80093fe:	9b02      	ldr	r3, [sp, #8]
 8009400:	2b00      	cmp	r3, #0
 8009402:	bfc8      	it	gt
 8009404:	461d      	movgt	r5, r3
 8009406:	9b01      	ldr	r3, [sp, #4]
 8009408:	bfd8      	it	le
 800940a:	2501      	movle	r5, #1
 800940c:	441d      	add	r5, r3
 800940e:	f04f 0800 	mov.w	r8, #0
 8009412:	ee18 1a10 	vmov	r1, s16
 8009416:	2201      	movs	r2, #1
 8009418:	4620      	mov	r0, r4
 800941a:	f001 f881 	bl	800a520 <__lshift>
 800941e:	4631      	mov	r1, r6
 8009420:	ee08 0a10 	vmov	s16, r0
 8009424:	f001 f8ec 	bl	800a600 <__mcmp>
 8009428:	2800      	cmp	r0, #0
 800942a:	dc91      	bgt.n	8009350 <_dtoa_r+0xaa8>
 800942c:	d102      	bne.n	8009434 <_dtoa_r+0xb8c>
 800942e:	f01a 0f01 	tst.w	sl, #1
 8009432:	d18d      	bne.n	8009350 <_dtoa_r+0xaa8>
 8009434:	462b      	mov	r3, r5
 8009436:	461d      	mov	r5, r3
 8009438:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800943c:	2a30      	cmp	r2, #48	; 0x30
 800943e:	d0fa      	beq.n	8009436 <_dtoa_r+0xb8e>
 8009440:	e6d7      	b.n	80091f2 <_dtoa_r+0x94a>
 8009442:	9a01      	ldr	r2, [sp, #4]
 8009444:	429a      	cmp	r2, r3
 8009446:	d184      	bne.n	8009352 <_dtoa_r+0xaaa>
 8009448:	9b00      	ldr	r3, [sp, #0]
 800944a:	3301      	adds	r3, #1
 800944c:	9300      	str	r3, [sp, #0]
 800944e:	2331      	movs	r3, #49	; 0x31
 8009450:	7013      	strb	r3, [r2, #0]
 8009452:	e6ce      	b.n	80091f2 <_dtoa_r+0x94a>
 8009454:	4b09      	ldr	r3, [pc, #36]	; (800947c <_dtoa_r+0xbd4>)
 8009456:	f7ff ba95 	b.w	8008984 <_dtoa_r+0xdc>
 800945a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800945c:	2b00      	cmp	r3, #0
 800945e:	f47f aa6e 	bne.w	800893e <_dtoa_r+0x96>
 8009462:	4b07      	ldr	r3, [pc, #28]	; (8009480 <_dtoa_r+0xbd8>)
 8009464:	f7ff ba8e 	b.w	8008984 <_dtoa_r+0xdc>
 8009468:	9b02      	ldr	r3, [sp, #8]
 800946a:	2b00      	cmp	r3, #0
 800946c:	dcae      	bgt.n	80093cc <_dtoa_r+0xb24>
 800946e:	9b06      	ldr	r3, [sp, #24]
 8009470:	2b02      	cmp	r3, #2
 8009472:	f73f aea8 	bgt.w	80091c6 <_dtoa_r+0x91e>
 8009476:	e7a9      	b.n	80093cc <_dtoa_r+0xb24>
 8009478:	0800cf01 	.word	0x0800cf01
 800947c:	0800d161 	.word	0x0800d161
 8009480:	0800ce99 	.word	0x0800ce99

08009484 <__sflush_r>:
 8009484:	898a      	ldrh	r2, [r1, #12]
 8009486:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800948a:	4605      	mov	r5, r0
 800948c:	0710      	lsls	r0, r2, #28
 800948e:	460c      	mov	r4, r1
 8009490:	d458      	bmi.n	8009544 <__sflush_r+0xc0>
 8009492:	684b      	ldr	r3, [r1, #4]
 8009494:	2b00      	cmp	r3, #0
 8009496:	dc05      	bgt.n	80094a4 <__sflush_r+0x20>
 8009498:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800949a:	2b00      	cmp	r3, #0
 800949c:	dc02      	bgt.n	80094a4 <__sflush_r+0x20>
 800949e:	2000      	movs	r0, #0
 80094a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80094a4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80094a6:	2e00      	cmp	r6, #0
 80094a8:	d0f9      	beq.n	800949e <__sflush_r+0x1a>
 80094aa:	2300      	movs	r3, #0
 80094ac:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80094b0:	682f      	ldr	r7, [r5, #0]
 80094b2:	602b      	str	r3, [r5, #0]
 80094b4:	d032      	beq.n	800951c <__sflush_r+0x98>
 80094b6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80094b8:	89a3      	ldrh	r3, [r4, #12]
 80094ba:	075a      	lsls	r2, r3, #29
 80094bc:	d505      	bpl.n	80094ca <__sflush_r+0x46>
 80094be:	6863      	ldr	r3, [r4, #4]
 80094c0:	1ac0      	subs	r0, r0, r3
 80094c2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80094c4:	b10b      	cbz	r3, 80094ca <__sflush_r+0x46>
 80094c6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80094c8:	1ac0      	subs	r0, r0, r3
 80094ca:	2300      	movs	r3, #0
 80094cc:	4602      	mov	r2, r0
 80094ce:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80094d0:	6a21      	ldr	r1, [r4, #32]
 80094d2:	4628      	mov	r0, r5
 80094d4:	47b0      	blx	r6
 80094d6:	1c43      	adds	r3, r0, #1
 80094d8:	89a3      	ldrh	r3, [r4, #12]
 80094da:	d106      	bne.n	80094ea <__sflush_r+0x66>
 80094dc:	6829      	ldr	r1, [r5, #0]
 80094de:	291d      	cmp	r1, #29
 80094e0:	d82c      	bhi.n	800953c <__sflush_r+0xb8>
 80094e2:	4a2a      	ldr	r2, [pc, #168]	; (800958c <__sflush_r+0x108>)
 80094e4:	40ca      	lsrs	r2, r1
 80094e6:	07d6      	lsls	r6, r2, #31
 80094e8:	d528      	bpl.n	800953c <__sflush_r+0xb8>
 80094ea:	2200      	movs	r2, #0
 80094ec:	6062      	str	r2, [r4, #4]
 80094ee:	04d9      	lsls	r1, r3, #19
 80094f0:	6922      	ldr	r2, [r4, #16]
 80094f2:	6022      	str	r2, [r4, #0]
 80094f4:	d504      	bpl.n	8009500 <__sflush_r+0x7c>
 80094f6:	1c42      	adds	r2, r0, #1
 80094f8:	d101      	bne.n	80094fe <__sflush_r+0x7a>
 80094fa:	682b      	ldr	r3, [r5, #0]
 80094fc:	b903      	cbnz	r3, 8009500 <__sflush_r+0x7c>
 80094fe:	6560      	str	r0, [r4, #84]	; 0x54
 8009500:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009502:	602f      	str	r7, [r5, #0]
 8009504:	2900      	cmp	r1, #0
 8009506:	d0ca      	beq.n	800949e <__sflush_r+0x1a>
 8009508:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800950c:	4299      	cmp	r1, r3
 800950e:	d002      	beq.n	8009516 <__sflush_r+0x92>
 8009510:	4628      	mov	r0, r5
 8009512:	f7fd f857 	bl	80065c4 <_free_r>
 8009516:	2000      	movs	r0, #0
 8009518:	6360      	str	r0, [r4, #52]	; 0x34
 800951a:	e7c1      	b.n	80094a0 <__sflush_r+0x1c>
 800951c:	6a21      	ldr	r1, [r4, #32]
 800951e:	2301      	movs	r3, #1
 8009520:	4628      	mov	r0, r5
 8009522:	47b0      	blx	r6
 8009524:	1c41      	adds	r1, r0, #1
 8009526:	d1c7      	bne.n	80094b8 <__sflush_r+0x34>
 8009528:	682b      	ldr	r3, [r5, #0]
 800952a:	2b00      	cmp	r3, #0
 800952c:	d0c4      	beq.n	80094b8 <__sflush_r+0x34>
 800952e:	2b1d      	cmp	r3, #29
 8009530:	d001      	beq.n	8009536 <__sflush_r+0xb2>
 8009532:	2b16      	cmp	r3, #22
 8009534:	d101      	bne.n	800953a <__sflush_r+0xb6>
 8009536:	602f      	str	r7, [r5, #0]
 8009538:	e7b1      	b.n	800949e <__sflush_r+0x1a>
 800953a:	89a3      	ldrh	r3, [r4, #12]
 800953c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009540:	81a3      	strh	r3, [r4, #12]
 8009542:	e7ad      	b.n	80094a0 <__sflush_r+0x1c>
 8009544:	690f      	ldr	r7, [r1, #16]
 8009546:	2f00      	cmp	r7, #0
 8009548:	d0a9      	beq.n	800949e <__sflush_r+0x1a>
 800954a:	0793      	lsls	r3, r2, #30
 800954c:	680e      	ldr	r6, [r1, #0]
 800954e:	bf08      	it	eq
 8009550:	694b      	ldreq	r3, [r1, #20]
 8009552:	600f      	str	r7, [r1, #0]
 8009554:	bf18      	it	ne
 8009556:	2300      	movne	r3, #0
 8009558:	eba6 0807 	sub.w	r8, r6, r7
 800955c:	608b      	str	r3, [r1, #8]
 800955e:	f1b8 0f00 	cmp.w	r8, #0
 8009562:	dd9c      	ble.n	800949e <__sflush_r+0x1a>
 8009564:	6a21      	ldr	r1, [r4, #32]
 8009566:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009568:	4643      	mov	r3, r8
 800956a:	463a      	mov	r2, r7
 800956c:	4628      	mov	r0, r5
 800956e:	47b0      	blx	r6
 8009570:	2800      	cmp	r0, #0
 8009572:	dc06      	bgt.n	8009582 <__sflush_r+0xfe>
 8009574:	89a3      	ldrh	r3, [r4, #12]
 8009576:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800957a:	81a3      	strh	r3, [r4, #12]
 800957c:	f04f 30ff 	mov.w	r0, #4294967295
 8009580:	e78e      	b.n	80094a0 <__sflush_r+0x1c>
 8009582:	4407      	add	r7, r0
 8009584:	eba8 0800 	sub.w	r8, r8, r0
 8009588:	e7e9      	b.n	800955e <__sflush_r+0xda>
 800958a:	bf00      	nop
 800958c:	20400001 	.word	0x20400001

08009590 <_fflush_r>:
 8009590:	b538      	push	{r3, r4, r5, lr}
 8009592:	690b      	ldr	r3, [r1, #16]
 8009594:	4605      	mov	r5, r0
 8009596:	460c      	mov	r4, r1
 8009598:	b913      	cbnz	r3, 80095a0 <_fflush_r+0x10>
 800959a:	2500      	movs	r5, #0
 800959c:	4628      	mov	r0, r5
 800959e:	bd38      	pop	{r3, r4, r5, pc}
 80095a0:	b118      	cbz	r0, 80095aa <_fflush_r+0x1a>
 80095a2:	6983      	ldr	r3, [r0, #24]
 80095a4:	b90b      	cbnz	r3, 80095aa <_fflush_r+0x1a>
 80095a6:	f000 f899 	bl	80096dc <__sinit>
 80095aa:	4b14      	ldr	r3, [pc, #80]	; (80095fc <_fflush_r+0x6c>)
 80095ac:	429c      	cmp	r4, r3
 80095ae:	d11b      	bne.n	80095e8 <_fflush_r+0x58>
 80095b0:	686c      	ldr	r4, [r5, #4]
 80095b2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80095b6:	2b00      	cmp	r3, #0
 80095b8:	d0ef      	beq.n	800959a <_fflush_r+0xa>
 80095ba:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80095bc:	07d0      	lsls	r0, r2, #31
 80095be:	d404      	bmi.n	80095ca <_fflush_r+0x3a>
 80095c0:	0599      	lsls	r1, r3, #22
 80095c2:	d402      	bmi.n	80095ca <_fflush_r+0x3a>
 80095c4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80095c6:	f000 fcca 	bl	8009f5e <__retarget_lock_acquire_recursive>
 80095ca:	4628      	mov	r0, r5
 80095cc:	4621      	mov	r1, r4
 80095ce:	f7ff ff59 	bl	8009484 <__sflush_r>
 80095d2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80095d4:	07da      	lsls	r2, r3, #31
 80095d6:	4605      	mov	r5, r0
 80095d8:	d4e0      	bmi.n	800959c <_fflush_r+0xc>
 80095da:	89a3      	ldrh	r3, [r4, #12]
 80095dc:	059b      	lsls	r3, r3, #22
 80095de:	d4dd      	bmi.n	800959c <_fflush_r+0xc>
 80095e0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80095e2:	f000 fcbd 	bl	8009f60 <__retarget_lock_release_recursive>
 80095e6:	e7d9      	b.n	800959c <_fflush_r+0xc>
 80095e8:	4b05      	ldr	r3, [pc, #20]	; (8009600 <_fflush_r+0x70>)
 80095ea:	429c      	cmp	r4, r3
 80095ec:	d101      	bne.n	80095f2 <_fflush_r+0x62>
 80095ee:	68ac      	ldr	r4, [r5, #8]
 80095f0:	e7df      	b.n	80095b2 <_fflush_r+0x22>
 80095f2:	4b04      	ldr	r3, [pc, #16]	; (8009604 <_fflush_r+0x74>)
 80095f4:	429c      	cmp	r4, r3
 80095f6:	bf08      	it	eq
 80095f8:	68ec      	ldreq	r4, [r5, #12]
 80095fa:	e7da      	b.n	80095b2 <_fflush_r+0x22>
 80095fc:	0800cf34 	.word	0x0800cf34
 8009600:	0800cf54 	.word	0x0800cf54
 8009604:	0800cf14 	.word	0x0800cf14

08009608 <fflush>:
 8009608:	4601      	mov	r1, r0
 800960a:	b920      	cbnz	r0, 8009616 <fflush+0xe>
 800960c:	4b04      	ldr	r3, [pc, #16]	; (8009620 <fflush+0x18>)
 800960e:	4905      	ldr	r1, [pc, #20]	; (8009624 <fflush+0x1c>)
 8009610:	6818      	ldr	r0, [r3, #0]
 8009612:	f000 b910 	b.w	8009836 <_fwalk_reent>
 8009616:	4b04      	ldr	r3, [pc, #16]	; (8009628 <fflush+0x20>)
 8009618:	6818      	ldr	r0, [r3, #0]
 800961a:	f7ff bfb9 	b.w	8009590 <_fflush_r>
 800961e:	bf00      	nop
 8009620:	0800cc5c 	.word	0x0800cc5c
 8009624:	08009591 	.word	0x08009591
 8009628:	2000000c 	.word	0x2000000c

0800962c <std>:
 800962c:	2300      	movs	r3, #0
 800962e:	b510      	push	{r4, lr}
 8009630:	4604      	mov	r4, r0
 8009632:	e9c0 3300 	strd	r3, r3, [r0]
 8009636:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800963a:	6083      	str	r3, [r0, #8]
 800963c:	8181      	strh	r1, [r0, #12]
 800963e:	6643      	str	r3, [r0, #100]	; 0x64
 8009640:	81c2      	strh	r2, [r0, #14]
 8009642:	6183      	str	r3, [r0, #24]
 8009644:	4619      	mov	r1, r3
 8009646:	2208      	movs	r2, #8
 8009648:	305c      	adds	r0, #92	; 0x5c
 800964a:	f7fc ffb3 	bl	80065b4 <memset>
 800964e:	4b05      	ldr	r3, [pc, #20]	; (8009664 <std+0x38>)
 8009650:	6263      	str	r3, [r4, #36]	; 0x24
 8009652:	4b05      	ldr	r3, [pc, #20]	; (8009668 <std+0x3c>)
 8009654:	62a3      	str	r3, [r4, #40]	; 0x28
 8009656:	4b05      	ldr	r3, [pc, #20]	; (800966c <std+0x40>)
 8009658:	62e3      	str	r3, [r4, #44]	; 0x2c
 800965a:	4b05      	ldr	r3, [pc, #20]	; (8009670 <std+0x44>)
 800965c:	6224      	str	r4, [r4, #32]
 800965e:	6323      	str	r3, [r4, #48]	; 0x30
 8009660:	bd10      	pop	{r4, pc}
 8009662:	bf00      	nop
 8009664:	0800b769 	.word	0x0800b769
 8009668:	0800b78b 	.word	0x0800b78b
 800966c:	0800b7c3 	.word	0x0800b7c3
 8009670:	0800b7e7 	.word	0x0800b7e7

08009674 <_cleanup_r>:
 8009674:	4901      	ldr	r1, [pc, #4]	; (800967c <_cleanup_r+0x8>)
 8009676:	f000 b8de 	b.w	8009836 <_fwalk_reent>
 800967a:	bf00      	nop
 800967c:	08009591 	.word	0x08009591

08009680 <__sfmoreglue>:
 8009680:	b570      	push	{r4, r5, r6, lr}
 8009682:	2268      	movs	r2, #104	; 0x68
 8009684:	1e4d      	subs	r5, r1, #1
 8009686:	4355      	muls	r5, r2
 8009688:	460e      	mov	r6, r1
 800968a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800968e:	f7fd f805 	bl	800669c <_malloc_r>
 8009692:	4604      	mov	r4, r0
 8009694:	b140      	cbz	r0, 80096a8 <__sfmoreglue+0x28>
 8009696:	2100      	movs	r1, #0
 8009698:	e9c0 1600 	strd	r1, r6, [r0]
 800969c:	300c      	adds	r0, #12
 800969e:	60a0      	str	r0, [r4, #8]
 80096a0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80096a4:	f7fc ff86 	bl	80065b4 <memset>
 80096a8:	4620      	mov	r0, r4
 80096aa:	bd70      	pop	{r4, r5, r6, pc}

080096ac <__sfp_lock_acquire>:
 80096ac:	4801      	ldr	r0, [pc, #4]	; (80096b4 <__sfp_lock_acquire+0x8>)
 80096ae:	f000 bc56 	b.w	8009f5e <__retarget_lock_acquire_recursive>
 80096b2:	bf00      	nop
 80096b4:	20000341 	.word	0x20000341

080096b8 <__sfp_lock_release>:
 80096b8:	4801      	ldr	r0, [pc, #4]	; (80096c0 <__sfp_lock_release+0x8>)
 80096ba:	f000 bc51 	b.w	8009f60 <__retarget_lock_release_recursive>
 80096be:	bf00      	nop
 80096c0:	20000341 	.word	0x20000341

080096c4 <__sinit_lock_acquire>:
 80096c4:	4801      	ldr	r0, [pc, #4]	; (80096cc <__sinit_lock_acquire+0x8>)
 80096c6:	f000 bc4a 	b.w	8009f5e <__retarget_lock_acquire_recursive>
 80096ca:	bf00      	nop
 80096cc:	20000342 	.word	0x20000342

080096d0 <__sinit_lock_release>:
 80096d0:	4801      	ldr	r0, [pc, #4]	; (80096d8 <__sinit_lock_release+0x8>)
 80096d2:	f000 bc45 	b.w	8009f60 <__retarget_lock_release_recursive>
 80096d6:	bf00      	nop
 80096d8:	20000342 	.word	0x20000342

080096dc <__sinit>:
 80096dc:	b510      	push	{r4, lr}
 80096de:	4604      	mov	r4, r0
 80096e0:	f7ff fff0 	bl	80096c4 <__sinit_lock_acquire>
 80096e4:	69a3      	ldr	r3, [r4, #24]
 80096e6:	b11b      	cbz	r3, 80096f0 <__sinit+0x14>
 80096e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80096ec:	f7ff bff0 	b.w	80096d0 <__sinit_lock_release>
 80096f0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80096f4:	6523      	str	r3, [r4, #80]	; 0x50
 80096f6:	4b13      	ldr	r3, [pc, #76]	; (8009744 <__sinit+0x68>)
 80096f8:	4a13      	ldr	r2, [pc, #76]	; (8009748 <__sinit+0x6c>)
 80096fa:	681b      	ldr	r3, [r3, #0]
 80096fc:	62a2      	str	r2, [r4, #40]	; 0x28
 80096fe:	42a3      	cmp	r3, r4
 8009700:	bf04      	itt	eq
 8009702:	2301      	moveq	r3, #1
 8009704:	61a3      	streq	r3, [r4, #24]
 8009706:	4620      	mov	r0, r4
 8009708:	f000 f820 	bl	800974c <__sfp>
 800970c:	6060      	str	r0, [r4, #4]
 800970e:	4620      	mov	r0, r4
 8009710:	f000 f81c 	bl	800974c <__sfp>
 8009714:	60a0      	str	r0, [r4, #8]
 8009716:	4620      	mov	r0, r4
 8009718:	f000 f818 	bl	800974c <__sfp>
 800971c:	2200      	movs	r2, #0
 800971e:	60e0      	str	r0, [r4, #12]
 8009720:	2104      	movs	r1, #4
 8009722:	6860      	ldr	r0, [r4, #4]
 8009724:	f7ff ff82 	bl	800962c <std>
 8009728:	68a0      	ldr	r0, [r4, #8]
 800972a:	2201      	movs	r2, #1
 800972c:	2109      	movs	r1, #9
 800972e:	f7ff ff7d 	bl	800962c <std>
 8009732:	68e0      	ldr	r0, [r4, #12]
 8009734:	2202      	movs	r2, #2
 8009736:	2112      	movs	r1, #18
 8009738:	f7ff ff78 	bl	800962c <std>
 800973c:	2301      	movs	r3, #1
 800973e:	61a3      	str	r3, [r4, #24]
 8009740:	e7d2      	b.n	80096e8 <__sinit+0xc>
 8009742:	bf00      	nop
 8009744:	0800cc5c 	.word	0x0800cc5c
 8009748:	08009675 	.word	0x08009675

0800974c <__sfp>:
 800974c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800974e:	4607      	mov	r7, r0
 8009750:	f7ff ffac 	bl	80096ac <__sfp_lock_acquire>
 8009754:	4b1e      	ldr	r3, [pc, #120]	; (80097d0 <__sfp+0x84>)
 8009756:	681e      	ldr	r6, [r3, #0]
 8009758:	69b3      	ldr	r3, [r6, #24]
 800975a:	b913      	cbnz	r3, 8009762 <__sfp+0x16>
 800975c:	4630      	mov	r0, r6
 800975e:	f7ff ffbd 	bl	80096dc <__sinit>
 8009762:	3648      	adds	r6, #72	; 0x48
 8009764:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8009768:	3b01      	subs	r3, #1
 800976a:	d503      	bpl.n	8009774 <__sfp+0x28>
 800976c:	6833      	ldr	r3, [r6, #0]
 800976e:	b30b      	cbz	r3, 80097b4 <__sfp+0x68>
 8009770:	6836      	ldr	r6, [r6, #0]
 8009772:	e7f7      	b.n	8009764 <__sfp+0x18>
 8009774:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8009778:	b9d5      	cbnz	r5, 80097b0 <__sfp+0x64>
 800977a:	4b16      	ldr	r3, [pc, #88]	; (80097d4 <__sfp+0x88>)
 800977c:	60e3      	str	r3, [r4, #12]
 800977e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8009782:	6665      	str	r5, [r4, #100]	; 0x64
 8009784:	f000 fbea 	bl	8009f5c <__retarget_lock_init_recursive>
 8009788:	f7ff ff96 	bl	80096b8 <__sfp_lock_release>
 800978c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8009790:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8009794:	6025      	str	r5, [r4, #0]
 8009796:	61a5      	str	r5, [r4, #24]
 8009798:	2208      	movs	r2, #8
 800979a:	4629      	mov	r1, r5
 800979c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80097a0:	f7fc ff08 	bl	80065b4 <memset>
 80097a4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80097a8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80097ac:	4620      	mov	r0, r4
 80097ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80097b0:	3468      	adds	r4, #104	; 0x68
 80097b2:	e7d9      	b.n	8009768 <__sfp+0x1c>
 80097b4:	2104      	movs	r1, #4
 80097b6:	4638      	mov	r0, r7
 80097b8:	f7ff ff62 	bl	8009680 <__sfmoreglue>
 80097bc:	4604      	mov	r4, r0
 80097be:	6030      	str	r0, [r6, #0]
 80097c0:	2800      	cmp	r0, #0
 80097c2:	d1d5      	bne.n	8009770 <__sfp+0x24>
 80097c4:	f7ff ff78 	bl	80096b8 <__sfp_lock_release>
 80097c8:	230c      	movs	r3, #12
 80097ca:	603b      	str	r3, [r7, #0]
 80097cc:	e7ee      	b.n	80097ac <__sfp+0x60>
 80097ce:	bf00      	nop
 80097d0:	0800cc5c 	.word	0x0800cc5c
 80097d4:	ffff0001 	.word	0xffff0001

080097d8 <fiprintf>:
 80097d8:	b40e      	push	{r1, r2, r3}
 80097da:	b503      	push	{r0, r1, lr}
 80097dc:	4601      	mov	r1, r0
 80097de:	ab03      	add	r3, sp, #12
 80097e0:	4805      	ldr	r0, [pc, #20]	; (80097f8 <fiprintf+0x20>)
 80097e2:	f853 2b04 	ldr.w	r2, [r3], #4
 80097e6:	6800      	ldr	r0, [r0, #0]
 80097e8:	9301      	str	r3, [sp, #4]
 80097ea:	f001 fa99 	bl	800ad20 <_vfiprintf_r>
 80097ee:	b002      	add	sp, #8
 80097f0:	f85d eb04 	ldr.w	lr, [sp], #4
 80097f4:	b003      	add	sp, #12
 80097f6:	4770      	bx	lr
 80097f8:	2000000c 	.word	0x2000000c

080097fc <_fwalk>:
 80097fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009800:	460f      	mov	r7, r1
 8009802:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8009806:	2600      	movs	r6, #0
 8009808:	e9d4 8501 	ldrd	r8, r5, [r4, #4]
 800980c:	f1b8 0801 	subs.w	r8, r8, #1
 8009810:	d505      	bpl.n	800981e <_fwalk+0x22>
 8009812:	6824      	ldr	r4, [r4, #0]
 8009814:	2c00      	cmp	r4, #0
 8009816:	d1f7      	bne.n	8009808 <_fwalk+0xc>
 8009818:	4630      	mov	r0, r6
 800981a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800981e:	89ab      	ldrh	r3, [r5, #12]
 8009820:	2b01      	cmp	r3, #1
 8009822:	d906      	bls.n	8009832 <_fwalk+0x36>
 8009824:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009828:	3301      	adds	r3, #1
 800982a:	d002      	beq.n	8009832 <_fwalk+0x36>
 800982c:	4628      	mov	r0, r5
 800982e:	47b8      	blx	r7
 8009830:	4306      	orrs	r6, r0
 8009832:	3568      	adds	r5, #104	; 0x68
 8009834:	e7ea      	b.n	800980c <_fwalk+0x10>

08009836 <_fwalk_reent>:
 8009836:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800983a:	4606      	mov	r6, r0
 800983c:	4688      	mov	r8, r1
 800983e:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8009842:	2700      	movs	r7, #0
 8009844:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009848:	f1b9 0901 	subs.w	r9, r9, #1
 800984c:	d505      	bpl.n	800985a <_fwalk_reent+0x24>
 800984e:	6824      	ldr	r4, [r4, #0]
 8009850:	2c00      	cmp	r4, #0
 8009852:	d1f7      	bne.n	8009844 <_fwalk_reent+0xe>
 8009854:	4638      	mov	r0, r7
 8009856:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800985a:	89ab      	ldrh	r3, [r5, #12]
 800985c:	2b01      	cmp	r3, #1
 800985e:	d907      	bls.n	8009870 <_fwalk_reent+0x3a>
 8009860:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009864:	3301      	adds	r3, #1
 8009866:	d003      	beq.n	8009870 <_fwalk_reent+0x3a>
 8009868:	4629      	mov	r1, r5
 800986a:	4630      	mov	r0, r6
 800986c:	47c0      	blx	r8
 800986e:	4307      	orrs	r7, r0
 8009870:	3568      	adds	r5, #104	; 0x68
 8009872:	e7e9      	b.n	8009848 <_fwalk_reent+0x12>

08009874 <rshift>:
 8009874:	6903      	ldr	r3, [r0, #16]
 8009876:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800987a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800987e:	ea4f 1261 	mov.w	r2, r1, asr #5
 8009882:	f100 0414 	add.w	r4, r0, #20
 8009886:	dd45      	ble.n	8009914 <rshift+0xa0>
 8009888:	f011 011f 	ands.w	r1, r1, #31
 800988c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8009890:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8009894:	d10c      	bne.n	80098b0 <rshift+0x3c>
 8009896:	f100 0710 	add.w	r7, r0, #16
 800989a:	4629      	mov	r1, r5
 800989c:	42b1      	cmp	r1, r6
 800989e:	d334      	bcc.n	800990a <rshift+0x96>
 80098a0:	1a9b      	subs	r3, r3, r2
 80098a2:	009b      	lsls	r3, r3, #2
 80098a4:	1eea      	subs	r2, r5, #3
 80098a6:	4296      	cmp	r6, r2
 80098a8:	bf38      	it	cc
 80098aa:	2300      	movcc	r3, #0
 80098ac:	4423      	add	r3, r4
 80098ae:	e015      	b.n	80098dc <rshift+0x68>
 80098b0:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 80098b4:	f1c1 0820 	rsb	r8, r1, #32
 80098b8:	40cf      	lsrs	r7, r1
 80098ba:	f105 0e04 	add.w	lr, r5, #4
 80098be:	46a1      	mov	r9, r4
 80098c0:	4576      	cmp	r6, lr
 80098c2:	46f4      	mov	ip, lr
 80098c4:	d815      	bhi.n	80098f2 <rshift+0x7e>
 80098c6:	1a9a      	subs	r2, r3, r2
 80098c8:	0092      	lsls	r2, r2, #2
 80098ca:	3a04      	subs	r2, #4
 80098cc:	3501      	adds	r5, #1
 80098ce:	42ae      	cmp	r6, r5
 80098d0:	bf38      	it	cc
 80098d2:	2200      	movcc	r2, #0
 80098d4:	18a3      	adds	r3, r4, r2
 80098d6:	50a7      	str	r7, [r4, r2]
 80098d8:	b107      	cbz	r7, 80098dc <rshift+0x68>
 80098da:	3304      	adds	r3, #4
 80098dc:	1b1a      	subs	r2, r3, r4
 80098de:	42a3      	cmp	r3, r4
 80098e0:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80098e4:	bf08      	it	eq
 80098e6:	2300      	moveq	r3, #0
 80098e8:	6102      	str	r2, [r0, #16]
 80098ea:	bf08      	it	eq
 80098ec:	6143      	streq	r3, [r0, #20]
 80098ee:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80098f2:	f8dc c000 	ldr.w	ip, [ip]
 80098f6:	fa0c fc08 	lsl.w	ip, ip, r8
 80098fa:	ea4c 0707 	orr.w	r7, ip, r7
 80098fe:	f849 7b04 	str.w	r7, [r9], #4
 8009902:	f85e 7b04 	ldr.w	r7, [lr], #4
 8009906:	40cf      	lsrs	r7, r1
 8009908:	e7da      	b.n	80098c0 <rshift+0x4c>
 800990a:	f851 cb04 	ldr.w	ip, [r1], #4
 800990e:	f847 cf04 	str.w	ip, [r7, #4]!
 8009912:	e7c3      	b.n	800989c <rshift+0x28>
 8009914:	4623      	mov	r3, r4
 8009916:	e7e1      	b.n	80098dc <rshift+0x68>

08009918 <__hexdig_fun>:
 8009918:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800991c:	2b09      	cmp	r3, #9
 800991e:	d802      	bhi.n	8009926 <__hexdig_fun+0xe>
 8009920:	3820      	subs	r0, #32
 8009922:	b2c0      	uxtb	r0, r0
 8009924:	4770      	bx	lr
 8009926:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800992a:	2b05      	cmp	r3, #5
 800992c:	d801      	bhi.n	8009932 <__hexdig_fun+0x1a>
 800992e:	3847      	subs	r0, #71	; 0x47
 8009930:	e7f7      	b.n	8009922 <__hexdig_fun+0xa>
 8009932:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8009936:	2b05      	cmp	r3, #5
 8009938:	d801      	bhi.n	800993e <__hexdig_fun+0x26>
 800993a:	3827      	subs	r0, #39	; 0x27
 800993c:	e7f1      	b.n	8009922 <__hexdig_fun+0xa>
 800993e:	2000      	movs	r0, #0
 8009940:	4770      	bx	lr
	...

08009944 <__gethex>:
 8009944:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009948:	ed2d 8b02 	vpush	{d8}
 800994c:	b089      	sub	sp, #36	; 0x24
 800994e:	ee08 0a10 	vmov	s16, r0
 8009952:	9304      	str	r3, [sp, #16]
 8009954:	4bb4      	ldr	r3, [pc, #720]	; (8009c28 <__gethex+0x2e4>)
 8009956:	681b      	ldr	r3, [r3, #0]
 8009958:	9301      	str	r3, [sp, #4]
 800995a:	4618      	mov	r0, r3
 800995c:	468b      	mov	fp, r1
 800995e:	4690      	mov	r8, r2
 8009960:	f7f6 fc36 	bl	80001d0 <strlen>
 8009964:	9b01      	ldr	r3, [sp, #4]
 8009966:	f8db 2000 	ldr.w	r2, [fp]
 800996a:	4403      	add	r3, r0
 800996c:	4682      	mov	sl, r0
 800996e:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8009972:	9305      	str	r3, [sp, #20]
 8009974:	1c93      	adds	r3, r2, #2
 8009976:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800997a:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800997e:	32fe      	adds	r2, #254	; 0xfe
 8009980:	18d1      	adds	r1, r2, r3
 8009982:	461f      	mov	r7, r3
 8009984:	f813 0b01 	ldrb.w	r0, [r3], #1
 8009988:	9100      	str	r1, [sp, #0]
 800998a:	2830      	cmp	r0, #48	; 0x30
 800998c:	d0f8      	beq.n	8009980 <__gethex+0x3c>
 800998e:	f7ff ffc3 	bl	8009918 <__hexdig_fun>
 8009992:	4604      	mov	r4, r0
 8009994:	2800      	cmp	r0, #0
 8009996:	d13a      	bne.n	8009a0e <__gethex+0xca>
 8009998:	9901      	ldr	r1, [sp, #4]
 800999a:	4652      	mov	r2, sl
 800999c:	4638      	mov	r0, r7
 800999e:	f001 ff26 	bl	800b7ee <strncmp>
 80099a2:	4605      	mov	r5, r0
 80099a4:	2800      	cmp	r0, #0
 80099a6:	d168      	bne.n	8009a7a <__gethex+0x136>
 80099a8:	f817 000a 	ldrb.w	r0, [r7, sl]
 80099ac:	eb07 060a 	add.w	r6, r7, sl
 80099b0:	f7ff ffb2 	bl	8009918 <__hexdig_fun>
 80099b4:	2800      	cmp	r0, #0
 80099b6:	d062      	beq.n	8009a7e <__gethex+0x13a>
 80099b8:	4633      	mov	r3, r6
 80099ba:	7818      	ldrb	r0, [r3, #0]
 80099bc:	2830      	cmp	r0, #48	; 0x30
 80099be:	461f      	mov	r7, r3
 80099c0:	f103 0301 	add.w	r3, r3, #1
 80099c4:	d0f9      	beq.n	80099ba <__gethex+0x76>
 80099c6:	f7ff ffa7 	bl	8009918 <__hexdig_fun>
 80099ca:	2301      	movs	r3, #1
 80099cc:	fab0 f480 	clz	r4, r0
 80099d0:	0964      	lsrs	r4, r4, #5
 80099d2:	4635      	mov	r5, r6
 80099d4:	9300      	str	r3, [sp, #0]
 80099d6:	463a      	mov	r2, r7
 80099d8:	4616      	mov	r6, r2
 80099da:	3201      	adds	r2, #1
 80099dc:	7830      	ldrb	r0, [r6, #0]
 80099de:	f7ff ff9b 	bl	8009918 <__hexdig_fun>
 80099e2:	2800      	cmp	r0, #0
 80099e4:	d1f8      	bne.n	80099d8 <__gethex+0x94>
 80099e6:	9901      	ldr	r1, [sp, #4]
 80099e8:	4652      	mov	r2, sl
 80099ea:	4630      	mov	r0, r6
 80099ec:	f001 feff 	bl	800b7ee <strncmp>
 80099f0:	b980      	cbnz	r0, 8009a14 <__gethex+0xd0>
 80099f2:	b94d      	cbnz	r5, 8009a08 <__gethex+0xc4>
 80099f4:	eb06 050a 	add.w	r5, r6, sl
 80099f8:	462a      	mov	r2, r5
 80099fa:	4616      	mov	r6, r2
 80099fc:	3201      	adds	r2, #1
 80099fe:	7830      	ldrb	r0, [r6, #0]
 8009a00:	f7ff ff8a 	bl	8009918 <__hexdig_fun>
 8009a04:	2800      	cmp	r0, #0
 8009a06:	d1f8      	bne.n	80099fa <__gethex+0xb6>
 8009a08:	1bad      	subs	r5, r5, r6
 8009a0a:	00ad      	lsls	r5, r5, #2
 8009a0c:	e004      	b.n	8009a18 <__gethex+0xd4>
 8009a0e:	2400      	movs	r4, #0
 8009a10:	4625      	mov	r5, r4
 8009a12:	e7e0      	b.n	80099d6 <__gethex+0x92>
 8009a14:	2d00      	cmp	r5, #0
 8009a16:	d1f7      	bne.n	8009a08 <__gethex+0xc4>
 8009a18:	7833      	ldrb	r3, [r6, #0]
 8009a1a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8009a1e:	2b50      	cmp	r3, #80	; 0x50
 8009a20:	d13b      	bne.n	8009a9a <__gethex+0x156>
 8009a22:	7873      	ldrb	r3, [r6, #1]
 8009a24:	2b2b      	cmp	r3, #43	; 0x2b
 8009a26:	d02c      	beq.n	8009a82 <__gethex+0x13e>
 8009a28:	2b2d      	cmp	r3, #45	; 0x2d
 8009a2a:	d02e      	beq.n	8009a8a <__gethex+0x146>
 8009a2c:	1c71      	adds	r1, r6, #1
 8009a2e:	f04f 0900 	mov.w	r9, #0
 8009a32:	7808      	ldrb	r0, [r1, #0]
 8009a34:	f7ff ff70 	bl	8009918 <__hexdig_fun>
 8009a38:	1e43      	subs	r3, r0, #1
 8009a3a:	b2db      	uxtb	r3, r3
 8009a3c:	2b18      	cmp	r3, #24
 8009a3e:	d82c      	bhi.n	8009a9a <__gethex+0x156>
 8009a40:	f1a0 0210 	sub.w	r2, r0, #16
 8009a44:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8009a48:	f7ff ff66 	bl	8009918 <__hexdig_fun>
 8009a4c:	1e43      	subs	r3, r0, #1
 8009a4e:	b2db      	uxtb	r3, r3
 8009a50:	2b18      	cmp	r3, #24
 8009a52:	d91d      	bls.n	8009a90 <__gethex+0x14c>
 8009a54:	f1b9 0f00 	cmp.w	r9, #0
 8009a58:	d000      	beq.n	8009a5c <__gethex+0x118>
 8009a5a:	4252      	negs	r2, r2
 8009a5c:	4415      	add	r5, r2
 8009a5e:	f8cb 1000 	str.w	r1, [fp]
 8009a62:	b1e4      	cbz	r4, 8009a9e <__gethex+0x15a>
 8009a64:	9b00      	ldr	r3, [sp, #0]
 8009a66:	2b00      	cmp	r3, #0
 8009a68:	bf14      	ite	ne
 8009a6a:	2700      	movne	r7, #0
 8009a6c:	2706      	moveq	r7, #6
 8009a6e:	4638      	mov	r0, r7
 8009a70:	b009      	add	sp, #36	; 0x24
 8009a72:	ecbd 8b02 	vpop	{d8}
 8009a76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009a7a:	463e      	mov	r6, r7
 8009a7c:	4625      	mov	r5, r4
 8009a7e:	2401      	movs	r4, #1
 8009a80:	e7ca      	b.n	8009a18 <__gethex+0xd4>
 8009a82:	f04f 0900 	mov.w	r9, #0
 8009a86:	1cb1      	adds	r1, r6, #2
 8009a88:	e7d3      	b.n	8009a32 <__gethex+0xee>
 8009a8a:	f04f 0901 	mov.w	r9, #1
 8009a8e:	e7fa      	b.n	8009a86 <__gethex+0x142>
 8009a90:	230a      	movs	r3, #10
 8009a92:	fb03 0202 	mla	r2, r3, r2, r0
 8009a96:	3a10      	subs	r2, #16
 8009a98:	e7d4      	b.n	8009a44 <__gethex+0x100>
 8009a9a:	4631      	mov	r1, r6
 8009a9c:	e7df      	b.n	8009a5e <__gethex+0x11a>
 8009a9e:	1bf3      	subs	r3, r6, r7
 8009aa0:	3b01      	subs	r3, #1
 8009aa2:	4621      	mov	r1, r4
 8009aa4:	2b07      	cmp	r3, #7
 8009aa6:	dc0b      	bgt.n	8009ac0 <__gethex+0x17c>
 8009aa8:	ee18 0a10 	vmov	r0, s16
 8009aac:	f000 fadc 	bl	800a068 <_Balloc>
 8009ab0:	4604      	mov	r4, r0
 8009ab2:	b940      	cbnz	r0, 8009ac6 <__gethex+0x182>
 8009ab4:	4b5d      	ldr	r3, [pc, #372]	; (8009c2c <__gethex+0x2e8>)
 8009ab6:	4602      	mov	r2, r0
 8009ab8:	21de      	movs	r1, #222	; 0xde
 8009aba:	485d      	ldr	r0, [pc, #372]	; (8009c30 <__gethex+0x2ec>)
 8009abc:	f7fe fe48 	bl	8008750 <__assert_func>
 8009ac0:	3101      	adds	r1, #1
 8009ac2:	105b      	asrs	r3, r3, #1
 8009ac4:	e7ee      	b.n	8009aa4 <__gethex+0x160>
 8009ac6:	f100 0914 	add.w	r9, r0, #20
 8009aca:	f04f 0b00 	mov.w	fp, #0
 8009ace:	f1ca 0301 	rsb	r3, sl, #1
 8009ad2:	f8cd 9008 	str.w	r9, [sp, #8]
 8009ad6:	f8cd b000 	str.w	fp, [sp]
 8009ada:	9306      	str	r3, [sp, #24]
 8009adc:	42b7      	cmp	r7, r6
 8009ade:	d340      	bcc.n	8009b62 <__gethex+0x21e>
 8009ae0:	9802      	ldr	r0, [sp, #8]
 8009ae2:	9b00      	ldr	r3, [sp, #0]
 8009ae4:	f840 3b04 	str.w	r3, [r0], #4
 8009ae8:	eba0 0009 	sub.w	r0, r0, r9
 8009aec:	1080      	asrs	r0, r0, #2
 8009aee:	0146      	lsls	r6, r0, #5
 8009af0:	6120      	str	r0, [r4, #16]
 8009af2:	4618      	mov	r0, r3
 8009af4:	f000 fbaa 	bl	800a24c <__hi0bits>
 8009af8:	1a30      	subs	r0, r6, r0
 8009afa:	f8d8 6000 	ldr.w	r6, [r8]
 8009afe:	42b0      	cmp	r0, r6
 8009b00:	dd63      	ble.n	8009bca <__gethex+0x286>
 8009b02:	1b87      	subs	r7, r0, r6
 8009b04:	4639      	mov	r1, r7
 8009b06:	4620      	mov	r0, r4
 8009b08:	f000 ff4e 	bl	800a9a8 <__any_on>
 8009b0c:	4682      	mov	sl, r0
 8009b0e:	b1a8      	cbz	r0, 8009b3c <__gethex+0x1f8>
 8009b10:	1e7b      	subs	r3, r7, #1
 8009b12:	1159      	asrs	r1, r3, #5
 8009b14:	f003 021f 	and.w	r2, r3, #31
 8009b18:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8009b1c:	f04f 0a01 	mov.w	sl, #1
 8009b20:	fa0a f202 	lsl.w	r2, sl, r2
 8009b24:	420a      	tst	r2, r1
 8009b26:	d009      	beq.n	8009b3c <__gethex+0x1f8>
 8009b28:	4553      	cmp	r3, sl
 8009b2a:	dd05      	ble.n	8009b38 <__gethex+0x1f4>
 8009b2c:	1eb9      	subs	r1, r7, #2
 8009b2e:	4620      	mov	r0, r4
 8009b30:	f000 ff3a 	bl	800a9a8 <__any_on>
 8009b34:	2800      	cmp	r0, #0
 8009b36:	d145      	bne.n	8009bc4 <__gethex+0x280>
 8009b38:	f04f 0a02 	mov.w	sl, #2
 8009b3c:	4639      	mov	r1, r7
 8009b3e:	4620      	mov	r0, r4
 8009b40:	f7ff fe98 	bl	8009874 <rshift>
 8009b44:	443d      	add	r5, r7
 8009b46:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8009b4a:	42ab      	cmp	r3, r5
 8009b4c:	da4c      	bge.n	8009be8 <__gethex+0x2a4>
 8009b4e:	ee18 0a10 	vmov	r0, s16
 8009b52:	4621      	mov	r1, r4
 8009b54:	f000 fac8 	bl	800a0e8 <_Bfree>
 8009b58:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8009b5a:	2300      	movs	r3, #0
 8009b5c:	6013      	str	r3, [r2, #0]
 8009b5e:	27a3      	movs	r7, #163	; 0xa3
 8009b60:	e785      	b.n	8009a6e <__gethex+0x12a>
 8009b62:	1e73      	subs	r3, r6, #1
 8009b64:	9a05      	ldr	r2, [sp, #20]
 8009b66:	9303      	str	r3, [sp, #12]
 8009b68:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8009b6c:	4293      	cmp	r3, r2
 8009b6e:	d019      	beq.n	8009ba4 <__gethex+0x260>
 8009b70:	f1bb 0f20 	cmp.w	fp, #32
 8009b74:	d107      	bne.n	8009b86 <__gethex+0x242>
 8009b76:	9b02      	ldr	r3, [sp, #8]
 8009b78:	9a00      	ldr	r2, [sp, #0]
 8009b7a:	f843 2b04 	str.w	r2, [r3], #4
 8009b7e:	9302      	str	r3, [sp, #8]
 8009b80:	2300      	movs	r3, #0
 8009b82:	9300      	str	r3, [sp, #0]
 8009b84:	469b      	mov	fp, r3
 8009b86:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8009b8a:	f7ff fec5 	bl	8009918 <__hexdig_fun>
 8009b8e:	9b00      	ldr	r3, [sp, #0]
 8009b90:	f000 000f 	and.w	r0, r0, #15
 8009b94:	fa00 f00b 	lsl.w	r0, r0, fp
 8009b98:	4303      	orrs	r3, r0
 8009b9a:	9300      	str	r3, [sp, #0]
 8009b9c:	f10b 0b04 	add.w	fp, fp, #4
 8009ba0:	9b03      	ldr	r3, [sp, #12]
 8009ba2:	e00d      	b.n	8009bc0 <__gethex+0x27c>
 8009ba4:	9b03      	ldr	r3, [sp, #12]
 8009ba6:	9a06      	ldr	r2, [sp, #24]
 8009ba8:	4413      	add	r3, r2
 8009baa:	42bb      	cmp	r3, r7
 8009bac:	d3e0      	bcc.n	8009b70 <__gethex+0x22c>
 8009bae:	4618      	mov	r0, r3
 8009bb0:	9901      	ldr	r1, [sp, #4]
 8009bb2:	9307      	str	r3, [sp, #28]
 8009bb4:	4652      	mov	r2, sl
 8009bb6:	f001 fe1a 	bl	800b7ee <strncmp>
 8009bba:	9b07      	ldr	r3, [sp, #28]
 8009bbc:	2800      	cmp	r0, #0
 8009bbe:	d1d7      	bne.n	8009b70 <__gethex+0x22c>
 8009bc0:	461e      	mov	r6, r3
 8009bc2:	e78b      	b.n	8009adc <__gethex+0x198>
 8009bc4:	f04f 0a03 	mov.w	sl, #3
 8009bc8:	e7b8      	b.n	8009b3c <__gethex+0x1f8>
 8009bca:	da0a      	bge.n	8009be2 <__gethex+0x29e>
 8009bcc:	1a37      	subs	r7, r6, r0
 8009bce:	4621      	mov	r1, r4
 8009bd0:	ee18 0a10 	vmov	r0, s16
 8009bd4:	463a      	mov	r2, r7
 8009bd6:	f000 fca3 	bl	800a520 <__lshift>
 8009bda:	1bed      	subs	r5, r5, r7
 8009bdc:	4604      	mov	r4, r0
 8009bde:	f100 0914 	add.w	r9, r0, #20
 8009be2:	f04f 0a00 	mov.w	sl, #0
 8009be6:	e7ae      	b.n	8009b46 <__gethex+0x202>
 8009be8:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8009bec:	42a8      	cmp	r0, r5
 8009bee:	dd72      	ble.n	8009cd6 <__gethex+0x392>
 8009bf0:	1b45      	subs	r5, r0, r5
 8009bf2:	42ae      	cmp	r6, r5
 8009bf4:	dc36      	bgt.n	8009c64 <__gethex+0x320>
 8009bf6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8009bfa:	2b02      	cmp	r3, #2
 8009bfc:	d02a      	beq.n	8009c54 <__gethex+0x310>
 8009bfe:	2b03      	cmp	r3, #3
 8009c00:	d02c      	beq.n	8009c5c <__gethex+0x318>
 8009c02:	2b01      	cmp	r3, #1
 8009c04:	d11c      	bne.n	8009c40 <__gethex+0x2fc>
 8009c06:	42ae      	cmp	r6, r5
 8009c08:	d11a      	bne.n	8009c40 <__gethex+0x2fc>
 8009c0a:	2e01      	cmp	r6, #1
 8009c0c:	d112      	bne.n	8009c34 <__gethex+0x2f0>
 8009c0e:	9a04      	ldr	r2, [sp, #16]
 8009c10:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8009c14:	6013      	str	r3, [r2, #0]
 8009c16:	2301      	movs	r3, #1
 8009c18:	6123      	str	r3, [r4, #16]
 8009c1a:	f8c9 3000 	str.w	r3, [r9]
 8009c1e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009c20:	2762      	movs	r7, #98	; 0x62
 8009c22:	601c      	str	r4, [r3, #0]
 8009c24:	e723      	b.n	8009a6e <__gethex+0x12a>
 8009c26:	bf00      	nop
 8009c28:	0800cfdc 	.word	0x0800cfdc
 8009c2c:	0800cf01 	.word	0x0800cf01
 8009c30:	0800cf74 	.word	0x0800cf74
 8009c34:	1e71      	subs	r1, r6, #1
 8009c36:	4620      	mov	r0, r4
 8009c38:	f000 feb6 	bl	800a9a8 <__any_on>
 8009c3c:	2800      	cmp	r0, #0
 8009c3e:	d1e6      	bne.n	8009c0e <__gethex+0x2ca>
 8009c40:	ee18 0a10 	vmov	r0, s16
 8009c44:	4621      	mov	r1, r4
 8009c46:	f000 fa4f 	bl	800a0e8 <_Bfree>
 8009c4a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8009c4c:	2300      	movs	r3, #0
 8009c4e:	6013      	str	r3, [r2, #0]
 8009c50:	2750      	movs	r7, #80	; 0x50
 8009c52:	e70c      	b.n	8009a6e <__gethex+0x12a>
 8009c54:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009c56:	2b00      	cmp	r3, #0
 8009c58:	d1f2      	bne.n	8009c40 <__gethex+0x2fc>
 8009c5a:	e7d8      	b.n	8009c0e <__gethex+0x2ca>
 8009c5c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009c5e:	2b00      	cmp	r3, #0
 8009c60:	d1d5      	bne.n	8009c0e <__gethex+0x2ca>
 8009c62:	e7ed      	b.n	8009c40 <__gethex+0x2fc>
 8009c64:	1e6f      	subs	r7, r5, #1
 8009c66:	f1ba 0f00 	cmp.w	sl, #0
 8009c6a:	d131      	bne.n	8009cd0 <__gethex+0x38c>
 8009c6c:	b127      	cbz	r7, 8009c78 <__gethex+0x334>
 8009c6e:	4639      	mov	r1, r7
 8009c70:	4620      	mov	r0, r4
 8009c72:	f000 fe99 	bl	800a9a8 <__any_on>
 8009c76:	4682      	mov	sl, r0
 8009c78:	117b      	asrs	r3, r7, #5
 8009c7a:	2101      	movs	r1, #1
 8009c7c:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8009c80:	f007 071f 	and.w	r7, r7, #31
 8009c84:	fa01 f707 	lsl.w	r7, r1, r7
 8009c88:	421f      	tst	r7, r3
 8009c8a:	4629      	mov	r1, r5
 8009c8c:	4620      	mov	r0, r4
 8009c8e:	bf18      	it	ne
 8009c90:	f04a 0a02 	orrne.w	sl, sl, #2
 8009c94:	1b76      	subs	r6, r6, r5
 8009c96:	f7ff fded 	bl	8009874 <rshift>
 8009c9a:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8009c9e:	2702      	movs	r7, #2
 8009ca0:	f1ba 0f00 	cmp.w	sl, #0
 8009ca4:	d048      	beq.n	8009d38 <__gethex+0x3f4>
 8009ca6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8009caa:	2b02      	cmp	r3, #2
 8009cac:	d015      	beq.n	8009cda <__gethex+0x396>
 8009cae:	2b03      	cmp	r3, #3
 8009cb0:	d017      	beq.n	8009ce2 <__gethex+0x39e>
 8009cb2:	2b01      	cmp	r3, #1
 8009cb4:	d109      	bne.n	8009cca <__gethex+0x386>
 8009cb6:	f01a 0f02 	tst.w	sl, #2
 8009cba:	d006      	beq.n	8009cca <__gethex+0x386>
 8009cbc:	f8d9 0000 	ldr.w	r0, [r9]
 8009cc0:	ea4a 0a00 	orr.w	sl, sl, r0
 8009cc4:	f01a 0f01 	tst.w	sl, #1
 8009cc8:	d10e      	bne.n	8009ce8 <__gethex+0x3a4>
 8009cca:	f047 0710 	orr.w	r7, r7, #16
 8009cce:	e033      	b.n	8009d38 <__gethex+0x3f4>
 8009cd0:	f04f 0a01 	mov.w	sl, #1
 8009cd4:	e7d0      	b.n	8009c78 <__gethex+0x334>
 8009cd6:	2701      	movs	r7, #1
 8009cd8:	e7e2      	b.n	8009ca0 <__gethex+0x35c>
 8009cda:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009cdc:	f1c3 0301 	rsb	r3, r3, #1
 8009ce0:	9315      	str	r3, [sp, #84]	; 0x54
 8009ce2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009ce4:	2b00      	cmp	r3, #0
 8009ce6:	d0f0      	beq.n	8009cca <__gethex+0x386>
 8009ce8:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8009cec:	f104 0314 	add.w	r3, r4, #20
 8009cf0:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8009cf4:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8009cf8:	f04f 0c00 	mov.w	ip, #0
 8009cfc:	4618      	mov	r0, r3
 8009cfe:	f853 2b04 	ldr.w	r2, [r3], #4
 8009d02:	f1b2 3fff 	cmp.w	r2, #4294967295
 8009d06:	d01c      	beq.n	8009d42 <__gethex+0x3fe>
 8009d08:	3201      	adds	r2, #1
 8009d0a:	6002      	str	r2, [r0, #0]
 8009d0c:	2f02      	cmp	r7, #2
 8009d0e:	f104 0314 	add.w	r3, r4, #20
 8009d12:	d13f      	bne.n	8009d94 <__gethex+0x450>
 8009d14:	f8d8 2000 	ldr.w	r2, [r8]
 8009d18:	3a01      	subs	r2, #1
 8009d1a:	42b2      	cmp	r2, r6
 8009d1c:	d10a      	bne.n	8009d34 <__gethex+0x3f0>
 8009d1e:	1171      	asrs	r1, r6, #5
 8009d20:	2201      	movs	r2, #1
 8009d22:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8009d26:	f006 061f 	and.w	r6, r6, #31
 8009d2a:	fa02 f606 	lsl.w	r6, r2, r6
 8009d2e:	421e      	tst	r6, r3
 8009d30:	bf18      	it	ne
 8009d32:	4617      	movne	r7, r2
 8009d34:	f047 0720 	orr.w	r7, r7, #32
 8009d38:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009d3a:	601c      	str	r4, [r3, #0]
 8009d3c:	9b04      	ldr	r3, [sp, #16]
 8009d3e:	601d      	str	r5, [r3, #0]
 8009d40:	e695      	b.n	8009a6e <__gethex+0x12a>
 8009d42:	4299      	cmp	r1, r3
 8009d44:	f843 cc04 	str.w	ip, [r3, #-4]
 8009d48:	d8d8      	bhi.n	8009cfc <__gethex+0x3b8>
 8009d4a:	68a3      	ldr	r3, [r4, #8]
 8009d4c:	459b      	cmp	fp, r3
 8009d4e:	db19      	blt.n	8009d84 <__gethex+0x440>
 8009d50:	6861      	ldr	r1, [r4, #4]
 8009d52:	ee18 0a10 	vmov	r0, s16
 8009d56:	3101      	adds	r1, #1
 8009d58:	f000 f986 	bl	800a068 <_Balloc>
 8009d5c:	4681      	mov	r9, r0
 8009d5e:	b918      	cbnz	r0, 8009d68 <__gethex+0x424>
 8009d60:	4b1a      	ldr	r3, [pc, #104]	; (8009dcc <__gethex+0x488>)
 8009d62:	4602      	mov	r2, r0
 8009d64:	2184      	movs	r1, #132	; 0x84
 8009d66:	e6a8      	b.n	8009aba <__gethex+0x176>
 8009d68:	6922      	ldr	r2, [r4, #16]
 8009d6a:	3202      	adds	r2, #2
 8009d6c:	f104 010c 	add.w	r1, r4, #12
 8009d70:	0092      	lsls	r2, r2, #2
 8009d72:	300c      	adds	r0, #12
 8009d74:	f7fc fc10 	bl	8006598 <memcpy>
 8009d78:	4621      	mov	r1, r4
 8009d7a:	ee18 0a10 	vmov	r0, s16
 8009d7e:	f000 f9b3 	bl	800a0e8 <_Bfree>
 8009d82:	464c      	mov	r4, r9
 8009d84:	6923      	ldr	r3, [r4, #16]
 8009d86:	1c5a      	adds	r2, r3, #1
 8009d88:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8009d8c:	6122      	str	r2, [r4, #16]
 8009d8e:	2201      	movs	r2, #1
 8009d90:	615a      	str	r2, [r3, #20]
 8009d92:	e7bb      	b.n	8009d0c <__gethex+0x3c8>
 8009d94:	6922      	ldr	r2, [r4, #16]
 8009d96:	455a      	cmp	r2, fp
 8009d98:	dd0b      	ble.n	8009db2 <__gethex+0x46e>
 8009d9a:	2101      	movs	r1, #1
 8009d9c:	4620      	mov	r0, r4
 8009d9e:	f7ff fd69 	bl	8009874 <rshift>
 8009da2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8009da6:	3501      	adds	r5, #1
 8009da8:	42ab      	cmp	r3, r5
 8009daa:	f6ff aed0 	blt.w	8009b4e <__gethex+0x20a>
 8009dae:	2701      	movs	r7, #1
 8009db0:	e7c0      	b.n	8009d34 <__gethex+0x3f0>
 8009db2:	f016 061f 	ands.w	r6, r6, #31
 8009db6:	d0fa      	beq.n	8009dae <__gethex+0x46a>
 8009db8:	4453      	add	r3, sl
 8009dba:	f1c6 0620 	rsb	r6, r6, #32
 8009dbe:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8009dc2:	f000 fa43 	bl	800a24c <__hi0bits>
 8009dc6:	42b0      	cmp	r0, r6
 8009dc8:	dbe7      	blt.n	8009d9a <__gethex+0x456>
 8009dca:	e7f0      	b.n	8009dae <__gethex+0x46a>
 8009dcc:	0800cf01 	.word	0x0800cf01

08009dd0 <L_shift>:
 8009dd0:	f1c2 0208 	rsb	r2, r2, #8
 8009dd4:	0092      	lsls	r2, r2, #2
 8009dd6:	b570      	push	{r4, r5, r6, lr}
 8009dd8:	f1c2 0620 	rsb	r6, r2, #32
 8009ddc:	6843      	ldr	r3, [r0, #4]
 8009dde:	6804      	ldr	r4, [r0, #0]
 8009de0:	fa03 f506 	lsl.w	r5, r3, r6
 8009de4:	432c      	orrs	r4, r5
 8009de6:	40d3      	lsrs	r3, r2
 8009de8:	6004      	str	r4, [r0, #0]
 8009dea:	f840 3f04 	str.w	r3, [r0, #4]!
 8009dee:	4288      	cmp	r0, r1
 8009df0:	d3f4      	bcc.n	8009ddc <L_shift+0xc>
 8009df2:	bd70      	pop	{r4, r5, r6, pc}

08009df4 <__match>:
 8009df4:	b530      	push	{r4, r5, lr}
 8009df6:	6803      	ldr	r3, [r0, #0]
 8009df8:	3301      	adds	r3, #1
 8009dfa:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009dfe:	b914      	cbnz	r4, 8009e06 <__match+0x12>
 8009e00:	6003      	str	r3, [r0, #0]
 8009e02:	2001      	movs	r0, #1
 8009e04:	bd30      	pop	{r4, r5, pc}
 8009e06:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009e0a:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8009e0e:	2d19      	cmp	r5, #25
 8009e10:	bf98      	it	ls
 8009e12:	3220      	addls	r2, #32
 8009e14:	42a2      	cmp	r2, r4
 8009e16:	d0f0      	beq.n	8009dfa <__match+0x6>
 8009e18:	2000      	movs	r0, #0
 8009e1a:	e7f3      	b.n	8009e04 <__match+0x10>

08009e1c <__hexnan>:
 8009e1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009e20:	680b      	ldr	r3, [r1, #0]
 8009e22:	115e      	asrs	r6, r3, #5
 8009e24:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8009e28:	f013 031f 	ands.w	r3, r3, #31
 8009e2c:	b087      	sub	sp, #28
 8009e2e:	bf18      	it	ne
 8009e30:	3604      	addne	r6, #4
 8009e32:	2500      	movs	r5, #0
 8009e34:	1f37      	subs	r7, r6, #4
 8009e36:	4690      	mov	r8, r2
 8009e38:	6802      	ldr	r2, [r0, #0]
 8009e3a:	9301      	str	r3, [sp, #4]
 8009e3c:	4682      	mov	sl, r0
 8009e3e:	f846 5c04 	str.w	r5, [r6, #-4]
 8009e42:	46b9      	mov	r9, r7
 8009e44:	463c      	mov	r4, r7
 8009e46:	9502      	str	r5, [sp, #8]
 8009e48:	46ab      	mov	fp, r5
 8009e4a:	7851      	ldrb	r1, [r2, #1]
 8009e4c:	1c53      	adds	r3, r2, #1
 8009e4e:	9303      	str	r3, [sp, #12]
 8009e50:	b341      	cbz	r1, 8009ea4 <__hexnan+0x88>
 8009e52:	4608      	mov	r0, r1
 8009e54:	9205      	str	r2, [sp, #20]
 8009e56:	9104      	str	r1, [sp, #16]
 8009e58:	f7ff fd5e 	bl	8009918 <__hexdig_fun>
 8009e5c:	2800      	cmp	r0, #0
 8009e5e:	d14f      	bne.n	8009f00 <__hexnan+0xe4>
 8009e60:	9904      	ldr	r1, [sp, #16]
 8009e62:	9a05      	ldr	r2, [sp, #20]
 8009e64:	2920      	cmp	r1, #32
 8009e66:	d818      	bhi.n	8009e9a <__hexnan+0x7e>
 8009e68:	9b02      	ldr	r3, [sp, #8]
 8009e6a:	459b      	cmp	fp, r3
 8009e6c:	dd13      	ble.n	8009e96 <__hexnan+0x7a>
 8009e6e:	454c      	cmp	r4, r9
 8009e70:	d206      	bcs.n	8009e80 <__hexnan+0x64>
 8009e72:	2d07      	cmp	r5, #7
 8009e74:	dc04      	bgt.n	8009e80 <__hexnan+0x64>
 8009e76:	462a      	mov	r2, r5
 8009e78:	4649      	mov	r1, r9
 8009e7a:	4620      	mov	r0, r4
 8009e7c:	f7ff ffa8 	bl	8009dd0 <L_shift>
 8009e80:	4544      	cmp	r4, r8
 8009e82:	d950      	bls.n	8009f26 <__hexnan+0x10a>
 8009e84:	2300      	movs	r3, #0
 8009e86:	f1a4 0904 	sub.w	r9, r4, #4
 8009e8a:	f844 3c04 	str.w	r3, [r4, #-4]
 8009e8e:	f8cd b008 	str.w	fp, [sp, #8]
 8009e92:	464c      	mov	r4, r9
 8009e94:	461d      	mov	r5, r3
 8009e96:	9a03      	ldr	r2, [sp, #12]
 8009e98:	e7d7      	b.n	8009e4a <__hexnan+0x2e>
 8009e9a:	2929      	cmp	r1, #41	; 0x29
 8009e9c:	d156      	bne.n	8009f4c <__hexnan+0x130>
 8009e9e:	3202      	adds	r2, #2
 8009ea0:	f8ca 2000 	str.w	r2, [sl]
 8009ea4:	f1bb 0f00 	cmp.w	fp, #0
 8009ea8:	d050      	beq.n	8009f4c <__hexnan+0x130>
 8009eaa:	454c      	cmp	r4, r9
 8009eac:	d206      	bcs.n	8009ebc <__hexnan+0xa0>
 8009eae:	2d07      	cmp	r5, #7
 8009eb0:	dc04      	bgt.n	8009ebc <__hexnan+0xa0>
 8009eb2:	462a      	mov	r2, r5
 8009eb4:	4649      	mov	r1, r9
 8009eb6:	4620      	mov	r0, r4
 8009eb8:	f7ff ff8a 	bl	8009dd0 <L_shift>
 8009ebc:	4544      	cmp	r4, r8
 8009ebe:	d934      	bls.n	8009f2a <__hexnan+0x10e>
 8009ec0:	f1a8 0204 	sub.w	r2, r8, #4
 8009ec4:	4623      	mov	r3, r4
 8009ec6:	f853 1b04 	ldr.w	r1, [r3], #4
 8009eca:	f842 1f04 	str.w	r1, [r2, #4]!
 8009ece:	429f      	cmp	r7, r3
 8009ed0:	d2f9      	bcs.n	8009ec6 <__hexnan+0xaa>
 8009ed2:	1b3b      	subs	r3, r7, r4
 8009ed4:	f023 0303 	bic.w	r3, r3, #3
 8009ed8:	3304      	adds	r3, #4
 8009eda:	3401      	adds	r4, #1
 8009edc:	3e03      	subs	r6, #3
 8009ede:	42b4      	cmp	r4, r6
 8009ee0:	bf88      	it	hi
 8009ee2:	2304      	movhi	r3, #4
 8009ee4:	4443      	add	r3, r8
 8009ee6:	2200      	movs	r2, #0
 8009ee8:	f843 2b04 	str.w	r2, [r3], #4
 8009eec:	429f      	cmp	r7, r3
 8009eee:	d2fb      	bcs.n	8009ee8 <__hexnan+0xcc>
 8009ef0:	683b      	ldr	r3, [r7, #0]
 8009ef2:	b91b      	cbnz	r3, 8009efc <__hexnan+0xe0>
 8009ef4:	4547      	cmp	r7, r8
 8009ef6:	d127      	bne.n	8009f48 <__hexnan+0x12c>
 8009ef8:	2301      	movs	r3, #1
 8009efa:	603b      	str	r3, [r7, #0]
 8009efc:	2005      	movs	r0, #5
 8009efe:	e026      	b.n	8009f4e <__hexnan+0x132>
 8009f00:	3501      	adds	r5, #1
 8009f02:	2d08      	cmp	r5, #8
 8009f04:	f10b 0b01 	add.w	fp, fp, #1
 8009f08:	dd06      	ble.n	8009f18 <__hexnan+0xfc>
 8009f0a:	4544      	cmp	r4, r8
 8009f0c:	d9c3      	bls.n	8009e96 <__hexnan+0x7a>
 8009f0e:	2300      	movs	r3, #0
 8009f10:	f844 3c04 	str.w	r3, [r4, #-4]
 8009f14:	2501      	movs	r5, #1
 8009f16:	3c04      	subs	r4, #4
 8009f18:	6822      	ldr	r2, [r4, #0]
 8009f1a:	f000 000f 	and.w	r0, r0, #15
 8009f1e:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8009f22:	6022      	str	r2, [r4, #0]
 8009f24:	e7b7      	b.n	8009e96 <__hexnan+0x7a>
 8009f26:	2508      	movs	r5, #8
 8009f28:	e7b5      	b.n	8009e96 <__hexnan+0x7a>
 8009f2a:	9b01      	ldr	r3, [sp, #4]
 8009f2c:	2b00      	cmp	r3, #0
 8009f2e:	d0df      	beq.n	8009ef0 <__hexnan+0xd4>
 8009f30:	f04f 32ff 	mov.w	r2, #4294967295
 8009f34:	f1c3 0320 	rsb	r3, r3, #32
 8009f38:	fa22 f303 	lsr.w	r3, r2, r3
 8009f3c:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8009f40:	401a      	ands	r2, r3
 8009f42:	f846 2c04 	str.w	r2, [r6, #-4]
 8009f46:	e7d3      	b.n	8009ef0 <__hexnan+0xd4>
 8009f48:	3f04      	subs	r7, #4
 8009f4a:	e7d1      	b.n	8009ef0 <__hexnan+0xd4>
 8009f4c:	2004      	movs	r0, #4
 8009f4e:	b007      	add	sp, #28
 8009f50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08009f54 <_localeconv_r>:
 8009f54:	4800      	ldr	r0, [pc, #0]	; (8009f58 <_localeconv_r+0x4>)
 8009f56:	4770      	bx	lr
 8009f58:	20000164 	.word	0x20000164

08009f5c <__retarget_lock_init_recursive>:
 8009f5c:	4770      	bx	lr

08009f5e <__retarget_lock_acquire_recursive>:
 8009f5e:	4770      	bx	lr

08009f60 <__retarget_lock_release_recursive>:
 8009f60:	4770      	bx	lr

08009f62 <__swhatbuf_r>:
 8009f62:	b570      	push	{r4, r5, r6, lr}
 8009f64:	460e      	mov	r6, r1
 8009f66:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009f6a:	2900      	cmp	r1, #0
 8009f6c:	b096      	sub	sp, #88	; 0x58
 8009f6e:	4614      	mov	r4, r2
 8009f70:	461d      	mov	r5, r3
 8009f72:	da08      	bge.n	8009f86 <__swhatbuf_r+0x24>
 8009f74:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8009f78:	2200      	movs	r2, #0
 8009f7a:	602a      	str	r2, [r5, #0]
 8009f7c:	061a      	lsls	r2, r3, #24
 8009f7e:	d410      	bmi.n	8009fa2 <__swhatbuf_r+0x40>
 8009f80:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009f84:	e00e      	b.n	8009fa4 <__swhatbuf_r+0x42>
 8009f86:	466a      	mov	r2, sp
 8009f88:	f001 fd50 	bl	800ba2c <_fstat_r>
 8009f8c:	2800      	cmp	r0, #0
 8009f8e:	dbf1      	blt.n	8009f74 <__swhatbuf_r+0x12>
 8009f90:	9a01      	ldr	r2, [sp, #4]
 8009f92:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8009f96:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8009f9a:	425a      	negs	r2, r3
 8009f9c:	415a      	adcs	r2, r3
 8009f9e:	602a      	str	r2, [r5, #0]
 8009fa0:	e7ee      	b.n	8009f80 <__swhatbuf_r+0x1e>
 8009fa2:	2340      	movs	r3, #64	; 0x40
 8009fa4:	2000      	movs	r0, #0
 8009fa6:	6023      	str	r3, [r4, #0]
 8009fa8:	b016      	add	sp, #88	; 0x58
 8009faa:	bd70      	pop	{r4, r5, r6, pc}

08009fac <__smakebuf_r>:
 8009fac:	898b      	ldrh	r3, [r1, #12]
 8009fae:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009fb0:	079d      	lsls	r5, r3, #30
 8009fb2:	4606      	mov	r6, r0
 8009fb4:	460c      	mov	r4, r1
 8009fb6:	d507      	bpl.n	8009fc8 <__smakebuf_r+0x1c>
 8009fb8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009fbc:	6023      	str	r3, [r4, #0]
 8009fbe:	6123      	str	r3, [r4, #16]
 8009fc0:	2301      	movs	r3, #1
 8009fc2:	6163      	str	r3, [r4, #20]
 8009fc4:	b002      	add	sp, #8
 8009fc6:	bd70      	pop	{r4, r5, r6, pc}
 8009fc8:	ab01      	add	r3, sp, #4
 8009fca:	466a      	mov	r2, sp
 8009fcc:	f7ff ffc9 	bl	8009f62 <__swhatbuf_r>
 8009fd0:	9900      	ldr	r1, [sp, #0]
 8009fd2:	4605      	mov	r5, r0
 8009fd4:	4630      	mov	r0, r6
 8009fd6:	f7fc fb61 	bl	800669c <_malloc_r>
 8009fda:	b948      	cbnz	r0, 8009ff0 <__smakebuf_r+0x44>
 8009fdc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009fe0:	059a      	lsls	r2, r3, #22
 8009fe2:	d4ef      	bmi.n	8009fc4 <__smakebuf_r+0x18>
 8009fe4:	f023 0303 	bic.w	r3, r3, #3
 8009fe8:	f043 0302 	orr.w	r3, r3, #2
 8009fec:	81a3      	strh	r3, [r4, #12]
 8009fee:	e7e3      	b.n	8009fb8 <__smakebuf_r+0xc>
 8009ff0:	4b0d      	ldr	r3, [pc, #52]	; (800a028 <__smakebuf_r+0x7c>)
 8009ff2:	62b3      	str	r3, [r6, #40]	; 0x28
 8009ff4:	89a3      	ldrh	r3, [r4, #12]
 8009ff6:	6020      	str	r0, [r4, #0]
 8009ff8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009ffc:	81a3      	strh	r3, [r4, #12]
 8009ffe:	9b00      	ldr	r3, [sp, #0]
 800a000:	6163      	str	r3, [r4, #20]
 800a002:	9b01      	ldr	r3, [sp, #4]
 800a004:	6120      	str	r0, [r4, #16]
 800a006:	b15b      	cbz	r3, 800a020 <__smakebuf_r+0x74>
 800a008:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a00c:	4630      	mov	r0, r6
 800a00e:	f001 fd1f 	bl	800ba50 <_isatty_r>
 800a012:	b128      	cbz	r0, 800a020 <__smakebuf_r+0x74>
 800a014:	89a3      	ldrh	r3, [r4, #12]
 800a016:	f023 0303 	bic.w	r3, r3, #3
 800a01a:	f043 0301 	orr.w	r3, r3, #1
 800a01e:	81a3      	strh	r3, [r4, #12]
 800a020:	89a0      	ldrh	r0, [r4, #12]
 800a022:	4305      	orrs	r5, r0
 800a024:	81a5      	strh	r5, [r4, #12]
 800a026:	e7cd      	b.n	8009fc4 <__smakebuf_r+0x18>
 800a028:	08009675 	.word	0x08009675

0800a02c <__ascii_mbtowc>:
 800a02c:	b082      	sub	sp, #8
 800a02e:	b901      	cbnz	r1, 800a032 <__ascii_mbtowc+0x6>
 800a030:	a901      	add	r1, sp, #4
 800a032:	b142      	cbz	r2, 800a046 <__ascii_mbtowc+0x1a>
 800a034:	b14b      	cbz	r3, 800a04a <__ascii_mbtowc+0x1e>
 800a036:	7813      	ldrb	r3, [r2, #0]
 800a038:	600b      	str	r3, [r1, #0]
 800a03a:	7812      	ldrb	r2, [r2, #0]
 800a03c:	1e10      	subs	r0, r2, #0
 800a03e:	bf18      	it	ne
 800a040:	2001      	movne	r0, #1
 800a042:	b002      	add	sp, #8
 800a044:	4770      	bx	lr
 800a046:	4610      	mov	r0, r2
 800a048:	e7fb      	b.n	800a042 <__ascii_mbtowc+0x16>
 800a04a:	f06f 0001 	mvn.w	r0, #1
 800a04e:	e7f8      	b.n	800a042 <__ascii_mbtowc+0x16>

0800a050 <__malloc_lock>:
 800a050:	4801      	ldr	r0, [pc, #4]	; (800a058 <__malloc_lock+0x8>)
 800a052:	f7ff bf84 	b.w	8009f5e <__retarget_lock_acquire_recursive>
 800a056:	bf00      	nop
 800a058:	20000340 	.word	0x20000340

0800a05c <__malloc_unlock>:
 800a05c:	4801      	ldr	r0, [pc, #4]	; (800a064 <__malloc_unlock+0x8>)
 800a05e:	f7ff bf7f 	b.w	8009f60 <__retarget_lock_release_recursive>
 800a062:	bf00      	nop
 800a064:	20000340 	.word	0x20000340

0800a068 <_Balloc>:
 800a068:	b570      	push	{r4, r5, r6, lr}
 800a06a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800a06c:	4604      	mov	r4, r0
 800a06e:	460d      	mov	r5, r1
 800a070:	b976      	cbnz	r6, 800a090 <_Balloc+0x28>
 800a072:	2010      	movs	r0, #16
 800a074:	f7fc fa88 	bl	8006588 <malloc>
 800a078:	4602      	mov	r2, r0
 800a07a:	6260      	str	r0, [r4, #36]	; 0x24
 800a07c:	b920      	cbnz	r0, 800a088 <_Balloc+0x20>
 800a07e:	4b18      	ldr	r3, [pc, #96]	; (800a0e0 <_Balloc+0x78>)
 800a080:	4818      	ldr	r0, [pc, #96]	; (800a0e4 <_Balloc+0x7c>)
 800a082:	2166      	movs	r1, #102	; 0x66
 800a084:	f7fe fb64 	bl	8008750 <__assert_func>
 800a088:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a08c:	6006      	str	r6, [r0, #0]
 800a08e:	60c6      	str	r6, [r0, #12]
 800a090:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800a092:	68f3      	ldr	r3, [r6, #12]
 800a094:	b183      	cbz	r3, 800a0b8 <_Balloc+0x50>
 800a096:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a098:	68db      	ldr	r3, [r3, #12]
 800a09a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800a09e:	b9b8      	cbnz	r0, 800a0d0 <_Balloc+0x68>
 800a0a0:	2101      	movs	r1, #1
 800a0a2:	fa01 f605 	lsl.w	r6, r1, r5
 800a0a6:	1d72      	adds	r2, r6, #5
 800a0a8:	0092      	lsls	r2, r2, #2
 800a0aa:	4620      	mov	r0, r4
 800a0ac:	f000 fc9d 	bl	800a9ea <_calloc_r>
 800a0b0:	b160      	cbz	r0, 800a0cc <_Balloc+0x64>
 800a0b2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800a0b6:	e00e      	b.n	800a0d6 <_Balloc+0x6e>
 800a0b8:	2221      	movs	r2, #33	; 0x21
 800a0ba:	2104      	movs	r1, #4
 800a0bc:	4620      	mov	r0, r4
 800a0be:	f000 fc94 	bl	800a9ea <_calloc_r>
 800a0c2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a0c4:	60f0      	str	r0, [r6, #12]
 800a0c6:	68db      	ldr	r3, [r3, #12]
 800a0c8:	2b00      	cmp	r3, #0
 800a0ca:	d1e4      	bne.n	800a096 <_Balloc+0x2e>
 800a0cc:	2000      	movs	r0, #0
 800a0ce:	bd70      	pop	{r4, r5, r6, pc}
 800a0d0:	6802      	ldr	r2, [r0, #0]
 800a0d2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800a0d6:	2300      	movs	r3, #0
 800a0d8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a0dc:	e7f7      	b.n	800a0ce <_Balloc+0x66>
 800a0de:	bf00      	nop
 800a0e0:	0800cce8 	.word	0x0800cce8
 800a0e4:	0800cff0 	.word	0x0800cff0

0800a0e8 <_Bfree>:
 800a0e8:	b570      	push	{r4, r5, r6, lr}
 800a0ea:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800a0ec:	4605      	mov	r5, r0
 800a0ee:	460c      	mov	r4, r1
 800a0f0:	b976      	cbnz	r6, 800a110 <_Bfree+0x28>
 800a0f2:	2010      	movs	r0, #16
 800a0f4:	f7fc fa48 	bl	8006588 <malloc>
 800a0f8:	4602      	mov	r2, r0
 800a0fa:	6268      	str	r0, [r5, #36]	; 0x24
 800a0fc:	b920      	cbnz	r0, 800a108 <_Bfree+0x20>
 800a0fe:	4b09      	ldr	r3, [pc, #36]	; (800a124 <_Bfree+0x3c>)
 800a100:	4809      	ldr	r0, [pc, #36]	; (800a128 <_Bfree+0x40>)
 800a102:	218a      	movs	r1, #138	; 0x8a
 800a104:	f7fe fb24 	bl	8008750 <__assert_func>
 800a108:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a10c:	6006      	str	r6, [r0, #0]
 800a10e:	60c6      	str	r6, [r0, #12]
 800a110:	b13c      	cbz	r4, 800a122 <_Bfree+0x3a>
 800a112:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800a114:	6862      	ldr	r2, [r4, #4]
 800a116:	68db      	ldr	r3, [r3, #12]
 800a118:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a11c:	6021      	str	r1, [r4, #0]
 800a11e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800a122:	bd70      	pop	{r4, r5, r6, pc}
 800a124:	0800cce8 	.word	0x0800cce8
 800a128:	0800cff0 	.word	0x0800cff0

0800a12c <__multadd>:
 800a12c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a130:	690d      	ldr	r5, [r1, #16]
 800a132:	4607      	mov	r7, r0
 800a134:	460c      	mov	r4, r1
 800a136:	461e      	mov	r6, r3
 800a138:	f101 0c14 	add.w	ip, r1, #20
 800a13c:	2000      	movs	r0, #0
 800a13e:	f8dc 3000 	ldr.w	r3, [ip]
 800a142:	b299      	uxth	r1, r3
 800a144:	fb02 6101 	mla	r1, r2, r1, r6
 800a148:	0c1e      	lsrs	r6, r3, #16
 800a14a:	0c0b      	lsrs	r3, r1, #16
 800a14c:	fb02 3306 	mla	r3, r2, r6, r3
 800a150:	b289      	uxth	r1, r1
 800a152:	3001      	adds	r0, #1
 800a154:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800a158:	4285      	cmp	r5, r0
 800a15a:	f84c 1b04 	str.w	r1, [ip], #4
 800a15e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800a162:	dcec      	bgt.n	800a13e <__multadd+0x12>
 800a164:	b30e      	cbz	r6, 800a1aa <__multadd+0x7e>
 800a166:	68a3      	ldr	r3, [r4, #8]
 800a168:	42ab      	cmp	r3, r5
 800a16a:	dc19      	bgt.n	800a1a0 <__multadd+0x74>
 800a16c:	6861      	ldr	r1, [r4, #4]
 800a16e:	4638      	mov	r0, r7
 800a170:	3101      	adds	r1, #1
 800a172:	f7ff ff79 	bl	800a068 <_Balloc>
 800a176:	4680      	mov	r8, r0
 800a178:	b928      	cbnz	r0, 800a186 <__multadd+0x5a>
 800a17a:	4602      	mov	r2, r0
 800a17c:	4b0c      	ldr	r3, [pc, #48]	; (800a1b0 <__multadd+0x84>)
 800a17e:	480d      	ldr	r0, [pc, #52]	; (800a1b4 <__multadd+0x88>)
 800a180:	21b5      	movs	r1, #181	; 0xb5
 800a182:	f7fe fae5 	bl	8008750 <__assert_func>
 800a186:	6922      	ldr	r2, [r4, #16]
 800a188:	3202      	adds	r2, #2
 800a18a:	f104 010c 	add.w	r1, r4, #12
 800a18e:	0092      	lsls	r2, r2, #2
 800a190:	300c      	adds	r0, #12
 800a192:	f7fc fa01 	bl	8006598 <memcpy>
 800a196:	4621      	mov	r1, r4
 800a198:	4638      	mov	r0, r7
 800a19a:	f7ff ffa5 	bl	800a0e8 <_Bfree>
 800a19e:	4644      	mov	r4, r8
 800a1a0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800a1a4:	3501      	adds	r5, #1
 800a1a6:	615e      	str	r6, [r3, #20]
 800a1a8:	6125      	str	r5, [r4, #16]
 800a1aa:	4620      	mov	r0, r4
 800a1ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a1b0:	0800cf01 	.word	0x0800cf01
 800a1b4:	0800cff0 	.word	0x0800cff0

0800a1b8 <__s2b>:
 800a1b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a1bc:	460c      	mov	r4, r1
 800a1be:	4615      	mov	r5, r2
 800a1c0:	461f      	mov	r7, r3
 800a1c2:	2209      	movs	r2, #9
 800a1c4:	3308      	adds	r3, #8
 800a1c6:	4606      	mov	r6, r0
 800a1c8:	fb93 f3f2 	sdiv	r3, r3, r2
 800a1cc:	2100      	movs	r1, #0
 800a1ce:	2201      	movs	r2, #1
 800a1d0:	429a      	cmp	r2, r3
 800a1d2:	db09      	blt.n	800a1e8 <__s2b+0x30>
 800a1d4:	4630      	mov	r0, r6
 800a1d6:	f7ff ff47 	bl	800a068 <_Balloc>
 800a1da:	b940      	cbnz	r0, 800a1ee <__s2b+0x36>
 800a1dc:	4602      	mov	r2, r0
 800a1de:	4b19      	ldr	r3, [pc, #100]	; (800a244 <__s2b+0x8c>)
 800a1e0:	4819      	ldr	r0, [pc, #100]	; (800a248 <__s2b+0x90>)
 800a1e2:	21ce      	movs	r1, #206	; 0xce
 800a1e4:	f7fe fab4 	bl	8008750 <__assert_func>
 800a1e8:	0052      	lsls	r2, r2, #1
 800a1ea:	3101      	adds	r1, #1
 800a1ec:	e7f0      	b.n	800a1d0 <__s2b+0x18>
 800a1ee:	9b08      	ldr	r3, [sp, #32]
 800a1f0:	6143      	str	r3, [r0, #20]
 800a1f2:	2d09      	cmp	r5, #9
 800a1f4:	f04f 0301 	mov.w	r3, #1
 800a1f8:	6103      	str	r3, [r0, #16]
 800a1fa:	dd16      	ble.n	800a22a <__s2b+0x72>
 800a1fc:	f104 0909 	add.w	r9, r4, #9
 800a200:	46c8      	mov	r8, r9
 800a202:	442c      	add	r4, r5
 800a204:	f818 3b01 	ldrb.w	r3, [r8], #1
 800a208:	4601      	mov	r1, r0
 800a20a:	3b30      	subs	r3, #48	; 0x30
 800a20c:	220a      	movs	r2, #10
 800a20e:	4630      	mov	r0, r6
 800a210:	f7ff ff8c 	bl	800a12c <__multadd>
 800a214:	45a0      	cmp	r8, r4
 800a216:	d1f5      	bne.n	800a204 <__s2b+0x4c>
 800a218:	f1a5 0408 	sub.w	r4, r5, #8
 800a21c:	444c      	add	r4, r9
 800a21e:	1b2d      	subs	r5, r5, r4
 800a220:	1963      	adds	r3, r4, r5
 800a222:	42bb      	cmp	r3, r7
 800a224:	db04      	blt.n	800a230 <__s2b+0x78>
 800a226:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a22a:	340a      	adds	r4, #10
 800a22c:	2509      	movs	r5, #9
 800a22e:	e7f6      	b.n	800a21e <__s2b+0x66>
 800a230:	f814 3b01 	ldrb.w	r3, [r4], #1
 800a234:	4601      	mov	r1, r0
 800a236:	3b30      	subs	r3, #48	; 0x30
 800a238:	220a      	movs	r2, #10
 800a23a:	4630      	mov	r0, r6
 800a23c:	f7ff ff76 	bl	800a12c <__multadd>
 800a240:	e7ee      	b.n	800a220 <__s2b+0x68>
 800a242:	bf00      	nop
 800a244:	0800cf01 	.word	0x0800cf01
 800a248:	0800cff0 	.word	0x0800cff0

0800a24c <__hi0bits>:
 800a24c:	0c03      	lsrs	r3, r0, #16
 800a24e:	041b      	lsls	r3, r3, #16
 800a250:	b9d3      	cbnz	r3, 800a288 <__hi0bits+0x3c>
 800a252:	0400      	lsls	r0, r0, #16
 800a254:	2310      	movs	r3, #16
 800a256:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800a25a:	bf04      	itt	eq
 800a25c:	0200      	lsleq	r0, r0, #8
 800a25e:	3308      	addeq	r3, #8
 800a260:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800a264:	bf04      	itt	eq
 800a266:	0100      	lsleq	r0, r0, #4
 800a268:	3304      	addeq	r3, #4
 800a26a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800a26e:	bf04      	itt	eq
 800a270:	0080      	lsleq	r0, r0, #2
 800a272:	3302      	addeq	r3, #2
 800a274:	2800      	cmp	r0, #0
 800a276:	db05      	blt.n	800a284 <__hi0bits+0x38>
 800a278:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800a27c:	f103 0301 	add.w	r3, r3, #1
 800a280:	bf08      	it	eq
 800a282:	2320      	moveq	r3, #32
 800a284:	4618      	mov	r0, r3
 800a286:	4770      	bx	lr
 800a288:	2300      	movs	r3, #0
 800a28a:	e7e4      	b.n	800a256 <__hi0bits+0xa>

0800a28c <__lo0bits>:
 800a28c:	6803      	ldr	r3, [r0, #0]
 800a28e:	f013 0207 	ands.w	r2, r3, #7
 800a292:	4601      	mov	r1, r0
 800a294:	d00b      	beq.n	800a2ae <__lo0bits+0x22>
 800a296:	07da      	lsls	r2, r3, #31
 800a298:	d423      	bmi.n	800a2e2 <__lo0bits+0x56>
 800a29a:	0798      	lsls	r0, r3, #30
 800a29c:	bf49      	itett	mi
 800a29e:	085b      	lsrmi	r3, r3, #1
 800a2a0:	089b      	lsrpl	r3, r3, #2
 800a2a2:	2001      	movmi	r0, #1
 800a2a4:	600b      	strmi	r3, [r1, #0]
 800a2a6:	bf5c      	itt	pl
 800a2a8:	600b      	strpl	r3, [r1, #0]
 800a2aa:	2002      	movpl	r0, #2
 800a2ac:	4770      	bx	lr
 800a2ae:	b298      	uxth	r0, r3
 800a2b0:	b9a8      	cbnz	r0, 800a2de <__lo0bits+0x52>
 800a2b2:	0c1b      	lsrs	r3, r3, #16
 800a2b4:	2010      	movs	r0, #16
 800a2b6:	b2da      	uxtb	r2, r3
 800a2b8:	b90a      	cbnz	r2, 800a2be <__lo0bits+0x32>
 800a2ba:	3008      	adds	r0, #8
 800a2bc:	0a1b      	lsrs	r3, r3, #8
 800a2be:	071a      	lsls	r2, r3, #28
 800a2c0:	bf04      	itt	eq
 800a2c2:	091b      	lsreq	r3, r3, #4
 800a2c4:	3004      	addeq	r0, #4
 800a2c6:	079a      	lsls	r2, r3, #30
 800a2c8:	bf04      	itt	eq
 800a2ca:	089b      	lsreq	r3, r3, #2
 800a2cc:	3002      	addeq	r0, #2
 800a2ce:	07da      	lsls	r2, r3, #31
 800a2d0:	d403      	bmi.n	800a2da <__lo0bits+0x4e>
 800a2d2:	085b      	lsrs	r3, r3, #1
 800a2d4:	f100 0001 	add.w	r0, r0, #1
 800a2d8:	d005      	beq.n	800a2e6 <__lo0bits+0x5a>
 800a2da:	600b      	str	r3, [r1, #0]
 800a2dc:	4770      	bx	lr
 800a2de:	4610      	mov	r0, r2
 800a2e0:	e7e9      	b.n	800a2b6 <__lo0bits+0x2a>
 800a2e2:	2000      	movs	r0, #0
 800a2e4:	4770      	bx	lr
 800a2e6:	2020      	movs	r0, #32
 800a2e8:	4770      	bx	lr
	...

0800a2ec <__i2b>:
 800a2ec:	b510      	push	{r4, lr}
 800a2ee:	460c      	mov	r4, r1
 800a2f0:	2101      	movs	r1, #1
 800a2f2:	f7ff feb9 	bl	800a068 <_Balloc>
 800a2f6:	4602      	mov	r2, r0
 800a2f8:	b928      	cbnz	r0, 800a306 <__i2b+0x1a>
 800a2fa:	4b05      	ldr	r3, [pc, #20]	; (800a310 <__i2b+0x24>)
 800a2fc:	4805      	ldr	r0, [pc, #20]	; (800a314 <__i2b+0x28>)
 800a2fe:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800a302:	f7fe fa25 	bl	8008750 <__assert_func>
 800a306:	2301      	movs	r3, #1
 800a308:	6144      	str	r4, [r0, #20]
 800a30a:	6103      	str	r3, [r0, #16]
 800a30c:	bd10      	pop	{r4, pc}
 800a30e:	bf00      	nop
 800a310:	0800cf01 	.word	0x0800cf01
 800a314:	0800cff0 	.word	0x0800cff0

0800a318 <__multiply>:
 800a318:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a31c:	4691      	mov	r9, r2
 800a31e:	690a      	ldr	r2, [r1, #16]
 800a320:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800a324:	429a      	cmp	r2, r3
 800a326:	bfb8      	it	lt
 800a328:	460b      	movlt	r3, r1
 800a32a:	460c      	mov	r4, r1
 800a32c:	bfbc      	itt	lt
 800a32e:	464c      	movlt	r4, r9
 800a330:	4699      	movlt	r9, r3
 800a332:	6927      	ldr	r7, [r4, #16]
 800a334:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800a338:	68a3      	ldr	r3, [r4, #8]
 800a33a:	6861      	ldr	r1, [r4, #4]
 800a33c:	eb07 060a 	add.w	r6, r7, sl
 800a340:	42b3      	cmp	r3, r6
 800a342:	b085      	sub	sp, #20
 800a344:	bfb8      	it	lt
 800a346:	3101      	addlt	r1, #1
 800a348:	f7ff fe8e 	bl	800a068 <_Balloc>
 800a34c:	b930      	cbnz	r0, 800a35c <__multiply+0x44>
 800a34e:	4602      	mov	r2, r0
 800a350:	4b44      	ldr	r3, [pc, #272]	; (800a464 <__multiply+0x14c>)
 800a352:	4845      	ldr	r0, [pc, #276]	; (800a468 <__multiply+0x150>)
 800a354:	f240 115d 	movw	r1, #349	; 0x15d
 800a358:	f7fe f9fa 	bl	8008750 <__assert_func>
 800a35c:	f100 0514 	add.w	r5, r0, #20
 800a360:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800a364:	462b      	mov	r3, r5
 800a366:	2200      	movs	r2, #0
 800a368:	4543      	cmp	r3, r8
 800a36a:	d321      	bcc.n	800a3b0 <__multiply+0x98>
 800a36c:	f104 0314 	add.w	r3, r4, #20
 800a370:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800a374:	f109 0314 	add.w	r3, r9, #20
 800a378:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800a37c:	9202      	str	r2, [sp, #8]
 800a37e:	1b3a      	subs	r2, r7, r4
 800a380:	3a15      	subs	r2, #21
 800a382:	f022 0203 	bic.w	r2, r2, #3
 800a386:	3204      	adds	r2, #4
 800a388:	f104 0115 	add.w	r1, r4, #21
 800a38c:	428f      	cmp	r7, r1
 800a38e:	bf38      	it	cc
 800a390:	2204      	movcc	r2, #4
 800a392:	9201      	str	r2, [sp, #4]
 800a394:	9a02      	ldr	r2, [sp, #8]
 800a396:	9303      	str	r3, [sp, #12]
 800a398:	429a      	cmp	r2, r3
 800a39a:	d80c      	bhi.n	800a3b6 <__multiply+0x9e>
 800a39c:	2e00      	cmp	r6, #0
 800a39e:	dd03      	ble.n	800a3a8 <__multiply+0x90>
 800a3a0:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800a3a4:	2b00      	cmp	r3, #0
 800a3a6:	d05a      	beq.n	800a45e <__multiply+0x146>
 800a3a8:	6106      	str	r6, [r0, #16]
 800a3aa:	b005      	add	sp, #20
 800a3ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a3b0:	f843 2b04 	str.w	r2, [r3], #4
 800a3b4:	e7d8      	b.n	800a368 <__multiply+0x50>
 800a3b6:	f8b3 a000 	ldrh.w	sl, [r3]
 800a3ba:	f1ba 0f00 	cmp.w	sl, #0
 800a3be:	d024      	beq.n	800a40a <__multiply+0xf2>
 800a3c0:	f104 0e14 	add.w	lr, r4, #20
 800a3c4:	46a9      	mov	r9, r5
 800a3c6:	f04f 0c00 	mov.w	ip, #0
 800a3ca:	f85e 2b04 	ldr.w	r2, [lr], #4
 800a3ce:	f8d9 1000 	ldr.w	r1, [r9]
 800a3d2:	fa1f fb82 	uxth.w	fp, r2
 800a3d6:	b289      	uxth	r1, r1
 800a3d8:	fb0a 110b 	mla	r1, sl, fp, r1
 800a3dc:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800a3e0:	f8d9 2000 	ldr.w	r2, [r9]
 800a3e4:	4461      	add	r1, ip
 800a3e6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800a3ea:	fb0a c20b 	mla	r2, sl, fp, ip
 800a3ee:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800a3f2:	b289      	uxth	r1, r1
 800a3f4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800a3f8:	4577      	cmp	r7, lr
 800a3fa:	f849 1b04 	str.w	r1, [r9], #4
 800a3fe:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800a402:	d8e2      	bhi.n	800a3ca <__multiply+0xb2>
 800a404:	9a01      	ldr	r2, [sp, #4]
 800a406:	f845 c002 	str.w	ip, [r5, r2]
 800a40a:	9a03      	ldr	r2, [sp, #12]
 800a40c:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800a410:	3304      	adds	r3, #4
 800a412:	f1b9 0f00 	cmp.w	r9, #0
 800a416:	d020      	beq.n	800a45a <__multiply+0x142>
 800a418:	6829      	ldr	r1, [r5, #0]
 800a41a:	f104 0c14 	add.w	ip, r4, #20
 800a41e:	46ae      	mov	lr, r5
 800a420:	f04f 0a00 	mov.w	sl, #0
 800a424:	f8bc b000 	ldrh.w	fp, [ip]
 800a428:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800a42c:	fb09 220b 	mla	r2, r9, fp, r2
 800a430:	4492      	add	sl, r2
 800a432:	b289      	uxth	r1, r1
 800a434:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800a438:	f84e 1b04 	str.w	r1, [lr], #4
 800a43c:	f85c 2b04 	ldr.w	r2, [ip], #4
 800a440:	f8be 1000 	ldrh.w	r1, [lr]
 800a444:	0c12      	lsrs	r2, r2, #16
 800a446:	fb09 1102 	mla	r1, r9, r2, r1
 800a44a:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800a44e:	4567      	cmp	r7, ip
 800a450:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800a454:	d8e6      	bhi.n	800a424 <__multiply+0x10c>
 800a456:	9a01      	ldr	r2, [sp, #4]
 800a458:	50a9      	str	r1, [r5, r2]
 800a45a:	3504      	adds	r5, #4
 800a45c:	e79a      	b.n	800a394 <__multiply+0x7c>
 800a45e:	3e01      	subs	r6, #1
 800a460:	e79c      	b.n	800a39c <__multiply+0x84>
 800a462:	bf00      	nop
 800a464:	0800cf01 	.word	0x0800cf01
 800a468:	0800cff0 	.word	0x0800cff0

0800a46c <__pow5mult>:
 800a46c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a470:	4615      	mov	r5, r2
 800a472:	f012 0203 	ands.w	r2, r2, #3
 800a476:	4606      	mov	r6, r0
 800a478:	460f      	mov	r7, r1
 800a47a:	d007      	beq.n	800a48c <__pow5mult+0x20>
 800a47c:	4c25      	ldr	r4, [pc, #148]	; (800a514 <__pow5mult+0xa8>)
 800a47e:	3a01      	subs	r2, #1
 800a480:	2300      	movs	r3, #0
 800a482:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a486:	f7ff fe51 	bl	800a12c <__multadd>
 800a48a:	4607      	mov	r7, r0
 800a48c:	10ad      	asrs	r5, r5, #2
 800a48e:	d03d      	beq.n	800a50c <__pow5mult+0xa0>
 800a490:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800a492:	b97c      	cbnz	r4, 800a4b4 <__pow5mult+0x48>
 800a494:	2010      	movs	r0, #16
 800a496:	f7fc f877 	bl	8006588 <malloc>
 800a49a:	4602      	mov	r2, r0
 800a49c:	6270      	str	r0, [r6, #36]	; 0x24
 800a49e:	b928      	cbnz	r0, 800a4ac <__pow5mult+0x40>
 800a4a0:	4b1d      	ldr	r3, [pc, #116]	; (800a518 <__pow5mult+0xac>)
 800a4a2:	481e      	ldr	r0, [pc, #120]	; (800a51c <__pow5mult+0xb0>)
 800a4a4:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800a4a8:	f7fe f952 	bl	8008750 <__assert_func>
 800a4ac:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a4b0:	6004      	str	r4, [r0, #0]
 800a4b2:	60c4      	str	r4, [r0, #12]
 800a4b4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800a4b8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a4bc:	b94c      	cbnz	r4, 800a4d2 <__pow5mult+0x66>
 800a4be:	f240 2171 	movw	r1, #625	; 0x271
 800a4c2:	4630      	mov	r0, r6
 800a4c4:	f7ff ff12 	bl	800a2ec <__i2b>
 800a4c8:	2300      	movs	r3, #0
 800a4ca:	f8c8 0008 	str.w	r0, [r8, #8]
 800a4ce:	4604      	mov	r4, r0
 800a4d0:	6003      	str	r3, [r0, #0]
 800a4d2:	f04f 0900 	mov.w	r9, #0
 800a4d6:	07eb      	lsls	r3, r5, #31
 800a4d8:	d50a      	bpl.n	800a4f0 <__pow5mult+0x84>
 800a4da:	4639      	mov	r1, r7
 800a4dc:	4622      	mov	r2, r4
 800a4de:	4630      	mov	r0, r6
 800a4e0:	f7ff ff1a 	bl	800a318 <__multiply>
 800a4e4:	4639      	mov	r1, r7
 800a4e6:	4680      	mov	r8, r0
 800a4e8:	4630      	mov	r0, r6
 800a4ea:	f7ff fdfd 	bl	800a0e8 <_Bfree>
 800a4ee:	4647      	mov	r7, r8
 800a4f0:	106d      	asrs	r5, r5, #1
 800a4f2:	d00b      	beq.n	800a50c <__pow5mult+0xa0>
 800a4f4:	6820      	ldr	r0, [r4, #0]
 800a4f6:	b938      	cbnz	r0, 800a508 <__pow5mult+0x9c>
 800a4f8:	4622      	mov	r2, r4
 800a4fa:	4621      	mov	r1, r4
 800a4fc:	4630      	mov	r0, r6
 800a4fe:	f7ff ff0b 	bl	800a318 <__multiply>
 800a502:	6020      	str	r0, [r4, #0]
 800a504:	f8c0 9000 	str.w	r9, [r0]
 800a508:	4604      	mov	r4, r0
 800a50a:	e7e4      	b.n	800a4d6 <__pow5mult+0x6a>
 800a50c:	4638      	mov	r0, r7
 800a50e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a512:	bf00      	nop
 800a514:	0800d140 	.word	0x0800d140
 800a518:	0800cce8 	.word	0x0800cce8
 800a51c:	0800cff0 	.word	0x0800cff0

0800a520 <__lshift>:
 800a520:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a524:	460c      	mov	r4, r1
 800a526:	6849      	ldr	r1, [r1, #4]
 800a528:	6923      	ldr	r3, [r4, #16]
 800a52a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800a52e:	68a3      	ldr	r3, [r4, #8]
 800a530:	4607      	mov	r7, r0
 800a532:	4691      	mov	r9, r2
 800a534:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a538:	f108 0601 	add.w	r6, r8, #1
 800a53c:	42b3      	cmp	r3, r6
 800a53e:	db0b      	blt.n	800a558 <__lshift+0x38>
 800a540:	4638      	mov	r0, r7
 800a542:	f7ff fd91 	bl	800a068 <_Balloc>
 800a546:	4605      	mov	r5, r0
 800a548:	b948      	cbnz	r0, 800a55e <__lshift+0x3e>
 800a54a:	4602      	mov	r2, r0
 800a54c:	4b2a      	ldr	r3, [pc, #168]	; (800a5f8 <__lshift+0xd8>)
 800a54e:	482b      	ldr	r0, [pc, #172]	; (800a5fc <__lshift+0xdc>)
 800a550:	f240 11d9 	movw	r1, #473	; 0x1d9
 800a554:	f7fe f8fc 	bl	8008750 <__assert_func>
 800a558:	3101      	adds	r1, #1
 800a55a:	005b      	lsls	r3, r3, #1
 800a55c:	e7ee      	b.n	800a53c <__lshift+0x1c>
 800a55e:	2300      	movs	r3, #0
 800a560:	f100 0114 	add.w	r1, r0, #20
 800a564:	f100 0210 	add.w	r2, r0, #16
 800a568:	4618      	mov	r0, r3
 800a56a:	4553      	cmp	r3, sl
 800a56c:	db37      	blt.n	800a5de <__lshift+0xbe>
 800a56e:	6920      	ldr	r0, [r4, #16]
 800a570:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a574:	f104 0314 	add.w	r3, r4, #20
 800a578:	f019 091f 	ands.w	r9, r9, #31
 800a57c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a580:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800a584:	d02f      	beq.n	800a5e6 <__lshift+0xc6>
 800a586:	f1c9 0e20 	rsb	lr, r9, #32
 800a58a:	468a      	mov	sl, r1
 800a58c:	f04f 0c00 	mov.w	ip, #0
 800a590:	681a      	ldr	r2, [r3, #0]
 800a592:	fa02 f209 	lsl.w	r2, r2, r9
 800a596:	ea42 020c 	orr.w	r2, r2, ip
 800a59a:	f84a 2b04 	str.w	r2, [sl], #4
 800a59e:	f853 2b04 	ldr.w	r2, [r3], #4
 800a5a2:	4298      	cmp	r0, r3
 800a5a4:	fa22 fc0e 	lsr.w	ip, r2, lr
 800a5a8:	d8f2      	bhi.n	800a590 <__lshift+0x70>
 800a5aa:	1b03      	subs	r3, r0, r4
 800a5ac:	3b15      	subs	r3, #21
 800a5ae:	f023 0303 	bic.w	r3, r3, #3
 800a5b2:	3304      	adds	r3, #4
 800a5b4:	f104 0215 	add.w	r2, r4, #21
 800a5b8:	4290      	cmp	r0, r2
 800a5ba:	bf38      	it	cc
 800a5bc:	2304      	movcc	r3, #4
 800a5be:	f841 c003 	str.w	ip, [r1, r3]
 800a5c2:	f1bc 0f00 	cmp.w	ip, #0
 800a5c6:	d001      	beq.n	800a5cc <__lshift+0xac>
 800a5c8:	f108 0602 	add.w	r6, r8, #2
 800a5cc:	3e01      	subs	r6, #1
 800a5ce:	4638      	mov	r0, r7
 800a5d0:	612e      	str	r6, [r5, #16]
 800a5d2:	4621      	mov	r1, r4
 800a5d4:	f7ff fd88 	bl	800a0e8 <_Bfree>
 800a5d8:	4628      	mov	r0, r5
 800a5da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a5de:	f842 0f04 	str.w	r0, [r2, #4]!
 800a5e2:	3301      	adds	r3, #1
 800a5e4:	e7c1      	b.n	800a56a <__lshift+0x4a>
 800a5e6:	3904      	subs	r1, #4
 800a5e8:	f853 2b04 	ldr.w	r2, [r3], #4
 800a5ec:	f841 2f04 	str.w	r2, [r1, #4]!
 800a5f0:	4298      	cmp	r0, r3
 800a5f2:	d8f9      	bhi.n	800a5e8 <__lshift+0xc8>
 800a5f4:	e7ea      	b.n	800a5cc <__lshift+0xac>
 800a5f6:	bf00      	nop
 800a5f8:	0800cf01 	.word	0x0800cf01
 800a5fc:	0800cff0 	.word	0x0800cff0

0800a600 <__mcmp>:
 800a600:	b530      	push	{r4, r5, lr}
 800a602:	6902      	ldr	r2, [r0, #16]
 800a604:	690c      	ldr	r4, [r1, #16]
 800a606:	1b12      	subs	r2, r2, r4
 800a608:	d10e      	bne.n	800a628 <__mcmp+0x28>
 800a60a:	f100 0314 	add.w	r3, r0, #20
 800a60e:	3114      	adds	r1, #20
 800a610:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800a614:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800a618:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800a61c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800a620:	42a5      	cmp	r5, r4
 800a622:	d003      	beq.n	800a62c <__mcmp+0x2c>
 800a624:	d305      	bcc.n	800a632 <__mcmp+0x32>
 800a626:	2201      	movs	r2, #1
 800a628:	4610      	mov	r0, r2
 800a62a:	bd30      	pop	{r4, r5, pc}
 800a62c:	4283      	cmp	r3, r0
 800a62e:	d3f3      	bcc.n	800a618 <__mcmp+0x18>
 800a630:	e7fa      	b.n	800a628 <__mcmp+0x28>
 800a632:	f04f 32ff 	mov.w	r2, #4294967295
 800a636:	e7f7      	b.n	800a628 <__mcmp+0x28>

0800a638 <__mdiff>:
 800a638:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a63c:	460c      	mov	r4, r1
 800a63e:	4606      	mov	r6, r0
 800a640:	4611      	mov	r1, r2
 800a642:	4620      	mov	r0, r4
 800a644:	4690      	mov	r8, r2
 800a646:	f7ff ffdb 	bl	800a600 <__mcmp>
 800a64a:	1e05      	subs	r5, r0, #0
 800a64c:	d110      	bne.n	800a670 <__mdiff+0x38>
 800a64e:	4629      	mov	r1, r5
 800a650:	4630      	mov	r0, r6
 800a652:	f7ff fd09 	bl	800a068 <_Balloc>
 800a656:	b930      	cbnz	r0, 800a666 <__mdiff+0x2e>
 800a658:	4b3a      	ldr	r3, [pc, #232]	; (800a744 <__mdiff+0x10c>)
 800a65a:	4602      	mov	r2, r0
 800a65c:	f240 2132 	movw	r1, #562	; 0x232
 800a660:	4839      	ldr	r0, [pc, #228]	; (800a748 <__mdiff+0x110>)
 800a662:	f7fe f875 	bl	8008750 <__assert_func>
 800a666:	2301      	movs	r3, #1
 800a668:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800a66c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a670:	bfa4      	itt	ge
 800a672:	4643      	movge	r3, r8
 800a674:	46a0      	movge	r8, r4
 800a676:	4630      	mov	r0, r6
 800a678:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800a67c:	bfa6      	itte	ge
 800a67e:	461c      	movge	r4, r3
 800a680:	2500      	movge	r5, #0
 800a682:	2501      	movlt	r5, #1
 800a684:	f7ff fcf0 	bl	800a068 <_Balloc>
 800a688:	b920      	cbnz	r0, 800a694 <__mdiff+0x5c>
 800a68a:	4b2e      	ldr	r3, [pc, #184]	; (800a744 <__mdiff+0x10c>)
 800a68c:	4602      	mov	r2, r0
 800a68e:	f44f 7110 	mov.w	r1, #576	; 0x240
 800a692:	e7e5      	b.n	800a660 <__mdiff+0x28>
 800a694:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800a698:	6926      	ldr	r6, [r4, #16]
 800a69a:	60c5      	str	r5, [r0, #12]
 800a69c:	f104 0914 	add.w	r9, r4, #20
 800a6a0:	f108 0514 	add.w	r5, r8, #20
 800a6a4:	f100 0e14 	add.w	lr, r0, #20
 800a6a8:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800a6ac:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800a6b0:	f108 0210 	add.w	r2, r8, #16
 800a6b4:	46f2      	mov	sl, lr
 800a6b6:	2100      	movs	r1, #0
 800a6b8:	f859 3b04 	ldr.w	r3, [r9], #4
 800a6bc:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800a6c0:	fa1f f883 	uxth.w	r8, r3
 800a6c4:	fa11 f18b 	uxtah	r1, r1, fp
 800a6c8:	0c1b      	lsrs	r3, r3, #16
 800a6ca:	eba1 0808 	sub.w	r8, r1, r8
 800a6ce:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800a6d2:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800a6d6:	fa1f f888 	uxth.w	r8, r8
 800a6da:	1419      	asrs	r1, r3, #16
 800a6dc:	454e      	cmp	r6, r9
 800a6de:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800a6e2:	f84a 3b04 	str.w	r3, [sl], #4
 800a6e6:	d8e7      	bhi.n	800a6b8 <__mdiff+0x80>
 800a6e8:	1b33      	subs	r3, r6, r4
 800a6ea:	3b15      	subs	r3, #21
 800a6ec:	f023 0303 	bic.w	r3, r3, #3
 800a6f0:	3304      	adds	r3, #4
 800a6f2:	3415      	adds	r4, #21
 800a6f4:	42a6      	cmp	r6, r4
 800a6f6:	bf38      	it	cc
 800a6f8:	2304      	movcc	r3, #4
 800a6fa:	441d      	add	r5, r3
 800a6fc:	4473      	add	r3, lr
 800a6fe:	469e      	mov	lr, r3
 800a700:	462e      	mov	r6, r5
 800a702:	4566      	cmp	r6, ip
 800a704:	d30e      	bcc.n	800a724 <__mdiff+0xec>
 800a706:	f10c 0203 	add.w	r2, ip, #3
 800a70a:	1b52      	subs	r2, r2, r5
 800a70c:	f022 0203 	bic.w	r2, r2, #3
 800a710:	3d03      	subs	r5, #3
 800a712:	45ac      	cmp	ip, r5
 800a714:	bf38      	it	cc
 800a716:	2200      	movcc	r2, #0
 800a718:	441a      	add	r2, r3
 800a71a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800a71e:	b17b      	cbz	r3, 800a740 <__mdiff+0x108>
 800a720:	6107      	str	r7, [r0, #16]
 800a722:	e7a3      	b.n	800a66c <__mdiff+0x34>
 800a724:	f856 8b04 	ldr.w	r8, [r6], #4
 800a728:	fa11 f288 	uxtah	r2, r1, r8
 800a72c:	1414      	asrs	r4, r2, #16
 800a72e:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800a732:	b292      	uxth	r2, r2
 800a734:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800a738:	f84e 2b04 	str.w	r2, [lr], #4
 800a73c:	1421      	asrs	r1, r4, #16
 800a73e:	e7e0      	b.n	800a702 <__mdiff+0xca>
 800a740:	3f01      	subs	r7, #1
 800a742:	e7ea      	b.n	800a71a <__mdiff+0xe2>
 800a744:	0800cf01 	.word	0x0800cf01
 800a748:	0800cff0 	.word	0x0800cff0

0800a74c <__ulp>:
 800a74c:	b082      	sub	sp, #8
 800a74e:	ed8d 0b00 	vstr	d0, [sp]
 800a752:	9b01      	ldr	r3, [sp, #4]
 800a754:	4912      	ldr	r1, [pc, #72]	; (800a7a0 <__ulp+0x54>)
 800a756:	4019      	ands	r1, r3
 800a758:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800a75c:	2900      	cmp	r1, #0
 800a75e:	dd05      	ble.n	800a76c <__ulp+0x20>
 800a760:	2200      	movs	r2, #0
 800a762:	460b      	mov	r3, r1
 800a764:	ec43 2b10 	vmov	d0, r2, r3
 800a768:	b002      	add	sp, #8
 800a76a:	4770      	bx	lr
 800a76c:	4249      	negs	r1, r1
 800a76e:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800a772:	ea4f 5021 	mov.w	r0, r1, asr #20
 800a776:	f04f 0200 	mov.w	r2, #0
 800a77a:	f04f 0300 	mov.w	r3, #0
 800a77e:	da04      	bge.n	800a78a <__ulp+0x3e>
 800a780:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800a784:	fa41 f300 	asr.w	r3, r1, r0
 800a788:	e7ec      	b.n	800a764 <__ulp+0x18>
 800a78a:	f1a0 0114 	sub.w	r1, r0, #20
 800a78e:	291e      	cmp	r1, #30
 800a790:	bfda      	itte	le
 800a792:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800a796:	fa20 f101 	lsrle.w	r1, r0, r1
 800a79a:	2101      	movgt	r1, #1
 800a79c:	460a      	mov	r2, r1
 800a79e:	e7e1      	b.n	800a764 <__ulp+0x18>
 800a7a0:	7ff00000 	.word	0x7ff00000

0800a7a4 <__b2d>:
 800a7a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a7a6:	6905      	ldr	r5, [r0, #16]
 800a7a8:	f100 0714 	add.w	r7, r0, #20
 800a7ac:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800a7b0:	1f2e      	subs	r6, r5, #4
 800a7b2:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800a7b6:	4620      	mov	r0, r4
 800a7b8:	f7ff fd48 	bl	800a24c <__hi0bits>
 800a7bc:	f1c0 0320 	rsb	r3, r0, #32
 800a7c0:	280a      	cmp	r0, #10
 800a7c2:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800a840 <__b2d+0x9c>
 800a7c6:	600b      	str	r3, [r1, #0]
 800a7c8:	dc14      	bgt.n	800a7f4 <__b2d+0x50>
 800a7ca:	f1c0 0e0b 	rsb	lr, r0, #11
 800a7ce:	fa24 f10e 	lsr.w	r1, r4, lr
 800a7d2:	42b7      	cmp	r7, r6
 800a7d4:	ea41 030c 	orr.w	r3, r1, ip
 800a7d8:	bf34      	ite	cc
 800a7da:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800a7de:	2100      	movcs	r1, #0
 800a7e0:	3015      	adds	r0, #21
 800a7e2:	fa04 f000 	lsl.w	r0, r4, r0
 800a7e6:	fa21 f10e 	lsr.w	r1, r1, lr
 800a7ea:	ea40 0201 	orr.w	r2, r0, r1
 800a7ee:	ec43 2b10 	vmov	d0, r2, r3
 800a7f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a7f4:	42b7      	cmp	r7, r6
 800a7f6:	bf3a      	itte	cc
 800a7f8:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800a7fc:	f1a5 0608 	subcc.w	r6, r5, #8
 800a800:	2100      	movcs	r1, #0
 800a802:	380b      	subs	r0, #11
 800a804:	d017      	beq.n	800a836 <__b2d+0x92>
 800a806:	f1c0 0c20 	rsb	ip, r0, #32
 800a80a:	fa04 f500 	lsl.w	r5, r4, r0
 800a80e:	42be      	cmp	r6, r7
 800a810:	fa21 f40c 	lsr.w	r4, r1, ip
 800a814:	ea45 0504 	orr.w	r5, r5, r4
 800a818:	bf8c      	ite	hi
 800a81a:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800a81e:	2400      	movls	r4, #0
 800a820:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800a824:	fa01 f000 	lsl.w	r0, r1, r0
 800a828:	fa24 f40c 	lsr.w	r4, r4, ip
 800a82c:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800a830:	ea40 0204 	orr.w	r2, r0, r4
 800a834:	e7db      	b.n	800a7ee <__b2d+0x4a>
 800a836:	ea44 030c 	orr.w	r3, r4, ip
 800a83a:	460a      	mov	r2, r1
 800a83c:	e7d7      	b.n	800a7ee <__b2d+0x4a>
 800a83e:	bf00      	nop
 800a840:	3ff00000 	.word	0x3ff00000

0800a844 <__d2b>:
 800a844:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a848:	4689      	mov	r9, r1
 800a84a:	2101      	movs	r1, #1
 800a84c:	ec57 6b10 	vmov	r6, r7, d0
 800a850:	4690      	mov	r8, r2
 800a852:	f7ff fc09 	bl	800a068 <_Balloc>
 800a856:	4604      	mov	r4, r0
 800a858:	b930      	cbnz	r0, 800a868 <__d2b+0x24>
 800a85a:	4602      	mov	r2, r0
 800a85c:	4b25      	ldr	r3, [pc, #148]	; (800a8f4 <__d2b+0xb0>)
 800a85e:	4826      	ldr	r0, [pc, #152]	; (800a8f8 <__d2b+0xb4>)
 800a860:	f240 310a 	movw	r1, #778	; 0x30a
 800a864:	f7fd ff74 	bl	8008750 <__assert_func>
 800a868:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800a86c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800a870:	bb35      	cbnz	r5, 800a8c0 <__d2b+0x7c>
 800a872:	2e00      	cmp	r6, #0
 800a874:	9301      	str	r3, [sp, #4]
 800a876:	d028      	beq.n	800a8ca <__d2b+0x86>
 800a878:	4668      	mov	r0, sp
 800a87a:	9600      	str	r6, [sp, #0]
 800a87c:	f7ff fd06 	bl	800a28c <__lo0bits>
 800a880:	9900      	ldr	r1, [sp, #0]
 800a882:	b300      	cbz	r0, 800a8c6 <__d2b+0x82>
 800a884:	9a01      	ldr	r2, [sp, #4]
 800a886:	f1c0 0320 	rsb	r3, r0, #32
 800a88a:	fa02 f303 	lsl.w	r3, r2, r3
 800a88e:	430b      	orrs	r3, r1
 800a890:	40c2      	lsrs	r2, r0
 800a892:	6163      	str	r3, [r4, #20]
 800a894:	9201      	str	r2, [sp, #4]
 800a896:	9b01      	ldr	r3, [sp, #4]
 800a898:	61a3      	str	r3, [r4, #24]
 800a89a:	2b00      	cmp	r3, #0
 800a89c:	bf14      	ite	ne
 800a89e:	2202      	movne	r2, #2
 800a8a0:	2201      	moveq	r2, #1
 800a8a2:	6122      	str	r2, [r4, #16]
 800a8a4:	b1d5      	cbz	r5, 800a8dc <__d2b+0x98>
 800a8a6:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800a8aa:	4405      	add	r5, r0
 800a8ac:	f8c9 5000 	str.w	r5, [r9]
 800a8b0:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800a8b4:	f8c8 0000 	str.w	r0, [r8]
 800a8b8:	4620      	mov	r0, r4
 800a8ba:	b003      	add	sp, #12
 800a8bc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a8c0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a8c4:	e7d5      	b.n	800a872 <__d2b+0x2e>
 800a8c6:	6161      	str	r1, [r4, #20]
 800a8c8:	e7e5      	b.n	800a896 <__d2b+0x52>
 800a8ca:	a801      	add	r0, sp, #4
 800a8cc:	f7ff fcde 	bl	800a28c <__lo0bits>
 800a8d0:	9b01      	ldr	r3, [sp, #4]
 800a8d2:	6163      	str	r3, [r4, #20]
 800a8d4:	2201      	movs	r2, #1
 800a8d6:	6122      	str	r2, [r4, #16]
 800a8d8:	3020      	adds	r0, #32
 800a8da:	e7e3      	b.n	800a8a4 <__d2b+0x60>
 800a8dc:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800a8e0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800a8e4:	f8c9 0000 	str.w	r0, [r9]
 800a8e8:	6918      	ldr	r0, [r3, #16]
 800a8ea:	f7ff fcaf 	bl	800a24c <__hi0bits>
 800a8ee:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800a8f2:	e7df      	b.n	800a8b4 <__d2b+0x70>
 800a8f4:	0800cf01 	.word	0x0800cf01
 800a8f8:	0800cff0 	.word	0x0800cff0

0800a8fc <__ratio>:
 800a8fc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a900:	4688      	mov	r8, r1
 800a902:	4669      	mov	r1, sp
 800a904:	4681      	mov	r9, r0
 800a906:	f7ff ff4d 	bl	800a7a4 <__b2d>
 800a90a:	a901      	add	r1, sp, #4
 800a90c:	4640      	mov	r0, r8
 800a90e:	ec55 4b10 	vmov	r4, r5, d0
 800a912:	f7ff ff47 	bl	800a7a4 <__b2d>
 800a916:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800a91a:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800a91e:	eba3 0c02 	sub.w	ip, r3, r2
 800a922:	e9dd 3200 	ldrd	r3, r2, [sp]
 800a926:	1a9b      	subs	r3, r3, r2
 800a928:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800a92c:	ec51 0b10 	vmov	r0, r1, d0
 800a930:	2b00      	cmp	r3, #0
 800a932:	bfd6      	itet	le
 800a934:	460a      	movle	r2, r1
 800a936:	462a      	movgt	r2, r5
 800a938:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800a93c:	468b      	mov	fp, r1
 800a93e:	462f      	mov	r7, r5
 800a940:	bfd4      	ite	le
 800a942:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800a946:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800a94a:	4620      	mov	r0, r4
 800a94c:	ee10 2a10 	vmov	r2, s0
 800a950:	465b      	mov	r3, fp
 800a952:	4639      	mov	r1, r7
 800a954:	f7f5 ff7a 	bl	800084c <__aeabi_ddiv>
 800a958:	ec41 0b10 	vmov	d0, r0, r1
 800a95c:	b003      	add	sp, #12
 800a95e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800a962 <__copybits>:
 800a962:	3901      	subs	r1, #1
 800a964:	b570      	push	{r4, r5, r6, lr}
 800a966:	1149      	asrs	r1, r1, #5
 800a968:	6914      	ldr	r4, [r2, #16]
 800a96a:	3101      	adds	r1, #1
 800a96c:	f102 0314 	add.w	r3, r2, #20
 800a970:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800a974:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800a978:	1f05      	subs	r5, r0, #4
 800a97a:	42a3      	cmp	r3, r4
 800a97c:	d30c      	bcc.n	800a998 <__copybits+0x36>
 800a97e:	1aa3      	subs	r3, r4, r2
 800a980:	3b11      	subs	r3, #17
 800a982:	f023 0303 	bic.w	r3, r3, #3
 800a986:	3211      	adds	r2, #17
 800a988:	42a2      	cmp	r2, r4
 800a98a:	bf88      	it	hi
 800a98c:	2300      	movhi	r3, #0
 800a98e:	4418      	add	r0, r3
 800a990:	2300      	movs	r3, #0
 800a992:	4288      	cmp	r0, r1
 800a994:	d305      	bcc.n	800a9a2 <__copybits+0x40>
 800a996:	bd70      	pop	{r4, r5, r6, pc}
 800a998:	f853 6b04 	ldr.w	r6, [r3], #4
 800a99c:	f845 6f04 	str.w	r6, [r5, #4]!
 800a9a0:	e7eb      	b.n	800a97a <__copybits+0x18>
 800a9a2:	f840 3b04 	str.w	r3, [r0], #4
 800a9a6:	e7f4      	b.n	800a992 <__copybits+0x30>

0800a9a8 <__any_on>:
 800a9a8:	f100 0214 	add.w	r2, r0, #20
 800a9ac:	6900      	ldr	r0, [r0, #16]
 800a9ae:	114b      	asrs	r3, r1, #5
 800a9b0:	4298      	cmp	r0, r3
 800a9b2:	b510      	push	{r4, lr}
 800a9b4:	db11      	blt.n	800a9da <__any_on+0x32>
 800a9b6:	dd0a      	ble.n	800a9ce <__any_on+0x26>
 800a9b8:	f011 011f 	ands.w	r1, r1, #31
 800a9bc:	d007      	beq.n	800a9ce <__any_on+0x26>
 800a9be:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800a9c2:	fa24 f001 	lsr.w	r0, r4, r1
 800a9c6:	fa00 f101 	lsl.w	r1, r0, r1
 800a9ca:	428c      	cmp	r4, r1
 800a9cc:	d10b      	bne.n	800a9e6 <__any_on+0x3e>
 800a9ce:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800a9d2:	4293      	cmp	r3, r2
 800a9d4:	d803      	bhi.n	800a9de <__any_on+0x36>
 800a9d6:	2000      	movs	r0, #0
 800a9d8:	bd10      	pop	{r4, pc}
 800a9da:	4603      	mov	r3, r0
 800a9dc:	e7f7      	b.n	800a9ce <__any_on+0x26>
 800a9de:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800a9e2:	2900      	cmp	r1, #0
 800a9e4:	d0f5      	beq.n	800a9d2 <__any_on+0x2a>
 800a9e6:	2001      	movs	r0, #1
 800a9e8:	e7f6      	b.n	800a9d8 <__any_on+0x30>

0800a9ea <_calloc_r>:
 800a9ea:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a9ec:	fba1 2402 	umull	r2, r4, r1, r2
 800a9f0:	b94c      	cbnz	r4, 800aa06 <_calloc_r+0x1c>
 800a9f2:	4611      	mov	r1, r2
 800a9f4:	9201      	str	r2, [sp, #4]
 800a9f6:	f7fb fe51 	bl	800669c <_malloc_r>
 800a9fa:	9a01      	ldr	r2, [sp, #4]
 800a9fc:	4605      	mov	r5, r0
 800a9fe:	b930      	cbnz	r0, 800aa0e <_calloc_r+0x24>
 800aa00:	4628      	mov	r0, r5
 800aa02:	b003      	add	sp, #12
 800aa04:	bd30      	pop	{r4, r5, pc}
 800aa06:	220c      	movs	r2, #12
 800aa08:	6002      	str	r2, [r0, #0]
 800aa0a:	2500      	movs	r5, #0
 800aa0c:	e7f8      	b.n	800aa00 <_calloc_r+0x16>
 800aa0e:	4621      	mov	r1, r4
 800aa10:	f7fb fdd0 	bl	80065b4 <memset>
 800aa14:	e7f4      	b.n	800aa00 <_calloc_r+0x16>

0800aa16 <__ssputs_r>:
 800aa16:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800aa1a:	688e      	ldr	r6, [r1, #8]
 800aa1c:	429e      	cmp	r6, r3
 800aa1e:	4682      	mov	sl, r0
 800aa20:	460c      	mov	r4, r1
 800aa22:	4690      	mov	r8, r2
 800aa24:	461f      	mov	r7, r3
 800aa26:	d838      	bhi.n	800aa9a <__ssputs_r+0x84>
 800aa28:	898a      	ldrh	r2, [r1, #12]
 800aa2a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800aa2e:	d032      	beq.n	800aa96 <__ssputs_r+0x80>
 800aa30:	6825      	ldr	r5, [r4, #0]
 800aa32:	6909      	ldr	r1, [r1, #16]
 800aa34:	eba5 0901 	sub.w	r9, r5, r1
 800aa38:	6965      	ldr	r5, [r4, #20]
 800aa3a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800aa3e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800aa42:	3301      	adds	r3, #1
 800aa44:	444b      	add	r3, r9
 800aa46:	106d      	asrs	r5, r5, #1
 800aa48:	429d      	cmp	r5, r3
 800aa4a:	bf38      	it	cc
 800aa4c:	461d      	movcc	r5, r3
 800aa4e:	0553      	lsls	r3, r2, #21
 800aa50:	d531      	bpl.n	800aab6 <__ssputs_r+0xa0>
 800aa52:	4629      	mov	r1, r5
 800aa54:	f7fb fe22 	bl	800669c <_malloc_r>
 800aa58:	4606      	mov	r6, r0
 800aa5a:	b950      	cbnz	r0, 800aa72 <__ssputs_r+0x5c>
 800aa5c:	230c      	movs	r3, #12
 800aa5e:	f8ca 3000 	str.w	r3, [sl]
 800aa62:	89a3      	ldrh	r3, [r4, #12]
 800aa64:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800aa68:	81a3      	strh	r3, [r4, #12]
 800aa6a:	f04f 30ff 	mov.w	r0, #4294967295
 800aa6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aa72:	6921      	ldr	r1, [r4, #16]
 800aa74:	464a      	mov	r2, r9
 800aa76:	f7fb fd8f 	bl	8006598 <memcpy>
 800aa7a:	89a3      	ldrh	r3, [r4, #12]
 800aa7c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800aa80:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800aa84:	81a3      	strh	r3, [r4, #12]
 800aa86:	6126      	str	r6, [r4, #16]
 800aa88:	6165      	str	r5, [r4, #20]
 800aa8a:	444e      	add	r6, r9
 800aa8c:	eba5 0509 	sub.w	r5, r5, r9
 800aa90:	6026      	str	r6, [r4, #0]
 800aa92:	60a5      	str	r5, [r4, #8]
 800aa94:	463e      	mov	r6, r7
 800aa96:	42be      	cmp	r6, r7
 800aa98:	d900      	bls.n	800aa9c <__ssputs_r+0x86>
 800aa9a:	463e      	mov	r6, r7
 800aa9c:	6820      	ldr	r0, [r4, #0]
 800aa9e:	4632      	mov	r2, r6
 800aaa0:	4641      	mov	r1, r8
 800aaa2:	f000 fff7 	bl	800ba94 <memmove>
 800aaa6:	68a3      	ldr	r3, [r4, #8]
 800aaa8:	1b9b      	subs	r3, r3, r6
 800aaaa:	60a3      	str	r3, [r4, #8]
 800aaac:	6823      	ldr	r3, [r4, #0]
 800aaae:	4433      	add	r3, r6
 800aab0:	6023      	str	r3, [r4, #0]
 800aab2:	2000      	movs	r0, #0
 800aab4:	e7db      	b.n	800aa6e <__ssputs_r+0x58>
 800aab6:	462a      	mov	r2, r5
 800aab8:	f001 f806 	bl	800bac8 <_realloc_r>
 800aabc:	4606      	mov	r6, r0
 800aabe:	2800      	cmp	r0, #0
 800aac0:	d1e1      	bne.n	800aa86 <__ssputs_r+0x70>
 800aac2:	6921      	ldr	r1, [r4, #16]
 800aac4:	4650      	mov	r0, sl
 800aac6:	f7fb fd7d 	bl	80065c4 <_free_r>
 800aaca:	e7c7      	b.n	800aa5c <__ssputs_r+0x46>

0800aacc <_svfiprintf_r>:
 800aacc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aad0:	4698      	mov	r8, r3
 800aad2:	898b      	ldrh	r3, [r1, #12]
 800aad4:	061b      	lsls	r3, r3, #24
 800aad6:	b09d      	sub	sp, #116	; 0x74
 800aad8:	4607      	mov	r7, r0
 800aada:	460d      	mov	r5, r1
 800aadc:	4614      	mov	r4, r2
 800aade:	d50e      	bpl.n	800aafe <_svfiprintf_r+0x32>
 800aae0:	690b      	ldr	r3, [r1, #16]
 800aae2:	b963      	cbnz	r3, 800aafe <_svfiprintf_r+0x32>
 800aae4:	2140      	movs	r1, #64	; 0x40
 800aae6:	f7fb fdd9 	bl	800669c <_malloc_r>
 800aaea:	6028      	str	r0, [r5, #0]
 800aaec:	6128      	str	r0, [r5, #16]
 800aaee:	b920      	cbnz	r0, 800aafa <_svfiprintf_r+0x2e>
 800aaf0:	230c      	movs	r3, #12
 800aaf2:	603b      	str	r3, [r7, #0]
 800aaf4:	f04f 30ff 	mov.w	r0, #4294967295
 800aaf8:	e0d1      	b.n	800ac9e <_svfiprintf_r+0x1d2>
 800aafa:	2340      	movs	r3, #64	; 0x40
 800aafc:	616b      	str	r3, [r5, #20]
 800aafe:	2300      	movs	r3, #0
 800ab00:	9309      	str	r3, [sp, #36]	; 0x24
 800ab02:	2320      	movs	r3, #32
 800ab04:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ab08:	f8cd 800c 	str.w	r8, [sp, #12]
 800ab0c:	2330      	movs	r3, #48	; 0x30
 800ab0e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800acb8 <_svfiprintf_r+0x1ec>
 800ab12:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ab16:	f04f 0901 	mov.w	r9, #1
 800ab1a:	4623      	mov	r3, r4
 800ab1c:	469a      	mov	sl, r3
 800ab1e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ab22:	b10a      	cbz	r2, 800ab28 <_svfiprintf_r+0x5c>
 800ab24:	2a25      	cmp	r2, #37	; 0x25
 800ab26:	d1f9      	bne.n	800ab1c <_svfiprintf_r+0x50>
 800ab28:	ebba 0b04 	subs.w	fp, sl, r4
 800ab2c:	d00b      	beq.n	800ab46 <_svfiprintf_r+0x7a>
 800ab2e:	465b      	mov	r3, fp
 800ab30:	4622      	mov	r2, r4
 800ab32:	4629      	mov	r1, r5
 800ab34:	4638      	mov	r0, r7
 800ab36:	f7ff ff6e 	bl	800aa16 <__ssputs_r>
 800ab3a:	3001      	adds	r0, #1
 800ab3c:	f000 80aa 	beq.w	800ac94 <_svfiprintf_r+0x1c8>
 800ab40:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ab42:	445a      	add	r2, fp
 800ab44:	9209      	str	r2, [sp, #36]	; 0x24
 800ab46:	f89a 3000 	ldrb.w	r3, [sl]
 800ab4a:	2b00      	cmp	r3, #0
 800ab4c:	f000 80a2 	beq.w	800ac94 <_svfiprintf_r+0x1c8>
 800ab50:	2300      	movs	r3, #0
 800ab52:	f04f 32ff 	mov.w	r2, #4294967295
 800ab56:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ab5a:	f10a 0a01 	add.w	sl, sl, #1
 800ab5e:	9304      	str	r3, [sp, #16]
 800ab60:	9307      	str	r3, [sp, #28]
 800ab62:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ab66:	931a      	str	r3, [sp, #104]	; 0x68
 800ab68:	4654      	mov	r4, sl
 800ab6a:	2205      	movs	r2, #5
 800ab6c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ab70:	4851      	ldr	r0, [pc, #324]	; (800acb8 <_svfiprintf_r+0x1ec>)
 800ab72:	f7f5 fb35 	bl	80001e0 <memchr>
 800ab76:	9a04      	ldr	r2, [sp, #16]
 800ab78:	b9d8      	cbnz	r0, 800abb2 <_svfiprintf_r+0xe6>
 800ab7a:	06d0      	lsls	r0, r2, #27
 800ab7c:	bf44      	itt	mi
 800ab7e:	2320      	movmi	r3, #32
 800ab80:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ab84:	0711      	lsls	r1, r2, #28
 800ab86:	bf44      	itt	mi
 800ab88:	232b      	movmi	r3, #43	; 0x2b
 800ab8a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ab8e:	f89a 3000 	ldrb.w	r3, [sl]
 800ab92:	2b2a      	cmp	r3, #42	; 0x2a
 800ab94:	d015      	beq.n	800abc2 <_svfiprintf_r+0xf6>
 800ab96:	9a07      	ldr	r2, [sp, #28]
 800ab98:	4654      	mov	r4, sl
 800ab9a:	2000      	movs	r0, #0
 800ab9c:	f04f 0c0a 	mov.w	ip, #10
 800aba0:	4621      	mov	r1, r4
 800aba2:	f811 3b01 	ldrb.w	r3, [r1], #1
 800aba6:	3b30      	subs	r3, #48	; 0x30
 800aba8:	2b09      	cmp	r3, #9
 800abaa:	d94e      	bls.n	800ac4a <_svfiprintf_r+0x17e>
 800abac:	b1b0      	cbz	r0, 800abdc <_svfiprintf_r+0x110>
 800abae:	9207      	str	r2, [sp, #28]
 800abb0:	e014      	b.n	800abdc <_svfiprintf_r+0x110>
 800abb2:	eba0 0308 	sub.w	r3, r0, r8
 800abb6:	fa09 f303 	lsl.w	r3, r9, r3
 800abba:	4313      	orrs	r3, r2
 800abbc:	9304      	str	r3, [sp, #16]
 800abbe:	46a2      	mov	sl, r4
 800abc0:	e7d2      	b.n	800ab68 <_svfiprintf_r+0x9c>
 800abc2:	9b03      	ldr	r3, [sp, #12]
 800abc4:	1d19      	adds	r1, r3, #4
 800abc6:	681b      	ldr	r3, [r3, #0]
 800abc8:	9103      	str	r1, [sp, #12]
 800abca:	2b00      	cmp	r3, #0
 800abcc:	bfbb      	ittet	lt
 800abce:	425b      	neglt	r3, r3
 800abd0:	f042 0202 	orrlt.w	r2, r2, #2
 800abd4:	9307      	strge	r3, [sp, #28]
 800abd6:	9307      	strlt	r3, [sp, #28]
 800abd8:	bfb8      	it	lt
 800abda:	9204      	strlt	r2, [sp, #16]
 800abdc:	7823      	ldrb	r3, [r4, #0]
 800abde:	2b2e      	cmp	r3, #46	; 0x2e
 800abe0:	d10c      	bne.n	800abfc <_svfiprintf_r+0x130>
 800abe2:	7863      	ldrb	r3, [r4, #1]
 800abe4:	2b2a      	cmp	r3, #42	; 0x2a
 800abe6:	d135      	bne.n	800ac54 <_svfiprintf_r+0x188>
 800abe8:	9b03      	ldr	r3, [sp, #12]
 800abea:	1d1a      	adds	r2, r3, #4
 800abec:	681b      	ldr	r3, [r3, #0]
 800abee:	9203      	str	r2, [sp, #12]
 800abf0:	2b00      	cmp	r3, #0
 800abf2:	bfb8      	it	lt
 800abf4:	f04f 33ff 	movlt.w	r3, #4294967295
 800abf8:	3402      	adds	r4, #2
 800abfa:	9305      	str	r3, [sp, #20]
 800abfc:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800acc8 <_svfiprintf_r+0x1fc>
 800ac00:	7821      	ldrb	r1, [r4, #0]
 800ac02:	2203      	movs	r2, #3
 800ac04:	4650      	mov	r0, sl
 800ac06:	f7f5 faeb 	bl	80001e0 <memchr>
 800ac0a:	b140      	cbz	r0, 800ac1e <_svfiprintf_r+0x152>
 800ac0c:	2340      	movs	r3, #64	; 0x40
 800ac0e:	eba0 000a 	sub.w	r0, r0, sl
 800ac12:	fa03 f000 	lsl.w	r0, r3, r0
 800ac16:	9b04      	ldr	r3, [sp, #16]
 800ac18:	4303      	orrs	r3, r0
 800ac1a:	3401      	adds	r4, #1
 800ac1c:	9304      	str	r3, [sp, #16]
 800ac1e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ac22:	4826      	ldr	r0, [pc, #152]	; (800acbc <_svfiprintf_r+0x1f0>)
 800ac24:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ac28:	2206      	movs	r2, #6
 800ac2a:	f7f5 fad9 	bl	80001e0 <memchr>
 800ac2e:	2800      	cmp	r0, #0
 800ac30:	d038      	beq.n	800aca4 <_svfiprintf_r+0x1d8>
 800ac32:	4b23      	ldr	r3, [pc, #140]	; (800acc0 <_svfiprintf_r+0x1f4>)
 800ac34:	bb1b      	cbnz	r3, 800ac7e <_svfiprintf_r+0x1b2>
 800ac36:	9b03      	ldr	r3, [sp, #12]
 800ac38:	3307      	adds	r3, #7
 800ac3a:	f023 0307 	bic.w	r3, r3, #7
 800ac3e:	3308      	adds	r3, #8
 800ac40:	9303      	str	r3, [sp, #12]
 800ac42:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ac44:	4433      	add	r3, r6
 800ac46:	9309      	str	r3, [sp, #36]	; 0x24
 800ac48:	e767      	b.n	800ab1a <_svfiprintf_r+0x4e>
 800ac4a:	fb0c 3202 	mla	r2, ip, r2, r3
 800ac4e:	460c      	mov	r4, r1
 800ac50:	2001      	movs	r0, #1
 800ac52:	e7a5      	b.n	800aba0 <_svfiprintf_r+0xd4>
 800ac54:	2300      	movs	r3, #0
 800ac56:	3401      	adds	r4, #1
 800ac58:	9305      	str	r3, [sp, #20]
 800ac5a:	4619      	mov	r1, r3
 800ac5c:	f04f 0c0a 	mov.w	ip, #10
 800ac60:	4620      	mov	r0, r4
 800ac62:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ac66:	3a30      	subs	r2, #48	; 0x30
 800ac68:	2a09      	cmp	r2, #9
 800ac6a:	d903      	bls.n	800ac74 <_svfiprintf_r+0x1a8>
 800ac6c:	2b00      	cmp	r3, #0
 800ac6e:	d0c5      	beq.n	800abfc <_svfiprintf_r+0x130>
 800ac70:	9105      	str	r1, [sp, #20]
 800ac72:	e7c3      	b.n	800abfc <_svfiprintf_r+0x130>
 800ac74:	fb0c 2101 	mla	r1, ip, r1, r2
 800ac78:	4604      	mov	r4, r0
 800ac7a:	2301      	movs	r3, #1
 800ac7c:	e7f0      	b.n	800ac60 <_svfiprintf_r+0x194>
 800ac7e:	ab03      	add	r3, sp, #12
 800ac80:	9300      	str	r3, [sp, #0]
 800ac82:	462a      	mov	r2, r5
 800ac84:	4b0f      	ldr	r3, [pc, #60]	; (800acc4 <_svfiprintf_r+0x1f8>)
 800ac86:	a904      	add	r1, sp, #16
 800ac88:	4638      	mov	r0, r7
 800ac8a:	f7fb fe1b 	bl	80068c4 <_printf_float>
 800ac8e:	1c42      	adds	r2, r0, #1
 800ac90:	4606      	mov	r6, r0
 800ac92:	d1d6      	bne.n	800ac42 <_svfiprintf_r+0x176>
 800ac94:	89ab      	ldrh	r3, [r5, #12]
 800ac96:	065b      	lsls	r3, r3, #25
 800ac98:	f53f af2c 	bmi.w	800aaf4 <_svfiprintf_r+0x28>
 800ac9c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ac9e:	b01d      	add	sp, #116	; 0x74
 800aca0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aca4:	ab03      	add	r3, sp, #12
 800aca6:	9300      	str	r3, [sp, #0]
 800aca8:	462a      	mov	r2, r5
 800acaa:	4b06      	ldr	r3, [pc, #24]	; (800acc4 <_svfiprintf_r+0x1f8>)
 800acac:	a904      	add	r1, sp, #16
 800acae:	4638      	mov	r0, r7
 800acb0:	f7fc f8ac 	bl	8006e0c <_printf_i>
 800acb4:	e7eb      	b.n	800ac8e <_svfiprintf_r+0x1c2>
 800acb6:	bf00      	nop
 800acb8:	0800d14c 	.word	0x0800d14c
 800acbc:	0800d156 	.word	0x0800d156
 800acc0:	080068c5 	.word	0x080068c5
 800acc4:	0800aa17 	.word	0x0800aa17
 800acc8:	0800d152 	.word	0x0800d152

0800accc <__sfputc_r>:
 800accc:	6893      	ldr	r3, [r2, #8]
 800acce:	3b01      	subs	r3, #1
 800acd0:	2b00      	cmp	r3, #0
 800acd2:	b410      	push	{r4}
 800acd4:	6093      	str	r3, [r2, #8]
 800acd6:	da08      	bge.n	800acea <__sfputc_r+0x1e>
 800acd8:	6994      	ldr	r4, [r2, #24]
 800acda:	42a3      	cmp	r3, r4
 800acdc:	db01      	blt.n	800ace2 <__sfputc_r+0x16>
 800acde:	290a      	cmp	r1, #10
 800ace0:	d103      	bne.n	800acea <__sfputc_r+0x1e>
 800ace2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ace6:	f7fd bc73 	b.w	80085d0 <__swbuf_r>
 800acea:	6813      	ldr	r3, [r2, #0]
 800acec:	1c58      	adds	r0, r3, #1
 800acee:	6010      	str	r0, [r2, #0]
 800acf0:	7019      	strb	r1, [r3, #0]
 800acf2:	4608      	mov	r0, r1
 800acf4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800acf8:	4770      	bx	lr

0800acfa <__sfputs_r>:
 800acfa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800acfc:	4606      	mov	r6, r0
 800acfe:	460f      	mov	r7, r1
 800ad00:	4614      	mov	r4, r2
 800ad02:	18d5      	adds	r5, r2, r3
 800ad04:	42ac      	cmp	r4, r5
 800ad06:	d101      	bne.n	800ad0c <__sfputs_r+0x12>
 800ad08:	2000      	movs	r0, #0
 800ad0a:	e007      	b.n	800ad1c <__sfputs_r+0x22>
 800ad0c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ad10:	463a      	mov	r2, r7
 800ad12:	4630      	mov	r0, r6
 800ad14:	f7ff ffda 	bl	800accc <__sfputc_r>
 800ad18:	1c43      	adds	r3, r0, #1
 800ad1a:	d1f3      	bne.n	800ad04 <__sfputs_r+0xa>
 800ad1c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800ad20 <_vfiprintf_r>:
 800ad20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ad24:	460d      	mov	r5, r1
 800ad26:	b09d      	sub	sp, #116	; 0x74
 800ad28:	4614      	mov	r4, r2
 800ad2a:	4698      	mov	r8, r3
 800ad2c:	4606      	mov	r6, r0
 800ad2e:	b118      	cbz	r0, 800ad38 <_vfiprintf_r+0x18>
 800ad30:	6983      	ldr	r3, [r0, #24]
 800ad32:	b90b      	cbnz	r3, 800ad38 <_vfiprintf_r+0x18>
 800ad34:	f7fe fcd2 	bl	80096dc <__sinit>
 800ad38:	4b89      	ldr	r3, [pc, #548]	; (800af60 <_vfiprintf_r+0x240>)
 800ad3a:	429d      	cmp	r5, r3
 800ad3c:	d11b      	bne.n	800ad76 <_vfiprintf_r+0x56>
 800ad3e:	6875      	ldr	r5, [r6, #4]
 800ad40:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ad42:	07d9      	lsls	r1, r3, #31
 800ad44:	d405      	bmi.n	800ad52 <_vfiprintf_r+0x32>
 800ad46:	89ab      	ldrh	r3, [r5, #12]
 800ad48:	059a      	lsls	r2, r3, #22
 800ad4a:	d402      	bmi.n	800ad52 <_vfiprintf_r+0x32>
 800ad4c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ad4e:	f7ff f906 	bl	8009f5e <__retarget_lock_acquire_recursive>
 800ad52:	89ab      	ldrh	r3, [r5, #12]
 800ad54:	071b      	lsls	r3, r3, #28
 800ad56:	d501      	bpl.n	800ad5c <_vfiprintf_r+0x3c>
 800ad58:	692b      	ldr	r3, [r5, #16]
 800ad5a:	b9eb      	cbnz	r3, 800ad98 <_vfiprintf_r+0x78>
 800ad5c:	4629      	mov	r1, r5
 800ad5e:	4630      	mov	r0, r6
 800ad60:	f7fd fc88 	bl	8008674 <__swsetup_r>
 800ad64:	b1c0      	cbz	r0, 800ad98 <_vfiprintf_r+0x78>
 800ad66:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ad68:	07dc      	lsls	r4, r3, #31
 800ad6a:	d50e      	bpl.n	800ad8a <_vfiprintf_r+0x6a>
 800ad6c:	f04f 30ff 	mov.w	r0, #4294967295
 800ad70:	b01d      	add	sp, #116	; 0x74
 800ad72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ad76:	4b7b      	ldr	r3, [pc, #492]	; (800af64 <_vfiprintf_r+0x244>)
 800ad78:	429d      	cmp	r5, r3
 800ad7a:	d101      	bne.n	800ad80 <_vfiprintf_r+0x60>
 800ad7c:	68b5      	ldr	r5, [r6, #8]
 800ad7e:	e7df      	b.n	800ad40 <_vfiprintf_r+0x20>
 800ad80:	4b79      	ldr	r3, [pc, #484]	; (800af68 <_vfiprintf_r+0x248>)
 800ad82:	429d      	cmp	r5, r3
 800ad84:	bf08      	it	eq
 800ad86:	68f5      	ldreq	r5, [r6, #12]
 800ad88:	e7da      	b.n	800ad40 <_vfiprintf_r+0x20>
 800ad8a:	89ab      	ldrh	r3, [r5, #12]
 800ad8c:	0598      	lsls	r0, r3, #22
 800ad8e:	d4ed      	bmi.n	800ad6c <_vfiprintf_r+0x4c>
 800ad90:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ad92:	f7ff f8e5 	bl	8009f60 <__retarget_lock_release_recursive>
 800ad96:	e7e9      	b.n	800ad6c <_vfiprintf_r+0x4c>
 800ad98:	2300      	movs	r3, #0
 800ad9a:	9309      	str	r3, [sp, #36]	; 0x24
 800ad9c:	2320      	movs	r3, #32
 800ad9e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ada2:	f8cd 800c 	str.w	r8, [sp, #12]
 800ada6:	2330      	movs	r3, #48	; 0x30
 800ada8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800af6c <_vfiprintf_r+0x24c>
 800adac:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800adb0:	f04f 0901 	mov.w	r9, #1
 800adb4:	4623      	mov	r3, r4
 800adb6:	469a      	mov	sl, r3
 800adb8:	f813 2b01 	ldrb.w	r2, [r3], #1
 800adbc:	b10a      	cbz	r2, 800adc2 <_vfiprintf_r+0xa2>
 800adbe:	2a25      	cmp	r2, #37	; 0x25
 800adc0:	d1f9      	bne.n	800adb6 <_vfiprintf_r+0x96>
 800adc2:	ebba 0b04 	subs.w	fp, sl, r4
 800adc6:	d00b      	beq.n	800ade0 <_vfiprintf_r+0xc0>
 800adc8:	465b      	mov	r3, fp
 800adca:	4622      	mov	r2, r4
 800adcc:	4629      	mov	r1, r5
 800adce:	4630      	mov	r0, r6
 800add0:	f7ff ff93 	bl	800acfa <__sfputs_r>
 800add4:	3001      	adds	r0, #1
 800add6:	f000 80aa 	beq.w	800af2e <_vfiprintf_r+0x20e>
 800adda:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800addc:	445a      	add	r2, fp
 800adde:	9209      	str	r2, [sp, #36]	; 0x24
 800ade0:	f89a 3000 	ldrb.w	r3, [sl]
 800ade4:	2b00      	cmp	r3, #0
 800ade6:	f000 80a2 	beq.w	800af2e <_vfiprintf_r+0x20e>
 800adea:	2300      	movs	r3, #0
 800adec:	f04f 32ff 	mov.w	r2, #4294967295
 800adf0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800adf4:	f10a 0a01 	add.w	sl, sl, #1
 800adf8:	9304      	str	r3, [sp, #16]
 800adfa:	9307      	str	r3, [sp, #28]
 800adfc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ae00:	931a      	str	r3, [sp, #104]	; 0x68
 800ae02:	4654      	mov	r4, sl
 800ae04:	2205      	movs	r2, #5
 800ae06:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ae0a:	4858      	ldr	r0, [pc, #352]	; (800af6c <_vfiprintf_r+0x24c>)
 800ae0c:	f7f5 f9e8 	bl	80001e0 <memchr>
 800ae10:	9a04      	ldr	r2, [sp, #16]
 800ae12:	b9d8      	cbnz	r0, 800ae4c <_vfiprintf_r+0x12c>
 800ae14:	06d1      	lsls	r1, r2, #27
 800ae16:	bf44      	itt	mi
 800ae18:	2320      	movmi	r3, #32
 800ae1a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ae1e:	0713      	lsls	r3, r2, #28
 800ae20:	bf44      	itt	mi
 800ae22:	232b      	movmi	r3, #43	; 0x2b
 800ae24:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ae28:	f89a 3000 	ldrb.w	r3, [sl]
 800ae2c:	2b2a      	cmp	r3, #42	; 0x2a
 800ae2e:	d015      	beq.n	800ae5c <_vfiprintf_r+0x13c>
 800ae30:	9a07      	ldr	r2, [sp, #28]
 800ae32:	4654      	mov	r4, sl
 800ae34:	2000      	movs	r0, #0
 800ae36:	f04f 0c0a 	mov.w	ip, #10
 800ae3a:	4621      	mov	r1, r4
 800ae3c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ae40:	3b30      	subs	r3, #48	; 0x30
 800ae42:	2b09      	cmp	r3, #9
 800ae44:	d94e      	bls.n	800aee4 <_vfiprintf_r+0x1c4>
 800ae46:	b1b0      	cbz	r0, 800ae76 <_vfiprintf_r+0x156>
 800ae48:	9207      	str	r2, [sp, #28]
 800ae4a:	e014      	b.n	800ae76 <_vfiprintf_r+0x156>
 800ae4c:	eba0 0308 	sub.w	r3, r0, r8
 800ae50:	fa09 f303 	lsl.w	r3, r9, r3
 800ae54:	4313      	orrs	r3, r2
 800ae56:	9304      	str	r3, [sp, #16]
 800ae58:	46a2      	mov	sl, r4
 800ae5a:	e7d2      	b.n	800ae02 <_vfiprintf_r+0xe2>
 800ae5c:	9b03      	ldr	r3, [sp, #12]
 800ae5e:	1d19      	adds	r1, r3, #4
 800ae60:	681b      	ldr	r3, [r3, #0]
 800ae62:	9103      	str	r1, [sp, #12]
 800ae64:	2b00      	cmp	r3, #0
 800ae66:	bfbb      	ittet	lt
 800ae68:	425b      	neglt	r3, r3
 800ae6a:	f042 0202 	orrlt.w	r2, r2, #2
 800ae6e:	9307      	strge	r3, [sp, #28]
 800ae70:	9307      	strlt	r3, [sp, #28]
 800ae72:	bfb8      	it	lt
 800ae74:	9204      	strlt	r2, [sp, #16]
 800ae76:	7823      	ldrb	r3, [r4, #0]
 800ae78:	2b2e      	cmp	r3, #46	; 0x2e
 800ae7a:	d10c      	bne.n	800ae96 <_vfiprintf_r+0x176>
 800ae7c:	7863      	ldrb	r3, [r4, #1]
 800ae7e:	2b2a      	cmp	r3, #42	; 0x2a
 800ae80:	d135      	bne.n	800aeee <_vfiprintf_r+0x1ce>
 800ae82:	9b03      	ldr	r3, [sp, #12]
 800ae84:	1d1a      	adds	r2, r3, #4
 800ae86:	681b      	ldr	r3, [r3, #0]
 800ae88:	9203      	str	r2, [sp, #12]
 800ae8a:	2b00      	cmp	r3, #0
 800ae8c:	bfb8      	it	lt
 800ae8e:	f04f 33ff 	movlt.w	r3, #4294967295
 800ae92:	3402      	adds	r4, #2
 800ae94:	9305      	str	r3, [sp, #20]
 800ae96:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800af7c <_vfiprintf_r+0x25c>
 800ae9a:	7821      	ldrb	r1, [r4, #0]
 800ae9c:	2203      	movs	r2, #3
 800ae9e:	4650      	mov	r0, sl
 800aea0:	f7f5 f99e 	bl	80001e0 <memchr>
 800aea4:	b140      	cbz	r0, 800aeb8 <_vfiprintf_r+0x198>
 800aea6:	2340      	movs	r3, #64	; 0x40
 800aea8:	eba0 000a 	sub.w	r0, r0, sl
 800aeac:	fa03 f000 	lsl.w	r0, r3, r0
 800aeb0:	9b04      	ldr	r3, [sp, #16]
 800aeb2:	4303      	orrs	r3, r0
 800aeb4:	3401      	adds	r4, #1
 800aeb6:	9304      	str	r3, [sp, #16]
 800aeb8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800aebc:	482c      	ldr	r0, [pc, #176]	; (800af70 <_vfiprintf_r+0x250>)
 800aebe:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800aec2:	2206      	movs	r2, #6
 800aec4:	f7f5 f98c 	bl	80001e0 <memchr>
 800aec8:	2800      	cmp	r0, #0
 800aeca:	d03f      	beq.n	800af4c <_vfiprintf_r+0x22c>
 800aecc:	4b29      	ldr	r3, [pc, #164]	; (800af74 <_vfiprintf_r+0x254>)
 800aece:	bb1b      	cbnz	r3, 800af18 <_vfiprintf_r+0x1f8>
 800aed0:	9b03      	ldr	r3, [sp, #12]
 800aed2:	3307      	adds	r3, #7
 800aed4:	f023 0307 	bic.w	r3, r3, #7
 800aed8:	3308      	adds	r3, #8
 800aeda:	9303      	str	r3, [sp, #12]
 800aedc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aede:	443b      	add	r3, r7
 800aee0:	9309      	str	r3, [sp, #36]	; 0x24
 800aee2:	e767      	b.n	800adb4 <_vfiprintf_r+0x94>
 800aee4:	fb0c 3202 	mla	r2, ip, r2, r3
 800aee8:	460c      	mov	r4, r1
 800aeea:	2001      	movs	r0, #1
 800aeec:	e7a5      	b.n	800ae3a <_vfiprintf_r+0x11a>
 800aeee:	2300      	movs	r3, #0
 800aef0:	3401      	adds	r4, #1
 800aef2:	9305      	str	r3, [sp, #20]
 800aef4:	4619      	mov	r1, r3
 800aef6:	f04f 0c0a 	mov.w	ip, #10
 800aefa:	4620      	mov	r0, r4
 800aefc:	f810 2b01 	ldrb.w	r2, [r0], #1
 800af00:	3a30      	subs	r2, #48	; 0x30
 800af02:	2a09      	cmp	r2, #9
 800af04:	d903      	bls.n	800af0e <_vfiprintf_r+0x1ee>
 800af06:	2b00      	cmp	r3, #0
 800af08:	d0c5      	beq.n	800ae96 <_vfiprintf_r+0x176>
 800af0a:	9105      	str	r1, [sp, #20]
 800af0c:	e7c3      	b.n	800ae96 <_vfiprintf_r+0x176>
 800af0e:	fb0c 2101 	mla	r1, ip, r1, r2
 800af12:	4604      	mov	r4, r0
 800af14:	2301      	movs	r3, #1
 800af16:	e7f0      	b.n	800aefa <_vfiprintf_r+0x1da>
 800af18:	ab03      	add	r3, sp, #12
 800af1a:	9300      	str	r3, [sp, #0]
 800af1c:	462a      	mov	r2, r5
 800af1e:	4b16      	ldr	r3, [pc, #88]	; (800af78 <_vfiprintf_r+0x258>)
 800af20:	a904      	add	r1, sp, #16
 800af22:	4630      	mov	r0, r6
 800af24:	f7fb fcce 	bl	80068c4 <_printf_float>
 800af28:	4607      	mov	r7, r0
 800af2a:	1c78      	adds	r0, r7, #1
 800af2c:	d1d6      	bne.n	800aedc <_vfiprintf_r+0x1bc>
 800af2e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800af30:	07d9      	lsls	r1, r3, #31
 800af32:	d405      	bmi.n	800af40 <_vfiprintf_r+0x220>
 800af34:	89ab      	ldrh	r3, [r5, #12]
 800af36:	059a      	lsls	r2, r3, #22
 800af38:	d402      	bmi.n	800af40 <_vfiprintf_r+0x220>
 800af3a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800af3c:	f7ff f810 	bl	8009f60 <__retarget_lock_release_recursive>
 800af40:	89ab      	ldrh	r3, [r5, #12]
 800af42:	065b      	lsls	r3, r3, #25
 800af44:	f53f af12 	bmi.w	800ad6c <_vfiprintf_r+0x4c>
 800af48:	9809      	ldr	r0, [sp, #36]	; 0x24
 800af4a:	e711      	b.n	800ad70 <_vfiprintf_r+0x50>
 800af4c:	ab03      	add	r3, sp, #12
 800af4e:	9300      	str	r3, [sp, #0]
 800af50:	462a      	mov	r2, r5
 800af52:	4b09      	ldr	r3, [pc, #36]	; (800af78 <_vfiprintf_r+0x258>)
 800af54:	a904      	add	r1, sp, #16
 800af56:	4630      	mov	r0, r6
 800af58:	f7fb ff58 	bl	8006e0c <_printf_i>
 800af5c:	e7e4      	b.n	800af28 <_vfiprintf_r+0x208>
 800af5e:	bf00      	nop
 800af60:	0800cf34 	.word	0x0800cf34
 800af64:	0800cf54 	.word	0x0800cf54
 800af68:	0800cf14 	.word	0x0800cf14
 800af6c:	0800d14c 	.word	0x0800d14c
 800af70:	0800d156 	.word	0x0800d156
 800af74:	080068c5 	.word	0x080068c5
 800af78:	0800acfb 	.word	0x0800acfb
 800af7c:	0800d152 	.word	0x0800d152

0800af80 <__svfiscanf_r>:
 800af80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800af84:	461d      	mov	r5, r3
 800af86:	6e4b      	ldr	r3, [r1, #100]	; 0x64
 800af88:	07df      	lsls	r7, r3, #31
 800af8a:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 800af8e:	4606      	mov	r6, r0
 800af90:	460c      	mov	r4, r1
 800af92:	4692      	mov	sl, r2
 800af94:	d405      	bmi.n	800afa2 <__svfiscanf_r+0x22>
 800af96:	898b      	ldrh	r3, [r1, #12]
 800af98:	0598      	lsls	r0, r3, #22
 800af9a:	d402      	bmi.n	800afa2 <__svfiscanf_r+0x22>
 800af9c:	6d88      	ldr	r0, [r1, #88]	; 0x58
 800af9e:	f7fe ffde 	bl	8009f5e <__retarget_lock_acquire_recursive>
 800afa2:	2300      	movs	r3, #0
 800afa4:	e9cd 3344 	strd	r3, r3, [sp, #272]	; 0x110
 800afa8:	4ba6      	ldr	r3, [pc, #664]	; (800b244 <__svfiscanf_r+0x2c4>)
 800afaa:	93a0      	str	r3, [sp, #640]	; 0x280
 800afac:	f10d 0804 	add.w	r8, sp, #4
 800afb0:	4ba5      	ldr	r3, [pc, #660]	; (800b248 <__svfiscanf_r+0x2c8>)
 800afb2:	4fa6      	ldr	r7, [pc, #664]	; (800b24c <__svfiscanf_r+0x2cc>)
 800afb4:	f8df 9298 	ldr.w	r9, [pc, #664]	; 800b250 <__svfiscanf_r+0x2d0>
 800afb8:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 800afbc:	93a1      	str	r3, [sp, #644]	; 0x284
 800afbe:	9500      	str	r5, [sp, #0]
 800afc0:	f89a 3000 	ldrb.w	r3, [sl]
 800afc4:	2b00      	cmp	r3, #0
 800afc6:	f000 8173 	beq.w	800b2b0 <__svfiscanf_r+0x330>
 800afca:	5dd9      	ldrb	r1, [r3, r7]
 800afcc:	f011 0108 	ands.w	r1, r1, #8
 800afd0:	f10a 0501 	add.w	r5, sl, #1
 800afd4:	d019      	beq.n	800b00a <__svfiscanf_r+0x8a>
 800afd6:	6863      	ldr	r3, [r4, #4]
 800afd8:	2b00      	cmp	r3, #0
 800afda:	dd0f      	ble.n	800affc <__svfiscanf_r+0x7c>
 800afdc:	6823      	ldr	r3, [r4, #0]
 800afde:	781a      	ldrb	r2, [r3, #0]
 800afe0:	5cba      	ldrb	r2, [r7, r2]
 800afe2:	0711      	lsls	r1, r2, #28
 800afe4:	d401      	bmi.n	800afea <__svfiscanf_r+0x6a>
 800afe6:	46aa      	mov	sl, r5
 800afe8:	e7ea      	b.n	800afc0 <__svfiscanf_r+0x40>
 800afea:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800afec:	3201      	adds	r2, #1
 800afee:	9245      	str	r2, [sp, #276]	; 0x114
 800aff0:	6862      	ldr	r2, [r4, #4]
 800aff2:	3301      	adds	r3, #1
 800aff4:	3a01      	subs	r2, #1
 800aff6:	6062      	str	r2, [r4, #4]
 800aff8:	6023      	str	r3, [r4, #0]
 800affa:	e7ec      	b.n	800afd6 <__svfiscanf_r+0x56>
 800affc:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800affe:	4621      	mov	r1, r4
 800b000:	4630      	mov	r0, r6
 800b002:	4798      	blx	r3
 800b004:	2800      	cmp	r0, #0
 800b006:	d0e9      	beq.n	800afdc <__svfiscanf_r+0x5c>
 800b008:	e7ed      	b.n	800afe6 <__svfiscanf_r+0x66>
 800b00a:	2b25      	cmp	r3, #37	; 0x25
 800b00c:	d012      	beq.n	800b034 <__svfiscanf_r+0xb4>
 800b00e:	469a      	mov	sl, r3
 800b010:	6863      	ldr	r3, [r4, #4]
 800b012:	2b00      	cmp	r3, #0
 800b014:	f340 8095 	ble.w	800b142 <__svfiscanf_r+0x1c2>
 800b018:	6822      	ldr	r2, [r4, #0]
 800b01a:	7813      	ldrb	r3, [r2, #0]
 800b01c:	4553      	cmp	r3, sl
 800b01e:	f040 8147 	bne.w	800b2b0 <__svfiscanf_r+0x330>
 800b022:	6863      	ldr	r3, [r4, #4]
 800b024:	3b01      	subs	r3, #1
 800b026:	6063      	str	r3, [r4, #4]
 800b028:	9b45      	ldr	r3, [sp, #276]	; 0x114
 800b02a:	3201      	adds	r2, #1
 800b02c:	3301      	adds	r3, #1
 800b02e:	6022      	str	r2, [r4, #0]
 800b030:	9345      	str	r3, [sp, #276]	; 0x114
 800b032:	e7d8      	b.n	800afe6 <__svfiscanf_r+0x66>
 800b034:	9141      	str	r1, [sp, #260]	; 0x104
 800b036:	9143      	str	r1, [sp, #268]	; 0x10c
 800b038:	f89a 3001 	ldrb.w	r3, [sl, #1]
 800b03c:	2b2a      	cmp	r3, #42	; 0x2a
 800b03e:	bf02      	ittt	eq
 800b040:	2310      	moveq	r3, #16
 800b042:	9341      	streq	r3, [sp, #260]	; 0x104
 800b044:	f10a 0502 	addeq.w	r5, sl, #2
 800b048:	220a      	movs	r2, #10
 800b04a:	46aa      	mov	sl, r5
 800b04c:	f81a 1b01 	ldrb.w	r1, [sl], #1
 800b050:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 800b054:	2b09      	cmp	r3, #9
 800b056:	d91e      	bls.n	800b096 <__svfiscanf_r+0x116>
 800b058:	487d      	ldr	r0, [pc, #500]	; (800b250 <__svfiscanf_r+0x2d0>)
 800b05a:	2203      	movs	r2, #3
 800b05c:	f7f5 f8c0 	bl	80001e0 <memchr>
 800b060:	b140      	cbz	r0, 800b074 <__svfiscanf_r+0xf4>
 800b062:	2301      	movs	r3, #1
 800b064:	eba0 0009 	sub.w	r0, r0, r9
 800b068:	fa03 f000 	lsl.w	r0, r3, r0
 800b06c:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800b06e:	4318      	orrs	r0, r3
 800b070:	9041      	str	r0, [sp, #260]	; 0x104
 800b072:	4655      	mov	r5, sl
 800b074:	f815 3b01 	ldrb.w	r3, [r5], #1
 800b078:	2b78      	cmp	r3, #120	; 0x78
 800b07a:	d807      	bhi.n	800b08c <__svfiscanf_r+0x10c>
 800b07c:	2b57      	cmp	r3, #87	; 0x57
 800b07e:	d811      	bhi.n	800b0a4 <__svfiscanf_r+0x124>
 800b080:	2b25      	cmp	r3, #37	; 0x25
 800b082:	d0c4      	beq.n	800b00e <__svfiscanf_r+0x8e>
 800b084:	d858      	bhi.n	800b138 <__svfiscanf_r+0x1b8>
 800b086:	2b00      	cmp	r3, #0
 800b088:	f000 80c8 	beq.w	800b21c <__svfiscanf_r+0x29c>
 800b08c:	2303      	movs	r3, #3
 800b08e:	9347      	str	r3, [sp, #284]	; 0x11c
 800b090:	230a      	movs	r3, #10
 800b092:	9342      	str	r3, [sp, #264]	; 0x108
 800b094:	e07c      	b.n	800b190 <__svfiscanf_r+0x210>
 800b096:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 800b098:	fb02 1103 	mla	r1, r2, r3, r1
 800b09c:	3930      	subs	r1, #48	; 0x30
 800b09e:	9143      	str	r1, [sp, #268]	; 0x10c
 800b0a0:	4655      	mov	r5, sl
 800b0a2:	e7d2      	b.n	800b04a <__svfiscanf_r+0xca>
 800b0a4:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 800b0a8:	2a20      	cmp	r2, #32
 800b0aa:	d8ef      	bhi.n	800b08c <__svfiscanf_r+0x10c>
 800b0ac:	a101      	add	r1, pc, #4	; (adr r1, 800b0b4 <__svfiscanf_r+0x134>)
 800b0ae:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800b0b2:	bf00      	nop
 800b0b4:	0800b17b 	.word	0x0800b17b
 800b0b8:	0800b08d 	.word	0x0800b08d
 800b0bc:	0800b08d 	.word	0x0800b08d
 800b0c0:	0800b1d9 	.word	0x0800b1d9
 800b0c4:	0800b08d 	.word	0x0800b08d
 800b0c8:	0800b08d 	.word	0x0800b08d
 800b0cc:	0800b08d 	.word	0x0800b08d
 800b0d0:	0800b08d 	.word	0x0800b08d
 800b0d4:	0800b08d 	.word	0x0800b08d
 800b0d8:	0800b08d 	.word	0x0800b08d
 800b0dc:	0800b08d 	.word	0x0800b08d
 800b0e0:	0800b1ef 	.word	0x0800b1ef
 800b0e4:	0800b1c5 	.word	0x0800b1c5
 800b0e8:	0800b13f 	.word	0x0800b13f
 800b0ec:	0800b13f 	.word	0x0800b13f
 800b0f0:	0800b13f 	.word	0x0800b13f
 800b0f4:	0800b08d 	.word	0x0800b08d
 800b0f8:	0800b1c9 	.word	0x0800b1c9
 800b0fc:	0800b08d 	.word	0x0800b08d
 800b100:	0800b08d 	.word	0x0800b08d
 800b104:	0800b08d 	.word	0x0800b08d
 800b108:	0800b08d 	.word	0x0800b08d
 800b10c:	0800b1ff 	.word	0x0800b1ff
 800b110:	0800b1d1 	.word	0x0800b1d1
 800b114:	0800b173 	.word	0x0800b173
 800b118:	0800b08d 	.word	0x0800b08d
 800b11c:	0800b08d 	.word	0x0800b08d
 800b120:	0800b1fb 	.word	0x0800b1fb
 800b124:	0800b08d 	.word	0x0800b08d
 800b128:	0800b1c5 	.word	0x0800b1c5
 800b12c:	0800b08d 	.word	0x0800b08d
 800b130:	0800b08d 	.word	0x0800b08d
 800b134:	0800b17b 	.word	0x0800b17b
 800b138:	3b45      	subs	r3, #69	; 0x45
 800b13a:	2b02      	cmp	r3, #2
 800b13c:	d8a6      	bhi.n	800b08c <__svfiscanf_r+0x10c>
 800b13e:	2305      	movs	r3, #5
 800b140:	e025      	b.n	800b18e <__svfiscanf_r+0x20e>
 800b142:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800b144:	4621      	mov	r1, r4
 800b146:	4630      	mov	r0, r6
 800b148:	4798      	blx	r3
 800b14a:	2800      	cmp	r0, #0
 800b14c:	f43f af64 	beq.w	800b018 <__svfiscanf_r+0x98>
 800b150:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b152:	07da      	lsls	r2, r3, #31
 800b154:	f140 80a4 	bpl.w	800b2a0 <__svfiscanf_r+0x320>
 800b158:	9844      	ldr	r0, [sp, #272]	; 0x110
 800b15a:	2800      	cmp	r0, #0
 800b15c:	d067      	beq.n	800b22e <__svfiscanf_r+0x2ae>
 800b15e:	89a3      	ldrh	r3, [r4, #12]
 800b160:	f013 0f40 	tst.w	r3, #64	; 0x40
 800b164:	bf18      	it	ne
 800b166:	f04f 30ff 	movne.w	r0, #4294967295
 800b16a:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 800b16e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b172:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800b174:	f042 0220 	orr.w	r2, r2, #32
 800b178:	9241      	str	r2, [sp, #260]	; 0x104
 800b17a:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800b17c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b180:	9241      	str	r2, [sp, #260]	; 0x104
 800b182:	2210      	movs	r2, #16
 800b184:	2b6f      	cmp	r3, #111	; 0x6f
 800b186:	9242      	str	r2, [sp, #264]	; 0x108
 800b188:	bf34      	ite	cc
 800b18a:	2303      	movcc	r3, #3
 800b18c:	2304      	movcs	r3, #4
 800b18e:	9347      	str	r3, [sp, #284]	; 0x11c
 800b190:	6863      	ldr	r3, [r4, #4]
 800b192:	2b00      	cmp	r3, #0
 800b194:	dd4e      	ble.n	800b234 <__svfiscanf_r+0x2b4>
 800b196:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800b198:	065b      	lsls	r3, r3, #25
 800b19a:	d404      	bmi.n	800b1a6 <__svfiscanf_r+0x226>
 800b19c:	6823      	ldr	r3, [r4, #0]
 800b19e:	781a      	ldrb	r2, [r3, #0]
 800b1a0:	5cba      	ldrb	r2, [r7, r2]
 800b1a2:	0710      	lsls	r0, r2, #28
 800b1a4:	d456      	bmi.n	800b254 <__svfiscanf_r+0x2d4>
 800b1a6:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 800b1a8:	2b02      	cmp	r3, #2
 800b1aa:	dc65      	bgt.n	800b278 <__svfiscanf_r+0x2f8>
 800b1ac:	466b      	mov	r3, sp
 800b1ae:	4622      	mov	r2, r4
 800b1b0:	a941      	add	r1, sp, #260	; 0x104
 800b1b2:	4630      	mov	r0, r6
 800b1b4:	f000 f8b2 	bl	800b31c <_scanf_chars>
 800b1b8:	2801      	cmp	r0, #1
 800b1ba:	d079      	beq.n	800b2b0 <__svfiscanf_r+0x330>
 800b1bc:	2802      	cmp	r0, #2
 800b1be:	f47f af12 	bne.w	800afe6 <__svfiscanf_r+0x66>
 800b1c2:	e7c5      	b.n	800b150 <__svfiscanf_r+0x1d0>
 800b1c4:	220a      	movs	r2, #10
 800b1c6:	e7dd      	b.n	800b184 <__svfiscanf_r+0x204>
 800b1c8:	2300      	movs	r3, #0
 800b1ca:	9342      	str	r3, [sp, #264]	; 0x108
 800b1cc:	2303      	movs	r3, #3
 800b1ce:	e7de      	b.n	800b18e <__svfiscanf_r+0x20e>
 800b1d0:	2308      	movs	r3, #8
 800b1d2:	9342      	str	r3, [sp, #264]	; 0x108
 800b1d4:	2304      	movs	r3, #4
 800b1d6:	e7da      	b.n	800b18e <__svfiscanf_r+0x20e>
 800b1d8:	4629      	mov	r1, r5
 800b1da:	4640      	mov	r0, r8
 800b1dc:	f000 fa8c 	bl	800b6f8 <__sccl>
 800b1e0:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800b1e2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b1e6:	9341      	str	r3, [sp, #260]	; 0x104
 800b1e8:	4605      	mov	r5, r0
 800b1ea:	2301      	movs	r3, #1
 800b1ec:	e7cf      	b.n	800b18e <__svfiscanf_r+0x20e>
 800b1ee:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800b1f0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b1f4:	9341      	str	r3, [sp, #260]	; 0x104
 800b1f6:	2300      	movs	r3, #0
 800b1f8:	e7c9      	b.n	800b18e <__svfiscanf_r+0x20e>
 800b1fa:	2302      	movs	r3, #2
 800b1fc:	e7c7      	b.n	800b18e <__svfiscanf_r+0x20e>
 800b1fe:	9841      	ldr	r0, [sp, #260]	; 0x104
 800b200:	06c3      	lsls	r3, r0, #27
 800b202:	f53f aef0 	bmi.w	800afe6 <__svfiscanf_r+0x66>
 800b206:	9b00      	ldr	r3, [sp, #0]
 800b208:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800b20a:	1d19      	adds	r1, r3, #4
 800b20c:	9100      	str	r1, [sp, #0]
 800b20e:	681b      	ldr	r3, [r3, #0]
 800b210:	f010 0f01 	tst.w	r0, #1
 800b214:	bf14      	ite	ne
 800b216:	801a      	strhne	r2, [r3, #0]
 800b218:	601a      	streq	r2, [r3, #0]
 800b21a:	e6e4      	b.n	800afe6 <__svfiscanf_r+0x66>
 800b21c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b21e:	07d8      	lsls	r0, r3, #31
 800b220:	d405      	bmi.n	800b22e <__svfiscanf_r+0x2ae>
 800b222:	89a3      	ldrh	r3, [r4, #12]
 800b224:	0599      	lsls	r1, r3, #22
 800b226:	d402      	bmi.n	800b22e <__svfiscanf_r+0x2ae>
 800b228:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b22a:	f7fe fe99 	bl	8009f60 <__retarget_lock_release_recursive>
 800b22e:	f04f 30ff 	mov.w	r0, #4294967295
 800b232:	e79a      	b.n	800b16a <__svfiscanf_r+0x1ea>
 800b234:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800b236:	4621      	mov	r1, r4
 800b238:	4630      	mov	r0, r6
 800b23a:	4798      	blx	r3
 800b23c:	2800      	cmp	r0, #0
 800b23e:	d0aa      	beq.n	800b196 <__svfiscanf_r+0x216>
 800b240:	e786      	b.n	800b150 <__svfiscanf_r+0x1d0>
 800b242:	bf00      	nop
 800b244:	0800b88d 	.word	0x0800b88d
 800b248:	0800b5d5 	.word	0x0800b5d5
 800b24c:	0800cd99 	.word	0x0800cd99
 800b250:	0800d152 	.word	0x0800d152
 800b254:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800b256:	3201      	adds	r2, #1
 800b258:	9245      	str	r2, [sp, #276]	; 0x114
 800b25a:	6862      	ldr	r2, [r4, #4]
 800b25c:	3a01      	subs	r2, #1
 800b25e:	2a00      	cmp	r2, #0
 800b260:	6062      	str	r2, [r4, #4]
 800b262:	dd02      	ble.n	800b26a <__svfiscanf_r+0x2ea>
 800b264:	3301      	adds	r3, #1
 800b266:	6023      	str	r3, [r4, #0]
 800b268:	e798      	b.n	800b19c <__svfiscanf_r+0x21c>
 800b26a:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800b26c:	4621      	mov	r1, r4
 800b26e:	4630      	mov	r0, r6
 800b270:	4798      	blx	r3
 800b272:	2800      	cmp	r0, #0
 800b274:	d092      	beq.n	800b19c <__svfiscanf_r+0x21c>
 800b276:	e76b      	b.n	800b150 <__svfiscanf_r+0x1d0>
 800b278:	2b04      	cmp	r3, #4
 800b27a:	dc06      	bgt.n	800b28a <__svfiscanf_r+0x30a>
 800b27c:	466b      	mov	r3, sp
 800b27e:	4622      	mov	r2, r4
 800b280:	a941      	add	r1, sp, #260	; 0x104
 800b282:	4630      	mov	r0, r6
 800b284:	f000 f8a4 	bl	800b3d0 <_scanf_i>
 800b288:	e796      	b.n	800b1b8 <__svfiscanf_r+0x238>
 800b28a:	4b0f      	ldr	r3, [pc, #60]	; (800b2c8 <__svfiscanf_r+0x348>)
 800b28c:	2b00      	cmp	r3, #0
 800b28e:	f43f aeaa 	beq.w	800afe6 <__svfiscanf_r+0x66>
 800b292:	466b      	mov	r3, sp
 800b294:	4622      	mov	r2, r4
 800b296:	a941      	add	r1, sp, #260	; 0x104
 800b298:	4630      	mov	r0, r6
 800b29a:	f7fb fedd 	bl	8007058 <_scanf_float>
 800b29e:	e78b      	b.n	800b1b8 <__svfiscanf_r+0x238>
 800b2a0:	89a3      	ldrh	r3, [r4, #12]
 800b2a2:	0599      	lsls	r1, r3, #22
 800b2a4:	f53f af58 	bmi.w	800b158 <__svfiscanf_r+0x1d8>
 800b2a8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b2aa:	f7fe fe59 	bl	8009f60 <__retarget_lock_release_recursive>
 800b2ae:	e753      	b.n	800b158 <__svfiscanf_r+0x1d8>
 800b2b0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b2b2:	07da      	lsls	r2, r3, #31
 800b2b4:	d405      	bmi.n	800b2c2 <__svfiscanf_r+0x342>
 800b2b6:	89a3      	ldrh	r3, [r4, #12]
 800b2b8:	059b      	lsls	r3, r3, #22
 800b2ba:	d402      	bmi.n	800b2c2 <__svfiscanf_r+0x342>
 800b2bc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b2be:	f7fe fe4f 	bl	8009f60 <__retarget_lock_release_recursive>
 800b2c2:	9844      	ldr	r0, [sp, #272]	; 0x110
 800b2c4:	e751      	b.n	800b16a <__svfiscanf_r+0x1ea>
 800b2c6:	bf00      	nop
 800b2c8:	08007059 	.word	0x08007059

0800b2cc <_vfiscanf_r>:
 800b2cc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b2ce:	460c      	mov	r4, r1
 800b2d0:	4605      	mov	r5, r0
 800b2d2:	b138      	cbz	r0, 800b2e4 <_vfiscanf_r+0x18>
 800b2d4:	6981      	ldr	r1, [r0, #24]
 800b2d6:	b929      	cbnz	r1, 800b2e4 <_vfiscanf_r+0x18>
 800b2d8:	e9cd 2300 	strd	r2, r3, [sp]
 800b2dc:	f7fe f9fe 	bl	80096dc <__sinit>
 800b2e0:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b2e4:	490a      	ldr	r1, [pc, #40]	; (800b310 <_vfiscanf_r+0x44>)
 800b2e6:	428c      	cmp	r4, r1
 800b2e8:	d107      	bne.n	800b2fa <_vfiscanf_r+0x2e>
 800b2ea:	686c      	ldr	r4, [r5, #4]
 800b2ec:	4621      	mov	r1, r4
 800b2ee:	4628      	mov	r0, r5
 800b2f0:	b003      	add	sp, #12
 800b2f2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b2f6:	f7ff be43 	b.w	800af80 <__svfiscanf_r>
 800b2fa:	4906      	ldr	r1, [pc, #24]	; (800b314 <_vfiscanf_r+0x48>)
 800b2fc:	428c      	cmp	r4, r1
 800b2fe:	d101      	bne.n	800b304 <_vfiscanf_r+0x38>
 800b300:	68ac      	ldr	r4, [r5, #8]
 800b302:	e7f3      	b.n	800b2ec <_vfiscanf_r+0x20>
 800b304:	4904      	ldr	r1, [pc, #16]	; (800b318 <_vfiscanf_r+0x4c>)
 800b306:	428c      	cmp	r4, r1
 800b308:	bf08      	it	eq
 800b30a:	68ec      	ldreq	r4, [r5, #12]
 800b30c:	e7ee      	b.n	800b2ec <_vfiscanf_r+0x20>
 800b30e:	bf00      	nop
 800b310:	0800cf34 	.word	0x0800cf34
 800b314:	0800cf54 	.word	0x0800cf54
 800b318:	0800cf14 	.word	0x0800cf14

0800b31c <_scanf_chars>:
 800b31c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b320:	4615      	mov	r5, r2
 800b322:	688a      	ldr	r2, [r1, #8]
 800b324:	4680      	mov	r8, r0
 800b326:	460c      	mov	r4, r1
 800b328:	b932      	cbnz	r2, 800b338 <_scanf_chars+0x1c>
 800b32a:	698a      	ldr	r2, [r1, #24]
 800b32c:	2a00      	cmp	r2, #0
 800b32e:	bf0c      	ite	eq
 800b330:	2201      	moveq	r2, #1
 800b332:	f04f 32ff 	movne.w	r2, #4294967295
 800b336:	608a      	str	r2, [r1, #8]
 800b338:	6822      	ldr	r2, [r4, #0]
 800b33a:	f8df 9090 	ldr.w	r9, [pc, #144]	; 800b3cc <_scanf_chars+0xb0>
 800b33e:	06d1      	lsls	r1, r2, #27
 800b340:	bf5f      	itttt	pl
 800b342:	681a      	ldrpl	r2, [r3, #0]
 800b344:	1d11      	addpl	r1, r2, #4
 800b346:	6019      	strpl	r1, [r3, #0]
 800b348:	6816      	ldrpl	r6, [r2, #0]
 800b34a:	2700      	movs	r7, #0
 800b34c:	69a0      	ldr	r0, [r4, #24]
 800b34e:	b188      	cbz	r0, 800b374 <_scanf_chars+0x58>
 800b350:	2801      	cmp	r0, #1
 800b352:	d107      	bne.n	800b364 <_scanf_chars+0x48>
 800b354:	682a      	ldr	r2, [r5, #0]
 800b356:	7811      	ldrb	r1, [r2, #0]
 800b358:	6962      	ldr	r2, [r4, #20]
 800b35a:	5c52      	ldrb	r2, [r2, r1]
 800b35c:	b952      	cbnz	r2, 800b374 <_scanf_chars+0x58>
 800b35e:	2f00      	cmp	r7, #0
 800b360:	d031      	beq.n	800b3c6 <_scanf_chars+0xaa>
 800b362:	e022      	b.n	800b3aa <_scanf_chars+0x8e>
 800b364:	2802      	cmp	r0, #2
 800b366:	d120      	bne.n	800b3aa <_scanf_chars+0x8e>
 800b368:	682b      	ldr	r3, [r5, #0]
 800b36a:	781b      	ldrb	r3, [r3, #0]
 800b36c:	f813 3009 	ldrb.w	r3, [r3, r9]
 800b370:	071b      	lsls	r3, r3, #28
 800b372:	d41a      	bmi.n	800b3aa <_scanf_chars+0x8e>
 800b374:	6823      	ldr	r3, [r4, #0]
 800b376:	06da      	lsls	r2, r3, #27
 800b378:	bf5e      	ittt	pl
 800b37a:	682b      	ldrpl	r3, [r5, #0]
 800b37c:	781b      	ldrbpl	r3, [r3, #0]
 800b37e:	f806 3b01 	strbpl.w	r3, [r6], #1
 800b382:	682a      	ldr	r2, [r5, #0]
 800b384:	686b      	ldr	r3, [r5, #4]
 800b386:	3201      	adds	r2, #1
 800b388:	602a      	str	r2, [r5, #0]
 800b38a:	68a2      	ldr	r2, [r4, #8]
 800b38c:	3b01      	subs	r3, #1
 800b38e:	3a01      	subs	r2, #1
 800b390:	606b      	str	r3, [r5, #4]
 800b392:	3701      	adds	r7, #1
 800b394:	60a2      	str	r2, [r4, #8]
 800b396:	b142      	cbz	r2, 800b3aa <_scanf_chars+0x8e>
 800b398:	2b00      	cmp	r3, #0
 800b39a:	dcd7      	bgt.n	800b34c <_scanf_chars+0x30>
 800b39c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800b3a0:	4629      	mov	r1, r5
 800b3a2:	4640      	mov	r0, r8
 800b3a4:	4798      	blx	r3
 800b3a6:	2800      	cmp	r0, #0
 800b3a8:	d0d0      	beq.n	800b34c <_scanf_chars+0x30>
 800b3aa:	6823      	ldr	r3, [r4, #0]
 800b3ac:	f013 0310 	ands.w	r3, r3, #16
 800b3b0:	d105      	bne.n	800b3be <_scanf_chars+0xa2>
 800b3b2:	68e2      	ldr	r2, [r4, #12]
 800b3b4:	3201      	adds	r2, #1
 800b3b6:	60e2      	str	r2, [r4, #12]
 800b3b8:	69a2      	ldr	r2, [r4, #24]
 800b3ba:	b102      	cbz	r2, 800b3be <_scanf_chars+0xa2>
 800b3bc:	7033      	strb	r3, [r6, #0]
 800b3be:	6923      	ldr	r3, [r4, #16]
 800b3c0:	443b      	add	r3, r7
 800b3c2:	6123      	str	r3, [r4, #16]
 800b3c4:	2000      	movs	r0, #0
 800b3c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b3ca:	bf00      	nop
 800b3cc:	0800cd99 	.word	0x0800cd99

0800b3d0 <_scanf_i>:
 800b3d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b3d4:	4698      	mov	r8, r3
 800b3d6:	4b76      	ldr	r3, [pc, #472]	; (800b5b0 <_scanf_i+0x1e0>)
 800b3d8:	460c      	mov	r4, r1
 800b3da:	4682      	mov	sl, r0
 800b3dc:	4616      	mov	r6, r2
 800b3de:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800b3e2:	b087      	sub	sp, #28
 800b3e4:	ab03      	add	r3, sp, #12
 800b3e6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800b3ea:	4b72      	ldr	r3, [pc, #456]	; (800b5b4 <_scanf_i+0x1e4>)
 800b3ec:	69a1      	ldr	r1, [r4, #24]
 800b3ee:	4a72      	ldr	r2, [pc, #456]	; (800b5b8 <_scanf_i+0x1e8>)
 800b3f0:	2903      	cmp	r1, #3
 800b3f2:	bf18      	it	ne
 800b3f4:	461a      	movne	r2, r3
 800b3f6:	68a3      	ldr	r3, [r4, #8]
 800b3f8:	9201      	str	r2, [sp, #4]
 800b3fa:	1e5a      	subs	r2, r3, #1
 800b3fc:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800b400:	bf88      	it	hi
 800b402:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800b406:	4627      	mov	r7, r4
 800b408:	bf82      	ittt	hi
 800b40a:	eb03 0905 	addhi.w	r9, r3, r5
 800b40e:	f240 135d 	movwhi	r3, #349	; 0x15d
 800b412:	60a3      	strhi	r3, [r4, #8]
 800b414:	f857 3b1c 	ldr.w	r3, [r7], #28
 800b418:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 800b41c:	bf98      	it	ls
 800b41e:	f04f 0900 	movls.w	r9, #0
 800b422:	6023      	str	r3, [r4, #0]
 800b424:	463d      	mov	r5, r7
 800b426:	f04f 0b00 	mov.w	fp, #0
 800b42a:	6831      	ldr	r1, [r6, #0]
 800b42c:	ab03      	add	r3, sp, #12
 800b42e:	7809      	ldrb	r1, [r1, #0]
 800b430:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 800b434:	2202      	movs	r2, #2
 800b436:	f7f4 fed3 	bl	80001e0 <memchr>
 800b43a:	b328      	cbz	r0, 800b488 <_scanf_i+0xb8>
 800b43c:	f1bb 0f01 	cmp.w	fp, #1
 800b440:	d159      	bne.n	800b4f6 <_scanf_i+0x126>
 800b442:	6862      	ldr	r2, [r4, #4]
 800b444:	b92a      	cbnz	r2, 800b452 <_scanf_i+0x82>
 800b446:	6822      	ldr	r2, [r4, #0]
 800b448:	2308      	movs	r3, #8
 800b44a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b44e:	6063      	str	r3, [r4, #4]
 800b450:	6022      	str	r2, [r4, #0]
 800b452:	6822      	ldr	r2, [r4, #0]
 800b454:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 800b458:	6022      	str	r2, [r4, #0]
 800b45a:	68a2      	ldr	r2, [r4, #8]
 800b45c:	1e51      	subs	r1, r2, #1
 800b45e:	60a1      	str	r1, [r4, #8]
 800b460:	b192      	cbz	r2, 800b488 <_scanf_i+0xb8>
 800b462:	6832      	ldr	r2, [r6, #0]
 800b464:	1c51      	adds	r1, r2, #1
 800b466:	6031      	str	r1, [r6, #0]
 800b468:	7812      	ldrb	r2, [r2, #0]
 800b46a:	f805 2b01 	strb.w	r2, [r5], #1
 800b46e:	6872      	ldr	r2, [r6, #4]
 800b470:	3a01      	subs	r2, #1
 800b472:	2a00      	cmp	r2, #0
 800b474:	6072      	str	r2, [r6, #4]
 800b476:	dc07      	bgt.n	800b488 <_scanf_i+0xb8>
 800b478:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 800b47c:	4631      	mov	r1, r6
 800b47e:	4650      	mov	r0, sl
 800b480:	4790      	blx	r2
 800b482:	2800      	cmp	r0, #0
 800b484:	f040 8085 	bne.w	800b592 <_scanf_i+0x1c2>
 800b488:	f10b 0b01 	add.w	fp, fp, #1
 800b48c:	f1bb 0f03 	cmp.w	fp, #3
 800b490:	d1cb      	bne.n	800b42a <_scanf_i+0x5a>
 800b492:	6863      	ldr	r3, [r4, #4]
 800b494:	b90b      	cbnz	r3, 800b49a <_scanf_i+0xca>
 800b496:	230a      	movs	r3, #10
 800b498:	6063      	str	r3, [r4, #4]
 800b49a:	6863      	ldr	r3, [r4, #4]
 800b49c:	4947      	ldr	r1, [pc, #284]	; (800b5bc <_scanf_i+0x1ec>)
 800b49e:	6960      	ldr	r0, [r4, #20]
 800b4a0:	1ac9      	subs	r1, r1, r3
 800b4a2:	f000 f929 	bl	800b6f8 <__sccl>
 800b4a6:	f04f 0b00 	mov.w	fp, #0
 800b4aa:	68a3      	ldr	r3, [r4, #8]
 800b4ac:	6822      	ldr	r2, [r4, #0]
 800b4ae:	2b00      	cmp	r3, #0
 800b4b0:	d03d      	beq.n	800b52e <_scanf_i+0x15e>
 800b4b2:	6831      	ldr	r1, [r6, #0]
 800b4b4:	6960      	ldr	r0, [r4, #20]
 800b4b6:	f891 c000 	ldrb.w	ip, [r1]
 800b4ba:	f810 000c 	ldrb.w	r0, [r0, ip]
 800b4be:	2800      	cmp	r0, #0
 800b4c0:	d035      	beq.n	800b52e <_scanf_i+0x15e>
 800b4c2:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 800b4c6:	d124      	bne.n	800b512 <_scanf_i+0x142>
 800b4c8:	0510      	lsls	r0, r2, #20
 800b4ca:	d522      	bpl.n	800b512 <_scanf_i+0x142>
 800b4cc:	f10b 0b01 	add.w	fp, fp, #1
 800b4d0:	f1b9 0f00 	cmp.w	r9, #0
 800b4d4:	d003      	beq.n	800b4de <_scanf_i+0x10e>
 800b4d6:	3301      	adds	r3, #1
 800b4d8:	f109 39ff 	add.w	r9, r9, #4294967295
 800b4dc:	60a3      	str	r3, [r4, #8]
 800b4de:	6873      	ldr	r3, [r6, #4]
 800b4e0:	3b01      	subs	r3, #1
 800b4e2:	2b00      	cmp	r3, #0
 800b4e4:	6073      	str	r3, [r6, #4]
 800b4e6:	dd1b      	ble.n	800b520 <_scanf_i+0x150>
 800b4e8:	6833      	ldr	r3, [r6, #0]
 800b4ea:	3301      	adds	r3, #1
 800b4ec:	6033      	str	r3, [r6, #0]
 800b4ee:	68a3      	ldr	r3, [r4, #8]
 800b4f0:	3b01      	subs	r3, #1
 800b4f2:	60a3      	str	r3, [r4, #8]
 800b4f4:	e7d9      	b.n	800b4aa <_scanf_i+0xda>
 800b4f6:	f1bb 0f02 	cmp.w	fp, #2
 800b4fa:	d1ae      	bne.n	800b45a <_scanf_i+0x8a>
 800b4fc:	6822      	ldr	r2, [r4, #0]
 800b4fe:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 800b502:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800b506:	d1bf      	bne.n	800b488 <_scanf_i+0xb8>
 800b508:	2310      	movs	r3, #16
 800b50a:	6063      	str	r3, [r4, #4]
 800b50c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800b510:	e7a2      	b.n	800b458 <_scanf_i+0x88>
 800b512:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 800b516:	6022      	str	r2, [r4, #0]
 800b518:	780b      	ldrb	r3, [r1, #0]
 800b51a:	f805 3b01 	strb.w	r3, [r5], #1
 800b51e:	e7de      	b.n	800b4de <_scanf_i+0x10e>
 800b520:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800b524:	4631      	mov	r1, r6
 800b526:	4650      	mov	r0, sl
 800b528:	4798      	blx	r3
 800b52a:	2800      	cmp	r0, #0
 800b52c:	d0df      	beq.n	800b4ee <_scanf_i+0x11e>
 800b52e:	6823      	ldr	r3, [r4, #0]
 800b530:	05db      	lsls	r3, r3, #23
 800b532:	d50d      	bpl.n	800b550 <_scanf_i+0x180>
 800b534:	42bd      	cmp	r5, r7
 800b536:	d909      	bls.n	800b54c <_scanf_i+0x17c>
 800b538:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800b53c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800b540:	4632      	mov	r2, r6
 800b542:	4650      	mov	r0, sl
 800b544:	4798      	blx	r3
 800b546:	f105 39ff 	add.w	r9, r5, #4294967295
 800b54a:	464d      	mov	r5, r9
 800b54c:	42bd      	cmp	r5, r7
 800b54e:	d02d      	beq.n	800b5ac <_scanf_i+0x1dc>
 800b550:	6822      	ldr	r2, [r4, #0]
 800b552:	f012 0210 	ands.w	r2, r2, #16
 800b556:	d113      	bne.n	800b580 <_scanf_i+0x1b0>
 800b558:	702a      	strb	r2, [r5, #0]
 800b55a:	6863      	ldr	r3, [r4, #4]
 800b55c:	9e01      	ldr	r6, [sp, #4]
 800b55e:	4639      	mov	r1, r7
 800b560:	4650      	mov	r0, sl
 800b562:	47b0      	blx	r6
 800b564:	6821      	ldr	r1, [r4, #0]
 800b566:	f8d8 3000 	ldr.w	r3, [r8]
 800b56a:	f011 0f20 	tst.w	r1, #32
 800b56e:	d013      	beq.n	800b598 <_scanf_i+0x1c8>
 800b570:	1d1a      	adds	r2, r3, #4
 800b572:	f8c8 2000 	str.w	r2, [r8]
 800b576:	681b      	ldr	r3, [r3, #0]
 800b578:	6018      	str	r0, [r3, #0]
 800b57a:	68e3      	ldr	r3, [r4, #12]
 800b57c:	3301      	adds	r3, #1
 800b57e:	60e3      	str	r3, [r4, #12]
 800b580:	1bed      	subs	r5, r5, r7
 800b582:	44ab      	add	fp, r5
 800b584:	6925      	ldr	r5, [r4, #16]
 800b586:	445d      	add	r5, fp
 800b588:	6125      	str	r5, [r4, #16]
 800b58a:	2000      	movs	r0, #0
 800b58c:	b007      	add	sp, #28
 800b58e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b592:	f04f 0b00 	mov.w	fp, #0
 800b596:	e7ca      	b.n	800b52e <_scanf_i+0x15e>
 800b598:	1d1a      	adds	r2, r3, #4
 800b59a:	f8c8 2000 	str.w	r2, [r8]
 800b59e:	681b      	ldr	r3, [r3, #0]
 800b5a0:	f011 0f01 	tst.w	r1, #1
 800b5a4:	bf14      	ite	ne
 800b5a6:	8018      	strhne	r0, [r3, #0]
 800b5a8:	6018      	streq	r0, [r3, #0]
 800b5aa:	e7e6      	b.n	800b57a <_scanf_i+0x1aa>
 800b5ac:	2001      	movs	r0, #1
 800b5ae:	e7ed      	b.n	800b58c <_scanf_i+0x1bc>
 800b5b0:	0800c1a4 	.word	0x0800c1a4
 800b5b4:	080085b9 	.word	0x080085b9
 800b5b8:	080084bd 	.word	0x080084bd
 800b5bc:	0800d176 	.word	0x0800d176

0800b5c0 <lflush>:
 800b5c0:	8983      	ldrh	r3, [r0, #12]
 800b5c2:	f003 0309 	and.w	r3, r3, #9
 800b5c6:	2b09      	cmp	r3, #9
 800b5c8:	d101      	bne.n	800b5ce <lflush+0xe>
 800b5ca:	f7fe b81d 	b.w	8009608 <fflush>
 800b5ce:	2000      	movs	r0, #0
 800b5d0:	4770      	bx	lr
	...

0800b5d4 <__srefill_r>:
 800b5d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b5d6:	460c      	mov	r4, r1
 800b5d8:	4605      	mov	r5, r0
 800b5da:	b118      	cbz	r0, 800b5e4 <__srefill_r+0x10>
 800b5dc:	6983      	ldr	r3, [r0, #24]
 800b5de:	b90b      	cbnz	r3, 800b5e4 <__srefill_r+0x10>
 800b5e0:	f7fe f87c 	bl	80096dc <__sinit>
 800b5e4:	4b3b      	ldr	r3, [pc, #236]	; (800b6d4 <__srefill_r+0x100>)
 800b5e6:	429c      	cmp	r4, r3
 800b5e8:	d10a      	bne.n	800b600 <__srefill_r+0x2c>
 800b5ea:	686c      	ldr	r4, [r5, #4]
 800b5ec:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b5f0:	2300      	movs	r3, #0
 800b5f2:	6063      	str	r3, [r4, #4]
 800b5f4:	89a3      	ldrh	r3, [r4, #12]
 800b5f6:	069e      	lsls	r6, r3, #26
 800b5f8:	d50c      	bpl.n	800b614 <__srefill_r+0x40>
 800b5fa:	f04f 30ff 	mov.w	r0, #4294967295
 800b5fe:	e066      	b.n	800b6ce <__srefill_r+0xfa>
 800b600:	4b35      	ldr	r3, [pc, #212]	; (800b6d8 <__srefill_r+0x104>)
 800b602:	429c      	cmp	r4, r3
 800b604:	d101      	bne.n	800b60a <__srefill_r+0x36>
 800b606:	68ac      	ldr	r4, [r5, #8]
 800b608:	e7f0      	b.n	800b5ec <__srefill_r+0x18>
 800b60a:	4b34      	ldr	r3, [pc, #208]	; (800b6dc <__srefill_r+0x108>)
 800b60c:	429c      	cmp	r4, r3
 800b60e:	bf08      	it	eq
 800b610:	68ec      	ldreq	r4, [r5, #12]
 800b612:	e7eb      	b.n	800b5ec <__srefill_r+0x18>
 800b614:	0758      	lsls	r0, r3, #29
 800b616:	d448      	bmi.n	800b6aa <__srefill_r+0xd6>
 800b618:	06d9      	lsls	r1, r3, #27
 800b61a:	d405      	bmi.n	800b628 <__srefill_r+0x54>
 800b61c:	2309      	movs	r3, #9
 800b61e:	602b      	str	r3, [r5, #0]
 800b620:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800b624:	81a3      	strh	r3, [r4, #12]
 800b626:	e7e8      	b.n	800b5fa <__srefill_r+0x26>
 800b628:	071a      	lsls	r2, r3, #28
 800b62a:	d50b      	bpl.n	800b644 <__srefill_r+0x70>
 800b62c:	4621      	mov	r1, r4
 800b62e:	4628      	mov	r0, r5
 800b630:	f7fd ffae 	bl	8009590 <_fflush_r>
 800b634:	2800      	cmp	r0, #0
 800b636:	d1e0      	bne.n	800b5fa <__srefill_r+0x26>
 800b638:	89a3      	ldrh	r3, [r4, #12]
 800b63a:	60a0      	str	r0, [r4, #8]
 800b63c:	f023 0308 	bic.w	r3, r3, #8
 800b640:	81a3      	strh	r3, [r4, #12]
 800b642:	61a0      	str	r0, [r4, #24]
 800b644:	89a3      	ldrh	r3, [r4, #12]
 800b646:	f043 0304 	orr.w	r3, r3, #4
 800b64a:	81a3      	strh	r3, [r4, #12]
 800b64c:	6923      	ldr	r3, [r4, #16]
 800b64e:	b91b      	cbnz	r3, 800b658 <__srefill_r+0x84>
 800b650:	4621      	mov	r1, r4
 800b652:	4628      	mov	r0, r5
 800b654:	f7fe fcaa 	bl	8009fac <__smakebuf_r>
 800b658:	89a6      	ldrh	r6, [r4, #12]
 800b65a:	f9b4 700c 	ldrsh.w	r7, [r4, #12]
 800b65e:	07b3      	lsls	r3, r6, #30
 800b660:	d00f      	beq.n	800b682 <__srefill_r+0xae>
 800b662:	2301      	movs	r3, #1
 800b664:	81a3      	strh	r3, [r4, #12]
 800b666:	4b1e      	ldr	r3, [pc, #120]	; (800b6e0 <__srefill_r+0x10c>)
 800b668:	491e      	ldr	r1, [pc, #120]	; (800b6e4 <__srefill_r+0x110>)
 800b66a:	6818      	ldr	r0, [r3, #0]
 800b66c:	f006 0609 	and.w	r6, r6, #9
 800b670:	f7fe f8c4 	bl	80097fc <_fwalk>
 800b674:	2e09      	cmp	r6, #9
 800b676:	81a7      	strh	r7, [r4, #12]
 800b678:	d103      	bne.n	800b682 <__srefill_r+0xae>
 800b67a:	4621      	mov	r1, r4
 800b67c:	4628      	mov	r0, r5
 800b67e:	f7fd ff01 	bl	8009484 <__sflush_r>
 800b682:	6922      	ldr	r2, [r4, #16]
 800b684:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800b686:	6963      	ldr	r3, [r4, #20]
 800b688:	6a21      	ldr	r1, [r4, #32]
 800b68a:	6022      	str	r2, [r4, #0]
 800b68c:	4628      	mov	r0, r5
 800b68e:	47b0      	blx	r6
 800b690:	2800      	cmp	r0, #0
 800b692:	6060      	str	r0, [r4, #4]
 800b694:	dc1c      	bgt.n	800b6d0 <__srefill_r+0xfc>
 800b696:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b69a:	bf17      	itett	ne
 800b69c:	2200      	movne	r2, #0
 800b69e:	f043 0320 	orreq.w	r3, r3, #32
 800b6a2:	6062      	strne	r2, [r4, #4]
 800b6a4:	f043 0340 	orrne.w	r3, r3, #64	; 0x40
 800b6a8:	e7bc      	b.n	800b624 <__srefill_r+0x50>
 800b6aa:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b6ac:	2900      	cmp	r1, #0
 800b6ae:	d0cd      	beq.n	800b64c <__srefill_r+0x78>
 800b6b0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b6b4:	4299      	cmp	r1, r3
 800b6b6:	d002      	beq.n	800b6be <__srefill_r+0xea>
 800b6b8:	4628      	mov	r0, r5
 800b6ba:	f7fa ff83 	bl	80065c4 <_free_r>
 800b6be:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b6c0:	6063      	str	r3, [r4, #4]
 800b6c2:	2000      	movs	r0, #0
 800b6c4:	6360      	str	r0, [r4, #52]	; 0x34
 800b6c6:	2b00      	cmp	r3, #0
 800b6c8:	d0c0      	beq.n	800b64c <__srefill_r+0x78>
 800b6ca:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800b6cc:	6023      	str	r3, [r4, #0]
 800b6ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b6d0:	2000      	movs	r0, #0
 800b6d2:	e7fc      	b.n	800b6ce <__srefill_r+0xfa>
 800b6d4:	0800cf34 	.word	0x0800cf34
 800b6d8:	0800cf54 	.word	0x0800cf54
 800b6dc:	0800cf14 	.word	0x0800cf14
 800b6e0:	0800cc5c 	.word	0x0800cc5c
 800b6e4:	0800b5c1 	.word	0x0800b5c1

0800b6e8 <nan>:
 800b6e8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800b6f0 <nan+0x8>
 800b6ec:	4770      	bx	lr
 800b6ee:	bf00      	nop
 800b6f0:	00000000 	.word	0x00000000
 800b6f4:	7ff80000 	.word	0x7ff80000

0800b6f8 <__sccl>:
 800b6f8:	b570      	push	{r4, r5, r6, lr}
 800b6fa:	780b      	ldrb	r3, [r1, #0]
 800b6fc:	4604      	mov	r4, r0
 800b6fe:	2b5e      	cmp	r3, #94	; 0x5e
 800b700:	bf0b      	itete	eq
 800b702:	784b      	ldrbeq	r3, [r1, #1]
 800b704:	1c48      	addne	r0, r1, #1
 800b706:	1c88      	addeq	r0, r1, #2
 800b708:	2200      	movne	r2, #0
 800b70a:	bf08      	it	eq
 800b70c:	2201      	moveq	r2, #1
 800b70e:	1e61      	subs	r1, r4, #1
 800b710:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 800b714:	f801 2f01 	strb.w	r2, [r1, #1]!
 800b718:	42a9      	cmp	r1, r5
 800b71a:	d1fb      	bne.n	800b714 <__sccl+0x1c>
 800b71c:	b90b      	cbnz	r3, 800b722 <__sccl+0x2a>
 800b71e:	3801      	subs	r0, #1
 800b720:	bd70      	pop	{r4, r5, r6, pc}
 800b722:	f082 0201 	eor.w	r2, r2, #1
 800b726:	54e2      	strb	r2, [r4, r3]
 800b728:	4605      	mov	r5, r0
 800b72a:	4628      	mov	r0, r5
 800b72c:	f810 1b01 	ldrb.w	r1, [r0], #1
 800b730:	292d      	cmp	r1, #45	; 0x2d
 800b732:	d006      	beq.n	800b742 <__sccl+0x4a>
 800b734:	295d      	cmp	r1, #93	; 0x5d
 800b736:	d0f3      	beq.n	800b720 <__sccl+0x28>
 800b738:	b909      	cbnz	r1, 800b73e <__sccl+0x46>
 800b73a:	4628      	mov	r0, r5
 800b73c:	e7f0      	b.n	800b720 <__sccl+0x28>
 800b73e:	460b      	mov	r3, r1
 800b740:	e7f1      	b.n	800b726 <__sccl+0x2e>
 800b742:	786e      	ldrb	r6, [r5, #1]
 800b744:	2e5d      	cmp	r6, #93	; 0x5d
 800b746:	d0fa      	beq.n	800b73e <__sccl+0x46>
 800b748:	42b3      	cmp	r3, r6
 800b74a:	dcf8      	bgt.n	800b73e <__sccl+0x46>
 800b74c:	3502      	adds	r5, #2
 800b74e:	4619      	mov	r1, r3
 800b750:	3101      	adds	r1, #1
 800b752:	428e      	cmp	r6, r1
 800b754:	5462      	strb	r2, [r4, r1]
 800b756:	dcfb      	bgt.n	800b750 <__sccl+0x58>
 800b758:	1af1      	subs	r1, r6, r3
 800b75a:	3901      	subs	r1, #1
 800b75c:	1c58      	adds	r0, r3, #1
 800b75e:	42b3      	cmp	r3, r6
 800b760:	bfa8      	it	ge
 800b762:	2100      	movge	r1, #0
 800b764:	1843      	adds	r3, r0, r1
 800b766:	e7e0      	b.n	800b72a <__sccl+0x32>

0800b768 <__sread>:
 800b768:	b510      	push	{r4, lr}
 800b76a:	460c      	mov	r4, r1
 800b76c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b770:	f000 f9da 	bl	800bb28 <_read_r>
 800b774:	2800      	cmp	r0, #0
 800b776:	bfab      	itete	ge
 800b778:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800b77a:	89a3      	ldrhlt	r3, [r4, #12]
 800b77c:	181b      	addge	r3, r3, r0
 800b77e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800b782:	bfac      	ite	ge
 800b784:	6563      	strge	r3, [r4, #84]	; 0x54
 800b786:	81a3      	strhlt	r3, [r4, #12]
 800b788:	bd10      	pop	{r4, pc}

0800b78a <__swrite>:
 800b78a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b78e:	461f      	mov	r7, r3
 800b790:	898b      	ldrh	r3, [r1, #12]
 800b792:	05db      	lsls	r3, r3, #23
 800b794:	4605      	mov	r5, r0
 800b796:	460c      	mov	r4, r1
 800b798:	4616      	mov	r6, r2
 800b79a:	d505      	bpl.n	800b7a8 <__swrite+0x1e>
 800b79c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b7a0:	2302      	movs	r3, #2
 800b7a2:	2200      	movs	r2, #0
 800b7a4:	f000 f964 	bl	800ba70 <_lseek_r>
 800b7a8:	89a3      	ldrh	r3, [r4, #12]
 800b7aa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b7ae:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b7b2:	81a3      	strh	r3, [r4, #12]
 800b7b4:	4632      	mov	r2, r6
 800b7b6:	463b      	mov	r3, r7
 800b7b8:	4628      	mov	r0, r5
 800b7ba:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b7be:	f000 b90b 	b.w	800b9d8 <_write_r>

0800b7c2 <__sseek>:
 800b7c2:	b510      	push	{r4, lr}
 800b7c4:	460c      	mov	r4, r1
 800b7c6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b7ca:	f000 f951 	bl	800ba70 <_lseek_r>
 800b7ce:	1c43      	adds	r3, r0, #1
 800b7d0:	89a3      	ldrh	r3, [r4, #12]
 800b7d2:	bf15      	itete	ne
 800b7d4:	6560      	strne	r0, [r4, #84]	; 0x54
 800b7d6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800b7da:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800b7de:	81a3      	strheq	r3, [r4, #12]
 800b7e0:	bf18      	it	ne
 800b7e2:	81a3      	strhne	r3, [r4, #12]
 800b7e4:	bd10      	pop	{r4, pc}

0800b7e6 <__sclose>:
 800b7e6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b7ea:	f000 b90f 	b.w	800ba0c <_close_r>

0800b7ee <strncmp>:
 800b7ee:	b510      	push	{r4, lr}
 800b7f0:	b17a      	cbz	r2, 800b812 <strncmp+0x24>
 800b7f2:	4603      	mov	r3, r0
 800b7f4:	3901      	subs	r1, #1
 800b7f6:	1884      	adds	r4, r0, r2
 800b7f8:	f813 0b01 	ldrb.w	r0, [r3], #1
 800b7fc:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800b800:	4290      	cmp	r0, r2
 800b802:	d101      	bne.n	800b808 <strncmp+0x1a>
 800b804:	42a3      	cmp	r3, r4
 800b806:	d101      	bne.n	800b80c <strncmp+0x1e>
 800b808:	1a80      	subs	r0, r0, r2
 800b80a:	bd10      	pop	{r4, pc}
 800b80c:	2800      	cmp	r0, #0
 800b80e:	d1f3      	bne.n	800b7f8 <strncmp+0xa>
 800b810:	e7fa      	b.n	800b808 <strncmp+0x1a>
 800b812:	4610      	mov	r0, r2
 800b814:	e7f9      	b.n	800b80a <strncmp+0x1c>

0800b816 <__submore>:
 800b816:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b81a:	460c      	mov	r4, r1
 800b81c:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800b81e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b822:	4299      	cmp	r1, r3
 800b824:	d11d      	bne.n	800b862 <__submore+0x4c>
 800b826:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800b82a:	f7fa ff37 	bl	800669c <_malloc_r>
 800b82e:	b918      	cbnz	r0, 800b838 <__submore+0x22>
 800b830:	f04f 30ff 	mov.w	r0, #4294967295
 800b834:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b838:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b83c:	63a3      	str	r3, [r4, #56]	; 0x38
 800b83e:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 800b842:	6360      	str	r0, [r4, #52]	; 0x34
 800b844:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 800b848:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800b84c:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 800b850:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800b854:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 800b858:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 800b85c:	6020      	str	r0, [r4, #0]
 800b85e:	2000      	movs	r0, #0
 800b860:	e7e8      	b.n	800b834 <__submore+0x1e>
 800b862:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 800b864:	0077      	lsls	r7, r6, #1
 800b866:	463a      	mov	r2, r7
 800b868:	f000 f92e 	bl	800bac8 <_realloc_r>
 800b86c:	4605      	mov	r5, r0
 800b86e:	2800      	cmp	r0, #0
 800b870:	d0de      	beq.n	800b830 <__submore+0x1a>
 800b872:	eb00 0806 	add.w	r8, r0, r6
 800b876:	4601      	mov	r1, r0
 800b878:	4632      	mov	r2, r6
 800b87a:	4640      	mov	r0, r8
 800b87c:	f7fa fe8c 	bl	8006598 <memcpy>
 800b880:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 800b884:	f8c4 8000 	str.w	r8, [r4]
 800b888:	e7e9      	b.n	800b85e <__submore+0x48>
	...

0800b88c <_ungetc_r>:
 800b88c:	b570      	push	{r4, r5, r6, lr}
 800b88e:	4614      	mov	r4, r2
 800b890:	1c4a      	adds	r2, r1, #1
 800b892:	4606      	mov	r6, r0
 800b894:	460d      	mov	r5, r1
 800b896:	d103      	bne.n	800b8a0 <_ungetc_r+0x14>
 800b898:	f04f 35ff 	mov.w	r5, #4294967295
 800b89c:	4628      	mov	r0, r5
 800b89e:	bd70      	pop	{r4, r5, r6, pc}
 800b8a0:	b118      	cbz	r0, 800b8aa <_ungetc_r+0x1e>
 800b8a2:	6983      	ldr	r3, [r0, #24]
 800b8a4:	b90b      	cbnz	r3, 800b8aa <_ungetc_r+0x1e>
 800b8a6:	f7fd ff19 	bl	80096dc <__sinit>
 800b8aa:	4b41      	ldr	r3, [pc, #260]	; (800b9b0 <_ungetc_r+0x124>)
 800b8ac:	429c      	cmp	r4, r3
 800b8ae:	d11d      	bne.n	800b8ec <_ungetc_r+0x60>
 800b8b0:	6874      	ldr	r4, [r6, #4]
 800b8b2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b8b4:	07db      	lsls	r3, r3, #31
 800b8b6:	d405      	bmi.n	800b8c4 <_ungetc_r+0x38>
 800b8b8:	89a3      	ldrh	r3, [r4, #12]
 800b8ba:	0598      	lsls	r0, r3, #22
 800b8bc:	d402      	bmi.n	800b8c4 <_ungetc_r+0x38>
 800b8be:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b8c0:	f7fe fb4d 	bl	8009f5e <__retarget_lock_acquire_recursive>
 800b8c4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b8c8:	f023 0320 	bic.w	r3, r3, #32
 800b8cc:	0759      	lsls	r1, r3, #29
 800b8ce:	81a3      	strh	r3, [r4, #12]
 800b8d0:	b29a      	uxth	r2, r3
 800b8d2:	d42d      	bmi.n	800b930 <_ungetc_r+0xa4>
 800b8d4:	06d3      	lsls	r3, r2, #27
 800b8d6:	d413      	bmi.n	800b900 <_ungetc_r+0x74>
 800b8d8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b8da:	07dd      	lsls	r5, r3, #31
 800b8dc:	d4dc      	bmi.n	800b898 <_ungetc_r+0xc>
 800b8de:	f412 7f00 	tst.w	r2, #512	; 0x200
 800b8e2:	d1d9      	bne.n	800b898 <_ungetc_r+0xc>
 800b8e4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b8e6:	f7fe fb3b 	bl	8009f60 <__retarget_lock_release_recursive>
 800b8ea:	e7d5      	b.n	800b898 <_ungetc_r+0xc>
 800b8ec:	4b31      	ldr	r3, [pc, #196]	; (800b9b4 <_ungetc_r+0x128>)
 800b8ee:	429c      	cmp	r4, r3
 800b8f0:	d101      	bne.n	800b8f6 <_ungetc_r+0x6a>
 800b8f2:	68b4      	ldr	r4, [r6, #8]
 800b8f4:	e7dd      	b.n	800b8b2 <_ungetc_r+0x26>
 800b8f6:	4b30      	ldr	r3, [pc, #192]	; (800b9b8 <_ungetc_r+0x12c>)
 800b8f8:	429c      	cmp	r4, r3
 800b8fa:	bf08      	it	eq
 800b8fc:	68f4      	ldreq	r4, [r6, #12]
 800b8fe:	e7d8      	b.n	800b8b2 <_ungetc_r+0x26>
 800b900:	0710      	lsls	r0, r2, #28
 800b902:	d511      	bpl.n	800b928 <_ungetc_r+0x9c>
 800b904:	4621      	mov	r1, r4
 800b906:	4630      	mov	r0, r6
 800b908:	f7fd fe42 	bl	8009590 <_fflush_r>
 800b90c:	b130      	cbz	r0, 800b91c <_ungetc_r+0x90>
 800b90e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b910:	07d9      	lsls	r1, r3, #31
 800b912:	d4c1      	bmi.n	800b898 <_ungetc_r+0xc>
 800b914:	89a3      	ldrh	r3, [r4, #12]
 800b916:	f413 7f00 	tst.w	r3, #512	; 0x200
 800b91a:	e7e2      	b.n	800b8e2 <_ungetc_r+0x56>
 800b91c:	89a3      	ldrh	r3, [r4, #12]
 800b91e:	60a0      	str	r0, [r4, #8]
 800b920:	f023 0308 	bic.w	r3, r3, #8
 800b924:	81a3      	strh	r3, [r4, #12]
 800b926:	61a0      	str	r0, [r4, #24]
 800b928:	89a3      	ldrh	r3, [r4, #12]
 800b92a:	f043 0304 	orr.w	r3, r3, #4
 800b92e:	81a3      	strh	r3, [r4, #12]
 800b930:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b932:	6862      	ldr	r2, [r4, #4]
 800b934:	b2ed      	uxtb	r5, r5
 800b936:	b1d3      	cbz	r3, 800b96e <_ungetc_r+0xe2>
 800b938:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800b93a:	4293      	cmp	r3, r2
 800b93c:	dc05      	bgt.n	800b94a <_ungetc_r+0xbe>
 800b93e:	4621      	mov	r1, r4
 800b940:	4630      	mov	r0, r6
 800b942:	f7ff ff68 	bl	800b816 <__submore>
 800b946:	2800      	cmp	r0, #0
 800b948:	d1e1      	bne.n	800b90e <_ungetc_r+0x82>
 800b94a:	6823      	ldr	r3, [r4, #0]
 800b94c:	1e5a      	subs	r2, r3, #1
 800b94e:	6022      	str	r2, [r4, #0]
 800b950:	f803 5c01 	strb.w	r5, [r3, #-1]
 800b954:	6863      	ldr	r3, [r4, #4]
 800b956:	3301      	adds	r3, #1
 800b958:	6063      	str	r3, [r4, #4]
 800b95a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b95c:	07da      	lsls	r2, r3, #31
 800b95e:	d49d      	bmi.n	800b89c <_ungetc_r+0x10>
 800b960:	89a3      	ldrh	r3, [r4, #12]
 800b962:	059b      	lsls	r3, r3, #22
 800b964:	d49a      	bmi.n	800b89c <_ungetc_r+0x10>
 800b966:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b968:	f7fe fafa 	bl	8009f60 <__retarget_lock_release_recursive>
 800b96c:	e796      	b.n	800b89c <_ungetc_r+0x10>
 800b96e:	6e61      	ldr	r1, [r4, #100]	; 0x64
 800b970:	6920      	ldr	r0, [r4, #16]
 800b972:	6823      	ldr	r3, [r4, #0]
 800b974:	f001 0101 	and.w	r1, r1, #1
 800b978:	b160      	cbz	r0, 800b994 <_ungetc_r+0x108>
 800b97a:	4298      	cmp	r0, r3
 800b97c:	d20a      	bcs.n	800b994 <_ungetc_r+0x108>
 800b97e:	f813 0c01 	ldrb.w	r0, [r3, #-1]
 800b982:	42a8      	cmp	r0, r5
 800b984:	d106      	bne.n	800b994 <_ungetc_r+0x108>
 800b986:	3b01      	subs	r3, #1
 800b988:	3201      	adds	r2, #1
 800b98a:	6023      	str	r3, [r4, #0]
 800b98c:	6062      	str	r2, [r4, #4]
 800b98e:	2900      	cmp	r1, #0
 800b990:	d184      	bne.n	800b89c <_ungetc_r+0x10>
 800b992:	e7e5      	b.n	800b960 <_ungetc_r+0xd4>
 800b994:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 800b998:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b99c:	6363      	str	r3, [r4, #52]	; 0x34
 800b99e:	2303      	movs	r3, #3
 800b9a0:	63a3      	str	r3, [r4, #56]	; 0x38
 800b9a2:	4623      	mov	r3, r4
 800b9a4:	f803 5f46 	strb.w	r5, [r3, #70]!
 800b9a8:	6023      	str	r3, [r4, #0]
 800b9aa:	2301      	movs	r3, #1
 800b9ac:	6063      	str	r3, [r4, #4]
 800b9ae:	e7ee      	b.n	800b98e <_ungetc_r+0x102>
 800b9b0:	0800cf34 	.word	0x0800cf34
 800b9b4:	0800cf54 	.word	0x0800cf54
 800b9b8:	0800cf14 	.word	0x0800cf14

0800b9bc <__ascii_wctomb>:
 800b9bc:	b149      	cbz	r1, 800b9d2 <__ascii_wctomb+0x16>
 800b9be:	2aff      	cmp	r2, #255	; 0xff
 800b9c0:	bf85      	ittet	hi
 800b9c2:	238a      	movhi	r3, #138	; 0x8a
 800b9c4:	6003      	strhi	r3, [r0, #0]
 800b9c6:	700a      	strbls	r2, [r1, #0]
 800b9c8:	f04f 30ff 	movhi.w	r0, #4294967295
 800b9cc:	bf98      	it	ls
 800b9ce:	2001      	movls	r0, #1
 800b9d0:	4770      	bx	lr
 800b9d2:	4608      	mov	r0, r1
 800b9d4:	4770      	bx	lr
	...

0800b9d8 <_write_r>:
 800b9d8:	b538      	push	{r3, r4, r5, lr}
 800b9da:	4d07      	ldr	r5, [pc, #28]	; (800b9f8 <_write_r+0x20>)
 800b9dc:	4604      	mov	r4, r0
 800b9de:	4608      	mov	r0, r1
 800b9e0:	4611      	mov	r1, r2
 800b9e2:	2200      	movs	r2, #0
 800b9e4:	602a      	str	r2, [r5, #0]
 800b9e6:	461a      	mov	r2, r3
 800b9e8:	f7f7 f9e8 	bl	8002dbc <_write>
 800b9ec:	1c43      	adds	r3, r0, #1
 800b9ee:	d102      	bne.n	800b9f6 <_write_r+0x1e>
 800b9f0:	682b      	ldr	r3, [r5, #0]
 800b9f2:	b103      	cbz	r3, 800b9f6 <_write_r+0x1e>
 800b9f4:	6023      	str	r3, [r4, #0]
 800b9f6:	bd38      	pop	{r3, r4, r5, pc}
 800b9f8:	20000344 	.word	0x20000344

0800b9fc <abort>:
 800b9fc:	b508      	push	{r3, lr}
 800b9fe:	2006      	movs	r0, #6
 800ba00:	f000 f8cc 	bl	800bb9c <raise>
 800ba04:	2001      	movs	r0, #1
 800ba06:	f7f7 f9a9 	bl	8002d5c <_exit>
	...

0800ba0c <_close_r>:
 800ba0c:	b538      	push	{r3, r4, r5, lr}
 800ba0e:	4d06      	ldr	r5, [pc, #24]	; (800ba28 <_close_r+0x1c>)
 800ba10:	2300      	movs	r3, #0
 800ba12:	4604      	mov	r4, r0
 800ba14:	4608      	mov	r0, r1
 800ba16:	602b      	str	r3, [r5, #0]
 800ba18:	f7f7 f9f2 	bl	8002e00 <_close>
 800ba1c:	1c43      	adds	r3, r0, #1
 800ba1e:	d102      	bne.n	800ba26 <_close_r+0x1a>
 800ba20:	682b      	ldr	r3, [r5, #0]
 800ba22:	b103      	cbz	r3, 800ba26 <_close_r+0x1a>
 800ba24:	6023      	str	r3, [r4, #0]
 800ba26:	bd38      	pop	{r3, r4, r5, pc}
 800ba28:	20000344 	.word	0x20000344

0800ba2c <_fstat_r>:
 800ba2c:	b538      	push	{r3, r4, r5, lr}
 800ba2e:	4d07      	ldr	r5, [pc, #28]	; (800ba4c <_fstat_r+0x20>)
 800ba30:	2300      	movs	r3, #0
 800ba32:	4604      	mov	r4, r0
 800ba34:	4608      	mov	r0, r1
 800ba36:	4611      	mov	r1, r2
 800ba38:	602b      	str	r3, [r5, #0]
 800ba3a:	f7f7 f9ed 	bl	8002e18 <_fstat>
 800ba3e:	1c43      	adds	r3, r0, #1
 800ba40:	d102      	bne.n	800ba48 <_fstat_r+0x1c>
 800ba42:	682b      	ldr	r3, [r5, #0]
 800ba44:	b103      	cbz	r3, 800ba48 <_fstat_r+0x1c>
 800ba46:	6023      	str	r3, [r4, #0]
 800ba48:	bd38      	pop	{r3, r4, r5, pc}
 800ba4a:	bf00      	nop
 800ba4c:	20000344 	.word	0x20000344

0800ba50 <_isatty_r>:
 800ba50:	b538      	push	{r3, r4, r5, lr}
 800ba52:	4d06      	ldr	r5, [pc, #24]	; (800ba6c <_isatty_r+0x1c>)
 800ba54:	2300      	movs	r3, #0
 800ba56:	4604      	mov	r4, r0
 800ba58:	4608      	mov	r0, r1
 800ba5a:	602b      	str	r3, [r5, #0]
 800ba5c:	f7f7 f9ec 	bl	8002e38 <_isatty>
 800ba60:	1c43      	adds	r3, r0, #1
 800ba62:	d102      	bne.n	800ba6a <_isatty_r+0x1a>
 800ba64:	682b      	ldr	r3, [r5, #0]
 800ba66:	b103      	cbz	r3, 800ba6a <_isatty_r+0x1a>
 800ba68:	6023      	str	r3, [r4, #0]
 800ba6a:	bd38      	pop	{r3, r4, r5, pc}
 800ba6c:	20000344 	.word	0x20000344

0800ba70 <_lseek_r>:
 800ba70:	b538      	push	{r3, r4, r5, lr}
 800ba72:	4d07      	ldr	r5, [pc, #28]	; (800ba90 <_lseek_r+0x20>)
 800ba74:	4604      	mov	r4, r0
 800ba76:	4608      	mov	r0, r1
 800ba78:	4611      	mov	r1, r2
 800ba7a:	2200      	movs	r2, #0
 800ba7c:	602a      	str	r2, [r5, #0]
 800ba7e:	461a      	mov	r2, r3
 800ba80:	f7f7 f9e5 	bl	8002e4e <_lseek>
 800ba84:	1c43      	adds	r3, r0, #1
 800ba86:	d102      	bne.n	800ba8e <_lseek_r+0x1e>
 800ba88:	682b      	ldr	r3, [r5, #0]
 800ba8a:	b103      	cbz	r3, 800ba8e <_lseek_r+0x1e>
 800ba8c:	6023      	str	r3, [r4, #0]
 800ba8e:	bd38      	pop	{r3, r4, r5, pc}
 800ba90:	20000344 	.word	0x20000344

0800ba94 <memmove>:
 800ba94:	4288      	cmp	r0, r1
 800ba96:	b510      	push	{r4, lr}
 800ba98:	eb01 0402 	add.w	r4, r1, r2
 800ba9c:	d902      	bls.n	800baa4 <memmove+0x10>
 800ba9e:	4284      	cmp	r4, r0
 800baa0:	4623      	mov	r3, r4
 800baa2:	d807      	bhi.n	800bab4 <memmove+0x20>
 800baa4:	1e43      	subs	r3, r0, #1
 800baa6:	42a1      	cmp	r1, r4
 800baa8:	d008      	beq.n	800babc <memmove+0x28>
 800baaa:	f811 2b01 	ldrb.w	r2, [r1], #1
 800baae:	f803 2f01 	strb.w	r2, [r3, #1]!
 800bab2:	e7f8      	b.n	800baa6 <memmove+0x12>
 800bab4:	4402      	add	r2, r0
 800bab6:	4601      	mov	r1, r0
 800bab8:	428a      	cmp	r2, r1
 800baba:	d100      	bne.n	800babe <memmove+0x2a>
 800babc:	bd10      	pop	{r4, pc}
 800babe:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800bac2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800bac6:	e7f7      	b.n	800bab8 <memmove+0x24>

0800bac8 <_realloc_r>:
 800bac8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bacc:	4680      	mov	r8, r0
 800bace:	4614      	mov	r4, r2
 800bad0:	460e      	mov	r6, r1
 800bad2:	b921      	cbnz	r1, 800bade <_realloc_r+0x16>
 800bad4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bad8:	4611      	mov	r1, r2
 800bada:	f7fa bddf 	b.w	800669c <_malloc_r>
 800bade:	b92a      	cbnz	r2, 800baec <_realloc_r+0x24>
 800bae0:	f7fa fd70 	bl	80065c4 <_free_r>
 800bae4:	4625      	mov	r5, r4
 800bae6:	4628      	mov	r0, r5
 800bae8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800baec:	f000 f872 	bl	800bbd4 <_malloc_usable_size_r>
 800baf0:	4284      	cmp	r4, r0
 800baf2:	4607      	mov	r7, r0
 800baf4:	d802      	bhi.n	800bafc <_realloc_r+0x34>
 800baf6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800bafa:	d812      	bhi.n	800bb22 <_realloc_r+0x5a>
 800bafc:	4621      	mov	r1, r4
 800bafe:	4640      	mov	r0, r8
 800bb00:	f7fa fdcc 	bl	800669c <_malloc_r>
 800bb04:	4605      	mov	r5, r0
 800bb06:	2800      	cmp	r0, #0
 800bb08:	d0ed      	beq.n	800bae6 <_realloc_r+0x1e>
 800bb0a:	42bc      	cmp	r4, r7
 800bb0c:	4622      	mov	r2, r4
 800bb0e:	4631      	mov	r1, r6
 800bb10:	bf28      	it	cs
 800bb12:	463a      	movcs	r2, r7
 800bb14:	f7fa fd40 	bl	8006598 <memcpy>
 800bb18:	4631      	mov	r1, r6
 800bb1a:	4640      	mov	r0, r8
 800bb1c:	f7fa fd52 	bl	80065c4 <_free_r>
 800bb20:	e7e1      	b.n	800bae6 <_realloc_r+0x1e>
 800bb22:	4635      	mov	r5, r6
 800bb24:	e7df      	b.n	800bae6 <_realloc_r+0x1e>
	...

0800bb28 <_read_r>:
 800bb28:	b538      	push	{r3, r4, r5, lr}
 800bb2a:	4d07      	ldr	r5, [pc, #28]	; (800bb48 <_read_r+0x20>)
 800bb2c:	4604      	mov	r4, r0
 800bb2e:	4608      	mov	r0, r1
 800bb30:	4611      	mov	r1, r2
 800bb32:	2200      	movs	r2, #0
 800bb34:	602a      	str	r2, [r5, #0]
 800bb36:	461a      	mov	r2, r3
 800bb38:	f7f7 f91a 	bl	8002d70 <_read>
 800bb3c:	1c43      	adds	r3, r0, #1
 800bb3e:	d102      	bne.n	800bb46 <_read_r+0x1e>
 800bb40:	682b      	ldr	r3, [r5, #0]
 800bb42:	b103      	cbz	r3, 800bb46 <_read_r+0x1e>
 800bb44:	6023      	str	r3, [r4, #0]
 800bb46:	bd38      	pop	{r3, r4, r5, pc}
 800bb48:	20000344 	.word	0x20000344

0800bb4c <_raise_r>:
 800bb4c:	291f      	cmp	r1, #31
 800bb4e:	b538      	push	{r3, r4, r5, lr}
 800bb50:	4604      	mov	r4, r0
 800bb52:	460d      	mov	r5, r1
 800bb54:	d904      	bls.n	800bb60 <_raise_r+0x14>
 800bb56:	2316      	movs	r3, #22
 800bb58:	6003      	str	r3, [r0, #0]
 800bb5a:	f04f 30ff 	mov.w	r0, #4294967295
 800bb5e:	bd38      	pop	{r3, r4, r5, pc}
 800bb60:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800bb62:	b112      	cbz	r2, 800bb6a <_raise_r+0x1e>
 800bb64:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800bb68:	b94b      	cbnz	r3, 800bb7e <_raise_r+0x32>
 800bb6a:	4620      	mov	r0, r4
 800bb6c:	f000 f830 	bl	800bbd0 <_getpid_r>
 800bb70:	462a      	mov	r2, r5
 800bb72:	4601      	mov	r1, r0
 800bb74:	4620      	mov	r0, r4
 800bb76:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bb7a:	f000 b817 	b.w	800bbac <_kill_r>
 800bb7e:	2b01      	cmp	r3, #1
 800bb80:	d00a      	beq.n	800bb98 <_raise_r+0x4c>
 800bb82:	1c59      	adds	r1, r3, #1
 800bb84:	d103      	bne.n	800bb8e <_raise_r+0x42>
 800bb86:	2316      	movs	r3, #22
 800bb88:	6003      	str	r3, [r0, #0]
 800bb8a:	2001      	movs	r0, #1
 800bb8c:	e7e7      	b.n	800bb5e <_raise_r+0x12>
 800bb8e:	2400      	movs	r4, #0
 800bb90:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800bb94:	4628      	mov	r0, r5
 800bb96:	4798      	blx	r3
 800bb98:	2000      	movs	r0, #0
 800bb9a:	e7e0      	b.n	800bb5e <_raise_r+0x12>

0800bb9c <raise>:
 800bb9c:	4b02      	ldr	r3, [pc, #8]	; (800bba8 <raise+0xc>)
 800bb9e:	4601      	mov	r1, r0
 800bba0:	6818      	ldr	r0, [r3, #0]
 800bba2:	f7ff bfd3 	b.w	800bb4c <_raise_r>
 800bba6:	bf00      	nop
 800bba8:	2000000c 	.word	0x2000000c

0800bbac <_kill_r>:
 800bbac:	b538      	push	{r3, r4, r5, lr}
 800bbae:	4d07      	ldr	r5, [pc, #28]	; (800bbcc <_kill_r+0x20>)
 800bbb0:	2300      	movs	r3, #0
 800bbb2:	4604      	mov	r4, r0
 800bbb4:	4608      	mov	r0, r1
 800bbb6:	4611      	mov	r1, r2
 800bbb8:	602b      	str	r3, [r5, #0]
 800bbba:	f7f7 f8bf 	bl	8002d3c <_kill>
 800bbbe:	1c43      	adds	r3, r0, #1
 800bbc0:	d102      	bne.n	800bbc8 <_kill_r+0x1c>
 800bbc2:	682b      	ldr	r3, [r5, #0]
 800bbc4:	b103      	cbz	r3, 800bbc8 <_kill_r+0x1c>
 800bbc6:	6023      	str	r3, [r4, #0]
 800bbc8:	bd38      	pop	{r3, r4, r5, pc}
 800bbca:	bf00      	nop
 800bbcc:	20000344 	.word	0x20000344

0800bbd0 <_getpid_r>:
 800bbd0:	f7f7 b8ac 	b.w	8002d2c <_getpid>

0800bbd4 <_malloc_usable_size_r>:
 800bbd4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bbd8:	1f18      	subs	r0, r3, #4
 800bbda:	2b00      	cmp	r3, #0
 800bbdc:	bfbc      	itt	lt
 800bbde:	580b      	ldrlt	r3, [r1, r0]
 800bbe0:	18c0      	addlt	r0, r0, r3
 800bbe2:	4770      	bx	lr

0800bbe4 <_init>:
 800bbe4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bbe6:	bf00      	nop
 800bbe8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bbea:	bc08      	pop	{r3}
 800bbec:	469e      	mov	lr, r3
 800bbee:	4770      	bx	lr

0800bbf0 <_fini>:
 800bbf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bbf2:	bf00      	nop
 800bbf4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bbf6:	bc08      	pop	{r3}
 800bbf8:	469e      	mov	lr, r3
 800bbfa:	4770      	bx	lr
