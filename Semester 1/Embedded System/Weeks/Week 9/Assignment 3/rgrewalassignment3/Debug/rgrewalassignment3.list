
rgrewalassignment3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000061c0  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000c08  08006350  08006350  00016350  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006f58  08006f58  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08006f58  08006f58  00016f58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006f60  08006f60  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006f60  08006f60  00016f60  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006f64  08006f64  00016f64  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08006f68  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000194  20000070  08006fd8  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000204  08006fd8  00020204  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011e5f  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002594  00000000  00000000  00031eff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f70  00000000  00000000  00034498  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  00023ae4  00000000  00000000  00035408  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   00011c55  00000000  00000000  00058eec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    000d7c8b  00000000  00000000  0006ab41  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000050  00000000  00000000  001427cc  2**0
                  CONTENTS, READONLY
 19 .debug_ranges 00000e60  00000000  00000000  00142820  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000485c  00000000  00000000  00143680  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08006338 	.word	0x08006338

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	08006338 	.word	0x08006338

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b974 	b.w	8000570 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	468e      	mov	lr, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	d14d      	bne.n	800034a <__udivmoddi4+0xaa>
 80002ae:	428a      	cmp	r2, r1
 80002b0:	4694      	mov	ip, r2
 80002b2:	d969      	bls.n	8000388 <__udivmoddi4+0xe8>
 80002b4:	fab2 f282 	clz	r2, r2
 80002b8:	b152      	cbz	r2, 80002d0 <__udivmoddi4+0x30>
 80002ba:	fa01 f302 	lsl.w	r3, r1, r2
 80002be:	f1c2 0120 	rsb	r1, r2, #32
 80002c2:	fa20 f101 	lsr.w	r1, r0, r1
 80002c6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ca:	ea41 0e03 	orr.w	lr, r1, r3
 80002ce:	4094      	lsls	r4, r2
 80002d0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002d4:	0c21      	lsrs	r1, r4, #16
 80002d6:	fbbe f6f8 	udiv	r6, lr, r8
 80002da:	fa1f f78c 	uxth.w	r7, ip
 80002de:	fb08 e316 	mls	r3, r8, r6, lr
 80002e2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002e6:	fb06 f107 	mul.w	r1, r6, r7
 80002ea:	4299      	cmp	r1, r3
 80002ec:	d90a      	bls.n	8000304 <__udivmoddi4+0x64>
 80002ee:	eb1c 0303 	adds.w	r3, ip, r3
 80002f2:	f106 30ff 	add.w	r0, r6, #4294967295
 80002f6:	f080 811f 	bcs.w	8000538 <__udivmoddi4+0x298>
 80002fa:	4299      	cmp	r1, r3
 80002fc:	f240 811c 	bls.w	8000538 <__udivmoddi4+0x298>
 8000300:	3e02      	subs	r6, #2
 8000302:	4463      	add	r3, ip
 8000304:	1a5b      	subs	r3, r3, r1
 8000306:	b2a4      	uxth	r4, r4
 8000308:	fbb3 f0f8 	udiv	r0, r3, r8
 800030c:	fb08 3310 	mls	r3, r8, r0, r3
 8000310:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000314:	fb00 f707 	mul.w	r7, r0, r7
 8000318:	42a7      	cmp	r7, r4
 800031a:	d90a      	bls.n	8000332 <__udivmoddi4+0x92>
 800031c:	eb1c 0404 	adds.w	r4, ip, r4
 8000320:	f100 33ff 	add.w	r3, r0, #4294967295
 8000324:	f080 810a 	bcs.w	800053c <__udivmoddi4+0x29c>
 8000328:	42a7      	cmp	r7, r4
 800032a:	f240 8107 	bls.w	800053c <__udivmoddi4+0x29c>
 800032e:	4464      	add	r4, ip
 8000330:	3802      	subs	r0, #2
 8000332:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000336:	1be4      	subs	r4, r4, r7
 8000338:	2600      	movs	r6, #0
 800033a:	b11d      	cbz	r5, 8000344 <__udivmoddi4+0xa4>
 800033c:	40d4      	lsrs	r4, r2
 800033e:	2300      	movs	r3, #0
 8000340:	e9c5 4300 	strd	r4, r3, [r5]
 8000344:	4631      	mov	r1, r6
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	428b      	cmp	r3, r1
 800034c:	d909      	bls.n	8000362 <__udivmoddi4+0xc2>
 800034e:	2d00      	cmp	r5, #0
 8000350:	f000 80ef 	beq.w	8000532 <__udivmoddi4+0x292>
 8000354:	2600      	movs	r6, #0
 8000356:	e9c5 0100 	strd	r0, r1, [r5]
 800035a:	4630      	mov	r0, r6
 800035c:	4631      	mov	r1, r6
 800035e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000362:	fab3 f683 	clz	r6, r3
 8000366:	2e00      	cmp	r6, #0
 8000368:	d14a      	bne.n	8000400 <__udivmoddi4+0x160>
 800036a:	428b      	cmp	r3, r1
 800036c:	d302      	bcc.n	8000374 <__udivmoddi4+0xd4>
 800036e:	4282      	cmp	r2, r0
 8000370:	f200 80f9 	bhi.w	8000566 <__udivmoddi4+0x2c6>
 8000374:	1a84      	subs	r4, r0, r2
 8000376:	eb61 0303 	sbc.w	r3, r1, r3
 800037a:	2001      	movs	r0, #1
 800037c:	469e      	mov	lr, r3
 800037e:	2d00      	cmp	r5, #0
 8000380:	d0e0      	beq.n	8000344 <__udivmoddi4+0xa4>
 8000382:	e9c5 4e00 	strd	r4, lr, [r5]
 8000386:	e7dd      	b.n	8000344 <__udivmoddi4+0xa4>
 8000388:	b902      	cbnz	r2, 800038c <__udivmoddi4+0xec>
 800038a:	deff      	udf	#255	; 0xff
 800038c:	fab2 f282 	clz	r2, r2
 8000390:	2a00      	cmp	r2, #0
 8000392:	f040 8092 	bne.w	80004ba <__udivmoddi4+0x21a>
 8000396:	eba1 010c 	sub.w	r1, r1, ip
 800039a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800039e:	fa1f fe8c 	uxth.w	lr, ip
 80003a2:	2601      	movs	r6, #1
 80003a4:	0c20      	lsrs	r0, r4, #16
 80003a6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003aa:	fb07 1113 	mls	r1, r7, r3, r1
 80003ae:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003b2:	fb0e f003 	mul.w	r0, lr, r3
 80003b6:	4288      	cmp	r0, r1
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x12c>
 80003ba:	eb1c 0101 	adds.w	r1, ip, r1
 80003be:	f103 38ff 	add.w	r8, r3, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x12a>
 80003c4:	4288      	cmp	r0, r1
 80003c6:	f200 80cb 	bhi.w	8000560 <__udivmoddi4+0x2c0>
 80003ca:	4643      	mov	r3, r8
 80003cc:	1a09      	subs	r1, r1, r0
 80003ce:	b2a4      	uxth	r4, r4
 80003d0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003d4:	fb07 1110 	mls	r1, r7, r0, r1
 80003d8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003dc:	fb0e fe00 	mul.w	lr, lr, r0
 80003e0:	45a6      	cmp	lr, r4
 80003e2:	d908      	bls.n	80003f6 <__udivmoddi4+0x156>
 80003e4:	eb1c 0404 	adds.w	r4, ip, r4
 80003e8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003ec:	d202      	bcs.n	80003f4 <__udivmoddi4+0x154>
 80003ee:	45a6      	cmp	lr, r4
 80003f0:	f200 80bb 	bhi.w	800056a <__udivmoddi4+0x2ca>
 80003f4:	4608      	mov	r0, r1
 80003f6:	eba4 040e 	sub.w	r4, r4, lr
 80003fa:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003fe:	e79c      	b.n	800033a <__udivmoddi4+0x9a>
 8000400:	f1c6 0720 	rsb	r7, r6, #32
 8000404:	40b3      	lsls	r3, r6
 8000406:	fa22 fc07 	lsr.w	ip, r2, r7
 800040a:	ea4c 0c03 	orr.w	ip, ip, r3
 800040e:	fa20 f407 	lsr.w	r4, r0, r7
 8000412:	fa01 f306 	lsl.w	r3, r1, r6
 8000416:	431c      	orrs	r4, r3
 8000418:	40f9      	lsrs	r1, r7
 800041a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800041e:	fa00 f306 	lsl.w	r3, r0, r6
 8000422:	fbb1 f8f9 	udiv	r8, r1, r9
 8000426:	0c20      	lsrs	r0, r4, #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fb09 1118 	mls	r1, r9, r8, r1
 8000430:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000434:	fb08 f00e 	mul.w	r0, r8, lr
 8000438:	4288      	cmp	r0, r1
 800043a:	fa02 f206 	lsl.w	r2, r2, r6
 800043e:	d90b      	bls.n	8000458 <__udivmoddi4+0x1b8>
 8000440:	eb1c 0101 	adds.w	r1, ip, r1
 8000444:	f108 3aff 	add.w	sl, r8, #4294967295
 8000448:	f080 8088 	bcs.w	800055c <__udivmoddi4+0x2bc>
 800044c:	4288      	cmp	r0, r1
 800044e:	f240 8085 	bls.w	800055c <__udivmoddi4+0x2bc>
 8000452:	f1a8 0802 	sub.w	r8, r8, #2
 8000456:	4461      	add	r1, ip
 8000458:	1a09      	subs	r1, r1, r0
 800045a:	b2a4      	uxth	r4, r4
 800045c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000460:	fb09 1110 	mls	r1, r9, r0, r1
 8000464:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000468:	fb00 fe0e 	mul.w	lr, r0, lr
 800046c:	458e      	cmp	lr, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x1e2>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f100 34ff 	add.w	r4, r0, #4294967295
 8000478:	d26c      	bcs.n	8000554 <__udivmoddi4+0x2b4>
 800047a:	458e      	cmp	lr, r1
 800047c:	d96a      	bls.n	8000554 <__udivmoddi4+0x2b4>
 800047e:	3802      	subs	r0, #2
 8000480:	4461      	add	r1, ip
 8000482:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000486:	fba0 9402 	umull	r9, r4, r0, r2
 800048a:	eba1 010e 	sub.w	r1, r1, lr
 800048e:	42a1      	cmp	r1, r4
 8000490:	46c8      	mov	r8, r9
 8000492:	46a6      	mov	lr, r4
 8000494:	d356      	bcc.n	8000544 <__udivmoddi4+0x2a4>
 8000496:	d053      	beq.n	8000540 <__udivmoddi4+0x2a0>
 8000498:	b15d      	cbz	r5, 80004b2 <__udivmoddi4+0x212>
 800049a:	ebb3 0208 	subs.w	r2, r3, r8
 800049e:	eb61 010e 	sbc.w	r1, r1, lr
 80004a2:	fa01 f707 	lsl.w	r7, r1, r7
 80004a6:	fa22 f306 	lsr.w	r3, r2, r6
 80004aa:	40f1      	lsrs	r1, r6
 80004ac:	431f      	orrs	r7, r3
 80004ae:	e9c5 7100 	strd	r7, r1, [r5]
 80004b2:	2600      	movs	r6, #0
 80004b4:	4631      	mov	r1, r6
 80004b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	40d8      	lsrs	r0, r3
 80004c0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c4:	fa21 f303 	lsr.w	r3, r1, r3
 80004c8:	4091      	lsls	r1, r2
 80004ca:	4301      	orrs	r1, r0
 80004cc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d0:	fa1f fe8c 	uxth.w	lr, ip
 80004d4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004d8:	fb07 3610 	mls	r6, r7, r0, r3
 80004dc:	0c0b      	lsrs	r3, r1, #16
 80004de:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004e2:	fb00 f60e 	mul.w	r6, r0, lr
 80004e6:	429e      	cmp	r6, r3
 80004e8:	fa04 f402 	lsl.w	r4, r4, r2
 80004ec:	d908      	bls.n	8000500 <__udivmoddi4+0x260>
 80004ee:	eb1c 0303 	adds.w	r3, ip, r3
 80004f2:	f100 38ff 	add.w	r8, r0, #4294967295
 80004f6:	d22f      	bcs.n	8000558 <__udivmoddi4+0x2b8>
 80004f8:	429e      	cmp	r6, r3
 80004fa:	d92d      	bls.n	8000558 <__udivmoddi4+0x2b8>
 80004fc:	3802      	subs	r0, #2
 80004fe:	4463      	add	r3, ip
 8000500:	1b9b      	subs	r3, r3, r6
 8000502:	b289      	uxth	r1, r1
 8000504:	fbb3 f6f7 	udiv	r6, r3, r7
 8000508:	fb07 3316 	mls	r3, r7, r6, r3
 800050c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000510:	fb06 f30e 	mul.w	r3, r6, lr
 8000514:	428b      	cmp	r3, r1
 8000516:	d908      	bls.n	800052a <__udivmoddi4+0x28a>
 8000518:	eb1c 0101 	adds.w	r1, ip, r1
 800051c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000520:	d216      	bcs.n	8000550 <__udivmoddi4+0x2b0>
 8000522:	428b      	cmp	r3, r1
 8000524:	d914      	bls.n	8000550 <__udivmoddi4+0x2b0>
 8000526:	3e02      	subs	r6, #2
 8000528:	4461      	add	r1, ip
 800052a:	1ac9      	subs	r1, r1, r3
 800052c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000530:	e738      	b.n	80003a4 <__udivmoddi4+0x104>
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e705      	b.n	8000344 <__udivmoddi4+0xa4>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e3      	b.n	8000304 <__udivmoddi4+0x64>
 800053c:	4618      	mov	r0, r3
 800053e:	e6f8      	b.n	8000332 <__udivmoddi4+0x92>
 8000540:	454b      	cmp	r3, r9
 8000542:	d2a9      	bcs.n	8000498 <__udivmoddi4+0x1f8>
 8000544:	ebb9 0802 	subs.w	r8, r9, r2
 8000548:	eb64 0e0c 	sbc.w	lr, r4, ip
 800054c:	3801      	subs	r0, #1
 800054e:	e7a3      	b.n	8000498 <__udivmoddi4+0x1f8>
 8000550:	4646      	mov	r6, r8
 8000552:	e7ea      	b.n	800052a <__udivmoddi4+0x28a>
 8000554:	4620      	mov	r0, r4
 8000556:	e794      	b.n	8000482 <__udivmoddi4+0x1e2>
 8000558:	4640      	mov	r0, r8
 800055a:	e7d1      	b.n	8000500 <__udivmoddi4+0x260>
 800055c:	46d0      	mov	r8, sl
 800055e:	e77b      	b.n	8000458 <__udivmoddi4+0x1b8>
 8000560:	3b02      	subs	r3, #2
 8000562:	4461      	add	r1, ip
 8000564:	e732      	b.n	80003cc <__udivmoddi4+0x12c>
 8000566:	4630      	mov	r0, r6
 8000568:	e709      	b.n	800037e <__udivmoddi4+0xde>
 800056a:	4464      	add	r4, ip
 800056c:	3802      	subs	r0, #2
 800056e:	e742      	b.n	80003f6 <__udivmoddi4+0x156>

08000570 <__aeabi_idiv0>:
 8000570:	4770      	bx	lr
 8000572:	bf00      	nop

08000574 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000574:	b590      	push	{r4, r7, lr}
 8000576:	b09d      	sub	sp, #116	; 0x74
 8000578:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800057a:	f000 ffd4 	bl	8001526 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800057e:	f000 f98f 	bl	80008a0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000582:	f000 faed 	bl	8000b60 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000586:	f000 fabb 	bl	8000b00 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 800058a:	f000 f9eb 	bl	8000964 <MX_ADC1_Init>
  MX_DAC1_Init();
 800058e:	f000 fa85 	bl	8000a9c <MX_DAC1_Init>
  /* USER CODE BEGIN 2 */

  ssd1331_init();
 8000592:	f000 fc9f 	bl	8000ed4 <ssd1331_init>
  ssd1331_clear_screen(BLACK);
 8000596:	2000      	movs	r0, #0
 8000598:	f000 fc77 	bl	8000e8a <ssd1331_clear_screen>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */


  // predefine all the variables
  char str[80] = "Temp = 0.00C";
 800059c:	4bb6      	ldr	r3, [pc, #728]	; (8000878 <main+0x304>)
 800059e:	1d3c      	adds	r4, r7, #4
 80005a0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80005a2:	c407      	stmia	r4!, {r0, r1, r2}
 80005a4:	7023      	strb	r3, [r4, #0]
 80005a6:	f107 0311 	add.w	r3, r7, #17
 80005aa:	2243      	movs	r2, #67	; 0x43
 80005ac:	2100      	movs	r1, #0
 80005ae:	4618      	mov	r0, r3
 80005b0:	f004 fe4c 	bl	800524c <memset>
  uint32_t temperature;
  char color = 'w';
 80005b4:	2377      	movs	r3, #119	; 0x77
 80005b6:	f887 3063 	strb.w	r3, [r7, #99]	; 0x63
  char prevColor = 'w';
 80005ba:	2377      	movs	r3, #119	; 0x77
 80005bc:	f887 3062 	strb.w	r3, [r7, #98]	; 0x62
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
    
    // start the analog to digital convertor
    if(HAL_ADC_Start(&hadc1) != HAL_OK){
 80005c0:	48ae      	ldr	r0, [pc, #696]	; (800087c <main+0x308>)
 80005c2:	f001 fb59 	bl	8001c78 <HAL_ADC_Start>
 80005c6:	4603      	mov	r3, r0
 80005c8:	2b00      	cmp	r3, #0
 80005ca:	d002      	beq.n	80005d2 <main+0x5e>
      printf("HAL_ADC_Start Error \r\n");
 80005cc:	48ac      	ldr	r0, [pc, #688]	; (8000880 <main+0x30c>)
 80005ce:	f004 feb3 	bl	8005338 <puts>
    }
    if(HAL_ADC_PollForConversion(&hadc1,10) != HAL_OK){
 80005d2:	210a      	movs	r1, #10
 80005d4:	48a9      	ldr	r0, [pc, #676]	; (800087c <main+0x308>)
 80005d6:	f001 fbb2 	bl	8001d3e <HAL_ADC_PollForConversion>
 80005da:	4603      	mov	r3, r0
 80005dc:	2b00      	cmp	r3, #0
 80005de:	d003      	beq.n	80005e8 <main+0x74>
      printf("HAL_ADC_PollForConversion Error \r\n");
 80005e0:	48a8      	ldr	r0, [pc, #672]	; (8000884 <main+0x310>)
 80005e2:	f004 fea9 	bl	8005338 <puts>
 80005e6:	e003      	b.n	80005f0 <main+0x7c>
    }else{
      // get the value from the temperature sensor
      temperature = HAL_ADC_GetValue(&hadc1);
 80005e8:	48a4      	ldr	r0, [pc, #656]	; (800087c <main+0x308>)
 80005ea:	f001 fc37 	bl	8001e5c <HAL_ADC_GetValue>
 80005ee:	6678      	str	r0, [r7, #100]	; 0x64
    }

    // start the digital to analog convertor
    if(HAL_DAC_Start(&hdac1, DAC_CHANNEL_1) != HAL_OK){
 80005f0:	2100      	movs	r1, #0
 80005f2:	48a5      	ldr	r0, [pc, #660]	; (8000888 <main+0x314>)
 80005f4:	f002 f9ad 	bl	8002952 <HAL_DAC_Start>
 80005f8:	4603      	mov	r3, r0
 80005fa:	2b00      	cmp	r3, #0
 80005fc:	d002      	beq.n	8000604 <main+0x90>
      printf("HAL_DAC_Start Error \r\n");
 80005fe:	48a3      	ldr	r0, [pc, #652]	; (800088c <main+0x318>)
 8000600:	f004 fe9a 	bl	8005338 <puts>
    }
    // convert the value from the sensor to Celsius following the formula given in the document
    floatTemperature = (float)(temperature - 500)/10;
 8000604:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000606:	f5a3 73fa 	sub.w	r3, r3, #500	; 0x1f4
 800060a:	ee07 3a90 	vmov	s15, r3
 800060e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000612:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8000616:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800061a:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
    temperature = (uint32_t)(temperature - 500)/10;
 800061e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000620:	f5a3 73fa 	sub.w	r3, r3, #500	; 0x1f4
 8000624:	4a9a      	ldr	r2, [pc, #616]	; (8000890 <main+0x31c>)
 8000626:	fba2 2303 	umull	r2, r3, r2, r3
 800062a:	08db      	lsrs	r3, r3, #3
 800062c:	667b      	str	r3, [r7, #100]	; 0x64
    // get the decimal value from the float so we can added it into string as float can't be used with stm32
    decimalTemperature = (floatTemperature - temperature) * 100;
 800062e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000630:	ee07 3a90 	vmov	s15, r3
 8000634:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000638:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 800063c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000640:	ed9f 7a94 	vldr	s14, [pc, #592]	; 8000894 <main+0x320>
 8000644:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000648:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800064c:	ee17 3a90 	vmov	r3, s15
 8000650:	65bb      	str	r3, [r7, #88]	; 0x58
    // get the color according to the question and the temperature
    if(temperature >= -15){
 8000652:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000654:	f113 0f10 	cmn.w	r3, #16
 8000658:	d903      	bls.n	8000662 <main+0xee>
      color = 'w';
 800065a:	2377      	movs	r3, #119	; 0x77
 800065c:	f887 3063 	strb.w	r3, [r7, #99]	; 0x63
 8000660:	e024      	b.n	80006ac <main+0x138>
    }else if(temperature < 5 && temperature >= -15){
 8000662:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000664:	2b04      	cmp	r3, #4
 8000666:	d807      	bhi.n	8000678 <main+0x104>
 8000668:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800066a:	f113 0f10 	cmn.w	r3, #16
 800066e:	d903      	bls.n	8000678 <main+0x104>
      color = 'b';
 8000670:	2362      	movs	r3, #98	; 0x62
 8000672:	f887 3063 	strb.w	r3, [r7, #99]	; 0x63
 8000676:	e019      	b.n	80006ac <main+0x138>
    }else if(temperature < 15 && temperature >= 5){
 8000678:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800067a:	2b0e      	cmp	r3, #14
 800067c:	d806      	bhi.n	800068c <main+0x118>
 800067e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000680:	2b04      	cmp	r3, #4
 8000682:	d903      	bls.n	800068c <main+0x118>
      color = 'y';
 8000684:	2379      	movs	r3, #121	; 0x79
 8000686:	f887 3063 	strb.w	r3, [r7, #99]	; 0x63
 800068a:	e00f      	b.n	80006ac <main+0x138>
    }else if(temperature < 25 && temperature >= 15){
 800068c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800068e:	2b18      	cmp	r3, #24
 8000690:	d806      	bhi.n	80006a0 <main+0x12c>
 8000692:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000694:	2b0e      	cmp	r3, #14
 8000696:	d903      	bls.n	80006a0 <main+0x12c>
      color = 'o';
 8000698:	236f      	movs	r3, #111	; 0x6f
 800069a:	f887 3063 	strb.w	r3, [r7, #99]	; 0x63
 800069e:	e005      	b.n	80006ac <main+0x138>
    }else if(temperature >= 25){
 80006a0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80006a2:	2b18      	cmp	r3, #24
 80006a4:	d902      	bls.n	80006ac <main+0x138>
      color = 'r';
 80006a6:	2372      	movs	r3, #114	; 0x72
 80006a8:	f887 3063 	strb.w	r3, [r7, #99]	; 0x63
    }
    // if the color changes we will clear the screen
    if(prevColor != color){
 80006ac:	f897 2062 	ldrb.w	r2, [r7, #98]	; 0x62
 80006b0:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 80006b4:	429a      	cmp	r2, r3
 80006b6:	d002      	beq.n	80006be <main+0x14a>
      ssd1331_clear_screen(BLACK);
 80006b8:	2000      	movs	r0, #0
 80006ba:	f000 fbe6 	bl	8000e8a <ssd1331_clear_screen>
    }
    prevColor = color;
 80006be:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 80006c2:	f887 3062 	strb.w	r3, [r7, #98]	; 0x62

    // if there is no decimal position in the formula we will format the string accordingly
    if(decimalTemperature == 0){
 80006c6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80006c8:	2b00      	cmp	r3, #0
 80006ca:	d106      	bne.n	80006da <main+0x166>
      sprintf(str,"Temp = %d.00 C",temperature);
 80006cc:	1d3b      	adds	r3, r7, #4
 80006ce:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80006d0:	4971      	ldr	r1, [pc, #452]	; (8000898 <main+0x324>)
 80006d2:	4618      	mov	r0, r3
 80006d4:	f004 fe38 	bl	8005348 <siprintf>
 80006d8:	e005      	b.n	80006e6 <main+0x172>
    }else{
      sprintf(str,"Temp = %d.%d C",temperature,decimalTemperature);
 80006da:	1d38      	adds	r0, r7, #4
 80006dc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80006de:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80006e0:	496e      	ldr	r1, [pc, #440]	; (800089c <main+0x328>)
 80006e2:	f004 fe31 	bl	8005348 <siprintf>
    }
    // display the string to the display unit
    ssd1331_display_string(0,0,str,FONT_1206,WHITE);
 80006e6:	1d3a      	adds	r2, r7, #4
 80006e8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80006ec:	9300      	str	r3, [sp, #0]
 80006ee:	230c      	movs	r3, #12
 80006f0:	2100      	movs	r1, #0
 80006f2:	2000      	movs	r0, #0
 80006f4:	f000 fb80 	bl	8000df8 <ssd1331_display_string>
    
    // light up the leds according to which the table given
    switch(color){
 80006f8:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 80006fc:	3b62      	subs	r3, #98	; 0x62
 80006fe:	2b17      	cmp	r3, #23
 8000700:	f200 80a0 	bhi.w	8000844 <main+0x2d0>
 8000704:	a201      	add	r2, pc, #4	; (adr r2, 800070c <main+0x198>)
 8000706:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800070a:	bf00      	nop
 800070c:	08000799 	.word	0x08000799
 8000710:	08000845 	.word	0x08000845
 8000714:	08000845 	.word	0x08000845
 8000718:	08000845 	.word	0x08000845
 800071c:	08000845 	.word	0x08000845
 8000720:	08000845 	.word	0x08000845
 8000724:	08000845 	.word	0x08000845
 8000728:	08000845 	.word	0x08000845
 800072c:	08000845 	.word	0x08000845
 8000730:	08000845 	.word	0x08000845
 8000734:	08000845 	.word	0x08000845
 8000738:	08000845 	.word	0x08000845
 800073c:	08000845 	.word	0x08000845
 8000740:	080007ef 	.word	0x080007ef
 8000744:	08000845 	.word	0x08000845
 8000748:	08000845 	.word	0x08000845
 800074c:	0800081b 	.word	0x0800081b
 8000750:	08000845 	.word	0x08000845
 8000754:	08000845 	.word	0x08000845
 8000758:	08000845 	.word	0x08000845
 800075c:	08000845 	.word	0x08000845
 8000760:	0800076d 	.word	0x0800076d
 8000764:	08000845 	.word	0x08000845
 8000768:	080007c3 	.word	0x080007c3
      case 'w':
        HAL_GPIO_WritePin(GPIOA, LED_BLUE_Pin,GPIO_PIN_SET);
 800076c:	2201      	movs	r2, #1
 800076e:	2108      	movs	r1, #8
 8000770:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000774:	f002 fbe4 	bl	8002f40 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOA, LED_RED_Pin, GPIO_PIN_SET);
 8000778:	2201      	movs	r2, #1
 800077a:	2102      	movs	r1, #2
 800077c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000780:	f002 fbde 	bl	8002f40 <HAL_GPIO_WritePin>
        greenValue = (3.3 * (4096)) / 3.3;
 8000784:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000788:	657b      	str	r3, [r7, #84]	; 0x54
        HAL_DAC_SetValue(&hdac1,DAC_CHANNEL_1, DAC_ALIGN_12B_R,greenValue);
 800078a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800078c:	2200      	movs	r2, #0
 800078e:	2100      	movs	r1, #0
 8000790:	483d      	ldr	r0, [pc, #244]	; (8000888 <main+0x314>)
 8000792:	f002 f92b 	bl	80029ec <HAL_DAC_SetValue>
        break;
 8000796:	e06a      	b.n	800086e <main+0x2fa>
      case 'b':
        HAL_GPIO_WritePin(GPIOA, LED_BLUE_Pin,GPIO_PIN_SET);
 8000798:	2201      	movs	r2, #1
 800079a:	2108      	movs	r1, #8
 800079c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007a0:	f002 fbce 	bl	8002f40 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOA, LED_RED_Pin, GPIO_PIN_RESET);
 80007a4:	2200      	movs	r2, #0
 80007a6:	2102      	movs	r1, #2
 80007a8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007ac:	f002 fbc8 	bl	8002f40 <HAL_GPIO_WritePin>
        greenValue = (0 * (4096)) / 3.3;
 80007b0:	2300      	movs	r3, #0
 80007b2:	657b      	str	r3, [r7, #84]	; 0x54
        HAL_DAC_SetValue(&hdac1,DAC_CHANNEL_1, DAC_ALIGN_12B_R,greenValue);
 80007b4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80007b6:	2200      	movs	r2, #0
 80007b8:	2100      	movs	r1, #0
 80007ba:	4833      	ldr	r0, [pc, #204]	; (8000888 <main+0x314>)
 80007bc:	f002 f916 	bl	80029ec <HAL_DAC_SetValue>
        break;
 80007c0:	e055      	b.n	800086e <main+0x2fa>
      case 'y':
        HAL_GPIO_WritePin(GPIOA, LED_BLUE_Pin,GPIO_PIN_RESET);
 80007c2:	2200      	movs	r2, #0
 80007c4:	2108      	movs	r1, #8
 80007c6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007ca:	f002 fbb9 	bl	8002f40 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOA, LED_RED_Pin, GPIO_PIN_SET);
 80007ce:	2201      	movs	r2, #1
 80007d0:	2102      	movs	r1, #2
 80007d2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007d6:	f002 fbb3 	bl	8002f40 <HAL_GPIO_WritePin>
        greenValue = (3 * (4096)) / 3.3;
 80007da:	f640 638b 	movw	r3, #3723	; 0xe8b
 80007de:	657b      	str	r3, [r7, #84]	; 0x54
        HAL_DAC_SetValue(&hdac1,DAC_CHANNEL_1, DAC_ALIGN_12B_R,greenValue);
 80007e0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80007e2:	2200      	movs	r2, #0
 80007e4:	2100      	movs	r1, #0
 80007e6:	4828      	ldr	r0, [pc, #160]	; (8000888 <main+0x314>)
 80007e8:	f002 f900 	bl	80029ec <HAL_DAC_SetValue>
        break;
 80007ec:	e03f      	b.n	800086e <main+0x2fa>
      case 'o':
        HAL_GPIO_WritePin(GPIOA, LED_BLUE_Pin,GPIO_PIN_RESET);
 80007ee:	2200      	movs	r2, #0
 80007f0:	2108      	movs	r1, #8
 80007f2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007f6:	f002 fba3 	bl	8002f40 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOA, LED_RED_Pin, GPIO_PIN_SET);
 80007fa:	2201      	movs	r2, #1
 80007fc:	2102      	movs	r1, #2
 80007fe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000802:	f002 fb9d 	bl	8002f40 <HAL_GPIO_WritePin>
        greenValue = (2.5 * (4096)) / 3.3;
 8000806:	f640 431f 	movw	r3, #3103	; 0xc1f
 800080a:	657b      	str	r3, [r7, #84]	; 0x54
        HAL_DAC_SetValue(&hdac1,DAC_CHANNEL_1, DAC_ALIGN_12B_R,greenValue);
 800080c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800080e:	2200      	movs	r2, #0
 8000810:	2100      	movs	r1, #0
 8000812:	481d      	ldr	r0, [pc, #116]	; (8000888 <main+0x314>)
 8000814:	f002 f8ea 	bl	80029ec <HAL_DAC_SetValue>
        break;
 8000818:	e029      	b.n	800086e <main+0x2fa>
      case 'r':
        HAL_GPIO_WritePin(GPIOA, LED_BLUE_Pin,GPIO_PIN_RESET);
 800081a:	2200      	movs	r2, #0
 800081c:	2108      	movs	r1, #8
 800081e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000822:	f002 fb8d 	bl	8002f40 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOA, LED_RED_Pin, GPIO_PIN_SET);
 8000826:	2201      	movs	r2, #1
 8000828:	2102      	movs	r1, #2
 800082a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800082e:	f002 fb87 	bl	8002f40 <HAL_GPIO_WritePin>
        greenValue = (0 * (4096)) / 3.3;
 8000832:	2300      	movs	r3, #0
 8000834:	657b      	str	r3, [r7, #84]	; 0x54
        HAL_DAC_SetValue(&hdac1,DAC_CHANNEL_1, DAC_ALIGN_12B_R,greenValue);
 8000836:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000838:	2200      	movs	r2, #0
 800083a:	2100      	movs	r1, #0
 800083c:	4812      	ldr	r0, [pc, #72]	; (8000888 <main+0x314>)
 800083e:	f002 f8d5 	bl	80029ec <HAL_DAC_SetValue>
        break;
 8000842:	e014      	b.n	800086e <main+0x2fa>
      default:
        HAL_GPIO_WritePin(GPIOA, LED_BLUE_Pin,GPIO_PIN_RESET);
 8000844:	2200      	movs	r2, #0
 8000846:	2108      	movs	r1, #8
 8000848:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800084c:	f002 fb78 	bl	8002f40 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOA, LED_RED_Pin, GPIO_PIN_RESET);
 8000850:	2200      	movs	r2, #0
 8000852:	2102      	movs	r1, #2
 8000854:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000858:	f002 fb72 	bl	8002f40 <HAL_GPIO_WritePin>
        greenValue = (0 * (4096)) / 3.3;
 800085c:	2300      	movs	r3, #0
 800085e:	657b      	str	r3, [r7, #84]	; 0x54
        HAL_DAC_SetValue(&hdac1,DAC_CHANNEL_1, DAC_ALIGN_12B_R,greenValue);
 8000860:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000862:	2200      	movs	r2, #0
 8000864:	2100      	movs	r1, #0
 8000866:	4808      	ldr	r0, [pc, #32]	; (8000888 <main+0x314>)
 8000868:	f002 f8c0 	bl	80029ec <HAL_DAC_SetValue>
        break;
 800086c:	bf00      	nop
    }
    HAL_Delay(1000);
 800086e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000872:	f000 fecd 	bl	8001610 <HAL_Delay>
    if(HAL_ADC_Start(&hadc1) != HAL_OK){
 8000876:	e6a3      	b.n	80005c0 <main+0x4c>
 8000878:	080063c4 	.word	0x080063c4
 800087c:	200000f0 	.word	0x200000f0
 8000880:	08006350 	.word	0x08006350
 8000884:	08006368 	.word	0x08006368
 8000888:	20000154 	.word	0x20000154
 800088c:	0800638c 	.word	0x0800638c
 8000890:	cccccccd 	.word	0xcccccccd
 8000894:	42c80000 	.word	0x42c80000
 8000898:	080063a4 	.word	0x080063a4
 800089c:	080063b4 	.word	0x080063b4

080008a0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008a0:	b580      	push	{r7, lr}
 80008a2:	b096      	sub	sp, #88	; 0x58
 80008a4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008a6:	f107 0314 	add.w	r3, r7, #20
 80008aa:	2244      	movs	r2, #68	; 0x44
 80008ac:	2100      	movs	r1, #0
 80008ae:	4618      	mov	r0, r3
 80008b0:	f004 fccc 	bl	800524c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008b4:	463b      	mov	r3, r7
 80008b6:	2200      	movs	r2, #0
 80008b8:	601a      	str	r2, [r3, #0]
 80008ba:	605a      	str	r2, [r3, #4]
 80008bc:	609a      	str	r2, [r3, #8]
 80008be:	60da      	str	r2, [r3, #12]
 80008c0:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80008c2:	f44f 7000 	mov.w	r0, #512	; 0x200
 80008c6:	f002 fb71 	bl	8002fac <HAL_PWREx_ControlVoltageScaling>
 80008ca:	4603      	mov	r3, r0
 80008cc:	2b00      	cmp	r3, #0
 80008ce:	d001      	beq.n	80008d4 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80008d0:	f000 f9a6 	bl	8000c20 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80008d4:	f002 fb4c 	bl	8002f70 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80008d8:	4b21      	ldr	r3, [pc, #132]	; (8000960 <SystemClock_Config+0xc0>)
 80008da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80008de:	4a20      	ldr	r2, [pc, #128]	; (8000960 <SystemClock_Config+0xc0>)
 80008e0:	f023 0318 	bic.w	r3, r3, #24
 80008e4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 80008e8:	2314      	movs	r3, #20
 80008ea:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80008ec:	2301      	movs	r3, #1
 80008ee:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80008f0:	2301      	movs	r3, #1
 80008f2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80008f4:	2300      	movs	r3, #0
 80008f6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80008f8:	2360      	movs	r3, #96	; 0x60
 80008fa:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008fc:	2302      	movs	r3, #2
 80008fe:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000900:	2301      	movs	r3, #1
 8000902:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000904:	2301      	movs	r3, #1
 8000906:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 16;
 8000908:	2310      	movs	r3, #16
 800090a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800090c:	2307      	movs	r3, #7
 800090e:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000910:	2302      	movs	r3, #2
 8000912:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000914:	2302      	movs	r3, #2
 8000916:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000918:	f107 0314 	add.w	r3, r7, #20
 800091c:	4618      	mov	r0, r3
 800091e:	f002 fb9b 	bl	8003058 <HAL_RCC_OscConfig>
 8000922:	4603      	mov	r3, r0
 8000924:	2b00      	cmp	r3, #0
 8000926:	d001      	beq.n	800092c <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8000928:	f000 f97a 	bl	8000c20 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800092c:	230f      	movs	r3, #15
 800092e:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000930:	2303      	movs	r3, #3
 8000932:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000934:	2300      	movs	r3, #0
 8000936:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000938:	2300      	movs	r3, #0
 800093a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800093c:	2300      	movs	r3, #0
 800093e:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000940:	463b      	mov	r3, r7
 8000942:	2101      	movs	r1, #1
 8000944:	4618      	mov	r0, r3
 8000946:	f002 ff9b 	bl	8003880 <HAL_RCC_ClockConfig>
 800094a:	4603      	mov	r3, r0
 800094c:	2b00      	cmp	r3, #0
 800094e:	d001      	beq.n	8000954 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8000950:	f000 f966 	bl	8000c20 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8000954:	f003 fbae 	bl	80040b4 <HAL_RCCEx_EnableMSIPLLMode>
}
 8000958:	bf00      	nop
 800095a:	3758      	adds	r7, #88	; 0x58
 800095c:	46bd      	mov	sp, r7
 800095e:	bd80      	pop	{r7, pc}
 8000960:	40021000 	.word	0x40021000

08000964 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000964:	b580      	push	{r7, lr}
 8000966:	b086      	sub	sp, #24
 8000968:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800096a:	463b      	mov	r3, r7
 800096c:	2200      	movs	r2, #0
 800096e:	601a      	str	r2, [r3, #0]
 8000970:	605a      	str	r2, [r3, #4]
 8000972:	609a      	str	r2, [r3, #8]
 8000974:	60da      	str	r2, [r3, #12]
 8000976:	611a      	str	r2, [r3, #16]
 8000978:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800097a:	4b43      	ldr	r3, [pc, #268]	; (8000a88 <MX_ADC1_Init+0x124>)
 800097c:	4a43      	ldr	r2, [pc, #268]	; (8000a8c <MX_ADC1_Init+0x128>)
 800097e:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000980:	4b41      	ldr	r3, [pc, #260]	; (8000a88 <MX_ADC1_Init+0x124>)
 8000982:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000986:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000988:	4b3f      	ldr	r3, [pc, #252]	; (8000a88 <MX_ADC1_Init+0x124>)
 800098a:	2200      	movs	r2, #0
 800098c:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800098e:	4b3e      	ldr	r3, [pc, #248]	; (8000a88 <MX_ADC1_Init+0x124>)
 8000990:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000994:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000996:	4b3c      	ldr	r3, [pc, #240]	; (8000a88 <MX_ADC1_Init+0x124>)
 8000998:	2200      	movs	r2, #0
 800099a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800099c:	4b3a      	ldr	r3, [pc, #232]	; (8000a88 <MX_ADC1_Init+0x124>)
 800099e:	2200      	movs	r2, #0
 80009a0:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80009a2:	4b39      	ldr	r3, [pc, #228]	; (8000a88 <MX_ADC1_Init+0x124>)
 80009a4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80009a8:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 80009aa:	4b37      	ldr	r3, [pc, #220]	; (8000a88 <MX_ADC1_Init+0x124>)
 80009ac:	2210      	movs	r2, #16
 80009ae:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80009b0:	4b35      	ldr	r3, [pc, #212]	; (8000a88 <MX_ADC1_Init+0x124>)
 80009b2:	2200      	movs	r2, #0
 80009b4:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80009b6:	4b34      	ldr	r3, [pc, #208]	; (8000a88 <MX_ADC1_Init+0x124>)
 80009b8:	2200      	movs	r2, #0
 80009ba:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80009bc:	4b32      	ldr	r3, [pc, #200]	; (8000a88 <MX_ADC1_Init+0x124>)
 80009be:	2200      	movs	r2, #0
 80009c0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80009c2:	4b31      	ldr	r3, [pc, #196]	; (8000a88 <MX_ADC1_Init+0x124>)
 80009c4:	2207      	movs	r2, #7
 80009c6:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80009c8:	4b2f      	ldr	r3, [pc, #188]	; (8000a88 <MX_ADC1_Init+0x124>)
 80009ca:	2200      	movs	r2, #0
 80009cc:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80009ce:	4b2e      	ldr	r3, [pc, #184]	; (8000a88 <MX_ADC1_Init+0x124>)
 80009d0:	2208      	movs	r2, #8
 80009d2:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80009d4:	482c      	ldr	r0, [pc, #176]	; (8000a88 <MX_ADC1_Init+0x124>)
 80009d6:	f003 fc6f 	bl	80042b8 <HAL_SPI_Init>
 80009da:	4603      	mov	r3, r0
 80009dc:	2b00      	cmp	r3, #0
 80009de:	d001      	beq.n	80009e4 <MX_ADC1_Init+0x80>
  {
    Error_Handler();
 80009e0:	f000 f91e 	bl	8000c20 <Error_Handler>
  
  /* USER CODE END SPI1_Init 2 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80009e4:	4b2a      	ldr	r3, [pc, #168]	; (8000a90 <MX_ADC1_Init+0x12c>)
 80009e6:	4a2b      	ldr	r2, [pc, #172]	; (8000a94 <MX_ADC1_Init+0x130>)
 80009e8:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80009ea:	4b29      	ldr	r3, [pc, #164]	; (8000a90 <MX_ADC1_Init+0x12c>)
 80009ec:	2200      	movs	r2, #0
 80009ee:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80009f0:	4b27      	ldr	r3, [pc, #156]	; (8000a90 <MX_ADC1_Init+0x12c>)
 80009f2:	2200      	movs	r2, #0
 80009f4:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80009f6:	4b26      	ldr	r3, [pc, #152]	; (8000a90 <MX_ADC1_Init+0x12c>)
 80009f8:	2200      	movs	r2, #0
 80009fa:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80009fc:	4b24      	ldr	r3, [pc, #144]	; (8000a90 <MX_ADC1_Init+0x12c>)
 80009fe:	2200      	movs	r2, #0
 8000a00:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000a02:	4b23      	ldr	r3, [pc, #140]	; (8000a90 <MX_ADC1_Init+0x12c>)
 8000a04:	2204      	movs	r2, #4
 8000a06:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000a08:	4b21      	ldr	r3, [pc, #132]	; (8000a90 <MX_ADC1_Init+0x12c>)
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000a0e:	4b20      	ldr	r3, [pc, #128]	; (8000a90 <MX_ADC1_Init+0x12c>)
 8000a10:	2200      	movs	r2, #0
 8000a12:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8000a14:	4b1e      	ldr	r3, [pc, #120]	; (8000a90 <MX_ADC1_Init+0x12c>)
 8000a16:	2201      	movs	r2, #1
 8000a18:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000a1a:	4b1d      	ldr	r3, [pc, #116]	; (8000a90 <MX_ADC1_Init+0x12c>)
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000a22:	4b1b      	ldr	r3, [pc, #108]	; (8000a90 <MX_ADC1_Init+0x12c>)
 8000a24:	2200      	movs	r2, #0
 8000a26:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000a28:	4b19      	ldr	r3, [pc, #100]	; (8000a90 <MX_ADC1_Init+0x12c>)
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000a2e:	4b18      	ldr	r3, [pc, #96]	; (8000a90 <MX_ADC1_Init+0x12c>)
 8000a30:	2200      	movs	r2, #0
 8000a32:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000a36:	4b16      	ldr	r3, [pc, #88]	; (8000a90 <MX_ADC1_Init+0x12c>)
 8000a38:	2200      	movs	r2, #0
 8000a3a:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000a3c:	4b14      	ldr	r3, [pc, #80]	; (8000a90 <MX_ADC1_Init+0x12c>)
 8000a3e:	2200      	movs	r2, #0
 8000a40:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000a44:	4812      	ldr	r0, [pc, #72]	; (8000a90 <MX_ADC1_Init+0x12c>)
 8000a46:	f000 ffcf 	bl	80019e8 <HAL_ADC_Init>
 8000a4a:	4603      	mov	r3, r0
 8000a4c:	2b00      	cmp	r3, #0
 8000a4e:	d001      	beq.n	8000a54 <MX_ADC1_Init+0xf0>
  {
    Error_Handler();
 8000a50:	f000 f8e6 	bl	8000c20 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8000a54:	4b10      	ldr	r3, [pc, #64]	; (8000a98 <MX_ADC1_Init+0x134>)
 8000a56:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000a58:	2306      	movs	r3, #6
 8000a5a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000a60:	237f      	movs	r3, #127	; 0x7f
 8000a62:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000a64:	2304      	movs	r3, #4
 8000a66:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000a68:	2300      	movs	r3, #0
 8000a6a:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a6c:	463b      	mov	r3, r7
 8000a6e:	4619      	mov	r1, r3
 8000a70:	4807      	ldr	r0, [pc, #28]	; (8000a90 <MX_ADC1_Init+0x12c>)
 8000a72:	f001 fa01 	bl	8001e78 <HAL_ADC_ConfigChannel>
 8000a76:	4603      	mov	r3, r0
 8000a78:	2b00      	cmp	r3, #0
 8000a7a:	d001      	beq.n	8000a80 <MX_ADC1_Init+0x11c>
  {
    Error_Handler();
 8000a7c:	f000 f8d0 	bl	8000c20 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000a80:	bf00      	nop
 8000a82:	3718      	adds	r7, #24
 8000a84:	46bd      	mov	sp, r7
 8000a86:	bd80      	pop	{r7, pc}
 8000a88:	2000008c 	.word	0x2000008c
 8000a8c:	40013000 	.word	0x40013000
 8000a90:	200000f0 	.word	0x200000f0
 8000a94:	50040000 	.word	0x50040000
 8000a98:	32601000 	.word	0x32601000

08000a9c <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	b08a      	sub	sp, #40	; 0x28
 8000aa0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000aa2:	1d3b      	adds	r3, r7, #4
 8000aa4:	2224      	movs	r2, #36	; 0x24
 8000aa6:	2100      	movs	r1, #0
 8000aa8:	4618      	mov	r0, r3
 8000aaa:	f004 fbcf 	bl	800524c <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 8000aae:	4b12      	ldr	r3, [pc, #72]	; (8000af8 <MX_DAC1_Init+0x5c>)
 8000ab0:	4a12      	ldr	r2, [pc, #72]	; (8000afc <MX_DAC1_Init+0x60>)
 8000ab2:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8000ab4:	4810      	ldr	r0, [pc, #64]	; (8000af8 <MX_DAC1_Init+0x5c>)
 8000ab6:	f001 ff2a 	bl	800290e <HAL_DAC_Init>
 8000aba:	4603      	mov	r3, r0
 8000abc:	2b00      	cmp	r3, #0
 8000abe:	d001      	beq.n	8000ac4 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8000ac0:	f000 f8ae 	bl	8000c20 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8000ac4:	2300      	movs	r3, #0
 8000ac6:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8000ac8:	2300      	movs	r3, #0
 8000aca:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000acc:	2300      	movs	r3, #0
 8000ace:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 8000ad0:	2300      	movs	r3, #0
 8000ad2:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8000ad4:	2300      	movs	r3, #0
 8000ad6:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000ad8:	1d3b      	adds	r3, r7, #4
 8000ada:	2200      	movs	r2, #0
 8000adc:	4619      	mov	r1, r3
 8000ade:	4806      	ldr	r0, [pc, #24]	; (8000af8 <MX_DAC1_Init+0x5c>)
 8000ae0:	f001 ffa9 	bl	8002a36 <HAL_DAC_ConfigChannel>
 8000ae4:	4603      	mov	r3, r0
 8000ae6:	2b00      	cmp	r3, #0
 8000ae8:	d001      	beq.n	8000aee <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 8000aea:	f000 f899 	bl	8000c20 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8000aee:	bf00      	nop
 8000af0:	3728      	adds	r7, #40	; 0x28
 8000af2:	46bd      	mov	sp, r7
 8000af4:	bd80      	pop	{r7, pc}
 8000af6:	bf00      	nop
 8000af8:	20000154 	.word	0x20000154
 8000afc:	40007400 	.word	0x40007400

08000b00 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000b04:	4b14      	ldr	r3, [pc, #80]	; (8000b58 <MX_USART2_UART_Init+0x58>)
 8000b06:	4a15      	ldr	r2, [pc, #84]	; (8000b5c <MX_USART2_UART_Init+0x5c>)
 8000b08:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000b0a:	4b13      	ldr	r3, [pc, #76]	; (8000b58 <MX_USART2_UART_Init+0x58>)
 8000b0c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000b10:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000b12:	4b11      	ldr	r3, [pc, #68]	; (8000b58 <MX_USART2_UART_Init+0x58>)
 8000b14:	2200      	movs	r2, #0
 8000b16:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000b18:	4b0f      	ldr	r3, [pc, #60]	; (8000b58 <MX_USART2_UART_Init+0x58>)
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000b1e:	4b0e      	ldr	r3, [pc, #56]	; (8000b58 <MX_USART2_UART_Init+0x58>)
 8000b20:	2200      	movs	r2, #0
 8000b22:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000b24:	4b0c      	ldr	r3, [pc, #48]	; (8000b58 <MX_USART2_UART_Init+0x58>)
 8000b26:	220c      	movs	r2, #12
 8000b28:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b2a:	4b0b      	ldr	r3, [pc, #44]	; (8000b58 <MX_USART2_UART_Init+0x58>)
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b30:	4b09      	ldr	r3, [pc, #36]	; (8000b58 <MX_USART2_UART_Init+0x58>)
 8000b32:	2200      	movs	r2, #0
 8000b34:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000b36:	4b08      	ldr	r3, [pc, #32]	; (8000b58 <MX_USART2_UART_Init+0x58>)
 8000b38:	2200      	movs	r2, #0
 8000b3a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000b3c:	4b06      	ldr	r3, [pc, #24]	; (8000b58 <MX_USART2_UART_Init+0x58>)
 8000b3e:	2200      	movs	r2, #0
 8000b40:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000b42:	4805      	ldr	r0, [pc, #20]	; (8000b58 <MX_USART2_UART_Init+0x58>)
 8000b44:	f003 ff2e 	bl	80049a4 <HAL_UART_Init>
 8000b48:	4603      	mov	r3, r0
 8000b4a:	2b00      	cmp	r3, #0
 8000b4c:	d001      	beq.n	8000b52 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000b4e:	f000 f867 	bl	8000c20 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000b52:	bf00      	nop
 8000b54:	bd80      	pop	{r7, pc}
 8000b56:	bf00      	nop
 8000b58:	20000168 	.word	0x20000168
 8000b5c:	40004400 	.word	0x40004400

08000b60 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	b088      	sub	sp, #32
 8000b64:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b66:	f107 030c 	add.w	r3, r7, #12
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	601a      	str	r2, [r3, #0]
 8000b6e:	605a      	str	r2, [r3, #4]
 8000b70:	609a      	str	r2, [r3, #8]
 8000b72:	60da      	str	r2, [r3, #12]
 8000b74:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b76:	4b28      	ldr	r3, [pc, #160]	; (8000c18 <MX_GPIO_Init+0xb8>)
 8000b78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b7a:	4a27      	ldr	r2, [pc, #156]	; (8000c18 <MX_GPIO_Init+0xb8>)
 8000b7c:	f043 0304 	orr.w	r3, r3, #4
 8000b80:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b82:	4b25      	ldr	r3, [pc, #148]	; (8000c18 <MX_GPIO_Init+0xb8>)
 8000b84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b86:	f003 0304 	and.w	r3, r3, #4
 8000b8a:	60bb      	str	r3, [r7, #8]
 8000b8c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b8e:	4b22      	ldr	r3, [pc, #136]	; (8000c18 <MX_GPIO_Init+0xb8>)
 8000b90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b92:	4a21      	ldr	r2, [pc, #132]	; (8000c18 <MX_GPIO_Init+0xb8>)
 8000b94:	f043 0301 	orr.w	r3, r3, #1
 8000b98:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b9a:	4b1f      	ldr	r3, [pc, #124]	; (8000c18 <MX_GPIO_Init+0xb8>)
 8000b9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b9e:	f003 0301 	and.w	r3, r3, #1
 8000ba2:	607b      	str	r3, [r7, #4]
 8000ba4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ba6:	4b1c      	ldr	r3, [pc, #112]	; (8000c18 <MX_GPIO_Init+0xb8>)
 8000ba8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000baa:	4a1b      	ldr	r2, [pc, #108]	; (8000c18 <MX_GPIO_Init+0xb8>)
 8000bac:	f043 0302 	orr.w	r3, r3, #2
 8000bb0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000bb2:	4b19      	ldr	r3, [pc, #100]	; (8000c18 <MX_GPIO_Init+0xb8>)
 8000bb4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bb6:	f003 0302 	and.w	r3, r3, #2
 8000bba:	603b      	str	r3, [r7, #0]
 8000bbc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_RED_Pin|LED_BLUE_Pin|SPI1_SCK_Pin, GPIO_PIN_RESET);
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	212a      	movs	r1, #42	; 0x2a
 8000bc2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000bc6:	f002 f9bb 	bl	8002f40 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|SSD1331_CS_Pin|SSD1331_DC_Pin|SSD1331_RES_Pin, GPIO_PIN_RESET);
 8000bca:	2200      	movs	r2, #0
 8000bcc:	2178      	movs	r1, #120	; 0x78
 8000bce:	4813      	ldr	r0, [pc, #76]	; (8000c1c <MX_GPIO_Init+0xbc>)
 8000bd0:	f002 f9b6 	bl	8002f40 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED_RED_Pin LED_BLUE_Pin SPI1_SCK_Pin */
  GPIO_InitStruct.Pin = LED_RED_Pin|LED_BLUE_Pin|SPI1_SCK_Pin;
 8000bd4:	232a      	movs	r3, #42	; 0x2a
 8000bd6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bd8:	2301      	movs	r3, #1
 8000bda:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bdc:	2300      	movs	r3, #0
 8000bde:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000be0:	2300      	movs	r3, #0
 8000be2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000be4:	f107 030c 	add.w	r3, r7, #12
 8000be8:	4619      	mov	r1, r3
 8000bea:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000bee:	f002 f83d 	bl	8002c6c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin SSD1331_CS_Pin SSD1331_DC_Pin SSD1331_RES_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|SSD1331_CS_Pin|SSD1331_DC_Pin|SSD1331_RES_Pin;
 8000bf2:	2378      	movs	r3, #120	; 0x78
 8000bf4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bf6:	2301      	movs	r3, #1
 8000bf8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bfe:	2300      	movs	r3, #0
 8000c00:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c02:	f107 030c 	add.w	r3, r7, #12
 8000c06:	4619      	mov	r1, r3
 8000c08:	4804      	ldr	r0, [pc, #16]	; (8000c1c <MX_GPIO_Init+0xbc>)
 8000c0a:	f002 f82f 	bl	8002c6c <HAL_GPIO_Init>

}
 8000c0e:	bf00      	nop
 8000c10:	3720      	adds	r7, #32
 8000c12:	46bd      	mov	sp, r7
 8000c14:	bd80      	pop	{r7, pc}
 8000c16:	bf00      	nop
 8000c18:	40021000 	.word	0x40021000
 8000c1c:	48000400 	.word	0x48000400

08000c20 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c20:	b480      	push	{r7}
 8000c22:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c24:	b672      	cpsid	i
}
 8000c26:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c28:	e7fe      	b.n	8000c28 <Error_Handler+0x8>
	...

08000c2c <ssd1331_write_byte>:
   *						   0: Writes to the command register
   *						   1: Writes to the display data ram
   * @retval None
 **/
static void ssd1331_write_byte(uint8_t chData, uint8_t chCmd)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	b082      	sub	sp, #8
 8000c30:	af00      	add	r7, sp, #0
 8000c32:	4603      	mov	r3, r0
 8000c34:	460a      	mov	r2, r1
 8000c36:	71fb      	strb	r3, [r7, #7]
 8000c38:	4613      	mov	r3, r2
 8000c3a:	71bb      	strb	r3, [r7, #6]
	if (chCmd) {
 8000c3c:	79bb      	ldrb	r3, [r7, #6]
 8000c3e:	2b00      	cmp	r3, #0
 8000c40:	d005      	beq.n	8000c4e <ssd1331_write_byte+0x22>
	 	__SSD1331_DC_SET();
 8000c42:	2201      	movs	r2, #1
 8000c44:	2120      	movs	r1, #32
 8000c46:	4811      	ldr	r0, [pc, #68]	; (8000c8c <ssd1331_write_byte+0x60>)
 8000c48:	f002 f97a 	bl	8002f40 <HAL_GPIO_WritePin>
 8000c4c:	e004      	b.n	8000c58 <ssd1331_write_byte+0x2c>
	} else {
	 	__SSD1331_DC_CLR();
 8000c4e:	2200      	movs	r2, #0
 8000c50:	2120      	movs	r1, #32
 8000c52:	480e      	ldr	r0, [pc, #56]	; (8000c8c <ssd1331_write_byte+0x60>)
 8000c54:	f002 f974 	bl	8002f40 <HAL_GPIO_WritePin>
	}

	__SSD1331_CS_CLR();
 8000c58:	2200      	movs	r2, #0
 8000c5a:	2110      	movs	r1, #16
 8000c5c:	480b      	ldr	r0, [pc, #44]	; (8000c8c <ssd1331_write_byte+0x60>)
 8000c5e:	f002 f96f 	bl	8002f40 <HAL_GPIO_WritePin>
	__SSD1331_WRITE_BYTE(chData);
 8000c62:	1df9      	adds	r1, r7, #7
 8000c64:	2364      	movs	r3, #100	; 0x64
 8000c66:	2201      	movs	r2, #1
 8000c68:	4809      	ldr	r0, [pc, #36]	; (8000c90 <ssd1331_write_byte+0x64>)
 8000c6a:	f003 fbc8 	bl	80043fe <HAL_SPI_Transmit>

	__SSD1331_CS_SET();
 8000c6e:	2201      	movs	r2, #1
 8000c70:	2110      	movs	r1, #16
 8000c72:	4806      	ldr	r0, [pc, #24]	; (8000c8c <ssd1331_write_byte+0x60>)
 8000c74:	f002 f964 	bl	8002f40 <HAL_GPIO_WritePin>
	__SSD1331_DC_SET();
 8000c78:	2201      	movs	r2, #1
 8000c7a:	2120      	movs	r1, #32
 8000c7c:	4803      	ldr	r0, [pc, #12]	; (8000c8c <ssd1331_write_byte+0x60>)
 8000c7e:	f002 f95f 	bl	8002f40 <HAL_GPIO_WritePin>
}
 8000c82:	bf00      	nop
 8000c84:	3708      	adds	r7, #8
 8000c86:	46bd      	mov	sp, r7
 8000c88:	bd80      	pop	{r7, pc}
 8000c8a:	bf00      	nop
 8000c8c:	48000400 	.word	0x48000400
 8000c90:	2000008c 	.word	0x2000008c

08000c94 <ssd1331_draw_point>:

void ssd1331_draw_point(uint8_t chXpos, uint8_t chYpos, uint16_t hwColor)
{
 8000c94:	b580      	push	{r7, lr}
 8000c96:	b082      	sub	sp, #8
 8000c98:	af00      	add	r7, sp, #0
 8000c9a:	4603      	mov	r3, r0
 8000c9c:	71fb      	strb	r3, [r7, #7]
 8000c9e:	460b      	mov	r3, r1
 8000ca0:	71bb      	strb	r3, [r7, #6]
 8000ca2:	4613      	mov	r3, r2
 8000ca4:	80bb      	strh	r3, [r7, #4]
	if (chXpos >= OLED_WIDTH || chYpos >= OLED_HEIGHT) {
 8000ca6:	79fb      	ldrb	r3, [r7, #7]
 8000ca8:	2b5f      	cmp	r3, #95	; 0x5f
 8000caa:	d82b      	bhi.n	8000d04 <ssd1331_draw_point+0x70>
 8000cac:	79bb      	ldrb	r3, [r7, #6]
 8000cae:	2b3f      	cmp	r3, #63	; 0x3f
 8000cb0:	d828      	bhi.n	8000d04 <ssd1331_draw_point+0x70>
		return;
	}

    //set column point
    ssd1331_write_byte(SET_COLUMN_ADDRESS, SSD1331_CMD);
 8000cb2:	2100      	movs	r1, #0
 8000cb4:	2015      	movs	r0, #21
 8000cb6:	f7ff ffb9 	bl	8000c2c <ssd1331_write_byte>
    ssd1331_write_byte(chXpos, SSD1331_CMD);
 8000cba:	79fb      	ldrb	r3, [r7, #7]
 8000cbc:	2100      	movs	r1, #0
 8000cbe:	4618      	mov	r0, r3
 8000cc0:	f7ff ffb4 	bl	8000c2c <ssd1331_write_byte>
    ssd1331_write_byte(OLED_WIDTH - 1, SSD1331_CMD);
 8000cc4:	2100      	movs	r1, #0
 8000cc6:	205f      	movs	r0, #95	; 0x5f
 8000cc8:	f7ff ffb0 	bl	8000c2c <ssd1331_write_byte>
    //set row point
    ssd1331_write_byte(SET_ROW_ADDRESS, SSD1331_CMD);
 8000ccc:	2100      	movs	r1, #0
 8000cce:	2075      	movs	r0, #117	; 0x75
 8000cd0:	f7ff ffac 	bl	8000c2c <ssd1331_write_byte>
    ssd1331_write_byte(chYpos, SSD1331_CMD);
 8000cd4:	79bb      	ldrb	r3, [r7, #6]
 8000cd6:	2100      	movs	r1, #0
 8000cd8:	4618      	mov	r0, r3
 8000cda:	f7ff ffa7 	bl	8000c2c <ssd1331_write_byte>
    ssd1331_write_byte(OLED_HEIGHT - 1, SSD1331_CMD);
 8000cde:	2100      	movs	r1, #0
 8000ce0:	203f      	movs	r0, #63	; 0x3f
 8000ce2:	f7ff ffa3 	bl	8000c2c <ssd1331_write_byte>

    //fill 16bit colour
	ssd1331_write_byte(hwColor >> 8, SSD1331_DATA);
 8000ce6:	88bb      	ldrh	r3, [r7, #4]
 8000ce8:	0a1b      	lsrs	r3, r3, #8
 8000cea:	b29b      	uxth	r3, r3
 8000cec:	b2db      	uxtb	r3, r3
 8000cee:	2101      	movs	r1, #1
 8000cf0:	4618      	mov	r0, r3
 8000cf2:	f7ff ff9b 	bl	8000c2c <ssd1331_write_byte>
	ssd1331_write_byte(hwColor, SSD1331_DATA);
 8000cf6:	88bb      	ldrh	r3, [r7, #4]
 8000cf8:	b2db      	uxtb	r3, r3
 8000cfa:	2101      	movs	r1, #1
 8000cfc:	4618      	mov	r0, r3
 8000cfe:	f7ff ff95 	bl	8000c2c <ssd1331_write_byte>
 8000d02:	e000      	b.n	8000d06 <ssd1331_draw_point+0x72>
		return;
 8000d04:	bf00      	nop
}
 8000d06:	3708      	adds	r7, #8
 8000d08:	46bd      	mov	sp, r7
 8000d0a:	bd80      	pop	{r7, pc}

08000d0c <ssd1331_display_char>:
  * @param  chSize:
  * @param  chMode
  * @retval
**/
void ssd1331_display_char(uint8_t chXpos, uint8_t chYpos, uint8_t chChr, uint8_t chSize, uint16_t hwColor)
{
 8000d0c:	b590      	push	{r4, r7, lr}
 8000d0e:	b085      	sub	sp, #20
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	4604      	mov	r4, r0
 8000d14:	4608      	mov	r0, r1
 8000d16:	4611      	mov	r1, r2
 8000d18:	461a      	mov	r2, r3
 8000d1a:	4623      	mov	r3, r4
 8000d1c:	71fb      	strb	r3, [r7, #7]
 8000d1e:	4603      	mov	r3, r0
 8000d20:	71bb      	strb	r3, [r7, #6]
 8000d22:	460b      	mov	r3, r1
 8000d24:	717b      	strb	r3, [r7, #5]
 8000d26:	4613      	mov	r3, r2
 8000d28:	713b      	strb	r3, [r7, #4]
	uint8_t i, j, chTemp;
	uint8_t chYpos0 = chYpos;
 8000d2a:	79bb      	ldrb	r3, [r7, #6]
 8000d2c:	733b      	strb	r3, [r7, #12]

	chTemp = 0;
 8000d2e:	2300      	movs	r3, #0
 8000d30:	737b      	strb	r3, [r7, #13]
	if (chXpos >= OLED_WIDTH || chYpos >= OLED_HEIGHT) {
 8000d32:	79fb      	ldrb	r3, [r7, #7]
 8000d34:	2b5f      	cmp	r3, #95	; 0x5f
 8000d36:	d857      	bhi.n	8000de8 <ssd1331_display_char+0xdc>
 8000d38:	79bb      	ldrb	r3, [r7, #6]
 8000d3a:	2b3f      	cmp	r3, #63	; 0x3f
 8000d3c:	d854      	bhi.n	8000de8 <ssd1331_display_char+0xdc>
		return;
	}

    for (i = 0; i < chSize; i ++) {
 8000d3e:	2300      	movs	r3, #0
 8000d40:	73fb      	strb	r3, [r7, #15]
 8000d42:	e04c      	b.n	8000dde <ssd1331_display_char+0xd2>
		if (FONT_1206 == chSize) {
 8000d44:	793b      	ldrb	r3, [r7, #4]
 8000d46:	2b0c      	cmp	r3, #12
 8000d48:	d10d      	bne.n	8000d66 <ssd1331_display_char+0x5a>
			chTemp = c_chFont1206[chChr - 0x20][i];
 8000d4a:	797b      	ldrb	r3, [r7, #5]
 8000d4c:	f1a3 0220 	sub.w	r2, r3, #32
 8000d50:	7bf9      	ldrb	r1, [r7, #15]
 8000d52:	4827      	ldr	r0, [pc, #156]	; (8000df0 <ssd1331_display_char+0xe4>)
 8000d54:	4613      	mov	r3, r2
 8000d56:	005b      	lsls	r3, r3, #1
 8000d58:	4413      	add	r3, r2
 8000d5a:	009b      	lsls	r3, r3, #2
 8000d5c:	4403      	add	r3, r0
 8000d5e:	440b      	add	r3, r1
 8000d60:	781b      	ldrb	r3, [r3, #0]
 8000d62:	737b      	strb	r3, [r7, #13]
 8000d64:	e00c      	b.n	8000d80 <ssd1331_display_char+0x74>
		} else if (FONT_1608 == chSize) {
 8000d66:	793b      	ldrb	r3, [r7, #4]
 8000d68:	2b10      	cmp	r3, #16
 8000d6a:	d109      	bne.n	8000d80 <ssd1331_display_char+0x74>
			chTemp = c_chFont1608[chChr - 0x20][i];
 8000d6c:	797b      	ldrb	r3, [r7, #5]
 8000d6e:	f1a3 0220 	sub.w	r2, r3, #32
 8000d72:	7bfb      	ldrb	r3, [r7, #15]
 8000d74:	491f      	ldr	r1, [pc, #124]	; (8000df4 <ssd1331_display_char+0xe8>)
 8000d76:	0112      	lsls	r2, r2, #4
 8000d78:	440a      	add	r2, r1
 8000d7a:	4413      	add	r3, r2
 8000d7c:	781b      	ldrb	r3, [r3, #0]
 8000d7e:	737b      	strb	r3, [r7, #13]
		}

        for (j = 0; j < 8; j ++) {
 8000d80:	2300      	movs	r3, #0
 8000d82:	73bb      	strb	r3, [r7, #14]
 8000d84:	e025      	b.n	8000dd2 <ssd1331_display_char+0xc6>
    		if (chTemp & 0x80) {
 8000d86:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	da06      	bge.n	8000d9c <ssd1331_display_char+0x90>
		  ssd1331_draw_point(chXpos, chYpos, hwColor);
 8000d8e:	8c3a      	ldrh	r2, [r7, #32]
 8000d90:	79b9      	ldrb	r1, [r7, #6]
 8000d92:	79fb      	ldrb	r3, [r7, #7]
 8000d94:	4618      	mov	r0, r3
 8000d96:	f7ff ff7d 	bl	8000c94 <ssd1331_draw_point>
 8000d9a:	e005      	b.n	8000da8 <ssd1331_display_char+0x9c>
    		} else {
		  ssd1331_draw_point(chXpos, chYpos, 0);
 8000d9c:	79b9      	ldrb	r1, [r7, #6]
 8000d9e:	79fb      	ldrb	r3, [r7, #7]
 8000da0:	2200      	movs	r2, #0
 8000da2:	4618      	mov	r0, r3
 8000da4:	f7ff ff76 	bl	8000c94 <ssd1331_draw_point>
		}
			chTemp <<= 1;
 8000da8:	7b7b      	ldrb	r3, [r7, #13]
 8000daa:	005b      	lsls	r3, r3, #1
 8000dac:	737b      	strb	r3, [r7, #13]
			chYpos ++;
 8000dae:	79bb      	ldrb	r3, [r7, #6]
 8000db0:	3301      	adds	r3, #1
 8000db2:	71bb      	strb	r3, [r7, #6]
			if ((chYpos - chYpos0) == chSize) {
 8000db4:	79ba      	ldrb	r2, [r7, #6]
 8000db6:	7b3b      	ldrb	r3, [r7, #12]
 8000db8:	1ad2      	subs	r2, r2, r3
 8000dba:	793b      	ldrb	r3, [r7, #4]
 8000dbc:	429a      	cmp	r2, r3
 8000dbe:	d105      	bne.n	8000dcc <ssd1331_display_char+0xc0>
				chYpos = chYpos0;
 8000dc0:	7b3b      	ldrb	r3, [r7, #12]
 8000dc2:	71bb      	strb	r3, [r7, #6]
				chXpos ++;
 8000dc4:	79fb      	ldrb	r3, [r7, #7]
 8000dc6:	3301      	adds	r3, #1
 8000dc8:	71fb      	strb	r3, [r7, #7]
				break;
 8000dca:	e005      	b.n	8000dd8 <ssd1331_display_char+0xcc>
        for (j = 0; j < 8; j ++) {
 8000dcc:	7bbb      	ldrb	r3, [r7, #14]
 8000dce:	3301      	adds	r3, #1
 8000dd0:	73bb      	strb	r3, [r7, #14]
 8000dd2:	7bbb      	ldrb	r3, [r7, #14]
 8000dd4:	2b07      	cmp	r3, #7
 8000dd6:	d9d6      	bls.n	8000d86 <ssd1331_display_char+0x7a>
    for (i = 0; i < chSize; i ++) {
 8000dd8:	7bfb      	ldrb	r3, [r7, #15]
 8000dda:	3301      	adds	r3, #1
 8000ddc:	73fb      	strb	r3, [r7, #15]
 8000dde:	7bfa      	ldrb	r2, [r7, #15]
 8000de0:	793b      	ldrb	r3, [r7, #4]
 8000de2:	429a      	cmp	r2, r3
 8000de4:	d3ae      	bcc.n	8000d44 <ssd1331_display_char+0x38>
 8000de6:	e000      	b.n	8000dea <ssd1331_display_char+0xde>
		return;
 8000de8:	bf00      	nop
			}
		}
    }
}
 8000dea:	3714      	adds	r7, #20
 8000dec:	46bd      	mov	sp, r7
 8000dee:	bd90      	pop	{r4, r7, pc}
 8000df0:	08006414 	.word	0x08006414
 8000df4:	08006888 	.word	0x08006888

08000df8 <ssd1331_display_string>:
  * @param  pchString: Pointer to a string to display on the screen
  *
  * @retval  None
**/
void ssd1331_display_string(uint8_t chXpos, uint8_t chYpos, const char *pchString, uint8_t chSize, uint16_t hwColor)
{
 8000df8:	b590      	push	{r4, r7, lr}
 8000dfa:	b085      	sub	sp, #20
 8000dfc:	af02      	add	r7, sp, #8
 8000dfe:	603a      	str	r2, [r7, #0]
 8000e00:	461a      	mov	r2, r3
 8000e02:	4603      	mov	r3, r0
 8000e04:	71fb      	strb	r3, [r7, #7]
 8000e06:	460b      	mov	r3, r1
 8000e08:	71bb      	strb	r3, [r7, #6]
 8000e0a:	4613      	mov	r3, r2
 8000e0c:	717b      	strb	r3, [r7, #5]
	if (chXpos >= OLED_WIDTH || chYpos >= OLED_HEIGHT) {
 8000e0e:	79fb      	ldrb	r3, [r7, #7]
 8000e10:	2b5f      	cmp	r3, #95	; 0x5f
 8000e12:	d836      	bhi.n	8000e82 <ssd1331_display_string+0x8a>
 8000e14:	79bb      	ldrb	r3, [r7, #6]
 8000e16:	2b3f      	cmp	r3, #63	; 0x3f
 8000e18:	d833      	bhi.n	8000e82 <ssd1331_display_string+0x8a>
		return;
	}

    while (*pchString != '\0') {
 8000e1a:	e02d      	b.n	8000e78 <ssd1331_display_string+0x80>
        if (chXpos > (OLED_WIDTH - chSize / 2)) {
 8000e1c:	79fa      	ldrb	r2, [r7, #7]
 8000e1e:	797b      	ldrb	r3, [r7, #5]
 8000e20:	085b      	lsrs	r3, r3, #1
 8000e22:	b2db      	uxtb	r3, r3
 8000e24:	f1c3 0360 	rsb	r3, r3, #96	; 0x60
 8000e28:	429a      	cmp	r2, r3
 8000e2a:	dd12      	ble.n	8000e52 <ssd1331_display_string+0x5a>
			chXpos = 0;
 8000e2c:	2300      	movs	r3, #0
 8000e2e:	71fb      	strb	r3, [r7, #7]
			chYpos += chSize;
 8000e30:	79ba      	ldrb	r2, [r7, #6]
 8000e32:	797b      	ldrb	r3, [r7, #5]
 8000e34:	4413      	add	r3, r2
 8000e36:	71bb      	strb	r3, [r7, #6]
			if (chYpos > (OLED_HEIGHT - chSize)) {
 8000e38:	79ba      	ldrb	r2, [r7, #6]
 8000e3a:	797b      	ldrb	r3, [r7, #5]
 8000e3c:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 8000e40:	429a      	cmp	r2, r3
 8000e42:	dd06      	ble.n	8000e52 <ssd1331_display_string+0x5a>
				chYpos = chXpos = 0;
 8000e44:	2300      	movs	r3, #0
 8000e46:	71fb      	strb	r3, [r7, #7]
 8000e48:	79fb      	ldrb	r3, [r7, #7]
 8000e4a:	71bb      	strb	r3, [r7, #6]
				ssd1331_clear_screen(0x00);
 8000e4c:	2000      	movs	r0, #0
 8000e4e:	f000 f81c 	bl	8000e8a <ssd1331_clear_screen>
			}
		}

        ssd1331_display_char(chXpos, chYpos, *pchString, chSize, hwColor);
 8000e52:	683b      	ldr	r3, [r7, #0]
 8000e54:	781a      	ldrb	r2, [r3, #0]
 8000e56:	797c      	ldrb	r4, [r7, #5]
 8000e58:	79b9      	ldrb	r1, [r7, #6]
 8000e5a:	79f8      	ldrb	r0, [r7, #7]
 8000e5c:	8b3b      	ldrh	r3, [r7, #24]
 8000e5e:	9300      	str	r3, [sp, #0]
 8000e60:	4623      	mov	r3, r4
 8000e62:	f7ff ff53 	bl	8000d0c <ssd1331_display_char>
        chXpos += chSize / 2;
 8000e66:	797b      	ldrb	r3, [r7, #5]
 8000e68:	085b      	lsrs	r3, r3, #1
 8000e6a:	b2da      	uxtb	r2, r3
 8000e6c:	79fb      	ldrb	r3, [r7, #7]
 8000e6e:	4413      	add	r3, r2
 8000e70:	71fb      	strb	r3, [r7, #7]
        pchString ++;
 8000e72:	683b      	ldr	r3, [r7, #0]
 8000e74:	3301      	adds	r3, #1
 8000e76:	603b      	str	r3, [r7, #0]
    while (*pchString != '\0') {
 8000e78:	683b      	ldr	r3, [r7, #0]
 8000e7a:	781b      	ldrb	r3, [r3, #0]
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	d1cd      	bne.n	8000e1c <ssd1331_display_string+0x24>
 8000e80:	e000      	b.n	8000e84 <ssd1331_display_string+0x8c>
		return;
 8000e82:	bf00      	nop
    }
}
 8000e84:	370c      	adds	r7, #12
 8000e86:	46bd      	mov	sp, r7
 8000e88:	bd90      	pop	{r4, r7, pc}

08000e8a <ssd1331_clear_screen>:
        }
    }
}

void ssd1331_clear_screen(uint16_t hwColor)
{
 8000e8a:	b580      	push	{r7, lr}
 8000e8c:	b084      	sub	sp, #16
 8000e8e:	af00      	add	r7, sp, #0
 8000e90:	4603      	mov	r3, r0
 8000e92:	80fb      	strh	r3, [r7, #6]
	uint16_t i, j;

	for(i = 0; i < OLED_HEIGHT; i ++){
 8000e94:	2300      	movs	r3, #0
 8000e96:	81fb      	strh	r3, [r7, #14]
 8000e98:	e013      	b.n	8000ec2 <ssd1331_clear_screen+0x38>
		for(j = 0; j < OLED_WIDTH; j ++){
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	81bb      	strh	r3, [r7, #12]
 8000e9e:	e00a      	b.n	8000eb6 <ssd1331_clear_screen+0x2c>
			ssd1331_draw_point(j, i, hwColor);
 8000ea0:	89bb      	ldrh	r3, [r7, #12]
 8000ea2:	b2db      	uxtb	r3, r3
 8000ea4:	89fa      	ldrh	r2, [r7, #14]
 8000ea6:	b2d1      	uxtb	r1, r2
 8000ea8:	88fa      	ldrh	r2, [r7, #6]
 8000eaa:	4618      	mov	r0, r3
 8000eac:	f7ff fef2 	bl	8000c94 <ssd1331_draw_point>
		for(j = 0; j < OLED_WIDTH; j ++){
 8000eb0:	89bb      	ldrh	r3, [r7, #12]
 8000eb2:	3301      	adds	r3, #1
 8000eb4:	81bb      	strh	r3, [r7, #12]
 8000eb6:	89bb      	ldrh	r3, [r7, #12]
 8000eb8:	2b5f      	cmp	r3, #95	; 0x5f
 8000eba:	d9f1      	bls.n	8000ea0 <ssd1331_clear_screen+0x16>
	for(i = 0; i < OLED_HEIGHT; i ++){
 8000ebc:	89fb      	ldrh	r3, [r7, #14]
 8000ebe:	3301      	adds	r3, #1
 8000ec0:	81fb      	strh	r3, [r7, #14]
 8000ec2:	89fb      	ldrh	r3, [r7, #14]
 8000ec4:	2b3f      	cmp	r3, #63	; 0x3f
 8000ec6:	d9e8      	bls.n	8000e9a <ssd1331_clear_screen+0x10>
		}
	}
}
 8000ec8:	bf00      	nop
 8000eca:	bf00      	nop
 8000ecc:	3710      	adds	r7, #16
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	bd80      	pop	{r7, pc}
	...

08000ed4 <ssd1331_init>:


void ssd1331_init(void)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	af00      	add	r7, sp, #0
  __SSD1331_RES_SET();  //RES set
 8000ed8:	2201      	movs	r2, #1
 8000eda:	2140      	movs	r1, #64	; 0x40
 8000edc:	4852      	ldr	r0, [pc, #328]	; (8001028 <ssd1331_init+0x154>)
 8000ede:	f002 f82f 	bl	8002f40 <HAL_GPIO_WritePin>
  __SSD1331_CS_SET();
 8000ee2:	2201      	movs	r2, #1
 8000ee4:	2110      	movs	r1, #16
 8000ee6:	4850      	ldr	r0, [pc, #320]	; (8001028 <ssd1331_init+0x154>)
 8000ee8:	f002 f82a 	bl	8002f40 <HAL_GPIO_WritePin>

  ssd1331_write_byte(DISPLAY_OFF, SSD1331_CMD);          //Display Off
 8000eec:	2100      	movs	r1, #0
 8000eee:	20ae      	movs	r0, #174	; 0xae
 8000ef0:	f7ff fe9c 	bl	8000c2c <ssd1331_write_byte>
  ssd1331_write_byte(SET_CONTRAST_A, SSD1331_CMD);       //Set contrast for color A
 8000ef4:	2100      	movs	r1, #0
 8000ef6:	2081      	movs	r0, #129	; 0x81
 8000ef8:	f7ff fe98 	bl	8000c2c <ssd1331_write_byte>
  ssd1331_write_byte(0xFF, SSD1331_CMD);                     //145 0x91
 8000efc:	2100      	movs	r1, #0
 8000efe:	20ff      	movs	r0, #255	; 0xff
 8000f00:	f7ff fe94 	bl	8000c2c <ssd1331_write_byte>
  ssd1331_write_byte(SET_CONTRAST_B, SSD1331_CMD);       //Set contrast for color B
 8000f04:	2100      	movs	r1, #0
 8000f06:	2082      	movs	r0, #130	; 0x82
 8000f08:	f7ff fe90 	bl	8000c2c <ssd1331_write_byte>
  ssd1331_write_byte(0xFF, SSD1331_CMD);                     //80 0x50
 8000f0c:	2100      	movs	r1, #0
 8000f0e:	20ff      	movs	r0, #255	; 0xff
 8000f10:	f7ff fe8c 	bl	8000c2c <ssd1331_write_byte>
  ssd1331_write_byte(SET_CONTRAST_C, SSD1331_CMD);       //Set contrast for color C
 8000f14:	2100      	movs	r1, #0
 8000f16:	2083      	movs	r0, #131	; 0x83
 8000f18:	f7ff fe88 	bl	8000c2c <ssd1331_write_byte>
  ssd1331_write_byte(0xFF, SSD1331_CMD);                     //125 0x7D
 8000f1c:	2100      	movs	r1, #0
 8000f1e:	20ff      	movs	r0, #255	; 0xff
 8000f20:	f7ff fe84 	bl	8000c2c <ssd1331_write_byte>
  ssd1331_write_byte(MASTER_CURRENT_CONTROL, SSD1331_CMD);//master current control
 8000f24:	2100      	movs	r1, #0
 8000f26:	2087      	movs	r0, #135	; 0x87
 8000f28:	f7ff fe80 	bl	8000c2c <ssd1331_write_byte>
  ssd1331_write_byte(0x06, SSD1331_CMD);                     //6
 8000f2c:	2100      	movs	r1, #0
 8000f2e:	2006      	movs	r0, #6
 8000f30:	f7ff fe7c 	bl	8000c2c <ssd1331_write_byte>
  ssd1331_write_byte(SET_PRECHARGE_SPEED_A, SSD1331_CMD);//Set Second Pre-change Speed For ColorA
 8000f34:	2100      	movs	r1, #0
 8000f36:	208a      	movs	r0, #138	; 0x8a
 8000f38:	f7ff fe78 	bl	8000c2c <ssd1331_write_byte>
  ssd1331_write_byte(0x64, SSD1331_CMD);                     //100
 8000f3c:	2100      	movs	r1, #0
 8000f3e:	2064      	movs	r0, #100	; 0x64
 8000f40:	f7ff fe74 	bl	8000c2c <ssd1331_write_byte>
  ssd1331_write_byte(SET_PRECHARGE_SPEED_B, SSD1331_CMD);//Set Second Pre-change Speed For ColorB
 8000f44:	2100      	movs	r1, #0
 8000f46:	208b      	movs	r0, #139	; 0x8b
 8000f48:	f7ff fe70 	bl	8000c2c <ssd1331_write_byte>
  ssd1331_write_byte(0x78, SSD1331_CMD);                     //120
 8000f4c:	2100      	movs	r1, #0
 8000f4e:	2078      	movs	r0, #120	; 0x78
 8000f50:	f7ff fe6c 	bl	8000c2c <ssd1331_write_byte>
  ssd1331_write_byte(SET_PRECHARGE_SPEED_C, SSD1331_CMD);//Set Second Pre-change Speed For ColorC
 8000f54:	2100      	movs	r1, #0
 8000f56:	208c      	movs	r0, #140	; 0x8c
 8000f58:	f7ff fe68 	bl	8000c2c <ssd1331_write_byte>
  ssd1331_write_byte(0x64, SSD1331_CMD);                     //100
 8000f5c:	2100      	movs	r1, #0
 8000f5e:	2064      	movs	r0, #100	; 0x64
 8000f60:	f7ff fe64 	bl	8000c2c <ssd1331_write_byte>
  ssd1331_write_byte(SET_REMAP, SSD1331_CMD);            //set remap & data format
 8000f64:	2100      	movs	r1, #0
 8000f66:	20a0      	movs	r0, #160	; 0xa0
 8000f68:	f7ff fe60 	bl	8000c2c <ssd1331_write_byte>
  ssd1331_write_byte(0x72, SSD1331_CMD);                     //0x72
 8000f6c:	2100      	movs	r1, #0
 8000f6e:	2072      	movs	r0, #114	; 0x72
 8000f70:	f7ff fe5c 	bl	8000c2c <ssd1331_write_byte>
  ssd1331_write_byte(SET_DISPLAY_START_LINE, SSD1331_CMD);//Set display Start Line
 8000f74:	2100      	movs	r1, #0
 8000f76:	20a1      	movs	r0, #161	; 0xa1
 8000f78:	f7ff fe58 	bl	8000c2c <ssd1331_write_byte>
  ssd1331_write_byte(0x0, SSD1331_CMD);
 8000f7c:	2100      	movs	r1, #0
 8000f7e:	2000      	movs	r0, #0
 8000f80:	f7ff fe54 	bl	8000c2c <ssd1331_write_byte>
  ssd1331_write_byte(SET_DISPLAY_OFFSET, SSD1331_CMD);   //Set display offset
 8000f84:	2100      	movs	r1, #0
 8000f86:	20a2      	movs	r0, #162	; 0xa2
 8000f88:	f7ff fe50 	bl	8000c2c <ssd1331_write_byte>
  ssd1331_write_byte(0x0, SSD1331_CMD);
 8000f8c:	2100      	movs	r1, #0
 8000f8e:	2000      	movs	r0, #0
 8000f90:	f7ff fe4c 	bl	8000c2c <ssd1331_write_byte>
  ssd1331_write_byte(NORMAL_DISPLAY, SSD1331_CMD);       //Set display mode
 8000f94:	2100      	movs	r1, #0
 8000f96:	20a4      	movs	r0, #164	; 0xa4
 8000f98:	f7ff fe48 	bl	8000c2c <ssd1331_write_byte>
  ssd1331_write_byte(SET_MULTIPLEX_RATIO, SSD1331_CMD);  //Set multiplex ratio
 8000f9c:	2100      	movs	r1, #0
 8000f9e:	20a8      	movs	r0, #168	; 0xa8
 8000fa0:	f7ff fe44 	bl	8000c2c <ssd1331_write_byte>
  ssd1331_write_byte(0x3F, SSD1331_CMD);
 8000fa4:	2100      	movs	r1, #0
 8000fa6:	203f      	movs	r0, #63	; 0x3f
 8000fa8:	f7ff fe40 	bl	8000c2c <ssd1331_write_byte>
  ssd1331_write_byte(SET_MASTER_CONFIGURE, SSD1331_CMD); //Set master configuration
 8000fac:	2100      	movs	r1, #0
 8000fae:	20ad      	movs	r0, #173	; 0xad
 8000fb0:	f7ff fe3c 	bl	8000c2c <ssd1331_write_byte>
  ssd1331_write_byte(0x8E, SSD1331_CMD);
 8000fb4:	2100      	movs	r1, #0
 8000fb6:	208e      	movs	r0, #142	; 0x8e
 8000fb8:	f7ff fe38 	bl	8000c2c <ssd1331_write_byte>
  ssd1331_write_byte(POWER_SAVE_MODE, SSD1331_CMD);      //Set Power Save Mode
 8000fbc:	2100      	movs	r1, #0
 8000fbe:	20b0      	movs	r0, #176	; 0xb0
 8000fc0:	f7ff fe34 	bl	8000c2c <ssd1331_write_byte>
  ssd1331_write_byte(0x00, SSD1331_CMD);                     //0x00
 8000fc4:	2100      	movs	r1, #0
 8000fc6:	2000      	movs	r0, #0
 8000fc8:	f7ff fe30 	bl	8000c2c <ssd1331_write_byte>
  ssd1331_write_byte(PHASE_PERIOD_ADJUSTMENT, SSD1331_CMD);//phase 1 and 2 period adjustment
 8000fcc:	2100      	movs	r1, #0
 8000fce:	20b1      	movs	r0, #177	; 0xb1
 8000fd0:	f7ff fe2c 	bl	8000c2c <ssd1331_write_byte>
  ssd1331_write_byte(0x31, SSD1331_CMD);                     //0x31
 8000fd4:	2100      	movs	r1, #0
 8000fd6:	2031      	movs	r0, #49	; 0x31
 8000fd8:	f7ff fe28 	bl	8000c2c <ssd1331_write_byte>
  ssd1331_write_byte(DISPLAY_CLOCK_DIV, SSD1331_CMD);    //display clock divider/oscillator frequency
 8000fdc:	2100      	movs	r1, #0
 8000fde:	20b3      	movs	r0, #179	; 0xb3
 8000fe0:	f7ff fe24 	bl	8000c2c <ssd1331_write_byte>
  ssd1331_write_byte(0xF0, SSD1331_CMD);
 8000fe4:	2100      	movs	r1, #0
 8000fe6:	20f0      	movs	r0, #240	; 0xf0
 8000fe8:	f7ff fe20 	bl	8000c2c <ssd1331_write_byte>
  ssd1331_write_byte(SET_PRECHARGE_VOLTAGE, SSD1331_CMD);//Set Pre-Change Level
 8000fec:	2100      	movs	r1, #0
 8000fee:	20bb      	movs	r0, #187	; 0xbb
 8000ff0:	f7ff fe1c 	bl	8000c2c <ssd1331_write_byte>
  ssd1331_write_byte(0x3A, SSD1331_CMD);
 8000ff4:	2100      	movs	r1, #0
 8000ff6:	203a      	movs	r0, #58	; 0x3a
 8000ff8:	f7ff fe18 	bl	8000c2c <ssd1331_write_byte>
  ssd1331_write_byte(SET_V_VOLTAGE, SSD1331_CMD);        //Set vcomH
 8000ffc:	2100      	movs	r1, #0
 8000ffe:	20be      	movs	r0, #190	; 0xbe
 8001000:	f7ff fe14 	bl	8000c2c <ssd1331_write_byte>
  ssd1331_write_byte(0x3E, SSD1331_CMD);
 8001004:	2100      	movs	r1, #0
 8001006:	203e      	movs	r0, #62	; 0x3e
 8001008:	f7ff fe10 	bl	8000c2c <ssd1331_write_byte>
  ssd1331_write_byte(DEACTIVE_SCROLLING, SSD1331_CMD);   //disable scrolling
 800100c:	2100      	movs	r1, #0
 800100e:	202e      	movs	r0, #46	; 0x2e
 8001010:	f7ff fe0c 	bl	8000c2c <ssd1331_write_byte>
  ssd1331_write_byte(NORMAL_BRIGHTNESS_DISPLAY_ON, SSD1331_CMD);//set display on
 8001014:	2100      	movs	r1, #0
 8001016:	20af      	movs	r0, #175	; 0xaf
 8001018:	f7ff fe08 	bl	8000c2c <ssd1331_write_byte>

  //ssd1331_fill_rect(0, 0, 96, 64, 0x0000);
  ssd1331_clear_screen(0x0000);
 800101c:	2000      	movs	r0, #0
 800101e:	f7ff ff34 	bl	8000e8a <ssd1331_clear_screen>
}
 8001022:	bf00      	nop
 8001024:	bd80      	pop	{r7, pc}
 8001026:	bf00      	nop
 8001028:	48000400 	.word	0x48000400

0800102c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800102c:	b480      	push	{r7}
 800102e:	b083      	sub	sp, #12
 8001030:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001032:	4b0f      	ldr	r3, [pc, #60]	; (8001070 <HAL_MspInit+0x44>)
 8001034:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001036:	4a0e      	ldr	r2, [pc, #56]	; (8001070 <HAL_MspInit+0x44>)
 8001038:	f043 0301 	orr.w	r3, r3, #1
 800103c:	6613      	str	r3, [r2, #96]	; 0x60
 800103e:	4b0c      	ldr	r3, [pc, #48]	; (8001070 <HAL_MspInit+0x44>)
 8001040:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001042:	f003 0301 	and.w	r3, r3, #1
 8001046:	607b      	str	r3, [r7, #4]
 8001048:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800104a:	4b09      	ldr	r3, [pc, #36]	; (8001070 <HAL_MspInit+0x44>)
 800104c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800104e:	4a08      	ldr	r2, [pc, #32]	; (8001070 <HAL_MspInit+0x44>)
 8001050:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001054:	6593      	str	r3, [r2, #88]	; 0x58
 8001056:	4b06      	ldr	r3, [pc, #24]	; (8001070 <HAL_MspInit+0x44>)
 8001058:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800105a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800105e:	603b      	str	r3, [r7, #0]
 8001060:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001062:	bf00      	nop
 8001064:	370c      	adds	r7, #12
 8001066:	46bd      	mov	sp, r7
 8001068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106c:	4770      	bx	lr
 800106e:	bf00      	nop
 8001070:	40021000 	.word	0x40021000

08001074 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	b08a      	sub	sp, #40	; 0x28
 8001078:	af00      	add	r7, sp, #0
 800107a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800107c:	f107 0314 	add.w	r3, r7, #20
 8001080:	2200      	movs	r2, #0
 8001082:	601a      	str	r2, [r3, #0]
 8001084:	605a      	str	r2, [r3, #4]
 8001086:	609a      	str	r2, [r3, #8]
 8001088:	60da      	str	r2, [r3, #12]
 800108a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	4a18      	ldr	r2, [pc, #96]	; (80010f4 <HAL_SPI_MspInit+0x80>)
 8001092:	4293      	cmp	r3, r2
 8001094:	d129      	bne.n	80010ea <HAL_SPI_MspInit+0x76>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001096:	4b18      	ldr	r3, [pc, #96]	; (80010f8 <HAL_SPI_MspInit+0x84>)
 8001098:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800109a:	4a17      	ldr	r2, [pc, #92]	; (80010f8 <HAL_SPI_MspInit+0x84>)
 800109c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80010a0:	6613      	str	r3, [r2, #96]	; 0x60
 80010a2:	4b15      	ldr	r3, [pc, #84]	; (80010f8 <HAL_SPI_MspInit+0x84>)
 80010a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80010a6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80010aa:	613b      	str	r3, [r7, #16]
 80010ac:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010ae:	4b12      	ldr	r3, [pc, #72]	; (80010f8 <HAL_SPI_MspInit+0x84>)
 80010b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010b2:	4a11      	ldr	r2, [pc, #68]	; (80010f8 <HAL_SPI_MspInit+0x84>)
 80010b4:	f043 0301 	orr.w	r3, r3, #1
 80010b8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80010ba:	4b0f      	ldr	r3, [pc, #60]	; (80010f8 <HAL_SPI_MspInit+0x84>)
 80010bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010be:	f003 0301 	and.w	r3, r3, #1
 80010c2:	60fb      	str	r3, [r7, #12]
 80010c4:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA12     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_12;
 80010c6:	f44f 5381 	mov.w	r3, #4128	; 0x1020
 80010ca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010cc:	2302      	movs	r3, #2
 80010ce:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010d0:	2300      	movs	r3, #0
 80010d2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010d4:	2303      	movs	r3, #3
 80010d6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80010d8:	2305      	movs	r3, #5
 80010da:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010dc:	f107 0314 	add.w	r3, r7, #20
 80010e0:	4619      	mov	r1, r3
 80010e2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010e6:	f001 fdc1 	bl	8002c6c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80010ea:	bf00      	nop
 80010ec:	3728      	adds	r7, #40	; 0x28
 80010ee:	46bd      	mov	sp, r7
 80010f0:	bd80      	pop	{r7, pc}
 80010f2:	bf00      	nop
 80010f4:	40013000 	.word	0x40013000
 80010f8:	40021000 	.word	0x40021000

080010fc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b09e      	sub	sp, #120	; 0x78
 8001100:	af00      	add	r7, sp, #0
 8001102:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001104:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001108:	2200      	movs	r2, #0
 800110a:	601a      	str	r2, [r3, #0]
 800110c:	605a      	str	r2, [r3, #4]
 800110e:	609a      	str	r2, [r3, #8]
 8001110:	60da      	str	r2, [r3, #12]
 8001112:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001114:	f107 0310 	add.w	r3, r7, #16
 8001118:	2254      	movs	r2, #84	; 0x54
 800111a:	2100      	movs	r1, #0
 800111c:	4618      	mov	r0, r3
 800111e:	f004 f895 	bl	800524c <memset>
  if(hadc->Instance==ADC1)
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	4a25      	ldr	r2, [pc, #148]	; (80011bc <HAL_ADC_MspInit+0xc0>)
 8001128:	4293      	cmp	r3, r2
 800112a:	d143      	bne.n	80011b4 <HAL_ADC_MspInit+0xb8>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800112c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001130:	613b      	str	r3, [r7, #16]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8001132:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8001136:	65bb      	str	r3, [r7, #88]	; 0x58
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8001138:	2301      	movs	r3, #1
 800113a:	617b      	str	r3, [r7, #20]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 800113c:	2301      	movs	r3, #1
 800113e:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 16;
 8001140:	2310      	movs	r3, #16
 8001142:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8001144:	2307      	movs	r3, #7
 8001146:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8001148:	2302      	movs	r3, #2
 800114a:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 800114c:	2302      	movs	r3, #2
 800114e:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8001150:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001154:	62fb      	str	r3, [r7, #44]	; 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001156:	f107 0310 	add.w	r3, r7, #16
 800115a:	4618      	mov	r0, r3
 800115c:	f002 fdb4 	bl	8003cc8 <HAL_RCCEx_PeriphCLKConfig>
 8001160:	4603      	mov	r3, r0
 8001162:	2b00      	cmp	r3, #0
 8001164:	d001      	beq.n	800116a <HAL_ADC_MspInit+0x6e>
    {
      Error_Handler();
 8001166:	f7ff fd5b 	bl	8000c20 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 800116a:	4b15      	ldr	r3, [pc, #84]	; (80011c0 <HAL_ADC_MspInit+0xc4>)
 800116c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800116e:	4a14      	ldr	r2, [pc, #80]	; (80011c0 <HAL_ADC_MspInit+0xc4>)
 8001170:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001174:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001176:	4b12      	ldr	r3, [pc, #72]	; (80011c0 <HAL_ADC_MspInit+0xc4>)
 8001178:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800117a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800117e:	60fb      	str	r3, [r7, #12]
 8001180:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001182:	4b0f      	ldr	r3, [pc, #60]	; (80011c0 <HAL_ADC_MspInit+0xc4>)
 8001184:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001186:	4a0e      	ldr	r2, [pc, #56]	; (80011c0 <HAL_ADC_MspInit+0xc4>)
 8001188:	f043 0301 	orr.w	r3, r3, #1
 800118c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800118e:	4b0c      	ldr	r3, [pc, #48]	; (80011c0 <HAL_ADC_MspInit+0xc4>)
 8001190:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001192:	f003 0301 	and.w	r3, r3, #1
 8001196:	60bb      	str	r3, [r7, #8]
 8001198:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA7     ------> ADC1_IN12
    */
    GPIO_InitStruct.Pin = TEMP_READPIN_Pin;
 800119a:	2380      	movs	r3, #128	; 0x80
 800119c:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 800119e:	230b      	movs	r3, #11
 80011a0:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011a2:	2300      	movs	r3, #0
 80011a4:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(TEMP_READPIN_GPIO_Port, &GPIO_InitStruct);
 80011a6:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80011aa:	4619      	mov	r1, r3
 80011ac:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011b0:	f001 fd5c 	bl	8002c6c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80011b4:	bf00      	nop
 80011b6:	3778      	adds	r7, #120	; 0x78
 80011b8:	46bd      	mov	sp, r7
 80011ba:	bd80      	pop	{r7, pc}
 80011bc:	50040000 	.word	0x50040000
 80011c0:	40021000 	.word	0x40021000

080011c4 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b08a      	sub	sp, #40	; 0x28
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011cc:	f107 0314 	add.w	r3, r7, #20
 80011d0:	2200      	movs	r2, #0
 80011d2:	601a      	str	r2, [r3, #0]
 80011d4:	605a      	str	r2, [r3, #4]
 80011d6:	609a      	str	r2, [r3, #8]
 80011d8:	60da      	str	r2, [r3, #12]
 80011da:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	4a15      	ldr	r2, [pc, #84]	; (8001238 <HAL_DAC_MspInit+0x74>)
 80011e2:	4293      	cmp	r3, r2
 80011e4:	d124      	bne.n	8001230 <HAL_DAC_MspInit+0x6c>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 80011e6:	4b15      	ldr	r3, [pc, #84]	; (800123c <HAL_DAC_MspInit+0x78>)
 80011e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011ea:	4a14      	ldr	r2, [pc, #80]	; (800123c <HAL_DAC_MspInit+0x78>)
 80011ec:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80011f0:	6593      	str	r3, [r2, #88]	; 0x58
 80011f2:	4b12      	ldr	r3, [pc, #72]	; (800123c <HAL_DAC_MspInit+0x78>)
 80011f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011f6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80011fa:	613b      	str	r3, [r7, #16]
 80011fc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011fe:	4b0f      	ldr	r3, [pc, #60]	; (800123c <HAL_DAC_MspInit+0x78>)
 8001200:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001202:	4a0e      	ldr	r2, [pc, #56]	; (800123c <HAL_DAC_MspInit+0x78>)
 8001204:	f043 0301 	orr.w	r3, r3, #1
 8001208:	64d3      	str	r3, [r2, #76]	; 0x4c
 800120a:	4b0c      	ldr	r3, [pc, #48]	; (800123c <HAL_DAC_MspInit+0x78>)
 800120c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800120e:	f003 0301 	and.w	r3, r3, #1
 8001212:	60fb      	str	r3, [r7, #12]
 8001214:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001216:	2310      	movs	r3, #16
 8001218:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800121a:	2303      	movs	r3, #3
 800121c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800121e:	2300      	movs	r3, #0
 8001220:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001222:	f107 0314 	add.w	r3, r7, #20
 8001226:	4619      	mov	r1, r3
 8001228:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800122c:	f001 fd1e 	bl	8002c6c <HAL_GPIO_Init>
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 8001230:	bf00      	nop
 8001232:	3728      	adds	r7, #40	; 0x28
 8001234:	46bd      	mov	sp, r7
 8001236:	bd80      	pop	{r7, pc}
 8001238:	40007400 	.word	0x40007400
 800123c:	40021000 	.word	0x40021000

08001240 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001240:	b580      	push	{r7, lr}
 8001242:	b09e      	sub	sp, #120	; 0x78
 8001244:	af00      	add	r7, sp, #0
 8001246:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001248:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800124c:	2200      	movs	r2, #0
 800124e:	601a      	str	r2, [r3, #0]
 8001250:	605a      	str	r2, [r3, #4]
 8001252:	609a      	str	r2, [r3, #8]
 8001254:	60da      	str	r2, [r3, #12]
 8001256:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001258:	f107 0310 	add.w	r3, r7, #16
 800125c:	2254      	movs	r2, #84	; 0x54
 800125e:	2100      	movs	r1, #0
 8001260:	4618      	mov	r0, r3
 8001262:	f003 fff3 	bl	800524c <memset>
  if(huart->Instance==USART2)
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	4a28      	ldr	r2, [pc, #160]	; (800130c <HAL_UART_MspInit+0xcc>)
 800126c:	4293      	cmp	r3, r2
 800126e:	d148      	bne.n	8001302 <HAL_UART_MspInit+0xc2>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001270:	2302      	movs	r3, #2
 8001272:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001274:	2300      	movs	r3, #0
 8001276:	637b      	str	r3, [r7, #52]	; 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001278:	f107 0310 	add.w	r3, r7, #16
 800127c:	4618      	mov	r0, r3
 800127e:	f002 fd23 	bl	8003cc8 <HAL_RCCEx_PeriphCLKConfig>
 8001282:	4603      	mov	r3, r0
 8001284:	2b00      	cmp	r3, #0
 8001286:	d001      	beq.n	800128c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001288:	f7ff fcca 	bl	8000c20 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800128c:	4b20      	ldr	r3, [pc, #128]	; (8001310 <HAL_UART_MspInit+0xd0>)
 800128e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001290:	4a1f      	ldr	r2, [pc, #124]	; (8001310 <HAL_UART_MspInit+0xd0>)
 8001292:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001296:	6593      	str	r3, [r2, #88]	; 0x58
 8001298:	4b1d      	ldr	r3, [pc, #116]	; (8001310 <HAL_UART_MspInit+0xd0>)
 800129a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800129c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012a0:	60fb      	str	r3, [r7, #12]
 80012a2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012a4:	4b1a      	ldr	r3, [pc, #104]	; (8001310 <HAL_UART_MspInit+0xd0>)
 80012a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012a8:	4a19      	ldr	r2, [pc, #100]	; (8001310 <HAL_UART_MspInit+0xd0>)
 80012aa:	f043 0301 	orr.w	r3, r3, #1
 80012ae:	64d3      	str	r3, [r2, #76]	; 0x4c
 80012b0:	4b17      	ldr	r3, [pc, #92]	; (8001310 <HAL_UART_MspInit+0xd0>)
 80012b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012b4:	f003 0301 	and.w	r3, r3, #1
 80012b8:	60bb      	str	r3, [r7, #8]
 80012ba:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15 (JTDI)     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 80012bc:	2304      	movs	r3, #4
 80012be:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012c0:	2302      	movs	r3, #2
 80012c2:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012c4:	2300      	movs	r3, #0
 80012c6:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012c8:	2303      	movs	r3, #3
 80012ca:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80012cc:	2307      	movs	r3, #7
 80012ce:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 80012d0:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80012d4:	4619      	mov	r1, r3
 80012d6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80012da:	f001 fcc7 	bl	8002c6c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_RX_Pin;
 80012de:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80012e2:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012e4:	2302      	movs	r3, #2
 80012e6:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012e8:	2300      	movs	r3, #0
 80012ea:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012ec:	2303      	movs	r3, #3
 80012ee:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 80012f0:	2303      	movs	r3, #3
 80012f2:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 80012f4:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80012f8:	4619      	mov	r1, r3
 80012fa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80012fe:	f001 fcb5 	bl	8002c6c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001302:	bf00      	nop
 8001304:	3778      	adds	r7, #120	; 0x78
 8001306:	46bd      	mov	sp, r7
 8001308:	bd80      	pop	{r7, pc}
 800130a:	bf00      	nop
 800130c:	40004400 	.word	0x40004400
 8001310:	40021000 	.word	0x40021000

08001314 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001314:	b480      	push	{r7}
 8001316:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001318:	e7fe      	b.n	8001318 <NMI_Handler+0x4>

0800131a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800131a:	b480      	push	{r7}
 800131c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800131e:	e7fe      	b.n	800131e <HardFault_Handler+0x4>

08001320 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001320:	b480      	push	{r7}
 8001322:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001324:	e7fe      	b.n	8001324 <MemManage_Handler+0x4>

08001326 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001326:	b480      	push	{r7}
 8001328:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800132a:	e7fe      	b.n	800132a <BusFault_Handler+0x4>

0800132c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800132c:	b480      	push	{r7}
 800132e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001330:	e7fe      	b.n	8001330 <UsageFault_Handler+0x4>

08001332 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001332:	b480      	push	{r7}
 8001334:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001336:	bf00      	nop
 8001338:	46bd      	mov	sp, r7
 800133a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133e:	4770      	bx	lr

08001340 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001340:	b480      	push	{r7}
 8001342:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001344:	bf00      	nop
 8001346:	46bd      	mov	sp, r7
 8001348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800134c:	4770      	bx	lr

0800134e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800134e:	b480      	push	{r7}
 8001350:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001352:	bf00      	nop
 8001354:	46bd      	mov	sp, r7
 8001356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800135a:	4770      	bx	lr

0800135c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800135c:	b580      	push	{r7, lr}
 800135e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001360:	f000 f936 	bl	80015d0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001364:	bf00      	nop
 8001366:	bd80      	pop	{r7, pc}

08001368 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001368:	b580      	push	{r7, lr}
 800136a:	b086      	sub	sp, #24
 800136c:	af00      	add	r7, sp, #0
 800136e:	60f8      	str	r0, [r7, #12]
 8001370:	60b9      	str	r1, [r7, #8]
 8001372:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001374:	2300      	movs	r3, #0
 8001376:	617b      	str	r3, [r7, #20]
 8001378:	e00a      	b.n	8001390 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800137a:	f3af 8000 	nop.w
 800137e:	4601      	mov	r1, r0
 8001380:	68bb      	ldr	r3, [r7, #8]
 8001382:	1c5a      	adds	r2, r3, #1
 8001384:	60ba      	str	r2, [r7, #8]
 8001386:	b2ca      	uxtb	r2, r1
 8001388:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800138a:	697b      	ldr	r3, [r7, #20]
 800138c:	3301      	adds	r3, #1
 800138e:	617b      	str	r3, [r7, #20]
 8001390:	697a      	ldr	r2, [r7, #20]
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	429a      	cmp	r2, r3
 8001396:	dbf0      	blt.n	800137a <_read+0x12>
	}

return len;
 8001398:	687b      	ldr	r3, [r7, #4]
}
 800139a:	4618      	mov	r0, r3
 800139c:	3718      	adds	r7, #24
 800139e:	46bd      	mov	sp, r7
 80013a0:	bd80      	pop	{r7, pc}

080013a2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80013a2:	b580      	push	{r7, lr}
 80013a4:	b086      	sub	sp, #24
 80013a6:	af00      	add	r7, sp, #0
 80013a8:	60f8      	str	r0, [r7, #12]
 80013aa:	60b9      	str	r1, [r7, #8]
 80013ac:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013ae:	2300      	movs	r3, #0
 80013b0:	617b      	str	r3, [r7, #20]
 80013b2:	e009      	b.n	80013c8 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80013b4:	68bb      	ldr	r3, [r7, #8]
 80013b6:	1c5a      	adds	r2, r3, #1
 80013b8:	60ba      	str	r2, [r7, #8]
 80013ba:	781b      	ldrb	r3, [r3, #0]
 80013bc:	4618      	mov	r0, r3
 80013be:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013c2:	697b      	ldr	r3, [r7, #20]
 80013c4:	3301      	adds	r3, #1
 80013c6:	617b      	str	r3, [r7, #20]
 80013c8:	697a      	ldr	r2, [r7, #20]
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	429a      	cmp	r2, r3
 80013ce:	dbf1      	blt.n	80013b4 <_write+0x12>
	}
	return len;
 80013d0:	687b      	ldr	r3, [r7, #4]
}
 80013d2:	4618      	mov	r0, r3
 80013d4:	3718      	adds	r7, #24
 80013d6:	46bd      	mov	sp, r7
 80013d8:	bd80      	pop	{r7, pc}

080013da <_close>:

int _close(int file)
{
 80013da:	b480      	push	{r7}
 80013dc:	b083      	sub	sp, #12
 80013de:	af00      	add	r7, sp, #0
 80013e0:	6078      	str	r0, [r7, #4]
	return -1;
 80013e2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80013e6:	4618      	mov	r0, r3
 80013e8:	370c      	adds	r7, #12
 80013ea:	46bd      	mov	sp, r7
 80013ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f0:	4770      	bx	lr

080013f2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80013f2:	b480      	push	{r7}
 80013f4:	b083      	sub	sp, #12
 80013f6:	af00      	add	r7, sp, #0
 80013f8:	6078      	str	r0, [r7, #4]
 80013fa:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80013fc:	683b      	ldr	r3, [r7, #0]
 80013fe:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001402:	605a      	str	r2, [r3, #4]
	return 0;
 8001404:	2300      	movs	r3, #0
}
 8001406:	4618      	mov	r0, r3
 8001408:	370c      	adds	r7, #12
 800140a:	46bd      	mov	sp, r7
 800140c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001410:	4770      	bx	lr

08001412 <_isatty>:

int _isatty(int file)
{
 8001412:	b480      	push	{r7}
 8001414:	b083      	sub	sp, #12
 8001416:	af00      	add	r7, sp, #0
 8001418:	6078      	str	r0, [r7, #4]
	return 1;
 800141a:	2301      	movs	r3, #1
}
 800141c:	4618      	mov	r0, r3
 800141e:	370c      	adds	r7, #12
 8001420:	46bd      	mov	sp, r7
 8001422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001426:	4770      	bx	lr

08001428 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001428:	b480      	push	{r7}
 800142a:	b085      	sub	sp, #20
 800142c:	af00      	add	r7, sp, #0
 800142e:	60f8      	str	r0, [r7, #12]
 8001430:	60b9      	str	r1, [r7, #8]
 8001432:	607a      	str	r2, [r7, #4]
	return 0;
 8001434:	2300      	movs	r3, #0
}
 8001436:	4618      	mov	r0, r3
 8001438:	3714      	adds	r7, #20
 800143a:	46bd      	mov	sp, r7
 800143c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001440:	4770      	bx	lr
	...

08001444 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001444:	b580      	push	{r7, lr}
 8001446:	b086      	sub	sp, #24
 8001448:	af00      	add	r7, sp, #0
 800144a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800144c:	4a14      	ldr	r2, [pc, #80]	; (80014a0 <_sbrk+0x5c>)
 800144e:	4b15      	ldr	r3, [pc, #84]	; (80014a4 <_sbrk+0x60>)
 8001450:	1ad3      	subs	r3, r2, r3
 8001452:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001454:	697b      	ldr	r3, [r7, #20]
 8001456:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001458:	4b13      	ldr	r3, [pc, #76]	; (80014a8 <_sbrk+0x64>)
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	2b00      	cmp	r3, #0
 800145e:	d102      	bne.n	8001466 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001460:	4b11      	ldr	r3, [pc, #68]	; (80014a8 <_sbrk+0x64>)
 8001462:	4a12      	ldr	r2, [pc, #72]	; (80014ac <_sbrk+0x68>)
 8001464:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001466:	4b10      	ldr	r3, [pc, #64]	; (80014a8 <_sbrk+0x64>)
 8001468:	681a      	ldr	r2, [r3, #0]
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	4413      	add	r3, r2
 800146e:	693a      	ldr	r2, [r7, #16]
 8001470:	429a      	cmp	r2, r3
 8001472:	d207      	bcs.n	8001484 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001474:	f003 fec0 	bl	80051f8 <__errno>
 8001478:	4603      	mov	r3, r0
 800147a:	220c      	movs	r2, #12
 800147c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800147e:	f04f 33ff 	mov.w	r3, #4294967295
 8001482:	e009      	b.n	8001498 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001484:	4b08      	ldr	r3, [pc, #32]	; (80014a8 <_sbrk+0x64>)
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800148a:	4b07      	ldr	r3, [pc, #28]	; (80014a8 <_sbrk+0x64>)
 800148c:	681a      	ldr	r2, [r3, #0]
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	4413      	add	r3, r2
 8001492:	4a05      	ldr	r2, [pc, #20]	; (80014a8 <_sbrk+0x64>)
 8001494:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001496:	68fb      	ldr	r3, [r7, #12]
}
 8001498:	4618      	mov	r0, r3
 800149a:	3718      	adds	r7, #24
 800149c:	46bd      	mov	sp, r7
 800149e:	bd80      	pop	{r7, pc}
 80014a0:	20010000 	.word	0x20010000
 80014a4:	00000400 	.word	0x00000400
 80014a8:	200001ec 	.word	0x200001ec
 80014ac:	20000208 	.word	0x20000208

080014b0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80014b0:	b480      	push	{r7}
 80014b2:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80014b4:	4b06      	ldr	r3, [pc, #24]	; (80014d0 <SystemInit+0x20>)
 80014b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80014ba:	4a05      	ldr	r2, [pc, #20]	; (80014d0 <SystemInit+0x20>)
 80014bc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80014c0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80014c4:	bf00      	nop
 80014c6:	46bd      	mov	sp, r7
 80014c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014cc:	4770      	bx	lr
 80014ce:	bf00      	nop
 80014d0:	e000ed00 	.word	0xe000ed00

080014d4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80014d4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800150c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80014d8:	f7ff ffea 	bl	80014b0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80014dc:	480c      	ldr	r0, [pc, #48]	; (8001510 <LoopForever+0x6>)
  ldr r1, =_edata
 80014de:	490d      	ldr	r1, [pc, #52]	; (8001514 <LoopForever+0xa>)
  ldr r2, =_sidata
 80014e0:	4a0d      	ldr	r2, [pc, #52]	; (8001518 <LoopForever+0xe>)
  movs r3, #0
 80014e2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80014e4:	e002      	b.n	80014ec <LoopCopyDataInit>

080014e6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80014e6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80014e8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80014ea:	3304      	adds	r3, #4

080014ec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80014ec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80014ee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80014f0:	d3f9      	bcc.n	80014e6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80014f2:	4a0a      	ldr	r2, [pc, #40]	; (800151c <LoopForever+0x12>)
  ldr r4, =_ebss
 80014f4:	4c0a      	ldr	r4, [pc, #40]	; (8001520 <LoopForever+0x16>)
  movs r3, #0
 80014f6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80014f8:	e001      	b.n	80014fe <LoopFillZerobss>

080014fa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80014fa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80014fc:	3204      	adds	r2, #4

080014fe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80014fe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001500:	d3fb      	bcc.n	80014fa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001502:	f003 fe7f 	bl	8005204 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001506:	f7ff f835 	bl	8000574 <main>

0800150a <LoopForever>:

LoopForever:
    b LoopForever
 800150a:	e7fe      	b.n	800150a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800150c:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8001510:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001514:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001518:	08006f68 	.word	0x08006f68
  ldr r2, =_sbss
 800151c:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001520:	20000204 	.word	0x20000204

08001524 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001524:	e7fe      	b.n	8001524 <ADC1_IRQHandler>

08001526 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001526:	b580      	push	{r7, lr}
 8001528:	b082      	sub	sp, #8
 800152a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800152c:	2300      	movs	r3, #0
 800152e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001530:	2003      	movs	r0, #3
 8001532:	f001 f9b9 	bl	80028a8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001536:	2000      	movs	r0, #0
 8001538:	f000 f80e 	bl	8001558 <HAL_InitTick>
 800153c:	4603      	mov	r3, r0
 800153e:	2b00      	cmp	r3, #0
 8001540:	d002      	beq.n	8001548 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001542:	2301      	movs	r3, #1
 8001544:	71fb      	strb	r3, [r7, #7]
 8001546:	e001      	b.n	800154c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001548:	f7ff fd70 	bl	800102c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800154c:	79fb      	ldrb	r3, [r7, #7]
}
 800154e:	4618      	mov	r0, r3
 8001550:	3708      	adds	r7, #8
 8001552:	46bd      	mov	sp, r7
 8001554:	bd80      	pop	{r7, pc}
	...

08001558 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001558:	b580      	push	{r7, lr}
 800155a:	b084      	sub	sp, #16
 800155c:	af00      	add	r7, sp, #0
 800155e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001560:	2300      	movs	r3, #0
 8001562:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001564:	4b17      	ldr	r3, [pc, #92]	; (80015c4 <HAL_InitTick+0x6c>)
 8001566:	781b      	ldrb	r3, [r3, #0]
 8001568:	2b00      	cmp	r3, #0
 800156a:	d023      	beq.n	80015b4 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 800156c:	4b16      	ldr	r3, [pc, #88]	; (80015c8 <HAL_InitTick+0x70>)
 800156e:	681a      	ldr	r2, [r3, #0]
 8001570:	4b14      	ldr	r3, [pc, #80]	; (80015c4 <HAL_InitTick+0x6c>)
 8001572:	781b      	ldrb	r3, [r3, #0]
 8001574:	4619      	mov	r1, r3
 8001576:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800157a:	fbb3 f3f1 	udiv	r3, r3, r1
 800157e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001582:	4618      	mov	r0, r3
 8001584:	f001 f9b7 	bl	80028f6 <HAL_SYSTICK_Config>
 8001588:	4603      	mov	r3, r0
 800158a:	2b00      	cmp	r3, #0
 800158c:	d10f      	bne.n	80015ae <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	2b0f      	cmp	r3, #15
 8001592:	d809      	bhi.n	80015a8 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001594:	2200      	movs	r2, #0
 8001596:	6879      	ldr	r1, [r7, #4]
 8001598:	f04f 30ff 	mov.w	r0, #4294967295
 800159c:	f001 f98f 	bl	80028be <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80015a0:	4a0a      	ldr	r2, [pc, #40]	; (80015cc <HAL_InitTick+0x74>)
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	6013      	str	r3, [r2, #0]
 80015a6:	e007      	b.n	80015b8 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80015a8:	2301      	movs	r3, #1
 80015aa:	73fb      	strb	r3, [r7, #15]
 80015ac:	e004      	b.n	80015b8 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80015ae:	2301      	movs	r3, #1
 80015b0:	73fb      	strb	r3, [r7, #15]
 80015b2:	e001      	b.n	80015b8 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80015b4:	2301      	movs	r3, #1
 80015b6:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80015b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80015ba:	4618      	mov	r0, r3
 80015bc:	3710      	adds	r7, #16
 80015be:	46bd      	mov	sp, r7
 80015c0:	bd80      	pop	{r7, pc}
 80015c2:	bf00      	nop
 80015c4:	20000008 	.word	0x20000008
 80015c8:	20000000 	.word	0x20000000
 80015cc:	20000004 	.word	0x20000004

080015d0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80015d0:	b480      	push	{r7}
 80015d2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80015d4:	4b06      	ldr	r3, [pc, #24]	; (80015f0 <HAL_IncTick+0x20>)
 80015d6:	781b      	ldrb	r3, [r3, #0]
 80015d8:	461a      	mov	r2, r3
 80015da:	4b06      	ldr	r3, [pc, #24]	; (80015f4 <HAL_IncTick+0x24>)
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	4413      	add	r3, r2
 80015e0:	4a04      	ldr	r2, [pc, #16]	; (80015f4 <HAL_IncTick+0x24>)
 80015e2:	6013      	str	r3, [r2, #0]
}
 80015e4:	bf00      	nop
 80015e6:	46bd      	mov	sp, r7
 80015e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ec:	4770      	bx	lr
 80015ee:	bf00      	nop
 80015f0:	20000008 	.word	0x20000008
 80015f4:	200001f0 	.word	0x200001f0

080015f8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80015f8:	b480      	push	{r7}
 80015fa:	af00      	add	r7, sp, #0
  return uwTick;
 80015fc:	4b03      	ldr	r3, [pc, #12]	; (800160c <HAL_GetTick+0x14>)
 80015fe:	681b      	ldr	r3, [r3, #0]
}
 8001600:	4618      	mov	r0, r3
 8001602:	46bd      	mov	sp, r7
 8001604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001608:	4770      	bx	lr
 800160a:	bf00      	nop
 800160c:	200001f0 	.word	0x200001f0

08001610 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	b084      	sub	sp, #16
 8001614:	af00      	add	r7, sp, #0
 8001616:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001618:	f7ff ffee 	bl	80015f8 <HAL_GetTick>
 800161c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001622:	68fb      	ldr	r3, [r7, #12]
 8001624:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001628:	d005      	beq.n	8001636 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800162a:	4b0a      	ldr	r3, [pc, #40]	; (8001654 <HAL_Delay+0x44>)
 800162c:	781b      	ldrb	r3, [r3, #0]
 800162e:	461a      	mov	r2, r3
 8001630:	68fb      	ldr	r3, [r7, #12]
 8001632:	4413      	add	r3, r2
 8001634:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001636:	bf00      	nop
 8001638:	f7ff ffde 	bl	80015f8 <HAL_GetTick>
 800163c:	4602      	mov	r2, r0
 800163e:	68bb      	ldr	r3, [r7, #8]
 8001640:	1ad3      	subs	r3, r2, r3
 8001642:	68fa      	ldr	r2, [r7, #12]
 8001644:	429a      	cmp	r2, r3
 8001646:	d8f7      	bhi.n	8001638 <HAL_Delay+0x28>
  {
  }
}
 8001648:	bf00      	nop
 800164a:	bf00      	nop
 800164c:	3710      	adds	r7, #16
 800164e:	46bd      	mov	sp, r7
 8001650:	bd80      	pop	{r7, pc}
 8001652:	bf00      	nop
 8001654:	20000008 	.word	0x20000008

08001658 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001658:	b480      	push	{r7}
 800165a:	b083      	sub	sp, #12
 800165c:	af00      	add	r7, sp, #0
 800165e:	6078      	str	r0, [r7, #4]
 8001660:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	689b      	ldr	r3, [r3, #8]
 8001666:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 800166a:	683b      	ldr	r3, [r7, #0]
 800166c:	431a      	orrs	r2, r3
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	609a      	str	r2, [r3, #8]
}
 8001672:	bf00      	nop
 8001674:	370c      	adds	r7, #12
 8001676:	46bd      	mov	sp, r7
 8001678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800167c:	4770      	bx	lr

0800167e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800167e:	b480      	push	{r7}
 8001680:	b083      	sub	sp, #12
 8001682:	af00      	add	r7, sp, #0
 8001684:	6078      	str	r0, [r7, #4]
 8001686:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	689b      	ldr	r3, [r3, #8]
 800168c:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001690:	683b      	ldr	r3, [r7, #0]
 8001692:	431a      	orrs	r2, r3
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	609a      	str	r2, [r3, #8]
}
 8001698:	bf00      	nop
 800169a:	370c      	adds	r7, #12
 800169c:	46bd      	mov	sp, r7
 800169e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a2:	4770      	bx	lr

080016a4 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80016a4:	b480      	push	{r7}
 80016a6:	b083      	sub	sp, #12
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	689b      	ldr	r3, [r3, #8]
 80016b0:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80016b4:	4618      	mov	r0, r3
 80016b6:	370c      	adds	r7, #12
 80016b8:	46bd      	mov	sp, r7
 80016ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016be:	4770      	bx	lr

080016c0 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80016c0:	b480      	push	{r7}
 80016c2:	b087      	sub	sp, #28
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	60f8      	str	r0, [r7, #12]
 80016c8:	60b9      	str	r1, [r7, #8]
 80016ca:	607a      	str	r2, [r7, #4]
 80016cc:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80016ce:	68fb      	ldr	r3, [r7, #12]
 80016d0:	3360      	adds	r3, #96	; 0x60
 80016d2:	461a      	mov	r2, r3
 80016d4:	68bb      	ldr	r3, [r7, #8]
 80016d6:	009b      	lsls	r3, r3, #2
 80016d8:	4413      	add	r3, r2
 80016da:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80016dc:	697b      	ldr	r3, [r7, #20]
 80016de:	681a      	ldr	r2, [r3, #0]
 80016e0:	4b08      	ldr	r3, [pc, #32]	; (8001704 <LL_ADC_SetOffset+0x44>)
 80016e2:	4013      	ands	r3, r2
 80016e4:	687a      	ldr	r2, [r7, #4]
 80016e6:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 80016ea:	683a      	ldr	r2, [r7, #0]
 80016ec:	430a      	orrs	r2, r1
 80016ee:	4313      	orrs	r3, r2
 80016f0:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80016f4:	697b      	ldr	r3, [r7, #20]
 80016f6:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80016f8:	bf00      	nop
 80016fa:	371c      	adds	r7, #28
 80016fc:	46bd      	mov	sp, r7
 80016fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001702:	4770      	bx	lr
 8001704:	03fff000 	.word	0x03fff000

08001708 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001708:	b480      	push	{r7}
 800170a:	b085      	sub	sp, #20
 800170c:	af00      	add	r7, sp, #0
 800170e:	6078      	str	r0, [r7, #4]
 8001710:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	3360      	adds	r3, #96	; 0x60
 8001716:	461a      	mov	r2, r3
 8001718:	683b      	ldr	r3, [r7, #0]
 800171a:	009b      	lsls	r3, r3, #2
 800171c:	4413      	add	r3, r2
 800171e:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8001728:	4618      	mov	r0, r3
 800172a:	3714      	adds	r7, #20
 800172c:	46bd      	mov	sp, r7
 800172e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001732:	4770      	bx	lr

08001734 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001734:	b480      	push	{r7}
 8001736:	b087      	sub	sp, #28
 8001738:	af00      	add	r7, sp, #0
 800173a:	60f8      	str	r0, [r7, #12]
 800173c:	60b9      	str	r1, [r7, #8]
 800173e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	3360      	adds	r3, #96	; 0x60
 8001744:	461a      	mov	r2, r3
 8001746:	68bb      	ldr	r3, [r7, #8]
 8001748:	009b      	lsls	r3, r3, #2
 800174a:	4413      	add	r3, r2
 800174c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800174e:	697b      	ldr	r3, [r7, #20]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	431a      	orrs	r2, r3
 800175a:	697b      	ldr	r3, [r7, #20]
 800175c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800175e:	bf00      	nop
 8001760:	371c      	adds	r7, #28
 8001762:	46bd      	mov	sp, r7
 8001764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001768:	4770      	bx	lr

0800176a <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 800176a:	b480      	push	{r7}
 800176c:	b083      	sub	sp, #12
 800176e:	af00      	add	r7, sp, #0
 8001770:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	68db      	ldr	r3, [r3, #12]
 8001776:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800177a:	2b00      	cmp	r3, #0
 800177c:	d101      	bne.n	8001782 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 800177e:	2301      	movs	r3, #1
 8001780:	e000      	b.n	8001784 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001782:	2300      	movs	r3, #0
}
 8001784:	4618      	mov	r0, r3
 8001786:	370c      	adds	r7, #12
 8001788:	46bd      	mov	sp, r7
 800178a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178e:	4770      	bx	lr

08001790 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001790:	b480      	push	{r7}
 8001792:	b087      	sub	sp, #28
 8001794:	af00      	add	r7, sp, #0
 8001796:	60f8      	str	r0, [r7, #12]
 8001798:	60b9      	str	r1, [r7, #8]
 800179a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 800179c:	68fb      	ldr	r3, [r7, #12]
 800179e:	3330      	adds	r3, #48	; 0x30
 80017a0:	461a      	mov	r2, r3
 80017a2:	68bb      	ldr	r3, [r7, #8]
 80017a4:	0a1b      	lsrs	r3, r3, #8
 80017a6:	009b      	lsls	r3, r3, #2
 80017a8:	f003 030c 	and.w	r3, r3, #12
 80017ac:	4413      	add	r3, r2
 80017ae:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80017b0:	697b      	ldr	r3, [r7, #20]
 80017b2:	681a      	ldr	r2, [r3, #0]
 80017b4:	68bb      	ldr	r3, [r7, #8]
 80017b6:	f003 031f 	and.w	r3, r3, #31
 80017ba:	211f      	movs	r1, #31
 80017bc:	fa01 f303 	lsl.w	r3, r1, r3
 80017c0:	43db      	mvns	r3, r3
 80017c2:	401a      	ands	r2, r3
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	0e9b      	lsrs	r3, r3, #26
 80017c8:	f003 011f 	and.w	r1, r3, #31
 80017cc:	68bb      	ldr	r3, [r7, #8]
 80017ce:	f003 031f 	and.w	r3, r3, #31
 80017d2:	fa01 f303 	lsl.w	r3, r1, r3
 80017d6:	431a      	orrs	r2, r3
 80017d8:	697b      	ldr	r3, [r7, #20]
 80017da:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80017dc:	bf00      	nop
 80017de:	371c      	adds	r7, #28
 80017e0:	46bd      	mov	sp, r7
 80017e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e6:	4770      	bx	lr

080017e8 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80017e8:	b480      	push	{r7}
 80017ea:	b087      	sub	sp, #28
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	60f8      	str	r0, [r7, #12]
 80017f0:	60b9      	str	r1, [r7, #8]
 80017f2:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	3314      	adds	r3, #20
 80017f8:	461a      	mov	r2, r3
 80017fa:	68bb      	ldr	r3, [r7, #8]
 80017fc:	0e5b      	lsrs	r3, r3, #25
 80017fe:	009b      	lsls	r3, r3, #2
 8001800:	f003 0304 	and.w	r3, r3, #4
 8001804:	4413      	add	r3, r2
 8001806:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001808:	697b      	ldr	r3, [r7, #20]
 800180a:	681a      	ldr	r2, [r3, #0]
 800180c:	68bb      	ldr	r3, [r7, #8]
 800180e:	0d1b      	lsrs	r3, r3, #20
 8001810:	f003 031f 	and.w	r3, r3, #31
 8001814:	2107      	movs	r1, #7
 8001816:	fa01 f303 	lsl.w	r3, r1, r3
 800181a:	43db      	mvns	r3, r3
 800181c:	401a      	ands	r2, r3
 800181e:	68bb      	ldr	r3, [r7, #8]
 8001820:	0d1b      	lsrs	r3, r3, #20
 8001822:	f003 031f 	and.w	r3, r3, #31
 8001826:	6879      	ldr	r1, [r7, #4]
 8001828:	fa01 f303 	lsl.w	r3, r1, r3
 800182c:	431a      	orrs	r2, r3
 800182e:	697b      	ldr	r3, [r7, #20]
 8001830:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001832:	bf00      	nop
 8001834:	371c      	adds	r7, #28
 8001836:	46bd      	mov	sp, r7
 8001838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183c:	4770      	bx	lr
	...

08001840 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001840:	b480      	push	{r7}
 8001842:	b085      	sub	sp, #20
 8001844:	af00      	add	r7, sp, #0
 8001846:	60f8      	str	r0, [r7, #12]
 8001848:	60b9      	str	r1, [r7, #8]
 800184a:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8001852:	68bb      	ldr	r3, [r7, #8]
 8001854:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001858:	43db      	mvns	r3, r3
 800185a:	401a      	ands	r2, r3
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	f003 0318 	and.w	r3, r3, #24
 8001862:	4908      	ldr	r1, [pc, #32]	; (8001884 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001864:	40d9      	lsrs	r1, r3
 8001866:	68bb      	ldr	r3, [r7, #8]
 8001868:	400b      	ands	r3, r1
 800186a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800186e:	431a      	orrs	r2, r3
 8001870:	68fb      	ldr	r3, [r7, #12]
 8001872:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001876:	bf00      	nop
 8001878:	3714      	adds	r7, #20
 800187a:	46bd      	mov	sp, r7
 800187c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001880:	4770      	bx	lr
 8001882:	bf00      	nop
 8001884:	0007ffff 	.word	0x0007ffff

08001888 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001888:	b480      	push	{r7}
 800188a:	b083      	sub	sp, #12
 800188c:	af00      	add	r7, sp, #0
 800188e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	689b      	ldr	r3, [r3, #8]
 8001894:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8001898:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800189c:	687a      	ldr	r2, [r7, #4]
 800189e:	6093      	str	r3, [r2, #8]
}
 80018a0:	bf00      	nop
 80018a2:	370c      	adds	r7, #12
 80018a4:	46bd      	mov	sp, r7
 80018a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018aa:	4770      	bx	lr

080018ac <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 80018ac:	b480      	push	{r7}
 80018ae:	b083      	sub	sp, #12
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	689b      	ldr	r3, [r3, #8]
 80018b8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80018bc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80018c0:	d101      	bne.n	80018c6 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80018c2:	2301      	movs	r3, #1
 80018c4:	e000      	b.n	80018c8 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80018c6:	2300      	movs	r3, #0
}
 80018c8:	4618      	mov	r0, r3
 80018ca:	370c      	adds	r7, #12
 80018cc:	46bd      	mov	sp, r7
 80018ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d2:	4770      	bx	lr

080018d4 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80018d4:	b480      	push	{r7}
 80018d6:	b083      	sub	sp, #12
 80018d8:	af00      	add	r7, sp, #0
 80018da:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	689b      	ldr	r3, [r3, #8]
 80018e0:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 80018e4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80018e8:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80018f0:	bf00      	nop
 80018f2:	370c      	adds	r7, #12
 80018f4:	46bd      	mov	sp, r7
 80018f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018fa:	4770      	bx	lr

080018fc <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80018fc:	b480      	push	{r7}
 80018fe:	b083      	sub	sp, #12
 8001900:	af00      	add	r7, sp, #0
 8001902:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	689b      	ldr	r3, [r3, #8]
 8001908:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800190c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001910:	d101      	bne.n	8001916 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001912:	2301      	movs	r3, #1
 8001914:	e000      	b.n	8001918 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001916:	2300      	movs	r3, #0
}
 8001918:	4618      	mov	r0, r3
 800191a:	370c      	adds	r7, #12
 800191c:	46bd      	mov	sp, r7
 800191e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001922:	4770      	bx	lr

08001924 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001924:	b480      	push	{r7}
 8001926:	b083      	sub	sp, #12
 8001928:	af00      	add	r7, sp, #0
 800192a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	689b      	ldr	r3, [r3, #8]
 8001930:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001934:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001938:	f043 0201 	orr.w	r2, r3, #1
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001940:	bf00      	nop
 8001942:	370c      	adds	r7, #12
 8001944:	46bd      	mov	sp, r7
 8001946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800194a:	4770      	bx	lr

0800194c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 800194c:	b480      	push	{r7}
 800194e:	b083      	sub	sp, #12
 8001950:	af00      	add	r7, sp, #0
 8001952:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	689b      	ldr	r3, [r3, #8]
 8001958:	f003 0301 	and.w	r3, r3, #1
 800195c:	2b01      	cmp	r3, #1
 800195e:	d101      	bne.n	8001964 <LL_ADC_IsEnabled+0x18>
 8001960:	2301      	movs	r3, #1
 8001962:	e000      	b.n	8001966 <LL_ADC_IsEnabled+0x1a>
 8001964:	2300      	movs	r3, #0
}
 8001966:	4618      	mov	r0, r3
 8001968:	370c      	adds	r7, #12
 800196a:	46bd      	mov	sp, r7
 800196c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001970:	4770      	bx	lr

08001972 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001972:	b480      	push	{r7}
 8001974:	b083      	sub	sp, #12
 8001976:	af00      	add	r7, sp, #0
 8001978:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	689b      	ldr	r3, [r3, #8]
 800197e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001982:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001986:	f043 0204 	orr.w	r2, r3, #4
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 800198e:	bf00      	nop
 8001990:	370c      	adds	r7, #12
 8001992:	46bd      	mov	sp, r7
 8001994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001998:	4770      	bx	lr

0800199a <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800199a:	b480      	push	{r7}
 800199c:	b083      	sub	sp, #12
 800199e:	af00      	add	r7, sp, #0
 80019a0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	689b      	ldr	r3, [r3, #8]
 80019a6:	f003 0304 	and.w	r3, r3, #4
 80019aa:	2b04      	cmp	r3, #4
 80019ac:	d101      	bne.n	80019b2 <LL_ADC_REG_IsConversionOngoing+0x18>
 80019ae:	2301      	movs	r3, #1
 80019b0:	e000      	b.n	80019b4 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80019b2:	2300      	movs	r3, #0
}
 80019b4:	4618      	mov	r0, r3
 80019b6:	370c      	adds	r7, #12
 80019b8:	46bd      	mov	sp, r7
 80019ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019be:	4770      	bx	lr

080019c0 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80019c0:	b480      	push	{r7}
 80019c2:	b083      	sub	sp, #12
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	689b      	ldr	r3, [r3, #8]
 80019cc:	f003 0308 	and.w	r3, r3, #8
 80019d0:	2b08      	cmp	r3, #8
 80019d2:	d101      	bne.n	80019d8 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80019d4:	2301      	movs	r3, #1
 80019d6:	e000      	b.n	80019da <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80019d8:	2300      	movs	r3, #0
}
 80019da:	4618      	mov	r0, r3
 80019dc:	370c      	adds	r7, #12
 80019de:	46bd      	mov	sp, r7
 80019e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e4:	4770      	bx	lr
	...

080019e8 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80019e8:	b580      	push	{r7, lr}
 80019ea:	b088      	sub	sp, #32
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80019f0:	2300      	movs	r3, #0
 80019f2:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80019f4:	2300      	movs	r3, #0
 80019f6:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d101      	bne.n	8001a02 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80019fe:	2301      	movs	r3, #1
 8001a00:	e12c      	b.n	8001c5c <HAL_ADC_Init+0x274>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	691b      	ldr	r3, [r3, #16]
 8001a06:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d109      	bne.n	8001a24 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001a10:	6878      	ldr	r0, [r7, #4]
 8001a12:	f7ff fb73 	bl	80010fc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	2200      	movs	r2, #0
 8001a1a:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	2200      	movs	r2, #0
 8001a20:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	4618      	mov	r0, r3
 8001a2a:	f7ff ff3f 	bl	80018ac <LL_ADC_IsDeepPowerDownEnabled>
 8001a2e:	4603      	mov	r3, r0
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d004      	beq.n	8001a3e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	4618      	mov	r0, r3
 8001a3a:	f7ff ff25 	bl	8001888 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	4618      	mov	r0, r3
 8001a44:	f7ff ff5a 	bl	80018fc <LL_ADC_IsInternalRegulatorEnabled>
 8001a48:	4603      	mov	r3, r0
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d115      	bne.n	8001a7a <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	4618      	mov	r0, r3
 8001a54:	f7ff ff3e 	bl	80018d4 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001a58:	4b82      	ldr	r3, [pc, #520]	; (8001c64 <HAL_ADC_Init+0x27c>)
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	099b      	lsrs	r3, r3, #6
 8001a5e:	4a82      	ldr	r2, [pc, #520]	; (8001c68 <HAL_ADC_Init+0x280>)
 8001a60:	fba2 2303 	umull	r2, r3, r2, r3
 8001a64:	099b      	lsrs	r3, r3, #6
 8001a66:	3301      	adds	r3, #1
 8001a68:	005b      	lsls	r3, r3, #1
 8001a6a:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001a6c:	e002      	b.n	8001a74 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8001a6e:	68bb      	ldr	r3, [r7, #8]
 8001a70:	3b01      	subs	r3, #1
 8001a72:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001a74:	68bb      	ldr	r3, [r7, #8]
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d1f9      	bne.n	8001a6e <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	4618      	mov	r0, r3
 8001a80:	f7ff ff3c 	bl	80018fc <LL_ADC_IsInternalRegulatorEnabled>
 8001a84:	4603      	mov	r3, r0
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d10d      	bne.n	8001aa6 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a8e:	f043 0210 	orr.w	r2, r3, #16
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a9a:	f043 0201 	orr.w	r2, r3, #1
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001aa2:	2301      	movs	r3, #1
 8001aa4:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	4618      	mov	r0, r3
 8001aac:	f7ff ff75 	bl	800199a <LL_ADC_REG_IsConversionOngoing>
 8001ab0:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ab6:	f003 0310 	and.w	r3, r3, #16
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	f040 80c5 	bne.w	8001c4a <HAL_ADC_Init+0x262>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001ac0:	697b      	ldr	r3, [r7, #20]
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	f040 80c1 	bne.w	8001c4a <HAL_ADC_Init+0x262>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001acc:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001ad0:	f043 0202 	orr.w	r2, r3, #2
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	4618      	mov	r0, r3
 8001ade:	f7ff ff35 	bl	800194c <LL_ADC_IsEnabled>
 8001ae2:	4603      	mov	r3, r0
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d10b      	bne.n	8001b00 <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001ae8:	4860      	ldr	r0, [pc, #384]	; (8001c6c <HAL_ADC_Init+0x284>)
 8001aea:	f7ff ff2f 	bl	800194c <LL_ADC_IsEnabled>
 8001aee:	4603      	mov	r3, r0
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d105      	bne.n	8001b00 <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	685b      	ldr	r3, [r3, #4]
 8001af8:	4619      	mov	r1, r3
 8001afa:	485d      	ldr	r0, [pc, #372]	; (8001c70 <HAL_ADC_Init+0x288>)
 8001afc:	f7ff fdac 	bl	8001658 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	7e5b      	ldrb	r3, [r3, #25]
 8001b04:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001b0a:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8001b10:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8001b16:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001b1e:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001b20:	4313      	orrs	r3, r2
 8001b22:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001b2a:	2b01      	cmp	r3, #1
 8001b2c:	d106      	bne.n	8001b3c <HAL_ADC_Init+0x154>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b32:	3b01      	subs	r3, #1
 8001b34:	045b      	lsls	r3, r3, #17
 8001b36:	69ba      	ldr	r2, [r7, #24]
 8001b38:	4313      	orrs	r3, r2
 8001b3a:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d009      	beq.n	8001b58 <HAL_ADC_Init+0x170>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b48:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b50:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001b52:	69ba      	ldr	r2, [r7, #24]
 8001b54:	4313      	orrs	r3, r2
 8001b56:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	68da      	ldr	r2, [r3, #12]
 8001b5e:	4b45      	ldr	r3, [pc, #276]	; (8001c74 <HAL_ADC_Init+0x28c>)
 8001b60:	4013      	ands	r3, r2
 8001b62:	687a      	ldr	r2, [r7, #4]
 8001b64:	6812      	ldr	r2, [r2, #0]
 8001b66:	69b9      	ldr	r1, [r7, #24]
 8001b68:	430b      	orrs	r3, r1
 8001b6a:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	4618      	mov	r0, r3
 8001b72:	f7ff ff12 	bl	800199a <LL_ADC_REG_IsConversionOngoing>
 8001b76:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	4618      	mov	r0, r3
 8001b7e:	f7ff ff1f 	bl	80019c0 <LL_ADC_INJ_IsConversionOngoing>
 8001b82:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001b84:	693b      	ldr	r3, [r7, #16]
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d13d      	bne.n	8001c06 <HAL_ADC_Init+0x21e>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d13a      	bne.n	8001c06 <HAL_ADC_Init+0x21e>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001b94:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001b9c:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001b9e:	4313      	orrs	r3, r2
 8001ba0:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	68db      	ldr	r3, [r3, #12]
 8001ba8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001bac:	f023 0302 	bic.w	r3, r3, #2
 8001bb0:	687a      	ldr	r2, [r7, #4]
 8001bb2:	6812      	ldr	r2, [r2, #0]
 8001bb4:	69b9      	ldr	r1, [r7, #24]
 8001bb6:	430b      	orrs	r3, r1
 8001bb8:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001bc0:	2b01      	cmp	r3, #1
 8001bc2:	d118      	bne.n	8001bf6 <HAL_ADC_Init+0x20e>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	691b      	ldr	r3, [r3, #16]
 8001bca:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8001bce:	f023 0304 	bic.w	r3, r3, #4
 8001bd2:	687a      	ldr	r2, [r7, #4]
 8001bd4:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8001bd6:	687a      	ldr	r2, [r7, #4]
 8001bd8:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001bda:	4311      	orrs	r1, r2
 8001bdc:	687a      	ldr	r2, [r7, #4]
 8001bde:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001be0:	4311      	orrs	r1, r2
 8001be2:	687a      	ldr	r2, [r7, #4]
 8001be4:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001be6:	430a      	orrs	r2, r1
 8001be8:	431a      	orrs	r2, r3
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	f042 0201 	orr.w	r2, r2, #1
 8001bf2:	611a      	str	r2, [r3, #16]
 8001bf4:	e007      	b.n	8001c06 <HAL_ADC_Init+0x21e>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	691a      	ldr	r2, [r3, #16]
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	f022 0201 	bic.w	r2, r2, #1
 8001c04:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	691b      	ldr	r3, [r3, #16]
 8001c0a:	2b01      	cmp	r3, #1
 8001c0c:	d10c      	bne.n	8001c28 <HAL_ADC_Init+0x240>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c14:	f023 010f 	bic.w	r1, r3, #15
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	69db      	ldr	r3, [r3, #28]
 8001c1c:	1e5a      	subs	r2, r3, #1
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	430a      	orrs	r2, r1
 8001c24:	631a      	str	r2, [r3, #48]	; 0x30
 8001c26:	e007      	b.n	8001c38 <HAL_ADC_Init+0x250>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	f022 020f 	bic.w	r2, r2, #15
 8001c36:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c3c:	f023 0303 	bic.w	r3, r3, #3
 8001c40:	f043 0201 	orr.w	r2, r3, #1
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	655a      	str	r2, [r3, #84]	; 0x54
 8001c48:	e007      	b.n	8001c5a <HAL_ADC_Init+0x272>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c4e:	f043 0210 	orr.w	r2, r3, #16
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8001c56:	2301      	movs	r3, #1
 8001c58:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001c5a:	7ffb      	ldrb	r3, [r7, #31]
}
 8001c5c:	4618      	mov	r0, r3
 8001c5e:	3720      	adds	r7, #32
 8001c60:	46bd      	mov	sp, r7
 8001c62:	bd80      	pop	{r7, pc}
 8001c64:	20000000 	.word	0x20000000
 8001c68:	053e2d63 	.word	0x053e2d63
 8001c6c:	50040000 	.word	0x50040000
 8001c70:	50040300 	.word	0x50040300
 8001c74:	fff0c007 	.word	0xfff0c007

08001c78 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	b084      	sub	sp, #16
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	4618      	mov	r0, r3
 8001c86:	f7ff fe88 	bl	800199a <LL_ADC_REG_IsConversionOngoing>
 8001c8a:	4603      	mov	r3, r0
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d14f      	bne.n	8001d30 <HAL_ADC_Start+0xb8>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001c96:	2b01      	cmp	r3, #1
 8001c98:	d101      	bne.n	8001c9e <HAL_ADC_Start+0x26>
 8001c9a:	2302      	movs	r3, #2
 8001c9c:	e04b      	b.n	8001d36 <HAL_ADC_Start+0xbe>
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	2201      	movs	r2, #1
 8001ca2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001ca6:	6878      	ldr	r0, [r7, #4]
 8001ca8:	f000 fcc6 	bl	8002638 <ADC_Enable>
 8001cac:	4603      	mov	r3, r0
 8001cae:	73fb      	strb	r3, [r7, #15]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001cb0:	7bfb      	ldrb	r3, [r7, #15]
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d137      	bne.n	8001d26 <HAL_ADC_Start+0xae>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001cba:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001cbe:	f023 0301 	bic.w	r3, r3, #1
 8001cc2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	655a      	str	r2, [r3, #84]	; 0x54
      }
#endif

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001cce:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001cd2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001cd6:	d106      	bne.n	8001ce6 <HAL_ADC_Start+0x6e>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cdc:	f023 0206 	bic.w	r2, r3, #6
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	659a      	str	r2, [r3, #88]	; 0x58
 8001ce4:	e002      	b.n	8001cec <HAL_ADC_Start+0x74>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	2200      	movs	r2, #0
 8001cea:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	221c      	movs	r2, #28
 8001cf2:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	2200      	movs	r2, #0
 8001cf8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
        }

      }
#else
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	68db      	ldr	r3, [r3, #12]
 8001d02:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d007      	beq.n	8001d1a <HAL_ADC_Start+0xa2>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d0e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001d12:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	655a      	str	r2, [r3, #84]	; 0x54
      }

      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	4618      	mov	r0, r3
 8001d20:	f7ff fe27 	bl	8001972 <LL_ADC_REG_StartConversion>
 8001d24:	e006      	b.n	8001d34 <HAL_ADC_Start+0xbc>
#endif
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	2200      	movs	r2, #0
 8001d2a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8001d2e:	e001      	b.n	8001d34 <HAL_ADC_Start+0xbc>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001d30:	2302      	movs	r3, #2
 8001d32:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return tmp_hal_status;
 8001d34:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d36:	4618      	mov	r0, r3
 8001d38:	3710      	adds	r7, #16
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	bd80      	pop	{r7, pc}

08001d3e <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8001d3e:	b580      	push	{r7, lr}
 8001d40:	b086      	sub	sp, #24
 8001d42:	af00      	add	r7, sp, #0
 8001d44:	6078      	str	r0, [r7, #4]
 8001d46:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	695b      	ldr	r3, [r3, #20]
 8001d4c:	2b08      	cmp	r3, #8
 8001d4e:	d102      	bne.n	8001d56 <HAL_ADC_PollForConversion+0x18>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8001d50:	2308      	movs	r3, #8
 8001d52:	617b      	str	r3, [r7, #20]
 8001d54:	e010      	b.n	8001d78 <HAL_ADC_PollForConversion+0x3a>
        tmp_Flag_End = (ADC_FLAG_EOC);
      }
    }
#else
    /* Check ADC DMA mode */
    if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	68db      	ldr	r3, [r3, #12]
 8001d5c:	f003 0301 	and.w	r3, r3, #1
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d007      	beq.n	8001d74 <HAL_ADC_PollForConversion+0x36>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d68:	f043 0220 	orr.w	r2, r3, #32
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_ERROR;
 8001d70:	2301      	movs	r3, #1
 8001d72:	e06f      	b.n	8001e54 <HAL_ADC_PollForConversion+0x116>
    }
    else
    {
      tmp_Flag_End = (ADC_FLAG_EOC);
 8001d74:	2304      	movs	r3, #4
 8001d76:	617b      	str	r3, [r7, #20]
    }
#endif
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8001d78:	f7ff fc3e 	bl	80015f8 <HAL_GetTick>
 8001d7c:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8001d7e:	e021      	b.n	8001dc4 <HAL_ADC_PollForConversion+0x86>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8001d80:	683b      	ldr	r3, [r7, #0]
 8001d82:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d86:	d01d      	beq.n	8001dc4 <HAL_ADC_PollForConversion+0x86>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8001d88:	f7ff fc36 	bl	80015f8 <HAL_GetTick>
 8001d8c:	4602      	mov	r2, r0
 8001d8e:	693b      	ldr	r3, [r7, #16]
 8001d90:	1ad3      	subs	r3, r2, r3
 8001d92:	683a      	ldr	r2, [r7, #0]
 8001d94:	429a      	cmp	r2, r3
 8001d96:	d302      	bcc.n	8001d9e <HAL_ADC_PollForConversion+0x60>
 8001d98:	683b      	ldr	r3, [r7, #0]
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d112      	bne.n	8001dc4 <HAL_ADC_PollForConversion+0x86>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	681a      	ldr	r2, [r3, #0]
 8001da4:	697b      	ldr	r3, [r7, #20]
 8001da6:	4013      	ands	r3, r2
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d10b      	bne.n	8001dc4 <HAL_ADC_PollForConversion+0x86>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001db0:	f043 0204 	orr.w	r2, r3, #4
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	655a      	str	r2, [r3, #84]	; 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	2200      	movs	r2, #0
 8001dbc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

          return HAL_TIMEOUT;
 8001dc0:	2303      	movs	r3, #3
 8001dc2:	e047      	b.n	8001e54 <HAL_ADC_PollForConversion+0x116>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	681a      	ldr	r2, [r3, #0]
 8001dca:	697b      	ldr	r3, [r7, #20]
 8001dcc:	4013      	ands	r3, r2
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d0d6      	beq.n	8001d80 <HAL_ADC_PollForConversion+0x42>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001dd6:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	655a      	str	r2, [r3, #84]	; 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	4618      	mov	r0, r3
 8001de4:	f7ff fcc1 	bl	800176a <LL_ADC_REG_IsTriggerSourceSWStart>
 8001de8:	4603      	mov	r3, r0
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d01c      	beq.n	8001e28 <HAL_ADC_PollForConversion+0xea>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	7e5b      	ldrb	r3, [r3, #25]
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d118      	bne.n	8001e28 <HAL_ADC_PollForConversion+0xea>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	f003 0308 	and.w	r3, r3, #8
 8001e00:	2b08      	cmp	r3, #8
 8001e02:	d111      	bne.n	8001e28 <HAL_ADC_PollForConversion+0xea>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e08:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	655a      	str	r2, [r3, #84]	; 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e14:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d105      	bne.n	8001e28 <HAL_ADC_PollForConversion+0xea>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e20:	f043 0201 	orr.w	r2, r3, #1
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	655a      	str	r2, [r3, #84]	; 0x54
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
  }
#else
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	68db      	ldr	r3, [r3, #12]
 8001e2e:	60fb      	str	r3, [r7, #12]
#endif

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8001e30:	697b      	ldr	r3, [r7, #20]
 8001e32:	2b08      	cmp	r3, #8
 8001e34:	d104      	bne.n	8001e40 <HAL_ADC_PollForConversion+0x102>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	2208      	movs	r2, #8
 8001e3c:	601a      	str	r2, [r3, #0]
 8001e3e:	e008      	b.n	8001e52 <HAL_ADC_PollForConversion+0x114>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d103      	bne.n	8001e52 <HAL_ADC_PollForConversion+0x114>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	220c      	movs	r2, #12
 8001e50:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8001e52:	2300      	movs	r3, #0
}
 8001e54:	4618      	mov	r0, r3
 8001e56:	3718      	adds	r7, #24
 8001e58:	46bd      	mov	sp, r7
 8001e5a:	bd80      	pop	{r7, pc}

08001e5c <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8001e5c:	b480      	push	{r7}
 8001e5e:	b083      	sub	sp, #12
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8001e6a:	4618      	mov	r0, r3
 8001e6c:	370c      	adds	r7, #12
 8001e6e:	46bd      	mov	sp, r7
 8001e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e74:	4770      	bx	lr
	...

08001e78 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	b0b6      	sub	sp, #216	; 0xd8
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	6078      	str	r0, [r7, #4]
 8001e80:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001e82:	2300      	movs	r3, #0
 8001e84:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001e88:	2300      	movs	r3, #0
 8001e8a:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001e92:	2b01      	cmp	r3, #1
 8001e94:	d101      	bne.n	8001e9a <HAL_ADC_ConfigChannel+0x22>
 8001e96:	2302      	movs	r3, #2
 8001e98:	e3b9      	b.n	800260e <HAL_ADC_ConfigChannel+0x796>
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	2201      	movs	r2, #1
 8001e9e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	4618      	mov	r0, r3
 8001ea8:	f7ff fd77 	bl	800199a <LL_ADC_REG_IsConversionOngoing>
 8001eac:	4603      	mov	r3, r0
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	f040 839e 	bne.w	80025f0 <HAL_ADC_ConfigChannel+0x778>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 8001eb4:	683b      	ldr	r3, [r7, #0]
 8001eb6:	685b      	ldr	r3, [r3, #4]
 8001eb8:	2b05      	cmp	r3, #5
 8001eba:	d824      	bhi.n	8001f06 <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 8001ebc:	683b      	ldr	r3, [r7, #0]
 8001ebe:	685b      	ldr	r3, [r3, #4]
 8001ec0:	3b02      	subs	r3, #2
 8001ec2:	2b03      	cmp	r3, #3
 8001ec4:	d81b      	bhi.n	8001efe <HAL_ADC_ConfigChannel+0x86>
 8001ec6:	a201      	add	r2, pc, #4	; (adr r2, 8001ecc <HAL_ADC_ConfigChannel+0x54>)
 8001ec8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ecc:	08001edd 	.word	0x08001edd
 8001ed0:	08001ee5 	.word	0x08001ee5
 8001ed4:	08001eed 	.word	0x08001eed
 8001ed8:	08001ef5 	.word	0x08001ef5
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 8001edc:	683b      	ldr	r3, [r7, #0]
 8001ede:	220c      	movs	r2, #12
 8001ee0:	605a      	str	r2, [r3, #4]
          break;
 8001ee2:	e011      	b.n	8001f08 <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 8001ee4:	683b      	ldr	r3, [r7, #0]
 8001ee6:	2212      	movs	r2, #18
 8001ee8:	605a      	str	r2, [r3, #4]
          break;
 8001eea:	e00d      	b.n	8001f08 <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 8001eec:	683b      	ldr	r3, [r7, #0]
 8001eee:	2218      	movs	r2, #24
 8001ef0:	605a      	str	r2, [r3, #4]
          break;
 8001ef2:	e009      	b.n	8001f08 <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 8001ef4:	683b      	ldr	r3, [r7, #0]
 8001ef6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001efa:	605a      	str	r2, [r3, #4]
          break;
 8001efc:	e004      	b.n	8001f08 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 8001efe:	683b      	ldr	r3, [r7, #0]
 8001f00:	2206      	movs	r2, #6
 8001f02:	605a      	str	r2, [r3, #4]
          break;
 8001f04:	e000      	b.n	8001f08 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 8001f06:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	6818      	ldr	r0, [r3, #0]
 8001f0c:	683b      	ldr	r3, [r7, #0]
 8001f0e:	6859      	ldr	r1, [r3, #4]
 8001f10:	683b      	ldr	r3, [r7, #0]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	461a      	mov	r2, r3
 8001f16:	f7ff fc3b 	bl	8001790 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	4618      	mov	r0, r3
 8001f20:	f7ff fd3b 	bl	800199a <LL_ADC_REG_IsConversionOngoing>
 8001f24:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	4618      	mov	r0, r3
 8001f2e:	f7ff fd47 	bl	80019c0 <LL_ADC_INJ_IsConversionOngoing>
 8001f32:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001f36:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	f040 81a6 	bne.w	800228c <HAL_ADC_ConfigChannel+0x414>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001f40:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	f040 81a1 	bne.w	800228c <HAL_ADC_ConfigChannel+0x414>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	6818      	ldr	r0, [r3, #0]
 8001f4e:	683b      	ldr	r3, [r7, #0]
 8001f50:	6819      	ldr	r1, [r3, #0]
 8001f52:	683b      	ldr	r3, [r7, #0]
 8001f54:	689b      	ldr	r3, [r3, #8]
 8001f56:	461a      	mov	r2, r3
 8001f58:	f7ff fc46 	bl	80017e8 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8001f5c:	683b      	ldr	r3, [r7, #0]
 8001f5e:	695a      	ldr	r2, [r3, #20]
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	68db      	ldr	r3, [r3, #12]
 8001f66:	08db      	lsrs	r3, r3, #3
 8001f68:	f003 0303 	and.w	r3, r3, #3
 8001f6c:	005b      	lsls	r3, r3, #1
 8001f6e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f72:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001f76:	683b      	ldr	r3, [r7, #0]
 8001f78:	691b      	ldr	r3, [r3, #16]
 8001f7a:	2b04      	cmp	r3, #4
 8001f7c:	d00a      	beq.n	8001f94 <HAL_ADC_ConfigChannel+0x11c>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	6818      	ldr	r0, [r3, #0]
 8001f82:	683b      	ldr	r3, [r7, #0]
 8001f84:	6919      	ldr	r1, [r3, #16]
 8001f86:	683b      	ldr	r3, [r7, #0]
 8001f88:	681a      	ldr	r2, [r3, #0]
 8001f8a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001f8e:	f7ff fb97 	bl	80016c0 <LL_ADC_SetOffset>
 8001f92:	e17b      	b.n	800228c <HAL_ADC_ConfigChannel+0x414>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	2100      	movs	r1, #0
 8001f9a:	4618      	mov	r0, r3
 8001f9c:	f7ff fbb4 	bl	8001708 <LL_ADC_GetOffsetChannel>
 8001fa0:	4603      	mov	r3, r0
 8001fa2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d10a      	bne.n	8001fc0 <HAL_ADC_ConfigChannel+0x148>
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	2100      	movs	r1, #0
 8001fb0:	4618      	mov	r0, r3
 8001fb2:	f7ff fba9 	bl	8001708 <LL_ADC_GetOffsetChannel>
 8001fb6:	4603      	mov	r3, r0
 8001fb8:	0e9b      	lsrs	r3, r3, #26
 8001fba:	f003 021f 	and.w	r2, r3, #31
 8001fbe:	e01e      	b.n	8001ffe <HAL_ADC_ConfigChannel+0x186>
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	2100      	movs	r1, #0
 8001fc6:	4618      	mov	r0, r3
 8001fc8:	f7ff fb9e 	bl	8001708 <LL_ADC_GetOffsetChannel>
 8001fcc:	4603      	mov	r3, r0
 8001fce:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fd2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001fd6:	fa93 f3a3 	rbit	r3, r3
 8001fda:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001fde:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8001fe2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001fe6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d101      	bne.n	8001ff2 <HAL_ADC_ConfigChannel+0x17a>
  {
    return 32U;
 8001fee:	2320      	movs	r3, #32
 8001ff0:	e004      	b.n	8001ffc <HAL_ADC_ConfigChannel+0x184>
  }
  return __builtin_clz(value);
 8001ff2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001ff6:	fab3 f383 	clz	r3, r3
 8001ffa:	b2db      	uxtb	r3, r3
 8001ffc:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001ffe:	683b      	ldr	r3, [r7, #0]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002006:	2b00      	cmp	r3, #0
 8002008:	d105      	bne.n	8002016 <HAL_ADC_ConfigChannel+0x19e>
 800200a:	683b      	ldr	r3, [r7, #0]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	0e9b      	lsrs	r3, r3, #26
 8002010:	f003 031f 	and.w	r3, r3, #31
 8002014:	e018      	b.n	8002048 <HAL_ADC_ConfigChannel+0x1d0>
 8002016:	683b      	ldr	r3, [r7, #0]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800201e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002022:	fa93 f3a3 	rbit	r3, r3
 8002026:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 800202a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800202e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8002032:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002036:	2b00      	cmp	r3, #0
 8002038:	d101      	bne.n	800203e <HAL_ADC_ConfigChannel+0x1c6>
    return 32U;
 800203a:	2320      	movs	r3, #32
 800203c:	e004      	b.n	8002048 <HAL_ADC_ConfigChannel+0x1d0>
  return __builtin_clz(value);
 800203e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002042:	fab3 f383 	clz	r3, r3
 8002046:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002048:	429a      	cmp	r2, r3
 800204a:	d106      	bne.n	800205a <HAL_ADC_ConfigChannel+0x1e2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	2200      	movs	r2, #0
 8002052:	2100      	movs	r1, #0
 8002054:	4618      	mov	r0, r3
 8002056:	f7ff fb6d 	bl	8001734 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	2101      	movs	r1, #1
 8002060:	4618      	mov	r0, r3
 8002062:	f7ff fb51 	bl	8001708 <LL_ADC_GetOffsetChannel>
 8002066:	4603      	mov	r3, r0
 8002068:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800206c:	2b00      	cmp	r3, #0
 800206e:	d10a      	bne.n	8002086 <HAL_ADC_ConfigChannel+0x20e>
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	2101      	movs	r1, #1
 8002076:	4618      	mov	r0, r3
 8002078:	f7ff fb46 	bl	8001708 <LL_ADC_GetOffsetChannel>
 800207c:	4603      	mov	r3, r0
 800207e:	0e9b      	lsrs	r3, r3, #26
 8002080:	f003 021f 	and.w	r2, r3, #31
 8002084:	e01e      	b.n	80020c4 <HAL_ADC_ConfigChannel+0x24c>
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	2101      	movs	r1, #1
 800208c:	4618      	mov	r0, r3
 800208e:	f7ff fb3b 	bl	8001708 <LL_ADC_GetOffsetChannel>
 8002092:	4603      	mov	r3, r0
 8002094:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002098:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800209c:	fa93 f3a3 	rbit	r3, r3
 80020a0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 80020a4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80020a8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 80020ac:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d101      	bne.n	80020b8 <HAL_ADC_ConfigChannel+0x240>
    return 32U;
 80020b4:	2320      	movs	r3, #32
 80020b6:	e004      	b.n	80020c2 <HAL_ADC_ConfigChannel+0x24a>
  return __builtin_clz(value);
 80020b8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80020bc:	fab3 f383 	clz	r3, r3
 80020c0:	b2db      	uxtb	r3, r3
 80020c2:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80020c4:	683b      	ldr	r3, [r7, #0]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d105      	bne.n	80020dc <HAL_ADC_ConfigChannel+0x264>
 80020d0:	683b      	ldr	r3, [r7, #0]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	0e9b      	lsrs	r3, r3, #26
 80020d6:	f003 031f 	and.w	r3, r3, #31
 80020da:	e018      	b.n	800210e <HAL_ADC_ConfigChannel+0x296>
 80020dc:	683b      	ldr	r3, [r7, #0]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020e4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80020e8:	fa93 f3a3 	rbit	r3, r3
 80020ec:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 80020f0:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80020f4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 80020f8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d101      	bne.n	8002104 <HAL_ADC_ConfigChannel+0x28c>
    return 32U;
 8002100:	2320      	movs	r3, #32
 8002102:	e004      	b.n	800210e <HAL_ADC_ConfigChannel+0x296>
  return __builtin_clz(value);
 8002104:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002108:	fab3 f383 	clz	r3, r3
 800210c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800210e:	429a      	cmp	r2, r3
 8002110:	d106      	bne.n	8002120 <HAL_ADC_ConfigChannel+0x2a8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	2200      	movs	r2, #0
 8002118:	2101      	movs	r1, #1
 800211a:	4618      	mov	r0, r3
 800211c:	f7ff fb0a 	bl	8001734 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	2102      	movs	r1, #2
 8002126:	4618      	mov	r0, r3
 8002128:	f7ff faee 	bl	8001708 <LL_ADC_GetOffsetChannel>
 800212c:	4603      	mov	r3, r0
 800212e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002132:	2b00      	cmp	r3, #0
 8002134:	d10a      	bne.n	800214c <HAL_ADC_ConfigChannel+0x2d4>
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	2102      	movs	r1, #2
 800213c:	4618      	mov	r0, r3
 800213e:	f7ff fae3 	bl	8001708 <LL_ADC_GetOffsetChannel>
 8002142:	4603      	mov	r3, r0
 8002144:	0e9b      	lsrs	r3, r3, #26
 8002146:	f003 021f 	and.w	r2, r3, #31
 800214a:	e01e      	b.n	800218a <HAL_ADC_ConfigChannel+0x312>
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	2102      	movs	r1, #2
 8002152:	4618      	mov	r0, r3
 8002154:	f7ff fad8 	bl	8001708 <LL_ADC_GetOffsetChannel>
 8002158:	4603      	mov	r3, r0
 800215a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800215e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002162:	fa93 f3a3 	rbit	r3, r3
 8002166:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 800216a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800216e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8002172:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002176:	2b00      	cmp	r3, #0
 8002178:	d101      	bne.n	800217e <HAL_ADC_ConfigChannel+0x306>
    return 32U;
 800217a:	2320      	movs	r3, #32
 800217c:	e004      	b.n	8002188 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 800217e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002182:	fab3 f383 	clz	r3, r3
 8002186:	b2db      	uxtb	r3, r3
 8002188:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800218a:	683b      	ldr	r3, [r7, #0]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002192:	2b00      	cmp	r3, #0
 8002194:	d105      	bne.n	80021a2 <HAL_ADC_ConfigChannel+0x32a>
 8002196:	683b      	ldr	r3, [r7, #0]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	0e9b      	lsrs	r3, r3, #26
 800219c:	f003 031f 	and.w	r3, r3, #31
 80021a0:	e016      	b.n	80021d0 <HAL_ADC_ConfigChannel+0x358>
 80021a2:	683b      	ldr	r3, [r7, #0]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021aa:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80021ae:	fa93 f3a3 	rbit	r3, r3
 80021b2:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 80021b4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80021b6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 80021ba:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d101      	bne.n	80021c6 <HAL_ADC_ConfigChannel+0x34e>
    return 32U;
 80021c2:	2320      	movs	r3, #32
 80021c4:	e004      	b.n	80021d0 <HAL_ADC_ConfigChannel+0x358>
  return __builtin_clz(value);
 80021c6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80021ca:	fab3 f383 	clz	r3, r3
 80021ce:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80021d0:	429a      	cmp	r2, r3
 80021d2:	d106      	bne.n	80021e2 <HAL_ADC_ConfigChannel+0x36a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	2200      	movs	r2, #0
 80021da:	2102      	movs	r1, #2
 80021dc:	4618      	mov	r0, r3
 80021de:	f7ff faa9 	bl	8001734 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	2103      	movs	r1, #3
 80021e8:	4618      	mov	r0, r3
 80021ea:	f7ff fa8d 	bl	8001708 <LL_ADC_GetOffsetChannel>
 80021ee:	4603      	mov	r3, r0
 80021f0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d10a      	bne.n	800220e <HAL_ADC_ConfigChannel+0x396>
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	2103      	movs	r1, #3
 80021fe:	4618      	mov	r0, r3
 8002200:	f7ff fa82 	bl	8001708 <LL_ADC_GetOffsetChannel>
 8002204:	4603      	mov	r3, r0
 8002206:	0e9b      	lsrs	r3, r3, #26
 8002208:	f003 021f 	and.w	r2, r3, #31
 800220c:	e017      	b.n	800223e <HAL_ADC_ConfigChannel+0x3c6>
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	2103      	movs	r1, #3
 8002214:	4618      	mov	r0, r3
 8002216:	f7ff fa77 	bl	8001708 <LL_ADC_GetOffsetChannel>
 800221a:	4603      	mov	r3, r0
 800221c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800221e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002220:	fa93 f3a3 	rbit	r3, r3
 8002224:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8002226:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002228:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 800222a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800222c:	2b00      	cmp	r3, #0
 800222e:	d101      	bne.n	8002234 <HAL_ADC_ConfigChannel+0x3bc>
    return 32U;
 8002230:	2320      	movs	r3, #32
 8002232:	e003      	b.n	800223c <HAL_ADC_ConfigChannel+0x3c4>
  return __builtin_clz(value);
 8002234:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002236:	fab3 f383 	clz	r3, r3
 800223a:	b2db      	uxtb	r3, r3
 800223c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800223e:	683b      	ldr	r3, [r7, #0]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002246:	2b00      	cmp	r3, #0
 8002248:	d105      	bne.n	8002256 <HAL_ADC_ConfigChannel+0x3de>
 800224a:	683b      	ldr	r3, [r7, #0]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	0e9b      	lsrs	r3, r3, #26
 8002250:	f003 031f 	and.w	r3, r3, #31
 8002254:	e011      	b.n	800227a <HAL_ADC_ConfigChannel+0x402>
 8002256:	683b      	ldr	r3, [r7, #0]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800225c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800225e:	fa93 f3a3 	rbit	r3, r3
 8002262:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8002264:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002266:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8002268:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800226a:	2b00      	cmp	r3, #0
 800226c:	d101      	bne.n	8002272 <HAL_ADC_ConfigChannel+0x3fa>
    return 32U;
 800226e:	2320      	movs	r3, #32
 8002270:	e003      	b.n	800227a <HAL_ADC_ConfigChannel+0x402>
  return __builtin_clz(value);
 8002272:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002274:	fab3 f383 	clz	r3, r3
 8002278:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800227a:	429a      	cmp	r2, r3
 800227c:	d106      	bne.n	800228c <HAL_ADC_ConfigChannel+0x414>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	2200      	movs	r2, #0
 8002284:	2103      	movs	r1, #3
 8002286:	4618      	mov	r0, r3
 8002288:	f7ff fa54 	bl	8001734 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	4618      	mov	r0, r3
 8002292:	f7ff fb5b 	bl	800194c <LL_ADC_IsEnabled>
 8002296:	4603      	mov	r3, r0
 8002298:	2b00      	cmp	r3, #0
 800229a:	f040 813f 	bne.w	800251c <HAL_ADC_ConfigChannel+0x6a4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	6818      	ldr	r0, [r3, #0]
 80022a2:	683b      	ldr	r3, [r7, #0]
 80022a4:	6819      	ldr	r1, [r3, #0]
 80022a6:	683b      	ldr	r3, [r7, #0]
 80022a8:	68db      	ldr	r3, [r3, #12]
 80022aa:	461a      	mov	r2, r3
 80022ac:	f7ff fac8 	bl	8001840 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80022b0:	683b      	ldr	r3, [r7, #0]
 80022b2:	68db      	ldr	r3, [r3, #12]
 80022b4:	4a8e      	ldr	r2, [pc, #568]	; (80024f0 <HAL_ADC_ConfigChannel+0x678>)
 80022b6:	4293      	cmp	r3, r2
 80022b8:	f040 8130 	bne.w	800251c <HAL_ADC_ConfigChannel+0x6a4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80022c0:	683b      	ldr	r3, [r7, #0]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d10b      	bne.n	80022e4 <HAL_ADC_ConfigChannel+0x46c>
 80022cc:	683b      	ldr	r3, [r7, #0]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	0e9b      	lsrs	r3, r3, #26
 80022d2:	3301      	adds	r3, #1
 80022d4:	f003 031f 	and.w	r3, r3, #31
 80022d8:	2b09      	cmp	r3, #9
 80022da:	bf94      	ite	ls
 80022dc:	2301      	movls	r3, #1
 80022de:	2300      	movhi	r3, #0
 80022e0:	b2db      	uxtb	r3, r3
 80022e2:	e019      	b.n	8002318 <HAL_ADC_ConfigChannel+0x4a0>
 80022e4:	683b      	ldr	r3, [r7, #0]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022ea:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80022ec:	fa93 f3a3 	rbit	r3, r3
 80022f0:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 80022f2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80022f4:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 80022f6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d101      	bne.n	8002300 <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 80022fc:	2320      	movs	r3, #32
 80022fe:	e003      	b.n	8002308 <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 8002300:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002302:	fab3 f383 	clz	r3, r3
 8002306:	b2db      	uxtb	r3, r3
 8002308:	3301      	adds	r3, #1
 800230a:	f003 031f 	and.w	r3, r3, #31
 800230e:	2b09      	cmp	r3, #9
 8002310:	bf94      	ite	ls
 8002312:	2301      	movls	r3, #1
 8002314:	2300      	movhi	r3, #0
 8002316:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002318:	2b00      	cmp	r3, #0
 800231a:	d079      	beq.n	8002410 <HAL_ADC_ConfigChannel+0x598>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800231c:	683b      	ldr	r3, [r7, #0]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002324:	2b00      	cmp	r3, #0
 8002326:	d107      	bne.n	8002338 <HAL_ADC_ConfigChannel+0x4c0>
 8002328:	683b      	ldr	r3, [r7, #0]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	0e9b      	lsrs	r3, r3, #26
 800232e:	3301      	adds	r3, #1
 8002330:	069b      	lsls	r3, r3, #26
 8002332:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002336:	e015      	b.n	8002364 <HAL_ADC_ConfigChannel+0x4ec>
 8002338:	683b      	ldr	r3, [r7, #0]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800233e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002340:	fa93 f3a3 	rbit	r3, r3
 8002344:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002346:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002348:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 800234a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800234c:	2b00      	cmp	r3, #0
 800234e:	d101      	bne.n	8002354 <HAL_ADC_ConfigChannel+0x4dc>
    return 32U;
 8002350:	2320      	movs	r3, #32
 8002352:	e003      	b.n	800235c <HAL_ADC_ConfigChannel+0x4e4>
  return __builtin_clz(value);
 8002354:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002356:	fab3 f383 	clz	r3, r3
 800235a:	b2db      	uxtb	r3, r3
 800235c:	3301      	adds	r3, #1
 800235e:	069b      	lsls	r3, r3, #26
 8002360:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002364:	683b      	ldr	r3, [r7, #0]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800236c:	2b00      	cmp	r3, #0
 800236e:	d109      	bne.n	8002384 <HAL_ADC_ConfigChannel+0x50c>
 8002370:	683b      	ldr	r3, [r7, #0]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	0e9b      	lsrs	r3, r3, #26
 8002376:	3301      	adds	r3, #1
 8002378:	f003 031f 	and.w	r3, r3, #31
 800237c:	2101      	movs	r1, #1
 800237e:	fa01 f303 	lsl.w	r3, r1, r3
 8002382:	e017      	b.n	80023b4 <HAL_ADC_ConfigChannel+0x53c>
 8002384:	683b      	ldr	r3, [r7, #0]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800238a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800238c:	fa93 f3a3 	rbit	r3, r3
 8002390:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8002392:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002394:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8002396:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002398:	2b00      	cmp	r3, #0
 800239a:	d101      	bne.n	80023a0 <HAL_ADC_ConfigChannel+0x528>
    return 32U;
 800239c:	2320      	movs	r3, #32
 800239e:	e003      	b.n	80023a8 <HAL_ADC_ConfigChannel+0x530>
  return __builtin_clz(value);
 80023a0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80023a2:	fab3 f383 	clz	r3, r3
 80023a6:	b2db      	uxtb	r3, r3
 80023a8:	3301      	adds	r3, #1
 80023aa:	f003 031f 	and.w	r3, r3, #31
 80023ae:	2101      	movs	r1, #1
 80023b0:	fa01 f303 	lsl.w	r3, r1, r3
 80023b4:	ea42 0103 	orr.w	r1, r2, r3
 80023b8:	683b      	ldr	r3, [r7, #0]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d10a      	bne.n	80023da <HAL_ADC_ConfigChannel+0x562>
 80023c4:	683b      	ldr	r3, [r7, #0]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	0e9b      	lsrs	r3, r3, #26
 80023ca:	3301      	adds	r3, #1
 80023cc:	f003 021f 	and.w	r2, r3, #31
 80023d0:	4613      	mov	r3, r2
 80023d2:	005b      	lsls	r3, r3, #1
 80023d4:	4413      	add	r3, r2
 80023d6:	051b      	lsls	r3, r3, #20
 80023d8:	e018      	b.n	800240c <HAL_ADC_ConfigChannel+0x594>
 80023da:	683b      	ldr	r3, [r7, #0]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80023e2:	fa93 f3a3 	rbit	r3, r3
 80023e6:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80023e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80023ea:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 80023ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d101      	bne.n	80023f6 <HAL_ADC_ConfigChannel+0x57e>
    return 32U;
 80023f2:	2320      	movs	r3, #32
 80023f4:	e003      	b.n	80023fe <HAL_ADC_ConfigChannel+0x586>
  return __builtin_clz(value);
 80023f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80023f8:	fab3 f383 	clz	r3, r3
 80023fc:	b2db      	uxtb	r3, r3
 80023fe:	3301      	adds	r3, #1
 8002400:	f003 021f 	and.w	r2, r3, #31
 8002404:	4613      	mov	r3, r2
 8002406:	005b      	lsls	r3, r3, #1
 8002408:	4413      	add	r3, r2
 800240a:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800240c:	430b      	orrs	r3, r1
 800240e:	e080      	b.n	8002512 <HAL_ADC_ConfigChannel+0x69a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002410:	683b      	ldr	r3, [r7, #0]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002418:	2b00      	cmp	r3, #0
 800241a:	d107      	bne.n	800242c <HAL_ADC_ConfigChannel+0x5b4>
 800241c:	683b      	ldr	r3, [r7, #0]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	0e9b      	lsrs	r3, r3, #26
 8002422:	3301      	adds	r3, #1
 8002424:	069b      	lsls	r3, r3, #26
 8002426:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800242a:	e015      	b.n	8002458 <HAL_ADC_ConfigChannel+0x5e0>
 800242c:	683b      	ldr	r3, [r7, #0]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002432:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002434:	fa93 f3a3 	rbit	r3, r3
 8002438:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 800243a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800243c:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 800243e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002440:	2b00      	cmp	r3, #0
 8002442:	d101      	bne.n	8002448 <HAL_ADC_ConfigChannel+0x5d0>
    return 32U;
 8002444:	2320      	movs	r3, #32
 8002446:	e003      	b.n	8002450 <HAL_ADC_ConfigChannel+0x5d8>
  return __builtin_clz(value);
 8002448:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800244a:	fab3 f383 	clz	r3, r3
 800244e:	b2db      	uxtb	r3, r3
 8002450:	3301      	adds	r3, #1
 8002452:	069b      	lsls	r3, r3, #26
 8002454:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002458:	683b      	ldr	r3, [r7, #0]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002460:	2b00      	cmp	r3, #0
 8002462:	d109      	bne.n	8002478 <HAL_ADC_ConfigChannel+0x600>
 8002464:	683b      	ldr	r3, [r7, #0]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	0e9b      	lsrs	r3, r3, #26
 800246a:	3301      	adds	r3, #1
 800246c:	f003 031f 	and.w	r3, r3, #31
 8002470:	2101      	movs	r1, #1
 8002472:	fa01 f303 	lsl.w	r3, r1, r3
 8002476:	e017      	b.n	80024a8 <HAL_ADC_ConfigChannel+0x630>
 8002478:	683b      	ldr	r3, [r7, #0]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800247e:	6a3b      	ldr	r3, [r7, #32]
 8002480:	fa93 f3a3 	rbit	r3, r3
 8002484:	61fb      	str	r3, [r7, #28]
  return result;
 8002486:	69fb      	ldr	r3, [r7, #28]
 8002488:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800248a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800248c:	2b00      	cmp	r3, #0
 800248e:	d101      	bne.n	8002494 <HAL_ADC_ConfigChannel+0x61c>
    return 32U;
 8002490:	2320      	movs	r3, #32
 8002492:	e003      	b.n	800249c <HAL_ADC_ConfigChannel+0x624>
  return __builtin_clz(value);
 8002494:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002496:	fab3 f383 	clz	r3, r3
 800249a:	b2db      	uxtb	r3, r3
 800249c:	3301      	adds	r3, #1
 800249e:	f003 031f 	and.w	r3, r3, #31
 80024a2:	2101      	movs	r1, #1
 80024a4:	fa01 f303 	lsl.w	r3, r1, r3
 80024a8:	ea42 0103 	orr.w	r1, r2, r3
 80024ac:	683b      	ldr	r3, [r7, #0]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d10d      	bne.n	80024d4 <HAL_ADC_ConfigChannel+0x65c>
 80024b8:	683b      	ldr	r3, [r7, #0]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	0e9b      	lsrs	r3, r3, #26
 80024be:	3301      	adds	r3, #1
 80024c0:	f003 021f 	and.w	r2, r3, #31
 80024c4:	4613      	mov	r3, r2
 80024c6:	005b      	lsls	r3, r3, #1
 80024c8:	4413      	add	r3, r2
 80024ca:	3b1e      	subs	r3, #30
 80024cc:	051b      	lsls	r3, r3, #20
 80024ce:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80024d2:	e01d      	b.n	8002510 <HAL_ADC_ConfigChannel+0x698>
 80024d4:	683b      	ldr	r3, [r7, #0]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024da:	697b      	ldr	r3, [r7, #20]
 80024dc:	fa93 f3a3 	rbit	r3, r3
 80024e0:	613b      	str	r3, [r7, #16]
  return result;
 80024e2:	693b      	ldr	r3, [r7, #16]
 80024e4:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80024e6:	69bb      	ldr	r3, [r7, #24]
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d103      	bne.n	80024f4 <HAL_ADC_ConfigChannel+0x67c>
    return 32U;
 80024ec:	2320      	movs	r3, #32
 80024ee:	e005      	b.n	80024fc <HAL_ADC_ConfigChannel+0x684>
 80024f0:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 80024f4:	69bb      	ldr	r3, [r7, #24]
 80024f6:	fab3 f383 	clz	r3, r3
 80024fa:	b2db      	uxtb	r3, r3
 80024fc:	3301      	adds	r3, #1
 80024fe:	f003 021f 	and.w	r2, r3, #31
 8002502:	4613      	mov	r3, r2
 8002504:	005b      	lsls	r3, r3, #1
 8002506:	4413      	add	r3, r2
 8002508:	3b1e      	subs	r3, #30
 800250a:	051b      	lsls	r3, r3, #20
 800250c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002510:	430b      	orrs	r3, r1
 8002512:	683a      	ldr	r2, [r7, #0]
 8002514:	6892      	ldr	r2, [r2, #8]
 8002516:	4619      	mov	r1, r3
 8002518:	f7ff f966 	bl	80017e8 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800251c:	683b      	ldr	r3, [r7, #0]
 800251e:	681a      	ldr	r2, [r3, #0]
 8002520:	4b3d      	ldr	r3, [pc, #244]	; (8002618 <HAL_ADC_ConfigChannel+0x7a0>)
 8002522:	4013      	ands	r3, r2
 8002524:	2b00      	cmp	r3, #0
 8002526:	d06c      	beq.n	8002602 <HAL_ADC_ConfigChannel+0x78a>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002528:	483c      	ldr	r0, [pc, #240]	; (800261c <HAL_ADC_ConfigChannel+0x7a4>)
 800252a:	f7ff f8bb 	bl	80016a4 <LL_ADC_GetCommonPathInternalCh>
 800252e:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002532:	683b      	ldr	r3, [r7, #0]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	4a3a      	ldr	r2, [pc, #232]	; (8002620 <HAL_ADC_ConfigChannel+0x7a8>)
 8002538:	4293      	cmp	r3, r2
 800253a:	d127      	bne.n	800258c <HAL_ADC_ConfigChannel+0x714>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800253c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002540:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002544:	2b00      	cmp	r3, #0
 8002546:	d121      	bne.n	800258c <HAL_ADC_ConfigChannel+0x714>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	4a35      	ldr	r2, [pc, #212]	; (8002624 <HAL_ADC_ConfigChannel+0x7ac>)
 800254e:	4293      	cmp	r3, r2
 8002550:	d157      	bne.n	8002602 <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002552:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002556:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800255a:	4619      	mov	r1, r3
 800255c:	482f      	ldr	r0, [pc, #188]	; (800261c <HAL_ADC_ConfigChannel+0x7a4>)
 800255e:	f7ff f88e 	bl	800167e <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002562:	4b31      	ldr	r3, [pc, #196]	; (8002628 <HAL_ADC_ConfigChannel+0x7b0>)
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	099b      	lsrs	r3, r3, #6
 8002568:	4a30      	ldr	r2, [pc, #192]	; (800262c <HAL_ADC_ConfigChannel+0x7b4>)
 800256a:	fba2 2303 	umull	r2, r3, r2, r3
 800256e:	099b      	lsrs	r3, r3, #6
 8002570:	1c5a      	adds	r2, r3, #1
 8002572:	4613      	mov	r3, r2
 8002574:	005b      	lsls	r3, r3, #1
 8002576:	4413      	add	r3, r2
 8002578:	009b      	lsls	r3, r3, #2
 800257a:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800257c:	e002      	b.n	8002584 <HAL_ADC_ConfigChannel+0x70c>
          {
            wait_loop_index--;
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	3b01      	subs	r3, #1
 8002582:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	2b00      	cmp	r3, #0
 8002588:	d1f9      	bne.n	800257e <HAL_ADC_ConfigChannel+0x706>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800258a:	e03a      	b.n	8002602 <HAL_ADC_ConfigChannel+0x78a>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800258c:	683b      	ldr	r3, [r7, #0]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	4a27      	ldr	r2, [pc, #156]	; (8002630 <HAL_ADC_ConfigChannel+0x7b8>)
 8002592:	4293      	cmp	r3, r2
 8002594:	d113      	bne.n	80025be <HAL_ADC_ConfigChannel+0x746>
 8002596:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800259a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d10d      	bne.n	80025be <HAL_ADC_ConfigChannel+0x746>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	4a1f      	ldr	r2, [pc, #124]	; (8002624 <HAL_ADC_ConfigChannel+0x7ac>)
 80025a8:	4293      	cmp	r3, r2
 80025aa:	d12a      	bne.n	8002602 <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80025ac:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80025b0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80025b4:	4619      	mov	r1, r3
 80025b6:	4819      	ldr	r0, [pc, #100]	; (800261c <HAL_ADC_ConfigChannel+0x7a4>)
 80025b8:	f7ff f861 	bl	800167e <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80025bc:	e021      	b.n	8002602 <HAL_ADC_ConfigChannel+0x78a>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 80025be:	683b      	ldr	r3, [r7, #0]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	4a1c      	ldr	r2, [pc, #112]	; (8002634 <HAL_ADC_ConfigChannel+0x7bc>)
 80025c4:	4293      	cmp	r3, r2
 80025c6:	d11c      	bne.n	8002602 <HAL_ADC_ConfigChannel+0x78a>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80025c8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80025cc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d116      	bne.n	8002602 <HAL_ADC_ConfigChannel+0x78a>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	4a12      	ldr	r2, [pc, #72]	; (8002624 <HAL_ADC_ConfigChannel+0x7ac>)
 80025da:	4293      	cmp	r3, r2
 80025dc:	d111      	bne.n	8002602 <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80025de:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80025e2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80025e6:	4619      	mov	r1, r3
 80025e8:	480c      	ldr	r0, [pc, #48]	; (800261c <HAL_ADC_ConfigChannel+0x7a4>)
 80025ea:	f7ff f848 	bl	800167e <LL_ADC_SetCommonPathInternalCh>
 80025ee:	e008      	b.n	8002602 <HAL_ADC_ConfigChannel+0x78a>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025f4:	f043 0220 	orr.w	r2, r3, #32
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80025fc:	2301      	movs	r3, #1
 80025fe:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	2200      	movs	r2, #0
 8002606:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 800260a:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 800260e:	4618      	mov	r0, r3
 8002610:	37d8      	adds	r7, #216	; 0xd8
 8002612:	46bd      	mov	sp, r7
 8002614:	bd80      	pop	{r7, pc}
 8002616:	bf00      	nop
 8002618:	80080000 	.word	0x80080000
 800261c:	50040300 	.word	0x50040300
 8002620:	c7520000 	.word	0xc7520000
 8002624:	50040000 	.word	0x50040000
 8002628:	20000000 	.word	0x20000000
 800262c:	053e2d63 	.word	0x053e2d63
 8002630:	cb840000 	.word	0xcb840000
 8002634:	80000001 	.word	0x80000001

08002638 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002638:	b580      	push	{r7, lr}
 800263a:	b084      	sub	sp, #16
 800263c:	af00      	add	r7, sp, #0
 800263e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8002640:	2300      	movs	r3, #0
 8002642:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	4618      	mov	r0, r3
 800264a:	f7ff f97f 	bl	800194c <LL_ADC_IsEnabled>
 800264e:	4603      	mov	r3, r0
 8002650:	2b00      	cmp	r3, #0
 8002652:	d169      	bne.n	8002728 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	689a      	ldr	r2, [r3, #8]
 800265a:	4b36      	ldr	r3, [pc, #216]	; (8002734 <ADC_Enable+0xfc>)
 800265c:	4013      	ands	r3, r2
 800265e:	2b00      	cmp	r3, #0
 8002660:	d00d      	beq.n	800267e <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002666:	f043 0210 	orr.w	r2, r3, #16
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002672:	f043 0201 	orr.w	r2, r3, #1
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 800267a:	2301      	movs	r3, #1
 800267c:	e055      	b.n	800272a <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	4618      	mov	r0, r3
 8002684:	f7ff f94e 	bl	8001924 <LL_ADC_Enable>

    if((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8002688:	482b      	ldr	r0, [pc, #172]	; (8002738 <ADC_Enable+0x100>)
 800268a:	f7ff f80b 	bl	80016a4 <LL_ADC_GetCommonPathInternalCh>
 800268e:	4603      	mov	r3, r0
 8002690:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002694:	2b00      	cmp	r3, #0
 8002696:	d013      	beq.n	80026c0 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002698:	4b28      	ldr	r3, [pc, #160]	; (800273c <ADC_Enable+0x104>)
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	099b      	lsrs	r3, r3, #6
 800269e:	4a28      	ldr	r2, [pc, #160]	; (8002740 <ADC_Enable+0x108>)
 80026a0:	fba2 2303 	umull	r2, r3, r2, r3
 80026a4:	099b      	lsrs	r3, r3, #6
 80026a6:	1c5a      	adds	r2, r3, #1
 80026a8:	4613      	mov	r3, r2
 80026aa:	005b      	lsls	r3, r3, #1
 80026ac:	4413      	add	r3, r2
 80026ae:	009b      	lsls	r3, r3, #2
 80026b0:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 80026b2:	e002      	b.n	80026ba <ADC_Enable+0x82>
      {
        wait_loop_index--;
 80026b4:	68bb      	ldr	r3, [r7, #8]
 80026b6:	3b01      	subs	r3, #1
 80026b8:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 80026ba:	68bb      	ldr	r3, [r7, #8]
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d1f9      	bne.n	80026b4 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80026c0:	f7fe ff9a 	bl	80015f8 <HAL_GetTick>
 80026c4:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80026c6:	e028      	b.n	800271a <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	4618      	mov	r0, r3
 80026ce:	f7ff f93d 	bl	800194c <LL_ADC_IsEnabled>
 80026d2:	4603      	mov	r3, r0
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d104      	bne.n	80026e2 <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	4618      	mov	r0, r3
 80026de:	f7ff f921 	bl	8001924 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80026e2:	f7fe ff89 	bl	80015f8 <HAL_GetTick>
 80026e6:	4602      	mov	r2, r0
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	1ad3      	subs	r3, r2, r3
 80026ec:	2b02      	cmp	r3, #2
 80026ee:	d914      	bls.n	800271a <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	f003 0301 	and.w	r3, r3, #1
 80026fa:	2b01      	cmp	r3, #1
 80026fc:	d00d      	beq.n	800271a <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002702:	f043 0210 	orr.w	r2, r3, #16
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800270e:	f043 0201 	orr.w	r2, r3, #1
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8002716:	2301      	movs	r3, #1
 8002718:	e007      	b.n	800272a <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	f003 0301 	and.w	r3, r3, #1
 8002724:	2b01      	cmp	r3, #1
 8002726:	d1cf      	bne.n	80026c8 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002728:	2300      	movs	r3, #0
}
 800272a:	4618      	mov	r0, r3
 800272c:	3710      	adds	r7, #16
 800272e:	46bd      	mov	sp, r7
 8002730:	bd80      	pop	{r7, pc}
 8002732:	bf00      	nop
 8002734:	8000003f 	.word	0x8000003f
 8002738:	50040300 	.word	0x50040300
 800273c:	20000000 	.word	0x20000000
 8002740:	053e2d63 	.word	0x053e2d63

08002744 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002744:	b480      	push	{r7}
 8002746:	b085      	sub	sp, #20
 8002748:	af00      	add	r7, sp, #0
 800274a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	f003 0307 	and.w	r3, r3, #7
 8002752:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002754:	4b0c      	ldr	r3, [pc, #48]	; (8002788 <__NVIC_SetPriorityGrouping+0x44>)
 8002756:	68db      	ldr	r3, [r3, #12]
 8002758:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800275a:	68ba      	ldr	r2, [r7, #8]
 800275c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002760:	4013      	ands	r3, r2
 8002762:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002768:	68bb      	ldr	r3, [r7, #8]
 800276a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800276c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002770:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002774:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002776:	4a04      	ldr	r2, [pc, #16]	; (8002788 <__NVIC_SetPriorityGrouping+0x44>)
 8002778:	68bb      	ldr	r3, [r7, #8]
 800277a:	60d3      	str	r3, [r2, #12]
}
 800277c:	bf00      	nop
 800277e:	3714      	adds	r7, #20
 8002780:	46bd      	mov	sp, r7
 8002782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002786:	4770      	bx	lr
 8002788:	e000ed00 	.word	0xe000ed00

0800278c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800278c:	b480      	push	{r7}
 800278e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002790:	4b04      	ldr	r3, [pc, #16]	; (80027a4 <__NVIC_GetPriorityGrouping+0x18>)
 8002792:	68db      	ldr	r3, [r3, #12]
 8002794:	0a1b      	lsrs	r3, r3, #8
 8002796:	f003 0307 	and.w	r3, r3, #7
}
 800279a:	4618      	mov	r0, r3
 800279c:	46bd      	mov	sp, r7
 800279e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a2:	4770      	bx	lr
 80027a4:	e000ed00 	.word	0xe000ed00

080027a8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80027a8:	b480      	push	{r7}
 80027aa:	b083      	sub	sp, #12
 80027ac:	af00      	add	r7, sp, #0
 80027ae:	4603      	mov	r3, r0
 80027b0:	6039      	str	r1, [r7, #0]
 80027b2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80027b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	db0a      	blt.n	80027d2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80027bc:	683b      	ldr	r3, [r7, #0]
 80027be:	b2da      	uxtb	r2, r3
 80027c0:	490c      	ldr	r1, [pc, #48]	; (80027f4 <__NVIC_SetPriority+0x4c>)
 80027c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027c6:	0112      	lsls	r2, r2, #4
 80027c8:	b2d2      	uxtb	r2, r2
 80027ca:	440b      	add	r3, r1
 80027cc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80027d0:	e00a      	b.n	80027e8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80027d2:	683b      	ldr	r3, [r7, #0]
 80027d4:	b2da      	uxtb	r2, r3
 80027d6:	4908      	ldr	r1, [pc, #32]	; (80027f8 <__NVIC_SetPriority+0x50>)
 80027d8:	79fb      	ldrb	r3, [r7, #7]
 80027da:	f003 030f 	and.w	r3, r3, #15
 80027de:	3b04      	subs	r3, #4
 80027e0:	0112      	lsls	r2, r2, #4
 80027e2:	b2d2      	uxtb	r2, r2
 80027e4:	440b      	add	r3, r1
 80027e6:	761a      	strb	r2, [r3, #24]
}
 80027e8:	bf00      	nop
 80027ea:	370c      	adds	r7, #12
 80027ec:	46bd      	mov	sp, r7
 80027ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f2:	4770      	bx	lr
 80027f4:	e000e100 	.word	0xe000e100
 80027f8:	e000ed00 	.word	0xe000ed00

080027fc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80027fc:	b480      	push	{r7}
 80027fe:	b089      	sub	sp, #36	; 0x24
 8002800:	af00      	add	r7, sp, #0
 8002802:	60f8      	str	r0, [r7, #12]
 8002804:	60b9      	str	r1, [r7, #8]
 8002806:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	f003 0307 	and.w	r3, r3, #7
 800280e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002810:	69fb      	ldr	r3, [r7, #28]
 8002812:	f1c3 0307 	rsb	r3, r3, #7
 8002816:	2b04      	cmp	r3, #4
 8002818:	bf28      	it	cs
 800281a:	2304      	movcs	r3, #4
 800281c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800281e:	69fb      	ldr	r3, [r7, #28]
 8002820:	3304      	adds	r3, #4
 8002822:	2b06      	cmp	r3, #6
 8002824:	d902      	bls.n	800282c <NVIC_EncodePriority+0x30>
 8002826:	69fb      	ldr	r3, [r7, #28]
 8002828:	3b03      	subs	r3, #3
 800282a:	e000      	b.n	800282e <NVIC_EncodePriority+0x32>
 800282c:	2300      	movs	r3, #0
 800282e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002830:	f04f 32ff 	mov.w	r2, #4294967295
 8002834:	69bb      	ldr	r3, [r7, #24]
 8002836:	fa02 f303 	lsl.w	r3, r2, r3
 800283a:	43da      	mvns	r2, r3
 800283c:	68bb      	ldr	r3, [r7, #8]
 800283e:	401a      	ands	r2, r3
 8002840:	697b      	ldr	r3, [r7, #20]
 8002842:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002844:	f04f 31ff 	mov.w	r1, #4294967295
 8002848:	697b      	ldr	r3, [r7, #20]
 800284a:	fa01 f303 	lsl.w	r3, r1, r3
 800284e:	43d9      	mvns	r1, r3
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002854:	4313      	orrs	r3, r2
         );
}
 8002856:	4618      	mov	r0, r3
 8002858:	3724      	adds	r7, #36	; 0x24
 800285a:	46bd      	mov	sp, r7
 800285c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002860:	4770      	bx	lr
	...

08002864 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002864:	b580      	push	{r7, lr}
 8002866:	b082      	sub	sp, #8
 8002868:	af00      	add	r7, sp, #0
 800286a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	3b01      	subs	r3, #1
 8002870:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002874:	d301      	bcc.n	800287a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002876:	2301      	movs	r3, #1
 8002878:	e00f      	b.n	800289a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800287a:	4a0a      	ldr	r2, [pc, #40]	; (80028a4 <SysTick_Config+0x40>)
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	3b01      	subs	r3, #1
 8002880:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002882:	210f      	movs	r1, #15
 8002884:	f04f 30ff 	mov.w	r0, #4294967295
 8002888:	f7ff ff8e 	bl	80027a8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800288c:	4b05      	ldr	r3, [pc, #20]	; (80028a4 <SysTick_Config+0x40>)
 800288e:	2200      	movs	r2, #0
 8002890:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002892:	4b04      	ldr	r3, [pc, #16]	; (80028a4 <SysTick_Config+0x40>)
 8002894:	2207      	movs	r2, #7
 8002896:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002898:	2300      	movs	r3, #0
}
 800289a:	4618      	mov	r0, r3
 800289c:	3708      	adds	r7, #8
 800289e:	46bd      	mov	sp, r7
 80028a0:	bd80      	pop	{r7, pc}
 80028a2:	bf00      	nop
 80028a4:	e000e010 	.word	0xe000e010

080028a8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80028a8:	b580      	push	{r7, lr}
 80028aa:	b082      	sub	sp, #8
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80028b0:	6878      	ldr	r0, [r7, #4]
 80028b2:	f7ff ff47 	bl	8002744 <__NVIC_SetPriorityGrouping>
}
 80028b6:	bf00      	nop
 80028b8:	3708      	adds	r7, #8
 80028ba:	46bd      	mov	sp, r7
 80028bc:	bd80      	pop	{r7, pc}

080028be <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80028be:	b580      	push	{r7, lr}
 80028c0:	b086      	sub	sp, #24
 80028c2:	af00      	add	r7, sp, #0
 80028c4:	4603      	mov	r3, r0
 80028c6:	60b9      	str	r1, [r7, #8]
 80028c8:	607a      	str	r2, [r7, #4]
 80028ca:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80028cc:	2300      	movs	r3, #0
 80028ce:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80028d0:	f7ff ff5c 	bl	800278c <__NVIC_GetPriorityGrouping>
 80028d4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80028d6:	687a      	ldr	r2, [r7, #4]
 80028d8:	68b9      	ldr	r1, [r7, #8]
 80028da:	6978      	ldr	r0, [r7, #20]
 80028dc:	f7ff ff8e 	bl	80027fc <NVIC_EncodePriority>
 80028e0:	4602      	mov	r2, r0
 80028e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80028e6:	4611      	mov	r1, r2
 80028e8:	4618      	mov	r0, r3
 80028ea:	f7ff ff5d 	bl	80027a8 <__NVIC_SetPriority>
}
 80028ee:	bf00      	nop
 80028f0:	3718      	adds	r7, #24
 80028f2:	46bd      	mov	sp, r7
 80028f4:	bd80      	pop	{r7, pc}

080028f6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80028f6:	b580      	push	{r7, lr}
 80028f8:	b082      	sub	sp, #8
 80028fa:	af00      	add	r7, sp, #0
 80028fc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80028fe:	6878      	ldr	r0, [r7, #4]
 8002900:	f7ff ffb0 	bl	8002864 <SysTick_Config>
 8002904:	4603      	mov	r3, r0
}
 8002906:	4618      	mov	r0, r3
 8002908:	3708      	adds	r7, #8
 800290a:	46bd      	mov	sp, r7
 800290c:	bd80      	pop	{r7, pc}

0800290e <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 800290e:	b580      	push	{r7, lr}
 8002910:	b082      	sub	sp, #8
 8002912:	af00      	add	r7, sp, #0
 8002914:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	2b00      	cmp	r3, #0
 800291a:	d101      	bne.n	8002920 <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 800291c:	2301      	movs	r3, #1
 800291e:	e014      	b.n	800294a <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	791b      	ldrb	r3, [r3, #4]
 8002924:	b2db      	uxtb	r3, r3
 8002926:	2b00      	cmp	r3, #0
 8002928:	d105      	bne.n	8002936 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	2200      	movs	r2, #0
 800292e:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8002930:	6878      	ldr	r0, [r7, #4]
 8002932:	f7fe fc47 	bl	80011c4 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	2202      	movs	r2, #2
 800293a:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	2200      	movs	r2, #0
 8002940:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	2201      	movs	r2, #1
 8002946:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8002948:	2300      	movs	r3, #0
}
 800294a:	4618      	mov	r0, r3
 800294c:	3708      	adds	r7, #8
 800294e:	46bd      	mov	sp, r7
 8002950:	bd80      	pop	{r7, pc}

08002952 <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected (when supported)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8002952:	b480      	push	{r7}
 8002954:	b083      	sub	sp, #12
 8002956:	af00      	add	r7, sp, #0
 8002958:	6078      	str	r0, [r7, #4]
 800295a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	795b      	ldrb	r3, [r3, #5]
 8002960:	2b01      	cmp	r3, #1
 8002962:	d101      	bne.n	8002968 <HAL_DAC_Start+0x16>
 8002964:	2302      	movs	r3, #2
 8002966:	e03b      	b.n	80029e0 <HAL_DAC_Start+0x8e>
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	2201      	movs	r2, #1
 800296c:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	2202      	movs	r2, #2
 8002972:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	6819      	ldr	r1, [r3, #0]
 800297a:	683b      	ldr	r3, [r7, #0]
 800297c:	f003 0310 	and.w	r3, r3, #16
 8002980:	2201      	movs	r2, #1
 8002982:	409a      	lsls	r2, r3
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	430a      	orrs	r2, r1
 800298a:	601a      	str	r2, [r3, #0]

#endif /* STM32L4P5xx STM32L4Q5xx STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx                                     */

#if defined (STM32L431xx) || defined (STM32L432xx) || defined (STM32L433xx) || defined (STM32L442xx) || defined (STM32L443xx) || \
    defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || defined (STM32L496xx) || defined (STM32L4A6xx)
  if(Channel == DAC_CHANNEL_1)
 800298c:	683b      	ldr	r3, [r7, #0]
 800298e:	2b00      	cmp	r3, #0
 8002990:	d10f      	bne.n	80029b2 <HAL_DAC_Start+0x60>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_CR_TEN1)
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	f003 033c 	and.w	r3, r3, #60	; 0x3c
 800299c:	2b04      	cmp	r3, #4
 800299e:	d118      	bne.n	80029d2 <HAL_DAC_Start+0x80>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	685a      	ldr	r2, [r3, #4]
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	f042 0201 	orr.w	r2, r2, #1
 80029ae:	605a      	str	r2, [r3, #4]
 80029b0:	e00f      	b.n	80029d2 <HAL_DAC_Start+0x80>
    }
  }
  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == DAC_CR_TEN2)
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80029bc:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80029c0:	d107      	bne.n	80029d2 <HAL_DAC_Start+0x80>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	685a      	ldr	r2, [r3, #4]
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	f042 0202 	orr.w	r2, r2, #2
 80029d0:	605a      	str	r2, [r3, #4]
    /* Enable the selected DAC software conversion */
    SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
  }
#endif /* STM32L451xx STM32L452xx STM32L462xx */
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	2201      	movs	r2, #1
 80029d6:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	2200      	movs	r2, #0
 80029dc:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80029de:	2300      	movs	r3, #0
}
 80029e0:	4618      	mov	r0, r3
 80029e2:	370c      	adds	r7, #12
 80029e4:	46bd      	mov	sp, r7
 80029e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ea:	4770      	bx	lr

080029ec <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 80029ec:	b480      	push	{r7}
 80029ee:	b087      	sub	sp, #28
 80029f0:	af00      	add	r7, sp, #0
 80029f2:	60f8      	str	r0, [r7, #12]
 80029f4:	60b9      	str	r1, [r7, #8]
 80029f6:	607a      	str	r2, [r7, #4]
 80029f8:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0;
 80029fa:	2300      	movs	r3, #0
 80029fc:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 8002a04:	68bb      	ldr	r3, [r7, #8]
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d105      	bne.n	8002a16 <HAL_DAC_SetValue+0x2a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8002a0a:	697a      	ldr	r2, [r7, #20]
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	4413      	add	r3, r2
 8002a10:	3308      	adds	r3, #8
 8002a12:	617b      	str	r3, [r7, #20]
 8002a14:	e004      	b.n	8002a20 <HAL_DAC_SetValue+0x34>
  }
  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8002a16:	697a      	ldr	r2, [r7, #20]
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	4413      	add	r3, r2
 8002a1c:	3314      	adds	r3, #20
 8002a1e:	617b      	str	r3, [r7, #20]
  }

  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8002a20:	697b      	ldr	r3, [r7, #20]
 8002a22:	461a      	mov	r2, r3
 8002a24:	683b      	ldr	r3, [r7, #0]
 8002a26:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8002a28:	2300      	movs	r3, #0
}
 8002a2a:	4618      	mov	r0, r3
 8002a2c:	371c      	adds	r7, #28
 8002a2e:	46bd      	mov	sp, r7
 8002a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a34:	4770      	bx	lr

08002a36 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected (Whenever present)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8002a36:	b580      	push	{r7, lr}
 8002a38:	b088      	sub	sp, #32
 8002a3a:	af00      	add	r7, sp, #0
 8002a3c:	60f8      	str	r0, [r7, #12]
 8002a3e:	60b9      	str	r1, [r7, #8]
 8002a40:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1;
  uint32_t tmpreg2;
  uint32_t tickstart = 0U;
 8002a42:	2300      	movs	r3, #0
 8002a44:	61fb      	str	r3, [r7, #28]
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	795b      	ldrb	r3, [r3, #5]
 8002a4a:	2b01      	cmp	r3, #1
 8002a4c:	d101      	bne.n	8002a52 <HAL_DAC_ConfigChannel+0x1c>
 8002a4e:	2302      	movs	r3, #2
 8002a50:	e107      	b.n	8002c62 <HAL_DAC_ConfigChannel+0x22c>
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	2201      	movs	r2, #1
 8002a56:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	2202      	movs	r2, #2
 8002a5c:	711a      	strb	r2, [r3, #4]

  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8002a5e:	68bb      	ldr	r3, [r7, #8]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	2b04      	cmp	r3, #4
 8002a64:	d174      	bne.n	8002b50 <HAL_DAC_ConfigChannel+0x11a>
  /* Sample on old configuration */
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8002a66:	f7fe fdc7 	bl	80015f8 <HAL_GetTick>
 8002a6a:	61f8      	str	r0, [r7, #28]

    if (Channel == DAC_CHANNEL_1)
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d134      	bne.n	8002adc <HAL_DAC_ConfigChannel+0xa6>
    {

      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8002a72:	e011      	b.n	8002a98 <HAL_DAC_ConfigChannel+0x62>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8002a74:	f7fe fdc0 	bl	80015f8 <HAL_GetTick>
 8002a78:	4602      	mov	r2, r0
 8002a7a:	69fb      	ldr	r3, [r7, #28]
 8002a7c:	1ad3      	subs	r3, r2, r3
 8002a7e:	2b01      	cmp	r3, #1
 8002a80:	d90a      	bls.n	8002a98 <HAL_DAC_ConfigChannel+0x62>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	691b      	ldr	r3, [r3, #16]
 8002a86:	f043 0208 	orr.w	r2, r3, #8
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	2203      	movs	r2, #3
 8002a92:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8002a94:	2303      	movs	r3, #3
 8002a96:	e0e4      	b.n	8002c62 <HAL_DAC_ConfigChannel+0x22c>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a9e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d1e6      	bne.n	8002a74 <HAL_DAC_ConfigChannel+0x3e>
        }
      }
      HAL_Delay(1);
 8002aa6:	2001      	movs	r0, #1
 8002aa8:	f7fe fdb2 	bl	8001610 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	68ba      	ldr	r2, [r7, #8]
 8002ab2:	6992      	ldr	r2, [r2, #24]
 8002ab4:	641a      	str	r2, [r3, #64]	; 0x40
 8002ab6:	e01e      	b.n	8002af6 <HAL_DAC_ConfigChannel+0xc0>
      /* SHSR2 can be written when BWST2 is cleared */

      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8002ab8:	f7fe fd9e 	bl	80015f8 <HAL_GetTick>
 8002abc:	4602      	mov	r2, r0
 8002abe:	69fb      	ldr	r3, [r7, #28]
 8002ac0:	1ad3      	subs	r3, r2, r3
 8002ac2:	2b01      	cmp	r3, #1
 8002ac4:	d90a      	bls.n	8002adc <HAL_DAC_ConfigChannel+0xa6>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	691b      	ldr	r3, [r3, #16]
 8002aca:	f043 0208 	orr.w	r2, r3, #8
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	2203      	movs	r2, #3
 8002ad6:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8002ad8:	2303      	movs	r3, #3
 8002ada:	e0c2      	b.n	8002c62 <HAL_DAC_ConfigChannel+0x22c>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	dbe8      	blt.n	8002ab8 <HAL_DAC_ConfigChannel+0x82>
        }
      }
      HAL_Delay(1U);
 8002ae6:	2001      	movs	r0, #1
 8002ae8:	f7fe fd92 	bl	8001610 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	68ba      	ldr	r2, [r7, #8]
 8002af2:	6992      	ldr	r2, [r2, #24]
 8002af4:	645a      	str	r2, [r3, #68]	; 0x44
    }
#endif /* STM32L451xx STM32L452xx STM32L462xx */

    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	f003 0310 	and.w	r3, r3, #16
 8002b02:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8002b06:	fa01 f303 	lsl.w	r3, r1, r3
 8002b0a:	43db      	mvns	r3, r3
 8002b0c:	ea02 0103 	and.w	r1, r2, r3
 8002b10:	68bb      	ldr	r3, [r7, #8]
 8002b12:	69da      	ldr	r2, [r3, #28]
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	f003 0310 	and.w	r3, r3, #16
 8002b1a:	409a      	lsls	r2, r3
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	430a      	orrs	r2, r1
 8002b22:	649a      	str	r2, [r3, #72]	; 0x48
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	f003 0310 	and.w	r3, r3, #16
 8002b30:	21ff      	movs	r1, #255	; 0xff
 8002b32:	fa01 f303 	lsl.w	r3, r1, r3
 8002b36:	43db      	mvns	r3, r3
 8002b38:	ea02 0103 	and.w	r1, r2, r3
 8002b3c:	68bb      	ldr	r3, [r7, #8]
 8002b3e:	6a1a      	ldr	r2, [r3, #32]
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	f003 0310 	and.w	r3, r3, #16
 8002b46:	409a      	lsls	r2, r3
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	430a      	orrs	r2, r1
 8002b4e:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8002b50:	68bb      	ldr	r3, [r7, #8]
 8002b52:	691b      	ldr	r3, [r3, #16]
 8002b54:	2b01      	cmp	r3, #1
 8002b56:	d11d      	bne.n	8002b94 <HAL_DAC_ConfigChannel+0x15e>
  /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b5e:	61bb      	str	r3, [r7, #24]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	f003 0310 	and.w	r3, r3, #16
 8002b66:	221f      	movs	r2, #31
 8002b68:	fa02 f303 	lsl.w	r3, r2, r3
 8002b6c:	43db      	mvns	r3, r3
 8002b6e:	69ba      	ldr	r2, [r7, #24]
 8002b70:	4013      	ands	r3, r2
 8002b72:	61bb      	str	r3, [r7, #24]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8002b74:	68bb      	ldr	r3, [r7, #8]
 8002b76:	695b      	ldr	r3, [r3, #20]
 8002b78:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	f003 0310 	and.w	r3, r3, #16
 8002b80:	697a      	ldr	r2, [r7, #20]
 8002b82:	fa02 f303 	lsl.w	r3, r2, r3
 8002b86:	69ba      	ldr	r2, [r7, #24]
 8002b88:	4313      	orrs	r3, r2
 8002b8a:	61bb      	str	r3, [r7, #24]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	69ba      	ldr	r2, [r7, #24]
 8002b92:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b9a:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	f003 0310 	and.w	r3, r3, #16
 8002ba2:	2207      	movs	r2, #7
 8002ba4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ba8:	43db      	mvns	r3, r3
 8002baa:	69ba      	ldr	r2, [r7, #24]
 8002bac:	4013      	ands	r3, r2
 8002bae:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | sConfig->DAC_ConnectOnChipPeripheral);
 8002bb0:	68bb      	ldr	r3, [r7, #8]
 8002bb2:	681a      	ldr	r2, [r3, #0]
 8002bb4:	68bb      	ldr	r3, [r7, #8]
 8002bb6:	689b      	ldr	r3, [r3, #8]
 8002bb8:	431a      	orrs	r2, r3
 8002bba:	68bb      	ldr	r3, [r7, #8]
 8002bbc:	68db      	ldr	r3, [r3, #12]
 8002bbe:	4313      	orrs	r3, r2
 8002bc0:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	f003 0310 	and.w	r3, r3, #16
 8002bc8:	697a      	ldr	r2, [r7, #20]
 8002bca:	fa02 f303 	lsl.w	r3, r2, r3
 8002bce:	69ba      	ldr	r2, [r7, #24]
 8002bd0:	4313      	orrs	r3, r2
 8002bd2:	61bb      	str	r3, [r7, #24]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	69ba      	ldr	r2, [r7, #24]
 8002bda:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	6819      	ldr	r1, [r3, #0]
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	f003 0310 	and.w	r3, r3, #16
 8002be8:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002bec:	fa02 f303 	lsl.w	r3, r2, r3
 8002bf0:	43da      	mvns	r2, r3
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	400a      	ands	r2, r1
 8002bf8:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	61bb      	str	r3, [r7, #24]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	f003 0310 	and.w	r3, r3, #16
 8002c08:	f640 72fc 	movw	r2, #4092	; 0xffc
 8002c0c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c10:	43db      	mvns	r3, r3
 8002c12:	69ba      	ldr	r2, [r7, #24]
 8002c14:	4013      	ands	r3, r2
 8002c16:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8002c18:	68bb      	ldr	r3, [r7, #8]
 8002c1a:	685b      	ldr	r3, [r3, #4]
 8002c1c:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	f003 0310 	and.w	r3, r3, #16
 8002c24:	697a      	ldr	r2, [r7, #20]
 8002c26:	fa02 f303 	lsl.w	r3, r2, r3
 8002c2a:	69ba      	ldr	r2, [r7, #24]
 8002c2c:	4313      	orrs	r3, r2
 8002c2e:	61bb      	str	r3, [r7, #24]
  }

#endif /* STM32L4P5xx STM32L4Q5xx STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx */

  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	69ba      	ldr	r2, [r7, #24]
 8002c36:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	6819      	ldr	r1, [r3, #0]
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	f003 0310 	and.w	r3, r3, #16
 8002c44:	22c0      	movs	r2, #192	; 0xc0
 8002c46:	fa02 f303 	lsl.w	r3, r2, r3
 8002c4a:	43da      	mvns	r2, r3
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	400a      	ands	r2, r1
 8002c52:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	2201      	movs	r2, #1
 8002c58:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	2200      	movs	r2, #0
 8002c5e:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8002c60:	2300      	movs	r3, #0
}
 8002c62:	4618      	mov	r0, r3
 8002c64:	3720      	adds	r7, #32
 8002c66:	46bd      	mov	sp, r7
 8002c68:	bd80      	pop	{r7, pc}
	...

08002c6c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002c6c:	b480      	push	{r7}
 8002c6e:	b087      	sub	sp, #28
 8002c70:	af00      	add	r7, sp, #0
 8002c72:	6078      	str	r0, [r7, #4]
 8002c74:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002c76:	2300      	movs	r3, #0
 8002c78:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002c7a:	e148      	b.n	8002f0e <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002c7c:	683b      	ldr	r3, [r7, #0]
 8002c7e:	681a      	ldr	r2, [r3, #0]
 8002c80:	2101      	movs	r1, #1
 8002c82:	697b      	ldr	r3, [r7, #20]
 8002c84:	fa01 f303 	lsl.w	r3, r1, r3
 8002c88:	4013      	ands	r3, r2
 8002c8a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	f000 813a 	beq.w	8002f08 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002c94:	683b      	ldr	r3, [r7, #0]
 8002c96:	685b      	ldr	r3, [r3, #4]
 8002c98:	f003 0303 	and.w	r3, r3, #3
 8002c9c:	2b01      	cmp	r3, #1
 8002c9e:	d005      	beq.n	8002cac <HAL_GPIO_Init+0x40>
 8002ca0:	683b      	ldr	r3, [r7, #0]
 8002ca2:	685b      	ldr	r3, [r3, #4]
 8002ca4:	f003 0303 	and.w	r3, r3, #3
 8002ca8:	2b02      	cmp	r3, #2
 8002caa:	d130      	bne.n	8002d0e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	689b      	ldr	r3, [r3, #8]
 8002cb0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002cb2:	697b      	ldr	r3, [r7, #20]
 8002cb4:	005b      	lsls	r3, r3, #1
 8002cb6:	2203      	movs	r2, #3
 8002cb8:	fa02 f303 	lsl.w	r3, r2, r3
 8002cbc:	43db      	mvns	r3, r3
 8002cbe:	693a      	ldr	r2, [r7, #16]
 8002cc0:	4013      	ands	r3, r2
 8002cc2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002cc4:	683b      	ldr	r3, [r7, #0]
 8002cc6:	68da      	ldr	r2, [r3, #12]
 8002cc8:	697b      	ldr	r3, [r7, #20]
 8002cca:	005b      	lsls	r3, r3, #1
 8002ccc:	fa02 f303 	lsl.w	r3, r2, r3
 8002cd0:	693a      	ldr	r2, [r7, #16]
 8002cd2:	4313      	orrs	r3, r2
 8002cd4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	693a      	ldr	r2, [r7, #16]
 8002cda:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	685b      	ldr	r3, [r3, #4]
 8002ce0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002ce2:	2201      	movs	r2, #1
 8002ce4:	697b      	ldr	r3, [r7, #20]
 8002ce6:	fa02 f303 	lsl.w	r3, r2, r3
 8002cea:	43db      	mvns	r3, r3
 8002cec:	693a      	ldr	r2, [r7, #16]
 8002cee:	4013      	ands	r3, r2
 8002cf0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002cf2:	683b      	ldr	r3, [r7, #0]
 8002cf4:	685b      	ldr	r3, [r3, #4]
 8002cf6:	091b      	lsrs	r3, r3, #4
 8002cf8:	f003 0201 	and.w	r2, r3, #1
 8002cfc:	697b      	ldr	r3, [r7, #20]
 8002cfe:	fa02 f303 	lsl.w	r3, r2, r3
 8002d02:	693a      	ldr	r2, [r7, #16]
 8002d04:	4313      	orrs	r3, r2
 8002d06:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	693a      	ldr	r2, [r7, #16]
 8002d0c:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002d0e:	683b      	ldr	r3, [r7, #0]
 8002d10:	685b      	ldr	r3, [r3, #4]
 8002d12:	f003 0303 	and.w	r3, r3, #3
 8002d16:	2b03      	cmp	r3, #3
 8002d18:	d017      	beq.n	8002d4a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	68db      	ldr	r3, [r3, #12]
 8002d1e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002d20:	697b      	ldr	r3, [r7, #20]
 8002d22:	005b      	lsls	r3, r3, #1
 8002d24:	2203      	movs	r2, #3
 8002d26:	fa02 f303 	lsl.w	r3, r2, r3
 8002d2a:	43db      	mvns	r3, r3
 8002d2c:	693a      	ldr	r2, [r7, #16]
 8002d2e:	4013      	ands	r3, r2
 8002d30:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002d32:	683b      	ldr	r3, [r7, #0]
 8002d34:	689a      	ldr	r2, [r3, #8]
 8002d36:	697b      	ldr	r3, [r7, #20]
 8002d38:	005b      	lsls	r3, r3, #1
 8002d3a:	fa02 f303 	lsl.w	r3, r2, r3
 8002d3e:	693a      	ldr	r2, [r7, #16]
 8002d40:	4313      	orrs	r3, r2
 8002d42:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	693a      	ldr	r2, [r7, #16]
 8002d48:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002d4a:	683b      	ldr	r3, [r7, #0]
 8002d4c:	685b      	ldr	r3, [r3, #4]
 8002d4e:	f003 0303 	and.w	r3, r3, #3
 8002d52:	2b02      	cmp	r3, #2
 8002d54:	d123      	bne.n	8002d9e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002d56:	697b      	ldr	r3, [r7, #20]
 8002d58:	08da      	lsrs	r2, r3, #3
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	3208      	adds	r2, #8
 8002d5e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002d62:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002d64:	697b      	ldr	r3, [r7, #20]
 8002d66:	f003 0307 	and.w	r3, r3, #7
 8002d6a:	009b      	lsls	r3, r3, #2
 8002d6c:	220f      	movs	r2, #15
 8002d6e:	fa02 f303 	lsl.w	r3, r2, r3
 8002d72:	43db      	mvns	r3, r3
 8002d74:	693a      	ldr	r2, [r7, #16]
 8002d76:	4013      	ands	r3, r2
 8002d78:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002d7a:	683b      	ldr	r3, [r7, #0]
 8002d7c:	691a      	ldr	r2, [r3, #16]
 8002d7e:	697b      	ldr	r3, [r7, #20]
 8002d80:	f003 0307 	and.w	r3, r3, #7
 8002d84:	009b      	lsls	r3, r3, #2
 8002d86:	fa02 f303 	lsl.w	r3, r2, r3
 8002d8a:	693a      	ldr	r2, [r7, #16]
 8002d8c:	4313      	orrs	r3, r2
 8002d8e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002d90:	697b      	ldr	r3, [r7, #20]
 8002d92:	08da      	lsrs	r2, r3, #3
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	3208      	adds	r2, #8
 8002d98:	6939      	ldr	r1, [r7, #16]
 8002d9a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002da4:	697b      	ldr	r3, [r7, #20]
 8002da6:	005b      	lsls	r3, r3, #1
 8002da8:	2203      	movs	r2, #3
 8002daa:	fa02 f303 	lsl.w	r3, r2, r3
 8002dae:	43db      	mvns	r3, r3
 8002db0:	693a      	ldr	r2, [r7, #16]
 8002db2:	4013      	ands	r3, r2
 8002db4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002db6:	683b      	ldr	r3, [r7, #0]
 8002db8:	685b      	ldr	r3, [r3, #4]
 8002dba:	f003 0203 	and.w	r2, r3, #3
 8002dbe:	697b      	ldr	r3, [r7, #20]
 8002dc0:	005b      	lsls	r3, r3, #1
 8002dc2:	fa02 f303 	lsl.w	r3, r2, r3
 8002dc6:	693a      	ldr	r2, [r7, #16]
 8002dc8:	4313      	orrs	r3, r2
 8002dca:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	693a      	ldr	r2, [r7, #16]
 8002dd0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002dd2:	683b      	ldr	r3, [r7, #0]
 8002dd4:	685b      	ldr	r3, [r3, #4]
 8002dd6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	f000 8094 	beq.w	8002f08 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002de0:	4b52      	ldr	r3, [pc, #328]	; (8002f2c <HAL_GPIO_Init+0x2c0>)
 8002de2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002de4:	4a51      	ldr	r2, [pc, #324]	; (8002f2c <HAL_GPIO_Init+0x2c0>)
 8002de6:	f043 0301 	orr.w	r3, r3, #1
 8002dea:	6613      	str	r3, [r2, #96]	; 0x60
 8002dec:	4b4f      	ldr	r3, [pc, #316]	; (8002f2c <HAL_GPIO_Init+0x2c0>)
 8002dee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002df0:	f003 0301 	and.w	r3, r3, #1
 8002df4:	60bb      	str	r3, [r7, #8]
 8002df6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002df8:	4a4d      	ldr	r2, [pc, #308]	; (8002f30 <HAL_GPIO_Init+0x2c4>)
 8002dfa:	697b      	ldr	r3, [r7, #20]
 8002dfc:	089b      	lsrs	r3, r3, #2
 8002dfe:	3302      	adds	r3, #2
 8002e00:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e04:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002e06:	697b      	ldr	r3, [r7, #20]
 8002e08:	f003 0303 	and.w	r3, r3, #3
 8002e0c:	009b      	lsls	r3, r3, #2
 8002e0e:	220f      	movs	r2, #15
 8002e10:	fa02 f303 	lsl.w	r3, r2, r3
 8002e14:	43db      	mvns	r3, r3
 8002e16:	693a      	ldr	r2, [r7, #16]
 8002e18:	4013      	ands	r3, r2
 8002e1a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002e22:	d00d      	beq.n	8002e40 <HAL_GPIO_Init+0x1d4>
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	4a43      	ldr	r2, [pc, #268]	; (8002f34 <HAL_GPIO_Init+0x2c8>)
 8002e28:	4293      	cmp	r3, r2
 8002e2a:	d007      	beq.n	8002e3c <HAL_GPIO_Init+0x1d0>
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	4a42      	ldr	r2, [pc, #264]	; (8002f38 <HAL_GPIO_Init+0x2cc>)
 8002e30:	4293      	cmp	r3, r2
 8002e32:	d101      	bne.n	8002e38 <HAL_GPIO_Init+0x1cc>
 8002e34:	2302      	movs	r3, #2
 8002e36:	e004      	b.n	8002e42 <HAL_GPIO_Init+0x1d6>
 8002e38:	2307      	movs	r3, #7
 8002e3a:	e002      	b.n	8002e42 <HAL_GPIO_Init+0x1d6>
 8002e3c:	2301      	movs	r3, #1
 8002e3e:	e000      	b.n	8002e42 <HAL_GPIO_Init+0x1d6>
 8002e40:	2300      	movs	r3, #0
 8002e42:	697a      	ldr	r2, [r7, #20]
 8002e44:	f002 0203 	and.w	r2, r2, #3
 8002e48:	0092      	lsls	r2, r2, #2
 8002e4a:	4093      	lsls	r3, r2
 8002e4c:	693a      	ldr	r2, [r7, #16]
 8002e4e:	4313      	orrs	r3, r2
 8002e50:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002e52:	4937      	ldr	r1, [pc, #220]	; (8002f30 <HAL_GPIO_Init+0x2c4>)
 8002e54:	697b      	ldr	r3, [r7, #20]
 8002e56:	089b      	lsrs	r3, r3, #2
 8002e58:	3302      	adds	r3, #2
 8002e5a:	693a      	ldr	r2, [r7, #16]
 8002e5c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002e60:	4b36      	ldr	r3, [pc, #216]	; (8002f3c <HAL_GPIO_Init+0x2d0>)
 8002e62:	689b      	ldr	r3, [r3, #8]
 8002e64:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	43db      	mvns	r3, r3
 8002e6a:	693a      	ldr	r2, [r7, #16]
 8002e6c:	4013      	ands	r3, r2
 8002e6e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002e70:	683b      	ldr	r3, [r7, #0]
 8002e72:	685b      	ldr	r3, [r3, #4]
 8002e74:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d003      	beq.n	8002e84 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8002e7c:	693a      	ldr	r2, [r7, #16]
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	4313      	orrs	r3, r2
 8002e82:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002e84:	4a2d      	ldr	r2, [pc, #180]	; (8002f3c <HAL_GPIO_Init+0x2d0>)
 8002e86:	693b      	ldr	r3, [r7, #16]
 8002e88:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002e8a:	4b2c      	ldr	r3, [pc, #176]	; (8002f3c <HAL_GPIO_Init+0x2d0>)
 8002e8c:	68db      	ldr	r3, [r3, #12]
 8002e8e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	43db      	mvns	r3, r3
 8002e94:	693a      	ldr	r2, [r7, #16]
 8002e96:	4013      	ands	r3, r2
 8002e98:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002e9a:	683b      	ldr	r3, [r7, #0]
 8002e9c:	685b      	ldr	r3, [r3, #4]
 8002e9e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d003      	beq.n	8002eae <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8002ea6:	693a      	ldr	r2, [r7, #16]
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	4313      	orrs	r3, r2
 8002eac:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002eae:	4a23      	ldr	r2, [pc, #140]	; (8002f3c <HAL_GPIO_Init+0x2d0>)
 8002eb0:	693b      	ldr	r3, [r7, #16]
 8002eb2:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002eb4:	4b21      	ldr	r3, [pc, #132]	; (8002f3c <HAL_GPIO_Init+0x2d0>)
 8002eb6:	685b      	ldr	r3, [r3, #4]
 8002eb8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	43db      	mvns	r3, r3
 8002ebe:	693a      	ldr	r2, [r7, #16]
 8002ec0:	4013      	ands	r3, r2
 8002ec2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002ec4:	683b      	ldr	r3, [r7, #0]
 8002ec6:	685b      	ldr	r3, [r3, #4]
 8002ec8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d003      	beq.n	8002ed8 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 8002ed0:	693a      	ldr	r2, [r7, #16]
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	4313      	orrs	r3, r2
 8002ed6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002ed8:	4a18      	ldr	r2, [pc, #96]	; (8002f3c <HAL_GPIO_Init+0x2d0>)
 8002eda:	693b      	ldr	r3, [r7, #16]
 8002edc:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002ede:	4b17      	ldr	r3, [pc, #92]	; (8002f3c <HAL_GPIO_Init+0x2d0>)
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	43db      	mvns	r3, r3
 8002ee8:	693a      	ldr	r2, [r7, #16]
 8002eea:	4013      	ands	r3, r2
 8002eec:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002eee:	683b      	ldr	r3, [r7, #0]
 8002ef0:	685b      	ldr	r3, [r3, #4]
 8002ef2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d003      	beq.n	8002f02 <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 8002efa:	693a      	ldr	r2, [r7, #16]
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	4313      	orrs	r3, r2
 8002f00:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002f02:	4a0e      	ldr	r2, [pc, #56]	; (8002f3c <HAL_GPIO_Init+0x2d0>)
 8002f04:	693b      	ldr	r3, [r7, #16]
 8002f06:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002f08:	697b      	ldr	r3, [r7, #20]
 8002f0a:	3301      	adds	r3, #1
 8002f0c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002f0e:	683b      	ldr	r3, [r7, #0]
 8002f10:	681a      	ldr	r2, [r3, #0]
 8002f12:	697b      	ldr	r3, [r7, #20]
 8002f14:	fa22 f303 	lsr.w	r3, r2, r3
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	f47f aeaf 	bne.w	8002c7c <HAL_GPIO_Init+0x10>
  }
}
 8002f1e:	bf00      	nop
 8002f20:	bf00      	nop
 8002f22:	371c      	adds	r7, #28
 8002f24:	46bd      	mov	sp, r7
 8002f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f2a:	4770      	bx	lr
 8002f2c:	40021000 	.word	0x40021000
 8002f30:	40010000 	.word	0x40010000
 8002f34:	48000400 	.word	0x48000400
 8002f38:	48000800 	.word	0x48000800
 8002f3c:	40010400 	.word	0x40010400

08002f40 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002f40:	b480      	push	{r7}
 8002f42:	b083      	sub	sp, #12
 8002f44:	af00      	add	r7, sp, #0
 8002f46:	6078      	str	r0, [r7, #4]
 8002f48:	460b      	mov	r3, r1
 8002f4a:	807b      	strh	r3, [r7, #2]
 8002f4c:	4613      	mov	r3, r2
 8002f4e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002f50:	787b      	ldrb	r3, [r7, #1]
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d003      	beq.n	8002f5e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002f56:	887a      	ldrh	r2, [r7, #2]
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002f5c:	e002      	b.n	8002f64 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002f5e:	887a      	ldrh	r2, [r7, #2]
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002f64:	bf00      	nop
 8002f66:	370c      	adds	r7, #12
 8002f68:	46bd      	mov	sp, r7
 8002f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f6e:	4770      	bx	lr

08002f70 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002f70:	b480      	push	{r7}
 8002f72:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002f74:	4b05      	ldr	r3, [pc, #20]	; (8002f8c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	4a04      	ldr	r2, [pc, #16]	; (8002f8c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002f7a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f7e:	6013      	str	r3, [r2, #0]
}
 8002f80:	bf00      	nop
 8002f82:	46bd      	mov	sp, r7
 8002f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f88:	4770      	bx	lr
 8002f8a:	bf00      	nop
 8002f8c:	40007000 	.word	0x40007000

08002f90 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002f90:	b480      	push	{r7}
 8002f92:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002f94:	4b04      	ldr	r3, [pc, #16]	; (8002fa8 <HAL_PWREx_GetVoltageRange+0x18>)
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8002f9c:	4618      	mov	r0, r3
 8002f9e:	46bd      	mov	sp, r7
 8002fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa4:	4770      	bx	lr
 8002fa6:	bf00      	nop
 8002fa8:	40007000 	.word	0x40007000

08002fac <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002fac:	b480      	push	{r7}
 8002fae:	b085      	sub	sp, #20
 8002fb0:	af00      	add	r7, sp, #0
 8002fb2:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002fba:	d130      	bne.n	800301e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002fbc:	4b23      	ldr	r3, [pc, #140]	; (800304c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002fc4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002fc8:	d038      	beq.n	800303c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002fca:	4b20      	ldr	r3, [pc, #128]	; (800304c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002fd2:	4a1e      	ldr	r2, [pc, #120]	; (800304c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002fd4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002fd8:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002fda:	4b1d      	ldr	r3, [pc, #116]	; (8003050 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	2232      	movs	r2, #50	; 0x32
 8002fe0:	fb02 f303 	mul.w	r3, r2, r3
 8002fe4:	4a1b      	ldr	r2, [pc, #108]	; (8003054 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002fe6:	fba2 2303 	umull	r2, r3, r2, r3
 8002fea:	0c9b      	lsrs	r3, r3, #18
 8002fec:	3301      	adds	r3, #1
 8002fee:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002ff0:	e002      	b.n	8002ff8 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	3b01      	subs	r3, #1
 8002ff6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002ff8:	4b14      	ldr	r3, [pc, #80]	; (800304c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002ffa:	695b      	ldr	r3, [r3, #20]
 8002ffc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003000:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003004:	d102      	bne.n	800300c <HAL_PWREx_ControlVoltageScaling+0x60>
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	2b00      	cmp	r3, #0
 800300a:	d1f2      	bne.n	8002ff2 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800300c:	4b0f      	ldr	r3, [pc, #60]	; (800304c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800300e:	695b      	ldr	r3, [r3, #20]
 8003010:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003014:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003018:	d110      	bne.n	800303c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800301a:	2303      	movs	r3, #3
 800301c:	e00f      	b.n	800303e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800301e:	4b0b      	ldr	r3, [pc, #44]	; (800304c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003026:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800302a:	d007      	beq.n	800303c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800302c:	4b07      	ldr	r3, [pc, #28]	; (800304c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003034:	4a05      	ldr	r2, [pc, #20]	; (800304c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003036:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800303a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800303c:	2300      	movs	r3, #0
}
 800303e:	4618      	mov	r0, r3
 8003040:	3714      	adds	r7, #20
 8003042:	46bd      	mov	sp, r7
 8003044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003048:	4770      	bx	lr
 800304a:	bf00      	nop
 800304c:	40007000 	.word	0x40007000
 8003050:	20000000 	.word	0x20000000
 8003054:	431bde83 	.word	0x431bde83

08003058 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003058:	b580      	push	{r7, lr}
 800305a:	b088      	sub	sp, #32
 800305c:	af00      	add	r7, sp, #0
 800305e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	2b00      	cmp	r3, #0
 8003064:	d102      	bne.n	800306c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8003066:	2301      	movs	r3, #1
 8003068:	f000 bc02 	b.w	8003870 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800306c:	4b96      	ldr	r3, [pc, #600]	; (80032c8 <HAL_RCC_OscConfig+0x270>)
 800306e:	689b      	ldr	r3, [r3, #8]
 8003070:	f003 030c 	and.w	r3, r3, #12
 8003074:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003076:	4b94      	ldr	r3, [pc, #592]	; (80032c8 <HAL_RCC_OscConfig+0x270>)
 8003078:	68db      	ldr	r3, [r3, #12]
 800307a:	f003 0303 	and.w	r3, r3, #3
 800307e:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	f003 0310 	and.w	r3, r3, #16
 8003088:	2b00      	cmp	r3, #0
 800308a:	f000 80e4 	beq.w	8003256 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800308e:	69bb      	ldr	r3, [r7, #24]
 8003090:	2b00      	cmp	r3, #0
 8003092:	d007      	beq.n	80030a4 <HAL_RCC_OscConfig+0x4c>
 8003094:	69bb      	ldr	r3, [r7, #24]
 8003096:	2b0c      	cmp	r3, #12
 8003098:	f040 808b 	bne.w	80031b2 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800309c:	697b      	ldr	r3, [r7, #20]
 800309e:	2b01      	cmp	r3, #1
 80030a0:	f040 8087 	bne.w	80031b2 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80030a4:	4b88      	ldr	r3, [pc, #544]	; (80032c8 <HAL_RCC_OscConfig+0x270>)
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	f003 0302 	and.w	r3, r3, #2
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d005      	beq.n	80030bc <HAL_RCC_OscConfig+0x64>
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	699b      	ldr	r3, [r3, #24]
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d101      	bne.n	80030bc <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80030b8:	2301      	movs	r3, #1
 80030ba:	e3d9      	b.n	8003870 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	6a1a      	ldr	r2, [r3, #32]
 80030c0:	4b81      	ldr	r3, [pc, #516]	; (80032c8 <HAL_RCC_OscConfig+0x270>)
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	f003 0308 	and.w	r3, r3, #8
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d004      	beq.n	80030d6 <HAL_RCC_OscConfig+0x7e>
 80030cc:	4b7e      	ldr	r3, [pc, #504]	; (80032c8 <HAL_RCC_OscConfig+0x270>)
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80030d4:	e005      	b.n	80030e2 <HAL_RCC_OscConfig+0x8a>
 80030d6:	4b7c      	ldr	r3, [pc, #496]	; (80032c8 <HAL_RCC_OscConfig+0x270>)
 80030d8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80030dc:	091b      	lsrs	r3, r3, #4
 80030de:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80030e2:	4293      	cmp	r3, r2
 80030e4:	d223      	bcs.n	800312e <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	6a1b      	ldr	r3, [r3, #32]
 80030ea:	4618      	mov	r0, r3
 80030ec:	f000 fd8c 	bl	8003c08 <RCC_SetFlashLatencyFromMSIRange>
 80030f0:	4603      	mov	r3, r0
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d001      	beq.n	80030fa <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80030f6:	2301      	movs	r3, #1
 80030f8:	e3ba      	b.n	8003870 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80030fa:	4b73      	ldr	r3, [pc, #460]	; (80032c8 <HAL_RCC_OscConfig+0x270>)
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	4a72      	ldr	r2, [pc, #456]	; (80032c8 <HAL_RCC_OscConfig+0x270>)
 8003100:	f043 0308 	orr.w	r3, r3, #8
 8003104:	6013      	str	r3, [r2, #0]
 8003106:	4b70      	ldr	r3, [pc, #448]	; (80032c8 <HAL_RCC_OscConfig+0x270>)
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	6a1b      	ldr	r3, [r3, #32]
 8003112:	496d      	ldr	r1, [pc, #436]	; (80032c8 <HAL_RCC_OscConfig+0x270>)
 8003114:	4313      	orrs	r3, r2
 8003116:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003118:	4b6b      	ldr	r3, [pc, #428]	; (80032c8 <HAL_RCC_OscConfig+0x270>)
 800311a:	685b      	ldr	r3, [r3, #4]
 800311c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	69db      	ldr	r3, [r3, #28]
 8003124:	021b      	lsls	r3, r3, #8
 8003126:	4968      	ldr	r1, [pc, #416]	; (80032c8 <HAL_RCC_OscConfig+0x270>)
 8003128:	4313      	orrs	r3, r2
 800312a:	604b      	str	r3, [r1, #4]
 800312c:	e025      	b.n	800317a <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800312e:	4b66      	ldr	r3, [pc, #408]	; (80032c8 <HAL_RCC_OscConfig+0x270>)
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	4a65      	ldr	r2, [pc, #404]	; (80032c8 <HAL_RCC_OscConfig+0x270>)
 8003134:	f043 0308 	orr.w	r3, r3, #8
 8003138:	6013      	str	r3, [r2, #0]
 800313a:	4b63      	ldr	r3, [pc, #396]	; (80032c8 <HAL_RCC_OscConfig+0x270>)
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	6a1b      	ldr	r3, [r3, #32]
 8003146:	4960      	ldr	r1, [pc, #384]	; (80032c8 <HAL_RCC_OscConfig+0x270>)
 8003148:	4313      	orrs	r3, r2
 800314a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800314c:	4b5e      	ldr	r3, [pc, #376]	; (80032c8 <HAL_RCC_OscConfig+0x270>)
 800314e:	685b      	ldr	r3, [r3, #4]
 8003150:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	69db      	ldr	r3, [r3, #28]
 8003158:	021b      	lsls	r3, r3, #8
 800315a:	495b      	ldr	r1, [pc, #364]	; (80032c8 <HAL_RCC_OscConfig+0x270>)
 800315c:	4313      	orrs	r3, r2
 800315e:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003160:	69bb      	ldr	r3, [r7, #24]
 8003162:	2b00      	cmp	r3, #0
 8003164:	d109      	bne.n	800317a <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	6a1b      	ldr	r3, [r3, #32]
 800316a:	4618      	mov	r0, r3
 800316c:	f000 fd4c 	bl	8003c08 <RCC_SetFlashLatencyFromMSIRange>
 8003170:	4603      	mov	r3, r0
 8003172:	2b00      	cmp	r3, #0
 8003174:	d001      	beq.n	800317a <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8003176:	2301      	movs	r3, #1
 8003178:	e37a      	b.n	8003870 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800317a:	f000 fc81 	bl	8003a80 <HAL_RCC_GetSysClockFreq>
 800317e:	4602      	mov	r2, r0
 8003180:	4b51      	ldr	r3, [pc, #324]	; (80032c8 <HAL_RCC_OscConfig+0x270>)
 8003182:	689b      	ldr	r3, [r3, #8]
 8003184:	091b      	lsrs	r3, r3, #4
 8003186:	f003 030f 	and.w	r3, r3, #15
 800318a:	4950      	ldr	r1, [pc, #320]	; (80032cc <HAL_RCC_OscConfig+0x274>)
 800318c:	5ccb      	ldrb	r3, [r1, r3]
 800318e:	f003 031f 	and.w	r3, r3, #31
 8003192:	fa22 f303 	lsr.w	r3, r2, r3
 8003196:	4a4e      	ldr	r2, [pc, #312]	; (80032d0 <HAL_RCC_OscConfig+0x278>)
 8003198:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800319a:	4b4e      	ldr	r3, [pc, #312]	; (80032d4 <HAL_RCC_OscConfig+0x27c>)
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	4618      	mov	r0, r3
 80031a0:	f7fe f9da 	bl	8001558 <HAL_InitTick>
 80031a4:	4603      	mov	r3, r0
 80031a6:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80031a8:	7bfb      	ldrb	r3, [r7, #15]
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d052      	beq.n	8003254 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 80031ae:	7bfb      	ldrb	r3, [r7, #15]
 80031b0:	e35e      	b.n	8003870 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	699b      	ldr	r3, [r3, #24]
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d032      	beq.n	8003220 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80031ba:	4b43      	ldr	r3, [pc, #268]	; (80032c8 <HAL_RCC_OscConfig+0x270>)
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	4a42      	ldr	r2, [pc, #264]	; (80032c8 <HAL_RCC_OscConfig+0x270>)
 80031c0:	f043 0301 	orr.w	r3, r3, #1
 80031c4:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80031c6:	f7fe fa17 	bl	80015f8 <HAL_GetTick>
 80031ca:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80031cc:	e008      	b.n	80031e0 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80031ce:	f7fe fa13 	bl	80015f8 <HAL_GetTick>
 80031d2:	4602      	mov	r2, r0
 80031d4:	693b      	ldr	r3, [r7, #16]
 80031d6:	1ad3      	subs	r3, r2, r3
 80031d8:	2b02      	cmp	r3, #2
 80031da:	d901      	bls.n	80031e0 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80031dc:	2303      	movs	r3, #3
 80031de:	e347      	b.n	8003870 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80031e0:	4b39      	ldr	r3, [pc, #228]	; (80032c8 <HAL_RCC_OscConfig+0x270>)
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	f003 0302 	and.w	r3, r3, #2
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d0f0      	beq.n	80031ce <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80031ec:	4b36      	ldr	r3, [pc, #216]	; (80032c8 <HAL_RCC_OscConfig+0x270>)
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	4a35      	ldr	r2, [pc, #212]	; (80032c8 <HAL_RCC_OscConfig+0x270>)
 80031f2:	f043 0308 	orr.w	r3, r3, #8
 80031f6:	6013      	str	r3, [r2, #0]
 80031f8:	4b33      	ldr	r3, [pc, #204]	; (80032c8 <HAL_RCC_OscConfig+0x270>)
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	6a1b      	ldr	r3, [r3, #32]
 8003204:	4930      	ldr	r1, [pc, #192]	; (80032c8 <HAL_RCC_OscConfig+0x270>)
 8003206:	4313      	orrs	r3, r2
 8003208:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800320a:	4b2f      	ldr	r3, [pc, #188]	; (80032c8 <HAL_RCC_OscConfig+0x270>)
 800320c:	685b      	ldr	r3, [r3, #4]
 800320e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	69db      	ldr	r3, [r3, #28]
 8003216:	021b      	lsls	r3, r3, #8
 8003218:	492b      	ldr	r1, [pc, #172]	; (80032c8 <HAL_RCC_OscConfig+0x270>)
 800321a:	4313      	orrs	r3, r2
 800321c:	604b      	str	r3, [r1, #4]
 800321e:	e01a      	b.n	8003256 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003220:	4b29      	ldr	r3, [pc, #164]	; (80032c8 <HAL_RCC_OscConfig+0x270>)
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	4a28      	ldr	r2, [pc, #160]	; (80032c8 <HAL_RCC_OscConfig+0x270>)
 8003226:	f023 0301 	bic.w	r3, r3, #1
 800322a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800322c:	f7fe f9e4 	bl	80015f8 <HAL_GetTick>
 8003230:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003232:	e008      	b.n	8003246 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003234:	f7fe f9e0 	bl	80015f8 <HAL_GetTick>
 8003238:	4602      	mov	r2, r0
 800323a:	693b      	ldr	r3, [r7, #16]
 800323c:	1ad3      	subs	r3, r2, r3
 800323e:	2b02      	cmp	r3, #2
 8003240:	d901      	bls.n	8003246 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8003242:	2303      	movs	r3, #3
 8003244:	e314      	b.n	8003870 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003246:	4b20      	ldr	r3, [pc, #128]	; (80032c8 <HAL_RCC_OscConfig+0x270>)
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	f003 0302 	and.w	r3, r3, #2
 800324e:	2b00      	cmp	r3, #0
 8003250:	d1f0      	bne.n	8003234 <HAL_RCC_OscConfig+0x1dc>
 8003252:	e000      	b.n	8003256 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003254:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	f003 0301 	and.w	r3, r3, #1
 800325e:	2b00      	cmp	r3, #0
 8003260:	d073      	beq.n	800334a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003262:	69bb      	ldr	r3, [r7, #24]
 8003264:	2b08      	cmp	r3, #8
 8003266:	d005      	beq.n	8003274 <HAL_RCC_OscConfig+0x21c>
 8003268:	69bb      	ldr	r3, [r7, #24]
 800326a:	2b0c      	cmp	r3, #12
 800326c:	d10e      	bne.n	800328c <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800326e:	697b      	ldr	r3, [r7, #20]
 8003270:	2b03      	cmp	r3, #3
 8003272:	d10b      	bne.n	800328c <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003274:	4b14      	ldr	r3, [pc, #80]	; (80032c8 <HAL_RCC_OscConfig+0x270>)
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800327c:	2b00      	cmp	r3, #0
 800327e:	d063      	beq.n	8003348 <HAL_RCC_OscConfig+0x2f0>
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	685b      	ldr	r3, [r3, #4]
 8003284:	2b00      	cmp	r3, #0
 8003286:	d15f      	bne.n	8003348 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003288:	2301      	movs	r3, #1
 800328a:	e2f1      	b.n	8003870 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	685b      	ldr	r3, [r3, #4]
 8003290:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003294:	d106      	bne.n	80032a4 <HAL_RCC_OscConfig+0x24c>
 8003296:	4b0c      	ldr	r3, [pc, #48]	; (80032c8 <HAL_RCC_OscConfig+0x270>)
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	4a0b      	ldr	r2, [pc, #44]	; (80032c8 <HAL_RCC_OscConfig+0x270>)
 800329c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80032a0:	6013      	str	r3, [r2, #0]
 80032a2:	e025      	b.n	80032f0 <HAL_RCC_OscConfig+0x298>
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	685b      	ldr	r3, [r3, #4]
 80032a8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80032ac:	d114      	bne.n	80032d8 <HAL_RCC_OscConfig+0x280>
 80032ae:	4b06      	ldr	r3, [pc, #24]	; (80032c8 <HAL_RCC_OscConfig+0x270>)
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	4a05      	ldr	r2, [pc, #20]	; (80032c8 <HAL_RCC_OscConfig+0x270>)
 80032b4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80032b8:	6013      	str	r3, [r2, #0]
 80032ba:	4b03      	ldr	r3, [pc, #12]	; (80032c8 <HAL_RCC_OscConfig+0x270>)
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	4a02      	ldr	r2, [pc, #8]	; (80032c8 <HAL_RCC_OscConfig+0x270>)
 80032c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80032c4:	6013      	str	r3, [r2, #0]
 80032c6:	e013      	b.n	80032f0 <HAL_RCC_OscConfig+0x298>
 80032c8:	40021000 	.word	0x40021000
 80032cc:	08006e78 	.word	0x08006e78
 80032d0:	20000000 	.word	0x20000000
 80032d4:	20000004 	.word	0x20000004
 80032d8:	4ba0      	ldr	r3, [pc, #640]	; (800355c <HAL_RCC_OscConfig+0x504>)
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	4a9f      	ldr	r2, [pc, #636]	; (800355c <HAL_RCC_OscConfig+0x504>)
 80032de:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80032e2:	6013      	str	r3, [r2, #0]
 80032e4:	4b9d      	ldr	r3, [pc, #628]	; (800355c <HAL_RCC_OscConfig+0x504>)
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	4a9c      	ldr	r2, [pc, #624]	; (800355c <HAL_RCC_OscConfig+0x504>)
 80032ea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80032ee:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	685b      	ldr	r3, [r3, #4]
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d013      	beq.n	8003320 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032f8:	f7fe f97e 	bl	80015f8 <HAL_GetTick>
 80032fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80032fe:	e008      	b.n	8003312 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003300:	f7fe f97a 	bl	80015f8 <HAL_GetTick>
 8003304:	4602      	mov	r2, r0
 8003306:	693b      	ldr	r3, [r7, #16]
 8003308:	1ad3      	subs	r3, r2, r3
 800330a:	2b64      	cmp	r3, #100	; 0x64
 800330c:	d901      	bls.n	8003312 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800330e:	2303      	movs	r3, #3
 8003310:	e2ae      	b.n	8003870 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003312:	4b92      	ldr	r3, [pc, #584]	; (800355c <HAL_RCC_OscConfig+0x504>)
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800331a:	2b00      	cmp	r3, #0
 800331c:	d0f0      	beq.n	8003300 <HAL_RCC_OscConfig+0x2a8>
 800331e:	e014      	b.n	800334a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003320:	f7fe f96a 	bl	80015f8 <HAL_GetTick>
 8003324:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003326:	e008      	b.n	800333a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003328:	f7fe f966 	bl	80015f8 <HAL_GetTick>
 800332c:	4602      	mov	r2, r0
 800332e:	693b      	ldr	r3, [r7, #16]
 8003330:	1ad3      	subs	r3, r2, r3
 8003332:	2b64      	cmp	r3, #100	; 0x64
 8003334:	d901      	bls.n	800333a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8003336:	2303      	movs	r3, #3
 8003338:	e29a      	b.n	8003870 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800333a:	4b88      	ldr	r3, [pc, #544]	; (800355c <HAL_RCC_OscConfig+0x504>)
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003342:	2b00      	cmp	r3, #0
 8003344:	d1f0      	bne.n	8003328 <HAL_RCC_OscConfig+0x2d0>
 8003346:	e000      	b.n	800334a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003348:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	f003 0302 	and.w	r3, r3, #2
 8003352:	2b00      	cmp	r3, #0
 8003354:	d060      	beq.n	8003418 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003356:	69bb      	ldr	r3, [r7, #24]
 8003358:	2b04      	cmp	r3, #4
 800335a:	d005      	beq.n	8003368 <HAL_RCC_OscConfig+0x310>
 800335c:	69bb      	ldr	r3, [r7, #24]
 800335e:	2b0c      	cmp	r3, #12
 8003360:	d119      	bne.n	8003396 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003362:	697b      	ldr	r3, [r7, #20]
 8003364:	2b02      	cmp	r3, #2
 8003366:	d116      	bne.n	8003396 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003368:	4b7c      	ldr	r3, [pc, #496]	; (800355c <HAL_RCC_OscConfig+0x504>)
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003370:	2b00      	cmp	r3, #0
 8003372:	d005      	beq.n	8003380 <HAL_RCC_OscConfig+0x328>
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	68db      	ldr	r3, [r3, #12]
 8003378:	2b00      	cmp	r3, #0
 800337a:	d101      	bne.n	8003380 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800337c:	2301      	movs	r3, #1
 800337e:	e277      	b.n	8003870 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003380:	4b76      	ldr	r3, [pc, #472]	; (800355c <HAL_RCC_OscConfig+0x504>)
 8003382:	685b      	ldr	r3, [r3, #4]
 8003384:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	691b      	ldr	r3, [r3, #16]
 800338c:	061b      	lsls	r3, r3, #24
 800338e:	4973      	ldr	r1, [pc, #460]	; (800355c <HAL_RCC_OscConfig+0x504>)
 8003390:	4313      	orrs	r3, r2
 8003392:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003394:	e040      	b.n	8003418 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	68db      	ldr	r3, [r3, #12]
 800339a:	2b00      	cmp	r3, #0
 800339c:	d023      	beq.n	80033e6 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800339e:	4b6f      	ldr	r3, [pc, #444]	; (800355c <HAL_RCC_OscConfig+0x504>)
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	4a6e      	ldr	r2, [pc, #440]	; (800355c <HAL_RCC_OscConfig+0x504>)
 80033a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80033a8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033aa:	f7fe f925 	bl	80015f8 <HAL_GetTick>
 80033ae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80033b0:	e008      	b.n	80033c4 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80033b2:	f7fe f921 	bl	80015f8 <HAL_GetTick>
 80033b6:	4602      	mov	r2, r0
 80033b8:	693b      	ldr	r3, [r7, #16]
 80033ba:	1ad3      	subs	r3, r2, r3
 80033bc:	2b02      	cmp	r3, #2
 80033be:	d901      	bls.n	80033c4 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80033c0:	2303      	movs	r3, #3
 80033c2:	e255      	b.n	8003870 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80033c4:	4b65      	ldr	r3, [pc, #404]	; (800355c <HAL_RCC_OscConfig+0x504>)
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d0f0      	beq.n	80033b2 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80033d0:	4b62      	ldr	r3, [pc, #392]	; (800355c <HAL_RCC_OscConfig+0x504>)
 80033d2:	685b      	ldr	r3, [r3, #4]
 80033d4:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	691b      	ldr	r3, [r3, #16]
 80033dc:	061b      	lsls	r3, r3, #24
 80033de:	495f      	ldr	r1, [pc, #380]	; (800355c <HAL_RCC_OscConfig+0x504>)
 80033e0:	4313      	orrs	r3, r2
 80033e2:	604b      	str	r3, [r1, #4]
 80033e4:	e018      	b.n	8003418 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80033e6:	4b5d      	ldr	r3, [pc, #372]	; (800355c <HAL_RCC_OscConfig+0x504>)
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	4a5c      	ldr	r2, [pc, #368]	; (800355c <HAL_RCC_OscConfig+0x504>)
 80033ec:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80033f0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033f2:	f7fe f901 	bl	80015f8 <HAL_GetTick>
 80033f6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80033f8:	e008      	b.n	800340c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80033fa:	f7fe f8fd 	bl	80015f8 <HAL_GetTick>
 80033fe:	4602      	mov	r2, r0
 8003400:	693b      	ldr	r3, [r7, #16]
 8003402:	1ad3      	subs	r3, r2, r3
 8003404:	2b02      	cmp	r3, #2
 8003406:	d901      	bls.n	800340c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003408:	2303      	movs	r3, #3
 800340a:	e231      	b.n	8003870 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800340c:	4b53      	ldr	r3, [pc, #332]	; (800355c <HAL_RCC_OscConfig+0x504>)
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003414:	2b00      	cmp	r3, #0
 8003416:	d1f0      	bne.n	80033fa <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	f003 0308 	and.w	r3, r3, #8
 8003420:	2b00      	cmp	r3, #0
 8003422:	d03c      	beq.n	800349e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	695b      	ldr	r3, [r3, #20]
 8003428:	2b00      	cmp	r3, #0
 800342a:	d01c      	beq.n	8003466 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800342c:	4b4b      	ldr	r3, [pc, #300]	; (800355c <HAL_RCC_OscConfig+0x504>)
 800342e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003432:	4a4a      	ldr	r2, [pc, #296]	; (800355c <HAL_RCC_OscConfig+0x504>)
 8003434:	f043 0301 	orr.w	r3, r3, #1
 8003438:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800343c:	f7fe f8dc 	bl	80015f8 <HAL_GetTick>
 8003440:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003442:	e008      	b.n	8003456 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003444:	f7fe f8d8 	bl	80015f8 <HAL_GetTick>
 8003448:	4602      	mov	r2, r0
 800344a:	693b      	ldr	r3, [r7, #16]
 800344c:	1ad3      	subs	r3, r2, r3
 800344e:	2b02      	cmp	r3, #2
 8003450:	d901      	bls.n	8003456 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003452:	2303      	movs	r3, #3
 8003454:	e20c      	b.n	8003870 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003456:	4b41      	ldr	r3, [pc, #260]	; (800355c <HAL_RCC_OscConfig+0x504>)
 8003458:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800345c:	f003 0302 	and.w	r3, r3, #2
 8003460:	2b00      	cmp	r3, #0
 8003462:	d0ef      	beq.n	8003444 <HAL_RCC_OscConfig+0x3ec>
 8003464:	e01b      	b.n	800349e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003466:	4b3d      	ldr	r3, [pc, #244]	; (800355c <HAL_RCC_OscConfig+0x504>)
 8003468:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800346c:	4a3b      	ldr	r2, [pc, #236]	; (800355c <HAL_RCC_OscConfig+0x504>)
 800346e:	f023 0301 	bic.w	r3, r3, #1
 8003472:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003476:	f7fe f8bf 	bl	80015f8 <HAL_GetTick>
 800347a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800347c:	e008      	b.n	8003490 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800347e:	f7fe f8bb 	bl	80015f8 <HAL_GetTick>
 8003482:	4602      	mov	r2, r0
 8003484:	693b      	ldr	r3, [r7, #16]
 8003486:	1ad3      	subs	r3, r2, r3
 8003488:	2b02      	cmp	r3, #2
 800348a:	d901      	bls.n	8003490 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800348c:	2303      	movs	r3, #3
 800348e:	e1ef      	b.n	8003870 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003490:	4b32      	ldr	r3, [pc, #200]	; (800355c <HAL_RCC_OscConfig+0x504>)
 8003492:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003496:	f003 0302 	and.w	r3, r3, #2
 800349a:	2b00      	cmp	r3, #0
 800349c:	d1ef      	bne.n	800347e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	f003 0304 	and.w	r3, r3, #4
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	f000 80a6 	beq.w	80035f8 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80034ac:	2300      	movs	r3, #0
 80034ae:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80034b0:	4b2a      	ldr	r3, [pc, #168]	; (800355c <HAL_RCC_OscConfig+0x504>)
 80034b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d10d      	bne.n	80034d8 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80034bc:	4b27      	ldr	r3, [pc, #156]	; (800355c <HAL_RCC_OscConfig+0x504>)
 80034be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034c0:	4a26      	ldr	r2, [pc, #152]	; (800355c <HAL_RCC_OscConfig+0x504>)
 80034c2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80034c6:	6593      	str	r3, [r2, #88]	; 0x58
 80034c8:	4b24      	ldr	r3, [pc, #144]	; (800355c <HAL_RCC_OscConfig+0x504>)
 80034ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034d0:	60bb      	str	r3, [r7, #8]
 80034d2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80034d4:	2301      	movs	r3, #1
 80034d6:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80034d8:	4b21      	ldr	r3, [pc, #132]	; (8003560 <HAL_RCC_OscConfig+0x508>)
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d118      	bne.n	8003516 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80034e4:	4b1e      	ldr	r3, [pc, #120]	; (8003560 <HAL_RCC_OscConfig+0x508>)
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	4a1d      	ldr	r2, [pc, #116]	; (8003560 <HAL_RCC_OscConfig+0x508>)
 80034ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80034ee:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80034f0:	f7fe f882 	bl	80015f8 <HAL_GetTick>
 80034f4:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80034f6:	e008      	b.n	800350a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80034f8:	f7fe f87e 	bl	80015f8 <HAL_GetTick>
 80034fc:	4602      	mov	r2, r0
 80034fe:	693b      	ldr	r3, [r7, #16]
 8003500:	1ad3      	subs	r3, r2, r3
 8003502:	2b02      	cmp	r3, #2
 8003504:	d901      	bls.n	800350a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8003506:	2303      	movs	r3, #3
 8003508:	e1b2      	b.n	8003870 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800350a:	4b15      	ldr	r3, [pc, #84]	; (8003560 <HAL_RCC_OscConfig+0x508>)
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003512:	2b00      	cmp	r3, #0
 8003514:	d0f0      	beq.n	80034f8 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	689b      	ldr	r3, [r3, #8]
 800351a:	2b01      	cmp	r3, #1
 800351c:	d108      	bne.n	8003530 <HAL_RCC_OscConfig+0x4d8>
 800351e:	4b0f      	ldr	r3, [pc, #60]	; (800355c <HAL_RCC_OscConfig+0x504>)
 8003520:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003524:	4a0d      	ldr	r2, [pc, #52]	; (800355c <HAL_RCC_OscConfig+0x504>)
 8003526:	f043 0301 	orr.w	r3, r3, #1
 800352a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800352e:	e029      	b.n	8003584 <HAL_RCC_OscConfig+0x52c>
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	689b      	ldr	r3, [r3, #8]
 8003534:	2b05      	cmp	r3, #5
 8003536:	d115      	bne.n	8003564 <HAL_RCC_OscConfig+0x50c>
 8003538:	4b08      	ldr	r3, [pc, #32]	; (800355c <HAL_RCC_OscConfig+0x504>)
 800353a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800353e:	4a07      	ldr	r2, [pc, #28]	; (800355c <HAL_RCC_OscConfig+0x504>)
 8003540:	f043 0304 	orr.w	r3, r3, #4
 8003544:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003548:	4b04      	ldr	r3, [pc, #16]	; (800355c <HAL_RCC_OscConfig+0x504>)
 800354a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800354e:	4a03      	ldr	r2, [pc, #12]	; (800355c <HAL_RCC_OscConfig+0x504>)
 8003550:	f043 0301 	orr.w	r3, r3, #1
 8003554:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003558:	e014      	b.n	8003584 <HAL_RCC_OscConfig+0x52c>
 800355a:	bf00      	nop
 800355c:	40021000 	.word	0x40021000
 8003560:	40007000 	.word	0x40007000
 8003564:	4b9a      	ldr	r3, [pc, #616]	; (80037d0 <HAL_RCC_OscConfig+0x778>)
 8003566:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800356a:	4a99      	ldr	r2, [pc, #612]	; (80037d0 <HAL_RCC_OscConfig+0x778>)
 800356c:	f023 0301 	bic.w	r3, r3, #1
 8003570:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003574:	4b96      	ldr	r3, [pc, #600]	; (80037d0 <HAL_RCC_OscConfig+0x778>)
 8003576:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800357a:	4a95      	ldr	r2, [pc, #596]	; (80037d0 <HAL_RCC_OscConfig+0x778>)
 800357c:	f023 0304 	bic.w	r3, r3, #4
 8003580:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	689b      	ldr	r3, [r3, #8]
 8003588:	2b00      	cmp	r3, #0
 800358a:	d016      	beq.n	80035ba <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800358c:	f7fe f834 	bl	80015f8 <HAL_GetTick>
 8003590:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003592:	e00a      	b.n	80035aa <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003594:	f7fe f830 	bl	80015f8 <HAL_GetTick>
 8003598:	4602      	mov	r2, r0
 800359a:	693b      	ldr	r3, [r7, #16]
 800359c:	1ad3      	subs	r3, r2, r3
 800359e:	f241 3288 	movw	r2, #5000	; 0x1388
 80035a2:	4293      	cmp	r3, r2
 80035a4:	d901      	bls.n	80035aa <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80035a6:	2303      	movs	r3, #3
 80035a8:	e162      	b.n	8003870 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80035aa:	4b89      	ldr	r3, [pc, #548]	; (80037d0 <HAL_RCC_OscConfig+0x778>)
 80035ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035b0:	f003 0302 	and.w	r3, r3, #2
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d0ed      	beq.n	8003594 <HAL_RCC_OscConfig+0x53c>
 80035b8:	e015      	b.n	80035e6 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035ba:	f7fe f81d 	bl	80015f8 <HAL_GetTick>
 80035be:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80035c0:	e00a      	b.n	80035d8 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80035c2:	f7fe f819 	bl	80015f8 <HAL_GetTick>
 80035c6:	4602      	mov	r2, r0
 80035c8:	693b      	ldr	r3, [r7, #16]
 80035ca:	1ad3      	subs	r3, r2, r3
 80035cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80035d0:	4293      	cmp	r3, r2
 80035d2:	d901      	bls.n	80035d8 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80035d4:	2303      	movs	r3, #3
 80035d6:	e14b      	b.n	8003870 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80035d8:	4b7d      	ldr	r3, [pc, #500]	; (80037d0 <HAL_RCC_OscConfig+0x778>)
 80035da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035de:	f003 0302 	and.w	r3, r3, #2
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d1ed      	bne.n	80035c2 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80035e6:	7ffb      	ldrb	r3, [r7, #31]
 80035e8:	2b01      	cmp	r3, #1
 80035ea:	d105      	bne.n	80035f8 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80035ec:	4b78      	ldr	r3, [pc, #480]	; (80037d0 <HAL_RCC_OscConfig+0x778>)
 80035ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035f0:	4a77      	ldr	r2, [pc, #476]	; (80037d0 <HAL_RCC_OscConfig+0x778>)
 80035f2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80035f6:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	f003 0320 	and.w	r3, r3, #32
 8003600:	2b00      	cmp	r3, #0
 8003602:	d03c      	beq.n	800367e <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003608:	2b00      	cmp	r3, #0
 800360a:	d01c      	beq.n	8003646 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800360c:	4b70      	ldr	r3, [pc, #448]	; (80037d0 <HAL_RCC_OscConfig+0x778>)
 800360e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003612:	4a6f      	ldr	r2, [pc, #444]	; (80037d0 <HAL_RCC_OscConfig+0x778>)
 8003614:	f043 0301 	orr.w	r3, r3, #1
 8003618:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800361c:	f7fd ffec 	bl	80015f8 <HAL_GetTick>
 8003620:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003622:	e008      	b.n	8003636 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003624:	f7fd ffe8 	bl	80015f8 <HAL_GetTick>
 8003628:	4602      	mov	r2, r0
 800362a:	693b      	ldr	r3, [r7, #16]
 800362c:	1ad3      	subs	r3, r2, r3
 800362e:	2b02      	cmp	r3, #2
 8003630:	d901      	bls.n	8003636 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8003632:	2303      	movs	r3, #3
 8003634:	e11c      	b.n	8003870 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003636:	4b66      	ldr	r3, [pc, #408]	; (80037d0 <HAL_RCC_OscConfig+0x778>)
 8003638:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800363c:	f003 0302 	and.w	r3, r3, #2
 8003640:	2b00      	cmp	r3, #0
 8003642:	d0ef      	beq.n	8003624 <HAL_RCC_OscConfig+0x5cc>
 8003644:	e01b      	b.n	800367e <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003646:	4b62      	ldr	r3, [pc, #392]	; (80037d0 <HAL_RCC_OscConfig+0x778>)
 8003648:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800364c:	4a60      	ldr	r2, [pc, #384]	; (80037d0 <HAL_RCC_OscConfig+0x778>)
 800364e:	f023 0301 	bic.w	r3, r3, #1
 8003652:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003656:	f7fd ffcf 	bl	80015f8 <HAL_GetTick>
 800365a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800365c:	e008      	b.n	8003670 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800365e:	f7fd ffcb 	bl	80015f8 <HAL_GetTick>
 8003662:	4602      	mov	r2, r0
 8003664:	693b      	ldr	r3, [r7, #16]
 8003666:	1ad3      	subs	r3, r2, r3
 8003668:	2b02      	cmp	r3, #2
 800366a:	d901      	bls.n	8003670 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 800366c:	2303      	movs	r3, #3
 800366e:	e0ff      	b.n	8003870 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003670:	4b57      	ldr	r3, [pc, #348]	; (80037d0 <HAL_RCC_OscConfig+0x778>)
 8003672:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003676:	f003 0302 	and.w	r3, r3, #2
 800367a:	2b00      	cmp	r3, #0
 800367c:	d1ef      	bne.n	800365e <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003682:	2b00      	cmp	r3, #0
 8003684:	f000 80f3 	beq.w	800386e <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800368c:	2b02      	cmp	r3, #2
 800368e:	f040 80c9 	bne.w	8003824 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003692:	4b4f      	ldr	r3, [pc, #316]	; (80037d0 <HAL_RCC_OscConfig+0x778>)
 8003694:	68db      	ldr	r3, [r3, #12]
 8003696:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003698:	697b      	ldr	r3, [r7, #20]
 800369a:	f003 0203 	and.w	r2, r3, #3
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036a2:	429a      	cmp	r2, r3
 80036a4:	d12c      	bne.n	8003700 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80036a6:	697b      	ldr	r3, [r7, #20]
 80036a8:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036b0:	3b01      	subs	r3, #1
 80036b2:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80036b4:	429a      	cmp	r2, r3
 80036b6:	d123      	bne.n	8003700 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80036b8:	697b      	ldr	r3, [r7, #20]
 80036ba:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80036c2:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80036c4:	429a      	cmp	r2, r3
 80036c6:	d11b      	bne.n	8003700 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80036c8:	697b      	ldr	r3, [r7, #20]
 80036ca:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036d2:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80036d4:	429a      	cmp	r2, r3
 80036d6:	d113      	bne.n	8003700 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80036d8:	697b      	ldr	r3, [r7, #20]
 80036da:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036e2:	085b      	lsrs	r3, r3, #1
 80036e4:	3b01      	subs	r3, #1
 80036e6:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80036e8:	429a      	cmp	r2, r3
 80036ea:	d109      	bne.n	8003700 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80036ec:	697b      	ldr	r3, [r7, #20]
 80036ee:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036f6:	085b      	lsrs	r3, r3, #1
 80036f8:	3b01      	subs	r3, #1
 80036fa:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80036fc:	429a      	cmp	r2, r3
 80036fe:	d06b      	beq.n	80037d8 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003700:	69bb      	ldr	r3, [r7, #24]
 8003702:	2b0c      	cmp	r3, #12
 8003704:	d062      	beq.n	80037cc <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003706:	4b32      	ldr	r3, [pc, #200]	; (80037d0 <HAL_RCC_OscConfig+0x778>)
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800370e:	2b00      	cmp	r3, #0
 8003710:	d001      	beq.n	8003716 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8003712:	2301      	movs	r3, #1
 8003714:	e0ac      	b.n	8003870 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003716:	4b2e      	ldr	r3, [pc, #184]	; (80037d0 <HAL_RCC_OscConfig+0x778>)
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	4a2d      	ldr	r2, [pc, #180]	; (80037d0 <HAL_RCC_OscConfig+0x778>)
 800371c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003720:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003722:	f7fd ff69 	bl	80015f8 <HAL_GetTick>
 8003726:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003728:	e008      	b.n	800373c <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800372a:	f7fd ff65 	bl	80015f8 <HAL_GetTick>
 800372e:	4602      	mov	r2, r0
 8003730:	693b      	ldr	r3, [r7, #16]
 8003732:	1ad3      	subs	r3, r2, r3
 8003734:	2b02      	cmp	r3, #2
 8003736:	d901      	bls.n	800373c <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8003738:	2303      	movs	r3, #3
 800373a:	e099      	b.n	8003870 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800373c:	4b24      	ldr	r3, [pc, #144]	; (80037d0 <HAL_RCC_OscConfig+0x778>)
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003744:	2b00      	cmp	r3, #0
 8003746:	d1f0      	bne.n	800372a <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003748:	4b21      	ldr	r3, [pc, #132]	; (80037d0 <HAL_RCC_OscConfig+0x778>)
 800374a:	68da      	ldr	r2, [r3, #12]
 800374c:	4b21      	ldr	r3, [pc, #132]	; (80037d4 <HAL_RCC_OscConfig+0x77c>)
 800374e:	4013      	ands	r3, r2
 8003750:	687a      	ldr	r2, [r7, #4]
 8003752:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8003754:	687a      	ldr	r2, [r7, #4]
 8003756:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003758:	3a01      	subs	r2, #1
 800375a:	0112      	lsls	r2, r2, #4
 800375c:	4311      	orrs	r1, r2
 800375e:	687a      	ldr	r2, [r7, #4]
 8003760:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003762:	0212      	lsls	r2, r2, #8
 8003764:	4311      	orrs	r1, r2
 8003766:	687a      	ldr	r2, [r7, #4]
 8003768:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800376a:	0852      	lsrs	r2, r2, #1
 800376c:	3a01      	subs	r2, #1
 800376e:	0552      	lsls	r2, r2, #21
 8003770:	4311      	orrs	r1, r2
 8003772:	687a      	ldr	r2, [r7, #4]
 8003774:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003776:	0852      	lsrs	r2, r2, #1
 8003778:	3a01      	subs	r2, #1
 800377a:	0652      	lsls	r2, r2, #25
 800377c:	4311      	orrs	r1, r2
 800377e:	687a      	ldr	r2, [r7, #4]
 8003780:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003782:	06d2      	lsls	r2, r2, #27
 8003784:	430a      	orrs	r2, r1
 8003786:	4912      	ldr	r1, [pc, #72]	; (80037d0 <HAL_RCC_OscConfig+0x778>)
 8003788:	4313      	orrs	r3, r2
 800378a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800378c:	4b10      	ldr	r3, [pc, #64]	; (80037d0 <HAL_RCC_OscConfig+0x778>)
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	4a0f      	ldr	r2, [pc, #60]	; (80037d0 <HAL_RCC_OscConfig+0x778>)
 8003792:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003796:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003798:	4b0d      	ldr	r3, [pc, #52]	; (80037d0 <HAL_RCC_OscConfig+0x778>)
 800379a:	68db      	ldr	r3, [r3, #12]
 800379c:	4a0c      	ldr	r2, [pc, #48]	; (80037d0 <HAL_RCC_OscConfig+0x778>)
 800379e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80037a2:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80037a4:	f7fd ff28 	bl	80015f8 <HAL_GetTick>
 80037a8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80037aa:	e008      	b.n	80037be <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80037ac:	f7fd ff24 	bl	80015f8 <HAL_GetTick>
 80037b0:	4602      	mov	r2, r0
 80037b2:	693b      	ldr	r3, [r7, #16]
 80037b4:	1ad3      	subs	r3, r2, r3
 80037b6:	2b02      	cmp	r3, #2
 80037b8:	d901      	bls.n	80037be <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 80037ba:	2303      	movs	r3, #3
 80037bc:	e058      	b.n	8003870 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80037be:	4b04      	ldr	r3, [pc, #16]	; (80037d0 <HAL_RCC_OscConfig+0x778>)
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d0f0      	beq.n	80037ac <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80037ca:	e050      	b.n	800386e <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80037cc:	2301      	movs	r3, #1
 80037ce:	e04f      	b.n	8003870 <HAL_RCC_OscConfig+0x818>
 80037d0:	40021000 	.word	0x40021000
 80037d4:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80037d8:	4b27      	ldr	r3, [pc, #156]	; (8003878 <HAL_RCC_OscConfig+0x820>)
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d144      	bne.n	800386e <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80037e4:	4b24      	ldr	r3, [pc, #144]	; (8003878 <HAL_RCC_OscConfig+0x820>)
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	4a23      	ldr	r2, [pc, #140]	; (8003878 <HAL_RCC_OscConfig+0x820>)
 80037ea:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80037ee:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80037f0:	4b21      	ldr	r3, [pc, #132]	; (8003878 <HAL_RCC_OscConfig+0x820>)
 80037f2:	68db      	ldr	r3, [r3, #12]
 80037f4:	4a20      	ldr	r2, [pc, #128]	; (8003878 <HAL_RCC_OscConfig+0x820>)
 80037f6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80037fa:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80037fc:	f7fd fefc 	bl	80015f8 <HAL_GetTick>
 8003800:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003802:	e008      	b.n	8003816 <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003804:	f7fd fef8 	bl	80015f8 <HAL_GetTick>
 8003808:	4602      	mov	r2, r0
 800380a:	693b      	ldr	r3, [r7, #16]
 800380c:	1ad3      	subs	r3, r2, r3
 800380e:	2b02      	cmp	r3, #2
 8003810:	d901      	bls.n	8003816 <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 8003812:	2303      	movs	r3, #3
 8003814:	e02c      	b.n	8003870 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003816:	4b18      	ldr	r3, [pc, #96]	; (8003878 <HAL_RCC_OscConfig+0x820>)
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800381e:	2b00      	cmp	r3, #0
 8003820:	d0f0      	beq.n	8003804 <HAL_RCC_OscConfig+0x7ac>
 8003822:	e024      	b.n	800386e <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003824:	69bb      	ldr	r3, [r7, #24]
 8003826:	2b0c      	cmp	r3, #12
 8003828:	d01f      	beq.n	800386a <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800382a:	4b13      	ldr	r3, [pc, #76]	; (8003878 <HAL_RCC_OscConfig+0x820>)
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	4a12      	ldr	r2, [pc, #72]	; (8003878 <HAL_RCC_OscConfig+0x820>)
 8003830:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003834:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003836:	f7fd fedf 	bl	80015f8 <HAL_GetTick>
 800383a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800383c:	e008      	b.n	8003850 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800383e:	f7fd fedb 	bl	80015f8 <HAL_GetTick>
 8003842:	4602      	mov	r2, r0
 8003844:	693b      	ldr	r3, [r7, #16]
 8003846:	1ad3      	subs	r3, r2, r3
 8003848:	2b02      	cmp	r3, #2
 800384a:	d901      	bls.n	8003850 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 800384c:	2303      	movs	r3, #3
 800384e:	e00f      	b.n	8003870 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003850:	4b09      	ldr	r3, [pc, #36]	; (8003878 <HAL_RCC_OscConfig+0x820>)
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003858:	2b00      	cmp	r3, #0
 800385a:	d1f0      	bne.n	800383e <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 800385c:	4b06      	ldr	r3, [pc, #24]	; (8003878 <HAL_RCC_OscConfig+0x820>)
 800385e:	68da      	ldr	r2, [r3, #12]
 8003860:	4905      	ldr	r1, [pc, #20]	; (8003878 <HAL_RCC_OscConfig+0x820>)
 8003862:	4b06      	ldr	r3, [pc, #24]	; (800387c <HAL_RCC_OscConfig+0x824>)
 8003864:	4013      	ands	r3, r2
 8003866:	60cb      	str	r3, [r1, #12]
 8003868:	e001      	b.n	800386e <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800386a:	2301      	movs	r3, #1
 800386c:	e000      	b.n	8003870 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 800386e:	2300      	movs	r3, #0
}
 8003870:	4618      	mov	r0, r3
 8003872:	3720      	adds	r7, #32
 8003874:	46bd      	mov	sp, r7
 8003876:	bd80      	pop	{r7, pc}
 8003878:	40021000 	.word	0x40021000
 800387c:	feeefffc 	.word	0xfeeefffc

08003880 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003880:	b580      	push	{r7, lr}
 8003882:	b084      	sub	sp, #16
 8003884:	af00      	add	r7, sp, #0
 8003886:	6078      	str	r0, [r7, #4]
 8003888:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	2b00      	cmp	r3, #0
 800388e:	d101      	bne.n	8003894 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003890:	2301      	movs	r3, #1
 8003892:	e0e7      	b.n	8003a64 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003894:	4b75      	ldr	r3, [pc, #468]	; (8003a6c <HAL_RCC_ClockConfig+0x1ec>)
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	f003 0307 	and.w	r3, r3, #7
 800389c:	683a      	ldr	r2, [r7, #0]
 800389e:	429a      	cmp	r2, r3
 80038a0:	d910      	bls.n	80038c4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80038a2:	4b72      	ldr	r3, [pc, #456]	; (8003a6c <HAL_RCC_ClockConfig+0x1ec>)
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	f023 0207 	bic.w	r2, r3, #7
 80038aa:	4970      	ldr	r1, [pc, #448]	; (8003a6c <HAL_RCC_ClockConfig+0x1ec>)
 80038ac:	683b      	ldr	r3, [r7, #0]
 80038ae:	4313      	orrs	r3, r2
 80038b0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80038b2:	4b6e      	ldr	r3, [pc, #440]	; (8003a6c <HAL_RCC_ClockConfig+0x1ec>)
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	f003 0307 	and.w	r3, r3, #7
 80038ba:	683a      	ldr	r2, [r7, #0]
 80038bc:	429a      	cmp	r2, r3
 80038be:	d001      	beq.n	80038c4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80038c0:	2301      	movs	r3, #1
 80038c2:	e0cf      	b.n	8003a64 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	f003 0302 	and.w	r3, r3, #2
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d010      	beq.n	80038f2 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	689a      	ldr	r2, [r3, #8]
 80038d4:	4b66      	ldr	r3, [pc, #408]	; (8003a70 <HAL_RCC_ClockConfig+0x1f0>)
 80038d6:	689b      	ldr	r3, [r3, #8]
 80038d8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80038dc:	429a      	cmp	r2, r3
 80038de:	d908      	bls.n	80038f2 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80038e0:	4b63      	ldr	r3, [pc, #396]	; (8003a70 <HAL_RCC_ClockConfig+0x1f0>)
 80038e2:	689b      	ldr	r3, [r3, #8]
 80038e4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	689b      	ldr	r3, [r3, #8]
 80038ec:	4960      	ldr	r1, [pc, #384]	; (8003a70 <HAL_RCC_ClockConfig+0x1f0>)
 80038ee:	4313      	orrs	r3, r2
 80038f0:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	f003 0301 	and.w	r3, r3, #1
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d04c      	beq.n	8003998 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	685b      	ldr	r3, [r3, #4]
 8003902:	2b03      	cmp	r3, #3
 8003904:	d107      	bne.n	8003916 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003906:	4b5a      	ldr	r3, [pc, #360]	; (8003a70 <HAL_RCC_ClockConfig+0x1f0>)
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800390e:	2b00      	cmp	r3, #0
 8003910:	d121      	bne.n	8003956 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8003912:	2301      	movs	r3, #1
 8003914:	e0a6      	b.n	8003a64 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	685b      	ldr	r3, [r3, #4]
 800391a:	2b02      	cmp	r3, #2
 800391c:	d107      	bne.n	800392e <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800391e:	4b54      	ldr	r3, [pc, #336]	; (8003a70 <HAL_RCC_ClockConfig+0x1f0>)
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003926:	2b00      	cmp	r3, #0
 8003928:	d115      	bne.n	8003956 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800392a:	2301      	movs	r3, #1
 800392c:	e09a      	b.n	8003a64 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	685b      	ldr	r3, [r3, #4]
 8003932:	2b00      	cmp	r3, #0
 8003934:	d107      	bne.n	8003946 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003936:	4b4e      	ldr	r3, [pc, #312]	; (8003a70 <HAL_RCC_ClockConfig+0x1f0>)
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	f003 0302 	and.w	r3, r3, #2
 800393e:	2b00      	cmp	r3, #0
 8003940:	d109      	bne.n	8003956 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003942:	2301      	movs	r3, #1
 8003944:	e08e      	b.n	8003a64 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003946:	4b4a      	ldr	r3, [pc, #296]	; (8003a70 <HAL_RCC_ClockConfig+0x1f0>)
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800394e:	2b00      	cmp	r3, #0
 8003950:	d101      	bne.n	8003956 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003952:	2301      	movs	r3, #1
 8003954:	e086      	b.n	8003a64 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003956:	4b46      	ldr	r3, [pc, #280]	; (8003a70 <HAL_RCC_ClockConfig+0x1f0>)
 8003958:	689b      	ldr	r3, [r3, #8]
 800395a:	f023 0203 	bic.w	r2, r3, #3
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	685b      	ldr	r3, [r3, #4]
 8003962:	4943      	ldr	r1, [pc, #268]	; (8003a70 <HAL_RCC_ClockConfig+0x1f0>)
 8003964:	4313      	orrs	r3, r2
 8003966:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003968:	f7fd fe46 	bl	80015f8 <HAL_GetTick>
 800396c:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800396e:	e00a      	b.n	8003986 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003970:	f7fd fe42 	bl	80015f8 <HAL_GetTick>
 8003974:	4602      	mov	r2, r0
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	1ad3      	subs	r3, r2, r3
 800397a:	f241 3288 	movw	r2, #5000	; 0x1388
 800397e:	4293      	cmp	r3, r2
 8003980:	d901      	bls.n	8003986 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8003982:	2303      	movs	r3, #3
 8003984:	e06e      	b.n	8003a64 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003986:	4b3a      	ldr	r3, [pc, #232]	; (8003a70 <HAL_RCC_ClockConfig+0x1f0>)
 8003988:	689b      	ldr	r3, [r3, #8]
 800398a:	f003 020c 	and.w	r2, r3, #12
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	685b      	ldr	r3, [r3, #4]
 8003992:	009b      	lsls	r3, r3, #2
 8003994:	429a      	cmp	r2, r3
 8003996:	d1eb      	bne.n	8003970 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	f003 0302 	and.w	r3, r3, #2
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d010      	beq.n	80039c6 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	689a      	ldr	r2, [r3, #8]
 80039a8:	4b31      	ldr	r3, [pc, #196]	; (8003a70 <HAL_RCC_ClockConfig+0x1f0>)
 80039aa:	689b      	ldr	r3, [r3, #8]
 80039ac:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80039b0:	429a      	cmp	r2, r3
 80039b2:	d208      	bcs.n	80039c6 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80039b4:	4b2e      	ldr	r3, [pc, #184]	; (8003a70 <HAL_RCC_ClockConfig+0x1f0>)
 80039b6:	689b      	ldr	r3, [r3, #8]
 80039b8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	689b      	ldr	r3, [r3, #8]
 80039c0:	492b      	ldr	r1, [pc, #172]	; (8003a70 <HAL_RCC_ClockConfig+0x1f0>)
 80039c2:	4313      	orrs	r3, r2
 80039c4:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80039c6:	4b29      	ldr	r3, [pc, #164]	; (8003a6c <HAL_RCC_ClockConfig+0x1ec>)
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	f003 0307 	and.w	r3, r3, #7
 80039ce:	683a      	ldr	r2, [r7, #0]
 80039d0:	429a      	cmp	r2, r3
 80039d2:	d210      	bcs.n	80039f6 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80039d4:	4b25      	ldr	r3, [pc, #148]	; (8003a6c <HAL_RCC_ClockConfig+0x1ec>)
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	f023 0207 	bic.w	r2, r3, #7
 80039dc:	4923      	ldr	r1, [pc, #140]	; (8003a6c <HAL_RCC_ClockConfig+0x1ec>)
 80039de:	683b      	ldr	r3, [r7, #0]
 80039e0:	4313      	orrs	r3, r2
 80039e2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80039e4:	4b21      	ldr	r3, [pc, #132]	; (8003a6c <HAL_RCC_ClockConfig+0x1ec>)
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	f003 0307 	and.w	r3, r3, #7
 80039ec:	683a      	ldr	r2, [r7, #0]
 80039ee:	429a      	cmp	r2, r3
 80039f0:	d001      	beq.n	80039f6 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80039f2:	2301      	movs	r3, #1
 80039f4:	e036      	b.n	8003a64 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	f003 0304 	and.w	r3, r3, #4
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d008      	beq.n	8003a14 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003a02:	4b1b      	ldr	r3, [pc, #108]	; (8003a70 <HAL_RCC_ClockConfig+0x1f0>)
 8003a04:	689b      	ldr	r3, [r3, #8]
 8003a06:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	68db      	ldr	r3, [r3, #12]
 8003a0e:	4918      	ldr	r1, [pc, #96]	; (8003a70 <HAL_RCC_ClockConfig+0x1f0>)
 8003a10:	4313      	orrs	r3, r2
 8003a12:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	f003 0308 	and.w	r3, r3, #8
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d009      	beq.n	8003a34 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003a20:	4b13      	ldr	r3, [pc, #76]	; (8003a70 <HAL_RCC_ClockConfig+0x1f0>)
 8003a22:	689b      	ldr	r3, [r3, #8]
 8003a24:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	691b      	ldr	r3, [r3, #16]
 8003a2c:	00db      	lsls	r3, r3, #3
 8003a2e:	4910      	ldr	r1, [pc, #64]	; (8003a70 <HAL_RCC_ClockConfig+0x1f0>)
 8003a30:	4313      	orrs	r3, r2
 8003a32:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003a34:	f000 f824 	bl	8003a80 <HAL_RCC_GetSysClockFreq>
 8003a38:	4602      	mov	r2, r0
 8003a3a:	4b0d      	ldr	r3, [pc, #52]	; (8003a70 <HAL_RCC_ClockConfig+0x1f0>)
 8003a3c:	689b      	ldr	r3, [r3, #8]
 8003a3e:	091b      	lsrs	r3, r3, #4
 8003a40:	f003 030f 	and.w	r3, r3, #15
 8003a44:	490b      	ldr	r1, [pc, #44]	; (8003a74 <HAL_RCC_ClockConfig+0x1f4>)
 8003a46:	5ccb      	ldrb	r3, [r1, r3]
 8003a48:	f003 031f 	and.w	r3, r3, #31
 8003a4c:	fa22 f303 	lsr.w	r3, r2, r3
 8003a50:	4a09      	ldr	r2, [pc, #36]	; (8003a78 <HAL_RCC_ClockConfig+0x1f8>)
 8003a52:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003a54:	4b09      	ldr	r3, [pc, #36]	; (8003a7c <HAL_RCC_ClockConfig+0x1fc>)
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	4618      	mov	r0, r3
 8003a5a:	f7fd fd7d 	bl	8001558 <HAL_InitTick>
 8003a5e:	4603      	mov	r3, r0
 8003a60:	72fb      	strb	r3, [r7, #11]

  return status;
 8003a62:	7afb      	ldrb	r3, [r7, #11]
}
 8003a64:	4618      	mov	r0, r3
 8003a66:	3710      	adds	r7, #16
 8003a68:	46bd      	mov	sp, r7
 8003a6a:	bd80      	pop	{r7, pc}
 8003a6c:	40022000 	.word	0x40022000
 8003a70:	40021000 	.word	0x40021000
 8003a74:	08006e78 	.word	0x08006e78
 8003a78:	20000000 	.word	0x20000000
 8003a7c:	20000004 	.word	0x20000004

08003a80 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003a80:	b480      	push	{r7}
 8003a82:	b089      	sub	sp, #36	; 0x24
 8003a84:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003a86:	2300      	movs	r3, #0
 8003a88:	61fb      	str	r3, [r7, #28]
 8003a8a:	2300      	movs	r3, #0
 8003a8c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003a8e:	4b3e      	ldr	r3, [pc, #248]	; (8003b88 <HAL_RCC_GetSysClockFreq+0x108>)
 8003a90:	689b      	ldr	r3, [r3, #8]
 8003a92:	f003 030c 	and.w	r3, r3, #12
 8003a96:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003a98:	4b3b      	ldr	r3, [pc, #236]	; (8003b88 <HAL_RCC_GetSysClockFreq+0x108>)
 8003a9a:	68db      	ldr	r3, [r3, #12]
 8003a9c:	f003 0303 	and.w	r3, r3, #3
 8003aa0:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003aa2:	693b      	ldr	r3, [r7, #16]
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d005      	beq.n	8003ab4 <HAL_RCC_GetSysClockFreq+0x34>
 8003aa8:	693b      	ldr	r3, [r7, #16]
 8003aaa:	2b0c      	cmp	r3, #12
 8003aac:	d121      	bne.n	8003af2 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	2b01      	cmp	r3, #1
 8003ab2:	d11e      	bne.n	8003af2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003ab4:	4b34      	ldr	r3, [pc, #208]	; (8003b88 <HAL_RCC_GetSysClockFreq+0x108>)
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	f003 0308 	and.w	r3, r3, #8
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d107      	bne.n	8003ad0 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003ac0:	4b31      	ldr	r3, [pc, #196]	; (8003b88 <HAL_RCC_GetSysClockFreq+0x108>)
 8003ac2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003ac6:	0a1b      	lsrs	r3, r3, #8
 8003ac8:	f003 030f 	and.w	r3, r3, #15
 8003acc:	61fb      	str	r3, [r7, #28]
 8003ace:	e005      	b.n	8003adc <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003ad0:	4b2d      	ldr	r3, [pc, #180]	; (8003b88 <HAL_RCC_GetSysClockFreq+0x108>)
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	091b      	lsrs	r3, r3, #4
 8003ad6:	f003 030f 	and.w	r3, r3, #15
 8003ada:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003adc:	4a2b      	ldr	r2, [pc, #172]	; (8003b8c <HAL_RCC_GetSysClockFreq+0x10c>)
 8003ade:	69fb      	ldr	r3, [r7, #28]
 8003ae0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003ae4:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003ae6:	693b      	ldr	r3, [r7, #16]
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d10d      	bne.n	8003b08 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003aec:	69fb      	ldr	r3, [r7, #28]
 8003aee:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003af0:	e00a      	b.n	8003b08 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003af2:	693b      	ldr	r3, [r7, #16]
 8003af4:	2b04      	cmp	r3, #4
 8003af6:	d102      	bne.n	8003afe <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003af8:	4b25      	ldr	r3, [pc, #148]	; (8003b90 <HAL_RCC_GetSysClockFreq+0x110>)
 8003afa:	61bb      	str	r3, [r7, #24]
 8003afc:	e004      	b.n	8003b08 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003afe:	693b      	ldr	r3, [r7, #16]
 8003b00:	2b08      	cmp	r3, #8
 8003b02:	d101      	bne.n	8003b08 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003b04:	4b23      	ldr	r3, [pc, #140]	; (8003b94 <HAL_RCC_GetSysClockFreq+0x114>)
 8003b06:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003b08:	693b      	ldr	r3, [r7, #16]
 8003b0a:	2b0c      	cmp	r3, #12
 8003b0c:	d134      	bne.n	8003b78 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003b0e:	4b1e      	ldr	r3, [pc, #120]	; (8003b88 <HAL_RCC_GetSysClockFreq+0x108>)
 8003b10:	68db      	ldr	r3, [r3, #12]
 8003b12:	f003 0303 	and.w	r3, r3, #3
 8003b16:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003b18:	68bb      	ldr	r3, [r7, #8]
 8003b1a:	2b02      	cmp	r3, #2
 8003b1c:	d003      	beq.n	8003b26 <HAL_RCC_GetSysClockFreq+0xa6>
 8003b1e:	68bb      	ldr	r3, [r7, #8]
 8003b20:	2b03      	cmp	r3, #3
 8003b22:	d003      	beq.n	8003b2c <HAL_RCC_GetSysClockFreq+0xac>
 8003b24:	e005      	b.n	8003b32 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003b26:	4b1a      	ldr	r3, [pc, #104]	; (8003b90 <HAL_RCC_GetSysClockFreq+0x110>)
 8003b28:	617b      	str	r3, [r7, #20]
      break;
 8003b2a:	e005      	b.n	8003b38 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003b2c:	4b19      	ldr	r3, [pc, #100]	; (8003b94 <HAL_RCC_GetSysClockFreq+0x114>)
 8003b2e:	617b      	str	r3, [r7, #20]
      break;
 8003b30:	e002      	b.n	8003b38 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003b32:	69fb      	ldr	r3, [r7, #28]
 8003b34:	617b      	str	r3, [r7, #20]
      break;
 8003b36:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003b38:	4b13      	ldr	r3, [pc, #76]	; (8003b88 <HAL_RCC_GetSysClockFreq+0x108>)
 8003b3a:	68db      	ldr	r3, [r3, #12]
 8003b3c:	091b      	lsrs	r3, r3, #4
 8003b3e:	f003 0307 	and.w	r3, r3, #7
 8003b42:	3301      	adds	r3, #1
 8003b44:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003b46:	4b10      	ldr	r3, [pc, #64]	; (8003b88 <HAL_RCC_GetSysClockFreq+0x108>)
 8003b48:	68db      	ldr	r3, [r3, #12]
 8003b4a:	0a1b      	lsrs	r3, r3, #8
 8003b4c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003b50:	697a      	ldr	r2, [r7, #20]
 8003b52:	fb03 f202 	mul.w	r2, r3, r2
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b5c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003b5e:	4b0a      	ldr	r3, [pc, #40]	; (8003b88 <HAL_RCC_GetSysClockFreq+0x108>)
 8003b60:	68db      	ldr	r3, [r3, #12]
 8003b62:	0e5b      	lsrs	r3, r3, #25
 8003b64:	f003 0303 	and.w	r3, r3, #3
 8003b68:	3301      	adds	r3, #1
 8003b6a:	005b      	lsls	r3, r3, #1
 8003b6c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003b6e:	697a      	ldr	r2, [r7, #20]
 8003b70:	683b      	ldr	r3, [r7, #0]
 8003b72:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b76:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003b78:	69bb      	ldr	r3, [r7, #24]
}
 8003b7a:	4618      	mov	r0, r3
 8003b7c:	3724      	adds	r7, #36	; 0x24
 8003b7e:	46bd      	mov	sp, r7
 8003b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b84:	4770      	bx	lr
 8003b86:	bf00      	nop
 8003b88:	40021000 	.word	0x40021000
 8003b8c:	08006e90 	.word	0x08006e90
 8003b90:	00f42400 	.word	0x00f42400
 8003b94:	007a1200 	.word	0x007a1200

08003b98 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003b98:	b480      	push	{r7}
 8003b9a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003b9c:	4b03      	ldr	r3, [pc, #12]	; (8003bac <HAL_RCC_GetHCLKFreq+0x14>)
 8003b9e:	681b      	ldr	r3, [r3, #0]
}
 8003ba0:	4618      	mov	r0, r3
 8003ba2:	46bd      	mov	sp, r7
 8003ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba8:	4770      	bx	lr
 8003baa:	bf00      	nop
 8003bac:	20000000 	.word	0x20000000

08003bb0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003bb0:	b580      	push	{r7, lr}
 8003bb2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003bb4:	f7ff fff0 	bl	8003b98 <HAL_RCC_GetHCLKFreq>
 8003bb8:	4602      	mov	r2, r0
 8003bba:	4b06      	ldr	r3, [pc, #24]	; (8003bd4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003bbc:	689b      	ldr	r3, [r3, #8]
 8003bbe:	0a1b      	lsrs	r3, r3, #8
 8003bc0:	f003 0307 	and.w	r3, r3, #7
 8003bc4:	4904      	ldr	r1, [pc, #16]	; (8003bd8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003bc6:	5ccb      	ldrb	r3, [r1, r3]
 8003bc8:	f003 031f 	and.w	r3, r3, #31
 8003bcc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003bd0:	4618      	mov	r0, r3
 8003bd2:	bd80      	pop	{r7, pc}
 8003bd4:	40021000 	.word	0x40021000
 8003bd8:	08006e88 	.word	0x08006e88

08003bdc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003bdc:	b580      	push	{r7, lr}
 8003bde:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003be0:	f7ff ffda 	bl	8003b98 <HAL_RCC_GetHCLKFreq>
 8003be4:	4602      	mov	r2, r0
 8003be6:	4b06      	ldr	r3, [pc, #24]	; (8003c00 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003be8:	689b      	ldr	r3, [r3, #8]
 8003bea:	0adb      	lsrs	r3, r3, #11
 8003bec:	f003 0307 	and.w	r3, r3, #7
 8003bf0:	4904      	ldr	r1, [pc, #16]	; (8003c04 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003bf2:	5ccb      	ldrb	r3, [r1, r3]
 8003bf4:	f003 031f 	and.w	r3, r3, #31
 8003bf8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003bfc:	4618      	mov	r0, r3
 8003bfe:	bd80      	pop	{r7, pc}
 8003c00:	40021000 	.word	0x40021000
 8003c04:	08006e88 	.word	0x08006e88

08003c08 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003c08:	b580      	push	{r7, lr}
 8003c0a:	b086      	sub	sp, #24
 8003c0c:	af00      	add	r7, sp, #0
 8003c0e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003c10:	2300      	movs	r3, #0
 8003c12:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003c14:	4b2a      	ldr	r3, [pc, #168]	; (8003cc0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003c16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c18:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d003      	beq.n	8003c28 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003c20:	f7ff f9b6 	bl	8002f90 <HAL_PWREx_GetVoltageRange>
 8003c24:	6178      	str	r0, [r7, #20]
 8003c26:	e014      	b.n	8003c52 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003c28:	4b25      	ldr	r3, [pc, #148]	; (8003cc0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003c2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c2c:	4a24      	ldr	r2, [pc, #144]	; (8003cc0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003c2e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003c32:	6593      	str	r3, [r2, #88]	; 0x58
 8003c34:	4b22      	ldr	r3, [pc, #136]	; (8003cc0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003c36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c38:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c3c:	60fb      	str	r3, [r7, #12]
 8003c3e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003c40:	f7ff f9a6 	bl	8002f90 <HAL_PWREx_GetVoltageRange>
 8003c44:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003c46:	4b1e      	ldr	r3, [pc, #120]	; (8003cc0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003c48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c4a:	4a1d      	ldr	r2, [pc, #116]	; (8003cc0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003c4c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003c50:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003c52:	697b      	ldr	r3, [r7, #20]
 8003c54:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003c58:	d10b      	bne.n	8003c72 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	2b80      	cmp	r3, #128	; 0x80
 8003c5e:	d919      	bls.n	8003c94 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	2ba0      	cmp	r3, #160	; 0xa0
 8003c64:	d902      	bls.n	8003c6c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003c66:	2302      	movs	r3, #2
 8003c68:	613b      	str	r3, [r7, #16]
 8003c6a:	e013      	b.n	8003c94 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003c6c:	2301      	movs	r3, #1
 8003c6e:	613b      	str	r3, [r7, #16]
 8003c70:	e010      	b.n	8003c94 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	2b80      	cmp	r3, #128	; 0x80
 8003c76:	d902      	bls.n	8003c7e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003c78:	2303      	movs	r3, #3
 8003c7a:	613b      	str	r3, [r7, #16]
 8003c7c:	e00a      	b.n	8003c94 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	2b80      	cmp	r3, #128	; 0x80
 8003c82:	d102      	bne.n	8003c8a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003c84:	2302      	movs	r3, #2
 8003c86:	613b      	str	r3, [r7, #16]
 8003c88:	e004      	b.n	8003c94 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	2b70      	cmp	r3, #112	; 0x70
 8003c8e:	d101      	bne.n	8003c94 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003c90:	2301      	movs	r3, #1
 8003c92:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003c94:	4b0b      	ldr	r3, [pc, #44]	; (8003cc4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	f023 0207 	bic.w	r2, r3, #7
 8003c9c:	4909      	ldr	r1, [pc, #36]	; (8003cc4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003c9e:	693b      	ldr	r3, [r7, #16]
 8003ca0:	4313      	orrs	r3, r2
 8003ca2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003ca4:	4b07      	ldr	r3, [pc, #28]	; (8003cc4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	f003 0307 	and.w	r3, r3, #7
 8003cac:	693a      	ldr	r2, [r7, #16]
 8003cae:	429a      	cmp	r2, r3
 8003cb0:	d001      	beq.n	8003cb6 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8003cb2:	2301      	movs	r3, #1
 8003cb4:	e000      	b.n	8003cb8 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8003cb6:	2300      	movs	r3, #0
}
 8003cb8:	4618      	mov	r0, r3
 8003cba:	3718      	adds	r7, #24
 8003cbc:	46bd      	mov	sp, r7
 8003cbe:	bd80      	pop	{r7, pc}
 8003cc0:	40021000 	.word	0x40021000
 8003cc4:	40022000 	.word	0x40022000

08003cc8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003cc8:	b580      	push	{r7, lr}
 8003cca:	b086      	sub	sp, #24
 8003ccc:	af00      	add	r7, sp, #0
 8003cce:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003cd0:	2300      	movs	r3, #0
 8003cd2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003cd4:	2300      	movs	r3, #0
 8003cd6:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d031      	beq.n	8003d48 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ce8:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003cec:	d01a      	beq.n	8003d24 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8003cee:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003cf2:	d814      	bhi.n	8003d1e <HAL_RCCEx_PeriphCLKConfig+0x56>
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d009      	beq.n	8003d0c <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003cf8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003cfc:	d10f      	bne.n	8003d1e <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8003cfe:	4b5d      	ldr	r3, [pc, #372]	; (8003e74 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003d00:	68db      	ldr	r3, [r3, #12]
 8003d02:	4a5c      	ldr	r2, [pc, #368]	; (8003e74 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003d04:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d08:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003d0a:	e00c      	b.n	8003d26 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	3304      	adds	r3, #4
 8003d10:	2100      	movs	r1, #0
 8003d12:	4618      	mov	r0, r3
 8003d14:	f000 f9de 	bl	80040d4 <RCCEx_PLLSAI1_Config>
 8003d18:	4603      	mov	r3, r0
 8003d1a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003d1c:	e003      	b.n	8003d26 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003d1e:	2301      	movs	r3, #1
 8003d20:	74fb      	strb	r3, [r7, #19]
      break;
 8003d22:	e000      	b.n	8003d26 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8003d24:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003d26:	7cfb      	ldrb	r3, [r7, #19]
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d10b      	bne.n	8003d44 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003d2c:	4b51      	ldr	r3, [pc, #324]	; (8003e74 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003d2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d32:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d3a:	494e      	ldr	r1, [pc, #312]	; (8003e74 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003d3c:	4313      	orrs	r3, r2
 8003d3e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003d42:	e001      	b.n	8003d48 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d44:	7cfb      	ldrb	r3, [r7, #19]
 8003d46:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	f000 809e 	beq.w	8003e92 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003d56:	2300      	movs	r3, #0
 8003d58:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003d5a:	4b46      	ldr	r3, [pc, #280]	; (8003e74 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003d5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d101      	bne.n	8003d6a <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8003d66:	2301      	movs	r3, #1
 8003d68:	e000      	b.n	8003d6c <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8003d6a:	2300      	movs	r3, #0
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d00d      	beq.n	8003d8c <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003d70:	4b40      	ldr	r3, [pc, #256]	; (8003e74 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003d72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d74:	4a3f      	ldr	r2, [pc, #252]	; (8003e74 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003d76:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d7a:	6593      	str	r3, [r2, #88]	; 0x58
 8003d7c:	4b3d      	ldr	r3, [pc, #244]	; (8003e74 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003d7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d80:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d84:	60bb      	str	r3, [r7, #8]
 8003d86:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003d88:	2301      	movs	r3, #1
 8003d8a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003d8c:	4b3a      	ldr	r3, [pc, #232]	; (8003e78 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	4a39      	ldr	r2, [pc, #228]	; (8003e78 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8003d92:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d96:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003d98:	f7fd fc2e 	bl	80015f8 <HAL_GetTick>
 8003d9c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003d9e:	e009      	b.n	8003db4 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003da0:	f7fd fc2a 	bl	80015f8 <HAL_GetTick>
 8003da4:	4602      	mov	r2, r0
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	1ad3      	subs	r3, r2, r3
 8003daa:	2b02      	cmp	r3, #2
 8003dac:	d902      	bls.n	8003db4 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8003dae:	2303      	movs	r3, #3
 8003db0:	74fb      	strb	r3, [r7, #19]
        break;
 8003db2:	e005      	b.n	8003dc0 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003db4:	4b30      	ldr	r3, [pc, #192]	; (8003e78 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d0ef      	beq.n	8003da0 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8003dc0:	7cfb      	ldrb	r3, [r7, #19]
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d15a      	bne.n	8003e7c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003dc6:	4b2b      	ldr	r3, [pc, #172]	; (8003e74 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003dc8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003dcc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003dd0:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003dd2:	697b      	ldr	r3, [r7, #20]
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d01e      	beq.n	8003e16 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ddc:	697a      	ldr	r2, [r7, #20]
 8003dde:	429a      	cmp	r2, r3
 8003de0:	d019      	beq.n	8003e16 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003de2:	4b24      	ldr	r3, [pc, #144]	; (8003e74 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003de4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003de8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003dec:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003dee:	4b21      	ldr	r3, [pc, #132]	; (8003e74 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003df0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003df4:	4a1f      	ldr	r2, [pc, #124]	; (8003e74 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003df6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003dfa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003dfe:	4b1d      	ldr	r3, [pc, #116]	; (8003e74 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003e00:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e04:	4a1b      	ldr	r2, [pc, #108]	; (8003e74 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003e06:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003e0a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003e0e:	4a19      	ldr	r2, [pc, #100]	; (8003e74 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003e10:	697b      	ldr	r3, [r7, #20]
 8003e12:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003e16:	697b      	ldr	r3, [r7, #20]
 8003e18:	f003 0301 	and.w	r3, r3, #1
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d016      	beq.n	8003e4e <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e20:	f7fd fbea 	bl	80015f8 <HAL_GetTick>
 8003e24:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003e26:	e00b      	b.n	8003e40 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e28:	f7fd fbe6 	bl	80015f8 <HAL_GetTick>
 8003e2c:	4602      	mov	r2, r0
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	1ad3      	subs	r3, r2, r3
 8003e32:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e36:	4293      	cmp	r3, r2
 8003e38:	d902      	bls.n	8003e40 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8003e3a:	2303      	movs	r3, #3
 8003e3c:	74fb      	strb	r3, [r7, #19]
            break;
 8003e3e:	e006      	b.n	8003e4e <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003e40:	4b0c      	ldr	r3, [pc, #48]	; (8003e74 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003e42:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e46:	f003 0302 	and.w	r3, r3, #2
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d0ec      	beq.n	8003e28 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8003e4e:	7cfb      	ldrb	r3, [r7, #19]
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d10b      	bne.n	8003e6c <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003e54:	4b07      	ldr	r3, [pc, #28]	; (8003e74 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003e56:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e5a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e62:	4904      	ldr	r1, [pc, #16]	; (8003e74 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003e64:	4313      	orrs	r3, r2
 8003e66:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003e6a:	e009      	b.n	8003e80 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003e6c:	7cfb      	ldrb	r3, [r7, #19]
 8003e6e:	74bb      	strb	r3, [r7, #18]
 8003e70:	e006      	b.n	8003e80 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8003e72:	bf00      	nop
 8003e74:	40021000 	.word	0x40021000
 8003e78:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e7c:	7cfb      	ldrb	r3, [r7, #19]
 8003e7e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003e80:	7c7b      	ldrb	r3, [r7, #17]
 8003e82:	2b01      	cmp	r3, #1
 8003e84:	d105      	bne.n	8003e92 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003e86:	4b8a      	ldr	r3, [pc, #552]	; (80040b0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003e88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e8a:	4a89      	ldr	r2, [pc, #548]	; (80040b0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003e8c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003e90:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	f003 0301 	and.w	r3, r3, #1
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d00a      	beq.n	8003eb4 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003e9e:	4b84      	ldr	r3, [pc, #528]	; (80040b0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003ea0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ea4:	f023 0203 	bic.w	r2, r3, #3
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	6a1b      	ldr	r3, [r3, #32]
 8003eac:	4980      	ldr	r1, [pc, #512]	; (80040b0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003eae:	4313      	orrs	r3, r2
 8003eb0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	f003 0302 	and.w	r3, r3, #2
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d00a      	beq.n	8003ed6 <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003ec0:	4b7b      	ldr	r3, [pc, #492]	; (80040b0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003ec2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ec6:	f023 020c 	bic.w	r2, r3, #12
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ece:	4978      	ldr	r1, [pc, #480]	; (80040b0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003ed0:	4313      	orrs	r3, r2
 8003ed2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	f003 0320 	and.w	r3, r3, #32
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d00a      	beq.n	8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003ee2:	4b73      	ldr	r3, [pc, #460]	; (80040b0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003ee4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ee8:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ef0:	496f      	ldr	r1, [pc, #444]	; (80040b0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003ef2:	4313      	orrs	r3, r2
 8003ef4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d00a      	beq.n	8003f1a <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003f04:	4b6a      	ldr	r3, [pc, #424]	; (80040b0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003f06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f0a:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f12:	4967      	ldr	r1, [pc, #412]	; (80040b0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003f14:	4313      	orrs	r3, r2
 8003f16:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d00a      	beq.n	8003f3c <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003f26:	4b62      	ldr	r3, [pc, #392]	; (80040b0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003f28:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f2c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f34:	495e      	ldr	r1, [pc, #376]	; (80040b0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003f36:	4313      	orrs	r3, r2
 8003f38:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d00a      	beq.n	8003f5e <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003f48:	4b59      	ldr	r3, [pc, #356]	; (80040b0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003f4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f4e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f56:	4956      	ldr	r1, [pc, #344]	; (80040b0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003f58:	4313      	orrs	r3, r2
 8003f5a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d00a      	beq.n	8003f80 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003f6a:	4b51      	ldr	r3, [pc, #324]	; (80040b0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003f6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f70:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f78:	494d      	ldr	r1, [pc, #308]	; (80040b0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003f7a:	4313      	orrs	r3, r2
 8003f7c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d028      	beq.n	8003fde <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003f8c:	4b48      	ldr	r3, [pc, #288]	; (80040b0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003f8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f92:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f9a:	4945      	ldr	r1, [pc, #276]	; (80040b0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003f9c:	4313      	orrs	r3, r2
 8003f9e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fa6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003faa:	d106      	bne.n	8003fba <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003fac:	4b40      	ldr	r3, [pc, #256]	; (80040b0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003fae:	68db      	ldr	r3, [r3, #12]
 8003fb0:	4a3f      	ldr	r2, [pc, #252]	; (80040b0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003fb2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003fb6:	60d3      	str	r3, [r2, #12]
 8003fb8:	e011      	b.n	8003fde <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fbe:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003fc2:	d10c      	bne.n	8003fde <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	3304      	adds	r3, #4
 8003fc8:	2101      	movs	r1, #1
 8003fca:	4618      	mov	r0, r3
 8003fcc:	f000 f882 	bl	80040d4 <RCCEx_PLLSAI1_Config>
 8003fd0:	4603      	mov	r3, r0
 8003fd2:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003fd4:	7cfb      	ldrb	r3, [r7, #19]
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d001      	beq.n	8003fde <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 8003fda:	7cfb      	ldrb	r3, [r7, #19]
 8003fdc:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d028      	beq.n	800403c <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003fea:	4b31      	ldr	r3, [pc, #196]	; (80040b0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003fec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ff0:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ff8:	492d      	ldr	r1, [pc, #180]	; (80040b0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003ffa:	4313      	orrs	r3, r2
 8003ffc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004004:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004008:	d106      	bne.n	8004018 <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800400a:	4b29      	ldr	r3, [pc, #164]	; (80040b0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800400c:	68db      	ldr	r3, [r3, #12]
 800400e:	4a28      	ldr	r2, [pc, #160]	; (80040b0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004010:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004014:	60d3      	str	r3, [r2, #12]
 8004016:	e011      	b.n	800403c <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800401c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004020:	d10c      	bne.n	800403c <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	3304      	adds	r3, #4
 8004026:	2101      	movs	r1, #1
 8004028:	4618      	mov	r0, r3
 800402a:	f000 f853 	bl	80040d4 <RCCEx_PLLSAI1_Config>
 800402e:	4603      	mov	r3, r0
 8004030:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004032:	7cfb      	ldrb	r3, [r7, #19]
 8004034:	2b00      	cmp	r3, #0
 8004036:	d001      	beq.n	800403c <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 8004038:	7cfb      	ldrb	r3, [r7, #19]
 800403a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004044:	2b00      	cmp	r3, #0
 8004046:	d01c      	beq.n	8004082 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004048:	4b19      	ldr	r3, [pc, #100]	; (80040b0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800404a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800404e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004056:	4916      	ldr	r1, [pc, #88]	; (80040b0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004058:	4313      	orrs	r3, r2
 800405a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004062:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004066:	d10c      	bne.n	8004082 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	3304      	adds	r3, #4
 800406c:	2102      	movs	r1, #2
 800406e:	4618      	mov	r0, r3
 8004070:	f000 f830 	bl	80040d4 <RCCEx_PLLSAI1_Config>
 8004074:	4603      	mov	r3, r0
 8004076:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004078:	7cfb      	ldrb	r3, [r7, #19]
 800407a:	2b00      	cmp	r3, #0
 800407c:	d001      	beq.n	8004082 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 800407e:	7cfb      	ldrb	r3, [r7, #19]
 8004080:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800408a:	2b00      	cmp	r3, #0
 800408c:	d00a      	beq.n	80040a4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800408e:	4b08      	ldr	r3, [pc, #32]	; (80040b0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004090:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004094:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800409c:	4904      	ldr	r1, [pc, #16]	; (80040b0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800409e:	4313      	orrs	r3, r2
 80040a0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80040a4:	7cbb      	ldrb	r3, [r7, #18]
}
 80040a6:	4618      	mov	r0, r3
 80040a8:	3718      	adds	r7, #24
 80040aa:	46bd      	mov	sp, r7
 80040ac:	bd80      	pop	{r7, pc}
 80040ae:	bf00      	nop
 80040b0:	40021000 	.word	0x40021000

080040b4 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 80040b4:	b480      	push	{r7}
 80040b6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 80040b8:	4b05      	ldr	r3, [pc, #20]	; (80040d0 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	4a04      	ldr	r2, [pc, #16]	; (80040d0 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80040be:	f043 0304 	orr.w	r3, r3, #4
 80040c2:	6013      	str	r3, [r2, #0]
}
 80040c4:	bf00      	nop
 80040c6:	46bd      	mov	sp, r7
 80040c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040cc:	4770      	bx	lr
 80040ce:	bf00      	nop
 80040d0:	40021000 	.word	0x40021000

080040d4 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80040d4:	b580      	push	{r7, lr}
 80040d6:	b084      	sub	sp, #16
 80040d8:	af00      	add	r7, sp, #0
 80040da:	6078      	str	r0, [r7, #4]
 80040dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80040de:	2300      	movs	r3, #0
 80040e0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80040e2:	4b74      	ldr	r3, [pc, #464]	; (80042b4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80040e4:	68db      	ldr	r3, [r3, #12]
 80040e6:	f003 0303 	and.w	r3, r3, #3
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d018      	beq.n	8004120 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80040ee:	4b71      	ldr	r3, [pc, #452]	; (80042b4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80040f0:	68db      	ldr	r3, [r3, #12]
 80040f2:	f003 0203 	and.w	r2, r3, #3
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	429a      	cmp	r2, r3
 80040fc:	d10d      	bne.n	800411a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
       ||
 8004102:	2b00      	cmp	r3, #0
 8004104:	d009      	beq.n	800411a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8004106:	4b6b      	ldr	r3, [pc, #428]	; (80042b4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004108:	68db      	ldr	r3, [r3, #12]
 800410a:	091b      	lsrs	r3, r3, #4
 800410c:	f003 0307 	and.w	r3, r3, #7
 8004110:	1c5a      	adds	r2, r3, #1
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	685b      	ldr	r3, [r3, #4]
       ||
 8004116:	429a      	cmp	r2, r3
 8004118:	d047      	beq.n	80041aa <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800411a:	2301      	movs	r3, #1
 800411c:	73fb      	strb	r3, [r7, #15]
 800411e:	e044      	b.n	80041aa <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	2b03      	cmp	r3, #3
 8004126:	d018      	beq.n	800415a <RCCEx_PLLSAI1_Config+0x86>
 8004128:	2b03      	cmp	r3, #3
 800412a:	d825      	bhi.n	8004178 <RCCEx_PLLSAI1_Config+0xa4>
 800412c:	2b01      	cmp	r3, #1
 800412e:	d002      	beq.n	8004136 <RCCEx_PLLSAI1_Config+0x62>
 8004130:	2b02      	cmp	r3, #2
 8004132:	d009      	beq.n	8004148 <RCCEx_PLLSAI1_Config+0x74>
 8004134:	e020      	b.n	8004178 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004136:	4b5f      	ldr	r3, [pc, #380]	; (80042b4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	f003 0302 	and.w	r3, r3, #2
 800413e:	2b00      	cmp	r3, #0
 8004140:	d11d      	bne.n	800417e <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8004142:	2301      	movs	r3, #1
 8004144:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004146:	e01a      	b.n	800417e <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004148:	4b5a      	ldr	r3, [pc, #360]	; (80042b4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004150:	2b00      	cmp	r3, #0
 8004152:	d116      	bne.n	8004182 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8004154:	2301      	movs	r3, #1
 8004156:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004158:	e013      	b.n	8004182 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800415a:	4b56      	ldr	r3, [pc, #344]	; (80042b4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004162:	2b00      	cmp	r3, #0
 8004164:	d10f      	bne.n	8004186 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004166:	4b53      	ldr	r3, [pc, #332]	; (80042b4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800416e:	2b00      	cmp	r3, #0
 8004170:	d109      	bne.n	8004186 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8004172:	2301      	movs	r3, #1
 8004174:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004176:	e006      	b.n	8004186 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004178:	2301      	movs	r3, #1
 800417a:	73fb      	strb	r3, [r7, #15]
      break;
 800417c:	e004      	b.n	8004188 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800417e:	bf00      	nop
 8004180:	e002      	b.n	8004188 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004182:	bf00      	nop
 8004184:	e000      	b.n	8004188 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004186:	bf00      	nop
    }

    if(status == HAL_OK)
 8004188:	7bfb      	ldrb	r3, [r7, #15]
 800418a:	2b00      	cmp	r3, #0
 800418c:	d10d      	bne.n	80041aa <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800418e:	4b49      	ldr	r3, [pc, #292]	; (80042b4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004190:	68db      	ldr	r3, [r3, #12]
 8004192:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	6819      	ldr	r1, [r3, #0]
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	685b      	ldr	r3, [r3, #4]
 800419e:	3b01      	subs	r3, #1
 80041a0:	011b      	lsls	r3, r3, #4
 80041a2:	430b      	orrs	r3, r1
 80041a4:	4943      	ldr	r1, [pc, #268]	; (80042b4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80041a6:	4313      	orrs	r3, r2
 80041a8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80041aa:	7bfb      	ldrb	r3, [r7, #15]
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d17c      	bne.n	80042aa <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80041b0:	4b40      	ldr	r3, [pc, #256]	; (80042b4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	4a3f      	ldr	r2, [pc, #252]	; (80042b4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80041b6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80041ba:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80041bc:	f7fd fa1c 	bl	80015f8 <HAL_GetTick>
 80041c0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80041c2:	e009      	b.n	80041d8 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80041c4:	f7fd fa18 	bl	80015f8 <HAL_GetTick>
 80041c8:	4602      	mov	r2, r0
 80041ca:	68bb      	ldr	r3, [r7, #8]
 80041cc:	1ad3      	subs	r3, r2, r3
 80041ce:	2b02      	cmp	r3, #2
 80041d0:	d902      	bls.n	80041d8 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80041d2:	2303      	movs	r3, #3
 80041d4:	73fb      	strb	r3, [r7, #15]
        break;
 80041d6:	e005      	b.n	80041e4 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80041d8:	4b36      	ldr	r3, [pc, #216]	; (80042b4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d1ef      	bne.n	80041c4 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80041e4:	7bfb      	ldrb	r3, [r7, #15]
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d15f      	bne.n	80042aa <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80041ea:	683b      	ldr	r3, [r7, #0]
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d110      	bne.n	8004212 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80041f0:	4b30      	ldr	r3, [pc, #192]	; (80042b4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80041f2:	691b      	ldr	r3, [r3, #16]
 80041f4:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 80041f8:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80041fc:	687a      	ldr	r2, [r7, #4]
 80041fe:	6892      	ldr	r2, [r2, #8]
 8004200:	0211      	lsls	r1, r2, #8
 8004202:	687a      	ldr	r2, [r7, #4]
 8004204:	68d2      	ldr	r2, [r2, #12]
 8004206:	06d2      	lsls	r2, r2, #27
 8004208:	430a      	orrs	r2, r1
 800420a:	492a      	ldr	r1, [pc, #168]	; (80042b4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800420c:	4313      	orrs	r3, r2
 800420e:	610b      	str	r3, [r1, #16]
 8004210:	e027      	b.n	8004262 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004212:	683b      	ldr	r3, [r7, #0]
 8004214:	2b01      	cmp	r3, #1
 8004216:	d112      	bne.n	800423e <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004218:	4b26      	ldr	r3, [pc, #152]	; (80042b4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800421a:	691b      	ldr	r3, [r3, #16]
 800421c:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8004220:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004224:	687a      	ldr	r2, [r7, #4]
 8004226:	6892      	ldr	r2, [r2, #8]
 8004228:	0211      	lsls	r1, r2, #8
 800422a:	687a      	ldr	r2, [r7, #4]
 800422c:	6912      	ldr	r2, [r2, #16]
 800422e:	0852      	lsrs	r2, r2, #1
 8004230:	3a01      	subs	r2, #1
 8004232:	0552      	lsls	r2, r2, #21
 8004234:	430a      	orrs	r2, r1
 8004236:	491f      	ldr	r1, [pc, #124]	; (80042b4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004238:	4313      	orrs	r3, r2
 800423a:	610b      	str	r3, [r1, #16]
 800423c:	e011      	b.n	8004262 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800423e:	4b1d      	ldr	r3, [pc, #116]	; (80042b4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004240:	691b      	ldr	r3, [r3, #16]
 8004242:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004246:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800424a:	687a      	ldr	r2, [r7, #4]
 800424c:	6892      	ldr	r2, [r2, #8]
 800424e:	0211      	lsls	r1, r2, #8
 8004250:	687a      	ldr	r2, [r7, #4]
 8004252:	6952      	ldr	r2, [r2, #20]
 8004254:	0852      	lsrs	r2, r2, #1
 8004256:	3a01      	subs	r2, #1
 8004258:	0652      	lsls	r2, r2, #25
 800425a:	430a      	orrs	r2, r1
 800425c:	4915      	ldr	r1, [pc, #84]	; (80042b4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800425e:	4313      	orrs	r3, r2
 8004260:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004262:	4b14      	ldr	r3, [pc, #80]	; (80042b4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	4a13      	ldr	r2, [pc, #76]	; (80042b4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004268:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800426c:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800426e:	f7fd f9c3 	bl	80015f8 <HAL_GetTick>
 8004272:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004274:	e009      	b.n	800428a <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004276:	f7fd f9bf 	bl	80015f8 <HAL_GetTick>
 800427a:	4602      	mov	r2, r0
 800427c:	68bb      	ldr	r3, [r7, #8]
 800427e:	1ad3      	subs	r3, r2, r3
 8004280:	2b02      	cmp	r3, #2
 8004282:	d902      	bls.n	800428a <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8004284:	2303      	movs	r3, #3
 8004286:	73fb      	strb	r3, [r7, #15]
          break;
 8004288:	e005      	b.n	8004296 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800428a:	4b0a      	ldr	r3, [pc, #40]	; (80042b4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004292:	2b00      	cmp	r3, #0
 8004294:	d0ef      	beq.n	8004276 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8004296:	7bfb      	ldrb	r3, [r7, #15]
 8004298:	2b00      	cmp	r3, #0
 800429a:	d106      	bne.n	80042aa <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800429c:	4b05      	ldr	r3, [pc, #20]	; (80042b4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800429e:	691a      	ldr	r2, [r3, #16]
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	699b      	ldr	r3, [r3, #24]
 80042a4:	4903      	ldr	r1, [pc, #12]	; (80042b4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80042a6:	4313      	orrs	r3, r2
 80042a8:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80042aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80042ac:	4618      	mov	r0, r3
 80042ae:	3710      	adds	r7, #16
 80042b0:	46bd      	mov	sp, r7
 80042b2:	bd80      	pop	{r7, pc}
 80042b4:	40021000 	.word	0x40021000

080042b8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80042b8:	b580      	push	{r7, lr}
 80042ba:	b084      	sub	sp, #16
 80042bc:	af00      	add	r7, sp, #0
 80042be:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d101      	bne.n	80042ca <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80042c6:	2301      	movs	r3, #1
 80042c8:	e095      	b.n	80043f6 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d108      	bne.n	80042e4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	685b      	ldr	r3, [r3, #4]
 80042d6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80042da:	d009      	beq.n	80042f0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	2200      	movs	r2, #0
 80042e0:	61da      	str	r2, [r3, #28]
 80042e2:	e005      	b.n	80042f0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	2200      	movs	r2, #0
 80042e8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	2200      	movs	r2, #0
 80042ee:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	2200      	movs	r2, #0
 80042f4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80042fc:	b2db      	uxtb	r3, r3
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d106      	bne.n	8004310 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	2200      	movs	r2, #0
 8004306:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800430a:	6878      	ldr	r0, [r7, #4]
 800430c:	f7fc feb2 	bl	8001074 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	2202      	movs	r2, #2
 8004314:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	681a      	ldr	r2, [r3, #0]
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004326:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	68db      	ldr	r3, [r3, #12]
 800432c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004330:	d902      	bls.n	8004338 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004332:	2300      	movs	r3, #0
 8004334:	60fb      	str	r3, [r7, #12]
 8004336:	e002      	b.n	800433e <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004338:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800433c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	68db      	ldr	r3, [r3, #12]
 8004342:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8004346:	d007      	beq.n	8004358 <HAL_SPI_Init+0xa0>
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	68db      	ldr	r3, [r3, #12]
 800434c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004350:	d002      	beq.n	8004358 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	2200      	movs	r2, #0
 8004356:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	685b      	ldr	r3, [r3, #4]
 800435c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	689b      	ldr	r3, [r3, #8]
 8004364:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004368:	431a      	orrs	r2, r3
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	691b      	ldr	r3, [r3, #16]
 800436e:	f003 0302 	and.w	r3, r3, #2
 8004372:	431a      	orrs	r2, r3
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	695b      	ldr	r3, [r3, #20]
 8004378:	f003 0301 	and.w	r3, r3, #1
 800437c:	431a      	orrs	r2, r3
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	699b      	ldr	r3, [r3, #24]
 8004382:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004386:	431a      	orrs	r2, r3
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	69db      	ldr	r3, [r3, #28]
 800438c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004390:	431a      	orrs	r2, r3
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	6a1b      	ldr	r3, [r3, #32]
 8004396:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800439a:	ea42 0103 	orr.w	r1, r2, r3
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043a2:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	430a      	orrs	r2, r1
 80043ac:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	699b      	ldr	r3, [r3, #24]
 80043b2:	0c1b      	lsrs	r3, r3, #16
 80043b4:	f003 0204 	and.w	r2, r3, #4
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043bc:	f003 0310 	and.w	r3, r3, #16
 80043c0:	431a      	orrs	r2, r3
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80043c6:	f003 0308 	and.w	r3, r3, #8
 80043ca:	431a      	orrs	r2, r3
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	68db      	ldr	r3, [r3, #12]
 80043d0:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80043d4:	ea42 0103 	orr.w	r1, r2, r3
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	430a      	orrs	r2, r1
 80043e4:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	2200      	movs	r2, #0
 80043ea:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	2201      	movs	r2, #1
 80043f0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80043f4:	2300      	movs	r3, #0
}
 80043f6:	4618      	mov	r0, r3
 80043f8:	3710      	adds	r7, #16
 80043fa:	46bd      	mov	sp, r7
 80043fc:	bd80      	pop	{r7, pc}

080043fe <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80043fe:	b580      	push	{r7, lr}
 8004400:	b088      	sub	sp, #32
 8004402:	af00      	add	r7, sp, #0
 8004404:	60f8      	str	r0, [r7, #12]
 8004406:	60b9      	str	r1, [r7, #8]
 8004408:	603b      	str	r3, [r7, #0]
 800440a:	4613      	mov	r3, r2
 800440c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800440e:	2300      	movs	r3, #0
 8004410:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004418:	2b01      	cmp	r3, #1
 800441a:	d101      	bne.n	8004420 <HAL_SPI_Transmit+0x22>
 800441c:	2302      	movs	r3, #2
 800441e:	e158      	b.n	80046d2 <HAL_SPI_Transmit+0x2d4>
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	2201      	movs	r2, #1
 8004424:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004428:	f7fd f8e6 	bl	80015f8 <HAL_GetTick>
 800442c:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800442e:	88fb      	ldrh	r3, [r7, #6]
 8004430:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004438:	b2db      	uxtb	r3, r3
 800443a:	2b01      	cmp	r3, #1
 800443c:	d002      	beq.n	8004444 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800443e:	2302      	movs	r3, #2
 8004440:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004442:	e13d      	b.n	80046c0 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 8004444:	68bb      	ldr	r3, [r7, #8]
 8004446:	2b00      	cmp	r3, #0
 8004448:	d002      	beq.n	8004450 <HAL_SPI_Transmit+0x52>
 800444a:	88fb      	ldrh	r3, [r7, #6]
 800444c:	2b00      	cmp	r3, #0
 800444e:	d102      	bne.n	8004456 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8004450:	2301      	movs	r3, #1
 8004452:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004454:	e134      	b.n	80046c0 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	2203      	movs	r2, #3
 800445a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	2200      	movs	r2, #0
 8004462:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	68ba      	ldr	r2, [r7, #8]
 8004468:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	88fa      	ldrh	r2, [r7, #6]
 800446e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	88fa      	ldrh	r2, [r7, #6]
 8004474:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	2200      	movs	r2, #0
 800447a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	2200      	movs	r2, #0
 8004480:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	2200      	movs	r2, #0
 8004488:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	2200      	movs	r2, #0
 8004490:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	2200      	movs	r2, #0
 8004496:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	689b      	ldr	r3, [r3, #8]
 800449c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80044a0:	d10f      	bne.n	80044c2 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	681a      	ldr	r2, [r3, #0]
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80044b0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	681a      	ldr	r2, [r3, #0]
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80044c0:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044cc:	2b40      	cmp	r3, #64	; 0x40
 80044ce:	d007      	beq.n	80044e0 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	681a      	ldr	r2, [r3, #0]
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80044de:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	68db      	ldr	r3, [r3, #12]
 80044e4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80044e8:	d94b      	bls.n	8004582 <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	685b      	ldr	r3, [r3, #4]
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d002      	beq.n	80044f8 <HAL_SPI_Transmit+0xfa>
 80044f2:	8afb      	ldrh	r3, [r7, #22]
 80044f4:	2b01      	cmp	r3, #1
 80044f6:	d13e      	bne.n	8004576 <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044fc:	881a      	ldrh	r2, [r3, #0]
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004508:	1c9a      	adds	r2, r3, #2
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004512:	b29b      	uxth	r3, r3
 8004514:	3b01      	subs	r3, #1
 8004516:	b29a      	uxth	r2, r3
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800451c:	e02b      	b.n	8004576 <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	689b      	ldr	r3, [r3, #8]
 8004524:	f003 0302 	and.w	r3, r3, #2
 8004528:	2b02      	cmp	r3, #2
 800452a:	d112      	bne.n	8004552 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004530:	881a      	ldrh	r2, [r3, #0]
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800453c:	1c9a      	adds	r2, r3, #2
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004546:	b29b      	uxth	r3, r3
 8004548:	3b01      	subs	r3, #1
 800454a:	b29a      	uxth	r2, r3
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004550:	e011      	b.n	8004576 <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004552:	f7fd f851 	bl	80015f8 <HAL_GetTick>
 8004556:	4602      	mov	r2, r0
 8004558:	69bb      	ldr	r3, [r7, #24]
 800455a:	1ad3      	subs	r3, r2, r3
 800455c:	683a      	ldr	r2, [r7, #0]
 800455e:	429a      	cmp	r2, r3
 8004560:	d803      	bhi.n	800456a <HAL_SPI_Transmit+0x16c>
 8004562:	683b      	ldr	r3, [r7, #0]
 8004564:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004568:	d102      	bne.n	8004570 <HAL_SPI_Transmit+0x172>
 800456a:	683b      	ldr	r3, [r7, #0]
 800456c:	2b00      	cmp	r3, #0
 800456e:	d102      	bne.n	8004576 <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8004570:	2303      	movs	r3, #3
 8004572:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004574:	e0a4      	b.n	80046c0 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800457a:	b29b      	uxth	r3, r3
 800457c:	2b00      	cmp	r3, #0
 800457e:	d1ce      	bne.n	800451e <HAL_SPI_Transmit+0x120>
 8004580:	e07c      	b.n	800467c <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	685b      	ldr	r3, [r3, #4]
 8004586:	2b00      	cmp	r3, #0
 8004588:	d002      	beq.n	8004590 <HAL_SPI_Transmit+0x192>
 800458a:	8afb      	ldrh	r3, [r7, #22]
 800458c:	2b01      	cmp	r3, #1
 800458e:	d170      	bne.n	8004672 <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004594:	b29b      	uxth	r3, r3
 8004596:	2b01      	cmp	r3, #1
 8004598:	d912      	bls.n	80045c0 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800459e:	881a      	ldrh	r2, [r3, #0]
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045aa:	1c9a      	adds	r2, r3, #2
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80045b4:	b29b      	uxth	r3, r3
 80045b6:	3b02      	subs	r3, #2
 80045b8:	b29a      	uxth	r2, r3
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	87da      	strh	r2, [r3, #62]	; 0x3e
 80045be:	e058      	b.n	8004672 <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	330c      	adds	r3, #12
 80045ca:	7812      	ldrb	r2, [r2, #0]
 80045cc:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045d2:	1c5a      	adds	r2, r3, #1
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80045dc:	b29b      	uxth	r3, r3
 80045de:	3b01      	subs	r3, #1
 80045e0:	b29a      	uxth	r2, r3
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 80045e6:	e044      	b.n	8004672 <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	689b      	ldr	r3, [r3, #8]
 80045ee:	f003 0302 	and.w	r3, r3, #2
 80045f2:	2b02      	cmp	r3, #2
 80045f4:	d12b      	bne.n	800464e <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80045fa:	b29b      	uxth	r3, r3
 80045fc:	2b01      	cmp	r3, #1
 80045fe:	d912      	bls.n	8004626 <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004604:	881a      	ldrh	r2, [r3, #0]
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004610:	1c9a      	adds	r2, r3, #2
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800461a:	b29b      	uxth	r3, r3
 800461c:	3b02      	subs	r3, #2
 800461e:	b29a      	uxth	r2, r3
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004624:	e025      	b.n	8004672 <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	330c      	adds	r3, #12
 8004630:	7812      	ldrb	r2, [r2, #0]
 8004632:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004638:	1c5a      	adds	r2, r3, #1
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004642:	b29b      	uxth	r3, r3
 8004644:	3b01      	subs	r3, #1
 8004646:	b29a      	uxth	r2, r3
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800464c:	e011      	b.n	8004672 <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800464e:	f7fc ffd3 	bl	80015f8 <HAL_GetTick>
 8004652:	4602      	mov	r2, r0
 8004654:	69bb      	ldr	r3, [r7, #24]
 8004656:	1ad3      	subs	r3, r2, r3
 8004658:	683a      	ldr	r2, [r7, #0]
 800465a:	429a      	cmp	r2, r3
 800465c:	d803      	bhi.n	8004666 <HAL_SPI_Transmit+0x268>
 800465e:	683b      	ldr	r3, [r7, #0]
 8004660:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004664:	d102      	bne.n	800466c <HAL_SPI_Transmit+0x26e>
 8004666:	683b      	ldr	r3, [r7, #0]
 8004668:	2b00      	cmp	r3, #0
 800466a:	d102      	bne.n	8004672 <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 800466c:	2303      	movs	r3, #3
 800466e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004670:	e026      	b.n	80046c0 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004676:	b29b      	uxth	r3, r3
 8004678:	2b00      	cmp	r3, #0
 800467a:	d1b5      	bne.n	80045e8 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800467c:	69ba      	ldr	r2, [r7, #24]
 800467e:	6839      	ldr	r1, [r7, #0]
 8004680:	68f8      	ldr	r0, [r7, #12]
 8004682:	f000 f949 	bl	8004918 <SPI_EndRxTxTransaction>
 8004686:	4603      	mov	r3, r0
 8004688:	2b00      	cmp	r3, #0
 800468a:	d002      	beq.n	8004692 <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	2220      	movs	r2, #32
 8004690:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	689b      	ldr	r3, [r3, #8]
 8004696:	2b00      	cmp	r3, #0
 8004698:	d10a      	bne.n	80046b0 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800469a:	2300      	movs	r3, #0
 800469c:	613b      	str	r3, [r7, #16]
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	68db      	ldr	r3, [r3, #12]
 80046a4:	613b      	str	r3, [r7, #16]
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	689b      	ldr	r3, [r3, #8]
 80046ac:	613b      	str	r3, [r7, #16]
 80046ae:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d002      	beq.n	80046be <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 80046b8:	2301      	movs	r3, #1
 80046ba:	77fb      	strb	r3, [r7, #31]
 80046bc:	e000      	b.n	80046c0 <HAL_SPI_Transmit+0x2c2>
  }

error:
 80046be:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	2201      	movs	r2, #1
 80046c4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	2200      	movs	r2, #0
 80046cc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80046d0:	7ffb      	ldrb	r3, [r7, #31]
}
 80046d2:	4618      	mov	r0, r3
 80046d4:	3720      	adds	r7, #32
 80046d6:	46bd      	mov	sp, r7
 80046d8:	bd80      	pop	{r7, pc}
	...

080046dc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80046dc:	b580      	push	{r7, lr}
 80046de:	b088      	sub	sp, #32
 80046e0:	af00      	add	r7, sp, #0
 80046e2:	60f8      	str	r0, [r7, #12]
 80046e4:	60b9      	str	r1, [r7, #8]
 80046e6:	603b      	str	r3, [r7, #0]
 80046e8:	4613      	mov	r3, r2
 80046ea:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80046ec:	f7fc ff84 	bl	80015f8 <HAL_GetTick>
 80046f0:	4602      	mov	r2, r0
 80046f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046f4:	1a9b      	subs	r3, r3, r2
 80046f6:	683a      	ldr	r2, [r7, #0]
 80046f8:	4413      	add	r3, r2
 80046fa:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80046fc:	f7fc ff7c 	bl	80015f8 <HAL_GetTick>
 8004700:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004702:	4b39      	ldr	r3, [pc, #228]	; (80047e8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	015b      	lsls	r3, r3, #5
 8004708:	0d1b      	lsrs	r3, r3, #20
 800470a:	69fa      	ldr	r2, [r7, #28]
 800470c:	fb02 f303 	mul.w	r3, r2, r3
 8004710:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004712:	e054      	b.n	80047be <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004714:	683b      	ldr	r3, [r7, #0]
 8004716:	f1b3 3fff 	cmp.w	r3, #4294967295
 800471a:	d050      	beq.n	80047be <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800471c:	f7fc ff6c 	bl	80015f8 <HAL_GetTick>
 8004720:	4602      	mov	r2, r0
 8004722:	69bb      	ldr	r3, [r7, #24]
 8004724:	1ad3      	subs	r3, r2, r3
 8004726:	69fa      	ldr	r2, [r7, #28]
 8004728:	429a      	cmp	r2, r3
 800472a:	d902      	bls.n	8004732 <SPI_WaitFlagStateUntilTimeout+0x56>
 800472c:	69fb      	ldr	r3, [r7, #28]
 800472e:	2b00      	cmp	r3, #0
 8004730:	d13d      	bne.n	80047ae <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	685a      	ldr	r2, [r3, #4]
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004740:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	685b      	ldr	r3, [r3, #4]
 8004746:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800474a:	d111      	bne.n	8004770 <SPI_WaitFlagStateUntilTimeout+0x94>
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	689b      	ldr	r3, [r3, #8]
 8004750:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004754:	d004      	beq.n	8004760 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	689b      	ldr	r3, [r3, #8]
 800475a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800475e:	d107      	bne.n	8004770 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	681a      	ldr	r2, [r3, #0]
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800476e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004774:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004778:	d10f      	bne.n	800479a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	681a      	ldr	r2, [r3, #0]
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004788:	601a      	str	r2, [r3, #0]
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	681a      	ldr	r2, [r3, #0]
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004798:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	2201      	movs	r2, #1
 800479e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	2200      	movs	r2, #0
 80047a6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80047aa:	2303      	movs	r3, #3
 80047ac:	e017      	b.n	80047de <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80047ae:	697b      	ldr	r3, [r7, #20]
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d101      	bne.n	80047b8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80047b4:	2300      	movs	r3, #0
 80047b6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80047b8:	697b      	ldr	r3, [r7, #20]
 80047ba:	3b01      	subs	r3, #1
 80047bc:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	689a      	ldr	r2, [r3, #8]
 80047c4:	68bb      	ldr	r3, [r7, #8]
 80047c6:	4013      	ands	r3, r2
 80047c8:	68ba      	ldr	r2, [r7, #8]
 80047ca:	429a      	cmp	r2, r3
 80047cc:	bf0c      	ite	eq
 80047ce:	2301      	moveq	r3, #1
 80047d0:	2300      	movne	r3, #0
 80047d2:	b2db      	uxtb	r3, r3
 80047d4:	461a      	mov	r2, r3
 80047d6:	79fb      	ldrb	r3, [r7, #7]
 80047d8:	429a      	cmp	r2, r3
 80047da:	d19b      	bne.n	8004714 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80047dc:	2300      	movs	r3, #0
}
 80047de:	4618      	mov	r0, r3
 80047e0:	3720      	adds	r7, #32
 80047e2:	46bd      	mov	sp, r7
 80047e4:	bd80      	pop	{r7, pc}
 80047e6:	bf00      	nop
 80047e8:	20000000 	.word	0x20000000

080047ec <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80047ec:	b580      	push	{r7, lr}
 80047ee:	b08a      	sub	sp, #40	; 0x28
 80047f0:	af00      	add	r7, sp, #0
 80047f2:	60f8      	str	r0, [r7, #12]
 80047f4:	60b9      	str	r1, [r7, #8]
 80047f6:	607a      	str	r2, [r7, #4]
 80047f8:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80047fa:	2300      	movs	r3, #0
 80047fc:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80047fe:	f7fc fefb 	bl	80015f8 <HAL_GetTick>
 8004802:	4602      	mov	r2, r0
 8004804:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004806:	1a9b      	subs	r3, r3, r2
 8004808:	683a      	ldr	r2, [r7, #0]
 800480a:	4413      	add	r3, r2
 800480c:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 800480e:	f7fc fef3 	bl	80015f8 <HAL_GetTick>
 8004812:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	330c      	adds	r3, #12
 800481a:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800481c:	4b3d      	ldr	r3, [pc, #244]	; (8004914 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800481e:	681a      	ldr	r2, [r3, #0]
 8004820:	4613      	mov	r3, r2
 8004822:	009b      	lsls	r3, r3, #2
 8004824:	4413      	add	r3, r2
 8004826:	00da      	lsls	r2, r3, #3
 8004828:	1ad3      	subs	r3, r2, r3
 800482a:	0d1b      	lsrs	r3, r3, #20
 800482c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800482e:	fb02 f303 	mul.w	r3, r2, r3
 8004832:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8004834:	e060      	b.n	80048f8 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8004836:	68bb      	ldr	r3, [r7, #8]
 8004838:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800483c:	d107      	bne.n	800484e <SPI_WaitFifoStateUntilTimeout+0x62>
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	2b00      	cmp	r3, #0
 8004842:	d104      	bne.n	800484e <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8004844:	69fb      	ldr	r3, [r7, #28]
 8004846:	781b      	ldrb	r3, [r3, #0]
 8004848:	b2db      	uxtb	r3, r3
 800484a:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800484c:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800484e:	683b      	ldr	r3, [r7, #0]
 8004850:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004854:	d050      	beq.n	80048f8 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004856:	f7fc fecf 	bl	80015f8 <HAL_GetTick>
 800485a:	4602      	mov	r2, r0
 800485c:	6a3b      	ldr	r3, [r7, #32]
 800485e:	1ad3      	subs	r3, r2, r3
 8004860:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004862:	429a      	cmp	r2, r3
 8004864:	d902      	bls.n	800486c <SPI_WaitFifoStateUntilTimeout+0x80>
 8004866:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004868:	2b00      	cmp	r3, #0
 800486a:	d13d      	bne.n	80048e8 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	685a      	ldr	r2, [r3, #4]
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800487a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	685b      	ldr	r3, [r3, #4]
 8004880:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004884:	d111      	bne.n	80048aa <SPI_WaitFifoStateUntilTimeout+0xbe>
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	689b      	ldr	r3, [r3, #8]
 800488a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800488e:	d004      	beq.n	800489a <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	689b      	ldr	r3, [r3, #8]
 8004894:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004898:	d107      	bne.n	80048aa <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	681a      	ldr	r2, [r3, #0]
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80048a8:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048ae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80048b2:	d10f      	bne.n	80048d4 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	681a      	ldr	r2, [r3, #0]
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80048c2:	601a      	str	r2, [r3, #0]
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	681a      	ldr	r2, [r3, #0]
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80048d2:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	2201      	movs	r2, #1
 80048d8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	2200      	movs	r2, #0
 80048e0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80048e4:	2303      	movs	r3, #3
 80048e6:	e010      	b.n	800490a <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80048e8:	69bb      	ldr	r3, [r7, #24]
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d101      	bne.n	80048f2 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 80048ee:	2300      	movs	r3, #0
 80048f0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 80048f2:	69bb      	ldr	r3, [r7, #24]
 80048f4:	3b01      	subs	r3, #1
 80048f6:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	689a      	ldr	r2, [r3, #8]
 80048fe:	68bb      	ldr	r3, [r7, #8]
 8004900:	4013      	ands	r3, r2
 8004902:	687a      	ldr	r2, [r7, #4]
 8004904:	429a      	cmp	r2, r3
 8004906:	d196      	bne.n	8004836 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8004908:	2300      	movs	r3, #0
}
 800490a:	4618      	mov	r0, r3
 800490c:	3728      	adds	r7, #40	; 0x28
 800490e:	46bd      	mov	sp, r7
 8004910:	bd80      	pop	{r7, pc}
 8004912:	bf00      	nop
 8004914:	20000000 	.word	0x20000000

08004918 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004918:	b580      	push	{r7, lr}
 800491a:	b086      	sub	sp, #24
 800491c:	af02      	add	r7, sp, #8
 800491e:	60f8      	str	r0, [r7, #12]
 8004920:	60b9      	str	r1, [r7, #8]
 8004922:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	9300      	str	r3, [sp, #0]
 8004928:	68bb      	ldr	r3, [r7, #8]
 800492a:	2200      	movs	r2, #0
 800492c:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8004930:	68f8      	ldr	r0, [r7, #12]
 8004932:	f7ff ff5b 	bl	80047ec <SPI_WaitFifoStateUntilTimeout>
 8004936:	4603      	mov	r3, r0
 8004938:	2b00      	cmp	r3, #0
 800493a:	d007      	beq.n	800494c <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004940:	f043 0220 	orr.w	r2, r3, #32
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004948:	2303      	movs	r3, #3
 800494a:	e027      	b.n	800499c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	9300      	str	r3, [sp, #0]
 8004950:	68bb      	ldr	r3, [r7, #8]
 8004952:	2200      	movs	r2, #0
 8004954:	2180      	movs	r1, #128	; 0x80
 8004956:	68f8      	ldr	r0, [r7, #12]
 8004958:	f7ff fec0 	bl	80046dc <SPI_WaitFlagStateUntilTimeout>
 800495c:	4603      	mov	r3, r0
 800495e:	2b00      	cmp	r3, #0
 8004960:	d007      	beq.n	8004972 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004966:	f043 0220 	orr.w	r2, r3, #32
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800496e:	2303      	movs	r3, #3
 8004970:	e014      	b.n	800499c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	9300      	str	r3, [sp, #0]
 8004976:	68bb      	ldr	r3, [r7, #8]
 8004978:	2200      	movs	r2, #0
 800497a:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800497e:	68f8      	ldr	r0, [r7, #12]
 8004980:	f7ff ff34 	bl	80047ec <SPI_WaitFifoStateUntilTimeout>
 8004984:	4603      	mov	r3, r0
 8004986:	2b00      	cmp	r3, #0
 8004988:	d007      	beq.n	800499a <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800498e:	f043 0220 	orr.w	r2, r3, #32
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004996:	2303      	movs	r3, #3
 8004998:	e000      	b.n	800499c <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800499a:	2300      	movs	r3, #0
}
 800499c:	4618      	mov	r0, r3
 800499e:	3710      	adds	r7, #16
 80049a0:	46bd      	mov	sp, r7
 80049a2:	bd80      	pop	{r7, pc}

080049a4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80049a4:	b580      	push	{r7, lr}
 80049a6:	b082      	sub	sp, #8
 80049a8:	af00      	add	r7, sp, #0
 80049aa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d101      	bne.n	80049b6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80049b2:	2301      	movs	r3, #1
 80049b4:	e040      	b.n	8004a38 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d106      	bne.n	80049cc <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	2200      	movs	r2, #0
 80049c2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80049c6:	6878      	ldr	r0, [r7, #4]
 80049c8:	f7fc fc3a 	bl	8001240 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	2224      	movs	r2, #36	; 0x24
 80049d0:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	681a      	ldr	r2, [r3, #0]
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	f022 0201 	bic.w	r2, r2, #1
 80049e0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80049e2:	6878      	ldr	r0, [r7, #4]
 80049e4:	f000 f82c 	bl	8004a40 <UART_SetConfig>
 80049e8:	4603      	mov	r3, r0
 80049ea:	2b01      	cmp	r3, #1
 80049ec:	d101      	bne.n	80049f2 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80049ee:	2301      	movs	r3, #1
 80049f0:	e022      	b.n	8004a38 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d002      	beq.n	8004a00 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80049fa:	6878      	ldr	r0, [r7, #4]
 80049fc:	f000 fa4c 	bl	8004e98 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	685a      	ldr	r2, [r3, #4]
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004a0e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	689a      	ldr	r2, [r3, #8]
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004a1e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	681a      	ldr	r2, [r3, #0]
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	f042 0201 	orr.w	r2, r2, #1
 8004a2e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004a30:	6878      	ldr	r0, [r7, #4]
 8004a32:	f000 fad3 	bl	8004fdc <UART_CheckIdleState>
 8004a36:	4603      	mov	r3, r0
}
 8004a38:	4618      	mov	r0, r3
 8004a3a:	3708      	adds	r7, #8
 8004a3c:	46bd      	mov	sp, r7
 8004a3e:	bd80      	pop	{r7, pc}

08004a40 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004a40:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004a44:	b08a      	sub	sp, #40	; 0x28
 8004a46:	af00      	add	r7, sp, #0
 8004a48:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004a4a:	2300      	movs	r3, #0
 8004a4c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	689a      	ldr	r2, [r3, #8]
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	691b      	ldr	r3, [r3, #16]
 8004a58:	431a      	orrs	r2, r3
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	695b      	ldr	r3, [r3, #20]
 8004a5e:	431a      	orrs	r2, r3
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	69db      	ldr	r3, [r3, #28]
 8004a64:	4313      	orrs	r3, r2
 8004a66:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	681a      	ldr	r2, [r3, #0]
 8004a6e:	4bb4      	ldr	r3, [pc, #720]	; (8004d40 <UART_SetConfig+0x300>)
 8004a70:	4013      	ands	r3, r2
 8004a72:	68fa      	ldr	r2, [r7, #12]
 8004a74:	6812      	ldr	r2, [r2, #0]
 8004a76:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004a78:	430b      	orrs	r3, r1
 8004a7a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	685b      	ldr	r3, [r3, #4]
 8004a82:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	68da      	ldr	r2, [r3, #12]
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	430a      	orrs	r2, r1
 8004a90:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	699b      	ldr	r3, [r3, #24]
 8004a96:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	4aa9      	ldr	r2, [pc, #676]	; (8004d44 <UART_SetConfig+0x304>)
 8004a9e:	4293      	cmp	r3, r2
 8004aa0:	d004      	beq.n	8004aac <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	6a1b      	ldr	r3, [r3, #32]
 8004aa6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004aa8:	4313      	orrs	r3, r2
 8004aaa:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	689b      	ldr	r3, [r3, #8]
 8004ab2:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004abc:	430a      	orrs	r2, r1
 8004abe:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	4aa0      	ldr	r2, [pc, #640]	; (8004d48 <UART_SetConfig+0x308>)
 8004ac6:	4293      	cmp	r3, r2
 8004ac8:	d126      	bne.n	8004b18 <UART_SetConfig+0xd8>
 8004aca:	4ba0      	ldr	r3, [pc, #640]	; (8004d4c <UART_SetConfig+0x30c>)
 8004acc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ad0:	f003 0303 	and.w	r3, r3, #3
 8004ad4:	2b03      	cmp	r3, #3
 8004ad6:	d81b      	bhi.n	8004b10 <UART_SetConfig+0xd0>
 8004ad8:	a201      	add	r2, pc, #4	; (adr r2, 8004ae0 <UART_SetConfig+0xa0>)
 8004ada:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ade:	bf00      	nop
 8004ae0:	08004af1 	.word	0x08004af1
 8004ae4:	08004b01 	.word	0x08004b01
 8004ae8:	08004af9 	.word	0x08004af9
 8004aec:	08004b09 	.word	0x08004b09
 8004af0:	2301      	movs	r3, #1
 8004af2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004af6:	e080      	b.n	8004bfa <UART_SetConfig+0x1ba>
 8004af8:	2302      	movs	r3, #2
 8004afa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004afe:	e07c      	b.n	8004bfa <UART_SetConfig+0x1ba>
 8004b00:	2304      	movs	r3, #4
 8004b02:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004b06:	e078      	b.n	8004bfa <UART_SetConfig+0x1ba>
 8004b08:	2308      	movs	r3, #8
 8004b0a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004b0e:	e074      	b.n	8004bfa <UART_SetConfig+0x1ba>
 8004b10:	2310      	movs	r3, #16
 8004b12:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004b16:	e070      	b.n	8004bfa <UART_SetConfig+0x1ba>
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	4a8c      	ldr	r2, [pc, #560]	; (8004d50 <UART_SetConfig+0x310>)
 8004b1e:	4293      	cmp	r3, r2
 8004b20:	d138      	bne.n	8004b94 <UART_SetConfig+0x154>
 8004b22:	4b8a      	ldr	r3, [pc, #552]	; (8004d4c <UART_SetConfig+0x30c>)
 8004b24:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b28:	f003 030c 	and.w	r3, r3, #12
 8004b2c:	2b0c      	cmp	r3, #12
 8004b2e:	d82d      	bhi.n	8004b8c <UART_SetConfig+0x14c>
 8004b30:	a201      	add	r2, pc, #4	; (adr r2, 8004b38 <UART_SetConfig+0xf8>)
 8004b32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b36:	bf00      	nop
 8004b38:	08004b6d 	.word	0x08004b6d
 8004b3c:	08004b8d 	.word	0x08004b8d
 8004b40:	08004b8d 	.word	0x08004b8d
 8004b44:	08004b8d 	.word	0x08004b8d
 8004b48:	08004b7d 	.word	0x08004b7d
 8004b4c:	08004b8d 	.word	0x08004b8d
 8004b50:	08004b8d 	.word	0x08004b8d
 8004b54:	08004b8d 	.word	0x08004b8d
 8004b58:	08004b75 	.word	0x08004b75
 8004b5c:	08004b8d 	.word	0x08004b8d
 8004b60:	08004b8d 	.word	0x08004b8d
 8004b64:	08004b8d 	.word	0x08004b8d
 8004b68:	08004b85 	.word	0x08004b85
 8004b6c:	2300      	movs	r3, #0
 8004b6e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004b72:	e042      	b.n	8004bfa <UART_SetConfig+0x1ba>
 8004b74:	2302      	movs	r3, #2
 8004b76:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004b7a:	e03e      	b.n	8004bfa <UART_SetConfig+0x1ba>
 8004b7c:	2304      	movs	r3, #4
 8004b7e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004b82:	e03a      	b.n	8004bfa <UART_SetConfig+0x1ba>
 8004b84:	2308      	movs	r3, #8
 8004b86:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004b8a:	e036      	b.n	8004bfa <UART_SetConfig+0x1ba>
 8004b8c:	2310      	movs	r3, #16
 8004b8e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004b92:	e032      	b.n	8004bfa <UART_SetConfig+0x1ba>
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	4a6a      	ldr	r2, [pc, #424]	; (8004d44 <UART_SetConfig+0x304>)
 8004b9a:	4293      	cmp	r3, r2
 8004b9c:	d12a      	bne.n	8004bf4 <UART_SetConfig+0x1b4>
 8004b9e:	4b6b      	ldr	r3, [pc, #428]	; (8004d4c <UART_SetConfig+0x30c>)
 8004ba0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ba4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004ba8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004bac:	d01a      	beq.n	8004be4 <UART_SetConfig+0x1a4>
 8004bae:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004bb2:	d81b      	bhi.n	8004bec <UART_SetConfig+0x1ac>
 8004bb4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004bb8:	d00c      	beq.n	8004bd4 <UART_SetConfig+0x194>
 8004bba:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004bbe:	d815      	bhi.n	8004bec <UART_SetConfig+0x1ac>
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d003      	beq.n	8004bcc <UART_SetConfig+0x18c>
 8004bc4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004bc8:	d008      	beq.n	8004bdc <UART_SetConfig+0x19c>
 8004bca:	e00f      	b.n	8004bec <UART_SetConfig+0x1ac>
 8004bcc:	2300      	movs	r3, #0
 8004bce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004bd2:	e012      	b.n	8004bfa <UART_SetConfig+0x1ba>
 8004bd4:	2302      	movs	r3, #2
 8004bd6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004bda:	e00e      	b.n	8004bfa <UART_SetConfig+0x1ba>
 8004bdc:	2304      	movs	r3, #4
 8004bde:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004be2:	e00a      	b.n	8004bfa <UART_SetConfig+0x1ba>
 8004be4:	2308      	movs	r3, #8
 8004be6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004bea:	e006      	b.n	8004bfa <UART_SetConfig+0x1ba>
 8004bec:	2310      	movs	r3, #16
 8004bee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004bf2:	e002      	b.n	8004bfa <UART_SetConfig+0x1ba>
 8004bf4:	2310      	movs	r3, #16
 8004bf6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	4a51      	ldr	r2, [pc, #324]	; (8004d44 <UART_SetConfig+0x304>)
 8004c00:	4293      	cmp	r3, r2
 8004c02:	d17a      	bne.n	8004cfa <UART_SetConfig+0x2ba>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004c04:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004c08:	2b08      	cmp	r3, #8
 8004c0a:	d824      	bhi.n	8004c56 <UART_SetConfig+0x216>
 8004c0c:	a201      	add	r2, pc, #4	; (adr r2, 8004c14 <UART_SetConfig+0x1d4>)
 8004c0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c12:	bf00      	nop
 8004c14:	08004c39 	.word	0x08004c39
 8004c18:	08004c57 	.word	0x08004c57
 8004c1c:	08004c41 	.word	0x08004c41
 8004c20:	08004c57 	.word	0x08004c57
 8004c24:	08004c47 	.word	0x08004c47
 8004c28:	08004c57 	.word	0x08004c57
 8004c2c:	08004c57 	.word	0x08004c57
 8004c30:	08004c57 	.word	0x08004c57
 8004c34:	08004c4f 	.word	0x08004c4f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004c38:	f7fe ffba 	bl	8003bb0 <HAL_RCC_GetPCLK1Freq>
 8004c3c:	61f8      	str	r0, [r7, #28]
        break;
 8004c3e:	e010      	b.n	8004c62 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004c40:	4b44      	ldr	r3, [pc, #272]	; (8004d54 <UART_SetConfig+0x314>)
 8004c42:	61fb      	str	r3, [r7, #28]
        break;
 8004c44:	e00d      	b.n	8004c62 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004c46:	f7fe ff1b 	bl	8003a80 <HAL_RCC_GetSysClockFreq>
 8004c4a:	61f8      	str	r0, [r7, #28]
        break;
 8004c4c:	e009      	b.n	8004c62 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004c4e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004c52:	61fb      	str	r3, [r7, #28]
        break;
 8004c54:	e005      	b.n	8004c62 <UART_SetConfig+0x222>
      default:
        pclk = 0U;
 8004c56:	2300      	movs	r3, #0
 8004c58:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004c5a:	2301      	movs	r3, #1
 8004c5c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004c60:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004c62:	69fb      	ldr	r3, [r7, #28]
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	f000 8107 	beq.w	8004e78 <UART_SetConfig+0x438>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	685a      	ldr	r2, [r3, #4]
 8004c6e:	4613      	mov	r3, r2
 8004c70:	005b      	lsls	r3, r3, #1
 8004c72:	4413      	add	r3, r2
 8004c74:	69fa      	ldr	r2, [r7, #28]
 8004c76:	429a      	cmp	r2, r3
 8004c78:	d305      	bcc.n	8004c86 <UART_SetConfig+0x246>
          (pclk > (4096U * huart->Init.BaudRate)))
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	685b      	ldr	r3, [r3, #4]
 8004c7e:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004c80:	69fa      	ldr	r2, [r7, #28]
 8004c82:	429a      	cmp	r2, r3
 8004c84:	d903      	bls.n	8004c8e <UART_SetConfig+0x24e>
      {
        ret = HAL_ERROR;
 8004c86:	2301      	movs	r3, #1
 8004c88:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004c8c:	e0f4      	b.n	8004e78 <UART_SetConfig+0x438>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8004c8e:	69fb      	ldr	r3, [r7, #28]
 8004c90:	2200      	movs	r2, #0
 8004c92:	461c      	mov	r4, r3
 8004c94:	4615      	mov	r5, r2
 8004c96:	f04f 0200 	mov.w	r2, #0
 8004c9a:	f04f 0300 	mov.w	r3, #0
 8004c9e:	022b      	lsls	r3, r5, #8
 8004ca0:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8004ca4:	0222      	lsls	r2, r4, #8
 8004ca6:	68f9      	ldr	r1, [r7, #12]
 8004ca8:	6849      	ldr	r1, [r1, #4]
 8004caa:	0849      	lsrs	r1, r1, #1
 8004cac:	2000      	movs	r0, #0
 8004cae:	4688      	mov	r8, r1
 8004cb0:	4681      	mov	r9, r0
 8004cb2:	eb12 0a08 	adds.w	sl, r2, r8
 8004cb6:	eb43 0b09 	adc.w	fp, r3, r9
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	685b      	ldr	r3, [r3, #4]
 8004cbe:	2200      	movs	r2, #0
 8004cc0:	603b      	str	r3, [r7, #0]
 8004cc2:	607a      	str	r2, [r7, #4]
 8004cc4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004cc8:	4650      	mov	r0, sl
 8004cca:	4659      	mov	r1, fp
 8004ccc:	f7fb fad0 	bl	8000270 <__aeabi_uldivmod>
 8004cd0:	4602      	mov	r2, r0
 8004cd2:	460b      	mov	r3, r1
 8004cd4:	4613      	mov	r3, r2
 8004cd6:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004cd8:	69bb      	ldr	r3, [r7, #24]
 8004cda:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004cde:	d308      	bcc.n	8004cf2 <UART_SetConfig+0x2b2>
 8004ce0:	69bb      	ldr	r3, [r7, #24]
 8004ce2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004ce6:	d204      	bcs.n	8004cf2 <UART_SetConfig+0x2b2>
        {
          huart->Instance->BRR = usartdiv;
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	69ba      	ldr	r2, [r7, #24]
 8004cee:	60da      	str	r2, [r3, #12]
 8004cf0:	e0c2      	b.n	8004e78 <UART_SetConfig+0x438>
        }
        else
        {
          ret = HAL_ERROR;
 8004cf2:	2301      	movs	r3, #1
 8004cf4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004cf8:	e0be      	b.n	8004e78 <UART_SetConfig+0x438>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	69db      	ldr	r3, [r3, #28]
 8004cfe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004d02:	d16a      	bne.n	8004dda <UART_SetConfig+0x39a>
  {
    switch (clocksource)
 8004d04:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004d08:	2b08      	cmp	r3, #8
 8004d0a:	d834      	bhi.n	8004d76 <UART_SetConfig+0x336>
 8004d0c:	a201      	add	r2, pc, #4	; (adr r2, 8004d14 <UART_SetConfig+0x2d4>)
 8004d0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d12:	bf00      	nop
 8004d14:	08004d39 	.word	0x08004d39
 8004d18:	08004d59 	.word	0x08004d59
 8004d1c:	08004d61 	.word	0x08004d61
 8004d20:	08004d77 	.word	0x08004d77
 8004d24:	08004d67 	.word	0x08004d67
 8004d28:	08004d77 	.word	0x08004d77
 8004d2c:	08004d77 	.word	0x08004d77
 8004d30:	08004d77 	.word	0x08004d77
 8004d34:	08004d6f 	.word	0x08004d6f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004d38:	f7fe ff3a 	bl	8003bb0 <HAL_RCC_GetPCLK1Freq>
 8004d3c:	61f8      	str	r0, [r7, #28]
        break;
 8004d3e:	e020      	b.n	8004d82 <UART_SetConfig+0x342>
 8004d40:	efff69f3 	.word	0xefff69f3
 8004d44:	40008000 	.word	0x40008000
 8004d48:	40013800 	.word	0x40013800
 8004d4c:	40021000 	.word	0x40021000
 8004d50:	40004400 	.word	0x40004400
 8004d54:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004d58:	f7fe ff40 	bl	8003bdc <HAL_RCC_GetPCLK2Freq>
 8004d5c:	61f8      	str	r0, [r7, #28]
        break;
 8004d5e:	e010      	b.n	8004d82 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004d60:	4b4c      	ldr	r3, [pc, #304]	; (8004e94 <UART_SetConfig+0x454>)
 8004d62:	61fb      	str	r3, [r7, #28]
        break;
 8004d64:	e00d      	b.n	8004d82 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004d66:	f7fe fe8b 	bl	8003a80 <HAL_RCC_GetSysClockFreq>
 8004d6a:	61f8      	str	r0, [r7, #28]
        break;
 8004d6c:	e009      	b.n	8004d82 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004d6e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004d72:	61fb      	str	r3, [r7, #28]
        break;
 8004d74:	e005      	b.n	8004d82 <UART_SetConfig+0x342>
      default:
        pclk = 0U;
 8004d76:	2300      	movs	r3, #0
 8004d78:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004d7a:	2301      	movs	r3, #1
 8004d7c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004d80:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004d82:	69fb      	ldr	r3, [r7, #28]
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d077      	beq.n	8004e78 <UART_SetConfig+0x438>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004d88:	69fb      	ldr	r3, [r7, #28]
 8004d8a:	005a      	lsls	r2, r3, #1
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	685b      	ldr	r3, [r3, #4]
 8004d90:	085b      	lsrs	r3, r3, #1
 8004d92:	441a      	add	r2, r3
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	685b      	ldr	r3, [r3, #4]
 8004d98:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d9c:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004d9e:	69bb      	ldr	r3, [r7, #24]
 8004da0:	2b0f      	cmp	r3, #15
 8004da2:	d916      	bls.n	8004dd2 <UART_SetConfig+0x392>
 8004da4:	69bb      	ldr	r3, [r7, #24]
 8004da6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004daa:	d212      	bcs.n	8004dd2 <UART_SetConfig+0x392>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004dac:	69bb      	ldr	r3, [r7, #24]
 8004dae:	b29b      	uxth	r3, r3
 8004db0:	f023 030f 	bic.w	r3, r3, #15
 8004db4:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004db6:	69bb      	ldr	r3, [r7, #24]
 8004db8:	085b      	lsrs	r3, r3, #1
 8004dba:	b29b      	uxth	r3, r3
 8004dbc:	f003 0307 	and.w	r3, r3, #7
 8004dc0:	b29a      	uxth	r2, r3
 8004dc2:	8afb      	ldrh	r3, [r7, #22]
 8004dc4:	4313      	orrs	r3, r2
 8004dc6:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	8afa      	ldrh	r2, [r7, #22]
 8004dce:	60da      	str	r2, [r3, #12]
 8004dd0:	e052      	b.n	8004e78 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 8004dd2:	2301      	movs	r3, #1
 8004dd4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004dd8:	e04e      	b.n	8004e78 <UART_SetConfig+0x438>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004dda:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004dde:	2b08      	cmp	r3, #8
 8004de0:	d827      	bhi.n	8004e32 <UART_SetConfig+0x3f2>
 8004de2:	a201      	add	r2, pc, #4	; (adr r2, 8004de8 <UART_SetConfig+0x3a8>)
 8004de4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004de8:	08004e0d 	.word	0x08004e0d
 8004dec:	08004e15 	.word	0x08004e15
 8004df0:	08004e1d 	.word	0x08004e1d
 8004df4:	08004e33 	.word	0x08004e33
 8004df8:	08004e23 	.word	0x08004e23
 8004dfc:	08004e33 	.word	0x08004e33
 8004e00:	08004e33 	.word	0x08004e33
 8004e04:	08004e33 	.word	0x08004e33
 8004e08:	08004e2b 	.word	0x08004e2b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004e0c:	f7fe fed0 	bl	8003bb0 <HAL_RCC_GetPCLK1Freq>
 8004e10:	61f8      	str	r0, [r7, #28]
        break;
 8004e12:	e014      	b.n	8004e3e <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004e14:	f7fe fee2 	bl	8003bdc <HAL_RCC_GetPCLK2Freq>
 8004e18:	61f8      	str	r0, [r7, #28]
        break;
 8004e1a:	e010      	b.n	8004e3e <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004e1c:	4b1d      	ldr	r3, [pc, #116]	; (8004e94 <UART_SetConfig+0x454>)
 8004e1e:	61fb      	str	r3, [r7, #28]
        break;
 8004e20:	e00d      	b.n	8004e3e <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004e22:	f7fe fe2d 	bl	8003a80 <HAL_RCC_GetSysClockFreq>
 8004e26:	61f8      	str	r0, [r7, #28]
        break;
 8004e28:	e009      	b.n	8004e3e <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004e2a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004e2e:	61fb      	str	r3, [r7, #28]
        break;
 8004e30:	e005      	b.n	8004e3e <UART_SetConfig+0x3fe>
      default:
        pclk = 0U;
 8004e32:	2300      	movs	r3, #0
 8004e34:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004e36:	2301      	movs	r3, #1
 8004e38:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004e3c:	bf00      	nop
    }

    if (pclk != 0U)
 8004e3e:	69fb      	ldr	r3, [r7, #28]
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d019      	beq.n	8004e78 <UART_SetConfig+0x438>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	685b      	ldr	r3, [r3, #4]
 8004e48:	085a      	lsrs	r2, r3, #1
 8004e4a:	69fb      	ldr	r3, [r7, #28]
 8004e4c:	441a      	add	r2, r3
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	685b      	ldr	r3, [r3, #4]
 8004e52:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e56:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004e58:	69bb      	ldr	r3, [r7, #24]
 8004e5a:	2b0f      	cmp	r3, #15
 8004e5c:	d909      	bls.n	8004e72 <UART_SetConfig+0x432>
 8004e5e:	69bb      	ldr	r3, [r7, #24]
 8004e60:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004e64:	d205      	bcs.n	8004e72 <UART_SetConfig+0x432>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004e66:	69bb      	ldr	r3, [r7, #24]
 8004e68:	b29a      	uxth	r2, r3
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	60da      	str	r2, [r3, #12]
 8004e70:	e002      	b.n	8004e78 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 8004e72:	2301      	movs	r3, #1
 8004e74:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	2200      	movs	r2, #0
 8004e7c:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	2200      	movs	r2, #0
 8004e82:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8004e84:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8004e88:	4618      	mov	r0, r3
 8004e8a:	3728      	adds	r7, #40	; 0x28
 8004e8c:	46bd      	mov	sp, r7
 8004e8e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004e92:	bf00      	nop
 8004e94:	00f42400 	.word	0x00f42400

08004e98 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004e98:	b480      	push	{r7}
 8004e9a:	b083      	sub	sp, #12
 8004e9c:	af00      	add	r7, sp, #0
 8004e9e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ea4:	f003 0301 	and.w	r3, r3, #1
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d00a      	beq.n	8004ec2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	685b      	ldr	r3, [r3, #4]
 8004eb2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	430a      	orrs	r2, r1
 8004ec0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ec6:	f003 0302 	and.w	r3, r3, #2
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d00a      	beq.n	8004ee4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	685b      	ldr	r3, [r3, #4]
 8004ed4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	430a      	orrs	r2, r1
 8004ee2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ee8:	f003 0304 	and.w	r3, r3, #4
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d00a      	beq.n	8004f06 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	685b      	ldr	r3, [r3, #4]
 8004ef6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	430a      	orrs	r2, r1
 8004f04:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f0a:	f003 0308 	and.w	r3, r3, #8
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d00a      	beq.n	8004f28 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	685b      	ldr	r3, [r3, #4]
 8004f18:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	430a      	orrs	r2, r1
 8004f26:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f2c:	f003 0310 	and.w	r3, r3, #16
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d00a      	beq.n	8004f4a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	689b      	ldr	r3, [r3, #8]
 8004f3a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	430a      	orrs	r2, r1
 8004f48:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f4e:	f003 0320 	and.w	r3, r3, #32
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d00a      	beq.n	8004f6c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	689b      	ldr	r3, [r3, #8]
 8004f5c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	430a      	orrs	r2, r1
 8004f6a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d01a      	beq.n	8004fae <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	685b      	ldr	r3, [r3, #4]
 8004f7e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	430a      	orrs	r2, r1
 8004f8c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f92:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004f96:	d10a      	bne.n	8004fae <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	685b      	ldr	r3, [r3, #4]
 8004f9e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	430a      	orrs	r2, r1
 8004fac:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fb2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d00a      	beq.n	8004fd0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	685b      	ldr	r3, [r3, #4]
 8004fc0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	430a      	orrs	r2, r1
 8004fce:	605a      	str	r2, [r3, #4]
  }
}
 8004fd0:	bf00      	nop
 8004fd2:	370c      	adds	r7, #12
 8004fd4:	46bd      	mov	sp, r7
 8004fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fda:	4770      	bx	lr

08004fdc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004fdc:	b580      	push	{r7, lr}
 8004fde:	b086      	sub	sp, #24
 8004fe0:	af02      	add	r7, sp, #8
 8004fe2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	2200      	movs	r2, #0
 8004fe8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004fec:	f7fc fb04 	bl	80015f8 <HAL_GetTick>
 8004ff0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	f003 0308 	and.w	r3, r3, #8
 8004ffc:	2b08      	cmp	r3, #8
 8004ffe:	d10e      	bne.n	800501e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005000:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005004:	9300      	str	r3, [sp, #0]
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	2200      	movs	r2, #0
 800500a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800500e:	6878      	ldr	r0, [r7, #4]
 8005010:	f000 f82d 	bl	800506e <UART_WaitOnFlagUntilTimeout>
 8005014:	4603      	mov	r3, r0
 8005016:	2b00      	cmp	r3, #0
 8005018:	d001      	beq.n	800501e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800501a:	2303      	movs	r3, #3
 800501c:	e023      	b.n	8005066 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	f003 0304 	and.w	r3, r3, #4
 8005028:	2b04      	cmp	r3, #4
 800502a:	d10e      	bne.n	800504a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800502c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005030:	9300      	str	r3, [sp, #0]
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	2200      	movs	r2, #0
 8005036:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800503a:	6878      	ldr	r0, [r7, #4]
 800503c:	f000 f817 	bl	800506e <UART_WaitOnFlagUntilTimeout>
 8005040:	4603      	mov	r3, r0
 8005042:	2b00      	cmp	r3, #0
 8005044:	d001      	beq.n	800504a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005046:	2303      	movs	r3, #3
 8005048:	e00d      	b.n	8005066 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	2220      	movs	r2, #32
 800504e:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	2220      	movs	r2, #32
 8005054:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	2200      	movs	r2, #0
 800505a:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	2200      	movs	r2, #0
 8005060:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8005064:	2300      	movs	r3, #0
}
 8005066:	4618      	mov	r0, r3
 8005068:	3710      	adds	r7, #16
 800506a:	46bd      	mov	sp, r7
 800506c:	bd80      	pop	{r7, pc}

0800506e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800506e:	b580      	push	{r7, lr}
 8005070:	b09c      	sub	sp, #112	; 0x70
 8005072:	af00      	add	r7, sp, #0
 8005074:	60f8      	str	r0, [r7, #12]
 8005076:	60b9      	str	r1, [r7, #8]
 8005078:	603b      	str	r3, [r7, #0]
 800507a:	4613      	mov	r3, r2
 800507c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800507e:	e0a5      	b.n	80051cc <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005080:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005082:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005086:	f000 80a1 	beq.w	80051cc <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800508a:	f7fc fab5 	bl	80015f8 <HAL_GetTick>
 800508e:	4602      	mov	r2, r0
 8005090:	683b      	ldr	r3, [r7, #0]
 8005092:	1ad3      	subs	r3, r2, r3
 8005094:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8005096:	429a      	cmp	r2, r3
 8005098:	d302      	bcc.n	80050a0 <UART_WaitOnFlagUntilTimeout+0x32>
 800509a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800509c:	2b00      	cmp	r3, #0
 800509e:	d13e      	bne.n	800511e <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050a6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80050a8:	e853 3f00 	ldrex	r3, [r3]
 80050ac:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80050ae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80050b0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80050b4:	667b      	str	r3, [r7, #100]	; 0x64
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	461a      	mov	r2, r3
 80050bc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80050be:	65fb      	str	r3, [r7, #92]	; 0x5c
 80050c0:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050c2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80050c4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80050c6:	e841 2300 	strex	r3, r2, [r1]
 80050ca:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80050cc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d1e6      	bne.n	80050a0 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	3308      	adds	r3, #8
 80050d8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80050dc:	e853 3f00 	ldrex	r3, [r3]
 80050e0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80050e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050e4:	f023 0301 	bic.w	r3, r3, #1
 80050e8:	663b      	str	r3, [r7, #96]	; 0x60
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	3308      	adds	r3, #8
 80050f0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80050f2:	64ba      	str	r2, [r7, #72]	; 0x48
 80050f4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050f6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80050f8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80050fa:	e841 2300 	strex	r3, r2, [r1]
 80050fe:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005100:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005102:	2b00      	cmp	r3, #0
 8005104:	d1e5      	bne.n	80050d2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	2220      	movs	r2, #32
 800510a:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	2220      	movs	r2, #32
 8005110:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	2200      	movs	r2, #0
 8005116:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800511a:	2303      	movs	r3, #3
 800511c:	e067      	b.n	80051ee <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	f003 0304 	and.w	r3, r3, #4
 8005128:	2b00      	cmp	r3, #0
 800512a:	d04f      	beq.n	80051cc <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	69db      	ldr	r3, [r3, #28]
 8005132:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005136:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800513a:	d147      	bne.n	80051cc <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005144:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800514c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800514e:	e853 3f00 	ldrex	r3, [r3]
 8005152:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005154:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005156:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800515a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	461a      	mov	r2, r3
 8005162:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005164:	637b      	str	r3, [r7, #52]	; 0x34
 8005166:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005168:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800516a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800516c:	e841 2300 	strex	r3, r2, [r1]
 8005170:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005172:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005174:	2b00      	cmp	r3, #0
 8005176:	d1e6      	bne.n	8005146 <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	3308      	adds	r3, #8
 800517e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005180:	697b      	ldr	r3, [r7, #20]
 8005182:	e853 3f00 	ldrex	r3, [r3]
 8005186:	613b      	str	r3, [r7, #16]
   return(result);
 8005188:	693b      	ldr	r3, [r7, #16]
 800518a:	f023 0301 	bic.w	r3, r3, #1
 800518e:	66bb      	str	r3, [r7, #104]	; 0x68
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	3308      	adds	r3, #8
 8005196:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005198:	623a      	str	r2, [r7, #32]
 800519a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800519c:	69f9      	ldr	r1, [r7, #28]
 800519e:	6a3a      	ldr	r2, [r7, #32]
 80051a0:	e841 2300 	strex	r3, r2, [r1]
 80051a4:	61bb      	str	r3, [r7, #24]
   return(result);
 80051a6:	69bb      	ldr	r3, [r7, #24]
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d1e5      	bne.n	8005178 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	2220      	movs	r2, #32
 80051b0:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	2220      	movs	r2, #32
 80051b6:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	2220      	movs	r2, #32
 80051bc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	2200      	movs	r2, #0
 80051c4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80051c8:	2303      	movs	r3, #3
 80051ca:	e010      	b.n	80051ee <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	69da      	ldr	r2, [r3, #28]
 80051d2:	68bb      	ldr	r3, [r7, #8]
 80051d4:	4013      	ands	r3, r2
 80051d6:	68ba      	ldr	r2, [r7, #8]
 80051d8:	429a      	cmp	r2, r3
 80051da:	bf0c      	ite	eq
 80051dc:	2301      	moveq	r3, #1
 80051de:	2300      	movne	r3, #0
 80051e0:	b2db      	uxtb	r3, r3
 80051e2:	461a      	mov	r2, r3
 80051e4:	79fb      	ldrb	r3, [r7, #7]
 80051e6:	429a      	cmp	r2, r3
 80051e8:	f43f af4a 	beq.w	8005080 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80051ec:	2300      	movs	r3, #0
}
 80051ee:	4618      	mov	r0, r3
 80051f0:	3770      	adds	r7, #112	; 0x70
 80051f2:	46bd      	mov	sp, r7
 80051f4:	bd80      	pop	{r7, pc}
	...

080051f8 <__errno>:
 80051f8:	4b01      	ldr	r3, [pc, #4]	; (8005200 <__errno+0x8>)
 80051fa:	6818      	ldr	r0, [r3, #0]
 80051fc:	4770      	bx	lr
 80051fe:	bf00      	nop
 8005200:	2000000c 	.word	0x2000000c

08005204 <__libc_init_array>:
 8005204:	b570      	push	{r4, r5, r6, lr}
 8005206:	4d0d      	ldr	r5, [pc, #52]	; (800523c <__libc_init_array+0x38>)
 8005208:	4c0d      	ldr	r4, [pc, #52]	; (8005240 <__libc_init_array+0x3c>)
 800520a:	1b64      	subs	r4, r4, r5
 800520c:	10a4      	asrs	r4, r4, #2
 800520e:	2600      	movs	r6, #0
 8005210:	42a6      	cmp	r6, r4
 8005212:	d109      	bne.n	8005228 <__libc_init_array+0x24>
 8005214:	4d0b      	ldr	r5, [pc, #44]	; (8005244 <__libc_init_array+0x40>)
 8005216:	4c0c      	ldr	r4, [pc, #48]	; (8005248 <__libc_init_array+0x44>)
 8005218:	f001 f88e 	bl	8006338 <_init>
 800521c:	1b64      	subs	r4, r4, r5
 800521e:	10a4      	asrs	r4, r4, #2
 8005220:	2600      	movs	r6, #0
 8005222:	42a6      	cmp	r6, r4
 8005224:	d105      	bne.n	8005232 <__libc_init_array+0x2e>
 8005226:	bd70      	pop	{r4, r5, r6, pc}
 8005228:	f855 3b04 	ldr.w	r3, [r5], #4
 800522c:	4798      	blx	r3
 800522e:	3601      	adds	r6, #1
 8005230:	e7ee      	b.n	8005210 <__libc_init_array+0xc>
 8005232:	f855 3b04 	ldr.w	r3, [r5], #4
 8005236:	4798      	blx	r3
 8005238:	3601      	adds	r6, #1
 800523a:	e7f2      	b.n	8005222 <__libc_init_array+0x1e>
 800523c:	08006f60 	.word	0x08006f60
 8005240:	08006f60 	.word	0x08006f60
 8005244:	08006f60 	.word	0x08006f60
 8005248:	08006f64 	.word	0x08006f64

0800524c <memset>:
 800524c:	4402      	add	r2, r0
 800524e:	4603      	mov	r3, r0
 8005250:	4293      	cmp	r3, r2
 8005252:	d100      	bne.n	8005256 <memset+0xa>
 8005254:	4770      	bx	lr
 8005256:	f803 1b01 	strb.w	r1, [r3], #1
 800525a:	e7f9      	b.n	8005250 <memset+0x4>

0800525c <_puts_r>:
 800525c:	b570      	push	{r4, r5, r6, lr}
 800525e:	460e      	mov	r6, r1
 8005260:	4605      	mov	r5, r0
 8005262:	b118      	cbz	r0, 800526c <_puts_r+0x10>
 8005264:	6983      	ldr	r3, [r0, #24]
 8005266:	b90b      	cbnz	r3, 800526c <_puts_r+0x10>
 8005268:	f000 fa68 	bl	800573c <__sinit>
 800526c:	69ab      	ldr	r3, [r5, #24]
 800526e:	68ac      	ldr	r4, [r5, #8]
 8005270:	b913      	cbnz	r3, 8005278 <_puts_r+0x1c>
 8005272:	4628      	mov	r0, r5
 8005274:	f000 fa62 	bl	800573c <__sinit>
 8005278:	4b2c      	ldr	r3, [pc, #176]	; (800532c <_puts_r+0xd0>)
 800527a:	429c      	cmp	r4, r3
 800527c:	d120      	bne.n	80052c0 <_puts_r+0x64>
 800527e:	686c      	ldr	r4, [r5, #4]
 8005280:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005282:	07db      	lsls	r3, r3, #31
 8005284:	d405      	bmi.n	8005292 <_puts_r+0x36>
 8005286:	89a3      	ldrh	r3, [r4, #12]
 8005288:	0598      	lsls	r0, r3, #22
 800528a:	d402      	bmi.n	8005292 <_puts_r+0x36>
 800528c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800528e:	f000 faf3 	bl	8005878 <__retarget_lock_acquire_recursive>
 8005292:	89a3      	ldrh	r3, [r4, #12]
 8005294:	0719      	lsls	r1, r3, #28
 8005296:	d51d      	bpl.n	80052d4 <_puts_r+0x78>
 8005298:	6923      	ldr	r3, [r4, #16]
 800529a:	b1db      	cbz	r3, 80052d4 <_puts_r+0x78>
 800529c:	3e01      	subs	r6, #1
 800529e:	68a3      	ldr	r3, [r4, #8]
 80052a0:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80052a4:	3b01      	subs	r3, #1
 80052a6:	60a3      	str	r3, [r4, #8]
 80052a8:	bb39      	cbnz	r1, 80052fa <_puts_r+0x9e>
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	da38      	bge.n	8005320 <_puts_r+0xc4>
 80052ae:	4622      	mov	r2, r4
 80052b0:	210a      	movs	r1, #10
 80052b2:	4628      	mov	r0, r5
 80052b4:	f000 f868 	bl	8005388 <__swbuf_r>
 80052b8:	3001      	adds	r0, #1
 80052ba:	d011      	beq.n	80052e0 <_puts_r+0x84>
 80052bc:	250a      	movs	r5, #10
 80052be:	e011      	b.n	80052e4 <_puts_r+0x88>
 80052c0:	4b1b      	ldr	r3, [pc, #108]	; (8005330 <_puts_r+0xd4>)
 80052c2:	429c      	cmp	r4, r3
 80052c4:	d101      	bne.n	80052ca <_puts_r+0x6e>
 80052c6:	68ac      	ldr	r4, [r5, #8]
 80052c8:	e7da      	b.n	8005280 <_puts_r+0x24>
 80052ca:	4b1a      	ldr	r3, [pc, #104]	; (8005334 <_puts_r+0xd8>)
 80052cc:	429c      	cmp	r4, r3
 80052ce:	bf08      	it	eq
 80052d0:	68ec      	ldreq	r4, [r5, #12]
 80052d2:	e7d5      	b.n	8005280 <_puts_r+0x24>
 80052d4:	4621      	mov	r1, r4
 80052d6:	4628      	mov	r0, r5
 80052d8:	f000 f8a8 	bl	800542c <__swsetup_r>
 80052dc:	2800      	cmp	r0, #0
 80052de:	d0dd      	beq.n	800529c <_puts_r+0x40>
 80052e0:	f04f 35ff 	mov.w	r5, #4294967295
 80052e4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80052e6:	07da      	lsls	r2, r3, #31
 80052e8:	d405      	bmi.n	80052f6 <_puts_r+0x9a>
 80052ea:	89a3      	ldrh	r3, [r4, #12]
 80052ec:	059b      	lsls	r3, r3, #22
 80052ee:	d402      	bmi.n	80052f6 <_puts_r+0x9a>
 80052f0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80052f2:	f000 fac2 	bl	800587a <__retarget_lock_release_recursive>
 80052f6:	4628      	mov	r0, r5
 80052f8:	bd70      	pop	{r4, r5, r6, pc}
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	da04      	bge.n	8005308 <_puts_r+0xac>
 80052fe:	69a2      	ldr	r2, [r4, #24]
 8005300:	429a      	cmp	r2, r3
 8005302:	dc06      	bgt.n	8005312 <_puts_r+0xb6>
 8005304:	290a      	cmp	r1, #10
 8005306:	d004      	beq.n	8005312 <_puts_r+0xb6>
 8005308:	6823      	ldr	r3, [r4, #0]
 800530a:	1c5a      	adds	r2, r3, #1
 800530c:	6022      	str	r2, [r4, #0]
 800530e:	7019      	strb	r1, [r3, #0]
 8005310:	e7c5      	b.n	800529e <_puts_r+0x42>
 8005312:	4622      	mov	r2, r4
 8005314:	4628      	mov	r0, r5
 8005316:	f000 f837 	bl	8005388 <__swbuf_r>
 800531a:	3001      	adds	r0, #1
 800531c:	d1bf      	bne.n	800529e <_puts_r+0x42>
 800531e:	e7df      	b.n	80052e0 <_puts_r+0x84>
 8005320:	6823      	ldr	r3, [r4, #0]
 8005322:	250a      	movs	r5, #10
 8005324:	1c5a      	adds	r2, r3, #1
 8005326:	6022      	str	r2, [r4, #0]
 8005328:	701d      	strb	r5, [r3, #0]
 800532a:	e7db      	b.n	80052e4 <_puts_r+0x88>
 800532c:	08006ee4 	.word	0x08006ee4
 8005330:	08006f04 	.word	0x08006f04
 8005334:	08006ec4 	.word	0x08006ec4

08005338 <puts>:
 8005338:	4b02      	ldr	r3, [pc, #8]	; (8005344 <puts+0xc>)
 800533a:	4601      	mov	r1, r0
 800533c:	6818      	ldr	r0, [r3, #0]
 800533e:	f7ff bf8d 	b.w	800525c <_puts_r>
 8005342:	bf00      	nop
 8005344:	2000000c 	.word	0x2000000c

08005348 <siprintf>:
 8005348:	b40e      	push	{r1, r2, r3}
 800534a:	b500      	push	{lr}
 800534c:	b09c      	sub	sp, #112	; 0x70
 800534e:	ab1d      	add	r3, sp, #116	; 0x74
 8005350:	9002      	str	r0, [sp, #8]
 8005352:	9006      	str	r0, [sp, #24]
 8005354:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005358:	4809      	ldr	r0, [pc, #36]	; (8005380 <siprintf+0x38>)
 800535a:	9107      	str	r1, [sp, #28]
 800535c:	9104      	str	r1, [sp, #16]
 800535e:	4909      	ldr	r1, [pc, #36]	; (8005384 <siprintf+0x3c>)
 8005360:	f853 2b04 	ldr.w	r2, [r3], #4
 8005364:	9105      	str	r1, [sp, #20]
 8005366:	6800      	ldr	r0, [r0, #0]
 8005368:	9301      	str	r3, [sp, #4]
 800536a:	a902      	add	r1, sp, #8
 800536c:	f000 fc28 	bl	8005bc0 <_svfiprintf_r>
 8005370:	9b02      	ldr	r3, [sp, #8]
 8005372:	2200      	movs	r2, #0
 8005374:	701a      	strb	r2, [r3, #0]
 8005376:	b01c      	add	sp, #112	; 0x70
 8005378:	f85d eb04 	ldr.w	lr, [sp], #4
 800537c:	b003      	add	sp, #12
 800537e:	4770      	bx	lr
 8005380:	2000000c 	.word	0x2000000c
 8005384:	ffff0208 	.word	0xffff0208

08005388 <__swbuf_r>:
 8005388:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800538a:	460e      	mov	r6, r1
 800538c:	4614      	mov	r4, r2
 800538e:	4605      	mov	r5, r0
 8005390:	b118      	cbz	r0, 800539a <__swbuf_r+0x12>
 8005392:	6983      	ldr	r3, [r0, #24]
 8005394:	b90b      	cbnz	r3, 800539a <__swbuf_r+0x12>
 8005396:	f000 f9d1 	bl	800573c <__sinit>
 800539a:	4b21      	ldr	r3, [pc, #132]	; (8005420 <__swbuf_r+0x98>)
 800539c:	429c      	cmp	r4, r3
 800539e:	d12b      	bne.n	80053f8 <__swbuf_r+0x70>
 80053a0:	686c      	ldr	r4, [r5, #4]
 80053a2:	69a3      	ldr	r3, [r4, #24]
 80053a4:	60a3      	str	r3, [r4, #8]
 80053a6:	89a3      	ldrh	r3, [r4, #12]
 80053a8:	071a      	lsls	r2, r3, #28
 80053aa:	d52f      	bpl.n	800540c <__swbuf_r+0x84>
 80053ac:	6923      	ldr	r3, [r4, #16]
 80053ae:	b36b      	cbz	r3, 800540c <__swbuf_r+0x84>
 80053b0:	6923      	ldr	r3, [r4, #16]
 80053b2:	6820      	ldr	r0, [r4, #0]
 80053b4:	1ac0      	subs	r0, r0, r3
 80053b6:	6963      	ldr	r3, [r4, #20]
 80053b8:	b2f6      	uxtb	r6, r6
 80053ba:	4283      	cmp	r3, r0
 80053bc:	4637      	mov	r7, r6
 80053be:	dc04      	bgt.n	80053ca <__swbuf_r+0x42>
 80053c0:	4621      	mov	r1, r4
 80053c2:	4628      	mov	r0, r5
 80053c4:	f000 f926 	bl	8005614 <_fflush_r>
 80053c8:	bb30      	cbnz	r0, 8005418 <__swbuf_r+0x90>
 80053ca:	68a3      	ldr	r3, [r4, #8]
 80053cc:	3b01      	subs	r3, #1
 80053ce:	60a3      	str	r3, [r4, #8]
 80053d0:	6823      	ldr	r3, [r4, #0]
 80053d2:	1c5a      	adds	r2, r3, #1
 80053d4:	6022      	str	r2, [r4, #0]
 80053d6:	701e      	strb	r6, [r3, #0]
 80053d8:	6963      	ldr	r3, [r4, #20]
 80053da:	3001      	adds	r0, #1
 80053dc:	4283      	cmp	r3, r0
 80053de:	d004      	beq.n	80053ea <__swbuf_r+0x62>
 80053e0:	89a3      	ldrh	r3, [r4, #12]
 80053e2:	07db      	lsls	r3, r3, #31
 80053e4:	d506      	bpl.n	80053f4 <__swbuf_r+0x6c>
 80053e6:	2e0a      	cmp	r6, #10
 80053e8:	d104      	bne.n	80053f4 <__swbuf_r+0x6c>
 80053ea:	4621      	mov	r1, r4
 80053ec:	4628      	mov	r0, r5
 80053ee:	f000 f911 	bl	8005614 <_fflush_r>
 80053f2:	b988      	cbnz	r0, 8005418 <__swbuf_r+0x90>
 80053f4:	4638      	mov	r0, r7
 80053f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80053f8:	4b0a      	ldr	r3, [pc, #40]	; (8005424 <__swbuf_r+0x9c>)
 80053fa:	429c      	cmp	r4, r3
 80053fc:	d101      	bne.n	8005402 <__swbuf_r+0x7a>
 80053fe:	68ac      	ldr	r4, [r5, #8]
 8005400:	e7cf      	b.n	80053a2 <__swbuf_r+0x1a>
 8005402:	4b09      	ldr	r3, [pc, #36]	; (8005428 <__swbuf_r+0xa0>)
 8005404:	429c      	cmp	r4, r3
 8005406:	bf08      	it	eq
 8005408:	68ec      	ldreq	r4, [r5, #12]
 800540a:	e7ca      	b.n	80053a2 <__swbuf_r+0x1a>
 800540c:	4621      	mov	r1, r4
 800540e:	4628      	mov	r0, r5
 8005410:	f000 f80c 	bl	800542c <__swsetup_r>
 8005414:	2800      	cmp	r0, #0
 8005416:	d0cb      	beq.n	80053b0 <__swbuf_r+0x28>
 8005418:	f04f 37ff 	mov.w	r7, #4294967295
 800541c:	e7ea      	b.n	80053f4 <__swbuf_r+0x6c>
 800541e:	bf00      	nop
 8005420:	08006ee4 	.word	0x08006ee4
 8005424:	08006f04 	.word	0x08006f04
 8005428:	08006ec4 	.word	0x08006ec4

0800542c <__swsetup_r>:
 800542c:	4b32      	ldr	r3, [pc, #200]	; (80054f8 <__swsetup_r+0xcc>)
 800542e:	b570      	push	{r4, r5, r6, lr}
 8005430:	681d      	ldr	r5, [r3, #0]
 8005432:	4606      	mov	r6, r0
 8005434:	460c      	mov	r4, r1
 8005436:	b125      	cbz	r5, 8005442 <__swsetup_r+0x16>
 8005438:	69ab      	ldr	r3, [r5, #24]
 800543a:	b913      	cbnz	r3, 8005442 <__swsetup_r+0x16>
 800543c:	4628      	mov	r0, r5
 800543e:	f000 f97d 	bl	800573c <__sinit>
 8005442:	4b2e      	ldr	r3, [pc, #184]	; (80054fc <__swsetup_r+0xd0>)
 8005444:	429c      	cmp	r4, r3
 8005446:	d10f      	bne.n	8005468 <__swsetup_r+0x3c>
 8005448:	686c      	ldr	r4, [r5, #4]
 800544a:	89a3      	ldrh	r3, [r4, #12]
 800544c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005450:	0719      	lsls	r1, r3, #28
 8005452:	d42c      	bmi.n	80054ae <__swsetup_r+0x82>
 8005454:	06dd      	lsls	r5, r3, #27
 8005456:	d411      	bmi.n	800547c <__swsetup_r+0x50>
 8005458:	2309      	movs	r3, #9
 800545a:	6033      	str	r3, [r6, #0]
 800545c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005460:	81a3      	strh	r3, [r4, #12]
 8005462:	f04f 30ff 	mov.w	r0, #4294967295
 8005466:	e03e      	b.n	80054e6 <__swsetup_r+0xba>
 8005468:	4b25      	ldr	r3, [pc, #148]	; (8005500 <__swsetup_r+0xd4>)
 800546a:	429c      	cmp	r4, r3
 800546c:	d101      	bne.n	8005472 <__swsetup_r+0x46>
 800546e:	68ac      	ldr	r4, [r5, #8]
 8005470:	e7eb      	b.n	800544a <__swsetup_r+0x1e>
 8005472:	4b24      	ldr	r3, [pc, #144]	; (8005504 <__swsetup_r+0xd8>)
 8005474:	429c      	cmp	r4, r3
 8005476:	bf08      	it	eq
 8005478:	68ec      	ldreq	r4, [r5, #12]
 800547a:	e7e6      	b.n	800544a <__swsetup_r+0x1e>
 800547c:	0758      	lsls	r0, r3, #29
 800547e:	d512      	bpl.n	80054a6 <__swsetup_r+0x7a>
 8005480:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005482:	b141      	cbz	r1, 8005496 <__swsetup_r+0x6a>
 8005484:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005488:	4299      	cmp	r1, r3
 800548a:	d002      	beq.n	8005492 <__swsetup_r+0x66>
 800548c:	4630      	mov	r0, r6
 800548e:	f000 fa5b 	bl	8005948 <_free_r>
 8005492:	2300      	movs	r3, #0
 8005494:	6363      	str	r3, [r4, #52]	; 0x34
 8005496:	89a3      	ldrh	r3, [r4, #12]
 8005498:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800549c:	81a3      	strh	r3, [r4, #12]
 800549e:	2300      	movs	r3, #0
 80054a0:	6063      	str	r3, [r4, #4]
 80054a2:	6923      	ldr	r3, [r4, #16]
 80054a4:	6023      	str	r3, [r4, #0]
 80054a6:	89a3      	ldrh	r3, [r4, #12]
 80054a8:	f043 0308 	orr.w	r3, r3, #8
 80054ac:	81a3      	strh	r3, [r4, #12]
 80054ae:	6923      	ldr	r3, [r4, #16]
 80054b0:	b94b      	cbnz	r3, 80054c6 <__swsetup_r+0x9a>
 80054b2:	89a3      	ldrh	r3, [r4, #12]
 80054b4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80054b8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80054bc:	d003      	beq.n	80054c6 <__swsetup_r+0x9a>
 80054be:	4621      	mov	r1, r4
 80054c0:	4630      	mov	r0, r6
 80054c2:	f000 fa01 	bl	80058c8 <__smakebuf_r>
 80054c6:	89a0      	ldrh	r0, [r4, #12]
 80054c8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80054cc:	f010 0301 	ands.w	r3, r0, #1
 80054d0:	d00a      	beq.n	80054e8 <__swsetup_r+0xbc>
 80054d2:	2300      	movs	r3, #0
 80054d4:	60a3      	str	r3, [r4, #8]
 80054d6:	6963      	ldr	r3, [r4, #20]
 80054d8:	425b      	negs	r3, r3
 80054da:	61a3      	str	r3, [r4, #24]
 80054dc:	6923      	ldr	r3, [r4, #16]
 80054de:	b943      	cbnz	r3, 80054f2 <__swsetup_r+0xc6>
 80054e0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80054e4:	d1ba      	bne.n	800545c <__swsetup_r+0x30>
 80054e6:	bd70      	pop	{r4, r5, r6, pc}
 80054e8:	0781      	lsls	r1, r0, #30
 80054ea:	bf58      	it	pl
 80054ec:	6963      	ldrpl	r3, [r4, #20]
 80054ee:	60a3      	str	r3, [r4, #8]
 80054f0:	e7f4      	b.n	80054dc <__swsetup_r+0xb0>
 80054f2:	2000      	movs	r0, #0
 80054f4:	e7f7      	b.n	80054e6 <__swsetup_r+0xba>
 80054f6:	bf00      	nop
 80054f8:	2000000c 	.word	0x2000000c
 80054fc:	08006ee4 	.word	0x08006ee4
 8005500:	08006f04 	.word	0x08006f04
 8005504:	08006ec4 	.word	0x08006ec4

08005508 <__sflush_r>:
 8005508:	898a      	ldrh	r2, [r1, #12]
 800550a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800550e:	4605      	mov	r5, r0
 8005510:	0710      	lsls	r0, r2, #28
 8005512:	460c      	mov	r4, r1
 8005514:	d458      	bmi.n	80055c8 <__sflush_r+0xc0>
 8005516:	684b      	ldr	r3, [r1, #4]
 8005518:	2b00      	cmp	r3, #0
 800551a:	dc05      	bgt.n	8005528 <__sflush_r+0x20>
 800551c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800551e:	2b00      	cmp	r3, #0
 8005520:	dc02      	bgt.n	8005528 <__sflush_r+0x20>
 8005522:	2000      	movs	r0, #0
 8005524:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005528:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800552a:	2e00      	cmp	r6, #0
 800552c:	d0f9      	beq.n	8005522 <__sflush_r+0x1a>
 800552e:	2300      	movs	r3, #0
 8005530:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005534:	682f      	ldr	r7, [r5, #0]
 8005536:	602b      	str	r3, [r5, #0]
 8005538:	d032      	beq.n	80055a0 <__sflush_r+0x98>
 800553a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800553c:	89a3      	ldrh	r3, [r4, #12]
 800553e:	075a      	lsls	r2, r3, #29
 8005540:	d505      	bpl.n	800554e <__sflush_r+0x46>
 8005542:	6863      	ldr	r3, [r4, #4]
 8005544:	1ac0      	subs	r0, r0, r3
 8005546:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005548:	b10b      	cbz	r3, 800554e <__sflush_r+0x46>
 800554a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800554c:	1ac0      	subs	r0, r0, r3
 800554e:	2300      	movs	r3, #0
 8005550:	4602      	mov	r2, r0
 8005552:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005554:	6a21      	ldr	r1, [r4, #32]
 8005556:	4628      	mov	r0, r5
 8005558:	47b0      	blx	r6
 800555a:	1c43      	adds	r3, r0, #1
 800555c:	89a3      	ldrh	r3, [r4, #12]
 800555e:	d106      	bne.n	800556e <__sflush_r+0x66>
 8005560:	6829      	ldr	r1, [r5, #0]
 8005562:	291d      	cmp	r1, #29
 8005564:	d82c      	bhi.n	80055c0 <__sflush_r+0xb8>
 8005566:	4a2a      	ldr	r2, [pc, #168]	; (8005610 <__sflush_r+0x108>)
 8005568:	40ca      	lsrs	r2, r1
 800556a:	07d6      	lsls	r6, r2, #31
 800556c:	d528      	bpl.n	80055c0 <__sflush_r+0xb8>
 800556e:	2200      	movs	r2, #0
 8005570:	6062      	str	r2, [r4, #4]
 8005572:	04d9      	lsls	r1, r3, #19
 8005574:	6922      	ldr	r2, [r4, #16]
 8005576:	6022      	str	r2, [r4, #0]
 8005578:	d504      	bpl.n	8005584 <__sflush_r+0x7c>
 800557a:	1c42      	adds	r2, r0, #1
 800557c:	d101      	bne.n	8005582 <__sflush_r+0x7a>
 800557e:	682b      	ldr	r3, [r5, #0]
 8005580:	b903      	cbnz	r3, 8005584 <__sflush_r+0x7c>
 8005582:	6560      	str	r0, [r4, #84]	; 0x54
 8005584:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005586:	602f      	str	r7, [r5, #0]
 8005588:	2900      	cmp	r1, #0
 800558a:	d0ca      	beq.n	8005522 <__sflush_r+0x1a>
 800558c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005590:	4299      	cmp	r1, r3
 8005592:	d002      	beq.n	800559a <__sflush_r+0x92>
 8005594:	4628      	mov	r0, r5
 8005596:	f000 f9d7 	bl	8005948 <_free_r>
 800559a:	2000      	movs	r0, #0
 800559c:	6360      	str	r0, [r4, #52]	; 0x34
 800559e:	e7c1      	b.n	8005524 <__sflush_r+0x1c>
 80055a0:	6a21      	ldr	r1, [r4, #32]
 80055a2:	2301      	movs	r3, #1
 80055a4:	4628      	mov	r0, r5
 80055a6:	47b0      	blx	r6
 80055a8:	1c41      	adds	r1, r0, #1
 80055aa:	d1c7      	bne.n	800553c <__sflush_r+0x34>
 80055ac:	682b      	ldr	r3, [r5, #0]
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d0c4      	beq.n	800553c <__sflush_r+0x34>
 80055b2:	2b1d      	cmp	r3, #29
 80055b4:	d001      	beq.n	80055ba <__sflush_r+0xb2>
 80055b6:	2b16      	cmp	r3, #22
 80055b8:	d101      	bne.n	80055be <__sflush_r+0xb6>
 80055ba:	602f      	str	r7, [r5, #0]
 80055bc:	e7b1      	b.n	8005522 <__sflush_r+0x1a>
 80055be:	89a3      	ldrh	r3, [r4, #12]
 80055c0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80055c4:	81a3      	strh	r3, [r4, #12]
 80055c6:	e7ad      	b.n	8005524 <__sflush_r+0x1c>
 80055c8:	690f      	ldr	r7, [r1, #16]
 80055ca:	2f00      	cmp	r7, #0
 80055cc:	d0a9      	beq.n	8005522 <__sflush_r+0x1a>
 80055ce:	0793      	lsls	r3, r2, #30
 80055d0:	680e      	ldr	r6, [r1, #0]
 80055d2:	bf08      	it	eq
 80055d4:	694b      	ldreq	r3, [r1, #20]
 80055d6:	600f      	str	r7, [r1, #0]
 80055d8:	bf18      	it	ne
 80055da:	2300      	movne	r3, #0
 80055dc:	eba6 0807 	sub.w	r8, r6, r7
 80055e0:	608b      	str	r3, [r1, #8]
 80055e2:	f1b8 0f00 	cmp.w	r8, #0
 80055e6:	dd9c      	ble.n	8005522 <__sflush_r+0x1a>
 80055e8:	6a21      	ldr	r1, [r4, #32]
 80055ea:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80055ec:	4643      	mov	r3, r8
 80055ee:	463a      	mov	r2, r7
 80055f0:	4628      	mov	r0, r5
 80055f2:	47b0      	blx	r6
 80055f4:	2800      	cmp	r0, #0
 80055f6:	dc06      	bgt.n	8005606 <__sflush_r+0xfe>
 80055f8:	89a3      	ldrh	r3, [r4, #12]
 80055fa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80055fe:	81a3      	strh	r3, [r4, #12]
 8005600:	f04f 30ff 	mov.w	r0, #4294967295
 8005604:	e78e      	b.n	8005524 <__sflush_r+0x1c>
 8005606:	4407      	add	r7, r0
 8005608:	eba8 0800 	sub.w	r8, r8, r0
 800560c:	e7e9      	b.n	80055e2 <__sflush_r+0xda>
 800560e:	bf00      	nop
 8005610:	20400001 	.word	0x20400001

08005614 <_fflush_r>:
 8005614:	b538      	push	{r3, r4, r5, lr}
 8005616:	690b      	ldr	r3, [r1, #16]
 8005618:	4605      	mov	r5, r0
 800561a:	460c      	mov	r4, r1
 800561c:	b913      	cbnz	r3, 8005624 <_fflush_r+0x10>
 800561e:	2500      	movs	r5, #0
 8005620:	4628      	mov	r0, r5
 8005622:	bd38      	pop	{r3, r4, r5, pc}
 8005624:	b118      	cbz	r0, 800562e <_fflush_r+0x1a>
 8005626:	6983      	ldr	r3, [r0, #24]
 8005628:	b90b      	cbnz	r3, 800562e <_fflush_r+0x1a>
 800562a:	f000 f887 	bl	800573c <__sinit>
 800562e:	4b14      	ldr	r3, [pc, #80]	; (8005680 <_fflush_r+0x6c>)
 8005630:	429c      	cmp	r4, r3
 8005632:	d11b      	bne.n	800566c <_fflush_r+0x58>
 8005634:	686c      	ldr	r4, [r5, #4]
 8005636:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800563a:	2b00      	cmp	r3, #0
 800563c:	d0ef      	beq.n	800561e <_fflush_r+0xa>
 800563e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005640:	07d0      	lsls	r0, r2, #31
 8005642:	d404      	bmi.n	800564e <_fflush_r+0x3a>
 8005644:	0599      	lsls	r1, r3, #22
 8005646:	d402      	bmi.n	800564e <_fflush_r+0x3a>
 8005648:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800564a:	f000 f915 	bl	8005878 <__retarget_lock_acquire_recursive>
 800564e:	4628      	mov	r0, r5
 8005650:	4621      	mov	r1, r4
 8005652:	f7ff ff59 	bl	8005508 <__sflush_r>
 8005656:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005658:	07da      	lsls	r2, r3, #31
 800565a:	4605      	mov	r5, r0
 800565c:	d4e0      	bmi.n	8005620 <_fflush_r+0xc>
 800565e:	89a3      	ldrh	r3, [r4, #12]
 8005660:	059b      	lsls	r3, r3, #22
 8005662:	d4dd      	bmi.n	8005620 <_fflush_r+0xc>
 8005664:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005666:	f000 f908 	bl	800587a <__retarget_lock_release_recursive>
 800566a:	e7d9      	b.n	8005620 <_fflush_r+0xc>
 800566c:	4b05      	ldr	r3, [pc, #20]	; (8005684 <_fflush_r+0x70>)
 800566e:	429c      	cmp	r4, r3
 8005670:	d101      	bne.n	8005676 <_fflush_r+0x62>
 8005672:	68ac      	ldr	r4, [r5, #8]
 8005674:	e7df      	b.n	8005636 <_fflush_r+0x22>
 8005676:	4b04      	ldr	r3, [pc, #16]	; (8005688 <_fflush_r+0x74>)
 8005678:	429c      	cmp	r4, r3
 800567a:	bf08      	it	eq
 800567c:	68ec      	ldreq	r4, [r5, #12]
 800567e:	e7da      	b.n	8005636 <_fflush_r+0x22>
 8005680:	08006ee4 	.word	0x08006ee4
 8005684:	08006f04 	.word	0x08006f04
 8005688:	08006ec4 	.word	0x08006ec4

0800568c <std>:
 800568c:	2300      	movs	r3, #0
 800568e:	b510      	push	{r4, lr}
 8005690:	4604      	mov	r4, r0
 8005692:	e9c0 3300 	strd	r3, r3, [r0]
 8005696:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800569a:	6083      	str	r3, [r0, #8]
 800569c:	8181      	strh	r1, [r0, #12]
 800569e:	6643      	str	r3, [r0, #100]	; 0x64
 80056a0:	81c2      	strh	r2, [r0, #14]
 80056a2:	6183      	str	r3, [r0, #24]
 80056a4:	4619      	mov	r1, r3
 80056a6:	2208      	movs	r2, #8
 80056a8:	305c      	adds	r0, #92	; 0x5c
 80056aa:	f7ff fdcf 	bl	800524c <memset>
 80056ae:	4b05      	ldr	r3, [pc, #20]	; (80056c4 <std+0x38>)
 80056b0:	6263      	str	r3, [r4, #36]	; 0x24
 80056b2:	4b05      	ldr	r3, [pc, #20]	; (80056c8 <std+0x3c>)
 80056b4:	62a3      	str	r3, [r4, #40]	; 0x28
 80056b6:	4b05      	ldr	r3, [pc, #20]	; (80056cc <std+0x40>)
 80056b8:	62e3      	str	r3, [r4, #44]	; 0x2c
 80056ba:	4b05      	ldr	r3, [pc, #20]	; (80056d0 <std+0x44>)
 80056bc:	6224      	str	r4, [r4, #32]
 80056be:	6323      	str	r3, [r4, #48]	; 0x30
 80056c0:	bd10      	pop	{r4, pc}
 80056c2:	bf00      	nop
 80056c4:	08006109 	.word	0x08006109
 80056c8:	0800612b 	.word	0x0800612b
 80056cc:	08006163 	.word	0x08006163
 80056d0:	08006187 	.word	0x08006187

080056d4 <_cleanup_r>:
 80056d4:	4901      	ldr	r1, [pc, #4]	; (80056dc <_cleanup_r+0x8>)
 80056d6:	f000 b8af 	b.w	8005838 <_fwalk_reent>
 80056da:	bf00      	nop
 80056dc:	08005615 	.word	0x08005615

080056e0 <__sfmoreglue>:
 80056e0:	b570      	push	{r4, r5, r6, lr}
 80056e2:	2268      	movs	r2, #104	; 0x68
 80056e4:	1e4d      	subs	r5, r1, #1
 80056e6:	4355      	muls	r5, r2
 80056e8:	460e      	mov	r6, r1
 80056ea:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80056ee:	f000 f997 	bl	8005a20 <_malloc_r>
 80056f2:	4604      	mov	r4, r0
 80056f4:	b140      	cbz	r0, 8005708 <__sfmoreglue+0x28>
 80056f6:	2100      	movs	r1, #0
 80056f8:	e9c0 1600 	strd	r1, r6, [r0]
 80056fc:	300c      	adds	r0, #12
 80056fe:	60a0      	str	r0, [r4, #8]
 8005700:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8005704:	f7ff fda2 	bl	800524c <memset>
 8005708:	4620      	mov	r0, r4
 800570a:	bd70      	pop	{r4, r5, r6, pc}

0800570c <__sfp_lock_acquire>:
 800570c:	4801      	ldr	r0, [pc, #4]	; (8005714 <__sfp_lock_acquire+0x8>)
 800570e:	f000 b8b3 	b.w	8005878 <__retarget_lock_acquire_recursive>
 8005712:	bf00      	nop
 8005714:	200001f5 	.word	0x200001f5

08005718 <__sfp_lock_release>:
 8005718:	4801      	ldr	r0, [pc, #4]	; (8005720 <__sfp_lock_release+0x8>)
 800571a:	f000 b8ae 	b.w	800587a <__retarget_lock_release_recursive>
 800571e:	bf00      	nop
 8005720:	200001f5 	.word	0x200001f5

08005724 <__sinit_lock_acquire>:
 8005724:	4801      	ldr	r0, [pc, #4]	; (800572c <__sinit_lock_acquire+0x8>)
 8005726:	f000 b8a7 	b.w	8005878 <__retarget_lock_acquire_recursive>
 800572a:	bf00      	nop
 800572c:	200001f6 	.word	0x200001f6

08005730 <__sinit_lock_release>:
 8005730:	4801      	ldr	r0, [pc, #4]	; (8005738 <__sinit_lock_release+0x8>)
 8005732:	f000 b8a2 	b.w	800587a <__retarget_lock_release_recursive>
 8005736:	bf00      	nop
 8005738:	200001f6 	.word	0x200001f6

0800573c <__sinit>:
 800573c:	b510      	push	{r4, lr}
 800573e:	4604      	mov	r4, r0
 8005740:	f7ff fff0 	bl	8005724 <__sinit_lock_acquire>
 8005744:	69a3      	ldr	r3, [r4, #24]
 8005746:	b11b      	cbz	r3, 8005750 <__sinit+0x14>
 8005748:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800574c:	f7ff bff0 	b.w	8005730 <__sinit_lock_release>
 8005750:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8005754:	6523      	str	r3, [r4, #80]	; 0x50
 8005756:	4b13      	ldr	r3, [pc, #76]	; (80057a4 <__sinit+0x68>)
 8005758:	4a13      	ldr	r2, [pc, #76]	; (80057a8 <__sinit+0x6c>)
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	62a2      	str	r2, [r4, #40]	; 0x28
 800575e:	42a3      	cmp	r3, r4
 8005760:	bf04      	itt	eq
 8005762:	2301      	moveq	r3, #1
 8005764:	61a3      	streq	r3, [r4, #24]
 8005766:	4620      	mov	r0, r4
 8005768:	f000 f820 	bl	80057ac <__sfp>
 800576c:	6060      	str	r0, [r4, #4]
 800576e:	4620      	mov	r0, r4
 8005770:	f000 f81c 	bl	80057ac <__sfp>
 8005774:	60a0      	str	r0, [r4, #8]
 8005776:	4620      	mov	r0, r4
 8005778:	f000 f818 	bl	80057ac <__sfp>
 800577c:	2200      	movs	r2, #0
 800577e:	60e0      	str	r0, [r4, #12]
 8005780:	2104      	movs	r1, #4
 8005782:	6860      	ldr	r0, [r4, #4]
 8005784:	f7ff ff82 	bl	800568c <std>
 8005788:	68a0      	ldr	r0, [r4, #8]
 800578a:	2201      	movs	r2, #1
 800578c:	2109      	movs	r1, #9
 800578e:	f7ff ff7d 	bl	800568c <std>
 8005792:	68e0      	ldr	r0, [r4, #12]
 8005794:	2202      	movs	r2, #2
 8005796:	2112      	movs	r1, #18
 8005798:	f7ff ff78 	bl	800568c <std>
 800579c:	2301      	movs	r3, #1
 800579e:	61a3      	str	r3, [r4, #24]
 80057a0:	e7d2      	b.n	8005748 <__sinit+0xc>
 80057a2:	bf00      	nop
 80057a4:	08006ec0 	.word	0x08006ec0
 80057a8:	080056d5 	.word	0x080056d5

080057ac <__sfp>:
 80057ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80057ae:	4607      	mov	r7, r0
 80057b0:	f7ff ffac 	bl	800570c <__sfp_lock_acquire>
 80057b4:	4b1e      	ldr	r3, [pc, #120]	; (8005830 <__sfp+0x84>)
 80057b6:	681e      	ldr	r6, [r3, #0]
 80057b8:	69b3      	ldr	r3, [r6, #24]
 80057ba:	b913      	cbnz	r3, 80057c2 <__sfp+0x16>
 80057bc:	4630      	mov	r0, r6
 80057be:	f7ff ffbd 	bl	800573c <__sinit>
 80057c2:	3648      	adds	r6, #72	; 0x48
 80057c4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80057c8:	3b01      	subs	r3, #1
 80057ca:	d503      	bpl.n	80057d4 <__sfp+0x28>
 80057cc:	6833      	ldr	r3, [r6, #0]
 80057ce:	b30b      	cbz	r3, 8005814 <__sfp+0x68>
 80057d0:	6836      	ldr	r6, [r6, #0]
 80057d2:	e7f7      	b.n	80057c4 <__sfp+0x18>
 80057d4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80057d8:	b9d5      	cbnz	r5, 8005810 <__sfp+0x64>
 80057da:	4b16      	ldr	r3, [pc, #88]	; (8005834 <__sfp+0x88>)
 80057dc:	60e3      	str	r3, [r4, #12]
 80057de:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80057e2:	6665      	str	r5, [r4, #100]	; 0x64
 80057e4:	f000 f847 	bl	8005876 <__retarget_lock_init_recursive>
 80057e8:	f7ff ff96 	bl	8005718 <__sfp_lock_release>
 80057ec:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80057f0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80057f4:	6025      	str	r5, [r4, #0]
 80057f6:	61a5      	str	r5, [r4, #24]
 80057f8:	2208      	movs	r2, #8
 80057fa:	4629      	mov	r1, r5
 80057fc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8005800:	f7ff fd24 	bl	800524c <memset>
 8005804:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8005808:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800580c:	4620      	mov	r0, r4
 800580e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005810:	3468      	adds	r4, #104	; 0x68
 8005812:	e7d9      	b.n	80057c8 <__sfp+0x1c>
 8005814:	2104      	movs	r1, #4
 8005816:	4638      	mov	r0, r7
 8005818:	f7ff ff62 	bl	80056e0 <__sfmoreglue>
 800581c:	4604      	mov	r4, r0
 800581e:	6030      	str	r0, [r6, #0]
 8005820:	2800      	cmp	r0, #0
 8005822:	d1d5      	bne.n	80057d0 <__sfp+0x24>
 8005824:	f7ff ff78 	bl	8005718 <__sfp_lock_release>
 8005828:	230c      	movs	r3, #12
 800582a:	603b      	str	r3, [r7, #0]
 800582c:	e7ee      	b.n	800580c <__sfp+0x60>
 800582e:	bf00      	nop
 8005830:	08006ec0 	.word	0x08006ec0
 8005834:	ffff0001 	.word	0xffff0001

08005838 <_fwalk_reent>:
 8005838:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800583c:	4606      	mov	r6, r0
 800583e:	4688      	mov	r8, r1
 8005840:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8005844:	2700      	movs	r7, #0
 8005846:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800584a:	f1b9 0901 	subs.w	r9, r9, #1
 800584e:	d505      	bpl.n	800585c <_fwalk_reent+0x24>
 8005850:	6824      	ldr	r4, [r4, #0]
 8005852:	2c00      	cmp	r4, #0
 8005854:	d1f7      	bne.n	8005846 <_fwalk_reent+0xe>
 8005856:	4638      	mov	r0, r7
 8005858:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800585c:	89ab      	ldrh	r3, [r5, #12]
 800585e:	2b01      	cmp	r3, #1
 8005860:	d907      	bls.n	8005872 <_fwalk_reent+0x3a>
 8005862:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005866:	3301      	adds	r3, #1
 8005868:	d003      	beq.n	8005872 <_fwalk_reent+0x3a>
 800586a:	4629      	mov	r1, r5
 800586c:	4630      	mov	r0, r6
 800586e:	47c0      	blx	r8
 8005870:	4307      	orrs	r7, r0
 8005872:	3568      	adds	r5, #104	; 0x68
 8005874:	e7e9      	b.n	800584a <_fwalk_reent+0x12>

08005876 <__retarget_lock_init_recursive>:
 8005876:	4770      	bx	lr

08005878 <__retarget_lock_acquire_recursive>:
 8005878:	4770      	bx	lr

0800587a <__retarget_lock_release_recursive>:
 800587a:	4770      	bx	lr

0800587c <__swhatbuf_r>:
 800587c:	b570      	push	{r4, r5, r6, lr}
 800587e:	460e      	mov	r6, r1
 8005880:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005884:	2900      	cmp	r1, #0
 8005886:	b096      	sub	sp, #88	; 0x58
 8005888:	4614      	mov	r4, r2
 800588a:	461d      	mov	r5, r3
 800588c:	da08      	bge.n	80058a0 <__swhatbuf_r+0x24>
 800588e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8005892:	2200      	movs	r2, #0
 8005894:	602a      	str	r2, [r5, #0]
 8005896:	061a      	lsls	r2, r3, #24
 8005898:	d410      	bmi.n	80058bc <__swhatbuf_r+0x40>
 800589a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800589e:	e00e      	b.n	80058be <__swhatbuf_r+0x42>
 80058a0:	466a      	mov	r2, sp
 80058a2:	f000 fc97 	bl	80061d4 <_fstat_r>
 80058a6:	2800      	cmp	r0, #0
 80058a8:	dbf1      	blt.n	800588e <__swhatbuf_r+0x12>
 80058aa:	9a01      	ldr	r2, [sp, #4]
 80058ac:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80058b0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80058b4:	425a      	negs	r2, r3
 80058b6:	415a      	adcs	r2, r3
 80058b8:	602a      	str	r2, [r5, #0]
 80058ba:	e7ee      	b.n	800589a <__swhatbuf_r+0x1e>
 80058bc:	2340      	movs	r3, #64	; 0x40
 80058be:	2000      	movs	r0, #0
 80058c0:	6023      	str	r3, [r4, #0]
 80058c2:	b016      	add	sp, #88	; 0x58
 80058c4:	bd70      	pop	{r4, r5, r6, pc}
	...

080058c8 <__smakebuf_r>:
 80058c8:	898b      	ldrh	r3, [r1, #12]
 80058ca:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80058cc:	079d      	lsls	r5, r3, #30
 80058ce:	4606      	mov	r6, r0
 80058d0:	460c      	mov	r4, r1
 80058d2:	d507      	bpl.n	80058e4 <__smakebuf_r+0x1c>
 80058d4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80058d8:	6023      	str	r3, [r4, #0]
 80058da:	6123      	str	r3, [r4, #16]
 80058dc:	2301      	movs	r3, #1
 80058de:	6163      	str	r3, [r4, #20]
 80058e0:	b002      	add	sp, #8
 80058e2:	bd70      	pop	{r4, r5, r6, pc}
 80058e4:	ab01      	add	r3, sp, #4
 80058e6:	466a      	mov	r2, sp
 80058e8:	f7ff ffc8 	bl	800587c <__swhatbuf_r>
 80058ec:	9900      	ldr	r1, [sp, #0]
 80058ee:	4605      	mov	r5, r0
 80058f0:	4630      	mov	r0, r6
 80058f2:	f000 f895 	bl	8005a20 <_malloc_r>
 80058f6:	b948      	cbnz	r0, 800590c <__smakebuf_r+0x44>
 80058f8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80058fc:	059a      	lsls	r2, r3, #22
 80058fe:	d4ef      	bmi.n	80058e0 <__smakebuf_r+0x18>
 8005900:	f023 0303 	bic.w	r3, r3, #3
 8005904:	f043 0302 	orr.w	r3, r3, #2
 8005908:	81a3      	strh	r3, [r4, #12]
 800590a:	e7e3      	b.n	80058d4 <__smakebuf_r+0xc>
 800590c:	4b0d      	ldr	r3, [pc, #52]	; (8005944 <__smakebuf_r+0x7c>)
 800590e:	62b3      	str	r3, [r6, #40]	; 0x28
 8005910:	89a3      	ldrh	r3, [r4, #12]
 8005912:	6020      	str	r0, [r4, #0]
 8005914:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005918:	81a3      	strh	r3, [r4, #12]
 800591a:	9b00      	ldr	r3, [sp, #0]
 800591c:	6163      	str	r3, [r4, #20]
 800591e:	9b01      	ldr	r3, [sp, #4]
 8005920:	6120      	str	r0, [r4, #16]
 8005922:	b15b      	cbz	r3, 800593c <__smakebuf_r+0x74>
 8005924:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005928:	4630      	mov	r0, r6
 800592a:	f000 fc65 	bl	80061f8 <_isatty_r>
 800592e:	b128      	cbz	r0, 800593c <__smakebuf_r+0x74>
 8005930:	89a3      	ldrh	r3, [r4, #12]
 8005932:	f023 0303 	bic.w	r3, r3, #3
 8005936:	f043 0301 	orr.w	r3, r3, #1
 800593a:	81a3      	strh	r3, [r4, #12]
 800593c:	89a0      	ldrh	r0, [r4, #12]
 800593e:	4305      	orrs	r5, r0
 8005940:	81a5      	strh	r5, [r4, #12]
 8005942:	e7cd      	b.n	80058e0 <__smakebuf_r+0x18>
 8005944:	080056d5 	.word	0x080056d5

08005948 <_free_r>:
 8005948:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800594a:	2900      	cmp	r1, #0
 800594c:	d044      	beq.n	80059d8 <_free_r+0x90>
 800594e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005952:	9001      	str	r0, [sp, #4]
 8005954:	2b00      	cmp	r3, #0
 8005956:	f1a1 0404 	sub.w	r4, r1, #4
 800595a:	bfb8      	it	lt
 800595c:	18e4      	addlt	r4, r4, r3
 800595e:	f000 fc95 	bl	800628c <__malloc_lock>
 8005962:	4a1e      	ldr	r2, [pc, #120]	; (80059dc <_free_r+0x94>)
 8005964:	9801      	ldr	r0, [sp, #4]
 8005966:	6813      	ldr	r3, [r2, #0]
 8005968:	b933      	cbnz	r3, 8005978 <_free_r+0x30>
 800596a:	6063      	str	r3, [r4, #4]
 800596c:	6014      	str	r4, [r2, #0]
 800596e:	b003      	add	sp, #12
 8005970:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005974:	f000 bc90 	b.w	8006298 <__malloc_unlock>
 8005978:	42a3      	cmp	r3, r4
 800597a:	d908      	bls.n	800598e <_free_r+0x46>
 800597c:	6825      	ldr	r5, [r4, #0]
 800597e:	1961      	adds	r1, r4, r5
 8005980:	428b      	cmp	r3, r1
 8005982:	bf01      	itttt	eq
 8005984:	6819      	ldreq	r1, [r3, #0]
 8005986:	685b      	ldreq	r3, [r3, #4]
 8005988:	1949      	addeq	r1, r1, r5
 800598a:	6021      	streq	r1, [r4, #0]
 800598c:	e7ed      	b.n	800596a <_free_r+0x22>
 800598e:	461a      	mov	r2, r3
 8005990:	685b      	ldr	r3, [r3, #4]
 8005992:	b10b      	cbz	r3, 8005998 <_free_r+0x50>
 8005994:	42a3      	cmp	r3, r4
 8005996:	d9fa      	bls.n	800598e <_free_r+0x46>
 8005998:	6811      	ldr	r1, [r2, #0]
 800599a:	1855      	adds	r5, r2, r1
 800599c:	42a5      	cmp	r5, r4
 800599e:	d10b      	bne.n	80059b8 <_free_r+0x70>
 80059a0:	6824      	ldr	r4, [r4, #0]
 80059a2:	4421      	add	r1, r4
 80059a4:	1854      	adds	r4, r2, r1
 80059a6:	42a3      	cmp	r3, r4
 80059a8:	6011      	str	r1, [r2, #0]
 80059aa:	d1e0      	bne.n	800596e <_free_r+0x26>
 80059ac:	681c      	ldr	r4, [r3, #0]
 80059ae:	685b      	ldr	r3, [r3, #4]
 80059b0:	6053      	str	r3, [r2, #4]
 80059b2:	4421      	add	r1, r4
 80059b4:	6011      	str	r1, [r2, #0]
 80059b6:	e7da      	b.n	800596e <_free_r+0x26>
 80059b8:	d902      	bls.n	80059c0 <_free_r+0x78>
 80059ba:	230c      	movs	r3, #12
 80059bc:	6003      	str	r3, [r0, #0]
 80059be:	e7d6      	b.n	800596e <_free_r+0x26>
 80059c0:	6825      	ldr	r5, [r4, #0]
 80059c2:	1961      	adds	r1, r4, r5
 80059c4:	428b      	cmp	r3, r1
 80059c6:	bf04      	itt	eq
 80059c8:	6819      	ldreq	r1, [r3, #0]
 80059ca:	685b      	ldreq	r3, [r3, #4]
 80059cc:	6063      	str	r3, [r4, #4]
 80059ce:	bf04      	itt	eq
 80059d0:	1949      	addeq	r1, r1, r5
 80059d2:	6021      	streq	r1, [r4, #0]
 80059d4:	6054      	str	r4, [r2, #4]
 80059d6:	e7ca      	b.n	800596e <_free_r+0x26>
 80059d8:	b003      	add	sp, #12
 80059da:	bd30      	pop	{r4, r5, pc}
 80059dc:	200001f8 	.word	0x200001f8

080059e0 <sbrk_aligned>:
 80059e0:	b570      	push	{r4, r5, r6, lr}
 80059e2:	4e0e      	ldr	r6, [pc, #56]	; (8005a1c <sbrk_aligned+0x3c>)
 80059e4:	460c      	mov	r4, r1
 80059e6:	6831      	ldr	r1, [r6, #0]
 80059e8:	4605      	mov	r5, r0
 80059ea:	b911      	cbnz	r1, 80059f2 <sbrk_aligned+0x12>
 80059ec:	f000 fb7c 	bl	80060e8 <_sbrk_r>
 80059f0:	6030      	str	r0, [r6, #0]
 80059f2:	4621      	mov	r1, r4
 80059f4:	4628      	mov	r0, r5
 80059f6:	f000 fb77 	bl	80060e8 <_sbrk_r>
 80059fa:	1c43      	adds	r3, r0, #1
 80059fc:	d00a      	beq.n	8005a14 <sbrk_aligned+0x34>
 80059fe:	1cc4      	adds	r4, r0, #3
 8005a00:	f024 0403 	bic.w	r4, r4, #3
 8005a04:	42a0      	cmp	r0, r4
 8005a06:	d007      	beq.n	8005a18 <sbrk_aligned+0x38>
 8005a08:	1a21      	subs	r1, r4, r0
 8005a0a:	4628      	mov	r0, r5
 8005a0c:	f000 fb6c 	bl	80060e8 <_sbrk_r>
 8005a10:	3001      	adds	r0, #1
 8005a12:	d101      	bne.n	8005a18 <sbrk_aligned+0x38>
 8005a14:	f04f 34ff 	mov.w	r4, #4294967295
 8005a18:	4620      	mov	r0, r4
 8005a1a:	bd70      	pop	{r4, r5, r6, pc}
 8005a1c:	200001fc 	.word	0x200001fc

08005a20 <_malloc_r>:
 8005a20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005a24:	1ccd      	adds	r5, r1, #3
 8005a26:	f025 0503 	bic.w	r5, r5, #3
 8005a2a:	3508      	adds	r5, #8
 8005a2c:	2d0c      	cmp	r5, #12
 8005a2e:	bf38      	it	cc
 8005a30:	250c      	movcc	r5, #12
 8005a32:	2d00      	cmp	r5, #0
 8005a34:	4607      	mov	r7, r0
 8005a36:	db01      	blt.n	8005a3c <_malloc_r+0x1c>
 8005a38:	42a9      	cmp	r1, r5
 8005a3a:	d905      	bls.n	8005a48 <_malloc_r+0x28>
 8005a3c:	230c      	movs	r3, #12
 8005a3e:	603b      	str	r3, [r7, #0]
 8005a40:	2600      	movs	r6, #0
 8005a42:	4630      	mov	r0, r6
 8005a44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005a48:	4e2e      	ldr	r6, [pc, #184]	; (8005b04 <_malloc_r+0xe4>)
 8005a4a:	f000 fc1f 	bl	800628c <__malloc_lock>
 8005a4e:	6833      	ldr	r3, [r6, #0]
 8005a50:	461c      	mov	r4, r3
 8005a52:	bb34      	cbnz	r4, 8005aa2 <_malloc_r+0x82>
 8005a54:	4629      	mov	r1, r5
 8005a56:	4638      	mov	r0, r7
 8005a58:	f7ff ffc2 	bl	80059e0 <sbrk_aligned>
 8005a5c:	1c43      	adds	r3, r0, #1
 8005a5e:	4604      	mov	r4, r0
 8005a60:	d14d      	bne.n	8005afe <_malloc_r+0xde>
 8005a62:	6834      	ldr	r4, [r6, #0]
 8005a64:	4626      	mov	r6, r4
 8005a66:	2e00      	cmp	r6, #0
 8005a68:	d140      	bne.n	8005aec <_malloc_r+0xcc>
 8005a6a:	6823      	ldr	r3, [r4, #0]
 8005a6c:	4631      	mov	r1, r6
 8005a6e:	4638      	mov	r0, r7
 8005a70:	eb04 0803 	add.w	r8, r4, r3
 8005a74:	f000 fb38 	bl	80060e8 <_sbrk_r>
 8005a78:	4580      	cmp	r8, r0
 8005a7a:	d13a      	bne.n	8005af2 <_malloc_r+0xd2>
 8005a7c:	6821      	ldr	r1, [r4, #0]
 8005a7e:	3503      	adds	r5, #3
 8005a80:	1a6d      	subs	r5, r5, r1
 8005a82:	f025 0503 	bic.w	r5, r5, #3
 8005a86:	3508      	adds	r5, #8
 8005a88:	2d0c      	cmp	r5, #12
 8005a8a:	bf38      	it	cc
 8005a8c:	250c      	movcc	r5, #12
 8005a8e:	4629      	mov	r1, r5
 8005a90:	4638      	mov	r0, r7
 8005a92:	f7ff ffa5 	bl	80059e0 <sbrk_aligned>
 8005a96:	3001      	adds	r0, #1
 8005a98:	d02b      	beq.n	8005af2 <_malloc_r+0xd2>
 8005a9a:	6823      	ldr	r3, [r4, #0]
 8005a9c:	442b      	add	r3, r5
 8005a9e:	6023      	str	r3, [r4, #0]
 8005aa0:	e00e      	b.n	8005ac0 <_malloc_r+0xa0>
 8005aa2:	6822      	ldr	r2, [r4, #0]
 8005aa4:	1b52      	subs	r2, r2, r5
 8005aa6:	d41e      	bmi.n	8005ae6 <_malloc_r+0xc6>
 8005aa8:	2a0b      	cmp	r2, #11
 8005aaa:	d916      	bls.n	8005ada <_malloc_r+0xba>
 8005aac:	1961      	adds	r1, r4, r5
 8005aae:	42a3      	cmp	r3, r4
 8005ab0:	6025      	str	r5, [r4, #0]
 8005ab2:	bf18      	it	ne
 8005ab4:	6059      	strne	r1, [r3, #4]
 8005ab6:	6863      	ldr	r3, [r4, #4]
 8005ab8:	bf08      	it	eq
 8005aba:	6031      	streq	r1, [r6, #0]
 8005abc:	5162      	str	r2, [r4, r5]
 8005abe:	604b      	str	r3, [r1, #4]
 8005ac0:	4638      	mov	r0, r7
 8005ac2:	f104 060b 	add.w	r6, r4, #11
 8005ac6:	f000 fbe7 	bl	8006298 <__malloc_unlock>
 8005aca:	f026 0607 	bic.w	r6, r6, #7
 8005ace:	1d23      	adds	r3, r4, #4
 8005ad0:	1af2      	subs	r2, r6, r3
 8005ad2:	d0b6      	beq.n	8005a42 <_malloc_r+0x22>
 8005ad4:	1b9b      	subs	r3, r3, r6
 8005ad6:	50a3      	str	r3, [r4, r2]
 8005ad8:	e7b3      	b.n	8005a42 <_malloc_r+0x22>
 8005ada:	6862      	ldr	r2, [r4, #4]
 8005adc:	42a3      	cmp	r3, r4
 8005ade:	bf0c      	ite	eq
 8005ae0:	6032      	streq	r2, [r6, #0]
 8005ae2:	605a      	strne	r2, [r3, #4]
 8005ae4:	e7ec      	b.n	8005ac0 <_malloc_r+0xa0>
 8005ae6:	4623      	mov	r3, r4
 8005ae8:	6864      	ldr	r4, [r4, #4]
 8005aea:	e7b2      	b.n	8005a52 <_malloc_r+0x32>
 8005aec:	4634      	mov	r4, r6
 8005aee:	6876      	ldr	r6, [r6, #4]
 8005af0:	e7b9      	b.n	8005a66 <_malloc_r+0x46>
 8005af2:	230c      	movs	r3, #12
 8005af4:	603b      	str	r3, [r7, #0]
 8005af6:	4638      	mov	r0, r7
 8005af8:	f000 fbce 	bl	8006298 <__malloc_unlock>
 8005afc:	e7a1      	b.n	8005a42 <_malloc_r+0x22>
 8005afe:	6025      	str	r5, [r4, #0]
 8005b00:	e7de      	b.n	8005ac0 <_malloc_r+0xa0>
 8005b02:	bf00      	nop
 8005b04:	200001f8 	.word	0x200001f8

08005b08 <__ssputs_r>:
 8005b08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005b0c:	688e      	ldr	r6, [r1, #8]
 8005b0e:	429e      	cmp	r6, r3
 8005b10:	4682      	mov	sl, r0
 8005b12:	460c      	mov	r4, r1
 8005b14:	4690      	mov	r8, r2
 8005b16:	461f      	mov	r7, r3
 8005b18:	d838      	bhi.n	8005b8c <__ssputs_r+0x84>
 8005b1a:	898a      	ldrh	r2, [r1, #12]
 8005b1c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005b20:	d032      	beq.n	8005b88 <__ssputs_r+0x80>
 8005b22:	6825      	ldr	r5, [r4, #0]
 8005b24:	6909      	ldr	r1, [r1, #16]
 8005b26:	eba5 0901 	sub.w	r9, r5, r1
 8005b2a:	6965      	ldr	r5, [r4, #20]
 8005b2c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005b30:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005b34:	3301      	adds	r3, #1
 8005b36:	444b      	add	r3, r9
 8005b38:	106d      	asrs	r5, r5, #1
 8005b3a:	429d      	cmp	r5, r3
 8005b3c:	bf38      	it	cc
 8005b3e:	461d      	movcc	r5, r3
 8005b40:	0553      	lsls	r3, r2, #21
 8005b42:	d531      	bpl.n	8005ba8 <__ssputs_r+0xa0>
 8005b44:	4629      	mov	r1, r5
 8005b46:	f7ff ff6b 	bl	8005a20 <_malloc_r>
 8005b4a:	4606      	mov	r6, r0
 8005b4c:	b950      	cbnz	r0, 8005b64 <__ssputs_r+0x5c>
 8005b4e:	230c      	movs	r3, #12
 8005b50:	f8ca 3000 	str.w	r3, [sl]
 8005b54:	89a3      	ldrh	r3, [r4, #12]
 8005b56:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005b5a:	81a3      	strh	r3, [r4, #12]
 8005b5c:	f04f 30ff 	mov.w	r0, #4294967295
 8005b60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005b64:	6921      	ldr	r1, [r4, #16]
 8005b66:	464a      	mov	r2, r9
 8005b68:	f000 fb68 	bl	800623c <memcpy>
 8005b6c:	89a3      	ldrh	r3, [r4, #12]
 8005b6e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005b72:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005b76:	81a3      	strh	r3, [r4, #12]
 8005b78:	6126      	str	r6, [r4, #16]
 8005b7a:	6165      	str	r5, [r4, #20]
 8005b7c:	444e      	add	r6, r9
 8005b7e:	eba5 0509 	sub.w	r5, r5, r9
 8005b82:	6026      	str	r6, [r4, #0]
 8005b84:	60a5      	str	r5, [r4, #8]
 8005b86:	463e      	mov	r6, r7
 8005b88:	42be      	cmp	r6, r7
 8005b8a:	d900      	bls.n	8005b8e <__ssputs_r+0x86>
 8005b8c:	463e      	mov	r6, r7
 8005b8e:	6820      	ldr	r0, [r4, #0]
 8005b90:	4632      	mov	r2, r6
 8005b92:	4641      	mov	r1, r8
 8005b94:	f000 fb60 	bl	8006258 <memmove>
 8005b98:	68a3      	ldr	r3, [r4, #8]
 8005b9a:	1b9b      	subs	r3, r3, r6
 8005b9c:	60a3      	str	r3, [r4, #8]
 8005b9e:	6823      	ldr	r3, [r4, #0]
 8005ba0:	4433      	add	r3, r6
 8005ba2:	6023      	str	r3, [r4, #0]
 8005ba4:	2000      	movs	r0, #0
 8005ba6:	e7db      	b.n	8005b60 <__ssputs_r+0x58>
 8005ba8:	462a      	mov	r2, r5
 8005baa:	f000 fb7b 	bl	80062a4 <_realloc_r>
 8005bae:	4606      	mov	r6, r0
 8005bb0:	2800      	cmp	r0, #0
 8005bb2:	d1e1      	bne.n	8005b78 <__ssputs_r+0x70>
 8005bb4:	6921      	ldr	r1, [r4, #16]
 8005bb6:	4650      	mov	r0, sl
 8005bb8:	f7ff fec6 	bl	8005948 <_free_r>
 8005bbc:	e7c7      	b.n	8005b4e <__ssputs_r+0x46>
	...

08005bc0 <_svfiprintf_r>:
 8005bc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005bc4:	4698      	mov	r8, r3
 8005bc6:	898b      	ldrh	r3, [r1, #12]
 8005bc8:	061b      	lsls	r3, r3, #24
 8005bca:	b09d      	sub	sp, #116	; 0x74
 8005bcc:	4607      	mov	r7, r0
 8005bce:	460d      	mov	r5, r1
 8005bd0:	4614      	mov	r4, r2
 8005bd2:	d50e      	bpl.n	8005bf2 <_svfiprintf_r+0x32>
 8005bd4:	690b      	ldr	r3, [r1, #16]
 8005bd6:	b963      	cbnz	r3, 8005bf2 <_svfiprintf_r+0x32>
 8005bd8:	2140      	movs	r1, #64	; 0x40
 8005bda:	f7ff ff21 	bl	8005a20 <_malloc_r>
 8005bde:	6028      	str	r0, [r5, #0]
 8005be0:	6128      	str	r0, [r5, #16]
 8005be2:	b920      	cbnz	r0, 8005bee <_svfiprintf_r+0x2e>
 8005be4:	230c      	movs	r3, #12
 8005be6:	603b      	str	r3, [r7, #0]
 8005be8:	f04f 30ff 	mov.w	r0, #4294967295
 8005bec:	e0d1      	b.n	8005d92 <_svfiprintf_r+0x1d2>
 8005bee:	2340      	movs	r3, #64	; 0x40
 8005bf0:	616b      	str	r3, [r5, #20]
 8005bf2:	2300      	movs	r3, #0
 8005bf4:	9309      	str	r3, [sp, #36]	; 0x24
 8005bf6:	2320      	movs	r3, #32
 8005bf8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005bfc:	f8cd 800c 	str.w	r8, [sp, #12]
 8005c00:	2330      	movs	r3, #48	; 0x30
 8005c02:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8005dac <_svfiprintf_r+0x1ec>
 8005c06:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005c0a:	f04f 0901 	mov.w	r9, #1
 8005c0e:	4623      	mov	r3, r4
 8005c10:	469a      	mov	sl, r3
 8005c12:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005c16:	b10a      	cbz	r2, 8005c1c <_svfiprintf_r+0x5c>
 8005c18:	2a25      	cmp	r2, #37	; 0x25
 8005c1a:	d1f9      	bne.n	8005c10 <_svfiprintf_r+0x50>
 8005c1c:	ebba 0b04 	subs.w	fp, sl, r4
 8005c20:	d00b      	beq.n	8005c3a <_svfiprintf_r+0x7a>
 8005c22:	465b      	mov	r3, fp
 8005c24:	4622      	mov	r2, r4
 8005c26:	4629      	mov	r1, r5
 8005c28:	4638      	mov	r0, r7
 8005c2a:	f7ff ff6d 	bl	8005b08 <__ssputs_r>
 8005c2e:	3001      	adds	r0, #1
 8005c30:	f000 80aa 	beq.w	8005d88 <_svfiprintf_r+0x1c8>
 8005c34:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005c36:	445a      	add	r2, fp
 8005c38:	9209      	str	r2, [sp, #36]	; 0x24
 8005c3a:	f89a 3000 	ldrb.w	r3, [sl]
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	f000 80a2 	beq.w	8005d88 <_svfiprintf_r+0x1c8>
 8005c44:	2300      	movs	r3, #0
 8005c46:	f04f 32ff 	mov.w	r2, #4294967295
 8005c4a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005c4e:	f10a 0a01 	add.w	sl, sl, #1
 8005c52:	9304      	str	r3, [sp, #16]
 8005c54:	9307      	str	r3, [sp, #28]
 8005c56:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005c5a:	931a      	str	r3, [sp, #104]	; 0x68
 8005c5c:	4654      	mov	r4, sl
 8005c5e:	2205      	movs	r2, #5
 8005c60:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005c64:	4851      	ldr	r0, [pc, #324]	; (8005dac <_svfiprintf_r+0x1ec>)
 8005c66:	f7fa fab3 	bl	80001d0 <memchr>
 8005c6a:	9a04      	ldr	r2, [sp, #16]
 8005c6c:	b9d8      	cbnz	r0, 8005ca6 <_svfiprintf_r+0xe6>
 8005c6e:	06d0      	lsls	r0, r2, #27
 8005c70:	bf44      	itt	mi
 8005c72:	2320      	movmi	r3, #32
 8005c74:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005c78:	0711      	lsls	r1, r2, #28
 8005c7a:	bf44      	itt	mi
 8005c7c:	232b      	movmi	r3, #43	; 0x2b
 8005c7e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005c82:	f89a 3000 	ldrb.w	r3, [sl]
 8005c86:	2b2a      	cmp	r3, #42	; 0x2a
 8005c88:	d015      	beq.n	8005cb6 <_svfiprintf_r+0xf6>
 8005c8a:	9a07      	ldr	r2, [sp, #28]
 8005c8c:	4654      	mov	r4, sl
 8005c8e:	2000      	movs	r0, #0
 8005c90:	f04f 0c0a 	mov.w	ip, #10
 8005c94:	4621      	mov	r1, r4
 8005c96:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005c9a:	3b30      	subs	r3, #48	; 0x30
 8005c9c:	2b09      	cmp	r3, #9
 8005c9e:	d94e      	bls.n	8005d3e <_svfiprintf_r+0x17e>
 8005ca0:	b1b0      	cbz	r0, 8005cd0 <_svfiprintf_r+0x110>
 8005ca2:	9207      	str	r2, [sp, #28]
 8005ca4:	e014      	b.n	8005cd0 <_svfiprintf_r+0x110>
 8005ca6:	eba0 0308 	sub.w	r3, r0, r8
 8005caa:	fa09 f303 	lsl.w	r3, r9, r3
 8005cae:	4313      	orrs	r3, r2
 8005cb0:	9304      	str	r3, [sp, #16]
 8005cb2:	46a2      	mov	sl, r4
 8005cb4:	e7d2      	b.n	8005c5c <_svfiprintf_r+0x9c>
 8005cb6:	9b03      	ldr	r3, [sp, #12]
 8005cb8:	1d19      	adds	r1, r3, #4
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	9103      	str	r1, [sp, #12]
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	bfbb      	ittet	lt
 8005cc2:	425b      	neglt	r3, r3
 8005cc4:	f042 0202 	orrlt.w	r2, r2, #2
 8005cc8:	9307      	strge	r3, [sp, #28]
 8005cca:	9307      	strlt	r3, [sp, #28]
 8005ccc:	bfb8      	it	lt
 8005cce:	9204      	strlt	r2, [sp, #16]
 8005cd0:	7823      	ldrb	r3, [r4, #0]
 8005cd2:	2b2e      	cmp	r3, #46	; 0x2e
 8005cd4:	d10c      	bne.n	8005cf0 <_svfiprintf_r+0x130>
 8005cd6:	7863      	ldrb	r3, [r4, #1]
 8005cd8:	2b2a      	cmp	r3, #42	; 0x2a
 8005cda:	d135      	bne.n	8005d48 <_svfiprintf_r+0x188>
 8005cdc:	9b03      	ldr	r3, [sp, #12]
 8005cde:	1d1a      	adds	r2, r3, #4
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	9203      	str	r2, [sp, #12]
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	bfb8      	it	lt
 8005ce8:	f04f 33ff 	movlt.w	r3, #4294967295
 8005cec:	3402      	adds	r4, #2
 8005cee:	9305      	str	r3, [sp, #20]
 8005cf0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8005dbc <_svfiprintf_r+0x1fc>
 8005cf4:	7821      	ldrb	r1, [r4, #0]
 8005cf6:	2203      	movs	r2, #3
 8005cf8:	4650      	mov	r0, sl
 8005cfa:	f7fa fa69 	bl	80001d0 <memchr>
 8005cfe:	b140      	cbz	r0, 8005d12 <_svfiprintf_r+0x152>
 8005d00:	2340      	movs	r3, #64	; 0x40
 8005d02:	eba0 000a 	sub.w	r0, r0, sl
 8005d06:	fa03 f000 	lsl.w	r0, r3, r0
 8005d0a:	9b04      	ldr	r3, [sp, #16]
 8005d0c:	4303      	orrs	r3, r0
 8005d0e:	3401      	adds	r4, #1
 8005d10:	9304      	str	r3, [sp, #16]
 8005d12:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005d16:	4826      	ldr	r0, [pc, #152]	; (8005db0 <_svfiprintf_r+0x1f0>)
 8005d18:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005d1c:	2206      	movs	r2, #6
 8005d1e:	f7fa fa57 	bl	80001d0 <memchr>
 8005d22:	2800      	cmp	r0, #0
 8005d24:	d038      	beq.n	8005d98 <_svfiprintf_r+0x1d8>
 8005d26:	4b23      	ldr	r3, [pc, #140]	; (8005db4 <_svfiprintf_r+0x1f4>)
 8005d28:	bb1b      	cbnz	r3, 8005d72 <_svfiprintf_r+0x1b2>
 8005d2a:	9b03      	ldr	r3, [sp, #12]
 8005d2c:	3307      	adds	r3, #7
 8005d2e:	f023 0307 	bic.w	r3, r3, #7
 8005d32:	3308      	adds	r3, #8
 8005d34:	9303      	str	r3, [sp, #12]
 8005d36:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005d38:	4433      	add	r3, r6
 8005d3a:	9309      	str	r3, [sp, #36]	; 0x24
 8005d3c:	e767      	b.n	8005c0e <_svfiprintf_r+0x4e>
 8005d3e:	fb0c 3202 	mla	r2, ip, r2, r3
 8005d42:	460c      	mov	r4, r1
 8005d44:	2001      	movs	r0, #1
 8005d46:	e7a5      	b.n	8005c94 <_svfiprintf_r+0xd4>
 8005d48:	2300      	movs	r3, #0
 8005d4a:	3401      	adds	r4, #1
 8005d4c:	9305      	str	r3, [sp, #20]
 8005d4e:	4619      	mov	r1, r3
 8005d50:	f04f 0c0a 	mov.w	ip, #10
 8005d54:	4620      	mov	r0, r4
 8005d56:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005d5a:	3a30      	subs	r2, #48	; 0x30
 8005d5c:	2a09      	cmp	r2, #9
 8005d5e:	d903      	bls.n	8005d68 <_svfiprintf_r+0x1a8>
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d0c5      	beq.n	8005cf0 <_svfiprintf_r+0x130>
 8005d64:	9105      	str	r1, [sp, #20]
 8005d66:	e7c3      	b.n	8005cf0 <_svfiprintf_r+0x130>
 8005d68:	fb0c 2101 	mla	r1, ip, r1, r2
 8005d6c:	4604      	mov	r4, r0
 8005d6e:	2301      	movs	r3, #1
 8005d70:	e7f0      	b.n	8005d54 <_svfiprintf_r+0x194>
 8005d72:	ab03      	add	r3, sp, #12
 8005d74:	9300      	str	r3, [sp, #0]
 8005d76:	462a      	mov	r2, r5
 8005d78:	4b0f      	ldr	r3, [pc, #60]	; (8005db8 <_svfiprintf_r+0x1f8>)
 8005d7a:	a904      	add	r1, sp, #16
 8005d7c:	4638      	mov	r0, r7
 8005d7e:	f3af 8000 	nop.w
 8005d82:	1c42      	adds	r2, r0, #1
 8005d84:	4606      	mov	r6, r0
 8005d86:	d1d6      	bne.n	8005d36 <_svfiprintf_r+0x176>
 8005d88:	89ab      	ldrh	r3, [r5, #12]
 8005d8a:	065b      	lsls	r3, r3, #25
 8005d8c:	f53f af2c 	bmi.w	8005be8 <_svfiprintf_r+0x28>
 8005d90:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005d92:	b01d      	add	sp, #116	; 0x74
 8005d94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005d98:	ab03      	add	r3, sp, #12
 8005d9a:	9300      	str	r3, [sp, #0]
 8005d9c:	462a      	mov	r2, r5
 8005d9e:	4b06      	ldr	r3, [pc, #24]	; (8005db8 <_svfiprintf_r+0x1f8>)
 8005da0:	a904      	add	r1, sp, #16
 8005da2:	4638      	mov	r0, r7
 8005da4:	f000 f87a 	bl	8005e9c <_printf_i>
 8005da8:	e7eb      	b.n	8005d82 <_svfiprintf_r+0x1c2>
 8005daa:	bf00      	nop
 8005dac:	08006f24 	.word	0x08006f24
 8005db0:	08006f2e 	.word	0x08006f2e
 8005db4:	00000000 	.word	0x00000000
 8005db8:	08005b09 	.word	0x08005b09
 8005dbc:	08006f2a 	.word	0x08006f2a

08005dc0 <_printf_common>:
 8005dc0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005dc4:	4616      	mov	r6, r2
 8005dc6:	4699      	mov	r9, r3
 8005dc8:	688a      	ldr	r2, [r1, #8]
 8005dca:	690b      	ldr	r3, [r1, #16]
 8005dcc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005dd0:	4293      	cmp	r3, r2
 8005dd2:	bfb8      	it	lt
 8005dd4:	4613      	movlt	r3, r2
 8005dd6:	6033      	str	r3, [r6, #0]
 8005dd8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005ddc:	4607      	mov	r7, r0
 8005dde:	460c      	mov	r4, r1
 8005de0:	b10a      	cbz	r2, 8005de6 <_printf_common+0x26>
 8005de2:	3301      	adds	r3, #1
 8005de4:	6033      	str	r3, [r6, #0]
 8005de6:	6823      	ldr	r3, [r4, #0]
 8005de8:	0699      	lsls	r1, r3, #26
 8005dea:	bf42      	ittt	mi
 8005dec:	6833      	ldrmi	r3, [r6, #0]
 8005dee:	3302      	addmi	r3, #2
 8005df0:	6033      	strmi	r3, [r6, #0]
 8005df2:	6825      	ldr	r5, [r4, #0]
 8005df4:	f015 0506 	ands.w	r5, r5, #6
 8005df8:	d106      	bne.n	8005e08 <_printf_common+0x48>
 8005dfa:	f104 0a19 	add.w	sl, r4, #25
 8005dfe:	68e3      	ldr	r3, [r4, #12]
 8005e00:	6832      	ldr	r2, [r6, #0]
 8005e02:	1a9b      	subs	r3, r3, r2
 8005e04:	42ab      	cmp	r3, r5
 8005e06:	dc26      	bgt.n	8005e56 <_printf_common+0x96>
 8005e08:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005e0c:	1e13      	subs	r3, r2, #0
 8005e0e:	6822      	ldr	r2, [r4, #0]
 8005e10:	bf18      	it	ne
 8005e12:	2301      	movne	r3, #1
 8005e14:	0692      	lsls	r2, r2, #26
 8005e16:	d42b      	bmi.n	8005e70 <_printf_common+0xb0>
 8005e18:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005e1c:	4649      	mov	r1, r9
 8005e1e:	4638      	mov	r0, r7
 8005e20:	47c0      	blx	r8
 8005e22:	3001      	adds	r0, #1
 8005e24:	d01e      	beq.n	8005e64 <_printf_common+0xa4>
 8005e26:	6823      	ldr	r3, [r4, #0]
 8005e28:	68e5      	ldr	r5, [r4, #12]
 8005e2a:	6832      	ldr	r2, [r6, #0]
 8005e2c:	f003 0306 	and.w	r3, r3, #6
 8005e30:	2b04      	cmp	r3, #4
 8005e32:	bf08      	it	eq
 8005e34:	1aad      	subeq	r5, r5, r2
 8005e36:	68a3      	ldr	r3, [r4, #8]
 8005e38:	6922      	ldr	r2, [r4, #16]
 8005e3a:	bf0c      	ite	eq
 8005e3c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005e40:	2500      	movne	r5, #0
 8005e42:	4293      	cmp	r3, r2
 8005e44:	bfc4      	itt	gt
 8005e46:	1a9b      	subgt	r3, r3, r2
 8005e48:	18ed      	addgt	r5, r5, r3
 8005e4a:	2600      	movs	r6, #0
 8005e4c:	341a      	adds	r4, #26
 8005e4e:	42b5      	cmp	r5, r6
 8005e50:	d11a      	bne.n	8005e88 <_printf_common+0xc8>
 8005e52:	2000      	movs	r0, #0
 8005e54:	e008      	b.n	8005e68 <_printf_common+0xa8>
 8005e56:	2301      	movs	r3, #1
 8005e58:	4652      	mov	r2, sl
 8005e5a:	4649      	mov	r1, r9
 8005e5c:	4638      	mov	r0, r7
 8005e5e:	47c0      	blx	r8
 8005e60:	3001      	adds	r0, #1
 8005e62:	d103      	bne.n	8005e6c <_printf_common+0xac>
 8005e64:	f04f 30ff 	mov.w	r0, #4294967295
 8005e68:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005e6c:	3501      	adds	r5, #1
 8005e6e:	e7c6      	b.n	8005dfe <_printf_common+0x3e>
 8005e70:	18e1      	adds	r1, r4, r3
 8005e72:	1c5a      	adds	r2, r3, #1
 8005e74:	2030      	movs	r0, #48	; 0x30
 8005e76:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005e7a:	4422      	add	r2, r4
 8005e7c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005e80:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005e84:	3302      	adds	r3, #2
 8005e86:	e7c7      	b.n	8005e18 <_printf_common+0x58>
 8005e88:	2301      	movs	r3, #1
 8005e8a:	4622      	mov	r2, r4
 8005e8c:	4649      	mov	r1, r9
 8005e8e:	4638      	mov	r0, r7
 8005e90:	47c0      	blx	r8
 8005e92:	3001      	adds	r0, #1
 8005e94:	d0e6      	beq.n	8005e64 <_printf_common+0xa4>
 8005e96:	3601      	adds	r6, #1
 8005e98:	e7d9      	b.n	8005e4e <_printf_common+0x8e>
	...

08005e9c <_printf_i>:
 8005e9c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005ea0:	7e0f      	ldrb	r7, [r1, #24]
 8005ea2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005ea4:	2f78      	cmp	r7, #120	; 0x78
 8005ea6:	4691      	mov	r9, r2
 8005ea8:	4680      	mov	r8, r0
 8005eaa:	460c      	mov	r4, r1
 8005eac:	469a      	mov	sl, r3
 8005eae:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005eb2:	d807      	bhi.n	8005ec4 <_printf_i+0x28>
 8005eb4:	2f62      	cmp	r7, #98	; 0x62
 8005eb6:	d80a      	bhi.n	8005ece <_printf_i+0x32>
 8005eb8:	2f00      	cmp	r7, #0
 8005eba:	f000 80d8 	beq.w	800606e <_printf_i+0x1d2>
 8005ebe:	2f58      	cmp	r7, #88	; 0x58
 8005ec0:	f000 80a3 	beq.w	800600a <_printf_i+0x16e>
 8005ec4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005ec8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005ecc:	e03a      	b.n	8005f44 <_printf_i+0xa8>
 8005ece:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005ed2:	2b15      	cmp	r3, #21
 8005ed4:	d8f6      	bhi.n	8005ec4 <_printf_i+0x28>
 8005ed6:	a101      	add	r1, pc, #4	; (adr r1, 8005edc <_printf_i+0x40>)
 8005ed8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005edc:	08005f35 	.word	0x08005f35
 8005ee0:	08005f49 	.word	0x08005f49
 8005ee4:	08005ec5 	.word	0x08005ec5
 8005ee8:	08005ec5 	.word	0x08005ec5
 8005eec:	08005ec5 	.word	0x08005ec5
 8005ef0:	08005ec5 	.word	0x08005ec5
 8005ef4:	08005f49 	.word	0x08005f49
 8005ef8:	08005ec5 	.word	0x08005ec5
 8005efc:	08005ec5 	.word	0x08005ec5
 8005f00:	08005ec5 	.word	0x08005ec5
 8005f04:	08005ec5 	.word	0x08005ec5
 8005f08:	08006055 	.word	0x08006055
 8005f0c:	08005f79 	.word	0x08005f79
 8005f10:	08006037 	.word	0x08006037
 8005f14:	08005ec5 	.word	0x08005ec5
 8005f18:	08005ec5 	.word	0x08005ec5
 8005f1c:	08006077 	.word	0x08006077
 8005f20:	08005ec5 	.word	0x08005ec5
 8005f24:	08005f79 	.word	0x08005f79
 8005f28:	08005ec5 	.word	0x08005ec5
 8005f2c:	08005ec5 	.word	0x08005ec5
 8005f30:	0800603f 	.word	0x0800603f
 8005f34:	682b      	ldr	r3, [r5, #0]
 8005f36:	1d1a      	adds	r2, r3, #4
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	602a      	str	r2, [r5, #0]
 8005f3c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005f40:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005f44:	2301      	movs	r3, #1
 8005f46:	e0a3      	b.n	8006090 <_printf_i+0x1f4>
 8005f48:	6820      	ldr	r0, [r4, #0]
 8005f4a:	6829      	ldr	r1, [r5, #0]
 8005f4c:	0606      	lsls	r6, r0, #24
 8005f4e:	f101 0304 	add.w	r3, r1, #4
 8005f52:	d50a      	bpl.n	8005f6a <_printf_i+0xce>
 8005f54:	680e      	ldr	r6, [r1, #0]
 8005f56:	602b      	str	r3, [r5, #0]
 8005f58:	2e00      	cmp	r6, #0
 8005f5a:	da03      	bge.n	8005f64 <_printf_i+0xc8>
 8005f5c:	232d      	movs	r3, #45	; 0x2d
 8005f5e:	4276      	negs	r6, r6
 8005f60:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005f64:	485e      	ldr	r0, [pc, #376]	; (80060e0 <_printf_i+0x244>)
 8005f66:	230a      	movs	r3, #10
 8005f68:	e019      	b.n	8005f9e <_printf_i+0x102>
 8005f6a:	680e      	ldr	r6, [r1, #0]
 8005f6c:	602b      	str	r3, [r5, #0]
 8005f6e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005f72:	bf18      	it	ne
 8005f74:	b236      	sxthne	r6, r6
 8005f76:	e7ef      	b.n	8005f58 <_printf_i+0xbc>
 8005f78:	682b      	ldr	r3, [r5, #0]
 8005f7a:	6820      	ldr	r0, [r4, #0]
 8005f7c:	1d19      	adds	r1, r3, #4
 8005f7e:	6029      	str	r1, [r5, #0]
 8005f80:	0601      	lsls	r1, r0, #24
 8005f82:	d501      	bpl.n	8005f88 <_printf_i+0xec>
 8005f84:	681e      	ldr	r6, [r3, #0]
 8005f86:	e002      	b.n	8005f8e <_printf_i+0xf2>
 8005f88:	0646      	lsls	r6, r0, #25
 8005f8a:	d5fb      	bpl.n	8005f84 <_printf_i+0xe8>
 8005f8c:	881e      	ldrh	r6, [r3, #0]
 8005f8e:	4854      	ldr	r0, [pc, #336]	; (80060e0 <_printf_i+0x244>)
 8005f90:	2f6f      	cmp	r7, #111	; 0x6f
 8005f92:	bf0c      	ite	eq
 8005f94:	2308      	moveq	r3, #8
 8005f96:	230a      	movne	r3, #10
 8005f98:	2100      	movs	r1, #0
 8005f9a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005f9e:	6865      	ldr	r5, [r4, #4]
 8005fa0:	60a5      	str	r5, [r4, #8]
 8005fa2:	2d00      	cmp	r5, #0
 8005fa4:	bfa2      	ittt	ge
 8005fa6:	6821      	ldrge	r1, [r4, #0]
 8005fa8:	f021 0104 	bicge.w	r1, r1, #4
 8005fac:	6021      	strge	r1, [r4, #0]
 8005fae:	b90e      	cbnz	r6, 8005fb4 <_printf_i+0x118>
 8005fb0:	2d00      	cmp	r5, #0
 8005fb2:	d04d      	beq.n	8006050 <_printf_i+0x1b4>
 8005fb4:	4615      	mov	r5, r2
 8005fb6:	fbb6 f1f3 	udiv	r1, r6, r3
 8005fba:	fb03 6711 	mls	r7, r3, r1, r6
 8005fbe:	5dc7      	ldrb	r7, [r0, r7]
 8005fc0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005fc4:	4637      	mov	r7, r6
 8005fc6:	42bb      	cmp	r3, r7
 8005fc8:	460e      	mov	r6, r1
 8005fca:	d9f4      	bls.n	8005fb6 <_printf_i+0x11a>
 8005fcc:	2b08      	cmp	r3, #8
 8005fce:	d10b      	bne.n	8005fe8 <_printf_i+0x14c>
 8005fd0:	6823      	ldr	r3, [r4, #0]
 8005fd2:	07de      	lsls	r6, r3, #31
 8005fd4:	d508      	bpl.n	8005fe8 <_printf_i+0x14c>
 8005fd6:	6923      	ldr	r3, [r4, #16]
 8005fd8:	6861      	ldr	r1, [r4, #4]
 8005fda:	4299      	cmp	r1, r3
 8005fdc:	bfde      	ittt	le
 8005fde:	2330      	movle	r3, #48	; 0x30
 8005fe0:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005fe4:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005fe8:	1b52      	subs	r2, r2, r5
 8005fea:	6122      	str	r2, [r4, #16]
 8005fec:	f8cd a000 	str.w	sl, [sp]
 8005ff0:	464b      	mov	r3, r9
 8005ff2:	aa03      	add	r2, sp, #12
 8005ff4:	4621      	mov	r1, r4
 8005ff6:	4640      	mov	r0, r8
 8005ff8:	f7ff fee2 	bl	8005dc0 <_printf_common>
 8005ffc:	3001      	adds	r0, #1
 8005ffe:	d14c      	bne.n	800609a <_printf_i+0x1fe>
 8006000:	f04f 30ff 	mov.w	r0, #4294967295
 8006004:	b004      	add	sp, #16
 8006006:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800600a:	4835      	ldr	r0, [pc, #212]	; (80060e0 <_printf_i+0x244>)
 800600c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8006010:	6829      	ldr	r1, [r5, #0]
 8006012:	6823      	ldr	r3, [r4, #0]
 8006014:	f851 6b04 	ldr.w	r6, [r1], #4
 8006018:	6029      	str	r1, [r5, #0]
 800601a:	061d      	lsls	r5, r3, #24
 800601c:	d514      	bpl.n	8006048 <_printf_i+0x1ac>
 800601e:	07df      	lsls	r7, r3, #31
 8006020:	bf44      	itt	mi
 8006022:	f043 0320 	orrmi.w	r3, r3, #32
 8006026:	6023      	strmi	r3, [r4, #0]
 8006028:	b91e      	cbnz	r6, 8006032 <_printf_i+0x196>
 800602a:	6823      	ldr	r3, [r4, #0]
 800602c:	f023 0320 	bic.w	r3, r3, #32
 8006030:	6023      	str	r3, [r4, #0]
 8006032:	2310      	movs	r3, #16
 8006034:	e7b0      	b.n	8005f98 <_printf_i+0xfc>
 8006036:	6823      	ldr	r3, [r4, #0]
 8006038:	f043 0320 	orr.w	r3, r3, #32
 800603c:	6023      	str	r3, [r4, #0]
 800603e:	2378      	movs	r3, #120	; 0x78
 8006040:	4828      	ldr	r0, [pc, #160]	; (80060e4 <_printf_i+0x248>)
 8006042:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006046:	e7e3      	b.n	8006010 <_printf_i+0x174>
 8006048:	0659      	lsls	r1, r3, #25
 800604a:	bf48      	it	mi
 800604c:	b2b6      	uxthmi	r6, r6
 800604e:	e7e6      	b.n	800601e <_printf_i+0x182>
 8006050:	4615      	mov	r5, r2
 8006052:	e7bb      	b.n	8005fcc <_printf_i+0x130>
 8006054:	682b      	ldr	r3, [r5, #0]
 8006056:	6826      	ldr	r6, [r4, #0]
 8006058:	6961      	ldr	r1, [r4, #20]
 800605a:	1d18      	adds	r0, r3, #4
 800605c:	6028      	str	r0, [r5, #0]
 800605e:	0635      	lsls	r5, r6, #24
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	d501      	bpl.n	8006068 <_printf_i+0x1cc>
 8006064:	6019      	str	r1, [r3, #0]
 8006066:	e002      	b.n	800606e <_printf_i+0x1d2>
 8006068:	0670      	lsls	r0, r6, #25
 800606a:	d5fb      	bpl.n	8006064 <_printf_i+0x1c8>
 800606c:	8019      	strh	r1, [r3, #0]
 800606e:	2300      	movs	r3, #0
 8006070:	6123      	str	r3, [r4, #16]
 8006072:	4615      	mov	r5, r2
 8006074:	e7ba      	b.n	8005fec <_printf_i+0x150>
 8006076:	682b      	ldr	r3, [r5, #0]
 8006078:	1d1a      	adds	r2, r3, #4
 800607a:	602a      	str	r2, [r5, #0]
 800607c:	681d      	ldr	r5, [r3, #0]
 800607e:	6862      	ldr	r2, [r4, #4]
 8006080:	2100      	movs	r1, #0
 8006082:	4628      	mov	r0, r5
 8006084:	f7fa f8a4 	bl	80001d0 <memchr>
 8006088:	b108      	cbz	r0, 800608e <_printf_i+0x1f2>
 800608a:	1b40      	subs	r0, r0, r5
 800608c:	6060      	str	r0, [r4, #4]
 800608e:	6863      	ldr	r3, [r4, #4]
 8006090:	6123      	str	r3, [r4, #16]
 8006092:	2300      	movs	r3, #0
 8006094:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006098:	e7a8      	b.n	8005fec <_printf_i+0x150>
 800609a:	6923      	ldr	r3, [r4, #16]
 800609c:	462a      	mov	r2, r5
 800609e:	4649      	mov	r1, r9
 80060a0:	4640      	mov	r0, r8
 80060a2:	47d0      	blx	sl
 80060a4:	3001      	adds	r0, #1
 80060a6:	d0ab      	beq.n	8006000 <_printf_i+0x164>
 80060a8:	6823      	ldr	r3, [r4, #0]
 80060aa:	079b      	lsls	r3, r3, #30
 80060ac:	d413      	bmi.n	80060d6 <_printf_i+0x23a>
 80060ae:	68e0      	ldr	r0, [r4, #12]
 80060b0:	9b03      	ldr	r3, [sp, #12]
 80060b2:	4298      	cmp	r0, r3
 80060b4:	bfb8      	it	lt
 80060b6:	4618      	movlt	r0, r3
 80060b8:	e7a4      	b.n	8006004 <_printf_i+0x168>
 80060ba:	2301      	movs	r3, #1
 80060bc:	4632      	mov	r2, r6
 80060be:	4649      	mov	r1, r9
 80060c0:	4640      	mov	r0, r8
 80060c2:	47d0      	blx	sl
 80060c4:	3001      	adds	r0, #1
 80060c6:	d09b      	beq.n	8006000 <_printf_i+0x164>
 80060c8:	3501      	adds	r5, #1
 80060ca:	68e3      	ldr	r3, [r4, #12]
 80060cc:	9903      	ldr	r1, [sp, #12]
 80060ce:	1a5b      	subs	r3, r3, r1
 80060d0:	42ab      	cmp	r3, r5
 80060d2:	dcf2      	bgt.n	80060ba <_printf_i+0x21e>
 80060d4:	e7eb      	b.n	80060ae <_printf_i+0x212>
 80060d6:	2500      	movs	r5, #0
 80060d8:	f104 0619 	add.w	r6, r4, #25
 80060dc:	e7f5      	b.n	80060ca <_printf_i+0x22e>
 80060de:	bf00      	nop
 80060e0:	08006f35 	.word	0x08006f35
 80060e4:	08006f46 	.word	0x08006f46

080060e8 <_sbrk_r>:
 80060e8:	b538      	push	{r3, r4, r5, lr}
 80060ea:	4d06      	ldr	r5, [pc, #24]	; (8006104 <_sbrk_r+0x1c>)
 80060ec:	2300      	movs	r3, #0
 80060ee:	4604      	mov	r4, r0
 80060f0:	4608      	mov	r0, r1
 80060f2:	602b      	str	r3, [r5, #0]
 80060f4:	f7fb f9a6 	bl	8001444 <_sbrk>
 80060f8:	1c43      	adds	r3, r0, #1
 80060fa:	d102      	bne.n	8006102 <_sbrk_r+0x1a>
 80060fc:	682b      	ldr	r3, [r5, #0]
 80060fe:	b103      	cbz	r3, 8006102 <_sbrk_r+0x1a>
 8006100:	6023      	str	r3, [r4, #0]
 8006102:	bd38      	pop	{r3, r4, r5, pc}
 8006104:	20000200 	.word	0x20000200

08006108 <__sread>:
 8006108:	b510      	push	{r4, lr}
 800610a:	460c      	mov	r4, r1
 800610c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006110:	f000 f8f8 	bl	8006304 <_read_r>
 8006114:	2800      	cmp	r0, #0
 8006116:	bfab      	itete	ge
 8006118:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800611a:	89a3      	ldrhlt	r3, [r4, #12]
 800611c:	181b      	addge	r3, r3, r0
 800611e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006122:	bfac      	ite	ge
 8006124:	6563      	strge	r3, [r4, #84]	; 0x54
 8006126:	81a3      	strhlt	r3, [r4, #12]
 8006128:	bd10      	pop	{r4, pc}

0800612a <__swrite>:
 800612a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800612e:	461f      	mov	r7, r3
 8006130:	898b      	ldrh	r3, [r1, #12]
 8006132:	05db      	lsls	r3, r3, #23
 8006134:	4605      	mov	r5, r0
 8006136:	460c      	mov	r4, r1
 8006138:	4616      	mov	r6, r2
 800613a:	d505      	bpl.n	8006148 <__swrite+0x1e>
 800613c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006140:	2302      	movs	r3, #2
 8006142:	2200      	movs	r2, #0
 8006144:	f000 f868 	bl	8006218 <_lseek_r>
 8006148:	89a3      	ldrh	r3, [r4, #12]
 800614a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800614e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006152:	81a3      	strh	r3, [r4, #12]
 8006154:	4632      	mov	r2, r6
 8006156:	463b      	mov	r3, r7
 8006158:	4628      	mov	r0, r5
 800615a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800615e:	f000 b817 	b.w	8006190 <_write_r>

08006162 <__sseek>:
 8006162:	b510      	push	{r4, lr}
 8006164:	460c      	mov	r4, r1
 8006166:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800616a:	f000 f855 	bl	8006218 <_lseek_r>
 800616e:	1c43      	adds	r3, r0, #1
 8006170:	89a3      	ldrh	r3, [r4, #12]
 8006172:	bf15      	itete	ne
 8006174:	6560      	strne	r0, [r4, #84]	; 0x54
 8006176:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800617a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800617e:	81a3      	strheq	r3, [r4, #12]
 8006180:	bf18      	it	ne
 8006182:	81a3      	strhne	r3, [r4, #12]
 8006184:	bd10      	pop	{r4, pc}

08006186 <__sclose>:
 8006186:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800618a:	f000 b813 	b.w	80061b4 <_close_r>
	...

08006190 <_write_r>:
 8006190:	b538      	push	{r3, r4, r5, lr}
 8006192:	4d07      	ldr	r5, [pc, #28]	; (80061b0 <_write_r+0x20>)
 8006194:	4604      	mov	r4, r0
 8006196:	4608      	mov	r0, r1
 8006198:	4611      	mov	r1, r2
 800619a:	2200      	movs	r2, #0
 800619c:	602a      	str	r2, [r5, #0]
 800619e:	461a      	mov	r2, r3
 80061a0:	f7fb f8ff 	bl	80013a2 <_write>
 80061a4:	1c43      	adds	r3, r0, #1
 80061a6:	d102      	bne.n	80061ae <_write_r+0x1e>
 80061a8:	682b      	ldr	r3, [r5, #0]
 80061aa:	b103      	cbz	r3, 80061ae <_write_r+0x1e>
 80061ac:	6023      	str	r3, [r4, #0]
 80061ae:	bd38      	pop	{r3, r4, r5, pc}
 80061b0:	20000200 	.word	0x20000200

080061b4 <_close_r>:
 80061b4:	b538      	push	{r3, r4, r5, lr}
 80061b6:	4d06      	ldr	r5, [pc, #24]	; (80061d0 <_close_r+0x1c>)
 80061b8:	2300      	movs	r3, #0
 80061ba:	4604      	mov	r4, r0
 80061bc:	4608      	mov	r0, r1
 80061be:	602b      	str	r3, [r5, #0]
 80061c0:	f7fb f90b 	bl	80013da <_close>
 80061c4:	1c43      	adds	r3, r0, #1
 80061c6:	d102      	bne.n	80061ce <_close_r+0x1a>
 80061c8:	682b      	ldr	r3, [r5, #0]
 80061ca:	b103      	cbz	r3, 80061ce <_close_r+0x1a>
 80061cc:	6023      	str	r3, [r4, #0]
 80061ce:	bd38      	pop	{r3, r4, r5, pc}
 80061d0:	20000200 	.word	0x20000200

080061d4 <_fstat_r>:
 80061d4:	b538      	push	{r3, r4, r5, lr}
 80061d6:	4d07      	ldr	r5, [pc, #28]	; (80061f4 <_fstat_r+0x20>)
 80061d8:	2300      	movs	r3, #0
 80061da:	4604      	mov	r4, r0
 80061dc:	4608      	mov	r0, r1
 80061de:	4611      	mov	r1, r2
 80061e0:	602b      	str	r3, [r5, #0]
 80061e2:	f7fb f906 	bl	80013f2 <_fstat>
 80061e6:	1c43      	adds	r3, r0, #1
 80061e8:	d102      	bne.n	80061f0 <_fstat_r+0x1c>
 80061ea:	682b      	ldr	r3, [r5, #0]
 80061ec:	b103      	cbz	r3, 80061f0 <_fstat_r+0x1c>
 80061ee:	6023      	str	r3, [r4, #0]
 80061f0:	bd38      	pop	{r3, r4, r5, pc}
 80061f2:	bf00      	nop
 80061f4:	20000200 	.word	0x20000200

080061f8 <_isatty_r>:
 80061f8:	b538      	push	{r3, r4, r5, lr}
 80061fa:	4d06      	ldr	r5, [pc, #24]	; (8006214 <_isatty_r+0x1c>)
 80061fc:	2300      	movs	r3, #0
 80061fe:	4604      	mov	r4, r0
 8006200:	4608      	mov	r0, r1
 8006202:	602b      	str	r3, [r5, #0]
 8006204:	f7fb f905 	bl	8001412 <_isatty>
 8006208:	1c43      	adds	r3, r0, #1
 800620a:	d102      	bne.n	8006212 <_isatty_r+0x1a>
 800620c:	682b      	ldr	r3, [r5, #0]
 800620e:	b103      	cbz	r3, 8006212 <_isatty_r+0x1a>
 8006210:	6023      	str	r3, [r4, #0]
 8006212:	bd38      	pop	{r3, r4, r5, pc}
 8006214:	20000200 	.word	0x20000200

08006218 <_lseek_r>:
 8006218:	b538      	push	{r3, r4, r5, lr}
 800621a:	4d07      	ldr	r5, [pc, #28]	; (8006238 <_lseek_r+0x20>)
 800621c:	4604      	mov	r4, r0
 800621e:	4608      	mov	r0, r1
 8006220:	4611      	mov	r1, r2
 8006222:	2200      	movs	r2, #0
 8006224:	602a      	str	r2, [r5, #0]
 8006226:	461a      	mov	r2, r3
 8006228:	f7fb f8fe 	bl	8001428 <_lseek>
 800622c:	1c43      	adds	r3, r0, #1
 800622e:	d102      	bne.n	8006236 <_lseek_r+0x1e>
 8006230:	682b      	ldr	r3, [r5, #0]
 8006232:	b103      	cbz	r3, 8006236 <_lseek_r+0x1e>
 8006234:	6023      	str	r3, [r4, #0]
 8006236:	bd38      	pop	{r3, r4, r5, pc}
 8006238:	20000200 	.word	0x20000200

0800623c <memcpy>:
 800623c:	440a      	add	r2, r1
 800623e:	4291      	cmp	r1, r2
 8006240:	f100 33ff 	add.w	r3, r0, #4294967295
 8006244:	d100      	bne.n	8006248 <memcpy+0xc>
 8006246:	4770      	bx	lr
 8006248:	b510      	push	{r4, lr}
 800624a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800624e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006252:	4291      	cmp	r1, r2
 8006254:	d1f9      	bne.n	800624a <memcpy+0xe>
 8006256:	bd10      	pop	{r4, pc}

08006258 <memmove>:
 8006258:	4288      	cmp	r0, r1
 800625a:	b510      	push	{r4, lr}
 800625c:	eb01 0402 	add.w	r4, r1, r2
 8006260:	d902      	bls.n	8006268 <memmove+0x10>
 8006262:	4284      	cmp	r4, r0
 8006264:	4623      	mov	r3, r4
 8006266:	d807      	bhi.n	8006278 <memmove+0x20>
 8006268:	1e43      	subs	r3, r0, #1
 800626a:	42a1      	cmp	r1, r4
 800626c:	d008      	beq.n	8006280 <memmove+0x28>
 800626e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006272:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006276:	e7f8      	b.n	800626a <memmove+0x12>
 8006278:	4402      	add	r2, r0
 800627a:	4601      	mov	r1, r0
 800627c:	428a      	cmp	r2, r1
 800627e:	d100      	bne.n	8006282 <memmove+0x2a>
 8006280:	bd10      	pop	{r4, pc}
 8006282:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006286:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800628a:	e7f7      	b.n	800627c <memmove+0x24>

0800628c <__malloc_lock>:
 800628c:	4801      	ldr	r0, [pc, #4]	; (8006294 <__malloc_lock+0x8>)
 800628e:	f7ff baf3 	b.w	8005878 <__retarget_lock_acquire_recursive>
 8006292:	bf00      	nop
 8006294:	200001f4 	.word	0x200001f4

08006298 <__malloc_unlock>:
 8006298:	4801      	ldr	r0, [pc, #4]	; (80062a0 <__malloc_unlock+0x8>)
 800629a:	f7ff baee 	b.w	800587a <__retarget_lock_release_recursive>
 800629e:	bf00      	nop
 80062a0:	200001f4 	.word	0x200001f4

080062a4 <_realloc_r>:
 80062a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80062a8:	4680      	mov	r8, r0
 80062aa:	4614      	mov	r4, r2
 80062ac:	460e      	mov	r6, r1
 80062ae:	b921      	cbnz	r1, 80062ba <_realloc_r+0x16>
 80062b0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80062b4:	4611      	mov	r1, r2
 80062b6:	f7ff bbb3 	b.w	8005a20 <_malloc_r>
 80062ba:	b92a      	cbnz	r2, 80062c8 <_realloc_r+0x24>
 80062bc:	f7ff fb44 	bl	8005948 <_free_r>
 80062c0:	4625      	mov	r5, r4
 80062c2:	4628      	mov	r0, r5
 80062c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80062c8:	f000 f82e 	bl	8006328 <_malloc_usable_size_r>
 80062cc:	4284      	cmp	r4, r0
 80062ce:	4607      	mov	r7, r0
 80062d0:	d802      	bhi.n	80062d8 <_realloc_r+0x34>
 80062d2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80062d6:	d812      	bhi.n	80062fe <_realloc_r+0x5a>
 80062d8:	4621      	mov	r1, r4
 80062da:	4640      	mov	r0, r8
 80062dc:	f7ff fba0 	bl	8005a20 <_malloc_r>
 80062e0:	4605      	mov	r5, r0
 80062e2:	2800      	cmp	r0, #0
 80062e4:	d0ed      	beq.n	80062c2 <_realloc_r+0x1e>
 80062e6:	42bc      	cmp	r4, r7
 80062e8:	4622      	mov	r2, r4
 80062ea:	4631      	mov	r1, r6
 80062ec:	bf28      	it	cs
 80062ee:	463a      	movcs	r2, r7
 80062f0:	f7ff ffa4 	bl	800623c <memcpy>
 80062f4:	4631      	mov	r1, r6
 80062f6:	4640      	mov	r0, r8
 80062f8:	f7ff fb26 	bl	8005948 <_free_r>
 80062fc:	e7e1      	b.n	80062c2 <_realloc_r+0x1e>
 80062fe:	4635      	mov	r5, r6
 8006300:	e7df      	b.n	80062c2 <_realloc_r+0x1e>
	...

08006304 <_read_r>:
 8006304:	b538      	push	{r3, r4, r5, lr}
 8006306:	4d07      	ldr	r5, [pc, #28]	; (8006324 <_read_r+0x20>)
 8006308:	4604      	mov	r4, r0
 800630a:	4608      	mov	r0, r1
 800630c:	4611      	mov	r1, r2
 800630e:	2200      	movs	r2, #0
 8006310:	602a      	str	r2, [r5, #0]
 8006312:	461a      	mov	r2, r3
 8006314:	f7fb f828 	bl	8001368 <_read>
 8006318:	1c43      	adds	r3, r0, #1
 800631a:	d102      	bne.n	8006322 <_read_r+0x1e>
 800631c:	682b      	ldr	r3, [r5, #0]
 800631e:	b103      	cbz	r3, 8006322 <_read_r+0x1e>
 8006320:	6023      	str	r3, [r4, #0]
 8006322:	bd38      	pop	{r3, r4, r5, pc}
 8006324:	20000200 	.word	0x20000200

08006328 <_malloc_usable_size_r>:
 8006328:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800632c:	1f18      	subs	r0, r3, #4
 800632e:	2b00      	cmp	r3, #0
 8006330:	bfbc      	itt	lt
 8006332:	580b      	ldrlt	r3, [r1, r0]
 8006334:	18c0      	addlt	r0, r0, r3
 8006336:	4770      	bx	lr

08006338 <_init>:
 8006338:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800633a:	bf00      	nop
 800633c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800633e:	bc08      	pop	{r3}
 8006340:	469e      	mov	lr, r3
 8006342:	4770      	bx	lr

08006344 <_fini>:
 8006344:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006346:	bf00      	nop
 8006348:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800634a:	bc08      	pop	{r3}
 800634c:	469e      	mov	lr, r3
 800634e:	4770      	bx	lr
