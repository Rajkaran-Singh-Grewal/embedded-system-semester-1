
rgrewalassignment3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005d14  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000be0  08005ea4  08005ea4  00015ea4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006a84  08006a84  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08006a84  08006a84  00016a84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006a8c  08006a8c  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006a8c  08006a8c  00016a8c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006a90  08006a90  00016a90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08006a94  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000180  20000070  08006b04  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001f0  08006b04  000201f0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010d88  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002394  00000000  00000000  00030e28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e98  00000000  00000000  000331c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  00023594  00000000  00000000  00034058  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   00010c87  00000000  00000000  000575ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    000d624b  00000000  00000000  00068273  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000050  00000000  00000000  0013e4be  2**0
                  CONTENTS, READONLY
 19 .debug_ranges 00000d98  00000000  00000000  0013e510  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000044b4  00000000  00000000  0013f2a8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005e8c 	.word	0x08005e8c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	08005e8c 	.word	0x08005e8c

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b974 	b.w	8000570 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	468e      	mov	lr, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	d14d      	bne.n	800034a <__udivmoddi4+0xaa>
 80002ae:	428a      	cmp	r2, r1
 80002b0:	4694      	mov	ip, r2
 80002b2:	d969      	bls.n	8000388 <__udivmoddi4+0xe8>
 80002b4:	fab2 f282 	clz	r2, r2
 80002b8:	b152      	cbz	r2, 80002d0 <__udivmoddi4+0x30>
 80002ba:	fa01 f302 	lsl.w	r3, r1, r2
 80002be:	f1c2 0120 	rsb	r1, r2, #32
 80002c2:	fa20 f101 	lsr.w	r1, r0, r1
 80002c6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ca:	ea41 0e03 	orr.w	lr, r1, r3
 80002ce:	4094      	lsls	r4, r2
 80002d0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002d4:	0c21      	lsrs	r1, r4, #16
 80002d6:	fbbe f6f8 	udiv	r6, lr, r8
 80002da:	fa1f f78c 	uxth.w	r7, ip
 80002de:	fb08 e316 	mls	r3, r8, r6, lr
 80002e2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002e6:	fb06 f107 	mul.w	r1, r6, r7
 80002ea:	4299      	cmp	r1, r3
 80002ec:	d90a      	bls.n	8000304 <__udivmoddi4+0x64>
 80002ee:	eb1c 0303 	adds.w	r3, ip, r3
 80002f2:	f106 30ff 	add.w	r0, r6, #4294967295
 80002f6:	f080 811f 	bcs.w	8000538 <__udivmoddi4+0x298>
 80002fa:	4299      	cmp	r1, r3
 80002fc:	f240 811c 	bls.w	8000538 <__udivmoddi4+0x298>
 8000300:	3e02      	subs	r6, #2
 8000302:	4463      	add	r3, ip
 8000304:	1a5b      	subs	r3, r3, r1
 8000306:	b2a4      	uxth	r4, r4
 8000308:	fbb3 f0f8 	udiv	r0, r3, r8
 800030c:	fb08 3310 	mls	r3, r8, r0, r3
 8000310:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000314:	fb00 f707 	mul.w	r7, r0, r7
 8000318:	42a7      	cmp	r7, r4
 800031a:	d90a      	bls.n	8000332 <__udivmoddi4+0x92>
 800031c:	eb1c 0404 	adds.w	r4, ip, r4
 8000320:	f100 33ff 	add.w	r3, r0, #4294967295
 8000324:	f080 810a 	bcs.w	800053c <__udivmoddi4+0x29c>
 8000328:	42a7      	cmp	r7, r4
 800032a:	f240 8107 	bls.w	800053c <__udivmoddi4+0x29c>
 800032e:	4464      	add	r4, ip
 8000330:	3802      	subs	r0, #2
 8000332:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000336:	1be4      	subs	r4, r4, r7
 8000338:	2600      	movs	r6, #0
 800033a:	b11d      	cbz	r5, 8000344 <__udivmoddi4+0xa4>
 800033c:	40d4      	lsrs	r4, r2
 800033e:	2300      	movs	r3, #0
 8000340:	e9c5 4300 	strd	r4, r3, [r5]
 8000344:	4631      	mov	r1, r6
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	428b      	cmp	r3, r1
 800034c:	d909      	bls.n	8000362 <__udivmoddi4+0xc2>
 800034e:	2d00      	cmp	r5, #0
 8000350:	f000 80ef 	beq.w	8000532 <__udivmoddi4+0x292>
 8000354:	2600      	movs	r6, #0
 8000356:	e9c5 0100 	strd	r0, r1, [r5]
 800035a:	4630      	mov	r0, r6
 800035c:	4631      	mov	r1, r6
 800035e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000362:	fab3 f683 	clz	r6, r3
 8000366:	2e00      	cmp	r6, #0
 8000368:	d14a      	bne.n	8000400 <__udivmoddi4+0x160>
 800036a:	428b      	cmp	r3, r1
 800036c:	d302      	bcc.n	8000374 <__udivmoddi4+0xd4>
 800036e:	4282      	cmp	r2, r0
 8000370:	f200 80f9 	bhi.w	8000566 <__udivmoddi4+0x2c6>
 8000374:	1a84      	subs	r4, r0, r2
 8000376:	eb61 0303 	sbc.w	r3, r1, r3
 800037a:	2001      	movs	r0, #1
 800037c:	469e      	mov	lr, r3
 800037e:	2d00      	cmp	r5, #0
 8000380:	d0e0      	beq.n	8000344 <__udivmoddi4+0xa4>
 8000382:	e9c5 4e00 	strd	r4, lr, [r5]
 8000386:	e7dd      	b.n	8000344 <__udivmoddi4+0xa4>
 8000388:	b902      	cbnz	r2, 800038c <__udivmoddi4+0xec>
 800038a:	deff      	udf	#255	; 0xff
 800038c:	fab2 f282 	clz	r2, r2
 8000390:	2a00      	cmp	r2, #0
 8000392:	f040 8092 	bne.w	80004ba <__udivmoddi4+0x21a>
 8000396:	eba1 010c 	sub.w	r1, r1, ip
 800039a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800039e:	fa1f fe8c 	uxth.w	lr, ip
 80003a2:	2601      	movs	r6, #1
 80003a4:	0c20      	lsrs	r0, r4, #16
 80003a6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003aa:	fb07 1113 	mls	r1, r7, r3, r1
 80003ae:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003b2:	fb0e f003 	mul.w	r0, lr, r3
 80003b6:	4288      	cmp	r0, r1
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x12c>
 80003ba:	eb1c 0101 	adds.w	r1, ip, r1
 80003be:	f103 38ff 	add.w	r8, r3, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x12a>
 80003c4:	4288      	cmp	r0, r1
 80003c6:	f200 80cb 	bhi.w	8000560 <__udivmoddi4+0x2c0>
 80003ca:	4643      	mov	r3, r8
 80003cc:	1a09      	subs	r1, r1, r0
 80003ce:	b2a4      	uxth	r4, r4
 80003d0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003d4:	fb07 1110 	mls	r1, r7, r0, r1
 80003d8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003dc:	fb0e fe00 	mul.w	lr, lr, r0
 80003e0:	45a6      	cmp	lr, r4
 80003e2:	d908      	bls.n	80003f6 <__udivmoddi4+0x156>
 80003e4:	eb1c 0404 	adds.w	r4, ip, r4
 80003e8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003ec:	d202      	bcs.n	80003f4 <__udivmoddi4+0x154>
 80003ee:	45a6      	cmp	lr, r4
 80003f0:	f200 80bb 	bhi.w	800056a <__udivmoddi4+0x2ca>
 80003f4:	4608      	mov	r0, r1
 80003f6:	eba4 040e 	sub.w	r4, r4, lr
 80003fa:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003fe:	e79c      	b.n	800033a <__udivmoddi4+0x9a>
 8000400:	f1c6 0720 	rsb	r7, r6, #32
 8000404:	40b3      	lsls	r3, r6
 8000406:	fa22 fc07 	lsr.w	ip, r2, r7
 800040a:	ea4c 0c03 	orr.w	ip, ip, r3
 800040e:	fa20 f407 	lsr.w	r4, r0, r7
 8000412:	fa01 f306 	lsl.w	r3, r1, r6
 8000416:	431c      	orrs	r4, r3
 8000418:	40f9      	lsrs	r1, r7
 800041a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800041e:	fa00 f306 	lsl.w	r3, r0, r6
 8000422:	fbb1 f8f9 	udiv	r8, r1, r9
 8000426:	0c20      	lsrs	r0, r4, #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fb09 1118 	mls	r1, r9, r8, r1
 8000430:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000434:	fb08 f00e 	mul.w	r0, r8, lr
 8000438:	4288      	cmp	r0, r1
 800043a:	fa02 f206 	lsl.w	r2, r2, r6
 800043e:	d90b      	bls.n	8000458 <__udivmoddi4+0x1b8>
 8000440:	eb1c 0101 	adds.w	r1, ip, r1
 8000444:	f108 3aff 	add.w	sl, r8, #4294967295
 8000448:	f080 8088 	bcs.w	800055c <__udivmoddi4+0x2bc>
 800044c:	4288      	cmp	r0, r1
 800044e:	f240 8085 	bls.w	800055c <__udivmoddi4+0x2bc>
 8000452:	f1a8 0802 	sub.w	r8, r8, #2
 8000456:	4461      	add	r1, ip
 8000458:	1a09      	subs	r1, r1, r0
 800045a:	b2a4      	uxth	r4, r4
 800045c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000460:	fb09 1110 	mls	r1, r9, r0, r1
 8000464:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000468:	fb00 fe0e 	mul.w	lr, r0, lr
 800046c:	458e      	cmp	lr, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x1e2>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f100 34ff 	add.w	r4, r0, #4294967295
 8000478:	d26c      	bcs.n	8000554 <__udivmoddi4+0x2b4>
 800047a:	458e      	cmp	lr, r1
 800047c:	d96a      	bls.n	8000554 <__udivmoddi4+0x2b4>
 800047e:	3802      	subs	r0, #2
 8000480:	4461      	add	r1, ip
 8000482:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000486:	fba0 9402 	umull	r9, r4, r0, r2
 800048a:	eba1 010e 	sub.w	r1, r1, lr
 800048e:	42a1      	cmp	r1, r4
 8000490:	46c8      	mov	r8, r9
 8000492:	46a6      	mov	lr, r4
 8000494:	d356      	bcc.n	8000544 <__udivmoddi4+0x2a4>
 8000496:	d053      	beq.n	8000540 <__udivmoddi4+0x2a0>
 8000498:	b15d      	cbz	r5, 80004b2 <__udivmoddi4+0x212>
 800049a:	ebb3 0208 	subs.w	r2, r3, r8
 800049e:	eb61 010e 	sbc.w	r1, r1, lr
 80004a2:	fa01 f707 	lsl.w	r7, r1, r7
 80004a6:	fa22 f306 	lsr.w	r3, r2, r6
 80004aa:	40f1      	lsrs	r1, r6
 80004ac:	431f      	orrs	r7, r3
 80004ae:	e9c5 7100 	strd	r7, r1, [r5]
 80004b2:	2600      	movs	r6, #0
 80004b4:	4631      	mov	r1, r6
 80004b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	40d8      	lsrs	r0, r3
 80004c0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c4:	fa21 f303 	lsr.w	r3, r1, r3
 80004c8:	4091      	lsls	r1, r2
 80004ca:	4301      	orrs	r1, r0
 80004cc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d0:	fa1f fe8c 	uxth.w	lr, ip
 80004d4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004d8:	fb07 3610 	mls	r6, r7, r0, r3
 80004dc:	0c0b      	lsrs	r3, r1, #16
 80004de:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004e2:	fb00 f60e 	mul.w	r6, r0, lr
 80004e6:	429e      	cmp	r6, r3
 80004e8:	fa04 f402 	lsl.w	r4, r4, r2
 80004ec:	d908      	bls.n	8000500 <__udivmoddi4+0x260>
 80004ee:	eb1c 0303 	adds.w	r3, ip, r3
 80004f2:	f100 38ff 	add.w	r8, r0, #4294967295
 80004f6:	d22f      	bcs.n	8000558 <__udivmoddi4+0x2b8>
 80004f8:	429e      	cmp	r6, r3
 80004fa:	d92d      	bls.n	8000558 <__udivmoddi4+0x2b8>
 80004fc:	3802      	subs	r0, #2
 80004fe:	4463      	add	r3, ip
 8000500:	1b9b      	subs	r3, r3, r6
 8000502:	b289      	uxth	r1, r1
 8000504:	fbb3 f6f7 	udiv	r6, r3, r7
 8000508:	fb07 3316 	mls	r3, r7, r6, r3
 800050c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000510:	fb06 f30e 	mul.w	r3, r6, lr
 8000514:	428b      	cmp	r3, r1
 8000516:	d908      	bls.n	800052a <__udivmoddi4+0x28a>
 8000518:	eb1c 0101 	adds.w	r1, ip, r1
 800051c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000520:	d216      	bcs.n	8000550 <__udivmoddi4+0x2b0>
 8000522:	428b      	cmp	r3, r1
 8000524:	d914      	bls.n	8000550 <__udivmoddi4+0x2b0>
 8000526:	3e02      	subs	r6, #2
 8000528:	4461      	add	r1, ip
 800052a:	1ac9      	subs	r1, r1, r3
 800052c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000530:	e738      	b.n	80003a4 <__udivmoddi4+0x104>
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e705      	b.n	8000344 <__udivmoddi4+0xa4>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e3      	b.n	8000304 <__udivmoddi4+0x64>
 800053c:	4618      	mov	r0, r3
 800053e:	e6f8      	b.n	8000332 <__udivmoddi4+0x92>
 8000540:	454b      	cmp	r3, r9
 8000542:	d2a9      	bcs.n	8000498 <__udivmoddi4+0x1f8>
 8000544:	ebb9 0802 	subs.w	r8, r9, r2
 8000548:	eb64 0e0c 	sbc.w	lr, r4, ip
 800054c:	3801      	subs	r0, #1
 800054e:	e7a3      	b.n	8000498 <__udivmoddi4+0x1f8>
 8000550:	4646      	mov	r6, r8
 8000552:	e7ea      	b.n	800052a <__udivmoddi4+0x28a>
 8000554:	4620      	mov	r0, r4
 8000556:	e794      	b.n	8000482 <__udivmoddi4+0x1e2>
 8000558:	4640      	mov	r0, r8
 800055a:	e7d1      	b.n	8000500 <__udivmoddi4+0x260>
 800055c:	46d0      	mov	r8, sl
 800055e:	e77b      	b.n	8000458 <__udivmoddi4+0x1b8>
 8000560:	3b02      	subs	r3, #2
 8000562:	4461      	add	r1, ip
 8000564:	e732      	b.n	80003cc <__udivmoddi4+0x12c>
 8000566:	4630      	mov	r0, r6
 8000568:	e709      	b.n	800037e <__udivmoddi4+0xde>
 800056a:	4464      	add	r4, ip
 800056c:	3802      	subs	r0, #2
 800056e:	e742      	b.n	80003f6 <__udivmoddi4+0x156>

08000570 <__aeabi_idiv0>:
 8000570:	4770      	bx	lr
 8000572:	bf00      	nop

08000574 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000574:	b580      	push	{r7, lr}
 8000576:	b09a      	sub	sp, #104	; 0x68
 8000578:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800057a:	f000 ff2c 	bl	80013d6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800057e:	f000 f957 	bl	8000830 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000582:	f000 fa83 	bl	8000a8c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000586:	f000 fa51 	bl	8000a2c <MX_USART2_UART_Init>
  MX_ADC1_Init();
 800058a:	f000 f9b3 	bl	80008f4 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */

  ssd1331_init();
 800058e:	f000 fc37 	bl	8000e00 <ssd1331_init>
  ssd1331_clear_screen(BLACK);
 8000592:	2000      	movs	r0, #0
 8000594:	f000 fc0f 	bl	8000db6 <ssd1331_clear_screen>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  char str[80] = "Temp = 0C";
 8000598:	4a9e      	ldr	r2, [pc, #632]	; (8000814 <main+0x2a0>)
 800059a:	463b      	mov	r3, r7
 800059c:	ca07      	ldmia	r2, {r0, r1, r2}
 800059e:	c303      	stmia	r3!, {r0, r1}
 80005a0:	801a      	strh	r2, [r3, #0]
 80005a2:	f107 030a 	add.w	r3, r7, #10
 80005a6:	2246      	movs	r2, #70	; 0x46
 80005a8:	2100      	movs	r1, #0
 80005aa:	4618      	mov	r0, r3
 80005ac:	f004 fbf8 	bl	8004da0 <memset>
  uint32_t temp;
  ssd1331_display_string(0,0,str,FONT_1608,WHITE);
 80005b0:	463a      	mov	r2, r7
 80005b2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80005b6:	9300      	str	r3, [sp, #0]
 80005b8:	2310      	movs	r3, #16
 80005ba:	2100      	movs	r1, #0
 80005bc:	2000      	movs	r0, #0
 80005be:	f000 fbb1 	bl	8000d24 <ssd1331_display_string>
  char color = 'w';
 80005c2:	2377      	movs	r3, #119	; 0x77
 80005c4:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
  char prevColor = 'w';
 80005c8:	2377      	movs	r3, #119	; 0x77
 80005ca:	f887 305a 	strb.w	r3, [r7, #90]	; 0x5a
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
    if(HAL_ADC_Start(&hadc1) != HAL_OK){
 80005ce:	4892      	ldr	r0, [pc, #584]	; (8000818 <main+0x2a4>)
 80005d0:	f001 faaa 	bl	8001b28 <HAL_ADC_Start>
 80005d4:	4603      	mov	r3, r0
 80005d6:	2b00      	cmp	r3, #0
 80005d8:	d002      	beq.n	80005e0 <main+0x6c>
      printf("HAL_ADC_Start Error \r\n");
 80005da:	4890      	ldr	r0, [pc, #576]	; (800081c <main+0x2a8>)
 80005dc:	f004 fc56 	bl	8004e8c <puts>
    }
    if(HAL_ADC_PollForConversion(&hadc1,10) != HAL_OK){
 80005e0:	210a      	movs	r1, #10
 80005e2:	488d      	ldr	r0, [pc, #564]	; (8000818 <main+0x2a4>)
 80005e4:	f001 fb03 	bl	8001bee <HAL_ADC_PollForConversion>
 80005e8:	4603      	mov	r3, r0
 80005ea:	2b00      	cmp	r3, #0
 80005ec:	d003      	beq.n	80005f6 <main+0x82>
      printf("HAL_ADC_PollForConversion Error \r\n");
 80005ee:	488c      	ldr	r0, [pc, #560]	; (8000820 <main+0x2ac>)
 80005f0:	f004 fc4c 	bl	8004e8c <puts>
 80005f4:	e003      	b.n	80005fe <main+0x8a>
    }else{
      temp = HAL_ADC_GetValue(&hadc1);
 80005f6:	4888      	ldr	r0, [pc, #544]	; (8000818 <main+0x2a4>)
 80005f8:	f001 fb88 	bl	8001d0c <HAL_ADC_GetValue>
 80005fc:	65f8      	str	r0, [r7, #92]	; 0x5c
    }
    float floatTemp = (temp - 500)/10;
 80005fe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000600:	f5a3 73fa 	sub.w	r3, r3, #500	; 0x1f4
 8000604:	4a87      	ldr	r2, [pc, #540]	; (8000824 <main+0x2b0>)
 8000606:	fba2 2303 	umull	r2, r3, r2, r3
 800060a:	08db      	lsrs	r3, r3, #3
 800060c:	ee07 3a90 	vmov	s15, r3
 8000610:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000614:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
    temp = (temp - 500)/10;
 8000618:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800061a:	f5a3 73fa 	sub.w	r3, r3, #500	; 0x1f4
 800061e:	4a81      	ldr	r2, [pc, #516]	; (8000824 <main+0x2b0>)
 8000620:	fba2 2303 	umull	r2, r3, r2, r3
 8000624:	08db      	lsrs	r3, r3, #3
 8000626:	65fb      	str	r3, [r7, #92]	; 0x5c
    int decimalTemp = (floatTemp - temp) * 100;
 8000628:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800062a:	ee07 3a90 	vmov	s15, r3
 800062e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000632:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 8000636:	ee77 7a67 	vsub.f32	s15, s14, s15
 800063a:	ed9f 7a7b 	vldr	s14, [pc, #492]	; 8000828 <main+0x2b4>
 800063e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000642:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000646:	ee17 3a90 	vmov	r3, s15
 800064a:	653b      	str	r3, [r7, #80]	; 0x50
    if(temp > -15){
 800064c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800064e:	f113 0f0f 	cmn.w	r3, #15
 8000652:	d903      	bls.n	800065c <main+0xe8>
      color = 'w';
 8000654:	2377      	movs	r3, #119	; 0x77
 8000656:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
 800065a:	e022      	b.n	80006a2 <main+0x12e>
    }else if(color < 5 && color > -15){
 800065c:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8000660:	2b04      	cmp	r3, #4
 8000662:	d803      	bhi.n	800066c <main+0xf8>
      color = 'b';
 8000664:	2362      	movs	r3, #98	; 0x62
 8000666:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
 800066a:	e01a      	b.n	80006a2 <main+0x12e>
    }else if(color < 15 && color > 5){
 800066c:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8000670:	2b0e      	cmp	r3, #14
 8000672:	d807      	bhi.n	8000684 <main+0x110>
 8000674:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8000678:	2b05      	cmp	r3, #5
 800067a:	d903      	bls.n	8000684 <main+0x110>
      color = 'y';
 800067c:	2379      	movs	r3, #121	; 0x79
 800067e:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
 8000682:	e00e      	b.n	80006a2 <main+0x12e>
    }else if(color < 25 && color > 15){
 8000684:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8000688:	2b18      	cmp	r3, #24
 800068a:	d807      	bhi.n	800069c <main+0x128>
 800068c:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8000690:	2b0f      	cmp	r3, #15
 8000692:	d903      	bls.n	800069c <main+0x128>
      color = 'o';
 8000694:	236f      	movs	r3, #111	; 0x6f
 8000696:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
 800069a:	e002      	b.n	80006a2 <main+0x12e>
    }else{
      color = 'r';
 800069c:	2372      	movs	r3, #114	; 0x72
 800069e:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
    }
    if(prevColor != color){
 80006a2:	f897 205a 	ldrb.w	r2, [r7, #90]	; 0x5a
 80006a6:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 80006aa:	429a      	cmp	r2, r3
 80006ac:	d002      	beq.n	80006b4 <main+0x140>
      ssd1331_clear_screen(BLACK);
 80006ae:	2000      	movs	r0, #0
 80006b0:	f000 fb81 	bl	8000db6 <ssd1331_clear_screen>
    }
    prevColor = color;
 80006b4:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 80006b8:	f887 305a 	strb.w	r3, [r7, #90]	; 0x5a
    
    sprintf(str,"Temp = %d.%d C",temp,decimalTemp);
 80006bc:	4638      	mov	r0, r7
 80006be:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80006c0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80006c2:	495a      	ldr	r1, [pc, #360]	; (800082c <main+0x2b8>)
 80006c4:	f004 fbea 	bl	8004e9c <siprintf>
    ssd1331_display_string(0,0,str,FONT_1608,WHITE);
 80006c8:	463a      	mov	r2, r7
 80006ca:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80006ce:	9300      	str	r3, [sp, #0]
 80006d0:	2310      	movs	r3, #16
 80006d2:	2100      	movs	r1, #0
 80006d4:	2000      	movs	r0, #0
 80006d6:	f000 fb25 	bl	8000d24 <ssd1331_display_string>
    switch(color){
 80006da:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 80006de:	3b62      	subs	r3, #98	; 0x62
 80006e0:	2b17      	cmp	r3, #23
 80006e2:	f200 8092 	bhi.w	800080a <main+0x296>
 80006e6:	a201      	add	r2, pc, #4	; (adr r2, 80006ec <main+0x178>)
 80006e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80006ec:	08000773 	.word	0x08000773
 80006f0:	0800080b 	.word	0x0800080b
 80006f4:	0800080b 	.word	0x0800080b
 80006f8:	0800080b 	.word	0x0800080b
 80006fc:	0800080b 	.word	0x0800080b
 8000700:	0800080b 	.word	0x0800080b
 8000704:	0800080b 	.word	0x0800080b
 8000708:	0800080b 	.word	0x0800080b
 800070c:	0800080b 	.word	0x0800080b
 8000710:	0800080b 	.word	0x0800080b
 8000714:	0800080b 	.word	0x0800080b
 8000718:	0800080b 	.word	0x0800080b
 800071c:	0800080b 	.word	0x0800080b
 8000720:	080007bf 	.word	0x080007bf
 8000724:	0800080b 	.word	0x0800080b
 8000728:	0800080b 	.word	0x0800080b
 800072c:	080007e5 	.word	0x080007e5
 8000730:	0800080b 	.word	0x0800080b
 8000734:	0800080b 	.word	0x0800080b
 8000738:	0800080b 	.word	0x0800080b
 800073c:	0800080b 	.word	0x0800080b
 8000740:	0800074d 	.word	0x0800074d
 8000744:	0800080b 	.word	0x0800080b
 8000748:	08000799 	.word	0x08000799
      case 'w':
        HAL_GPIO_WritePin(GPIOA, LED_BLUE_Pin,GPIO_PIN_SET);
 800074c:	2201      	movs	r2, #1
 800074e:	2108      	movs	r1, #8
 8000750:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000754:	f002 f99e 	bl	8002a94 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOA, LED_RED_Pin, GPIO_PIN_SET);
 8000758:	2201      	movs	r2, #1
 800075a:	2120      	movs	r1, #32
 800075c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000760:	f002 f998 	bl	8002a94 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOA, LED_GREEN_Pin,GPIO_PIN_SET);
 8000764:	2201      	movs	r2, #1
 8000766:	2110      	movs	r1, #16
 8000768:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800076c:	f002 f992 	bl	8002a94 <HAL_GPIO_WritePin>
        break;
 8000770:	e04b      	b.n	800080a <main+0x296>
      case 'b':
        HAL_GPIO_WritePin(GPIOA, LED_BLUE_Pin,GPIO_PIN_SET);
 8000772:	2201      	movs	r2, #1
 8000774:	2108      	movs	r1, #8
 8000776:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800077a:	f002 f98b 	bl	8002a94 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOA, LED_RED_Pin, GPIO_PIN_RESET);
 800077e:	2200      	movs	r2, #0
 8000780:	2120      	movs	r1, #32
 8000782:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000786:	f002 f985 	bl	8002a94 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOA, LED_GREEN_Pin,GPIO_PIN_RESET);
 800078a:	2200      	movs	r2, #0
 800078c:	2110      	movs	r1, #16
 800078e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000792:	f002 f97f 	bl	8002a94 <HAL_GPIO_WritePin>
        break;
 8000796:	e038      	b.n	800080a <main+0x296>
      case 'y':
        HAL_GPIO_WritePin(GPIOA, LED_BLUE_Pin,GPIO_PIN_RESET);
 8000798:	2200      	movs	r2, #0
 800079a:	2108      	movs	r1, #8
 800079c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007a0:	f002 f978 	bl	8002a94 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOA, LED_RED_Pin, GPIO_PIN_SET);
 80007a4:	2201      	movs	r2, #1
 80007a6:	2120      	movs	r1, #32
 80007a8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007ac:	f002 f972 	bl	8002a94 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOA, LED_GREEN_Pin,GPIO_PIN_SET);
 80007b0:	2201      	movs	r2, #1
 80007b2:	2110      	movs	r1, #16
 80007b4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007b8:	f002 f96c 	bl	8002a94 <HAL_GPIO_WritePin>
        break;
 80007bc:	e025      	b.n	800080a <main+0x296>
      case 'o':
        HAL_GPIO_WritePin(GPIOA, LED_BLUE_Pin,GPIO_PIN_RESET);
 80007be:	2200      	movs	r2, #0
 80007c0:	2108      	movs	r1, #8
 80007c2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007c6:	f002 f965 	bl	8002a94 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOA, LED_RED_Pin, GPIO_PIN_RESET);
 80007ca:	2200      	movs	r2, #0
 80007cc:	2120      	movs	r1, #32
 80007ce:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007d2:	f002 f95f 	bl	8002a94 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOA, LED_GREEN_Pin,GPIO_PIN_SET);
 80007d6:	2201      	movs	r2, #1
 80007d8:	2110      	movs	r1, #16
 80007da:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007de:	f002 f959 	bl	8002a94 <HAL_GPIO_WritePin>
        break;
 80007e2:	e012      	b.n	800080a <main+0x296>
      case 'r':
        HAL_GPIO_WritePin(GPIOA, LED_BLUE_Pin,GPIO_PIN_RESET);
 80007e4:	2200      	movs	r2, #0
 80007e6:	2108      	movs	r1, #8
 80007e8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007ec:	f002 f952 	bl	8002a94 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOA, LED_RED_Pin, GPIO_PIN_SET);
 80007f0:	2201      	movs	r2, #1
 80007f2:	2120      	movs	r1, #32
 80007f4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007f8:	f002 f94c 	bl	8002a94 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOA, LED_GREEN_Pin,GPIO_PIN_RESET);
 80007fc:	2200      	movs	r2, #0
 80007fe:	2110      	movs	r1, #16
 8000800:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000804:	f002 f946 	bl	8002a94 <HAL_GPIO_WritePin>
        break;
 8000808:	bf00      	nop
    }
    HAL_Delay(1000);
 800080a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800080e:	f000 fe57 	bl	80014c0 <HAL_Delay>
  {
 8000812:	e6dc      	b.n	80005ce <main+0x5a>
 8000814:	08005ef0 	.word	0x08005ef0
 8000818:	200000f0 	.word	0x200000f0
 800081c:	08005ea4 	.word	0x08005ea4
 8000820:	08005ebc 	.word	0x08005ebc
 8000824:	cccccccd 	.word	0xcccccccd
 8000828:	42c80000 	.word	0x42c80000
 800082c:	08005ee0 	.word	0x08005ee0

08000830 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000830:	b580      	push	{r7, lr}
 8000832:	b096      	sub	sp, #88	; 0x58
 8000834:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000836:	f107 0314 	add.w	r3, r7, #20
 800083a:	2244      	movs	r2, #68	; 0x44
 800083c:	2100      	movs	r1, #0
 800083e:	4618      	mov	r0, r3
 8000840:	f004 faae 	bl	8004da0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000844:	463b      	mov	r3, r7
 8000846:	2200      	movs	r2, #0
 8000848:	601a      	str	r2, [r3, #0]
 800084a:	605a      	str	r2, [r3, #4]
 800084c:	609a      	str	r2, [r3, #8]
 800084e:	60da      	str	r2, [r3, #12]
 8000850:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000852:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000856:	f002 f953 	bl	8002b00 <HAL_PWREx_ControlVoltageScaling>
 800085a:	4603      	mov	r3, r0
 800085c:	2b00      	cmp	r3, #0
 800085e:	d001      	beq.n	8000864 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000860:	f000 f974 	bl	8000b4c <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000864:	f002 f92e 	bl	8002ac4 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000868:	4b21      	ldr	r3, [pc, #132]	; (80008f0 <SystemClock_Config+0xc0>)
 800086a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800086e:	4a20      	ldr	r2, [pc, #128]	; (80008f0 <SystemClock_Config+0xc0>)
 8000870:	f023 0318 	bic.w	r3, r3, #24
 8000874:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8000878:	2314      	movs	r3, #20
 800087a:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800087c:	2301      	movs	r3, #1
 800087e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000880:	2301      	movs	r3, #1
 8000882:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000884:	2300      	movs	r3, #0
 8000886:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000888:	2360      	movs	r3, #96	; 0x60
 800088a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800088c:	2302      	movs	r3, #2
 800088e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000890:	2301      	movs	r3, #1
 8000892:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000894:	2301      	movs	r3, #1
 8000896:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 16;
 8000898:	2310      	movs	r3, #16
 800089a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800089c:	2307      	movs	r3, #7
 800089e:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80008a0:	2302      	movs	r3, #2
 80008a2:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80008a4:	2302      	movs	r3, #2
 80008a6:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008a8:	f107 0314 	add.w	r3, r7, #20
 80008ac:	4618      	mov	r0, r3
 80008ae:	f002 f97d 	bl	8002bac <HAL_RCC_OscConfig>
 80008b2:	4603      	mov	r3, r0
 80008b4:	2b00      	cmp	r3, #0
 80008b6:	d001      	beq.n	80008bc <SystemClock_Config+0x8c>
  {
    Error_Handler();
 80008b8:	f000 f948 	bl	8000b4c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008bc:	230f      	movs	r3, #15
 80008be:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008c0:	2303      	movs	r3, #3
 80008c2:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008c4:	2300      	movs	r3, #0
 80008c6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80008c8:	2300      	movs	r3, #0
 80008ca:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80008cc:	2300      	movs	r3, #0
 80008ce:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80008d0:	463b      	mov	r3, r7
 80008d2:	2101      	movs	r1, #1
 80008d4:	4618      	mov	r0, r3
 80008d6:	f002 fd7d 	bl	80033d4 <HAL_RCC_ClockConfig>
 80008da:	4603      	mov	r3, r0
 80008dc:	2b00      	cmp	r3, #0
 80008de:	d001      	beq.n	80008e4 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 80008e0:	f000 f934 	bl	8000b4c <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 80008e4:	f003 f990 	bl	8003c08 <HAL_RCCEx_EnableMSIPLLMode>
}
 80008e8:	bf00      	nop
 80008ea:	3758      	adds	r7, #88	; 0x58
 80008ec:	46bd      	mov	sp, r7
 80008ee:	bd80      	pop	{r7, pc}
 80008f0:	40021000 	.word	0x40021000

080008f4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80008f4:	b580      	push	{r7, lr}
 80008f6:	b086      	sub	sp, #24
 80008f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80008fa:	463b      	mov	r3, r7
 80008fc:	2200      	movs	r2, #0
 80008fe:	601a      	str	r2, [r3, #0]
 8000900:	605a      	str	r2, [r3, #4]
 8000902:	609a      	str	r2, [r3, #8]
 8000904:	60da      	str	r2, [r3, #12]
 8000906:	611a      	str	r2, [r3, #16]
 8000908:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800090a:	4b43      	ldr	r3, [pc, #268]	; (8000a18 <MX_ADC1_Init+0x124>)
 800090c:	4a43      	ldr	r2, [pc, #268]	; (8000a1c <MX_ADC1_Init+0x128>)
 800090e:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000910:	4b41      	ldr	r3, [pc, #260]	; (8000a18 <MX_ADC1_Init+0x124>)
 8000912:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000916:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000918:	4b3f      	ldr	r3, [pc, #252]	; (8000a18 <MX_ADC1_Init+0x124>)
 800091a:	2200      	movs	r2, #0
 800091c:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800091e:	4b3e      	ldr	r3, [pc, #248]	; (8000a18 <MX_ADC1_Init+0x124>)
 8000920:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000924:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000926:	4b3c      	ldr	r3, [pc, #240]	; (8000a18 <MX_ADC1_Init+0x124>)
 8000928:	2200      	movs	r2, #0
 800092a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800092c:	4b3a      	ldr	r3, [pc, #232]	; (8000a18 <MX_ADC1_Init+0x124>)
 800092e:	2200      	movs	r2, #0
 8000930:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000932:	4b39      	ldr	r3, [pc, #228]	; (8000a18 <MX_ADC1_Init+0x124>)
 8000934:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000938:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 800093a:	4b37      	ldr	r3, [pc, #220]	; (8000a18 <MX_ADC1_Init+0x124>)
 800093c:	2210      	movs	r2, #16
 800093e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000940:	4b35      	ldr	r3, [pc, #212]	; (8000a18 <MX_ADC1_Init+0x124>)
 8000942:	2200      	movs	r2, #0
 8000944:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000946:	4b34      	ldr	r3, [pc, #208]	; (8000a18 <MX_ADC1_Init+0x124>)
 8000948:	2200      	movs	r2, #0
 800094a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800094c:	4b32      	ldr	r3, [pc, #200]	; (8000a18 <MX_ADC1_Init+0x124>)
 800094e:	2200      	movs	r2, #0
 8000950:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000952:	4b31      	ldr	r3, [pc, #196]	; (8000a18 <MX_ADC1_Init+0x124>)
 8000954:	2207      	movs	r2, #7
 8000956:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000958:	4b2f      	ldr	r3, [pc, #188]	; (8000a18 <MX_ADC1_Init+0x124>)
 800095a:	2200      	movs	r2, #0
 800095c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800095e:	4b2e      	ldr	r3, [pc, #184]	; (8000a18 <MX_ADC1_Init+0x124>)
 8000960:	2208      	movs	r2, #8
 8000962:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000964:	482c      	ldr	r0, [pc, #176]	; (8000a18 <MX_ADC1_Init+0x124>)
 8000966:	f003 fa51 	bl	8003e0c <HAL_SPI_Init>
 800096a:	4603      	mov	r3, r0
 800096c:	2b00      	cmp	r3, #0
 800096e:	d001      	beq.n	8000974 <MX_ADC1_Init+0x80>
  {
    Error_Handler();
 8000970:	f000 f8ec 	bl	8000b4c <Error_Handler>
  
  /* USER CODE END SPI1_Init 2 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000974:	4b2a      	ldr	r3, [pc, #168]	; (8000a20 <MX_ADC1_Init+0x12c>)
 8000976:	4a2b      	ldr	r2, [pc, #172]	; (8000a24 <MX_ADC1_Init+0x130>)
 8000978:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800097a:	4b29      	ldr	r3, [pc, #164]	; (8000a20 <MX_ADC1_Init+0x12c>)
 800097c:	2200      	movs	r2, #0
 800097e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000980:	4b27      	ldr	r3, [pc, #156]	; (8000a20 <MX_ADC1_Init+0x12c>)
 8000982:	2200      	movs	r2, #0
 8000984:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000986:	4b26      	ldr	r3, [pc, #152]	; (8000a20 <MX_ADC1_Init+0x12c>)
 8000988:	2200      	movs	r2, #0
 800098a:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800098c:	4b24      	ldr	r3, [pc, #144]	; (8000a20 <MX_ADC1_Init+0x12c>)
 800098e:	2200      	movs	r2, #0
 8000990:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000992:	4b23      	ldr	r3, [pc, #140]	; (8000a20 <MX_ADC1_Init+0x12c>)
 8000994:	2204      	movs	r2, #4
 8000996:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000998:	4b21      	ldr	r3, [pc, #132]	; (8000a20 <MX_ADC1_Init+0x12c>)
 800099a:	2200      	movs	r2, #0
 800099c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800099e:	4b20      	ldr	r3, [pc, #128]	; (8000a20 <MX_ADC1_Init+0x12c>)
 80009a0:	2200      	movs	r2, #0
 80009a2:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 80009a4:	4b1e      	ldr	r3, [pc, #120]	; (8000a20 <MX_ADC1_Init+0x12c>)
 80009a6:	2201      	movs	r2, #1
 80009a8:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80009aa:	4b1d      	ldr	r3, [pc, #116]	; (8000a20 <MX_ADC1_Init+0x12c>)
 80009ac:	2200      	movs	r2, #0
 80009ae:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80009b2:	4b1b      	ldr	r3, [pc, #108]	; (8000a20 <MX_ADC1_Init+0x12c>)
 80009b4:	2200      	movs	r2, #0
 80009b6:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80009b8:	4b19      	ldr	r3, [pc, #100]	; (8000a20 <MX_ADC1_Init+0x12c>)
 80009ba:	2200      	movs	r2, #0
 80009bc:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80009be:	4b18      	ldr	r3, [pc, #96]	; (8000a20 <MX_ADC1_Init+0x12c>)
 80009c0:	2200      	movs	r2, #0
 80009c2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80009c6:	4b16      	ldr	r3, [pc, #88]	; (8000a20 <MX_ADC1_Init+0x12c>)
 80009c8:	2200      	movs	r2, #0
 80009ca:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 80009cc:	4b14      	ldr	r3, [pc, #80]	; (8000a20 <MX_ADC1_Init+0x12c>)
 80009ce:	2200      	movs	r2, #0
 80009d0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80009d4:	4812      	ldr	r0, [pc, #72]	; (8000a20 <MX_ADC1_Init+0x12c>)
 80009d6:	f000 ff5f 	bl	8001898 <HAL_ADC_Init>
 80009da:	4603      	mov	r3, r0
 80009dc:	2b00      	cmp	r3, #0
 80009de:	d001      	beq.n	80009e4 <MX_ADC1_Init+0xf0>
  {
    Error_Handler();
 80009e0:	f000 f8b4 	bl	8000b4c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_12;
 80009e4:	4b10      	ldr	r3, [pc, #64]	; (8000a28 <MX_ADC1_Init+0x134>)
 80009e6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80009e8:	2306      	movs	r3, #6
 80009ea:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80009ec:	2300      	movs	r3, #0
 80009ee:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80009f0:	237f      	movs	r3, #127	; 0x7f
 80009f2:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80009f4:	2304      	movs	r3, #4
 80009f6:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80009f8:	2300      	movs	r3, #0
 80009fa:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80009fc:	463b      	mov	r3, r7
 80009fe:	4619      	mov	r1, r3
 8000a00:	4807      	ldr	r0, [pc, #28]	; (8000a20 <MX_ADC1_Init+0x12c>)
 8000a02:	f001 f991 	bl	8001d28 <HAL_ADC_ConfigChannel>
 8000a06:	4603      	mov	r3, r0
 8000a08:	2b00      	cmp	r3, #0
 8000a0a:	d001      	beq.n	8000a10 <MX_ADC1_Init+0x11c>
  {
    Error_Handler();
 8000a0c:	f000 f89e 	bl	8000b4c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000a10:	bf00      	nop
 8000a12:	3718      	adds	r7, #24
 8000a14:	46bd      	mov	sp, r7
 8000a16:	bd80      	pop	{r7, pc}
 8000a18:	2000008c 	.word	0x2000008c
 8000a1c:	40013000 	.word	0x40013000
 8000a20:	200000f0 	.word	0x200000f0
 8000a24:	50040000 	.word	0x50040000
 8000a28:	32601000 	.word	0x32601000

08000a2c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000a30:	4b14      	ldr	r3, [pc, #80]	; (8000a84 <MX_USART2_UART_Init+0x58>)
 8000a32:	4a15      	ldr	r2, [pc, #84]	; (8000a88 <MX_USART2_UART_Init+0x5c>)
 8000a34:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000a36:	4b13      	ldr	r3, [pc, #76]	; (8000a84 <MX_USART2_UART_Init+0x58>)
 8000a38:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000a3c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000a3e:	4b11      	ldr	r3, [pc, #68]	; (8000a84 <MX_USART2_UART_Init+0x58>)
 8000a40:	2200      	movs	r2, #0
 8000a42:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000a44:	4b0f      	ldr	r3, [pc, #60]	; (8000a84 <MX_USART2_UART_Init+0x58>)
 8000a46:	2200      	movs	r2, #0
 8000a48:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000a4a:	4b0e      	ldr	r3, [pc, #56]	; (8000a84 <MX_USART2_UART_Init+0x58>)
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000a50:	4b0c      	ldr	r3, [pc, #48]	; (8000a84 <MX_USART2_UART_Init+0x58>)
 8000a52:	220c      	movs	r2, #12
 8000a54:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a56:	4b0b      	ldr	r3, [pc, #44]	; (8000a84 <MX_USART2_UART_Init+0x58>)
 8000a58:	2200      	movs	r2, #0
 8000a5a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a5c:	4b09      	ldr	r3, [pc, #36]	; (8000a84 <MX_USART2_UART_Init+0x58>)
 8000a5e:	2200      	movs	r2, #0
 8000a60:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a62:	4b08      	ldr	r3, [pc, #32]	; (8000a84 <MX_USART2_UART_Init+0x58>)
 8000a64:	2200      	movs	r2, #0
 8000a66:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a68:	4b06      	ldr	r3, [pc, #24]	; (8000a84 <MX_USART2_UART_Init+0x58>)
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000a6e:	4805      	ldr	r0, [pc, #20]	; (8000a84 <MX_USART2_UART_Init+0x58>)
 8000a70:	f003 fd42 	bl	80044f8 <HAL_UART_Init>
 8000a74:	4603      	mov	r3, r0
 8000a76:	2b00      	cmp	r3, #0
 8000a78:	d001      	beq.n	8000a7e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000a7a:	f000 f867 	bl	8000b4c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000a7e:	bf00      	nop
 8000a80:	bd80      	pop	{r7, pc}
 8000a82:	bf00      	nop
 8000a84:	20000154 	.word	0x20000154
 8000a88:	40004400 	.word	0x40004400

08000a8c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	b088      	sub	sp, #32
 8000a90:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a92:	f107 030c 	add.w	r3, r7, #12
 8000a96:	2200      	movs	r2, #0
 8000a98:	601a      	str	r2, [r3, #0]
 8000a9a:	605a      	str	r2, [r3, #4]
 8000a9c:	609a      	str	r2, [r3, #8]
 8000a9e:	60da      	str	r2, [r3, #12]
 8000aa0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000aa2:	4b28      	ldr	r3, [pc, #160]	; (8000b44 <MX_GPIO_Init+0xb8>)
 8000aa4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000aa6:	4a27      	ldr	r2, [pc, #156]	; (8000b44 <MX_GPIO_Init+0xb8>)
 8000aa8:	f043 0304 	orr.w	r3, r3, #4
 8000aac:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000aae:	4b25      	ldr	r3, [pc, #148]	; (8000b44 <MX_GPIO_Init+0xb8>)
 8000ab0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ab2:	f003 0304 	and.w	r3, r3, #4
 8000ab6:	60bb      	str	r3, [r7, #8]
 8000ab8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000aba:	4b22      	ldr	r3, [pc, #136]	; (8000b44 <MX_GPIO_Init+0xb8>)
 8000abc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000abe:	4a21      	ldr	r2, [pc, #132]	; (8000b44 <MX_GPIO_Init+0xb8>)
 8000ac0:	f043 0301 	orr.w	r3, r3, #1
 8000ac4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ac6:	4b1f      	ldr	r3, [pc, #124]	; (8000b44 <MX_GPIO_Init+0xb8>)
 8000ac8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000aca:	f003 0301 	and.w	r3, r3, #1
 8000ace:	607b      	str	r3, [r7, #4]
 8000ad0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ad2:	4b1c      	ldr	r3, [pc, #112]	; (8000b44 <MX_GPIO_Init+0xb8>)
 8000ad4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ad6:	4a1b      	ldr	r2, [pc, #108]	; (8000b44 <MX_GPIO_Init+0xb8>)
 8000ad8:	f043 0302 	orr.w	r3, r3, #2
 8000adc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ade:	4b19      	ldr	r3, [pc, #100]	; (8000b44 <MX_GPIO_Init+0xb8>)
 8000ae0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ae2:	f003 0302 	and.w	r3, r3, #2
 8000ae6:	603b      	str	r3, [r7, #0]
 8000ae8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_BLUE_Pin|LED_GREEN_Pin|LED_RED_Pin,GPIO_PIN_RESET);
 8000aea:	2200      	movs	r2, #0
 8000aec:	2138      	movs	r1, #56	; 0x38
 8000aee:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000af2:	f001 ffcf 	bl	8002a94 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|SSD1331_CS_Pin|SSD1331_DC_Pin|SSD1331_RES_Pin, GPIO_PIN_RESET);
 8000af6:	2200      	movs	r2, #0
 8000af8:	2178      	movs	r1, #120	; 0x78
 8000afa:	4813      	ldr	r0, [pc, #76]	; (8000b48 <MX_GPIO_Init+0xbc>)
 8000afc:	f001 ffca 	bl	8002a94 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED_BLUE_Pin LED_GREEN_Pin LED_RED_Pin DISPLAY_CLK_Pin */
  GPIO_InitStruct.Pin = LED_BLUE_Pin|LED_GREEN_Pin|LED_RED_Pin;
 8000b00:	2338      	movs	r3, #56	; 0x38
 8000b02:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b04:	2301      	movs	r3, #1
 8000b06:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b08:	2300      	movs	r3, #0
 8000b0a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b10:	f107 030c 	add.w	r3, r7, #12
 8000b14:	4619      	mov	r1, r3
 8000b16:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b1a:	f001 fe51 	bl	80027c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin SSD1331_CS_Pin SSD1331_DC_Pin SSD1331_RES_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|SSD1331_CS_Pin|SSD1331_DC_Pin|SSD1331_RES_Pin;
 8000b1e:	2378      	movs	r3, #120	; 0x78
 8000b20:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b22:	2301      	movs	r3, #1
 8000b24:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b26:	2300      	movs	r3, #0
 8000b28:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b2e:	f107 030c 	add.w	r3, r7, #12
 8000b32:	4619      	mov	r1, r3
 8000b34:	4804      	ldr	r0, [pc, #16]	; (8000b48 <MX_GPIO_Init+0xbc>)
 8000b36:	f001 fe43 	bl	80027c0 <HAL_GPIO_Init>

}
 8000b3a:	bf00      	nop
 8000b3c:	3720      	adds	r7, #32
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	bd80      	pop	{r7, pc}
 8000b42:	bf00      	nop
 8000b44:	40021000 	.word	0x40021000
 8000b48:	48000400 	.word	0x48000400

08000b4c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b4c:	b480      	push	{r7}
 8000b4e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b50:	b672      	cpsid	i
}
 8000b52:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b54:	e7fe      	b.n	8000b54 <Error_Handler+0x8>
	...

08000b58 <ssd1331_write_byte>:
   *						   0: Writes to the command register
   *						   1: Writes to the display data ram
   * @retval None
 **/
static void ssd1331_write_byte(uint8_t chData, uint8_t chCmd)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	b082      	sub	sp, #8
 8000b5c:	af00      	add	r7, sp, #0
 8000b5e:	4603      	mov	r3, r0
 8000b60:	460a      	mov	r2, r1
 8000b62:	71fb      	strb	r3, [r7, #7]
 8000b64:	4613      	mov	r3, r2
 8000b66:	71bb      	strb	r3, [r7, #6]
	if (chCmd) {
 8000b68:	79bb      	ldrb	r3, [r7, #6]
 8000b6a:	2b00      	cmp	r3, #0
 8000b6c:	d005      	beq.n	8000b7a <ssd1331_write_byte+0x22>
	 	__SSD1331_DC_SET();
 8000b6e:	2201      	movs	r2, #1
 8000b70:	2120      	movs	r1, #32
 8000b72:	4811      	ldr	r0, [pc, #68]	; (8000bb8 <ssd1331_write_byte+0x60>)
 8000b74:	f001 ff8e 	bl	8002a94 <HAL_GPIO_WritePin>
 8000b78:	e004      	b.n	8000b84 <ssd1331_write_byte+0x2c>
	} else {
	 	__SSD1331_DC_CLR();
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	2120      	movs	r1, #32
 8000b7e:	480e      	ldr	r0, [pc, #56]	; (8000bb8 <ssd1331_write_byte+0x60>)
 8000b80:	f001 ff88 	bl	8002a94 <HAL_GPIO_WritePin>
	}

	__SSD1331_CS_CLR();
 8000b84:	2200      	movs	r2, #0
 8000b86:	2110      	movs	r1, #16
 8000b88:	480b      	ldr	r0, [pc, #44]	; (8000bb8 <ssd1331_write_byte+0x60>)
 8000b8a:	f001 ff83 	bl	8002a94 <HAL_GPIO_WritePin>
	__SSD1331_WRITE_BYTE(chData);
 8000b8e:	1df9      	adds	r1, r7, #7
 8000b90:	2364      	movs	r3, #100	; 0x64
 8000b92:	2201      	movs	r2, #1
 8000b94:	4809      	ldr	r0, [pc, #36]	; (8000bbc <ssd1331_write_byte+0x64>)
 8000b96:	f003 f9dc 	bl	8003f52 <HAL_SPI_Transmit>

	__SSD1331_CS_SET();
 8000b9a:	2201      	movs	r2, #1
 8000b9c:	2110      	movs	r1, #16
 8000b9e:	4806      	ldr	r0, [pc, #24]	; (8000bb8 <ssd1331_write_byte+0x60>)
 8000ba0:	f001 ff78 	bl	8002a94 <HAL_GPIO_WritePin>
	__SSD1331_DC_SET();
 8000ba4:	2201      	movs	r2, #1
 8000ba6:	2120      	movs	r1, #32
 8000ba8:	4803      	ldr	r0, [pc, #12]	; (8000bb8 <ssd1331_write_byte+0x60>)
 8000baa:	f001 ff73 	bl	8002a94 <HAL_GPIO_WritePin>
}
 8000bae:	bf00      	nop
 8000bb0:	3708      	adds	r7, #8
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	bd80      	pop	{r7, pc}
 8000bb6:	bf00      	nop
 8000bb8:	48000400 	.word	0x48000400
 8000bbc:	2000008c 	.word	0x2000008c

08000bc0 <ssd1331_draw_point>:

void ssd1331_draw_point(uint8_t chXpos, uint8_t chYpos, uint16_t hwColor)
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	b082      	sub	sp, #8
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	4603      	mov	r3, r0
 8000bc8:	71fb      	strb	r3, [r7, #7]
 8000bca:	460b      	mov	r3, r1
 8000bcc:	71bb      	strb	r3, [r7, #6]
 8000bce:	4613      	mov	r3, r2
 8000bd0:	80bb      	strh	r3, [r7, #4]
	if (chXpos >= OLED_WIDTH || chYpos >= OLED_HEIGHT) {
 8000bd2:	79fb      	ldrb	r3, [r7, #7]
 8000bd4:	2b5f      	cmp	r3, #95	; 0x5f
 8000bd6:	d82b      	bhi.n	8000c30 <ssd1331_draw_point+0x70>
 8000bd8:	79bb      	ldrb	r3, [r7, #6]
 8000bda:	2b3f      	cmp	r3, #63	; 0x3f
 8000bdc:	d828      	bhi.n	8000c30 <ssd1331_draw_point+0x70>
		return;
	}

    //set column point
    ssd1331_write_byte(SET_COLUMN_ADDRESS, SSD1331_CMD);
 8000bde:	2100      	movs	r1, #0
 8000be0:	2015      	movs	r0, #21
 8000be2:	f7ff ffb9 	bl	8000b58 <ssd1331_write_byte>
    ssd1331_write_byte(chXpos, SSD1331_CMD);
 8000be6:	79fb      	ldrb	r3, [r7, #7]
 8000be8:	2100      	movs	r1, #0
 8000bea:	4618      	mov	r0, r3
 8000bec:	f7ff ffb4 	bl	8000b58 <ssd1331_write_byte>
    ssd1331_write_byte(OLED_WIDTH - 1, SSD1331_CMD);
 8000bf0:	2100      	movs	r1, #0
 8000bf2:	205f      	movs	r0, #95	; 0x5f
 8000bf4:	f7ff ffb0 	bl	8000b58 <ssd1331_write_byte>
    //set row point
    ssd1331_write_byte(SET_ROW_ADDRESS, SSD1331_CMD);
 8000bf8:	2100      	movs	r1, #0
 8000bfa:	2075      	movs	r0, #117	; 0x75
 8000bfc:	f7ff ffac 	bl	8000b58 <ssd1331_write_byte>
    ssd1331_write_byte(chYpos, SSD1331_CMD);
 8000c00:	79bb      	ldrb	r3, [r7, #6]
 8000c02:	2100      	movs	r1, #0
 8000c04:	4618      	mov	r0, r3
 8000c06:	f7ff ffa7 	bl	8000b58 <ssd1331_write_byte>
    ssd1331_write_byte(OLED_HEIGHT - 1, SSD1331_CMD);
 8000c0a:	2100      	movs	r1, #0
 8000c0c:	203f      	movs	r0, #63	; 0x3f
 8000c0e:	f7ff ffa3 	bl	8000b58 <ssd1331_write_byte>

    //fill 16bit colour
	ssd1331_write_byte(hwColor >> 8, SSD1331_DATA);
 8000c12:	88bb      	ldrh	r3, [r7, #4]
 8000c14:	0a1b      	lsrs	r3, r3, #8
 8000c16:	b29b      	uxth	r3, r3
 8000c18:	b2db      	uxtb	r3, r3
 8000c1a:	2101      	movs	r1, #1
 8000c1c:	4618      	mov	r0, r3
 8000c1e:	f7ff ff9b 	bl	8000b58 <ssd1331_write_byte>
	ssd1331_write_byte(hwColor, SSD1331_DATA);
 8000c22:	88bb      	ldrh	r3, [r7, #4]
 8000c24:	b2db      	uxtb	r3, r3
 8000c26:	2101      	movs	r1, #1
 8000c28:	4618      	mov	r0, r3
 8000c2a:	f7ff ff95 	bl	8000b58 <ssd1331_write_byte>
 8000c2e:	e000      	b.n	8000c32 <ssd1331_draw_point+0x72>
		return;
 8000c30:	bf00      	nop
}
 8000c32:	3708      	adds	r7, #8
 8000c34:	46bd      	mov	sp, r7
 8000c36:	bd80      	pop	{r7, pc}

08000c38 <ssd1331_display_char>:
  * @param  chSize:
  * @param  chMode
  * @retval
**/
void ssd1331_display_char(uint8_t chXpos, uint8_t chYpos, uint8_t chChr, uint8_t chSize, uint16_t hwColor)
{
 8000c38:	b590      	push	{r4, r7, lr}
 8000c3a:	b085      	sub	sp, #20
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	4604      	mov	r4, r0
 8000c40:	4608      	mov	r0, r1
 8000c42:	4611      	mov	r1, r2
 8000c44:	461a      	mov	r2, r3
 8000c46:	4623      	mov	r3, r4
 8000c48:	71fb      	strb	r3, [r7, #7]
 8000c4a:	4603      	mov	r3, r0
 8000c4c:	71bb      	strb	r3, [r7, #6]
 8000c4e:	460b      	mov	r3, r1
 8000c50:	717b      	strb	r3, [r7, #5]
 8000c52:	4613      	mov	r3, r2
 8000c54:	713b      	strb	r3, [r7, #4]
	uint8_t i, j, chTemp;
	uint8_t chYpos0 = chYpos;
 8000c56:	79bb      	ldrb	r3, [r7, #6]
 8000c58:	733b      	strb	r3, [r7, #12]

	chTemp = 0;
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	737b      	strb	r3, [r7, #13]
	if (chXpos >= OLED_WIDTH || chYpos >= OLED_HEIGHT) {
 8000c5e:	79fb      	ldrb	r3, [r7, #7]
 8000c60:	2b5f      	cmp	r3, #95	; 0x5f
 8000c62:	d857      	bhi.n	8000d14 <ssd1331_display_char+0xdc>
 8000c64:	79bb      	ldrb	r3, [r7, #6]
 8000c66:	2b3f      	cmp	r3, #63	; 0x3f
 8000c68:	d854      	bhi.n	8000d14 <ssd1331_display_char+0xdc>
		return;
	}

    for (i = 0; i < chSize; i ++) {
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	73fb      	strb	r3, [r7, #15]
 8000c6e:	e04c      	b.n	8000d0a <ssd1331_display_char+0xd2>
		if (FONT_1206 == chSize) {
 8000c70:	793b      	ldrb	r3, [r7, #4]
 8000c72:	2b0c      	cmp	r3, #12
 8000c74:	d10d      	bne.n	8000c92 <ssd1331_display_char+0x5a>
			chTemp = c_chFont1206[chChr - 0x20][i];
 8000c76:	797b      	ldrb	r3, [r7, #5]
 8000c78:	f1a3 0220 	sub.w	r2, r3, #32
 8000c7c:	7bf9      	ldrb	r1, [r7, #15]
 8000c7e:	4827      	ldr	r0, [pc, #156]	; (8000d1c <ssd1331_display_char+0xe4>)
 8000c80:	4613      	mov	r3, r2
 8000c82:	005b      	lsls	r3, r3, #1
 8000c84:	4413      	add	r3, r2
 8000c86:	009b      	lsls	r3, r3, #2
 8000c88:	4403      	add	r3, r0
 8000c8a:	440b      	add	r3, r1
 8000c8c:	781b      	ldrb	r3, [r3, #0]
 8000c8e:	737b      	strb	r3, [r7, #13]
 8000c90:	e00c      	b.n	8000cac <ssd1331_display_char+0x74>
		} else if (FONT_1608 == chSize) {
 8000c92:	793b      	ldrb	r3, [r7, #4]
 8000c94:	2b10      	cmp	r3, #16
 8000c96:	d109      	bne.n	8000cac <ssd1331_display_char+0x74>
			chTemp = c_chFont1608[chChr - 0x20][i];
 8000c98:	797b      	ldrb	r3, [r7, #5]
 8000c9a:	f1a3 0220 	sub.w	r2, r3, #32
 8000c9e:	7bfb      	ldrb	r3, [r7, #15]
 8000ca0:	491f      	ldr	r1, [pc, #124]	; (8000d20 <ssd1331_display_char+0xe8>)
 8000ca2:	0112      	lsls	r2, r2, #4
 8000ca4:	440a      	add	r2, r1
 8000ca6:	4413      	add	r3, r2
 8000ca8:	781b      	ldrb	r3, [r3, #0]
 8000caa:	737b      	strb	r3, [r7, #13]
		}

        for (j = 0; j < 8; j ++) {
 8000cac:	2300      	movs	r3, #0
 8000cae:	73bb      	strb	r3, [r7, #14]
 8000cb0:	e025      	b.n	8000cfe <ssd1331_display_char+0xc6>
    		if (chTemp & 0x80) {
 8000cb2:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	da06      	bge.n	8000cc8 <ssd1331_display_char+0x90>
		  ssd1331_draw_point(chXpos, chYpos, hwColor);
 8000cba:	8c3a      	ldrh	r2, [r7, #32]
 8000cbc:	79b9      	ldrb	r1, [r7, #6]
 8000cbe:	79fb      	ldrb	r3, [r7, #7]
 8000cc0:	4618      	mov	r0, r3
 8000cc2:	f7ff ff7d 	bl	8000bc0 <ssd1331_draw_point>
 8000cc6:	e005      	b.n	8000cd4 <ssd1331_display_char+0x9c>
    		} else {
		  ssd1331_draw_point(chXpos, chYpos, 0);
 8000cc8:	79b9      	ldrb	r1, [r7, #6]
 8000cca:	79fb      	ldrb	r3, [r7, #7]
 8000ccc:	2200      	movs	r2, #0
 8000cce:	4618      	mov	r0, r3
 8000cd0:	f7ff ff76 	bl	8000bc0 <ssd1331_draw_point>
		}
			chTemp <<= 1;
 8000cd4:	7b7b      	ldrb	r3, [r7, #13]
 8000cd6:	005b      	lsls	r3, r3, #1
 8000cd8:	737b      	strb	r3, [r7, #13]
			chYpos ++;
 8000cda:	79bb      	ldrb	r3, [r7, #6]
 8000cdc:	3301      	adds	r3, #1
 8000cde:	71bb      	strb	r3, [r7, #6]
			if ((chYpos - chYpos0) == chSize) {
 8000ce0:	79ba      	ldrb	r2, [r7, #6]
 8000ce2:	7b3b      	ldrb	r3, [r7, #12]
 8000ce4:	1ad2      	subs	r2, r2, r3
 8000ce6:	793b      	ldrb	r3, [r7, #4]
 8000ce8:	429a      	cmp	r2, r3
 8000cea:	d105      	bne.n	8000cf8 <ssd1331_display_char+0xc0>
				chYpos = chYpos0;
 8000cec:	7b3b      	ldrb	r3, [r7, #12]
 8000cee:	71bb      	strb	r3, [r7, #6]
				chXpos ++;
 8000cf0:	79fb      	ldrb	r3, [r7, #7]
 8000cf2:	3301      	adds	r3, #1
 8000cf4:	71fb      	strb	r3, [r7, #7]
				break;
 8000cf6:	e005      	b.n	8000d04 <ssd1331_display_char+0xcc>
        for (j = 0; j < 8; j ++) {
 8000cf8:	7bbb      	ldrb	r3, [r7, #14]
 8000cfa:	3301      	adds	r3, #1
 8000cfc:	73bb      	strb	r3, [r7, #14]
 8000cfe:	7bbb      	ldrb	r3, [r7, #14]
 8000d00:	2b07      	cmp	r3, #7
 8000d02:	d9d6      	bls.n	8000cb2 <ssd1331_display_char+0x7a>
    for (i = 0; i < chSize; i ++) {
 8000d04:	7bfb      	ldrb	r3, [r7, #15]
 8000d06:	3301      	adds	r3, #1
 8000d08:	73fb      	strb	r3, [r7, #15]
 8000d0a:	7bfa      	ldrb	r2, [r7, #15]
 8000d0c:	793b      	ldrb	r3, [r7, #4]
 8000d0e:	429a      	cmp	r2, r3
 8000d10:	d3ae      	bcc.n	8000c70 <ssd1331_display_char+0x38>
 8000d12:	e000      	b.n	8000d16 <ssd1331_display_char+0xde>
		return;
 8000d14:	bf00      	nop
			}
		}
    }
}
 8000d16:	3714      	adds	r7, #20
 8000d18:	46bd      	mov	sp, r7
 8000d1a:	bd90      	pop	{r4, r7, pc}
 8000d1c:	08005f40 	.word	0x08005f40
 8000d20:	080063b4 	.word	0x080063b4

08000d24 <ssd1331_display_string>:
  * @param  pchString: Pointer to a string to display on the screen
  *
  * @retval  None
**/
void ssd1331_display_string(uint8_t chXpos, uint8_t chYpos, const char *pchString, uint8_t chSize, uint16_t hwColor)
{
 8000d24:	b590      	push	{r4, r7, lr}
 8000d26:	b085      	sub	sp, #20
 8000d28:	af02      	add	r7, sp, #8
 8000d2a:	603a      	str	r2, [r7, #0]
 8000d2c:	461a      	mov	r2, r3
 8000d2e:	4603      	mov	r3, r0
 8000d30:	71fb      	strb	r3, [r7, #7]
 8000d32:	460b      	mov	r3, r1
 8000d34:	71bb      	strb	r3, [r7, #6]
 8000d36:	4613      	mov	r3, r2
 8000d38:	717b      	strb	r3, [r7, #5]
	if (chXpos >= OLED_WIDTH || chYpos >= OLED_HEIGHT) {
 8000d3a:	79fb      	ldrb	r3, [r7, #7]
 8000d3c:	2b5f      	cmp	r3, #95	; 0x5f
 8000d3e:	d836      	bhi.n	8000dae <ssd1331_display_string+0x8a>
 8000d40:	79bb      	ldrb	r3, [r7, #6]
 8000d42:	2b3f      	cmp	r3, #63	; 0x3f
 8000d44:	d833      	bhi.n	8000dae <ssd1331_display_string+0x8a>
		return;
	}

    while (*pchString != '\0') {
 8000d46:	e02d      	b.n	8000da4 <ssd1331_display_string+0x80>
        if (chXpos > (OLED_WIDTH - chSize / 2)) {
 8000d48:	79fa      	ldrb	r2, [r7, #7]
 8000d4a:	797b      	ldrb	r3, [r7, #5]
 8000d4c:	085b      	lsrs	r3, r3, #1
 8000d4e:	b2db      	uxtb	r3, r3
 8000d50:	f1c3 0360 	rsb	r3, r3, #96	; 0x60
 8000d54:	429a      	cmp	r2, r3
 8000d56:	dd12      	ble.n	8000d7e <ssd1331_display_string+0x5a>
			chXpos = 0;
 8000d58:	2300      	movs	r3, #0
 8000d5a:	71fb      	strb	r3, [r7, #7]
			chYpos += chSize;
 8000d5c:	79ba      	ldrb	r2, [r7, #6]
 8000d5e:	797b      	ldrb	r3, [r7, #5]
 8000d60:	4413      	add	r3, r2
 8000d62:	71bb      	strb	r3, [r7, #6]
			if (chYpos > (OLED_HEIGHT - chSize)) {
 8000d64:	79ba      	ldrb	r2, [r7, #6]
 8000d66:	797b      	ldrb	r3, [r7, #5]
 8000d68:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 8000d6c:	429a      	cmp	r2, r3
 8000d6e:	dd06      	ble.n	8000d7e <ssd1331_display_string+0x5a>
				chYpos = chXpos = 0;
 8000d70:	2300      	movs	r3, #0
 8000d72:	71fb      	strb	r3, [r7, #7]
 8000d74:	79fb      	ldrb	r3, [r7, #7]
 8000d76:	71bb      	strb	r3, [r7, #6]
				ssd1331_clear_screen(0x00);
 8000d78:	2000      	movs	r0, #0
 8000d7a:	f000 f81c 	bl	8000db6 <ssd1331_clear_screen>
			}
		}

        ssd1331_display_char(chXpos, chYpos, *pchString, chSize, hwColor);
 8000d7e:	683b      	ldr	r3, [r7, #0]
 8000d80:	781a      	ldrb	r2, [r3, #0]
 8000d82:	797c      	ldrb	r4, [r7, #5]
 8000d84:	79b9      	ldrb	r1, [r7, #6]
 8000d86:	79f8      	ldrb	r0, [r7, #7]
 8000d88:	8b3b      	ldrh	r3, [r7, #24]
 8000d8a:	9300      	str	r3, [sp, #0]
 8000d8c:	4623      	mov	r3, r4
 8000d8e:	f7ff ff53 	bl	8000c38 <ssd1331_display_char>
        chXpos += chSize / 2;
 8000d92:	797b      	ldrb	r3, [r7, #5]
 8000d94:	085b      	lsrs	r3, r3, #1
 8000d96:	b2da      	uxtb	r2, r3
 8000d98:	79fb      	ldrb	r3, [r7, #7]
 8000d9a:	4413      	add	r3, r2
 8000d9c:	71fb      	strb	r3, [r7, #7]
        pchString ++;
 8000d9e:	683b      	ldr	r3, [r7, #0]
 8000da0:	3301      	adds	r3, #1
 8000da2:	603b      	str	r3, [r7, #0]
    while (*pchString != '\0') {
 8000da4:	683b      	ldr	r3, [r7, #0]
 8000da6:	781b      	ldrb	r3, [r3, #0]
 8000da8:	2b00      	cmp	r3, #0
 8000daa:	d1cd      	bne.n	8000d48 <ssd1331_display_string+0x24>
 8000dac:	e000      	b.n	8000db0 <ssd1331_display_string+0x8c>
		return;
 8000dae:	bf00      	nop
    }
}
 8000db0:	370c      	adds	r7, #12
 8000db2:	46bd      	mov	sp, r7
 8000db4:	bd90      	pop	{r4, r7, pc}

08000db6 <ssd1331_clear_screen>:
        }
    }
}

void ssd1331_clear_screen(uint16_t hwColor)
{
 8000db6:	b580      	push	{r7, lr}
 8000db8:	b084      	sub	sp, #16
 8000dba:	af00      	add	r7, sp, #0
 8000dbc:	4603      	mov	r3, r0
 8000dbe:	80fb      	strh	r3, [r7, #6]
	uint16_t i, j;

	for(i = 0; i < OLED_HEIGHT; i ++){
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	81fb      	strh	r3, [r7, #14]
 8000dc4:	e013      	b.n	8000dee <ssd1331_clear_screen+0x38>
		for(j = 0; j < OLED_WIDTH; j ++){
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	81bb      	strh	r3, [r7, #12]
 8000dca:	e00a      	b.n	8000de2 <ssd1331_clear_screen+0x2c>
			ssd1331_draw_point(j, i, hwColor);
 8000dcc:	89bb      	ldrh	r3, [r7, #12]
 8000dce:	b2db      	uxtb	r3, r3
 8000dd0:	89fa      	ldrh	r2, [r7, #14]
 8000dd2:	b2d1      	uxtb	r1, r2
 8000dd4:	88fa      	ldrh	r2, [r7, #6]
 8000dd6:	4618      	mov	r0, r3
 8000dd8:	f7ff fef2 	bl	8000bc0 <ssd1331_draw_point>
		for(j = 0; j < OLED_WIDTH; j ++){
 8000ddc:	89bb      	ldrh	r3, [r7, #12]
 8000dde:	3301      	adds	r3, #1
 8000de0:	81bb      	strh	r3, [r7, #12]
 8000de2:	89bb      	ldrh	r3, [r7, #12]
 8000de4:	2b5f      	cmp	r3, #95	; 0x5f
 8000de6:	d9f1      	bls.n	8000dcc <ssd1331_clear_screen+0x16>
	for(i = 0; i < OLED_HEIGHT; i ++){
 8000de8:	89fb      	ldrh	r3, [r7, #14]
 8000dea:	3301      	adds	r3, #1
 8000dec:	81fb      	strh	r3, [r7, #14]
 8000dee:	89fb      	ldrh	r3, [r7, #14]
 8000df0:	2b3f      	cmp	r3, #63	; 0x3f
 8000df2:	d9e8      	bls.n	8000dc6 <ssd1331_clear_screen+0x10>
		}
	}
}
 8000df4:	bf00      	nop
 8000df6:	bf00      	nop
 8000df8:	3710      	adds	r7, #16
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	bd80      	pop	{r7, pc}
	...

08000e00 <ssd1331_init>:


void ssd1331_init(void)
{
 8000e00:	b580      	push	{r7, lr}
 8000e02:	af00      	add	r7, sp, #0
  __SSD1331_RES_SET();  //RES set
 8000e04:	2201      	movs	r2, #1
 8000e06:	2140      	movs	r1, #64	; 0x40
 8000e08:	4852      	ldr	r0, [pc, #328]	; (8000f54 <ssd1331_init+0x154>)
 8000e0a:	f001 fe43 	bl	8002a94 <HAL_GPIO_WritePin>
  __SSD1331_CS_SET();
 8000e0e:	2201      	movs	r2, #1
 8000e10:	2110      	movs	r1, #16
 8000e12:	4850      	ldr	r0, [pc, #320]	; (8000f54 <ssd1331_init+0x154>)
 8000e14:	f001 fe3e 	bl	8002a94 <HAL_GPIO_WritePin>

  ssd1331_write_byte(DISPLAY_OFF, SSD1331_CMD);          //Display Off
 8000e18:	2100      	movs	r1, #0
 8000e1a:	20ae      	movs	r0, #174	; 0xae
 8000e1c:	f7ff fe9c 	bl	8000b58 <ssd1331_write_byte>
  ssd1331_write_byte(SET_CONTRAST_A, SSD1331_CMD);       //Set contrast for color A
 8000e20:	2100      	movs	r1, #0
 8000e22:	2081      	movs	r0, #129	; 0x81
 8000e24:	f7ff fe98 	bl	8000b58 <ssd1331_write_byte>
  ssd1331_write_byte(0xFF, SSD1331_CMD);                     //145 0x91
 8000e28:	2100      	movs	r1, #0
 8000e2a:	20ff      	movs	r0, #255	; 0xff
 8000e2c:	f7ff fe94 	bl	8000b58 <ssd1331_write_byte>
  ssd1331_write_byte(SET_CONTRAST_B, SSD1331_CMD);       //Set contrast for color B
 8000e30:	2100      	movs	r1, #0
 8000e32:	2082      	movs	r0, #130	; 0x82
 8000e34:	f7ff fe90 	bl	8000b58 <ssd1331_write_byte>
  ssd1331_write_byte(0xFF, SSD1331_CMD);                     //80 0x50
 8000e38:	2100      	movs	r1, #0
 8000e3a:	20ff      	movs	r0, #255	; 0xff
 8000e3c:	f7ff fe8c 	bl	8000b58 <ssd1331_write_byte>
  ssd1331_write_byte(SET_CONTRAST_C, SSD1331_CMD);       //Set contrast for color C
 8000e40:	2100      	movs	r1, #0
 8000e42:	2083      	movs	r0, #131	; 0x83
 8000e44:	f7ff fe88 	bl	8000b58 <ssd1331_write_byte>
  ssd1331_write_byte(0xFF, SSD1331_CMD);                     //125 0x7D
 8000e48:	2100      	movs	r1, #0
 8000e4a:	20ff      	movs	r0, #255	; 0xff
 8000e4c:	f7ff fe84 	bl	8000b58 <ssd1331_write_byte>
  ssd1331_write_byte(MASTER_CURRENT_CONTROL, SSD1331_CMD);//master current control
 8000e50:	2100      	movs	r1, #0
 8000e52:	2087      	movs	r0, #135	; 0x87
 8000e54:	f7ff fe80 	bl	8000b58 <ssd1331_write_byte>
  ssd1331_write_byte(0x06, SSD1331_CMD);                     //6
 8000e58:	2100      	movs	r1, #0
 8000e5a:	2006      	movs	r0, #6
 8000e5c:	f7ff fe7c 	bl	8000b58 <ssd1331_write_byte>
  ssd1331_write_byte(SET_PRECHARGE_SPEED_A, SSD1331_CMD);//Set Second Pre-change Speed For ColorA
 8000e60:	2100      	movs	r1, #0
 8000e62:	208a      	movs	r0, #138	; 0x8a
 8000e64:	f7ff fe78 	bl	8000b58 <ssd1331_write_byte>
  ssd1331_write_byte(0x64, SSD1331_CMD);                     //100
 8000e68:	2100      	movs	r1, #0
 8000e6a:	2064      	movs	r0, #100	; 0x64
 8000e6c:	f7ff fe74 	bl	8000b58 <ssd1331_write_byte>
  ssd1331_write_byte(SET_PRECHARGE_SPEED_B, SSD1331_CMD);//Set Second Pre-change Speed For ColorB
 8000e70:	2100      	movs	r1, #0
 8000e72:	208b      	movs	r0, #139	; 0x8b
 8000e74:	f7ff fe70 	bl	8000b58 <ssd1331_write_byte>
  ssd1331_write_byte(0x78, SSD1331_CMD);                     //120
 8000e78:	2100      	movs	r1, #0
 8000e7a:	2078      	movs	r0, #120	; 0x78
 8000e7c:	f7ff fe6c 	bl	8000b58 <ssd1331_write_byte>
  ssd1331_write_byte(SET_PRECHARGE_SPEED_C, SSD1331_CMD);//Set Second Pre-change Speed For ColorC
 8000e80:	2100      	movs	r1, #0
 8000e82:	208c      	movs	r0, #140	; 0x8c
 8000e84:	f7ff fe68 	bl	8000b58 <ssd1331_write_byte>
  ssd1331_write_byte(0x64, SSD1331_CMD);                     //100
 8000e88:	2100      	movs	r1, #0
 8000e8a:	2064      	movs	r0, #100	; 0x64
 8000e8c:	f7ff fe64 	bl	8000b58 <ssd1331_write_byte>
  ssd1331_write_byte(SET_REMAP, SSD1331_CMD);            //set remap & data format
 8000e90:	2100      	movs	r1, #0
 8000e92:	20a0      	movs	r0, #160	; 0xa0
 8000e94:	f7ff fe60 	bl	8000b58 <ssd1331_write_byte>
  ssd1331_write_byte(0x72, SSD1331_CMD);                     //0x72
 8000e98:	2100      	movs	r1, #0
 8000e9a:	2072      	movs	r0, #114	; 0x72
 8000e9c:	f7ff fe5c 	bl	8000b58 <ssd1331_write_byte>
  ssd1331_write_byte(SET_DISPLAY_START_LINE, SSD1331_CMD);//Set display Start Line
 8000ea0:	2100      	movs	r1, #0
 8000ea2:	20a1      	movs	r0, #161	; 0xa1
 8000ea4:	f7ff fe58 	bl	8000b58 <ssd1331_write_byte>
  ssd1331_write_byte(0x0, SSD1331_CMD);
 8000ea8:	2100      	movs	r1, #0
 8000eaa:	2000      	movs	r0, #0
 8000eac:	f7ff fe54 	bl	8000b58 <ssd1331_write_byte>
  ssd1331_write_byte(SET_DISPLAY_OFFSET, SSD1331_CMD);   //Set display offset
 8000eb0:	2100      	movs	r1, #0
 8000eb2:	20a2      	movs	r0, #162	; 0xa2
 8000eb4:	f7ff fe50 	bl	8000b58 <ssd1331_write_byte>
  ssd1331_write_byte(0x0, SSD1331_CMD);
 8000eb8:	2100      	movs	r1, #0
 8000eba:	2000      	movs	r0, #0
 8000ebc:	f7ff fe4c 	bl	8000b58 <ssd1331_write_byte>
  ssd1331_write_byte(NORMAL_DISPLAY, SSD1331_CMD);       //Set display mode
 8000ec0:	2100      	movs	r1, #0
 8000ec2:	20a4      	movs	r0, #164	; 0xa4
 8000ec4:	f7ff fe48 	bl	8000b58 <ssd1331_write_byte>
  ssd1331_write_byte(SET_MULTIPLEX_RATIO, SSD1331_CMD);  //Set multiplex ratio
 8000ec8:	2100      	movs	r1, #0
 8000eca:	20a8      	movs	r0, #168	; 0xa8
 8000ecc:	f7ff fe44 	bl	8000b58 <ssd1331_write_byte>
  ssd1331_write_byte(0x3F, SSD1331_CMD);
 8000ed0:	2100      	movs	r1, #0
 8000ed2:	203f      	movs	r0, #63	; 0x3f
 8000ed4:	f7ff fe40 	bl	8000b58 <ssd1331_write_byte>
  ssd1331_write_byte(SET_MASTER_CONFIGURE, SSD1331_CMD); //Set master configuration
 8000ed8:	2100      	movs	r1, #0
 8000eda:	20ad      	movs	r0, #173	; 0xad
 8000edc:	f7ff fe3c 	bl	8000b58 <ssd1331_write_byte>
  ssd1331_write_byte(0x8E, SSD1331_CMD);
 8000ee0:	2100      	movs	r1, #0
 8000ee2:	208e      	movs	r0, #142	; 0x8e
 8000ee4:	f7ff fe38 	bl	8000b58 <ssd1331_write_byte>
  ssd1331_write_byte(POWER_SAVE_MODE, SSD1331_CMD);      //Set Power Save Mode
 8000ee8:	2100      	movs	r1, #0
 8000eea:	20b0      	movs	r0, #176	; 0xb0
 8000eec:	f7ff fe34 	bl	8000b58 <ssd1331_write_byte>
  ssd1331_write_byte(0x00, SSD1331_CMD);                     //0x00
 8000ef0:	2100      	movs	r1, #0
 8000ef2:	2000      	movs	r0, #0
 8000ef4:	f7ff fe30 	bl	8000b58 <ssd1331_write_byte>
  ssd1331_write_byte(PHASE_PERIOD_ADJUSTMENT, SSD1331_CMD);//phase 1 and 2 period adjustment
 8000ef8:	2100      	movs	r1, #0
 8000efa:	20b1      	movs	r0, #177	; 0xb1
 8000efc:	f7ff fe2c 	bl	8000b58 <ssd1331_write_byte>
  ssd1331_write_byte(0x31, SSD1331_CMD);                     //0x31
 8000f00:	2100      	movs	r1, #0
 8000f02:	2031      	movs	r0, #49	; 0x31
 8000f04:	f7ff fe28 	bl	8000b58 <ssd1331_write_byte>
  ssd1331_write_byte(DISPLAY_CLOCK_DIV, SSD1331_CMD);    //display clock divider/oscillator frequency
 8000f08:	2100      	movs	r1, #0
 8000f0a:	20b3      	movs	r0, #179	; 0xb3
 8000f0c:	f7ff fe24 	bl	8000b58 <ssd1331_write_byte>
  ssd1331_write_byte(0xF0, SSD1331_CMD);
 8000f10:	2100      	movs	r1, #0
 8000f12:	20f0      	movs	r0, #240	; 0xf0
 8000f14:	f7ff fe20 	bl	8000b58 <ssd1331_write_byte>
  ssd1331_write_byte(SET_PRECHARGE_VOLTAGE, SSD1331_CMD);//Set Pre-Change Level
 8000f18:	2100      	movs	r1, #0
 8000f1a:	20bb      	movs	r0, #187	; 0xbb
 8000f1c:	f7ff fe1c 	bl	8000b58 <ssd1331_write_byte>
  ssd1331_write_byte(0x3A, SSD1331_CMD);
 8000f20:	2100      	movs	r1, #0
 8000f22:	203a      	movs	r0, #58	; 0x3a
 8000f24:	f7ff fe18 	bl	8000b58 <ssd1331_write_byte>
  ssd1331_write_byte(SET_V_VOLTAGE, SSD1331_CMD);        //Set vcomH
 8000f28:	2100      	movs	r1, #0
 8000f2a:	20be      	movs	r0, #190	; 0xbe
 8000f2c:	f7ff fe14 	bl	8000b58 <ssd1331_write_byte>
  ssd1331_write_byte(0x3E, SSD1331_CMD);
 8000f30:	2100      	movs	r1, #0
 8000f32:	203e      	movs	r0, #62	; 0x3e
 8000f34:	f7ff fe10 	bl	8000b58 <ssd1331_write_byte>
  ssd1331_write_byte(DEACTIVE_SCROLLING, SSD1331_CMD);   //disable scrolling
 8000f38:	2100      	movs	r1, #0
 8000f3a:	202e      	movs	r0, #46	; 0x2e
 8000f3c:	f7ff fe0c 	bl	8000b58 <ssd1331_write_byte>
  ssd1331_write_byte(NORMAL_BRIGHTNESS_DISPLAY_ON, SSD1331_CMD);//set display on
 8000f40:	2100      	movs	r1, #0
 8000f42:	20af      	movs	r0, #175	; 0xaf
 8000f44:	f7ff fe08 	bl	8000b58 <ssd1331_write_byte>

  //ssd1331_fill_rect(0, 0, 96, 64, 0x0000);
  ssd1331_clear_screen(0x0000);
 8000f48:	2000      	movs	r0, #0
 8000f4a:	f7ff ff34 	bl	8000db6 <ssd1331_clear_screen>
}
 8000f4e:	bf00      	nop
 8000f50:	bd80      	pop	{r7, pc}
 8000f52:	bf00      	nop
 8000f54:	48000400 	.word	0x48000400

08000f58 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f58:	b480      	push	{r7}
 8000f5a:	b083      	sub	sp, #12
 8000f5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f5e:	4b0f      	ldr	r3, [pc, #60]	; (8000f9c <HAL_MspInit+0x44>)
 8000f60:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f62:	4a0e      	ldr	r2, [pc, #56]	; (8000f9c <HAL_MspInit+0x44>)
 8000f64:	f043 0301 	orr.w	r3, r3, #1
 8000f68:	6613      	str	r3, [r2, #96]	; 0x60
 8000f6a:	4b0c      	ldr	r3, [pc, #48]	; (8000f9c <HAL_MspInit+0x44>)
 8000f6c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f6e:	f003 0301 	and.w	r3, r3, #1
 8000f72:	607b      	str	r3, [r7, #4]
 8000f74:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f76:	4b09      	ldr	r3, [pc, #36]	; (8000f9c <HAL_MspInit+0x44>)
 8000f78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f7a:	4a08      	ldr	r2, [pc, #32]	; (8000f9c <HAL_MspInit+0x44>)
 8000f7c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f80:	6593      	str	r3, [r2, #88]	; 0x58
 8000f82:	4b06      	ldr	r3, [pc, #24]	; (8000f9c <HAL_MspInit+0x44>)
 8000f84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f8a:	603b      	str	r3, [r7, #0]
 8000f8c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f8e:	bf00      	nop
 8000f90:	370c      	adds	r7, #12
 8000f92:	46bd      	mov	sp, r7
 8000f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f98:	4770      	bx	lr
 8000f9a:	bf00      	nop
 8000f9c:	40021000 	.word	0x40021000

08000fa0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b08a      	sub	sp, #40	; 0x28
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fa8:	f107 0314 	add.w	r3, r7, #20
 8000fac:	2200      	movs	r2, #0
 8000fae:	601a      	str	r2, [r3, #0]
 8000fb0:	605a      	str	r2, [r3, #4]
 8000fb2:	609a      	str	r2, [r3, #8]
 8000fb4:	60da      	str	r2, [r3, #12]
 8000fb6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	4a18      	ldr	r2, [pc, #96]	; (8001020 <HAL_SPI_MspInit+0x80>)
 8000fbe:	4293      	cmp	r3, r2
 8000fc0:	d129      	bne.n	8001016 <HAL_SPI_MspInit+0x76>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000fc2:	4b18      	ldr	r3, [pc, #96]	; (8001024 <HAL_SPI_MspInit+0x84>)
 8000fc4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000fc6:	4a17      	ldr	r2, [pc, #92]	; (8001024 <HAL_SPI_MspInit+0x84>)
 8000fc8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000fcc:	6613      	str	r3, [r2, #96]	; 0x60
 8000fce:	4b15      	ldr	r3, [pc, #84]	; (8001024 <HAL_SPI_MspInit+0x84>)
 8000fd0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000fd2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000fd6:	613b      	str	r3, [r7, #16]
 8000fd8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fda:	4b12      	ldr	r3, [pc, #72]	; (8001024 <HAL_SPI_MspInit+0x84>)
 8000fdc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fde:	4a11      	ldr	r2, [pc, #68]	; (8001024 <HAL_SPI_MspInit+0x84>)
 8000fe0:	f043 0301 	orr.w	r3, r3, #1
 8000fe4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000fe6:	4b0f      	ldr	r3, [pc, #60]	; (8001024 <HAL_SPI_MspInit+0x84>)
 8000fe8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fea:	f003 0301 	and.w	r3, r3, #1
 8000fee:	60fb      	str	r3, [r7, #12]
 8000ff0:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA12     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_12;
 8000ff2:	f44f 5381 	mov.w	r3, #4128	; 0x1020
 8000ff6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ff8:	2302      	movs	r3, #2
 8000ffa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001000:	2303      	movs	r3, #3
 8001002:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001004:	2305      	movs	r3, #5
 8001006:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001008:	f107 0314 	add.w	r3, r7, #20
 800100c:	4619      	mov	r1, r3
 800100e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001012:	f001 fbd5 	bl	80027c0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001016:	bf00      	nop
 8001018:	3728      	adds	r7, #40	; 0x28
 800101a:	46bd      	mov	sp, r7
 800101c:	bd80      	pop	{r7, pc}
 800101e:	bf00      	nop
 8001020:	40013000 	.word	0x40013000
 8001024:	40021000 	.word	0x40021000

08001028 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	b09e      	sub	sp, #120	; 0x78
 800102c:	af00      	add	r7, sp, #0
 800102e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001030:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001034:	2200      	movs	r2, #0
 8001036:	601a      	str	r2, [r3, #0]
 8001038:	605a      	str	r2, [r3, #4]
 800103a:	609a      	str	r2, [r3, #8]
 800103c:	60da      	str	r2, [r3, #12]
 800103e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001040:	f107 0310 	add.w	r3, r7, #16
 8001044:	2254      	movs	r2, #84	; 0x54
 8001046:	2100      	movs	r1, #0
 8001048:	4618      	mov	r0, r3
 800104a:	f003 fea9 	bl	8004da0 <memset>
  if(hadc->Instance==ADC1)
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	4a25      	ldr	r2, [pc, #148]	; (80010e8 <HAL_ADC_MspInit+0xc0>)
 8001054:	4293      	cmp	r3, r2
 8001056:	d143      	bne.n	80010e0 <HAL_ADC_MspInit+0xb8>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001058:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800105c:	613b      	str	r3, [r7, #16]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 800105e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8001062:	65bb      	str	r3, [r7, #88]	; 0x58
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8001064:	2301      	movs	r3, #1
 8001066:	617b      	str	r3, [r7, #20]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8001068:	2301      	movs	r3, #1
 800106a:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 16;
 800106c:	2310      	movs	r3, #16
 800106e:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8001070:	2307      	movs	r3, #7
 8001072:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8001074:	2302      	movs	r3, #2
 8001076:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8001078:	2302      	movs	r3, #2
 800107a:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 800107c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001080:	62fb      	str	r3, [r7, #44]	; 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001082:	f107 0310 	add.w	r3, r7, #16
 8001086:	4618      	mov	r0, r3
 8001088:	f002 fbc8 	bl	800381c <HAL_RCCEx_PeriphCLKConfig>
 800108c:	4603      	mov	r3, r0
 800108e:	2b00      	cmp	r3, #0
 8001090:	d001      	beq.n	8001096 <HAL_ADC_MspInit+0x6e>
    {
      Error_Handler();
 8001092:	f7ff fd5b 	bl	8000b4c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8001096:	4b15      	ldr	r3, [pc, #84]	; (80010ec <HAL_ADC_MspInit+0xc4>)
 8001098:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800109a:	4a14      	ldr	r2, [pc, #80]	; (80010ec <HAL_ADC_MspInit+0xc4>)
 800109c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80010a0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80010a2:	4b12      	ldr	r3, [pc, #72]	; (80010ec <HAL_ADC_MspInit+0xc4>)
 80010a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010a6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80010aa:	60fb      	str	r3, [r7, #12]
 80010ac:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010ae:	4b0f      	ldr	r3, [pc, #60]	; (80010ec <HAL_ADC_MspInit+0xc4>)
 80010b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010b2:	4a0e      	ldr	r2, [pc, #56]	; (80010ec <HAL_ADC_MspInit+0xc4>)
 80010b4:	f043 0301 	orr.w	r3, r3, #1
 80010b8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80010ba:	4b0c      	ldr	r3, [pc, #48]	; (80010ec <HAL_ADC_MspInit+0xc4>)
 80010bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010be:	f003 0301 	and.w	r3, r3, #1
 80010c2:	60bb      	str	r3, [r7, #8]
 80010c4:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA7     ------> ADC1_IN12
    */
    GPIO_InitStruct.Pin = TEMP_READPIN_Pin;
 80010c6:	2380      	movs	r3, #128	; 0x80
 80010c8:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80010ca:	230b      	movs	r3, #11
 80010cc:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ce:	2300      	movs	r3, #0
 80010d0:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(TEMP_READPIN_GPIO_Port, &GPIO_InitStruct);
 80010d2:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80010d6:	4619      	mov	r1, r3
 80010d8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010dc:	f001 fb70 	bl	80027c0 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80010e0:	bf00      	nop
 80010e2:	3778      	adds	r7, #120	; 0x78
 80010e4:	46bd      	mov	sp, r7
 80010e6:	bd80      	pop	{r7, pc}
 80010e8:	50040000 	.word	0x50040000
 80010ec:	40021000 	.word	0x40021000

080010f0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b09e      	sub	sp, #120	; 0x78
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010f8:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80010fc:	2200      	movs	r2, #0
 80010fe:	601a      	str	r2, [r3, #0]
 8001100:	605a      	str	r2, [r3, #4]
 8001102:	609a      	str	r2, [r3, #8]
 8001104:	60da      	str	r2, [r3, #12]
 8001106:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001108:	f107 0310 	add.w	r3, r7, #16
 800110c:	2254      	movs	r2, #84	; 0x54
 800110e:	2100      	movs	r1, #0
 8001110:	4618      	mov	r0, r3
 8001112:	f003 fe45 	bl	8004da0 <memset>
  if(huart->Instance==USART2)
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	4a28      	ldr	r2, [pc, #160]	; (80011bc <HAL_UART_MspInit+0xcc>)
 800111c:	4293      	cmp	r3, r2
 800111e:	d148      	bne.n	80011b2 <HAL_UART_MspInit+0xc2>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001120:	2302      	movs	r3, #2
 8001122:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001124:	2300      	movs	r3, #0
 8001126:	637b      	str	r3, [r7, #52]	; 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001128:	f107 0310 	add.w	r3, r7, #16
 800112c:	4618      	mov	r0, r3
 800112e:	f002 fb75 	bl	800381c <HAL_RCCEx_PeriphCLKConfig>
 8001132:	4603      	mov	r3, r0
 8001134:	2b00      	cmp	r3, #0
 8001136:	d001      	beq.n	800113c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001138:	f7ff fd08 	bl	8000b4c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800113c:	4b20      	ldr	r3, [pc, #128]	; (80011c0 <HAL_UART_MspInit+0xd0>)
 800113e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001140:	4a1f      	ldr	r2, [pc, #124]	; (80011c0 <HAL_UART_MspInit+0xd0>)
 8001142:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001146:	6593      	str	r3, [r2, #88]	; 0x58
 8001148:	4b1d      	ldr	r3, [pc, #116]	; (80011c0 <HAL_UART_MspInit+0xd0>)
 800114a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800114c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001150:	60fb      	str	r3, [r7, #12]
 8001152:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001154:	4b1a      	ldr	r3, [pc, #104]	; (80011c0 <HAL_UART_MspInit+0xd0>)
 8001156:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001158:	4a19      	ldr	r2, [pc, #100]	; (80011c0 <HAL_UART_MspInit+0xd0>)
 800115a:	f043 0301 	orr.w	r3, r3, #1
 800115e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001160:	4b17      	ldr	r3, [pc, #92]	; (80011c0 <HAL_UART_MspInit+0xd0>)
 8001162:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001164:	f003 0301 	and.w	r3, r3, #1
 8001168:	60bb      	str	r3, [r7, #8]
 800116a:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15 (JTDI)     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 800116c:	2304      	movs	r3, #4
 800116e:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001170:	2302      	movs	r3, #2
 8001172:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001174:	2300      	movs	r3, #0
 8001176:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001178:	2303      	movs	r3, #3
 800117a:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800117c:	2307      	movs	r3, #7
 800117e:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8001180:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001184:	4619      	mov	r1, r3
 8001186:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800118a:	f001 fb19 	bl	80027c0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_RX_Pin;
 800118e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001192:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001194:	2302      	movs	r3, #2
 8001196:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001198:	2300      	movs	r3, #0
 800119a:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800119c:	2303      	movs	r3, #3
 800119e:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 80011a0:	2303      	movs	r3, #3
 80011a2:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 80011a4:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80011a8:	4619      	mov	r1, r3
 80011aa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011ae:	f001 fb07 	bl	80027c0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80011b2:	bf00      	nop
 80011b4:	3778      	adds	r7, #120	; 0x78
 80011b6:	46bd      	mov	sp, r7
 80011b8:	bd80      	pop	{r7, pc}
 80011ba:	bf00      	nop
 80011bc:	40004400 	.word	0x40004400
 80011c0:	40021000 	.word	0x40021000

080011c4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80011c4:	b480      	push	{r7}
 80011c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80011c8:	e7fe      	b.n	80011c8 <NMI_Handler+0x4>

080011ca <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80011ca:	b480      	push	{r7}
 80011cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80011ce:	e7fe      	b.n	80011ce <HardFault_Handler+0x4>

080011d0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80011d0:	b480      	push	{r7}
 80011d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80011d4:	e7fe      	b.n	80011d4 <MemManage_Handler+0x4>

080011d6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80011d6:	b480      	push	{r7}
 80011d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80011da:	e7fe      	b.n	80011da <BusFault_Handler+0x4>

080011dc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80011dc:	b480      	push	{r7}
 80011de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80011e0:	e7fe      	b.n	80011e0 <UsageFault_Handler+0x4>

080011e2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80011e2:	b480      	push	{r7}
 80011e4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80011e6:	bf00      	nop
 80011e8:	46bd      	mov	sp, r7
 80011ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ee:	4770      	bx	lr

080011f0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80011f0:	b480      	push	{r7}
 80011f2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80011f4:	bf00      	nop
 80011f6:	46bd      	mov	sp, r7
 80011f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fc:	4770      	bx	lr

080011fe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80011fe:	b480      	push	{r7}
 8001200:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001202:	bf00      	nop
 8001204:	46bd      	mov	sp, r7
 8001206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120a:	4770      	bx	lr

0800120c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001210:	f000 f936 	bl	8001480 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001214:	bf00      	nop
 8001216:	bd80      	pop	{r7, pc}

08001218 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001218:	b580      	push	{r7, lr}
 800121a:	b086      	sub	sp, #24
 800121c:	af00      	add	r7, sp, #0
 800121e:	60f8      	str	r0, [r7, #12]
 8001220:	60b9      	str	r1, [r7, #8]
 8001222:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001224:	2300      	movs	r3, #0
 8001226:	617b      	str	r3, [r7, #20]
 8001228:	e00a      	b.n	8001240 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800122a:	f3af 8000 	nop.w
 800122e:	4601      	mov	r1, r0
 8001230:	68bb      	ldr	r3, [r7, #8]
 8001232:	1c5a      	adds	r2, r3, #1
 8001234:	60ba      	str	r2, [r7, #8]
 8001236:	b2ca      	uxtb	r2, r1
 8001238:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800123a:	697b      	ldr	r3, [r7, #20]
 800123c:	3301      	adds	r3, #1
 800123e:	617b      	str	r3, [r7, #20]
 8001240:	697a      	ldr	r2, [r7, #20]
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	429a      	cmp	r2, r3
 8001246:	dbf0      	blt.n	800122a <_read+0x12>
	}

return len;
 8001248:	687b      	ldr	r3, [r7, #4]
}
 800124a:	4618      	mov	r0, r3
 800124c:	3718      	adds	r7, #24
 800124e:	46bd      	mov	sp, r7
 8001250:	bd80      	pop	{r7, pc}

08001252 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001252:	b580      	push	{r7, lr}
 8001254:	b086      	sub	sp, #24
 8001256:	af00      	add	r7, sp, #0
 8001258:	60f8      	str	r0, [r7, #12]
 800125a:	60b9      	str	r1, [r7, #8]
 800125c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800125e:	2300      	movs	r3, #0
 8001260:	617b      	str	r3, [r7, #20]
 8001262:	e009      	b.n	8001278 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001264:	68bb      	ldr	r3, [r7, #8]
 8001266:	1c5a      	adds	r2, r3, #1
 8001268:	60ba      	str	r2, [r7, #8]
 800126a:	781b      	ldrb	r3, [r3, #0]
 800126c:	4618      	mov	r0, r3
 800126e:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001272:	697b      	ldr	r3, [r7, #20]
 8001274:	3301      	adds	r3, #1
 8001276:	617b      	str	r3, [r7, #20]
 8001278:	697a      	ldr	r2, [r7, #20]
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	429a      	cmp	r2, r3
 800127e:	dbf1      	blt.n	8001264 <_write+0x12>
	}
	return len;
 8001280:	687b      	ldr	r3, [r7, #4]
}
 8001282:	4618      	mov	r0, r3
 8001284:	3718      	adds	r7, #24
 8001286:	46bd      	mov	sp, r7
 8001288:	bd80      	pop	{r7, pc}

0800128a <_close>:

int _close(int file)
{
 800128a:	b480      	push	{r7}
 800128c:	b083      	sub	sp, #12
 800128e:	af00      	add	r7, sp, #0
 8001290:	6078      	str	r0, [r7, #4]
	return -1;
 8001292:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001296:	4618      	mov	r0, r3
 8001298:	370c      	adds	r7, #12
 800129a:	46bd      	mov	sp, r7
 800129c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a0:	4770      	bx	lr

080012a2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80012a2:	b480      	push	{r7}
 80012a4:	b083      	sub	sp, #12
 80012a6:	af00      	add	r7, sp, #0
 80012a8:	6078      	str	r0, [r7, #4]
 80012aa:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80012ac:	683b      	ldr	r3, [r7, #0]
 80012ae:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80012b2:	605a      	str	r2, [r3, #4]
	return 0;
 80012b4:	2300      	movs	r3, #0
}
 80012b6:	4618      	mov	r0, r3
 80012b8:	370c      	adds	r7, #12
 80012ba:	46bd      	mov	sp, r7
 80012bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c0:	4770      	bx	lr

080012c2 <_isatty>:

int _isatty(int file)
{
 80012c2:	b480      	push	{r7}
 80012c4:	b083      	sub	sp, #12
 80012c6:	af00      	add	r7, sp, #0
 80012c8:	6078      	str	r0, [r7, #4]
	return 1;
 80012ca:	2301      	movs	r3, #1
}
 80012cc:	4618      	mov	r0, r3
 80012ce:	370c      	adds	r7, #12
 80012d0:	46bd      	mov	sp, r7
 80012d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d6:	4770      	bx	lr

080012d8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80012d8:	b480      	push	{r7}
 80012da:	b085      	sub	sp, #20
 80012dc:	af00      	add	r7, sp, #0
 80012de:	60f8      	str	r0, [r7, #12]
 80012e0:	60b9      	str	r1, [r7, #8]
 80012e2:	607a      	str	r2, [r7, #4]
	return 0;
 80012e4:	2300      	movs	r3, #0
}
 80012e6:	4618      	mov	r0, r3
 80012e8:	3714      	adds	r7, #20
 80012ea:	46bd      	mov	sp, r7
 80012ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f0:	4770      	bx	lr
	...

080012f4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	b086      	sub	sp, #24
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80012fc:	4a14      	ldr	r2, [pc, #80]	; (8001350 <_sbrk+0x5c>)
 80012fe:	4b15      	ldr	r3, [pc, #84]	; (8001354 <_sbrk+0x60>)
 8001300:	1ad3      	subs	r3, r2, r3
 8001302:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001304:	697b      	ldr	r3, [r7, #20]
 8001306:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001308:	4b13      	ldr	r3, [pc, #76]	; (8001358 <_sbrk+0x64>)
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	2b00      	cmp	r3, #0
 800130e:	d102      	bne.n	8001316 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001310:	4b11      	ldr	r3, [pc, #68]	; (8001358 <_sbrk+0x64>)
 8001312:	4a12      	ldr	r2, [pc, #72]	; (800135c <_sbrk+0x68>)
 8001314:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001316:	4b10      	ldr	r3, [pc, #64]	; (8001358 <_sbrk+0x64>)
 8001318:	681a      	ldr	r2, [r3, #0]
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	4413      	add	r3, r2
 800131e:	693a      	ldr	r2, [r7, #16]
 8001320:	429a      	cmp	r2, r3
 8001322:	d207      	bcs.n	8001334 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001324:	f003 fd12 	bl	8004d4c <__errno>
 8001328:	4603      	mov	r3, r0
 800132a:	220c      	movs	r2, #12
 800132c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800132e:	f04f 33ff 	mov.w	r3, #4294967295
 8001332:	e009      	b.n	8001348 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001334:	4b08      	ldr	r3, [pc, #32]	; (8001358 <_sbrk+0x64>)
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800133a:	4b07      	ldr	r3, [pc, #28]	; (8001358 <_sbrk+0x64>)
 800133c:	681a      	ldr	r2, [r3, #0]
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	4413      	add	r3, r2
 8001342:	4a05      	ldr	r2, [pc, #20]	; (8001358 <_sbrk+0x64>)
 8001344:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001346:	68fb      	ldr	r3, [r7, #12]
}
 8001348:	4618      	mov	r0, r3
 800134a:	3718      	adds	r7, #24
 800134c:	46bd      	mov	sp, r7
 800134e:	bd80      	pop	{r7, pc}
 8001350:	20010000 	.word	0x20010000
 8001354:	00000400 	.word	0x00000400
 8001358:	200001d8 	.word	0x200001d8
 800135c:	200001f0 	.word	0x200001f0

08001360 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001360:	b480      	push	{r7}
 8001362:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001364:	4b06      	ldr	r3, [pc, #24]	; (8001380 <SystemInit+0x20>)
 8001366:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800136a:	4a05      	ldr	r2, [pc, #20]	; (8001380 <SystemInit+0x20>)
 800136c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001370:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001374:	bf00      	nop
 8001376:	46bd      	mov	sp, r7
 8001378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137c:	4770      	bx	lr
 800137e:	bf00      	nop
 8001380:	e000ed00 	.word	0xe000ed00

08001384 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001384:	f8df d034 	ldr.w	sp, [pc, #52]	; 80013bc <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001388:	f7ff ffea 	bl	8001360 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800138c:	480c      	ldr	r0, [pc, #48]	; (80013c0 <LoopForever+0x6>)
  ldr r1, =_edata
 800138e:	490d      	ldr	r1, [pc, #52]	; (80013c4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001390:	4a0d      	ldr	r2, [pc, #52]	; (80013c8 <LoopForever+0xe>)
  movs r3, #0
 8001392:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001394:	e002      	b.n	800139c <LoopCopyDataInit>

08001396 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001396:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001398:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800139a:	3304      	adds	r3, #4

0800139c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800139c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800139e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80013a0:	d3f9      	bcc.n	8001396 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80013a2:	4a0a      	ldr	r2, [pc, #40]	; (80013cc <LoopForever+0x12>)
  ldr r4, =_ebss
 80013a4:	4c0a      	ldr	r4, [pc, #40]	; (80013d0 <LoopForever+0x16>)
  movs r3, #0
 80013a6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80013a8:	e001      	b.n	80013ae <LoopFillZerobss>

080013aa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80013aa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80013ac:	3204      	adds	r2, #4

080013ae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80013ae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80013b0:	d3fb      	bcc.n	80013aa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80013b2:	f003 fcd1 	bl	8004d58 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80013b6:	f7ff f8dd 	bl	8000574 <main>

080013ba <LoopForever>:

LoopForever:
    b LoopForever
 80013ba:	e7fe      	b.n	80013ba <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80013bc:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80013c0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80013c4:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 80013c8:	08006a94 	.word	0x08006a94
  ldr r2, =_sbss
 80013cc:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 80013d0:	200001f0 	.word	0x200001f0

080013d4 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80013d4:	e7fe      	b.n	80013d4 <ADC1_IRQHandler>

080013d6 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80013d6:	b580      	push	{r7, lr}
 80013d8:	b082      	sub	sp, #8
 80013da:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80013dc:	2300      	movs	r3, #0
 80013de:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80013e0:	2003      	movs	r0, #3
 80013e2:	f001 f9b9 	bl	8002758 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80013e6:	2000      	movs	r0, #0
 80013e8:	f000 f80e 	bl	8001408 <HAL_InitTick>
 80013ec:	4603      	mov	r3, r0
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d002      	beq.n	80013f8 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80013f2:	2301      	movs	r3, #1
 80013f4:	71fb      	strb	r3, [r7, #7]
 80013f6:	e001      	b.n	80013fc <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80013f8:	f7ff fdae 	bl	8000f58 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80013fc:	79fb      	ldrb	r3, [r7, #7]
}
 80013fe:	4618      	mov	r0, r3
 8001400:	3708      	adds	r7, #8
 8001402:	46bd      	mov	sp, r7
 8001404:	bd80      	pop	{r7, pc}
	...

08001408 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001408:	b580      	push	{r7, lr}
 800140a:	b084      	sub	sp, #16
 800140c:	af00      	add	r7, sp, #0
 800140e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001410:	2300      	movs	r3, #0
 8001412:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001414:	4b17      	ldr	r3, [pc, #92]	; (8001474 <HAL_InitTick+0x6c>)
 8001416:	781b      	ldrb	r3, [r3, #0]
 8001418:	2b00      	cmp	r3, #0
 800141a:	d023      	beq.n	8001464 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 800141c:	4b16      	ldr	r3, [pc, #88]	; (8001478 <HAL_InitTick+0x70>)
 800141e:	681a      	ldr	r2, [r3, #0]
 8001420:	4b14      	ldr	r3, [pc, #80]	; (8001474 <HAL_InitTick+0x6c>)
 8001422:	781b      	ldrb	r3, [r3, #0]
 8001424:	4619      	mov	r1, r3
 8001426:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800142a:	fbb3 f3f1 	udiv	r3, r3, r1
 800142e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001432:	4618      	mov	r0, r3
 8001434:	f001 f9b7 	bl	80027a6 <HAL_SYSTICK_Config>
 8001438:	4603      	mov	r3, r0
 800143a:	2b00      	cmp	r3, #0
 800143c:	d10f      	bne.n	800145e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	2b0f      	cmp	r3, #15
 8001442:	d809      	bhi.n	8001458 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001444:	2200      	movs	r2, #0
 8001446:	6879      	ldr	r1, [r7, #4]
 8001448:	f04f 30ff 	mov.w	r0, #4294967295
 800144c:	f001 f98f 	bl	800276e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001450:	4a0a      	ldr	r2, [pc, #40]	; (800147c <HAL_InitTick+0x74>)
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	6013      	str	r3, [r2, #0]
 8001456:	e007      	b.n	8001468 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001458:	2301      	movs	r3, #1
 800145a:	73fb      	strb	r3, [r7, #15]
 800145c:	e004      	b.n	8001468 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800145e:	2301      	movs	r3, #1
 8001460:	73fb      	strb	r3, [r7, #15]
 8001462:	e001      	b.n	8001468 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001464:	2301      	movs	r3, #1
 8001466:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001468:	7bfb      	ldrb	r3, [r7, #15]
}
 800146a:	4618      	mov	r0, r3
 800146c:	3710      	adds	r7, #16
 800146e:	46bd      	mov	sp, r7
 8001470:	bd80      	pop	{r7, pc}
 8001472:	bf00      	nop
 8001474:	20000008 	.word	0x20000008
 8001478:	20000000 	.word	0x20000000
 800147c:	20000004 	.word	0x20000004

08001480 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001480:	b480      	push	{r7}
 8001482:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001484:	4b06      	ldr	r3, [pc, #24]	; (80014a0 <HAL_IncTick+0x20>)
 8001486:	781b      	ldrb	r3, [r3, #0]
 8001488:	461a      	mov	r2, r3
 800148a:	4b06      	ldr	r3, [pc, #24]	; (80014a4 <HAL_IncTick+0x24>)
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	4413      	add	r3, r2
 8001490:	4a04      	ldr	r2, [pc, #16]	; (80014a4 <HAL_IncTick+0x24>)
 8001492:	6013      	str	r3, [r2, #0]
}
 8001494:	bf00      	nop
 8001496:	46bd      	mov	sp, r7
 8001498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800149c:	4770      	bx	lr
 800149e:	bf00      	nop
 80014a0:	20000008 	.word	0x20000008
 80014a4:	200001dc 	.word	0x200001dc

080014a8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80014a8:	b480      	push	{r7}
 80014aa:	af00      	add	r7, sp, #0
  return uwTick;
 80014ac:	4b03      	ldr	r3, [pc, #12]	; (80014bc <HAL_GetTick+0x14>)
 80014ae:	681b      	ldr	r3, [r3, #0]
}
 80014b0:	4618      	mov	r0, r3
 80014b2:	46bd      	mov	sp, r7
 80014b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b8:	4770      	bx	lr
 80014ba:	bf00      	nop
 80014bc:	200001dc 	.word	0x200001dc

080014c0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	b084      	sub	sp, #16
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80014c8:	f7ff ffee 	bl	80014a8 <HAL_GetTick>
 80014cc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80014d2:	68fb      	ldr	r3, [r7, #12]
 80014d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80014d8:	d005      	beq.n	80014e6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80014da:	4b0a      	ldr	r3, [pc, #40]	; (8001504 <HAL_Delay+0x44>)
 80014dc:	781b      	ldrb	r3, [r3, #0]
 80014de:	461a      	mov	r2, r3
 80014e0:	68fb      	ldr	r3, [r7, #12]
 80014e2:	4413      	add	r3, r2
 80014e4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80014e6:	bf00      	nop
 80014e8:	f7ff ffde 	bl	80014a8 <HAL_GetTick>
 80014ec:	4602      	mov	r2, r0
 80014ee:	68bb      	ldr	r3, [r7, #8]
 80014f0:	1ad3      	subs	r3, r2, r3
 80014f2:	68fa      	ldr	r2, [r7, #12]
 80014f4:	429a      	cmp	r2, r3
 80014f6:	d8f7      	bhi.n	80014e8 <HAL_Delay+0x28>
  {
  }
}
 80014f8:	bf00      	nop
 80014fa:	bf00      	nop
 80014fc:	3710      	adds	r7, #16
 80014fe:	46bd      	mov	sp, r7
 8001500:	bd80      	pop	{r7, pc}
 8001502:	bf00      	nop
 8001504:	20000008 	.word	0x20000008

08001508 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001508:	b480      	push	{r7}
 800150a:	b083      	sub	sp, #12
 800150c:	af00      	add	r7, sp, #0
 800150e:	6078      	str	r0, [r7, #4]
 8001510:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	689b      	ldr	r3, [r3, #8]
 8001516:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 800151a:	683b      	ldr	r3, [r7, #0]
 800151c:	431a      	orrs	r2, r3
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	609a      	str	r2, [r3, #8]
}
 8001522:	bf00      	nop
 8001524:	370c      	adds	r7, #12
 8001526:	46bd      	mov	sp, r7
 8001528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800152c:	4770      	bx	lr

0800152e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800152e:	b480      	push	{r7}
 8001530:	b083      	sub	sp, #12
 8001532:	af00      	add	r7, sp, #0
 8001534:	6078      	str	r0, [r7, #4]
 8001536:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	689b      	ldr	r3, [r3, #8]
 800153c:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001540:	683b      	ldr	r3, [r7, #0]
 8001542:	431a      	orrs	r2, r3
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	609a      	str	r2, [r3, #8]
}
 8001548:	bf00      	nop
 800154a:	370c      	adds	r7, #12
 800154c:	46bd      	mov	sp, r7
 800154e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001552:	4770      	bx	lr

08001554 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001554:	b480      	push	{r7}
 8001556:	b083      	sub	sp, #12
 8001558:	af00      	add	r7, sp, #0
 800155a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	689b      	ldr	r3, [r3, #8]
 8001560:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001564:	4618      	mov	r0, r3
 8001566:	370c      	adds	r7, #12
 8001568:	46bd      	mov	sp, r7
 800156a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800156e:	4770      	bx	lr

08001570 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001570:	b480      	push	{r7}
 8001572:	b087      	sub	sp, #28
 8001574:	af00      	add	r7, sp, #0
 8001576:	60f8      	str	r0, [r7, #12]
 8001578:	60b9      	str	r1, [r7, #8]
 800157a:	607a      	str	r2, [r7, #4]
 800157c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800157e:	68fb      	ldr	r3, [r7, #12]
 8001580:	3360      	adds	r3, #96	; 0x60
 8001582:	461a      	mov	r2, r3
 8001584:	68bb      	ldr	r3, [r7, #8]
 8001586:	009b      	lsls	r3, r3, #2
 8001588:	4413      	add	r3, r2
 800158a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800158c:	697b      	ldr	r3, [r7, #20]
 800158e:	681a      	ldr	r2, [r3, #0]
 8001590:	4b08      	ldr	r3, [pc, #32]	; (80015b4 <LL_ADC_SetOffset+0x44>)
 8001592:	4013      	ands	r3, r2
 8001594:	687a      	ldr	r2, [r7, #4]
 8001596:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 800159a:	683a      	ldr	r2, [r7, #0]
 800159c:	430a      	orrs	r2, r1
 800159e:	4313      	orrs	r3, r2
 80015a0:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80015a4:	697b      	ldr	r3, [r7, #20]
 80015a6:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80015a8:	bf00      	nop
 80015aa:	371c      	adds	r7, #28
 80015ac:	46bd      	mov	sp, r7
 80015ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b2:	4770      	bx	lr
 80015b4:	03fff000 	.word	0x03fff000

080015b8 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80015b8:	b480      	push	{r7}
 80015ba:	b085      	sub	sp, #20
 80015bc:	af00      	add	r7, sp, #0
 80015be:	6078      	str	r0, [r7, #4]
 80015c0:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	3360      	adds	r3, #96	; 0x60
 80015c6:	461a      	mov	r2, r3
 80015c8:	683b      	ldr	r3, [r7, #0]
 80015ca:	009b      	lsls	r3, r3, #2
 80015cc:	4413      	add	r3, r2
 80015ce:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80015d0:	68fb      	ldr	r3, [r7, #12]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 80015d8:	4618      	mov	r0, r3
 80015da:	3714      	adds	r7, #20
 80015dc:	46bd      	mov	sp, r7
 80015de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e2:	4770      	bx	lr

080015e4 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80015e4:	b480      	push	{r7}
 80015e6:	b087      	sub	sp, #28
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	60f8      	str	r0, [r7, #12]
 80015ec:	60b9      	str	r1, [r7, #8]
 80015ee:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80015f0:	68fb      	ldr	r3, [r7, #12]
 80015f2:	3360      	adds	r3, #96	; 0x60
 80015f4:	461a      	mov	r2, r3
 80015f6:	68bb      	ldr	r3, [r7, #8]
 80015f8:	009b      	lsls	r3, r3, #2
 80015fa:	4413      	add	r3, r2
 80015fc:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80015fe:	697b      	ldr	r3, [r7, #20]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	431a      	orrs	r2, r3
 800160a:	697b      	ldr	r3, [r7, #20]
 800160c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800160e:	bf00      	nop
 8001610:	371c      	adds	r7, #28
 8001612:	46bd      	mov	sp, r7
 8001614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001618:	4770      	bx	lr

0800161a <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 800161a:	b480      	push	{r7}
 800161c:	b083      	sub	sp, #12
 800161e:	af00      	add	r7, sp, #0
 8001620:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	68db      	ldr	r3, [r3, #12]
 8001626:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800162a:	2b00      	cmp	r3, #0
 800162c:	d101      	bne.n	8001632 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 800162e:	2301      	movs	r3, #1
 8001630:	e000      	b.n	8001634 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001632:	2300      	movs	r3, #0
}
 8001634:	4618      	mov	r0, r3
 8001636:	370c      	adds	r7, #12
 8001638:	46bd      	mov	sp, r7
 800163a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163e:	4770      	bx	lr

08001640 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001640:	b480      	push	{r7}
 8001642:	b087      	sub	sp, #28
 8001644:	af00      	add	r7, sp, #0
 8001646:	60f8      	str	r0, [r7, #12]
 8001648:	60b9      	str	r1, [r7, #8]
 800164a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 800164c:	68fb      	ldr	r3, [r7, #12]
 800164e:	3330      	adds	r3, #48	; 0x30
 8001650:	461a      	mov	r2, r3
 8001652:	68bb      	ldr	r3, [r7, #8]
 8001654:	0a1b      	lsrs	r3, r3, #8
 8001656:	009b      	lsls	r3, r3, #2
 8001658:	f003 030c 	and.w	r3, r3, #12
 800165c:	4413      	add	r3, r2
 800165e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001660:	697b      	ldr	r3, [r7, #20]
 8001662:	681a      	ldr	r2, [r3, #0]
 8001664:	68bb      	ldr	r3, [r7, #8]
 8001666:	f003 031f 	and.w	r3, r3, #31
 800166a:	211f      	movs	r1, #31
 800166c:	fa01 f303 	lsl.w	r3, r1, r3
 8001670:	43db      	mvns	r3, r3
 8001672:	401a      	ands	r2, r3
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	0e9b      	lsrs	r3, r3, #26
 8001678:	f003 011f 	and.w	r1, r3, #31
 800167c:	68bb      	ldr	r3, [r7, #8]
 800167e:	f003 031f 	and.w	r3, r3, #31
 8001682:	fa01 f303 	lsl.w	r3, r1, r3
 8001686:	431a      	orrs	r2, r3
 8001688:	697b      	ldr	r3, [r7, #20]
 800168a:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800168c:	bf00      	nop
 800168e:	371c      	adds	r7, #28
 8001690:	46bd      	mov	sp, r7
 8001692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001696:	4770      	bx	lr

08001698 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001698:	b480      	push	{r7}
 800169a:	b087      	sub	sp, #28
 800169c:	af00      	add	r7, sp, #0
 800169e:	60f8      	str	r0, [r7, #12]
 80016a0:	60b9      	str	r1, [r7, #8]
 80016a2:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80016a4:	68fb      	ldr	r3, [r7, #12]
 80016a6:	3314      	adds	r3, #20
 80016a8:	461a      	mov	r2, r3
 80016aa:	68bb      	ldr	r3, [r7, #8]
 80016ac:	0e5b      	lsrs	r3, r3, #25
 80016ae:	009b      	lsls	r3, r3, #2
 80016b0:	f003 0304 	and.w	r3, r3, #4
 80016b4:	4413      	add	r3, r2
 80016b6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80016b8:	697b      	ldr	r3, [r7, #20]
 80016ba:	681a      	ldr	r2, [r3, #0]
 80016bc:	68bb      	ldr	r3, [r7, #8]
 80016be:	0d1b      	lsrs	r3, r3, #20
 80016c0:	f003 031f 	and.w	r3, r3, #31
 80016c4:	2107      	movs	r1, #7
 80016c6:	fa01 f303 	lsl.w	r3, r1, r3
 80016ca:	43db      	mvns	r3, r3
 80016cc:	401a      	ands	r2, r3
 80016ce:	68bb      	ldr	r3, [r7, #8]
 80016d0:	0d1b      	lsrs	r3, r3, #20
 80016d2:	f003 031f 	and.w	r3, r3, #31
 80016d6:	6879      	ldr	r1, [r7, #4]
 80016d8:	fa01 f303 	lsl.w	r3, r1, r3
 80016dc:	431a      	orrs	r2, r3
 80016de:	697b      	ldr	r3, [r7, #20]
 80016e0:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80016e2:	bf00      	nop
 80016e4:	371c      	adds	r7, #28
 80016e6:	46bd      	mov	sp, r7
 80016e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ec:	4770      	bx	lr
	...

080016f0 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80016f0:	b480      	push	{r7}
 80016f2:	b085      	sub	sp, #20
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	60f8      	str	r0, [r7, #12]
 80016f8:	60b9      	str	r1, [r7, #8]
 80016fa:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80016fc:	68fb      	ldr	r3, [r7, #12]
 80016fe:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8001702:	68bb      	ldr	r3, [r7, #8]
 8001704:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001708:	43db      	mvns	r3, r3
 800170a:	401a      	ands	r2, r3
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	f003 0318 	and.w	r3, r3, #24
 8001712:	4908      	ldr	r1, [pc, #32]	; (8001734 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001714:	40d9      	lsrs	r1, r3
 8001716:	68bb      	ldr	r3, [r7, #8]
 8001718:	400b      	ands	r3, r1
 800171a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800171e:	431a      	orrs	r2, r3
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001726:	bf00      	nop
 8001728:	3714      	adds	r7, #20
 800172a:	46bd      	mov	sp, r7
 800172c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001730:	4770      	bx	lr
 8001732:	bf00      	nop
 8001734:	0007ffff 	.word	0x0007ffff

08001738 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001738:	b480      	push	{r7}
 800173a:	b083      	sub	sp, #12
 800173c:	af00      	add	r7, sp, #0
 800173e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	689b      	ldr	r3, [r3, #8]
 8001744:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8001748:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800174c:	687a      	ldr	r2, [r7, #4]
 800174e:	6093      	str	r3, [r2, #8]
}
 8001750:	bf00      	nop
 8001752:	370c      	adds	r7, #12
 8001754:	46bd      	mov	sp, r7
 8001756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175a:	4770      	bx	lr

0800175c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 800175c:	b480      	push	{r7}
 800175e:	b083      	sub	sp, #12
 8001760:	af00      	add	r7, sp, #0
 8001762:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	689b      	ldr	r3, [r3, #8]
 8001768:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800176c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001770:	d101      	bne.n	8001776 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001772:	2301      	movs	r3, #1
 8001774:	e000      	b.n	8001778 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001776:	2300      	movs	r3, #0
}
 8001778:	4618      	mov	r0, r3
 800177a:	370c      	adds	r7, #12
 800177c:	46bd      	mov	sp, r7
 800177e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001782:	4770      	bx	lr

08001784 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001784:	b480      	push	{r7}
 8001786:	b083      	sub	sp, #12
 8001788:	af00      	add	r7, sp, #0
 800178a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	689b      	ldr	r3, [r3, #8]
 8001790:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8001794:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001798:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80017a0:	bf00      	nop
 80017a2:	370c      	adds	r7, #12
 80017a4:	46bd      	mov	sp, r7
 80017a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017aa:	4770      	bx	lr

080017ac <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80017ac:	b480      	push	{r7}
 80017ae:	b083      	sub	sp, #12
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	689b      	ldr	r3, [r3, #8]
 80017b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017bc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80017c0:	d101      	bne.n	80017c6 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80017c2:	2301      	movs	r3, #1
 80017c4:	e000      	b.n	80017c8 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80017c6:	2300      	movs	r3, #0
}
 80017c8:	4618      	mov	r0, r3
 80017ca:	370c      	adds	r7, #12
 80017cc:	46bd      	mov	sp, r7
 80017ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d2:	4770      	bx	lr

080017d4 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80017d4:	b480      	push	{r7}
 80017d6:	b083      	sub	sp, #12
 80017d8:	af00      	add	r7, sp, #0
 80017da:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	689b      	ldr	r3, [r3, #8]
 80017e0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80017e4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80017e8:	f043 0201 	orr.w	r2, r3, #1
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80017f0:	bf00      	nop
 80017f2:	370c      	adds	r7, #12
 80017f4:	46bd      	mov	sp, r7
 80017f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017fa:	4770      	bx	lr

080017fc <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80017fc:	b480      	push	{r7}
 80017fe:	b083      	sub	sp, #12
 8001800:	af00      	add	r7, sp, #0
 8001802:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	689b      	ldr	r3, [r3, #8]
 8001808:	f003 0301 	and.w	r3, r3, #1
 800180c:	2b01      	cmp	r3, #1
 800180e:	d101      	bne.n	8001814 <LL_ADC_IsEnabled+0x18>
 8001810:	2301      	movs	r3, #1
 8001812:	e000      	b.n	8001816 <LL_ADC_IsEnabled+0x1a>
 8001814:	2300      	movs	r3, #0
}
 8001816:	4618      	mov	r0, r3
 8001818:	370c      	adds	r7, #12
 800181a:	46bd      	mov	sp, r7
 800181c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001820:	4770      	bx	lr

08001822 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001822:	b480      	push	{r7}
 8001824:	b083      	sub	sp, #12
 8001826:	af00      	add	r7, sp, #0
 8001828:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	689b      	ldr	r3, [r3, #8]
 800182e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001832:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001836:	f043 0204 	orr.w	r2, r3, #4
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 800183e:	bf00      	nop
 8001840:	370c      	adds	r7, #12
 8001842:	46bd      	mov	sp, r7
 8001844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001848:	4770      	bx	lr

0800184a <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800184a:	b480      	push	{r7}
 800184c:	b083      	sub	sp, #12
 800184e:	af00      	add	r7, sp, #0
 8001850:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	689b      	ldr	r3, [r3, #8]
 8001856:	f003 0304 	and.w	r3, r3, #4
 800185a:	2b04      	cmp	r3, #4
 800185c:	d101      	bne.n	8001862 <LL_ADC_REG_IsConversionOngoing+0x18>
 800185e:	2301      	movs	r3, #1
 8001860:	e000      	b.n	8001864 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001862:	2300      	movs	r3, #0
}
 8001864:	4618      	mov	r0, r3
 8001866:	370c      	adds	r7, #12
 8001868:	46bd      	mov	sp, r7
 800186a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800186e:	4770      	bx	lr

08001870 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001870:	b480      	push	{r7}
 8001872:	b083      	sub	sp, #12
 8001874:	af00      	add	r7, sp, #0
 8001876:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	689b      	ldr	r3, [r3, #8]
 800187c:	f003 0308 	and.w	r3, r3, #8
 8001880:	2b08      	cmp	r3, #8
 8001882:	d101      	bne.n	8001888 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001884:	2301      	movs	r3, #1
 8001886:	e000      	b.n	800188a <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001888:	2300      	movs	r3, #0
}
 800188a:	4618      	mov	r0, r3
 800188c:	370c      	adds	r7, #12
 800188e:	46bd      	mov	sp, r7
 8001890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001894:	4770      	bx	lr
	...

08001898 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001898:	b580      	push	{r7, lr}
 800189a:	b088      	sub	sp, #32
 800189c:	af00      	add	r7, sp, #0
 800189e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80018a0:	2300      	movs	r3, #0
 80018a2:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80018a4:	2300      	movs	r3, #0
 80018a6:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d101      	bne.n	80018b2 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80018ae:	2301      	movs	r3, #1
 80018b0:	e12c      	b.n	8001b0c <HAL_ADC_Init+0x274>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	691b      	ldr	r3, [r3, #16]
 80018b6:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d109      	bne.n	80018d4 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80018c0:	6878      	ldr	r0, [r7, #4]
 80018c2:	f7ff fbb1 	bl	8001028 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	2200      	movs	r2, #0
 80018ca:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	2200      	movs	r2, #0
 80018d0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	4618      	mov	r0, r3
 80018da:	f7ff ff3f 	bl	800175c <LL_ADC_IsDeepPowerDownEnabled>
 80018de:	4603      	mov	r3, r0
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d004      	beq.n	80018ee <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	4618      	mov	r0, r3
 80018ea:	f7ff ff25 	bl	8001738 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	4618      	mov	r0, r3
 80018f4:	f7ff ff5a 	bl	80017ac <LL_ADC_IsInternalRegulatorEnabled>
 80018f8:	4603      	mov	r3, r0
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d115      	bne.n	800192a <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	4618      	mov	r0, r3
 8001904:	f7ff ff3e 	bl	8001784 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001908:	4b82      	ldr	r3, [pc, #520]	; (8001b14 <HAL_ADC_Init+0x27c>)
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	099b      	lsrs	r3, r3, #6
 800190e:	4a82      	ldr	r2, [pc, #520]	; (8001b18 <HAL_ADC_Init+0x280>)
 8001910:	fba2 2303 	umull	r2, r3, r2, r3
 8001914:	099b      	lsrs	r3, r3, #6
 8001916:	3301      	adds	r3, #1
 8001918:	005b      	lsls	r3, r3, #1
 800191a:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800191c:	e002      	b.n	8001924 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 800191e:	68bb      	ldr	r3, [r7, #8]
 8001920:	3b01      	subs	r3, #1
 8001922:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001924:	68bb      	ldr	r3, [r7, #8]
 8001926:	2b00      	cmp	r3, #0
 8001928:	d1f9      	bne.n	800191e <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	4618      	mov	r0, r3
 8001930:	f7ff ff3c 	bl	80017ac <LL_ADC_IsInternalRegulatorEnabled>
 8001934:	4603      	mov	r3, r0
 8001936:	2b00      	cmp	r3, #0
 8001938:	d10d      	bne.n	8001956 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800193e:	f043 0210 	orr.w	r2, r3, #16
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800194a:	f043 0201 	orr.w	r2, r3, #1
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001952:	2301      	movs	r3, #1
 8001954:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	4618      	mov	r0, r3
 800195c:	f7ff ff75 	bl	800184a <LL_ADC_REG_IsConversionOngoing>
 8001960:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001966:	f003 0310 	and.w	r3, r3, #16
 800196a:	2b00      	cmp	r3, #0
 800196c:	f040 80c5 	bne.w	8001afa <HAL_ADC_Init+0x262>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001970:	697b      	ldr	r3, [r7, #20]
 8001972:	2b00      	cmp	r3, #0
 8001974:	f040 80c1 	bne.w	8001afa <HAL_ADC_Init+0x262>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800197c:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001980:	f043 0202 	orr.w	r2, r3, #2
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	4618      	mov	r0, r3
 800198e:	f7ff ff35 	bl	80017fc <LL_ADC_IsEnabled>
 8001992:	4603      	mov	r3, r0
 8001994:	2b00      	cmp	r3, #0
 8001996:	d10b      	bne.n	80019b0 <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001998:	4860      	ldr	r0, [pc, #384]	; (8001b1c <HAL_ADC_Init+0x284>)
 800199a:	f7ff ff2f 	bl	80017fc <LL_ADC_IsEnabled>
 800199e:	4603      	mov	r3, r0
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d105      	bne.n	80019b0 <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	685b      	ldr	r3, [r3, #4]
 80019a8:	4619      	mov	r1, r3
 80019aa:	485d      	ldr	r0, [pc, #372]	; (8001b20 <HAL_ADC_Init+0x288>)
 80019ac:	f7ff fdac 	bl	8001508 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	7e5b      	ldrb	r3, [r3, #25]
 80019b4:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80019ba:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 80019c0:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 80019c6:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	f893 3020 	ldrb.w	r3, [r3, #32]
 80019ce:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80019d0:	4313      	orrs	r3, r2
 80019d2:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80019da:	2b01      	cmp	r3, #1
 80019dc:	d106      	bne.n	80019ec <HAL_ADC_Init+0x154>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019e2:	3b01      	subs	r3, #1
 80019e4:	045b      	lsls	r3, r3, #17
 80019e6:	69ba      	ldr	r2, [r7, #24]
 80019e8:	4313      	orrs	r3, r2
 80019ea:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d009      	beq.n	8001a08 <HAL_ADC_Init+0x170>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019f8:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a00:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001a02:	69ba      	ldr	r2, [r7, #24]
 8001a04:	4313      	orrs	r3, r2
 8001a06:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	68da      	ldr	r2, [r3, #12]
 8001a0e:	4b45      	ldr	r3, [pc, #276]	; (8001b24 <HAL_ADC_Init+0x28c>)
 8001a10:	4013      	ands	r3, r2
 8001a12:	687a      	ldr	r2, [r7, #4]
 8001a14:	6812      	ldr	r2, [r2, #0]
 8001a16:	69b9      	ldr	r1, [r7, #24]
 8001a18:	430b      	orrs	r3, r1
 8001a1a:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	4618      	mov	r0, r3
 8001a22:	f7ff ff12 	bl	800184a <LL_ADC_REG_IsConversionOngoing>
 8001a26:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	4618      	mov	r0, r3
 8001a2e:	f7ff ff1f 	bl	8001870 <LL_ADC_INJ_IsConversionOngoing>
 8001a32:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001a34:	693b      	ldr	r3, [r7, #16]
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d13d      	bne.n	8001ab6 <HAL_ADC_Init+0x21e>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d13a      	bne.n	8001ab6 <HAL_ADC_Init+0x21e>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001a44:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001a4c:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001a4e:	4313      	orrs	r3, r2
 8001a50:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	68db      	ldr	r3, [r3, #12]
 8001a58:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001a5c:	f023 0302 	bic.w	r3, r3, #2
 8001a60:	687a      	ldr	r2, [r7, #4]
 8001a62:	6812      	ldr	r2, [r2, #0]
 8001a64:	69b9      	ldr	r1, [r7, #24]
 8001a66:	430b      	orrs	r3, r1
 8001a68:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001a70:	2b01      	cmp	r3, #1
 8001a72:	d118      	bne.n	8001aa6 <HAL_ADC_Init+0x20e>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	691b      	ldr	r3, [r3, #16]
 8001a7a:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8001a7e:	f023 0304 	bic.w	r3, r3, #4
 8001a82:	687a      	ldr	r2, [r7, #4]
 8001a84:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8001a86:	687a      	ldr	r2, [r7, #4]
 8001a88:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001a8a:	4311      	orrs	r1, r2
 8001a8c:	687a      	ldr	r2, [r7, #4]
 8001a8e:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001a90:	4311      	orrs	r1, r2
 8001a92:	687a      	ldr	r2, [r7, #4]
 8001a94:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001a96:	430a      	orrs	r2, r1
 8001a98:	431a      	orrs	r2, r3
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	f042 0201 	orr.w	r2, r2, #1
 8001aa2:	611a      	str	r2, [r3, #16]
 8001aa4:	e007      	b.n	8001ab6 <HAL_ADC_Init+0x21e>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	691a      	ldr	r2, [r3, #16]
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	f022 0201 	bic.w	r2, r2, #1
 8001ab4:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	691b      	ldr	r3, [r3, #16]
 8001aba:	2b01      	cmp	r3, #1
 8001abc:	d10c      	bne.n	8001ad8 <HAL_ADC_Init+0x240>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ac4:	f023 010f 	bic.w	r1, r3, #15
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	69db      	ldr	r3, [r3, #28]
 8001acc:	1e5a      	subs	r2, r3, #1
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	430a      	orrs	r2, r1
 8001ad4:	631a      	str	r2, [r3, #48]	; 0x30
 8001ad6:	e007      	b.n	8001ae8 <HAL_ADC_Init+0x250>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	f022 020f 	bic.w	r2, r2, #15
 8001ae6:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001aec:	f023 0303 	bic.w	r3, r3, #3
 8001af0:	f043 0201 	orr.w	r2, r3, #1
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	655a      	str	r2, [r3, #84]	; 0x54
 8001af8:	e007      	b.n	8001b0a <HAL_ADC_Init+0x272>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001afe:	f043 0210 	orr.w	r2, r3, #16
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8001b06:	2301      	movs	r3, #1
 8001b08:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001b0a:	7ffb      	ldrb	r3, [r7, #31]
}
 8001b0c:	4618      	mov	r0, r3
 8001b0e:	3720      	adds	r7, #32
 8001b10:	46bd      	mov	sp, r7
 8001b12:	bd80      	pop	{r7, pc}
 8001b14:	20000000 	.word	0x20000000
 8001b18:	053e2d63 	.word	0x053e2d63
 8001b1c:	50040000 	.word	0x50040000
 8001b20:	50040300 	.word	0x50040300
 8001b24:	fff0c007 	.word	0xfff0c007

08001b28 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	b084      	sub	sp, #16
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	4618      	mov	r0, r3
 8001b36:	f7ff fe88 	bl	800184a <LL_ADC_REG_IsConversionOngoing>
 8001b3a:	4603      	mov	r3, r0
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d14f      	bne.n	8001be0 <HAL_ADC_Start+0xb8>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001b46:	2b01      	cmp	r3, #1
 8001b48:	d101      	bne.n	8001b4e <HAL_ADC_Start+0x26>
 8001b4a:	2302      	movs	r3, #2
 8001b4c:	e04b      	b.n	8001be6 <HAL_ADC_Start+0xbe>
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	2201      	movs	r2, #1
 8001b52:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001b56:	6878      	ldr	r0, [r7, #4]
 8001b58:	f000 fcc6 	bl	80024e8 <ADC_Enable>
 8001b5c:	4603      	mov	r3, r0
 8001b5e:	73fb      	strb	r3, [r7, #15]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001b60:	7bfb      	ldrb	r3, [r7, #15]
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d137      	bne.n	8001bd6 <HAL_ADC_Start+0xae>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b6a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001b6e:	f023 0301 	bic.w	r3, r3, #1
 8001b72:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	655a      	str	r2, [r3, #84]	; 0x54
      }
#endif

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b7e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001b82:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001b86:	d106      	bne.n	8001b96 <HAL_ADC_Start+0x6e>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b8c:	f023 0206 	bic.w	r2, r3, #6
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	659a      	str	r2, [r3, #88]	; 0x58
 8001b94:	e002      	b.n	8001b9c <HAL_ADC_Start+0x74>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	2200      	movs	r2, #0
 8001b9a:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	221c      	movs	r2, #28
 8001ba2:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	2200      	movs	r2, #0
 8001ba8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
        }

      }
#else
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	68db      	ldr	r3, [r3, #12]
 8001bb2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d007      	beq.n	8001bca <HAL_ADC_Start+0xa2>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001bbe:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001bc2:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	655a      	str	r2, [r3, #84]	; 0x54
      }

      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	4618      	mov	r0, r3
 8001bd0:	f7ff fe27 	bl	8001822 <LL_ADC_REG_StartConversion>
 8001bd4:	e006      	b.n	8001be4 <HAL_ADC_Start+0xbc>
#endif
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	2200      	movs	r2, #0
 8001bda:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8001bde:	e001      	b.n	8001be4 <HAL_ADC_Start+0xbc>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001be0:	2302      	movs	r3, #2
 8001be2:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return tmp_hal_status;
 8001be4:	7bfb      	ldrb	r3, [r7, #15]
}
 8001be6:	4618      	mov	r0, r3
 8001be8:	3710      	adds	r7, #16
 8001bea:	46bd      	mov	sp, r7
 8001bec:	bd80      	pop	{r7, pc}

08001bee <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8001bee:	b580      	push	{r7, lr}
 8001bf0:	b086      	sub	sp, #24
 8001bf2:	af00      	add	r7, sp, #0
 8001bf4:	6078      	str	r0, [r7, #4]
 8001bf6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	695b      	ldr	r3, [r3, #20]
 8001bfc:	2b08      	cmp	r3, #8
 8001bfe:	d102      	bne.n	8001c06 <HAL_ADC_PollForConversion+0x18>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8001c00:	2308      	movs	r3, #8
 8001c02:	617b      	str	r3, [r7, #20]
 8001c04:	e010      	b.n	8001c28 <HAL_ADC_PollForConversion+0x3a>
        tmp_Flag_End = (ADC_FLAG_EOC);
      }
    }
#else
    /* Check ADC DMA mode */
    if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	68db      	ldr	r3, [r3, #12]
 8001c0c:	f003 0301 	and.w	r3, r3, #1
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d007      	beq.n	8001c24 <HAL_ADC_PollForConversion+0x36>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c18:	f043 0220 	orr.w	r2, r3, #32
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_ERROR;
 8001c20:	2301      	movs	r3, #1
 8001c22:	e06f      	b.n	8001d04 <HAL_ADC_PollForConversion+0x116>
    }
    else
    {
      tmp_Flag_End = (ADC_FLAG_EOC);
 8001c24:	2304      	movs	r3, #4
 8001c26:	617b      	str	r3, [r7, #20]
    }
#endif
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8001c28:	f7ff fc3e 	bl	80014a8 <HAL_GetTick>
 8001c2c:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8001c2e:	e021      	b.n	8001c74 <HAL_ADC_PollForConversion+0x86>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8001c30:	683b      	ldr	r3, [r7, #0]
 8001c32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c36:	d01d      	beq.n	8001c74 <HAL_ADC_PollForConversion+0x86>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8001c38:	f7ff fc36 	bl	80014a8 <HAL_GetTick>
 8001c3c:	4602      	mov	r2, r0
 8001c3e:	693b      	ldr	r3, [r7, #16]
 8001c40:	1ad3      	subs	r3, r2, r3
 8001c42:	683a      	ldr	r2, [r7, #0]
 8001c44:	429a      	cmp	r2, r3
 8001c46:	d302      	bcc.n	8001c4e <HAL_ADC_PollForConversion+0x60>
 8001c48:	683b      	ldr	r3, [r7, #0]
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d112      	bne.n	8001c74 <HAL_ADC_PollForConversion+0x86>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	681a      	ldr	r2, [r3, #0]
 8001c54:	697b      	ldr	r3, [r7, #20]
 8001c56:	4013      	ands	r3, r2
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d10b      	bne.n	8001c74 <HAL_ADC_PollForConversion+0x86>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c60:	f043 0204 	orr.w	r2, r3, #4
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	655a      	str	r2, [r3, #84]	; 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	2200      	movs	r2, #0
 8001c6c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

          return HAL_TIMEOUT;
 8001c70:	2303      	movs	r3, #3
 8001c72:	e047      	b.n	8001d04 <HAL_ADC_PollForConversion+0x116>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	681a      	ldr	r2, [r3, #0]
 8001c7a:	697b      	ldr	r3, [r7, #20]
 8001c7c:	4013      	ands	r3, r2
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d0d6      	beq.n	8001c30 <HAL_ADC_PollForConversion+0x42>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c86:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	4618      	mov	r0, r3
 8001c94:	f7ff fcc1 	bl	800161a <LL_ADC_REG_IsTriggerSourceSWStart>
 8001c98:	4603      	mov	r3, r0
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d01c      	beq.n	8001cd8 <HAL_ADC_PollForConversion+0xea>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	7e5b      	ldrb	r3, [r3, #25]
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d118      	bne.n	8001cd8 <HAL_ADC_PollForConversion+0xea>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	f003 0308 	and.w	r3, r3, #8
 8001cb0:	2b08      	cmp	r3, #8
 8001cb2:	d111      	bne.n	8001cd8 <HAL_ADC_PollForConversion+0xea>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001cb8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	655a      	str	r2, [r3, #84]	; 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001cc4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d105      	bne.n	8001cd8 <HAL_ADC_PollForConversion+0xea>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001cd0:	f043 0201 	orr.w	r2, r3, #1
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	655a      	str	r2, [r3, #84]	; 0x54
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
  }
#else
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	68db      	ldr	r3, [r3, #12]
 8001cde:	60fb      	str	r3, [r7, #12]
#endif

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8001ce0:	697b      	ldr	r3, [r7, #20]
 8001ce2:	2b08      	cmp	r3, #8
 8001ce4:	d104      	bne.n	8001cf0 <HAL_ADC_PollForConversion+0x102>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	2208      	movs	r2, #8
 8001cec:	601a      	str	r2, [r3, #0]
 8001cee:	e008      	b.n	8001d02 <HAL_ADC_PollForConversion+0x114>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d103      	bne.n	8001d02 <HAL_ADC_PollForConversion+0x114>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	220c      	movs	r2, #12
 8001d00:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8001d02:	2300      	movs	r3, #0
}
 8001d04:	4618      	mov	r0, r3
 8001d06:	3718      	adds	r7, #24
 8001d08:	46bd      	mov	sp, r7
 8001d0a:	bd80      	pop	{r7, pc}

08001d0c <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8001d0c:	b480      	push	{r7}
 8001d0e:	b083      	sub	sp, #12
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8001d1a:	4618      	mov	r0, r3
 8001d1c:	370c      	adds	r7, #12
 8001d1e:	46bd      	mov	sp, r7
 8001d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d24:	4770      	bx	lr
	...

08001d28 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	b0b6      	sub	sp, #216	; 0xd8
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	6078      	str	r0, [r7, #4]
 8001d30:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001d32:	2300      	movs	r3, #0
 8001d34:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001d38:	2300      	movs	r3, #0
 8001d3a:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001d42:	2b01      	cmp	r3, #1
 8001d44:	d101      	bne.n	8001d4a <HAL_ADC_ConfigChannel+0x22>
 8001d46:	2302      	movs	r3, #2
 8001d48:	e3b9      	b.n	80024be <HAL_ADC_ConfigChannel+0x796>
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	2201      	movs	r2, #1
 8001d4e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	4618      	mov	r0, r3
 8001d58:	f7ff fd77 	bl	800184a <LL_ADC_REG_IsConversionOngoing>
 8001d5c:	4603      	mov	r3, r0
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	f040 839e 	bne.w	80024a0 <HAL_ADC_ConfigChannel+0x778>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 8001d64:	683b      	ldr	r3, [r7, #0]
 8001d66:	685b      	ldr	r3, [r3, #4]
 8001d68:	2b05      	cmp	r3, #5
 8001d6a:	d824      	bhi.n	8001db6 <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 8001d6c:	683b      	ldr	r3, [r7, #0]
 8001d6e:	685b      	ldr	r3, [r3, #4]
 8001d70:	3b02      	subs	r3, #2
 8001d72:	2b03      	cmp	r3, #3
 8001d74:	d81b      	bhi.n	8001dae <HAL_ADC_ConfigChannel+0x86>
 8001d76:	a201      	add	r2, pc, #4	; (adr r2, 8001d7c <HAL_ADC_ConfigChannel+0x54>)
 8001d78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d7c:	08001d8d 	.word	0x08001d8d
 8001d80:	08001d95 	.word	0x08001d95
 8001d84:	08001d9d 	.word	0x08001d9d
 8001d88:	08001da5 	.word	0x08001da5
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 8001d8c:	683b      	ldr	r3, [r7, #0]
 8001d8e:	220c      	movs	r2, #12
 8001d90:	605a      	str	r2, [r3, #4]
          break;
 8001d92:	e011      	b.n	8001db8 <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 8001d94:	683b      	ldr	r3, [r7, #0]
 8001d96:	2212      	movs	r2, #18
 8001d98:	605a      	str	r2, [r3, #4]
          break;
 8001d9a:	e00d      	b.n	8001db8 <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 8001d9c:	683b      	ldr	r3, [r7, #0]
 8001d9e:	2218      	movs	r2, #24
 8001da0:	605a      	str	r2, [r3, #4]
          break;
 8001da2:	e009      	b.n	8001db8 <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 8001da4:	683b      	ldr	r3, [r7, #0]
 8001da6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001daa:	605a      	str	r2, [r3, #4]
          break;
 8001dac:	e004      	b.n	8001db8 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 8001dae:	683b      	ldr	r3, [r7, #0]
 8001db0:	2206      	movs	r2, #6
 8001db2:	605a      	str	r2, [r3, #4]
          break;
 8001db4:	e000      	b.n	8001db8 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 8001db6:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	6818      	ldr	r0, [r3, #0]
 8001dbc:	683b      	ldr	r3, [r7, #0]
 8001dbe:	6859      	ldr	r1, [r3, #4]
 8001dc0:	683b      	ldr	r3, [r7, #0]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	461a      	mov	r2, r3
 8001dc6:	f7ff fc3b 	bl	8001640 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	4618      	mov	r0, r3
 8001dd0:	f7ff fd3b 	bl	800184a <LL_ADC_REG_IsConversionOngoing>
 8001dd4:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	4618      	mov	r0, r3
 8001dde:	f7ff fd47 	bl	8001870 <LL_ADC_INJ_IsConversionOngoing>
 8001de2:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001de6:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	f040 81a6 	bne.w	800213c <HAL_ADC_ConfigChannel+0x414>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001df0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	f040 81a1 	bne.w	800213c <HAL_ADC_ConfigChannel+0x414>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	6818      	ldr	r0, [r3, #0]
 8001dfe:	683b      	ldr	r3, [r7, #0]
 8001e00:	6819      	ldr	r1, [r3, #0]
 8001e02:	683b      	ldr	r3, [r7, #0]
 8001e04:	689b      	ldr	r3, [r3, #8]
 8001e06:	461a      	mov	r2, r3
 8001e08:	f7ff fc46 	bl	8001698 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8001e0c:	683b      	ldr	r3, [r7, #0]
 8001e0e:	695a      	ldr	r2, [r3, #20]
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	68db      	ldr	r3, [r3, #12]
 8001e16:	08db      	lsrs	r3, r3, #3
 8001e18:	f003 0303 	and.w	r3, r3, #3
 8001e1c:	005b      	lsls	r3, r3, #1
 8001e1e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e22:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001e26:	683b      	ldr	r3, [r7, #0]
 8001e28:	691b      	ldr	r3, [r3, #16]
 8001e2a:	2b04      	cmp	r3, #4
 8001e2c:	d00a      	beq.n	8001e44 <HAL_ADC_ConfigChannel+0x11c>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	6818      	ldr	r0, [r3, #0]
 8001e32:	683b      	ldr	r3, [r7, #0]
 8001e34:	6919      	ldr	r1, [r3, #16]
 8001e36:	683b      	ldr	r3, [r7, #0]
 8001e38:	681a      	ldr	r2, [r3, #0]
 8001e3a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001e3e:	f7ff fb97 	bl	8001570 <LL_ADC_SetOffset>
 8001e42:	e17b      	b.n	800213c <HAL_ADC_ConfigChannel+0x414>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	2100      	movs	r1, #0
 8001e4a:	4618      	mov	r0, r3
 8001e4c:	f7ff fbb4 	bl	80015b8 <LL_ADC_GetOffsetChannel>
 8001e50:	4603      	mov	r3, r0
 8001e52:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d10a      	bne.n	8001e70 <HAL_ADC_ConfigChannel+0x148>
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	2100      	movs	r1, #0
 8001e60:	4618      	mov	r0, r3
 8001e62:	f7ff fba9 	bl	80015b8 <LL_ADC_GetOffsetChannel>
 8001e66:	4603      	mov	r3, r0
 8001e68:	0e9b      	lsrs	r3, r3, #26
 8001e6a:	f003 021f 	and.w	r2, r3, #31
 8001e6e:	e01e      	b.n	8001eae <HAL_ADC_ConfigChannel+0x186>
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	2100      	movs	r1, #0
 8001e76:	4618      	mov	r0, r3
 8001e78:	f7ff fb9e 	bl	80015b8 <LL_ADC_GetOffsetChannel>
 8001e7c:	4603      	mov	r3, r0
 8001e7e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e82:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001e86:	fa93 f3a3 	rbit	r3, r3
 8001e8a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001e8e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8001e92:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001e96:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d101      	bne.n	8001ea2 <HAL_ADC_ConfigChannel+0x17a>
  {
    return 32U;
 8001e9e:	2320      	movs	r3, #32
 8001ea0:	e004      	b.n	8001eac <HAL_ADC_ConfigChannel+0x184>
  }
  return __builtin_clz(value);
 8001ea2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001ea6:	fab3 f383 	clz	r3, r3
 8001eaa:	b2db      	uxtb	r3, r3
 8001eac:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001eae:	683b      	ldr	r3, [r7, #0]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d105      	bne.n	8001ec6 <HAL_ADC_ConfigChannel+0x19e>
 8001eba:	683b      	ldr	r3, [r7, #0]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	0e9b      	lsrs	r3, r3, #26
 8001ec0:	f003 031f 	and.w	r3, r3, #31
 8001ec4:	e018      	b.n	8001ef8 <HAL_ADC_ConfigChannel+0x1d0>
 8001ec6:	683b      	ldr	r3, [r7, #0]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ece:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8001ed2:	fa93 f3a3 	rbit	r3, r3
 8001ed6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8001eda:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001ede:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8001ee2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d101      	bne.n	8001eee <HAL_ADC_ConfigChannel+0x1c6>
    return 32U;
 8001eea:	2320      	movs	r3, #32
 8001eec:	e004      	b.n	8001ef8 <HAL_ADC_ConfigChannel+0x1d0>
  return __builtin_clz(value);
 8001eee:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001ef2:	fab3 f383 	clz	r3, r3
 8001ef6:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001ef8:	429a      	cmp	r2, r3
 8001efa:	d106      	bne.n	8001f0a <HAL_ADC_ConfigChannel+0x1e2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	2200      	movs	r2, #0
 8001f02:	2100      	movs	r1, #0
 8001f04:	4618      	mov	r0, r3
 8001f06:	f7ff fb6d 	bl	80015e4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	2101      	movs	r1, #1
 8001f10:	4618      	mov	r0, r3
 8001f12:	f7ff fb51 	bl	80015b8 <LL_ADC_GetOffsetChannel>
 8001f16:	4603      	mov	r3, r0
 8001f18:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d10a      	bne.n	8001f36 <HAL_ADC_ConfigChannel+0x20e>
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	2101      	movs	r1, #1
 8001f26:	4618      	mov	r0, r3
 8001f28:	f7ff fb46 	bl	80015b8 <LL_ADC_GetOffsetChannel>
 8001f2c:	4603      	mov	r3, r0
 8001f2e:	0e9b      	lsrs	r3, r3, #26
 8001f30:	f003 021f 	and.w	r2, r3, #31
 8001f34:	e01e      	b.n	8001f74 <HAL_ADC_ConfigChannel+0x24c>
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	2101      	movs	r1, #1
 8001f3c:	4618      	mov	r0, r3
 8001f3e:	f7ff fb3b 	bl	80015b8 <LL_ADC_GetOffsetChannel>
 8001f42:	4603      	mov	r3, r0
 8001f44:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f48:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001f4c:	fa93 f3a3 	rbit	r3, r3
 8001f50:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8001f54:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001f58:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8001f5c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d101      	bne.n	8001f68 <HAL_ADC_ConfigChannel+0x240>
    return 32U;
 8001f64:	2320      	movs	r3, #32
 8001f66:	e004      	b.n	8001f72 <HAL_ADC_ConfigChannel+0x24a>
  return __builtin_clz(value);
 8001f68:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001f6c:	fab3 f383 	clz	r3, r3
 8001f70:	b2db      	uxtb	r3, r3
 8001f72:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001f74:	683b      	ldr	r3, [r7, #0]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d105      	bne.n	8001f8c <HAL_ADC_ConfigChannel+0x264>
 8001f80:	683b      	ldr	r3, [r7, #0]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	0e9b      	lsrs	r3, r3, #26
 8001f86:	f003 031f 	and.w	r3, r3, #31
 8001f8a:	e018      	b.n	8001fbe <HAL_ADC_ConfigChannel+0x296>
 8001f8c:	683b      	ldr	r3, [r7, #0]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f94:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001f98:	fa93 f3a3 	rbit	r3, r3
 8001f9c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8001fa0:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001fa4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8001fa8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d101      	bne.n	8001fb4 <HAL_ADC_ConfigChannel+0x28c>
    return 32U;
 8001fb0:	2320      	movs	r3, #32
 8001fb2:	e004      	b.n	8001fbe <HAL_ADC_ConfigChannel+0x296>
  return __builtin_clz(value);
 8001fb4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001fb8:	fab3 f383 	clz	r3, r3
 8001fbc:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001fbe:	429a      	cmp	r2, r3
 8001fc0:	d106      	bne.n	8001fd0 <HAL_ADC_ConfigChannel+0x2a8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	2200      	movs	r2, #0
 8001fc8:	2101      	movs	r1, #1
 8001fca:	4618      	mov	r0, r3
 8001fcc:	f7ff fb0a 	bl	80015e4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	2102      	movs	r1, #2
 8001fd6:	4618      	mov	r0, r3
 8001fd8:	f7ff faee 	bl	80015b8 <LL_ADC_GetOffsetChannel>
 8001fdc:	4603      	mov	r3, r0
 8001fde:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d10a      	bne.n	8001ffc <HAL_ADC_ConfigChannel+0x2d4>
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	2102      	movs	r1, #2
 8001fec:	4618      	mov	r0, r3
 8001fee:	f7ff fae3 	bl	80015b8 <LL_ADC_GetOffsetChannel>
 8001ff2:	4603      	mov	r3, r0
 8001ff4:	0e9b      	lsrs	r3, r3, #26
 8001ff6:	f003 021f 	and.w	r2, r3, #31
 8001ffa:	e01e      	b.n	800203a <HAL_ADC_ConfigChannel+0x312>
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	2102      	movs	r1, #2
 8002002:	4618      	mov	r0, r3
 8002004:	f7ff fad8 	bl	80015b8 <LL_ADC_GetOffsetChannel>
 8002008:	4603      	mov	r3, r0
 800200a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800200e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002012:	fa93 f3a3 	rbit	r3, r3
 8002016:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 800201a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800201e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8002022:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002026:	2b00      	cmp	r3, #0
 8002028:	d101      	bne.n	800202e <HAL_ADC_ConfigChannel+0x306>
    return 32U;
 800202a:	2320      	movs	r3, #32
 800202c:	e004      	b.n	8002038 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 800202e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002032:	fab3 f383 	clz	r3, r3
 8002036:	b2db      	uxtb	r3, r3
 8002038:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800203a:	683b      	ldr	r3, [r7, #0]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002042:	2b00      	cmp	r3, #0
 8002044:	d105      	bne.n	8002052 <HAL_ADC_ConfigChannel+0x32a>
 8002046:	683b      	ldr	r3, [r7, #0]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	0e9b      	lsrs	r3, r3, #26
 800204c:	f003 031f 	and.w	r3, r3, #31
 8002050:	e016      	b.n	8002080 <HAL_ADC_ConfigChannel+0x358>
 8002052:	683b      	ldr	r3, [r7, #0]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800205a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800205e:	fa93 f3a3 	rbit	r3, r3
 8002062:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8002064:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002066:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 800206a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800206e:	2b00      	cmp	r3, #0
 8002070:	d101      	bne.n	8002076 <HAL_ADC_ConfigChannel+0x34e>
    return 32U;
 8002072:	2320      	movs	r3, #32
 8002074:	e004      	b.n	8002080 <HAL_ADC_ConfigChannel+0x358>
  return __builtin_clz(value);
 8002076:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800207a:	fab3 f383 	clz	r3, r3
 800207e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002080:	429a      	cmp	r2, r3
 8002082:	d106      	bne.n	8002092 <HAL_ADC_ConfigChannel+0x36a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	2200      	movs	r2, #0
 800208a:	2102      	movs	r1, #2
 800208c:	4618      	mov	r0, r3
 800208e:	f7ff faa9 	bl	80015e4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	2103      	movs	r1, #3
 8002098:	4618      	mov	r0, r3
 800209a:	f7ff fa8d 	bl	80015b8 <LL_ADC_GetOffsetChannel>
 800209e:	4603      	mov	r3, r0
 80020a0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d10a      	bne.n	80020be <HAL_ADC_ConfigChannel+0x396>
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	2103      	movs	r1, #3
 80020ae:	4618      	mov	r0, r3
 80020b0:	f7ff fa82 	bl	80015b8 <LL_ADC_GetOffsetChannel>
 80020b4:	4603      	mov	r3, r0
 80020b6:	0e9b      	lsrs	r3, r3, #26
 80020b8:	f003 021f 	and.w	r2, r3, #31
 80020bc:	e017      	b.n	80020ee <HAL_ADC_ConfigChannel+0x3c6>
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	2103      	movs	r1, #3
 80020c4:	4618      	mov	r0, r3
 80020c6:	f7ff fa77 	bl	80015b8 <LL_ADC_GetOffsetChannel>
 80020ca:	4603      	mov	r3, r0
 80020cc:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020ce:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80020d0:	fa93 f3a3 	rbit	r3, r3
 80020d4:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 80020d6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80020d8:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 80020da:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d101      	bne.n	80020e4 <HAL_ADC_ConfigChannel+0x3bc>
    return 32U;
 80020e0:	2320      	movs	r3, #32
 80020e2:	e003      	b.n	80020ec <HAL_ADC_ConfigChannel+0x3c4>
  return __builtin_clz(value);
 80020e4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80020e6:	fab3 f383 	clz	r3, r3
 80020ea:	b2db      	uxtb	r3, r3
 80020ec:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80020ee:	683b      	ldr	r3, [r7, #0]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d105      	bne.n	8002106 <HAL_ADC_ConfigChannel+0x3de>
 80020fa:	683b      	ldr	r3, [r7, #0]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	0e9b      	lsrs	r3, r3, #26
 8002100:	f003 031f 	and.w	r3, r3, #31
 8002104:	e011      	b.n	800212a <HAL_ADC_ConfigChannel+0x402>
 8002106:	683b      	ldr	r3, [r7, #0]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800210c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800210e:	fa93 f3a3 	rbit	r3, r3
 8002112:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8002114:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002116:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8002118:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800211a:	2b00      	cmp	r3, #0
 800211c:	d101      	bne.n	8002122 <HAL_ADC_ConfigChannel+0x3fa>
    return 32U;
 800211e:	2320      	movs	r3, #32
 8002120:	e003      	b.n	800212a <HAL_ADC_ConfigChannel+0x402>
  return __builtin_clz(value);
 8002122:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002124:	fab3 f383 	clz	r3, r3
 8002128:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800212a:	429a      	cmp	r2, r3
 800212c:	d106      	bne.n	800213c <HAL_ADC_ConfigChannel+0x414>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	2200      	movs	r2, #0
 8002134:	2103      	movs	r1, #3
 8002136:	4618      	mov	r0, r3
 8002138:	f7ff fa54 	bl	80015e4 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	4618      	mov	r0, r3
 8002142:	f7ff fb5b 	bl	80017fc <LL_ADC_IsEnabled>
 8002146:	4603      	mov	r3, r0
 8002148:	2b00      	cmp	r3, #0
 800214a:	f040 813f 	bne.w	80023cc <HAL_ADC_ConfigChannel+0x6a4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	6818      	ldr	r0, [r3, #0]
 8002152:	683b      	ldr	r3, [r7, #0]
 8002154:	6819      	ldr	r1, [r3, #0]
 8002156:	683b      	ldr	r3, [r7, #0]
 8002158:	68db      	ldr	r3, [r3, #12]
 800215a:	461a      	mov	r2, r3
 800215c:	f7ff fac8 	bl	80016f0 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002160:	683b      	ldr	r3, [r7, #0]
 8002162:	68db      	ldr	r3, [r3, #12]
 8002164:	4a8e      	ldr	r2, [pc, #568]	; (80023a0 <HAL_ADC_ConfigChannel+0x678>)
 8002166:	4293      	cmp	r3, r2
 8002168:	f040 8130 	bne.w	80023cc <HAL_ADC_ConfigChannel+0x6a4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002170:	683b      	ldr	r3, [r7, #0]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002178:	2b00      	cmp	r3, #0
 800217a:	d10b      	bne.n	8002194 <HAL_ADC_ConfigChannel+0x46c>
 800217c:	683b      	ldr	r3, [r7, #0]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	0e9b      	lsrs	r3, r3, #26
 8002182:	3301      	adds	r3, #1
 8002184:	f003 031f 	and.w	r3, r3, #31
 8002188:	2b09      	cmp	r3, #9
 800218a:	bf94      	ite	ls
 800218c:	2301      	movls	r3, #1
 800218e:	2300      	movhi	r3, #0
 8002190:	b2db      	uxtb	r3, r3
 8002192:	e019      	b.n	80021c8 <HAL_ADC_ConfigChannel+0x4a0>
 8002194:	683b      	ldr	r3, [r7, #0]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800219a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800219c:	fa93 f3a3 	rbit	r3, r3
 80021a0:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 80021a2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80021a4:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 80021a6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d101      	bne.n	80021b0 <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 80021ac:	2320      	movs	r3, #32
 80021ae:	e003      	b.n	80021b8 <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 80021b0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80021b2:	fab3 f383 	clz	r3, r3
 80021b6:	b2db      	uxtb	r3, r3
 80021b8:	3301      	adds	r3, #1
 80021ba:	f003 031f 	and.w	r3, r3, #31
 80021be:	2b09      	cmp	r3, #9
 80021c0:	bf94      	ite	ls
 80021c2:	2301      	movls	r3, #1
 80021c4:	2300      	movhi	r3, #0
 80021c6:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d079      	beq.n	80022c0 <HAL_ADC_ConfigChannel+0x598>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80021cc:	683b      	ldr	r3, [r7, #0]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d107      	bne.n	80021e8 <HAL_ADC_ConfigChannel+0x4c0>
 80021d8:	683b      	ldr	r3, [r7, #0]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	0e9b      	lsrs	r3, r3, #26
 80021de:	3301      	adds	r3, #1
 80021e0:	069b      	lsls	r3, r3, #26
 80021e2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80021e6:	e015      	b.n	8002214 <HAL_ADC_ConfigChannel+0x4ec>
 80021e8:	683b      	ldr	r3, [r7, #0]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021ee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80021f0:	fa93 f3a3 	rbit	r3, r3
 80021f4:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80021f6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80021f8:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 80021fa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d101      	bne.n	8002204 <HAL_ADC_ConfigChannel+0x4dc>
    return 32U;
 8002200:	2320      	movs	r3, #32
 8002202:	e003      	b.n	800220c <HAL_ADC_ConfigChannel+0x4e4>
  return __builtin_clz(value);
 8002204:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002206:	fab3 f383 	clz	r3, r3
 800220a:	b2db      	uxtb	r3, r3
 800220c:	3301      	adds	r3, #1
 800220e:	069b      	lsls	r3, r3, #26
 8002210:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002214:	683b      	ldr	r3, [r7, #0]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800221c:	2b00      	cmp	r3, #0
 800221e:	d109      	bne.n	8002234 <HAL_ADC_ConfigChannel+0x50c>
 8002220:	683b      	ldr	r3, [r7, #0]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	0e9b      	lsrs	r3, r3, #26
 8002226:	3301      	adds	r3, #1
 8002228:	f003 031f 	and.w	r3, r3, #31
 800222c:	2101      	movs	r1, #1
 800222e:	fa01 f303 	lsl.w	r3, r1, r3
 8002232:	e017      	b.n	8002264 <HAL_ADC_ConfigChannel+0x53c>
 8002234:	683b      	ldr	r3, [r7, #0]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800223a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800223c:	fa93 f3a3 	rbit	r3, r3
 8002240:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8002242:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002244:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8002246:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002248:	2b00      	cmp	r3, #0
 800224a:	d101      	bne.n	8002250 <HAL_ADC_ConfigChannel+0x528>
    return 32U;
 800224c:	2320      	movs	r3, #32
 800224e:	e003      	b.n	8002258 <HAL_ADC_ConfigChannel+0x530>
  return __builtin_clz(value);
 8002250:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002252:	fab3 f383 	clz	r3, r3
 8002256:	b2db      	uxtb	r3, r3
 8002258:	3301      	adds	r3, #1
 800225a:	f003 031f 	and.w	r3, r3, #31
 800225e:	2101      	movs	r1, #1
 8002260:	fa01 f303 	lsl.w	r3, r1, r3
 8002264:	ea42 0103 	orr.w	r1, r2, r3
 8002268:	683b      	ldr	r3, [r7, #0]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002270:	2b00      	cmp	r3, #0
 8002272:	d10a      	bne.n	800228a <HAL_ADC_ConfigChannel+0x562>
 8002274:	683b      	ldr	r3, [r7, #0]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	0e9b      	lsrs	r3, r3, #26
 800227a:	3301      	adds	r3, #1
 800227c:	f003 021f 	and.w	r2, r3, #31
 8002280:	4613      	mov	r3, r2
 8002282:	005b      	lsls	r3, r3, #1
 8002284:	4413      	add	r3, r2
 8002286:	051b      	lsls	r3, r3, #20
 8002288:	e018      	b.n	80022bc <HAL_ADC_ConfigChannel+0x594>
 800228a:	683b      	ldr	r3, [r7, #0]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002290:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002292:	fa93 f3a3 	rbit	r3, r3
 8002296:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002298:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800229a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 800229c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d101      	bne.n	80022a6 <HAL_ADC_ConfigChannel+0x57e>
    return 32U;
 80022a2:	2320      	movs	r3, #32
 80022a4:	e003      	b.n	80022ae <HAL_ADC_ConfigChannel+0x586>
  return __builtin_clz(value);
 80022a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80022a8:	fab3 f383 	clz	r3, r3
 80022ac:	b2db      	uxtb	r3, r3
 80022ae:	3301      	adds	r3, #1
 80022b0:	f003 021f 	and.w	r2, r3, #31
 80022b4:	4613      	mov	r3, r2
 80022b6:	005b      	lsls	r3, r3, #1
 80022b8:	4413      	add	r3, r2
 80022ba:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80022bc:	430b      	orrs	r3, r1
 80022be:	e080      	b.n	80023c2 <HAL_ADC_ConfigChannel+0x69a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80022c0:	683b      	ldr	r3, [r7, #0]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d107      	bne.n	80022dc <HAL_ADC_ConfigChannel+0x5b4>
 80022cc:	683b      	ldr	r3, [r7, #0]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	0e9b      	lsrs	r3, r3, #26
 80022d2:	3301      	adds	r3, #1
 80022d4:	069b      	lsls	r3, r3, #26
 80022d6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80022da:	e015      	b.n	8002308 <HAL_ADC_ConfigChannel+0x5e0>
 80022dc:	683b      	ldr	r3, [r7, #0]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022e4:	fa93 f3a3 	rbit	r3, r3
 80022e8:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 80022ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022ec:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 80022ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d101      	bne.n	80022f8 <HAL_ADC_ConfigChannel+0x5d0>
    return 32U;
 80022f4:	2320      	movs	r3, #32
 80022f6:	e003      	b.n	8002300 <HAL_ADC_ConfigChannel+0x5d8>
  return __builtin_clz(value);
 80022f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022fa:	fab3 f383 	clz	r3, r3
 80022fe:	b2db      	uxtb	r3, r3
 8002300:	3301      	adds	r3, #1
 8002302:	069b      	lsls	r3, r3, #26
 8002304:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002308:	683b      	ldr	r3, [r7, #0]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002310:	2b00      	cmp	r3, #0
 8002312:	d109      	bne.n	8002328 <HAL_ADC_ConfigChannel+0x600>
 8002314:	683b      	ldr	r3, [r7, #0]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	0e9b      	lsrs	r3, r3, #26
 800231a:	3301      	adds	r3, #1
 800231c:	f003 031f 	and.w	r3, r3, #31
 8002320:	2101      	movs	r1, #1
 8002322:	fa01 f303 	lsl.w	r3, r1, r3
 8002326:	e017      	b.n	8002358 <HAL_ADC_ConfigChannel+0x630>
 8002328:	683b      	ldr	r3, [r7, #0]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800232e:	6a3b      	ldr	r3, [r7, #32]
 8002330:	fa93 f3a3 	rbit	r3, r3
 8002334:	61fb      	str	r3, [r7, #28]
  return result;
 8002336:	69fb      	ldr	r3, [r7, #28]
 8002338:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800233a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800233c:	2b00      	cmp	r3, #0
 800233e:	d101      	bne.n	8002344 <HAL_ADC_ConfigChannel+0x61c>
    return 32U;
 8002340:	2320      	movs	r3, #32
 8002342:	e003      	b.n	800234c <HAL_ADC_ConfigChannel+0x624>
  return __builtin_clz(value);
 8002344:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002346:	fab3 f383 	clz	r3, r3
 800234a:	b2db      	uxtb	r3, r3
 800234c:	3301      	adds	r3, #1
 800234e:	f003 031f 	and.w	r3, r3, #31
 8002352:	2101      	movs	r1, #1
 8002354:	fa01 f303 	lsl.w	r3, r1, r3
 8002358:	ea42 0103 	orr.w	r1, r2, r3
 800235c:	683b      	ldr	r3, [r7, #0]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002364:	2b00      	cmp	r3, #0
 8002366:	d10d      	bne.n	8002384 <HAL_ADC_ConfigChannel+0x65c>
 8002368:	683b      	ldr	r3, [r7, #0]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	0e9b      	lsrs	r3, r3, #26
 800236e:	3301      	adds	r3, #1
 8002370:	f003 021f 	and.w	r2, r3, #31
 8002374:	4613      	mov	r3, r2
 8002376:	005b      	lsls	r3, r3, #1
 8002378:	4413      	add	r3, r2
 800237a:	3b1e      	subs	r3, #30
 800237c:	051b      	lsls	r3, r3, #20
 800237e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002382:	e01d      	b.n	80023c0 <HAL_ADC_ConfigChannel+0x698>
 8002384:	683b      	ldr	r3, [r7, #0]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800238a:	697b      	ldr	r3, [r7, #20]
 800238c:	fa93 f3a3 	rbit	r3, r3
 8002390:	613b      	str	r3, [r7, #16]
  return result;
 8002392:	693b      	ldr	r3, [r7, #16]
 8002394:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002396:	69bb      	ldr	r3, [r7, #24]
 8002398:	2b00      	cmp	r3, #0
 800239a:	d103      	bne.n	80023a4 <HAL_ADC_ConfigChannel+0x67c>
    return 32U;
 800239c:	2320      	movs	r3, #32
 800239e:	e005      	b.n	80023ac <HAL_ADC_ConfigChannel+0x684>
 80023a0:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 80023a4:	69bb      	ldr	r3, [r7, #24]
 80023a6:	fab3 f383 	clz	r3, r3
 80023aa:	b2db      	uxtb	r3, r3
 80023ac:	3301      	adds	r3, #1
 80023ae:	f003 021f 	and.w	r2, r3, #31
 80023b2:	4613      	mov	r3, r2
 80023b4:	005b      	lsls	r3, r3, #1
 80023b6:	4413      	add	r3, r2
 80023b8:	3b1e      	subs	r3, #30
 80023ba:	051b      	lsls	r3, r3, #20
 80023bc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80023c0:	430b      	orrs	r3, r1
 80023c2:	683a      	ldr	r2, [r7, #0]
 80023c4:	6892      	ldr	r2, [r2, #8]
 80023c6:	4619      	mov	r1, r3
 80023c8:	f7ff f966 	bl	8001698 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80023cc:	683b      	ldr	r3, [r7, #0]
 80023ce:	681a      	ldr	r2, [r3, #0]
 80023d0:	4b3d      	ldr	r3, [pc, #244]	; (80024c8 <HAL_ADC_ConfigChannel+0x7a0>)
 80023d2:	4013      	ands	r3, r2
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d06c      	beq.n	80024b2 <HAL_ADC_ConfigChannel+0x78a>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80023d8:	483c      	ldr	r0, [pc, #240]	; (80024cc <HAL_ADC_ConfigChannel+0x7a4>)
 80023da:	f7ff f8bb 	bl	8001554 <LL_ADC_GetCommonPathInternalCh>
 80023de:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80023e2:	683b      	ldr	r3, [r7, #0]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	4a3a      	ldr	r2, [pc, #232]	; (80024d0 <HAL_ADC_ConfigChannel+0x7a8>)
 80023e8:	4293      	cmp	r3, r2
 80023ea:	d127      	bne.n	800243c <HAL_ADC_ConfigChannel+0x714>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80023ec:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80023f0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d121      	bne.n	800243c <HAL_ADC_ConfigChannel+0x714>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	4a35      	ldr	r2, [pc, #212]	; (80024d4 <HAL_ADC_ConfigChannel+0x7ac>)
 80023fe:	4293      	cmp	r3, r2
 8002400:	d157      	bne.n	80024b2 <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002402:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002406:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800240a:	4619      	mov	r1, r3
 800240c:	482f      	ldr	r0, [pc, #188]	; (80024cc <HAL_ADC_ConfigChannel+0x7a4>)
 800240e:	f7ff f88e 	bl	800152e <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002412:	4b31      	ldr	r3, [pc, #196]	; (80024d8 <HAL_ADC_ConfigChannel+0x7b0>)
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	099b      	lsrs	r3, r3, #6
 8002418:	4a30      	ldr	r2, [pc, #192]	; (80024dc <HAL_ADC_ConfigChannel+0x7b4>)
 800241a:	fba2 2303 	umull	r2, r3, r2, r3
 800241e:	099b      	lsrs	r3, r3, #6
 8002420:	1c5a      	adds	r2, r3, #1
 8002422:	4613      	mov	r3, r2
 8002424:	005b      	lsls	r3, r3, #1
 8002426:	4413      	add	r3, r2
 8002428:	009b      	lsls	r3, r3, #2
 800242a:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800242c:	e002      	b.n	8002434 <HAL_ADC_ConfigChannel+0x70c>
          {
            wait_loop_index--;
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	3b01      	subs	r3, #1
 8002432:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	2b00      	cmp	r3, #0
 8002438:	d1f9      	bne.n	800242e <HAL_ADC_ConfigChannel+0x706>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800243a:	e03a      	b.n	80024b2 <HAL_ADC_ConfigChannel+0x78a>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800243c:	683b      	ldr	r3, [r7, #0]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	4a27      	ldr	r2, [pc, #156]	; (80024e0 <HAL_ADC_ConfigChannel+0x7b8>)
 8002442:	4293      	cmp	r3, r2
 8002444:	d113      	bne.n	800246e <HAL_ADC_ConfigChannel+0x746>
 8002446:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800244a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800244e:	2b00      	cmp	r3, #0
 8002450:	d10d      	bne.n	800246e <HAL_ADC_ConfigChannel+0x746>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	4a1f      	ldr	r2, [pc, #124]	; (80024d4 <HAL_ADC_ConfigChannel+0x7ac>)
 8002458:	4293      	cmp	r3, r2
 800245a:	d12a      	bne.n	80024b2 <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800245c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002460:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002464:	4619      	mov	r1, r3
 8002466:	4819      	ldr	r0, [pc, #100]	; (80024cc <HAL_ADC_ConfigChannel+0x7a4>)
 8002468:	f7ff f861 	bl	800152e <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800246c:	e021      	b.n	80024b2 <HAL_ADC_ConfigChannel+0x78a>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 800246e:	683b      	ldr	r3, [r7, #0]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	4a1c      	ldr	r2, [pc, #112]	; (80024e4 <HAL_ADC_ConfigChannel+0x7bc>)
 8002474:	4293      	cmp	r3, r2
 8002476:	d11c      	bne.n	80024b2 <HAL_ADC_ConfigChannel+0x78a>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002478:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800247c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002480:	2b00      	cmp	r3, #0
 8002482:	d116      	bne.n	80024b2 <HAL_ADC_ConfigChannel+0x78a>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	4a12      	ldr	r2, [pc, #72]	; (80024d4 <HAL_ADC_ConfigChannel+0x7ac>)
 800248a:	4293      	cmp	r3, r2
 800248c:	d111      	bne.n	80024b2 <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800248e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002492:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002496:	4619      	mov	r1, r3
 8002498:	480c      	ldr	r0, [pc, #48]	; (80024cc <HAL_ADC_ConfigChannel+0x7a4>)
 800249a:	f7ff f848 	bl	800152e <LL_ADC_SetCommonPathInternalCh>
 800249e:	e008      	b.n	80024b2 <HAL_ADC_ConfigChannel+0x78a>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024a4:	f043 0220 	orr.w	r2, r3, #32
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80024ac:	2301      	movs	r3, #1
 80024ae:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	2200      	movs	r2, #0
 80024b6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80024ba:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 80024be:	4618      	mov	r0, r3
 80024c0:	37d8      	adds	r7, #216	; 0xd8
 80024c2:	46bd      	mov	sp, r7
 80024c4:	bd80      	pop	{r7, pc}
 80024c6:	bf00      	nop
 80024c8:	80080000 	.word	0x80080000
 80024cc:	50040300 	.word	0x50040300
 80024d0:	c7520000 	.word	0xc7520000
 80024d4:	50040000 	.word	0x50040000
 80024d8:	20000000 	.word	0x20000000
 80024dc:	053e2d63 	.word	0x053e2d63
 80024e0:	cb840000 	.word	0xcb840000
 80024e4:	80000001 	.word	0x80000001

080024e8 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80024e8:	b580      	push	{r7, lr}
 80024ea:	b084      	sub	sp, #16
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 80024f0:	2300      	movs	r3, #0
 80024f2:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	4618      	mov	r0, r3
 80024fa:	f7ff f97f 	bl	80017fc <LL_ADC_IsEnabled>
 80024fe:	4603      	mov	r3, r0
 8002500:	2b00      	cmp	r3, #0
 8002502:	d169      	bne.n	80025d8 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	689a      	ldr	r2, [r3, #8]
 800250a:	4b36      	ldr	r3, [pc, #216]	; (80025e4 <ADC_Enable+0xfc>)
 800250c:	4013      	ands	r3, r2
 800250e:	2b00      	cmp	r3, #0
 8002510:	d00d      	beq.n	800252e <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002516:	f043 0210 	orr.w	r2, r3, #16
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002522:	f043 0201 	orr.w	r2, r3, #1
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 800252a:	2301      	movs	r3, #1
 800252c:	e055      	b.n	80025da <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	4618      	mov	r0, r3
 8002534:	f7ff f94e 	bl	80017d4 <LL_ADC_Enable>

    if((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8002538:	482b      	ldr	r0, [pc, #172]	; (80025e8 <ADC_Enable+0x100>)
 800253a:	f7ff f80b 	bl	8001554 <LL_ADC_GetCommonPathInternalCh>
 800253e:	4603      	mov	r3, r0
 8002540:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002544:	2b00      	cmp	r3, #0
 8002546:	d013      	beq.n	8002570 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002548:	4b28      	ldr	r3, [pc, #160]	; (80025ec <ADC_Enable+0x104>)
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	099b      	lsrs	r3, r3, #6
 800254e:	4a28      	ldr	r2, [pc, #160]	; (80025f0 <ADC_Enable+0x108>)
 8002550:	fba2 2303 	umull	r2, r3, r2, r3
 8002554:	099b      	lsrs	r3, r3, #6
 8002556:	1c5a      	adds	r2, r3, #1
 8002558:	4613      	mov	r3, r2
 800255a:	005b      	lsls	r3, r3, #1
 800255c:	4413      	add	r3, r2
 800255e:	009b      	lsls	r3, r3, #2
 8002560:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 8002562:	e002      	b.n	800256a <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8002564:	68bb      	ldr	r3, [r7, #8]
 8002566:	3b01      	subs	r3, #1
 8002568:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 800256a:	68bb      	ldr	r3, [r7, #8]
 800256c:	2b00      	cmp	r3, #0
 800256e:	d1f9      	bne.n	8002564 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002570:	f7fe ff9a 	bl	80014a8 <HAL_GetTick>
 8002574:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002576:	e028      	b.n	80025ca <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	4618      	mov	r0, r3
 800257e:	f7ff f93d 	bl	80017fc <LL_ADC_IsEnabled>
 8002582:	4603      	mov	r3, r0
 8002584:	2b00      	cmp	r3, #0
 8002586:	d104      	bne.n	8002592 <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	4618      	mov	r0, r3
 800258e:	f7ff f921 	bl	80017d4 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002592:	f7fe ff89 	bl	80014a8 <HAL_GetTick>
 8002596:	4602      	mov	r2, r0
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	1ad3      	subs	r3, r2, r3
 800259c:	2b02      	cmp	r3, #2
 800259e:	d914      	bls.n	80025ca <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	f003 0301 	and.w	r3, r3, #1
 80025aa:	2b01      	cmp	r3, #1
 80025ac:	d00d      	beq.n	80025ca <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025b2:	f043 0210 	orr.w	r2, r3, #16
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025be:	f043 0201 	orr.w	r2, r3, #1
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 80025c6:	2301      	movs	r3, #1
 80025c8:	e007      	b.n	80025da <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	f003 0301 	and.w	r3, r3, #1
 80025d4:	2b01      	cmp	r3, #1
 80025d6:	d1cf      	bne.n	8002578 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80025d8:	2300      	movs	r3, #0
}
 80025da:	4618      	mov	r0, r3
 80025dc:	3710      	adds	r7, #16
 80025de:	46bd      	mov	sp, r7
 80025e0:	bd80      	pop	{r7, pc}
 80025e2:	bf00      	nop
 80025e4:	8000003f 	.word	0x8000003f
 80025e8:	50040300 	.word	0x50040300
 80025ec:	20000000 	.word	0x20000000
 80025f0:	053e2d63 	.word	0x053e2d63

080025f4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80025f4:	b480      	push	{r7}
 80025f6:	b085      	sub	sp, #20
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	f003 0307 	and.w	r3, r3, #7
 8002602:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002604:	4b0c      	ldr	r3, [pc, #48]	; (8002638 <__NVIC_SetPriorityGrouping+0x44>)
 8002606:	68db      	ldr	r3, [r3, #12]
 8002608:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800260a:	68ba      	ldr	r2, [r7, #8]
 800260c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002610:	4013      	ands	r3, r2
 8002612:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002618:	68bb      	ldr	r3, [r7, #8]
 800261a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800261c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002620:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002624:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002626:	4a04      	ldr	r2, [pc, #16]	; (8002638 <__NVIC_SetPriorityGrouping+0x44>)
 8002628:	68bb      	ldr	r3, [r7, #8]
 800262a:	60d3      	str	r3, [r2, #12]
}
 800262c:	bf00      	nop
 800262e:	3714      	adds	r7, #20
 8002630:	46bd      	mov	sp, r7
 8002632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002636:	4770      	bx	lr
 8002638:	e000ed00 	.word	0xe000ed00

0800263c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800263c:	b480      	push	{r7}
 800263e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002640:	4b04      	ldr	r3, [pc, #16]	; (8002654 <__NVIC_GetPriorityGrouping+0x18>)
 8002642:	68db      	ldr	r3, [r3, #12]
 8002644:	0a1b      	lsrs	r3, r3, #8
 8002646:	f003 0307 	and.w	r3, r3, #7
}
 800264a:	4618      	mov	r0, r3
 800264c:	46bd      	mov	sp, r7
 800264e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002652:	4770      	bx	lr
 8002654:	e000ed00 	.word	0xe000ed00

08002658 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002658:	b480      	push	{r7}
 800265a:	b083      	sub	sp, #12
 800265c:	af00      	add	r7, sp, #0
 800265e:	4603      	mov	r3, r0
 8002660:	6039      	str	r1, [r7, #0]
 8002662:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002664:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002668:	2b00      	cmp	r3, #0
 800266a:	db0a      	blt.n	8002682 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800266c:	683b      	ldr	r3, [r7, #0]
 800266e:	b2da      	uxtb	r2, r3
 8002670:	490c      	ldr	r1, [pc, #48]	; (80026a4 <__NVIC_SetPriority+0x4c>)
 8002672:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002676:	0112      	lsls	r2, r2, #4
 8002678:	b2d2      	uxtb	r2, r2
 800267a:	440b      	add	r3, r1
 800267c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002680:	e00a      	b.n	8002698 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002682:	683b      	ldr	r3, [r7, #0]
 8002684:	b2da      	uxtb	r2, r3
 8002686:	4908      	ldr	r1, [pc, #32]	; (80026a8 <__NVIC_SetPriority+0x50>)
 8002688:	79fb      	ldrb	r3, [r7, #7]
 800268a:	f003 030f 	and.w	r3, r3, #15
 800268e:	3b04      	subs	r3, #4
 8002690:	0112      	lsls	r2, r2, #4
 8002692:	b2d2      	uxtb	r2, r2
 8002694:	440b      	add	r3, r1
 8002696:	761a      	strb	r2, [r3, #24]
}
 8002698:	bf00      	nop
 800269a:	370c      	adds	r7, #12
 800269c:	46bd      	mov	sp, r7
 800269e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a2:	4770      	bx	lr
 80026a4:	e000e100 	.word	0xe000e100
 80026a8:	e000ed00 	.word	0xe000ed00

080026ac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80026ac:	b480      	push	{r7}
 80026ae:	b089      	sub	sp, #36	; 0x24
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	60f8      	str	r0, [r7, #12]
 80026b4:	60b9      	str	r1, [r7, #8]
 80026b6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	f003 0307 	and.w	r3, r3, #7
 80026be:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80026c0:	69fb      	ldr	r3, [r7, #28]
 80026c2:	f1c3 0307 	rsb	r3, r3, #7
 80026c6:	2b04      	cmp	r3, #4
 80026c8:	bf28      	it	cs
 80026ca:	2304      	movcs	r3, #4
 80026cc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80026ce:	69fb      	ldr	r3, [r7, #28]
 80026d0:	3304      	adds	r3, #4
 80026d2:	2b06      	cmp	r3, #6
 80026d4:	d902      	bls.n	80026dc <NVIC_EncodePriority+0x30>
 80026d6:	69fb      	ldr	r3, [r7, #28]
 80026d8:	3b03      	subs	r3, #3
 80026da:	e000      	b.n	80026de <NVIC_EncodePriority+0x32>
 80026dc:	2300      	movs	r3, #0
 80026de:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80026e0:	f04f 32ff 	mov.w	r2, #4294967295
 80026e4:	69bb      	ldr	r3, [r7, #24]
 80026e6:	fa02 f303 	lsl.w	r3, r2, r3
 80026ea:	43da      	mvns	r2, r3
 80026ec:	68bb      	ldr	r3, [r7, #8]
 80026ee:	401a      	ands	r2, r3
 80026f0:	697b      	ldr	r3, [r7, #20]
 80026f2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80026f4:	f04f 31ff 	mov.w	r1, #4294967295
 80026f8:	697b      	ldr	r3, [r7, #20]
 80026fa:	fa01 f303 	lsl.w	r3, r1, r3
 80026fe:	43d9      	mvns	r1, r3
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002704:	4313      	orrs	r3, r2
         );
}
 8002706:	4618      	mov	r0, r3
 8002708:	3724      	adds	r7, #36	; 0x24
 800270a:	46bd      	mov	sp, r7
 800270c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002710:	4770      	bx	lr
	...

08002714 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002714:	b580      	push	{r7, lr}
 8002716:	b082      	sub	sp, #8
 8002718:	af00      	add	r7, sp, #0
 800271a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	3b01      	subs	r3, #1
 8002720:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002724:	d301      	bcc.n	800272a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002726:	2301      	movs	r3, #1
 8002728:	e00f      	b.n	800274a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800272a:	4a0a      	ldr	r2, [pc, #40]	; (8002754 <SysTick_Config+0x40>)
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	3b01      	subs	r3, #1
 8002730:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002732:	210f      	movs	r1, #15
 8002734:	f04f 30ff 	mov.w	r0, #4294967295
 8002738:	f7ff ff8e 	bl	8002658 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800273c:	4b05      	ldr	r3, [pc, #20]	; (8002754 <SysTick_Config+0x40>)
 800273e:	2200      	movs	r2, #0
 8002740:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002742:	4b04      	ldr	r3, [pc, #16]	; (8002754 <SysTick_Config+0x40>)
 8002744:	2207      	movs	r2, #7
 8002746:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002748:	2300      	movs	r3, #0
}
 800274a:	4618      	mov	r0, r3
 800274c:	3708      	adds	r7, #8
 800274e:	46bd      	mov	sp, r7
 8002750:	bd80      	pop	{r7, pc}
 8002752:	bf00      	nop
 8002754:	e000e010 	.word	0xe000e010

08002758 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002758:	b580      	push	{r7, lr}
 800275a:	b082      	sub	sp, #8
 800275c:	af00      	add	r7, sp, #0
 800275e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002760:	6878      	ldr	r0, [r7, #4]
 8002762:	f7ff ff47 	bl	80025f4 <__NVIC_SetPriorityGrouping>
}
 8002766:	bf00      	nop
 8002768:	3708      	adds	r7, #8
 800276a:	46bd      	mov	sp, r7
 800276c:	bd80      	pop	{r7, pc}

0800276e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800276e:	b580      	push	{r7, lr}
 8002770:	b086      	sub	sp, #24
 8002772:	af00      	add	r7, sp, #0
 8002774:	4603      	mov	r3, r0
 8002776:	60b9      	str	r1, [r7, #8]
 8002778:	607a      	str	r2, [r7, #4]
 800277a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800277c:	2300      	movs	r3, #0
 800277e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002780:	f7ff ff5c 	bl	800263c <__NVIC_GetPriorityGrouping>
 8002784:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002786:	687a      	ldr	r2, [r7, #4]
 8002788:	68b9      	ldr	r1, [r7, #8]
 800278a:	6978      	ldr	r0, [r7, #20]
 800278c:	f7ff ff8e 	bl	80026ac <NVIC_EncodePriority>
 8002790:	4602      	mov	r2, r0
 8002792:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002796:	4611      	mov	r1, r2
 8002798:	4618      	mov	r0, r3
 800279a:	f7ff ff5d 	bl	8002658 <__NVIC_SetPriority>
}
 800279e:	bf00      	nop
 80027a0:	3718      	adds	r7, #24
 80027a2:	46bd      	mov	sp, r7
 80027a4:	bd80      	pop	{r7, pc}

080027a6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80027a6:	b580      	push	{r7, lr}
 80027a8:	b082      	sub	sp, #8
 80027aa:	af00      	add	r7, sp, #0
 80027ac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80027ae:	6878      	ldr	r0, [r7, #4]
 80027b0:	f7ff ffb0 	bl	8002714 <SysTick_Config>
 80027b4:	4603      	mov	r3, r0
}
 80027b6:	4618      	mov	r0, r3
 80027b8:	3708      	adds	r7, #8
 80027ba:	46bd      	mov	sp, r7
 80027bc:	bd80      	pop	{r7, pc}
	...

080027c0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80027c0:	b480      	push	{r7}
 80027c2:	b087      	sub	sp, #28
 80027c4:	af00      	add	r7, sp, #0
 80027c6:	6078      	str	r0, [r7, #4]
 80027c8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80027ca:	2300      	movs	r3, #0
 80027cc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80027ce:	e148      	b.n	8002a62 <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80027d0:	683b      	ldr	r3, [r7, #0]
 80027d2:	681a      	ldr	r2, [r3, #0]
 80027d4:	2101      	movs	r1, #1
 80027d6:	697b      	ldr	r3, [r7, #20]
 80027d8:	fa01 f303 	lsl.w	r3, r1, r3
 80027dc:	4013      	ands	r3, r2
 80027de:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	f000 813a 	beq.w	8002a5c <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80027e8:	683b      	ldr	r3, [r7, #0]
 80027ea:	685b      	ldr	r3, [r3, #4]
 80027ec:	f003 0303 	and.w	r3, r3, #3
 80027f0:	2b01      	cmp	r3, #1
 80027f2:	d005      	beq.n	8002800 <HAL_GPIO_Init+0x40>
 80027f4:	683b      	ldr	r3, [r7, #0]
 80027f6:	685b      	ldr	r3, [r3, #4]
 80027f8:	f003 0303 	and.w	r3, r3, #3
 80027fc:	2b02      	cmp	r3, #2
 80027fe:	d130      	bne.n	8002862 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	689b      	ldr	r3, [r3, #8]
 8002804:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002806:	697b      	ldr	r3, [r7, #20]
 8002808:	005b      	lsls	r3, r3, #1
 800280a:	2203      	movs	r2, #3
 800280c:	fa02 f303 	lsl.w	r3, r2, r3
 8002810:	43db      	mvns	r3, r3
 8002812:	693a      	ldr	r2, [r7, #16]
 8002814:	4013      	ands	r3, r2
 8002816:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002818:	683b      	ldr	r3, [r7, #0]
 800281a:	68da      	ldr	r2, [r3, #12]
 800281c:	697b      	ldr	r3, [r7, #20]
 800281e:	005b      	lsls	r3, r3, #1
 8002820:	fa02 f303 	lsl.w	r3, r2, r3
 8002824:	693a      	ldr	r2, [r7, #16]
 8002826:	4313      	orrs	r3, r2
 8002828:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	693a      	ldr	r2, [r7, #16]
 800282e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	685b      	ldr	r3, [r3, #4]
 8002834:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002836:	2201      	movs	r2, #1
 8002838:	697b      	ldr	r3, [r7, #20]
 800283a:	fa02 f303 	lsl.w	r3, r2, r3
 800283e:	43db      	mvns	r3, r3
 8002840:	693a      	ldr	r2, [r7, #16]
 8002842:	4013      	ands	r3, r2
 8002844:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002846:	683b      	ldr	r3, [r7, #0]
 8002848:	685b      	ldr	r3, [r3, #4]
 800284a:	091b      	lsrs	r3, r3, #4
 800284c:	f003 0201 	and.w	r2, r3, #1
 8002850:	697b      	ldr	r3, [r7, #20]
 8002852:	fa02 f303 	lsl.w	r3, r2, r3
 8002856:	693a      	ldr	r2, [r7, #16]
 8002858:	4313      	orrs	r3, r2
 800285a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	693a      	ldr	r2, [r7, #16]
 8002860:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002862:	683b      	ldr	r3, [r7, #0]
 8002864:	685b      	ldr	r3, [r3, #4]
 8002866:	f003 0303 	and.w	r3, r3, #3
 800286a:	2b03      	cmp	r3, #3
 800286c:	d017      	beq.n	800289e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	68db      	ldr	r3, [r3, #12]
 8002872:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002874:	697b      	ldr	r3, [r7, #20]
 8002876:	005b      	lsls	r3, r3, #1
 8002878:	2203      	movs	r2, #3
 800287a:	fa02 f303 	lsl.w	r3, r2, r3
 800287e:	43db      	mvns	r3, r3
 8002880:	693a      	ldr	r2, [r7, #16]
 8002882:	4013      	ands	r3, r2
 8002884:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002886:	683b      	ldr	r3, [r7, #0]
 8002888:	689a      	ldr	r2, [r3, #8]
 800288a:	697b      	ldr	r3, [r7, #20]
 800288c:	005b      	lsls	r3, r3, #1
 800288e:	fa02 f303 	lsl.w	r3, r2, r3
 8002892:	693a      	ldr	r2, [r7, #16]
 8002894:	4313      	orrs	r3, r2
 8002896:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	693a      	ldr	r2, [r7, #16]
 800289c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800289e:	683b      	ldr	r3, [r7, #0]
 80028a0:	685b      	ldr	r3, [r3, #4]
 80028a2:	f003 0303 	and.w	r3, r3, #3
 80028a6:	2b02      	cmp	r3, #2
 80028a8:	d123      	bne.n	80028f2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80028aa:	697b      	ldr	r3, [r7, #20]
 80028ac:	08da      	lsrs	r2, r3, #3
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	3208      	adds	r2, #8
 80028b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80028b6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80028b8:	697b      	ldr	r3, [r7, #20]
 80028ba:	f003 0307 	and.w	r3, r3, #7
 80028be:	009b      	lsls	r3, r3, #2
 80028c0:	220f      	movs	r2, #15
 80028c2:	fa02 f303 	lsl.w	r3, r2, r3
 80028c6:	43db      	mvns	r3, r3
 80028c8:	693a      	ldr	r2, [r7, #16]
 80028ca:	4013      	ands	r3, r2
 80028cc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80028ce:	683b      	ldr	r3, [r7, #0]
 80028d0:	691a      	ldr	r2, [r3, #16]
 80028d2:	697b      	ldr	r3, [r7, #20]
 80028d4:	f003 0307 	and.w	r3, r3, #7
 80028d8:	009b      	lsls	r3, r3, #2
 80028da:	fa02 f303 	lsl.w	r3, r2, r3
 80028de:	693a      	ldr	r2, [r7, #16]
 80028e0:	4313      	orrs	r3, r2
 80028e2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80028e4:	697b      	ldr	r3, [r7, #20]
 80028e6:	08da      	lsrs	r2, r3, #3
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	3208      	adds	r2, #8
 80028ec:	6939      	ldr	r1, [r7, #16]
 80028ee:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80028f8:	697b      	ldr	r3, [r7, #20]
 80028fa:	005b      	lsls	r3, r3, #1
 80028fc:	2203      	movs	r2, #3
 80028fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002902:	43db      	mvns	r3, r3
 8002904:	693a      	ldr	r2, [r7, #16]
 8002906:	4013      	ands	r3, r2
 8002908:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800290a:	683b      	ldr	r3, [r7, #0]
 800290c:	685b      	ldr	r3, [r3, #4]
 800290e:	f003 0203 	and.w	r2, r3, #3
 8002912:	697b      	ldr	r3, [r7, #20]
 8002914:	005b      	lsls	r3, r3, #1
 8002916:	fa02 f303 	lsl.w	r3, r2, r3
 800291a:	693a      	ldr	r2, [r7, #16]
 800291c:	4313      	orrs	r3, r2
 800291e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	693a      	ldr	r2, [r7, #16]
 8002924:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002926:	683b      	ldr	r3, [r7, #0]
 8002928:	685b      	ldr	r3, [r3, #4]
 800292a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800292e:	2b00      	cmp	r3, #0
 8002930:	f000 8094 	beq.w	8002a5c <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002934:	4b52      	ldr	r3, [pc, #328]	; (8002a80 <HAL_GPIO_Init+0x2c0>)
 8002936:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002938:	4a51      	ldr	r2, [pc, #324]	; (8002a80 <HAL_GPIO_Init+0x2c0>)
 800293a:	f043 0301 	orr.w	r3, r3, #1
 800293e:	6613      	str	r3, [r2, #96]	; 0x60
 8002940:	4b4f      	ldr	r3, [pc, #316]	; (8002a80 <HAL_GPIO_Init+0x2c0>)
 8002942:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002944:	f003 0301 	and.w	r3, r3, #1
 8002948:	60bb      	str	r3, [r7, #8]
 800294a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800294c:	4a4d      	ldr	r2, [pc, #308]	; (8002a84 <HAL_GPIO_Init+0x2c4>)
 800294e:	697b      	ldr	r3, [r7, #20]
 8002950:	089b      	lsrs	r3, r3, #2
 8002952:	3302      	adds	r3, #2
 8002954:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002958:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800295a:	697b      	ldr	r3, [r7, #20]
 800295c:	f003 0303 	and.w	r3, r3, #3
 8002960:	009b      	lsls	r3, r3, #2
 8002962:	220f      	movs	r2, #15
 8002964:	fa02 f303 	lsl.w	r3, r2, r3
 8002968:	43db      	mvns	r3, r3
 800296a:	693a      	ldr	r2, [r7, #16]
 800296c:	4013      	ands	r3, r2
 800296e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002976:	d00d      	beq.n	8002994 <HAL_GPIO_Init+0x1d4>
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	4a43      	ldr	r2, [pc, #268]	; (8002a88 <HAL_GPIO_Init+0x2c8>)
 800297c:	4293      	cmp	r3, r2
 800297e:	d007      	beq.n	8002990 <HAL_GPIO_Init+0x1d0>
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	4a42      	ldr	r2, [pc, #264]	; (8002a8c <HAL_GPIO_Init+0x2cc>)
 8002984:	4293      	cmp	r3, r2
 8002986:	d101      	bne.n	800298c <HAL_GPIO_Init+0x1cc>
 8002988:	2302      	movs	r3, #2
 800298a:	e004      	b.n	8002996 <HAL_GPIO_Init+0x1d6>
 800298c:	2307      	movs	r3, #7
 800298e:	e002      	b.n	8002996 <HAL_GPIO_Init+0x1d6>
 8002990:	2301      	movs	r3, #1
 8002992:	e000      	b.n	8002996 <HAL_GPIO_Init+0x1d6>
 8002994:	2300      	movs	r3, #0
 8002996:	697a      	ldr	r2, [r7, #20]
 8002998:	f002 0203 	and.w	r2, r2, #3
 800299c:	0092      	lsls	r2, r2, #2
 800299e:	4093      	lsls	r3, r2
 80029a0:	693a      	ldr	r2, [r7, #16]
 80029a2:	4313      	orrs	r3, r2
 80029a4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80029a6:	4937      	ldr	r1, [pc, #220]	; (8002a84 <HAL_GPIO_Init+0x2c4>)
 80029a8:	697b      	ldr	r3, [r7, #20]
 80029aa:	089b      	lsrs	r3, r3, #2
 80029ac:	3302      	adds	r3, #2
 80029ae:	693a      	ldr	r2, [r7, #16]
 80029b0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80029b4:	4b36      	ldr	r3, [pc, #216]	; (8002a90 <HAL_GPIO_Init+0x2d0>)
 80029b6:	689b      	ldr	r3, [r3, #8]
 80029b8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	43db      	mvns	r3, r3
 80029be:	693a      	ldr	r2, [r7, #16]
 80029c0:	4013      	ands	r3, r2
 80029c2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80029c4:	683b      	ldr	r3, [r7, #0]
 80029c6:	685b      	ldr	r3, [r3, #4]
 80029c8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d003      	beq.n	80029d8 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 80029d0:	693a      	ldr	r2, [r7, #16]
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	4313      	orrs	r3, r2
 80029d6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80029d8:	4a2d      	ldr	r2, [pc, #180]	; (8002a90 <HAL_GPIO_Init+0x2d0>)
 80029da:	693b      	ldr	r3, [r7, #16]
 80029dc:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80029de:	4b2c      	ldr	r3, [pc, #176]	; (8002a90 <HAL_GPIO_Init+0x2d0>)
 80029e0:	68db      	ldr	r3, [r3, #12]
 80029e2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	43db      	mvns	r3, r3
 80029e8:	693a      	ldr	r2, [r7, #16]
 80029ea:	4013      	ands	r3, r2
 80029ec:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80029ee:	683b      	ldr	r3, [r7, #0]
 80029f0:	685b      	ldr	r3, [r3, #4]
 80029f2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d003      	beq.n	8002a02 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 80029fa:	693a      	ldr	r2, [r7, #16]
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	4313      	orrs	r3, r2
 8002a00:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002a02:	4a23      	ldr	r2, [pc, #140]	; (8002a90 <HAL_GPIO_Init+0x2d0>)
 8002a04:	693b      	ldr	r3, [r7, #16]
 8002a06:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002a08:	4b21      	ldr	r3, [pc, #132]	; (8002a90 <HAL_GPIO_Init+0x2d0>)
 8002a0a:	685b      	ldr	r3, [r3, #4]
 8002a0c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	43db      	mvns	r3, r3
 8002a12:	693a      	ldr	r2, [r7, #16]
 8002a14:	4013      	ands	r3, r2
 8002a16:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002a18:	683b      	ldr	r3, [r7, #0]
 8002a1a:	685b      	ldr	r3, [r3, #4]
 8002a1c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d003      	beq.n	8002a2c <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 8002a24:	693a      	ldr	r2, [r7, #16]
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	4313      	orrs	r3, r2
 8002a2a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002a2c:	4a18      	ldr	r2, [pc, #96]	; (8002a90 <HAL_GPIO_Init+0x2d0>)
 8002a2e:	693b      	ldr	r3, [r7, #16]
 8002a30:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002a32:	4b17      	ldr	r3, [pc, #92]	; (8002a90 <HAL_GPIO_Init+0x2d0>)
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	43db      	mvns	r3, r3
 8002a3c:	693a      	ldr	r2, [r7, #16]
 8002a3e:	4013      	ands	r3, r2
 8002a40:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002a42:	683b      	ldr	r3, [r7, #0]
 8002a44:	685b      	ldr	r3, [r3, #4]
 8002a46:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d003      	beq.n	8002a56 <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 8002a4e:	693a      	ldr	r2, [r7, #16]
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	4313      	orrs	r3, r2
 8002a54:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002a56:	4a0e      	ldr	r2, [pc, #56]	; (8002a90 <HAL_GPIO_Init+0x2d0>)
 8002a58:	693b      	ldr	r3, [r7, #16]
 8002a5a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002a5c:	697b      	ldr	r3, [r7, #20]
 8002a5e:	3301      	adds	r3, #1
 8002a60:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002a62:	683b      	ldr	r3, [r7, #0]
 8002a64:	681a      	ldr	r2, [r3, #0]
 8002a66:	697b      	ldr	r3, [r7, #20]
 8002a68:	fa22 f303 	lsr.w	r3, r2, r3
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	f47f aeaf 	bne.w	80027d0 <HAL_GPIO_Init+0x10>
  }
}
 8002a72:	bf00      	nop
 8002a74:	bf00      	nop
 8002a76:	371c      	adds	r7, #28
 8002a78:	46bd      	mov	sp, r7
 8002a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a7e:	4770      	bx	lr
 8002a80:	40021000 	.word	0x40021000
 8002a84:	40010000 	.word	0x40010000
 8002a88:	48000400 	.word	0x48000400
 8002a8c:	48000800 	.word	0x48000800
 8002a90:	40010400 	.word	0x40010400

08002a94 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002a94:	b480      	push	{r7}
 8002a96:	b083      	sub	sp, #12
 8002a98:	af00      	add	r7, sp, #0
 8002a9a:	6078      	str	r0, [r7, #4]
 8002a9c:	460b      	mov	r3, r1
 8002a9e:	807b      	strh	r3, [r7, #2]
 8002aa0:	4613      	mov	r3, r2
 8002aa2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002aa4:	787b      	ldrb	r3, [r7, #1]
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d003      	beq.n	8002ab2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002aaa:	887a      	ldrh	r2, [r7, #2]
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002ab0:	e002      	b.n	8002ab8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002ab2:	887a      	ldrh	r2, [r7, #2]
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002ab8:	bf00      	nop
 8002aba:	370c      	adds	r7, #12
 8002abc:	46bd      	mov	sp, r7
 8002abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac2:	4770      	bx	lr

08002ac4 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002ac4:	b480      	push	{r7}
 8002ac6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002ac8:	4b05      	ldr	r3, [pc, #20]	; (8002ae0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	4a04      	ldr	r2, [pc, #16]	; (8002ae0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002ace:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ad2:	6013      	str	r3, [r2, #0]
}
 8002ad4:	bf00      	nop
 8002ad6:	46bd      	mov	sp, r7
 8002ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002adc:	4770      	bx	lr
 8002ade:	bf00      	nop
 8002ae0:	40007000 	.word	0x40007000

08002ae4 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002ae4:	b480      	push	{r7}
 8002ae6:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002ae8:	4b04      	ldr	r3, [pc, #16]	; (8002afc <HAL_PWREx_GetVoltageRange+0x18>)
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8002af0:	4618      	mov	r0, r3
 8002af2:	46bd      	mov	sp, r7
 8002af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af8:	4770      	bx	lr
 8002afa:	bf00      	nop
 8002afc:	40007000 	.word	0x40007000

08002b00 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002b00:	b480      	push	{r7}
 8002b02:	b085      	sub	sp, #20
 8002b04:	af00      	add	r7, sp, #0
 8002b06:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002b0e:	d130      	bne.n	8002b72 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002b10:	4b23      	ldr	r3, [pc, #140]	; (8002ba0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002b18:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002b1c:	d038      	beq.n	8002b90 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002b1e:	4b20      	ldr	r3, [pc, #128]	; (8002ba0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002b26:	4a1e      	ldr	r2, [pc, #120]	; (8002ba0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002b28:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002b2c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002b2e:	4b1d      	ldr	r3, [pc, #116]	; (8002ba4 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	2232      	movs	r2, #50	; 0x32
 8002b34:	fb02 f303 	mul.w	r3, r2, r3
 8002b38:	4a1b      	ldr	r2, [pc, #108]	; (8002ba8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002b3a:	fba2 2303 	umull	r2, r3, r2, r3
 8002b3e:	0c9b      	lsrs	r3, r3, #18
 8002b40:	3301      	adds	r3, #1
 8002b42:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002b44:	e002      	b.n	8002b4c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	3b01      	subs	r3, #1
 8002b4a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002b4c:	4b14      	ldr	r3, [pc, #80]	; (8002ba0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002b4e:	695b      	ldr	r3, [r3, #20]
 8002b50:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b54:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002b58:	d102      	bne.n	8002b60 <HAL_PWREx_ControlVoltageScaling+0x60>
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d1f2      	bne.n	8002b46 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002b60:	4b0f      	ldr	r3, [pc, #60]	; (8002ba0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002b62:	695b      	ldr	r3, [r3, #20]
 8002b64:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b68:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002b6c:	d110      	bne.n	8002b90 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002b6e:	2303      	movs	r3, #3
 8002b70:	e00f      	b.n	8002b92 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002b72:	4b0b      	ldr	r3, [pc, #44]	; (8002ba0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002b7a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002b7e:	d007      	beq.n	8002b90 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002b80:	4b07      	ldr	r3, [pc, #28]	; (8002ba0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002b88:	4a05      	ldr	r2, [pc, #20]	; (8002ba0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002b8a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002b8e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002b90:	2300      	movs	r3, #0
}
 8002b92:	4618      	mov	r0, r3
 8002b94:	3714      	adds	r7, #20
 8002b96:	46bd      	mov	sp, r7
 8002b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b9c:	4770      	bx	lr
 8002b9e:	bf00      	nop
 8002ba0:	40007000 	.word	0x40007000
 8002ba4:	20000000 	.word	0x20000000
 8002ba8:	431bde83 	.word	0x431bde83

08002bac <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002bac:	b580      	push	{r7, lr}
 8002bae:	b088      	sub	sp, #32
 8002bb0:	af00      	add	r7, sp, #0
 8002bb2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d102      	bne.n	8002bc0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002bba:	2301      	movs	r3, #1
 8002bbc:	f000 bc02 	b.w	80033c4 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002bc0:	4b96      	ldr	r3, [pc, #600]	; (8002e1c <HAL_RCC_OscConfig+0x270>)
 8002bc2:	689b      	ldr	r3, [r3, #8]
 8002bc4:	f003 030c 	and.w	r3, r3, #12
 8002bc8:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002bca:	4b94      	ldr	r3, [pc, #592]	; (8002e1c <HAL_RCC_OscConfig+0x270>)
 8002bcc:	68db      	ldr	r3, [r3, #12]
 8002bce:	f003 0303 	and.w	r3, r3, #3
 8002bd2:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	f003 0310 	and.w	r3, r3, #16
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	f000 80e4 	beq.w	8002daa <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002be2:	69bb      	ldr	r3, [r7, #24]
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d007      	beq.n	8002bf8 <HAL_RCC_OscConfig+0x4c>
 8002be8:	69bb      	ldr	r3, [r7, #24]
 8002bea:	2b0c      	cmp	r3, #12
 8002bec:	f040 808b 	bne.w	8002d06 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002bf0:	697b      	ldr	r3, [r7, #20]
 8002bf2:	2b01      	cmp	r3, #1
 8002bf4:	f040 8087 	bne.w	8002d06 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002bf8:	4b88      	ldr	r3, [pc, #544]	; (8002e1c <HAL_RCC_OscConfig+0x270>)
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	f003 0302 	and.w	r3, r3, #2
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d005      	beq.n	8002c10 <HAL_RCC_OscConfig+0x64>
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	699b      	ldr	r3, [r3, #24]
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d101      	bne.n	8002c10 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8002c0c:	2301      	movs	r3, #1
 8002c0e:	e3d9      	b.n	80033c4 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	6a1a      	ldr	r2, [r3, #32]
 8002c14:	4b81      	ldr	r3, [pc, #516]	; (8002e1c <HAL_RCC_OscConfig+0x270>)
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	f003 0308 	and.w	r3, r3, #8
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d004      	beq.n	8002c2a <HAL_RCC_OscConfig+0x7e>
 8002c20:	4b7e      	ldr	r3, [pc, #504]	; (8002e1c <HAL_RCC_OscConfig+0x270>)
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002c28:	e005      	b.n	8002c36 <HAL_RCC_OscConfig+0x8a>
 8002c2a:	4b7c      	ldr	r3, [pc, #496]	; (8002e1c <HAL_RCC_OscConfig+0x270>)
 8002c2c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002c30:	091b      	lsrs	r3, r3, #4
 8002c32:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002c36:	4293      	cmp	r3, r2
 8002c38:	d223      	bcs.n	8002c82 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	6a1b      	ldr	r3, [r3, #32]
 8002c3e:	4618      	mov	r0, r3
 8002c40:	f000 fd8c 	bl	800375c <RCC_SetFlashLatencyFromMSIRange>
 8002c44:	4603      	mov	r3, r0
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d001      	beq.n	8002c4e <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8002c4a:	2301      	movs	r3, #1
 8002c4c:	e3ba      	b.n	80033c4 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002c4e:	4b73      	ldr	r3, [pc, #460]	; (8002e1c <HAL_RCC_OscConfig+0x270>)
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	4a72      	ldr	r2, [pc, #456]	; (8002e1c <HAL_RCC_OscConfig+0x270>)
 8002c54:	f043 0308 	orr.w	r3, r3, #8
 8002c58:	6013      	str	r3, [r2, #0]
 8002c5a:	4b70      	ldr	r3, [pc, #448]	; (8002e1c <HAL_RCC_OscConfig+0x270>)
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	6a1b      	ldr	r3, [r3, #32]
 8002c66:	496d      	ldr	r1, [pc, #436]	; (8002e1c <HAL_RCC_OscConfig+0x270>)
 8002c68:	4313      	orrs	r3, r2
 8002c6a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002c6c:	4b6b      	ldr	r3, [pc, #428]	; (8002e1c <HAL_RCC_OscConfig+0x270>)
 8002c6e:	685b      	ldr	r3, [r3, #4]
 8002c70:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	69db      	ldr	r3, [r3, #28]
 8002c78:	021b      	lsls	r3, r3, #8
 8002c7a:	4968      	ldr	r1, [pc, #416]	; (8002e1c <HAL_RCC_OscConfig+0x270>)
 8002c7c:	4313      	orrs	r3, r2
 8002c7e:	604b      	str	r3, [r1, #4]
 8002c80:	e025      	b.n	8002cce <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002c82:	4b66      	ldr	r3, [pc, #408]	; (8002e1c <HAL_RCC_OscConfig+0x270>)
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	4a65      	ldr	r2, [pc, #404]	; (8002e1c <HAL_RCC_OscConfig+0x270>)
 8002c88:	f043 0308 	orr.w	r3, r3, #8
 8002c8c:	6013      	str	r3, [r2, #0]
 8002c8e:	4b63      	ldr	r3, [pc, #396]	; (8002e1c <HAL_RCC_OscConfig+0x270>)
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	6a1b      	ldr	r3, [r3, #32]
 8002c9a:	4960      	ldr	r1, [pc, #384]	; (8002e1c <HAL_RCC_OscConfig+0x270>)
 8002c9c:	4313      	orrs	r3, r2
 8002c9e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002ca0:	4b5e      	ldr	r3, [pc, #376]	; (8002e1c <HAL_RCC_OscConfig+0x270>)
 8002ca2:	685b      	ldr	r3, [r3, #4]
 8002ca4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	69db      	ldr	r3, [r3, #28]
 8002cac:	021b      	lsls	r3, r3, #8
 8002cae:	495b      	ldr	r1, [pc, #364]	; (8002e1c <HAL_RCC_OscConfig+0x270>)
 8002cb0:	4313      	orrs	r3, r2
 8002cb2:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002cb4:	69bb      	ldr	r3, [r7, #24]
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d109      	bne.n	8002cce <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	6a1b      	ldr	r3, [r3, #32]
 8002cbe:	4618      	mov	r0, r3
 8002cc0:	f000 fd4c 	bl	800375c <RCC_SetFlashLatencyFromMSIRange>
 8002cc4:	4603      	mov	r3, r0
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d001      	beq.n	8002cce <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8002cca:	2301      	movs	r3, #1
 8002ccc:	e37a      	b.n	80033c4 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002cce:	f000 fc81 	bl	80035d4 <HAL_RCC_GetSysClockFreq>
 8002cd2:	4602      	mov	r2, r0
 8002cd4:	4b51      	ldr	r3, [pc, #324]	; (8002e1c <HAL_RCC_OscConfig+0x270>)
 8002cd6:	689b      	ldr	r3, [r3, #8]
 8002cd8:	091b      	lsrs	r3, r3, #4
 8002cda:	f003 030f 	and.w	r3, r3, #15
 8002cde:	4950      	ldr	r1, [pc, #320]	; (8002e20 <HAL_RCC_OscConfig+0x274>)
 8002ce0:	5ccb      	ldrb	r3, [r1, r3]
 8002ce2:	f003 031f 	and.w	r3, r3, #31
 8002ce6:	fa22 f303 	lsr.w	r3, r2, r3
 8002cea:	4a4e      	ldr	r2, [pc, #312]	; (8002e24 <HAL_RCC_OscConfig+0x278>)
 8002cec:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002cee:	4b4e      	ldr	r3, [pc, #312]	; (8002e28 <HAL_RCC_OscConfig+0x27c>)
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	4618      	mov	r0, r3
 8002cf4:	f7fe fb88 	bl	8001408 <HAL_InitTick>
 8002cf8:	4603      	mov	r3, r0
 8002cfa:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002cfc:	7bfb      	ldrb	r3, [r7, #15]
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d052      	beq.n	8002da8 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8002d02:	7bfb      	ldrb	r3, [r7, #15]
 8002d04:	e35e      	b.n	80033c4 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	699b      	ldr	r3, [r3, #24]
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d032      	beq.n	8002d74 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002d0e:	4b43      	ldr	r3, [pc, #268]	; (8002e1c <HAL_RCC_OscConfig+0x270>)
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	4a42      	ldr	r2, [pc, #264]	; (8002e1c <HAL_RCC_OscConfig+0x270>)
 8002d14:	f043 0301 	orr.w	r3, r3, #1
 8002d18:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002d1a:	f7fe fbc5 	bl	80014a8 <HAL_GetTick>
 8002d1e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002d20:	e008      	b.n	8002d34 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002d22:	f7fe fbc1 	bl	80014a8 <HAL_GetTick>
 8002d26:	4602      	mov	r2, r0
 8002d28:	693b      	ldr	r3, [r7, #16]
 8002d2a:	1ad3      	subs	r3, r2, r3
 8002d2c:	2b02      	cmp	r3, #2
 8002d2e:	d901      	bls.n	8002d34 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8002d30:	2303      	movs	r3, #3
 8002d32:	e347      	b.n	80033c4 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002d34:	4b39      	ldr	r3, [pc, #228]	; (8002e1c <HAL_RCC_OscConfig+0x270>)
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	f003 0302 	and.w	r3, r3, #2
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d0f0      	beq.n	8002d22 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002d40:	4b36      	ldr	r3, [pc, #216]	; (8002e1c <HAL_RCC_OscConfig+0x270>)
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	4a35      	ldr	r2, [pc, #212]	; (8002e1c <HAL_RCC_OscConfig+0x270>)
 8002d46:	f043 0308 	orr.w	r3, r3, #8
 8002d4a:	6013      	str	r3, [r2, #0]
 8002d4c:	4b33      	ldr	r3, [pc, #204]	; (8002e1c <HAL_RCC_OscConfig+0x270>)
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	6a1b      	ldr	r3, [r3, #32]
 8002d58:	4930      	ldr	r1, [pc, #192]	; (8002e1c <HAL_RCC_OscConfig+0x270>)
 8002d5a:	4313      	orrs	r3, r2
 8002d5c:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002d5e:	4b2f      	ldr	r3, [pc, #188]	; (8002e1c <HAL_RCC_OscConfig+0x270>)
 8002d60:	685b      	ldr	r3, [r3, #4]
 8002d62:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	69db      	ldr	r3, [r3, #28]
 8002d6a:	021b      	lsls	r3, r3, #8
 8002d6c:	492b      	ldr	r1, [pc, #172]	; (8002e1c <HAL_RCC_OscConfig+0x270>)
 8002d6e:	4313      	orrs	r3, r2
 8002d70:	604b      	str	r3, [r1, #4]
 8002d72:	e01a      	b.n	8002daa <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002d74:	4b29      	ldr	r3, [pc, #164]	; (8002e1c <HAL_RCC_OscConfig+0x270>)
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	4a28      	ldr	r2, [pc, #160]	; (8002e1c <HAL_RCC_OscConfig+0x270>)
 8002d7a:	f023 0301 	bic.w	r3, r3, #1
 8002d7e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002d80:	f7fe fb92 	bl	80014a8 <HAL_GetTick>
 8002d84:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002d86:	e008      	b.n	8002d9a <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002d88:	f7fe fb8e 	bl	80014a8 <HAL_GetTick>
 8002d8c:	4602      	mov	r2, r0
 8002d8e:	693b      	ldr	r3, [r7, #16]
 8002d90:	1ad3      	subs	r3, r2, r3
 8002d92:	2b02      	cmp	r3, #2
 8002d94:	d901      	bls.n	8002d9a <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8002d96:	2303      	movs	r3, #3
 8002d98:	e314      	b.n	80033c4 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002d9a:	4b20      	ldr	r3, [pc, #128]	; (8002e1c <HAL_RCC_OscConfig+0x270>)
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	f003 0302 	and.w	r3, r3, #2
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d1f0      	bne.n	8002d88 <HAL_RCC_OscConfig+0x1dc>
 8002da6:	e000      	b.n	8002daa <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002da8:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	f003 0301 	and.w	r3, r3, #1
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d073      	beq.n	8002e9e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002db6:	69bb      	ldr	r3, [r7, #24]
 8002db8:	2b08      	cmp	r3, #8
 8002dba:	d005      	beq.n	8002dc8 <HAL_RCC_OscConfig+0x21c>
 8002dbc:	69bb      	ldr	r3, [r7, #24]
 8002dbe:	2b0c      	cmp	r3, #12
 8002dc0:	d10e      	bne.n	8002de0 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002dc2:	697b      	ldr	r3, [r7, #20]
 8002dc4:	2b03      	cmp	r3, #3
 8002dc6:	d10b      	bne.n	8002de0 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002dc8:	4b14      	ldr	r3, [pc, #80]	; (8002e1c <HAL_RCC_OscConfig+0x270>)
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d063      	beq.n	8002e9c <HAL_RCC_OscConfig+0x2f0>
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	685b      	ldr	r3, [r3, #4]
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d15f      	bne.n	8002e9c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002ddc:	2301      	movs	r3, #1
 8002dde:	e2f1      	b.n	80033c4 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	685b      	ldr	r3, [r3, #4]
 8002de4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002de8:	d106      	bne.n	8002df8 <HAL_RCC_OscConfig+0x24c>
 8002dea:	4b0c      	ldr	r3, [pc, #48]	; (8002e1c <HAL_RCC_OscConfig+0x270>)
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	4a0b      	ldr	r2, [pc, #44]	; (8002e1c <HAL_RCC_OscConfig+0x270>)
 8002df0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002df4:	6013      	str	r3, [r2, #0]
 8002df6:	e025      	b.n	8002e44 <HAL_RCC_OscConfig+0x298>
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	685b      	ldr	r3, [r3, #4]
 8002dfc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002e00:	d114      	bne.n	8002e2c <HAL_RCC_OscConfig+0x280>
 8002e02:	4b06      	ldr	r3, [pc, #24]	; (8002e1c <HAL_RCC_OscConfig+0x270>)
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	4a05      	ldr	r2, [pc, #20]	; (8002e1c <HAL_RCC_OscConfig+0x270>)
 8002e08:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002e0c:	6013      	str	r3, [r2, #0]
 8002e0e:	4b03      	ldr	r3, [pc, #12]	; (8002e1c <HAL_RCC_OscConfig+0x270>)
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	4a02      	ldr	r2, [pc, #8]	; (8002e1c <HAL_RCC_OscConfig+0x270>)
 8002e14:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e18:	6013      	str	r3, [r2, #0]
 8002e1a:	e013      	b.n	8002e44 <HAL_RCC_OscConfig+0x298>
 8002e1c:	40021000 	.word	0x40021000
 8002e20:	080069a4 	.word	0x080069a4
 8002e24:	20000000 	.word	0x20000000
 8002e28:	20000004 	.word	0x20000004
 8002e2c:	4ba0      	ldr	r3, [pc, #640]	; (80030b0 <HAL_RCC_OscConfig+0x504>)
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	4a9f      	ldr	r2, [pc, #636]	; (80030b0 <HAL_RCC_OscConfig+0x504>)
 8002e32:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002e36:	6013      	str	r3, [r2, #0]
 8002e38:	4b9d      	ldr	r3, [pc, #628]	; (80030b0 <HAL_RCC_OscConfig+0x504>)
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	4a9c      	ldr	r2, [pc, #624]	; (80030b0 <HAL_RCC_OscConfig+0x504>)
 8002e3e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002e42:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	685b      	ldr	r3, [r3, #4]
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d013      	beq.n	8002e74 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e4c:	f7fe fb2c 	bl	80014a8 <HAL_GetTick>
 8002e50:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002e52:	e008      	b.n	8002e66 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002e54:	f7fe fb28 	bl	80014a8 <HAL_GetTick>
 8002e58:	4602      	mov	r2, r0
 8002e5a:	693b      	ldr	r3, [r7, #16]
 8002e5c:	1ad3      	subs	r3, r2, r3
 8002e5e:	2b64      	cmp	r3, #100	; 0x64
 8002e60:	d901      	bls.n	8002e66 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002e62:	2303      	movs	r3, #3
 8002e64:	e2ae      	b.n	80033c4 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002e66:	4b92      	ldr	r3, [pc, #584]	; (80030b0 <HAL_RCC_OscConfig+0x504>)
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d0f0      	beq.n	8002e54 <HAL_RCC_OscConfig+0x2a8>
 8002e72:	e014      	b.n	8002e9e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e74:	f7fe fb18 	bl	80014a8 <HAL_GetTick>
 8002e78:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002e7a:	e008      	b.n	8002e8e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002e7c:	f7fe fb14 	bl	80014a8 <HAL_GetTick>
 8002e80:	4602      	mov	r2, r0
 8002e82:	693b      	ldr	r3, [r7, #16]
 8002e84:	1ad3      	subs	r3, r2, r3
 8002e86:	2b64      	cmp	r3, #100	; 0x64
 8002e88:	d901      	bls.n	8002e8e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002e8a:	2303      	movs	r3, #3
 8002e8c:	e29a      	b.n	80033c4 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002e8e:	4b88      	ldr	r3, [pc, #544]	; (80030b0 <HAL_RCC_OscConfig+0x504>)
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d1f0      	bne.n	8002e7c <HAL_RCC_OscConfig+0x2d0>
 8002e9a:	e000      	b.n	8002e9e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e9c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	f003 0302 	and.w	r3, r3, #2
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d060      	beq.n	8002f6c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002eaa:	69bb      	ldr	r3, [r7, #24]
 8002eac:	2b04      	cmp	r3, #4
 8002eae:	d005      	beq.n	8002ebc <HAL_RCC_OscConfig+0x310>
 8002eb0:	69bb      	ldr	r3, [r7, #24]
 8002eb2:	2b0c      	cmp	r3, #12
 8002eb4:	d119      	bne.n	8002eea <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002eb6:	697b      	ldr	r3, [r7, #20]
 8002eb8:	2b02      	cmp	r3, #2
 8002eba:	d116      	bne.n	8002eea <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002ebc:	4b7c      	ldr	r3, [pc, #496]	; (80030b0 <HAL_RCC_OscConfig+0x504>)
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d005      	beq.n	8002ed4 <HAL_RCC_OscConfig+0x328>
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	68db      	ldr	r3, [r3, #12]
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d101      	bne.n	8002ed4 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002ed0:	2301      	movs	r3, #1
 8002ed2:	e277      	b.n	80033c4 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ed4:	4b76      	ldr	r3, [pc, #472]	; (80030b0 <HAL_RCC_OscConfig+0x504>)
 8002ed6:	685b      	ldr	r3, [r3, #4]
 8002ed8:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	691b      	ldr	r3, [r3, #16]
 8002ee0:	061b      	lsls	r3, r3, #24
 8002ee2:	4973      	ldr	r1, [pc, #460]	; (80030b0 <HAL_RCC_OscConfig+0x504>)
 8002ee4:	4313      	orrs	r3, r2
 8002ee6:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002ee8:	e040      	b.n	8002f6c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	68db      	ldr	r3, [r3, #12]
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d023      	beq.n	8002f3a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002ef2:	4b6f      	ldr	r3, [pc, #444]	; (80030b0 <HAL_RCC_OscConfig+0x504>)
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	4a6e      	ldr	r2, [pc, #440]	; (80030b0 <HAL_RCC_OscConfig+0x504>)
 8002ef8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002efc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002efe:	f7fe fad3 	bl	80014a8 <HAL_GetTick>
 8002f02:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002f04:	e008      	b.n	8002f18 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002f06:	f7fe facf 	bl	80014a8 <HAL_GetTick>
 8002f0a:	4602      	mov	r2, r0
 8002f0c:	693b      	ldr	r3, [r7, #16]
 8002f0e:	1ad3      	subs	r3, r2, r3
 8002f10:	2b02      	cmp	r3, #2
 8002f12:	d901      	bls.n	8002f18 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002f14:	2303      	movs	r3, #3
 8002f16:	e255      	b.n	80033c4 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002f18:	4b65      	ldr	r3, [pc, #404]	; (80030b0 <HAL_RCC_OscConfig+0x504>)
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d0f0      	beq.n	8002f06 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f24:	4b62      	ldr	r3, [pc, #392]	; (80030b0 <HAL_RCC_OscConfig+0x504>)
 8002f26:	685b      	ldr	r3, [r3, #4]
 8002f28:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	691b      	ldr	r3, [r3, #16]
 8002f30:	061b      	lsls	r3, r3, #24
 8002f32:	495f      	ldr	r1, [pc, #380]	; (80030b0 <HAL_RCC_OscConfig+0x504>)
 8002f34:	4313      	orrs	r3, r2
 8002f36:	604b      	str	r3, [r1, #4]
 8002f38:	e018      	b.n	8002f6c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002f3a:	4b5d      	ldr	r3, [pc, #372]	; (80030b0 <HAL_RCC_OscConfig+0x504>)
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	4a5c      	ldr	r2, [pc, #368]	; (80030b0 <HAL_RCC_OscConfig+0x504>)
 8002f40:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002f44:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f46:	f7fe faaf 	bl	80014a8 <HAL_GetTick>
 8002f4a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002f4c:	e008      	b.n	8002f60 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002f4e:	f7fe faab 	bl	80014a8 <HAL_GetTick>
 8002f52:	4602      	mov	r2, r0
 8002f54:	693b      	ldr	r3, [r7, #16]
 8002f56:	1ad3      	subs	r3, r2, r3
 8002f58:	2b02      	cmp	r3, #2
 8002f5a:	d901      	bls.n	8002f60 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002f5c:	2303      	movs	r3, #3
 8002f5e:	e231      	b.n	80033c4 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002f60:	4b53      	ldr	r3, [pc, #332]	; (80030b0 <HAL_RCC_OscConfig+0x504>)
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d1f0      	bne.n	8002f4e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	f003 0308 	and.w	r3, r3, #8
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d03c      	beq.n	8002ff2 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	695b      	ldr	r3, [r3, #20]
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d01c      	beq.n	8002fba <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002f80:	4b4b      	ldr	r3, [pc, #300]	; (80030b0 <HAL_RCC_OscConfig+0x504>)
 8002f82:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002f86:	4a4a      	ldr	r2, [pc, #296]	; (80030b0 <HAL_RCC_OscConfig+0x504>)
 8002f88:	f043 0301 	orr.w	r3, r3, #1
 8002f8c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f90:	f7fe fa8a 	bl	80014a8 <HAL_GetTick>
 8002f94:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002f96:	e008      	b.n	8002faa <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002f98:	f7fe fa86 	bl	80014a8 <HAL_GetTick>
 8002f9c:	4602      	mov	r2, r0
 8002f9e:	693b      	ldr	r3, [r7, #16]
 8002fa0:	1ad3      	subs	r3, r2, r3
 8002fa2:	2b02      	cmp	r3, #2
 8002fa4:	d901      	bls.n	8002faa <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002fa6:	2303      	movs	r3, #3
 8002fa8:	e20c      	b.n	80033c4 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002faa:	4b41      	ldr	r3, [pc, #260]	; (80030b0 <HAL_RCC_OscConfig+0x504>)
 8002fac:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002fb0:	f003 0302 	and.w	r3, r3, #2
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d0ef      	beq.n	8002f98 <HAL_RCC_OscConfig+0x3ec>
 8002fb8:	e01b      	b.n	8002ff2 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002fba:	4b3d      	ldr	r3, [pc, #244]	; (80030b0 <HAL_RCC_OscConfig+0x504>)
 8002fbc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002fc0:	4a3b      	ldr	r2, [pc, #236]	; (80030b0 <HAL_RCC_OscConfig+0x504>)
 8002fc2:	f023 0301 	bic.w	r3, r3, #1
 8002fc6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002fca:	f7fe fa6d 	bl	80014a8 <HAL_GetTick>
 8002fce:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002fd0:	e008      	b.n	8002fe4 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002fd2:	f7fe fa69 	bl	80014a8 <HAL_GetTick>
 8002fd6:	4602      	mov	r2, r0
 8002fd8:	693b      	ldr	r3, [r7, #16]
 8002fda:	1ad3      	subs	r3, r2, r3
 8002fdc:	2b02      	cmp	r3, #2
 8002fde:	d901      	bls.n	8002fe4 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002fe0:	2303      	movs	r3, #3
 8002fe2:	e1ef      	b.n	80033c4 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002fe4:	4b32      	ldr	r3, [pc, #200]	; (80030b0 <HAL_RCC_OscConfig+0x504>)
 8002fe6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002fea:	f003 0302 	and.w	r3, r3, #2
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d1ef      	bne.n	8002fd2 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	f003 0304 	and.w	r3, r3, #4
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	f000 80a6 	beq.w	800314c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003000:	2300      	movs	r3, #0
 8003002:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003004:	4b2a      	ldr	r3, [pc, #168]	; (80030b0 <HAL_RCC_OscConfig+0x504>)
 8003006:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003008:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800300c:	2b00      	cmp	r3, #0
 800300e:	d10d      	bne.n	800302c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003010:	4b27      	ldr	r3, [pc, #156]	; (80030b0 <HAL_RCC_OscConfig+0x504>)
 8003012:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003014:	4a26      	ldr	r2, [pc, #152]	; (80030b0 <HAL_RCC_OscConfig+0x504>)
 8003016:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800301a:	6593      	str	r3, [r2, #88]	; 0x58
 800301c:	4b24      	ldr	r3, [pc, #144]	; (80030b0 <HAL_RCC_OscConfig+0x504>)
 800301e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003020:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003024:	60bb      	str	r3, [r7, #8]
 8003026:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003028:	2301      	movs	r3, #1
 800302a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800302c:	4b21      	ldr	r3, [pc, #132]	; (80030b4 <HAL_RCC_OscConfig+0x508>)
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003034:	2b00      	cmp	r3, #0
 8003036:	d118      	bne.n	800306a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003038:	4b1e      	ldr	r3, [pc, #120]	; (80030b4 <HAL_RCC_OscConfig+0x508>)
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	4a1d      	ldr	r2, [pc, #116]	; (80030b4 <HAL_RCC_OscConfig+0x508>)
 800303e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003042:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003044:	f7fe fa30 	bl	80014a8 <HAL_GetTick>
 8003048:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800304a:	e008      	b.n	800305e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800304c:	f7fe fa2c 	bl	80014a8 <HAL_GetTick>
 8003050:	4602      	mov	r2, r0
 8003052:	693b      	ldr	r3, [r7, #16]
 8003054:	1ad3      	subs	r3, r2, r3
 8003056:	2b02      	cmp	r3, #2
 8003058:	d901      	bls.n	800305e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800305a:	2303      	movs	r3, #3
 800305c:	e1b2      	b.n	80033c4 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800305e:	4b15      	ldr	r3, [pc, #84]	; (80030b4 <HAL_RCC_OscConfig+0x508>)
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003066:	2b00      	cmp	r3, #0
 8003068:	d0f0      	beq.n	800304c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	689b      	ldr	r3, [r3, #8]
 800306e:	2b01      	cmp	r3, #1
 8003070:	d108      	bne.n	8003084 <HAL_RCC_OscConfig+0x4d8>
 8003072:	4b0f      	ldr	r3, [pc, #60]	; (80030b0 <HAL_RCC_OscConfig+0x504>)
 8003074:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003078:	4a0d      	ldr	r2, [pc, #52]	; (80030b0 <HAL_RCC_OscConfig+0x504>)
 800307a:	f043 0301 	orr.w	r3, r3, #1
 800307e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003082:	e029      	b.n	80030d8 <HAL_RCC_OscConfig+0x52c>
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	689b      	ldr	r3, [r3, #8]
 8003088:	2b05      	cmp	r3, #5
 800308a:	d115      	bne.n	80030b8 <HAL_RCC_OscConfig+0x50c>
 800308c:	4b08      	ldr	r3, [pc, #32]	; (80030b0 <HAL_RCC_OscConfig+0x504>)
 800308e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003092:	4a07      	ldr	r2, [pc, #28]	; (80030b0 <HAL_RCC_OscConfig+0x504>)
 8003094:	f043 0304 	orr.w	r3, r3, #4
 8003098:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800309c:	4b04      	ldr	r3, [pc, #16]	; (80030b0 <HAL_RCC_OscConfig+0x504>)
 800309e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030a2:	4a03      	ldr	r2, [pc, #12]	; (80030b0 <HAL_RCC_OscConfig+0x504>)
 80030a4:	f043 0301 	orr.w	r3, r3, #1
 80030a8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80030ac:	e014      	b.n	80030d8 <HAL_RCC_OscConfig+0x52c>
 80030ae:	bf00      	nop
 80030b0:	40021000 	.word	0x40021000
 80030b4:	40007000 	.word	0x40007000
 80030b8:	4b9a      	ldr	r3, [pc, #616]	; (8003324 <HAL_RCC_OscConfig+0x778>)
 80030ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030be:	4a99      	ldr	r2, [pc, #612]	; (8003324 <HAL_RCC_OscConfig+0x778>)
 80030c0:	f023 0301 	bic.w	r3, r3, #1
 80030c4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80030c8:	4b96      	ldr	r3, [pc, #600]	; (8003324 <HAL_RCC_OscConfig+0x778>)
 80030ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030ce:	4a95      	ldr	r2, [pc, #596]	; (8003324 <HAL_RCC_OscConfig+0x778>)
 80030d0:	f023 0304 	bic.w	r3, r3, #4
 80030d4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	689b      	ldr	r3, [r3, #8]
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d016      	beq.n	800310e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030e0:	f7fe f9e2 	bl	80014a8 <HAL_GetTick>
 80030e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80030e6:	e00a      	b.n	80030fe <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80030e8:	f7fe f9de 	bl	80014a8 <HAL_GetTick>
 80030ec:	4602      	mov	r2, r0
 80030ee:	693b      	ldr	r3, [r7, #16]
 80030f0:	1ad3      	subs	r3, r2, r3
 80030f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80030f6:	4293      	cmp	r3, r2
 80030f8:	d901      	bls.n	80030fe <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80030fa:	2303      	movs	r3, #3
 80030fc:	e162      	b.n	80033c4 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80030fe:	4b89      	ldr	r3, [pc, #548]	; (8003324 <HAL_RCC_OscConfig+0x778>)
 8003100:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003104:	f003 0302 	and.w	r3, r3, #2
 8003108:	2b00      	cmp	r3, #0
 800310a:	d0ed      	beq.n	80030e8 <HAL_RCC_OscConfig+0x53c>
 800310c:	e015      	b.n	800313a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800310e:	f7fe f9cb 	bl	80014a8 <HAL_GetTick>
 8003112:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003114:	e00a      	b.n	800312c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003116:	f7fe f9c7 	bl	80014a8 <HAL_GetTick>
 800311a:	4602      	mov	r2, r0
 800311c:	693b      	ldr	r3, [r7, #16]
 800311e:	1ad3      	subs	r3, r2, r3
 8003120:	f241 3288 	movw	r2, #5000	; 0x1388
 8003124:	4293      	cmp	r3, r2
 8003126:	d901      	bls.n	800312c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003128:	2303      	movs	r3, #3
 800312a:	e14b      	b.n	80033c4 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800312c:	4b7d      	ldr	r3, [pc, #500]	; (8003324 <HAL_RCC_OscConfig+0x778>)
 800312e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003132:	f003 0302 	and.w	r3, r3, #2
 8003136:	2b00      	cmp	r3, #0
 8003138:	d1ed      	bne.n	8003116 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800313a:	7ffb      	ldrb	r3, [r7, #31]
 800313c:	2b01      	cmp	r3, #1
 800313e:	d105      	bne.n	800314c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003140:	4b78      	ldr	r3, [pc, #480]	; (8003324 <HAL_RCC_OscConfig+0x778>)
 8003142:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003144:	4a77      	ldr	r2, [pc, #476]	; (8003324 <HAL_RCC_OscConfig+0x778>)
 8003146:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800314a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	f003 0320 	and.w	r3, r3, #32
 8003154:	2b00      	cmp	r3, #0
 8003156:	d03c      	beq.n	80031d2 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800315c:	2b00      	cmp	r3, #0
 800315e:	d01c      	beq.n	800319a <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003160:	4b70      	ldr	r3, [pc, #448]	; (8003324 <HAL_RCC_OscConfig+0x778>)
 8003162:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003166:	4a6f      	ldr	r2, [pc, #444]	; (8003324 <HAL_RCC_OscConfig+0x778>)
 8003168:	f043 0301 	orr.w	r3, r3, #1
 800316c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003170:	f7fe f99a 	bl	80014a8 <HAL_GetTick>
 8003174:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003176:	e008      	b.n	800318a <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003178:	f7fe f996 	bl	80014a8 <HAL_GetTick>
 800317c:	4602      	mov	r2, r0
 800317e:	693b      	ldr	r3, [r7, #16]
 8003180:	1ad3      	subs	r3, r2, r3
 8003182:	2b02      	cmp	r3, #2
 8003184:	d901      	bls.n	800318a <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8003186:	2303      	movs	r3, #3
 8003188:	e11c      	b.n	80033c4 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800318a:	4b66      	ldr	r3, [pc, #408]	; (8003324 <HAL_RCC_OscConfig+0x778>)
 800318c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003190:	f003 0302 	and.w	r3, r3, #2
 8003194:	2b00      	cmp	r3, #0
 8003196:	d0ef      	beq.n	8003178 <HAL_RCC_OscConfig+0x5cc>
 8003198:	e01b      	b.n	80031d2 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800319a:	4b62      	ldr	r3, [pc, #392]	; (8003324 <HAL_RCC_OscConfig+0x778>)
 800319c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80031a0:	4a60      	ldr	r2, [pc, #384]	; (8003324 <HAL_RCC_OscConfig+0x778>)
 80031a2:	f023 0301 	bic.w	r3, r3, #1
 80031a6:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031aa:	f7fe f97d 	bl	80014a8 <HAL_GetTick>
 80031ae:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80031b0:	e008      	b.n	80031c4 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80031b2:	f7fe f979 	bl	80014a8 <HAL_GetTick>
 80031b6:	4602      	mov	r2, r0
 80031b8:	693b      	ldr	r3, [r7, #16]
 80031ba:	1ad3      	subs	r3, r2, r3
 80031bc:	2b02      	cmp	r3, #2
 80031be:	d901      	bls.n	80031c4 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 80031c0:	2303      	movs	r3, #3
 80031c2:	e0ff      	b.n	80033c4 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80031c4:	4b57      	ldr	r3, [pc, #348]	; (8003324 <HAL_RCC_OscConfig+0x778>)
 80031c6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80031ca:	f003 0302 	and.w	r3, r3, #2
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d1ef      	bne.n	80031b2 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	f000 80f3 	beq.w	80033c2 <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031e0:	2b02      	cmp	r3, #2
 80031e2:	f040 80c9 	bne.w	8003378 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80031e6:	4b4f      	ldr	r3, [pc, #316]	; (8003324 <HAL_RCC_OscConfig+0x778>)
 80031e8:	68db      	ldr	r3, [r3, #12]
 80031ea:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80031ec:	697b      	ldr	r3, [r7, #20]
 80031ee:	f003 0203 	and.w	r2, r3, #3
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031f6:	429a      	cmp	r2, r3
 80031f8:	d12c      	bne.n	8003254 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80031fa:	697b      	ldr	r3, [r7, #20]
 80031fc:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003204:	3b01      	subs	r3, #1
 8003206:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003208:	429a      	cmp	r2, r3
 800320a:	d123      	bne.n	8003254 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800320c:	697b      	ldr	r3, [r7, #20]
 800320e:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003216:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003218:	429a      	cmp	r2, r3
 800321a:	d11b      	bne.n	8003254 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800321c:	697b      	ldr	r3, [r7, #20]
 800321e:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003226:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003228:	429a      	cmp	r2, r3
 800322a:	d113      	bne.n	8003254 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800322c:	697b      	ldr	r3, [r7, #20]
 800322e:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003236:	085b      	lsrs	r3, r3, #1
 8003238:	3b01      	subs	r3, #1
 800323a:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800323c:	429a      	cmp	r2, r3
 800323e:	d109      	bne.n	8003254 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003240:	697b      	ldr	r3, [r7, #20]
 8003242:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800324a:	085b      	lsrs	r3, r3, #1
 800324c:	3b01      	subs	r3, #1
 800324e:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003250:	429a      	cmp	r2, r3
 8003252:	d06b      	beq.n	800332c <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003254:	69bb      	ldr	r3, [r7, #24]
 8003256:	2b0c      	cmp	r3, #12
 8003258:	d062      	beq.n	8003320 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800325a:	4b32      	ldr	r3, [pc, #200]	; (8003324 <HAL_RCC_OscConfig+0x778>)
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003262:	2b00      	cmp	r3, #0
 8003264:	d001      	beq.n	800326a <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8003266:	2301      	movs	r3, #1
 8003268:	e0ac      	b.n	80033c4 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800326a:	4b2e      	ldr	r3, [pc, #184]	; (8003324 <HAL_RCC_OscConfig+0x778>)
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	4a2d      	ldr	r2, [pc, #180]	; (8003324 <HAL_RCC_OscConfig+0x778>)
 8003270:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003274:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003276:	f7fe f917 	bl	80014a8 <HAL_GetTick>
 800327a:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800327c:	e008      	b.n	8003290 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800327e:	f7fe f913 	bl	80014a8 <HAL_GetTick>
 8003282:	4602      	mov	r2, r0
 8003284:	693b      	ldr	r3, [r7, #16]
 8003286:	1ad3      	subs	r3, r2, r3
 8003288:	2b02      	cmp	r3, #2
 800328a:	d901      	bls.n	8003290 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 800328c:	2303      	movs	r3, #3
 800328e:	e099      	b.n	80033c4 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003290:	4b24      	ldr	r3, [pc, #144]	; (8003324 <HAL_RCC_OscConfig+0x778>)
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003298:	2b00      	cmp	r3, #0
 800329a:	d1f0      	bne.n	800327e <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800329c:	4b21      	ldr	r3, [pc, #132]	; (8003324 <HAL_RCC_OscConfig+0x778>)
 800329e:	68da      	ldr	r2, [r3, #12]
 80032a0:	4b21      	ldr	r3, [pc, #132]	; (8003328 <HAL_RCC_OscConfig+0x77c>)
 80032a2:	4013      	ands	r3, r2
 80032a4:	687a      	ldr	r2, [r7, #4]
 80032a6:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80032a8:	687a      	ldr	r2, [r7, #4]
 80032aa:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80032ac:	3a01      	subs	r2, #1
 80032ae:	0112      	lsls	r2, r2, #4
 80032b0:	4311      	orrs	r1, r2
 80032b2:	687a      	ldr	r2, [r7, #4]
 80032b4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80032b6:	0212      	lsls	r2, r2, #8
 80032b8:	4311      	orrs	r1, r2
 80032ba:	687a      	ldr	r2, [r7, #4]
 80032bc:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80032be:	0852      	lsrs	r2, r2, #1
 80032c0:	3a01      	subs	r2, #1
 80032c2:	0552      	lsls	r2, r2, #21
 80032c4:	4311      	orrs	r1, r2
 80032c6:	687a      	ldr	r2, [r7, #4]
 80032c8:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80032ca:	0852      	lsrs	r2, r2, #1
 80032cc:	3a01      	subs	r2, #1
 80032ce:	0652      	lsls	r2, r2, #25
 80032d0:	4311      	orrs	r1, r2
 80032d2:	687a      	ldr	r2, [r7, #4]
 80032d4:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80032d6:	06d2      	lsls	r2, r2, #27
 80032d8:	430a      	orrs	r2, r1
 80032da:	4912      	ldr	r1, [pc, #72]	; (8003324 <HAL_RCC_OscConfig+0x778>)
 80032dc:	4313      	orrs	r3, r2
 80032de:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80032e0:	4b10      	ldr	r3, [pc, #64]	; (8003324 <HAL_RCC_OscConfig+0x778>)
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	4a0f      	ldr	r2, [pc, #60]	; (8003324 <HAL_RCC_OscConfig+0x778>)
 80032e6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80032ea:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80032ec:	4b0d      	ldr	r3, [pc, #52]	; (8003324 <HAL_RCC_OscConfig+0x778>)
 80032ee:	68db      	ldr	r3, [r3, #12]
 80032f0:	4a0c      	ldr	r2, [pc, #48]	; (8003324 <HAL_RCC_OscConfig+0x778>)
 80032f2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80032f6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80032f8:	f7fe f8d6 	bl	80014a8 <HAL_GetTick>
 80032fc:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80032fe:	e008      	b.n	8003312 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003300:	f7fe f8d2 	bl	80014a8 <HAL_GetTick>
 8003304:	4602      	mov	r2, r0
 8003306:	693b      	ldr	r3, [r7, #16]
 8003308:	1ad3      	subs	r3, r2, r3
 800330a:	2b02      	cmp	r3, #2
 800330c:	d901      	bls.n	8003312 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 800330e:	2303      	movs	r3, #3
 8003310:	e058      	b.n	80033c4 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003312:	4b04      	ldr	r3, [pc, #16]	; (8003324 <HAL_RCC_OscConfig+0x778>)
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800331a:	2b00      	cmp	r3, #0
 800331c:	d0f0      	beq.n	8003300 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800331e:	e050      	b.n	80033c2 <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003320:	2301      	movs	r3, #1
 8003322:	e04f      	b.n	80033c4 <HAL_RCC_OscConfig+0x818>
 8003324:	40021000 	.word	0x40021000
 8003328:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800332c:	4b27      	ldr	r3, [pc, #156]	; (80033cc <HAL_RCC_OscConfig+0x820>)
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003334:	2b00      	cmp	r3, #0
 8003336:	d144      	bne.n	80033c2 <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003338:	4b24      	ldr	r3, [pc, #144]	; (80033cc <HAL_RCC_OscConfig+0x820>)
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	4a23      	ldr	r2, [pc, #140]	; (80033cc <HAL_RCC_OscConfig+0x820>)
 800333e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003342:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003344:	4b21      	ldr	r3, [pc, #132]	; (80033cc <HAL_RCC_OscConfig+0x820>)
 8003346:	68db      	ldr	r3, [r3, #12]
 8003348:	4a20      	ldr	r2, [pc, #128]	; (80033cc <HAL_RCC_OscConfig+0x820>)
 800334a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800334e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003350:	f7fe f8aa 	bl	80014a8 <HAL_GetTick>
 8003354:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003356:	e008      	b.n	800336a <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003358:	f7fe f8a6 	bl	80014a8 <HAL_GetTick>
 800335c:	4602      	mov	r2, r0
 800335e:	693b      	ldr	r3, [r7, #16]
 8003360:	1ad3      	subs	r3, r2, r3
 8003362:	2b02      	cmp	r3, #2
 8003364:	d901      	bls.n	800336a <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 8003366:	2303      	movs	r3, #3
 8003368:	e02c      	b.n	80033c4 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800336a:	4b18      	ldr	r3, [pc, #96]	; (80033cc <HAL_RCC_OscConfig+0x820>)
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003372:	2b00      	cmp	r3, #0
 8003374:	d0f0      	beq.n	8003358 <HAL_RCC_OscConfig+0x7ac>
 8003376:	e024      	b.n	80033c2 <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003378:	69bb      	ldr	r3, [r7, #24]
 800337a:	2b0c      	cmp	r3, #12
 800337c:	d01f      	beq.n	80033be <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800337e:	4b13      	ldr	r3, [pc, #76]	; (80033cc <HAL_RCC_OscConfig+0x820>)
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	4a12      	ldr	r2, [pc, #72]	; (80033cc <HAL_RCC_OscConfig+0x820>)
 8003384:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003388:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800338a:	f7fe f88d 	bl	80014a8 <HAL_GetTick>
 800338e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003390:	e008      	b.n	80033a4 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003392:	f7fe f889 	bl	80014a8 <HAL_GetTick>
 8003396:	4602      	mov	r2, r0
 8003398:	693b      	ldr	r3, [r7, #16]
 800339a:	1ad3      	subs	r3, r2, r3
 800339c:	2b02      	cmp	r3, #2
 800339e:	d901      	bls.n	80033a4 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 80033a0:	2303      	movs	r3, #3
 80033a2:	e00f      	b.n	80033c4 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80033a4:	4b09      	ldr	r3, [pc, #36]	; (80033cc <HAL_RCC_OscConfig+0x820>)
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d1f0      	bne.n	8003392 <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 80033b0:	4b06      	ldr	r3, [pc, #24]	; (80033cc <HAL_RCC_OscConfig+0x820>)
 80033b2:	68da      	ldr	r2, [r3, #12]
 80033b4:	4905      	ldr	r1, [pc, #20]	; (80033cc <HAL_RCC_OscConfig+0x820>)
 80033b6:	4b06      	ldr	r3, [pc, #24]	; (80033d0 <HAL_RCC_OscConfig+0x824>)
 80033b8:	4013      	ands	r3, r2
 80033ba:	60cb      	str	r3, [r1, #12]
 80033bc:	e001      	b.n	80033c2 <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80033be:	2301      	movs	r3, #1
 80033c0:	e000      	b.n	80033c4 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 80033c2:	2300      	movs	r3, #0
}
 80033c4:	4618      	mov	r0, r3
 80033c6:	3720      	adds	r7, #32
 80033c8:	46bd      	mov	sp, r7
 80033ca:	bd80      	pop	{r7, pc}
 80033cc:	40021000 	.word	0x40021000
 80033d0:	feeefffc 	.word	0xfeeefffc

080033d4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80033d4:	b580      	push	{r7, lr}
 80033d6:	b084      	sub	sp, #16
 80033d8:	af00      	add	r7, sp, #0
 80033da:	6078      	str	r0, [r7, #4]
 80033dc:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d101      	bne.n	80033e8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80033e4:	2301      	movs	r3, #1
 80033e6:	e0e7      	b.n	80035b8 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80033e8:	4b75      	ldr	r3, [pc, #468]	; (80035c0 <HAL_RCC_ClockConfig+0x1ec>)
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	f003 0307 	and.w	r3, r3, #7
 80033f0:	683a      	ldr	r2, [r7, #0]
 80033f2:	429a      	cmp	r2, r3
 80033f4:	d910      	bls.n	8003418 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80033f6:	4b72      	ldr	r3, [pc, #456]	; (80035c0 <HAL_RCC_ClockConfig+0x1ec>)
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	f023 0207 	bic.w	r2, r3, #7
 80033fe:	4970      	ldr	r1, [pc, #448]	; (80035c0 <HAL_RCC_ClockConfig+0x1ec>)
 8003400:	683b      	ldr	r3, [r7, #0]
 8003402:	4313      	orrs	r3, r2
 8003404:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003406:	4b6e      	ldr	r3, [pc, #440]	; (80035c0 <HAL_RCC_ClockConfig+0x1ec>)
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	f003 0307 	and.w	r3, r3, #7
 800340e:	683a      	ldr	r2, [r7, #0]
 8003410:	429a      	cmp	r2, r3
 8003412:	d001      	beq.n	8003418 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003414:	2301      	movs	r3, #1
 8003416:	e0cf      	b.n	80035b8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	f003 0302 	and.w	r3, r3, #2
 8003420:	2b00      	cmp	r3, #0
 8003422:	d010      	beq.n	8003446 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	689a      	ldr	r2, [r3, #8]
 8003428:	4b66      	ldr	r3, [pc, #408]	; (80035c4 <HAL_RCC_ClockConfig+0x1f0>)
 800342a:	689b      	ldr	r3, [r3, #8]
 800342c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003430:	429a      	cmp	r2, r3
 8003432:	d908      	bls.n	8003446 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003434:	4b63      	ldr	r3, [pc, #396]	; (80035c4 <HAL_RCC_ClockConfig+0x1f0>)
 8003436:	689b      	ldr	r3, [r3, #8]
 8003438:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	689b      	ldr	r3, [r3, #8]
 8003440:	4960      	ldr	r1, [pc, #384]	; (80035c4 <HAL_RCC_ClockConfig+0x1f0>)
 8003442:	4313      	orrs	r3, r2
 8003444:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	f003 0301 	and.w	r3, r3, #1
 800344e:	2b00      	cmp	r3, #0
 8003450:	d04c      	beq.n	80034ec <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	685b      	ldr	r3, [r3, #4]
 8003456:	2b03      	cmp	r3, #3
 8003458:	d107      	bne.n	800346a <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800345a:	4b5a      	ldr	r3, [pc, #360]	; (80035c4 <HAL_RCC_ClockConfig+0x1f0>)
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003462:	2b00      	cmp	r3, #0
 8003464:	d121      	bne.n	80034aa <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8003466:	2301      	movs	r3, #1
 8003468:	e0a6      	b.n	80035b8 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	685b      	ldr	r3, [r3, #4]
 800346e:	2b02      	cmp	r3, #2
 8003470:	d107      	bne.n	8003482 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003472:	4b54      	ldr	r3, [pc, #336]	; (80035c4 <HAL_RCC_ClockConfig+0x1f0>)
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800347a:	2b00      	cmp	r3, #0
 800347c:	d115      	bne.n	80034aa <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800347e:	2301      	movs	r3, #1
 8003480:	e09a      	b.n	80035b8 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	685b      	ldr	r3, [r3, #4]
 8003486:	2b00      	cmp	r3, #0
 8003488:	d107      	bne.n	800349a <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800348a:	4b4e      	ldr	r3, [pc, #312]	; (80035c4 <HAL_RCC_ClockConfig+0x1f0>)
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	f003 0302 	and.w	r3, r3, #2
 8003492:	2b00      	cmp	r3, #0
 8003494:	d109      	bne.n	80034aa <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003496:	2301      	movs	r3, #1
 8003498:	e08e      	b.n	80035b8 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800349a:	4b4a      	ldr	r3, [pc, #296]	; (80035c4 <HAL_RCC_ClockConfig+0x1f0>)
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d101      	bne.n	80034aa <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80034a6:	2301      	movs	r3, #1
 80034a8:	e086      	b.n	80035b8 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80034aa:	4b46      	ldr	r3, [pc, #280]	; (80035c4 <HAL_RCC_ClockConfig+0x1f0>)
 80034ac:	689b      	ldr	r3, [r3, #8]
 80034ae:	f023 0203 	bic.w	r2, r3, #3
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	685b      	ldr	r3, [r3, #4]
 80034b6:	4943      	ldr	r1, [pc, #268]	; (80035c4 <HAL_RCC_ClockConfig+0x1f0>)
 80034b8:	4313      	orrs	r3, r2
 80034ba:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80034bc:	f7fd fff4 	bl	80014a8 <HAL_GetTick>
 80034c0:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80034c2:	e00a      	b.n	80034da <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80034c4:	f7fd fff0 	bl	80014a8 <HAL_GetTick>
 80034c8:	4602      	mov	r2, r0
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	1ad3      	subs	r3, r2, r3
 80034ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80034d2:	4293      	cmp	r3, r2
 80034d4:	d901      	bls.n	80034da <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80034d6:	2303      	movs	r3, #3
 80034d8:	e06e      	b.n	80035b8 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80034da:	4b3a      	ldr	r3, [pc, #232]	; (80035c4 <HAL_RCC_ClockConfig+0x1f0>)
 80034dc:	689b      	ldr	r3, [r3, #8]
 80034de:	f003 020c 	and.w	r2, r3, #12
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	685b      	ldr	r3, [r3, #4]
 80034e6:	009b      	lsls	r3, r3, #2
 80034e8:	429a      	cmp	r2, r3
 80034ea:	d1eb      	bne.n	80034c4 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	f003 0302 	and.w	r3, r3, #2
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d010      	beq.n	800351a <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	689a      	ldr	r2, [r3, #8]
 80034fc:	4b31      	ldr	r3, [pc, #196]	; (80035c4 <HAL_RCC_ClockConfig+0x1f0>)
 80034fe:	689b      	ldr	r3, [r3, #8]
 8003500:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003504:	429a      	cmp	r2, r3
 8003506:	d208      	bcs.n	800351a <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003508:	4b2e      	ldr	r3, [pc, #184]	; (80035c4 <HAL_RCC_ClockConfig+0x1f0>)
 800350a:	689b      	ldr	r3, [r3, #8]
 800350c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	689b      	ldr	r3, [r3, #8]
 8003514:	492b      	ldr	r1, [pc, #172]	; (80035c4 <HAL_RCC_ClockConfig+0x1f0>)
 8003516:	4313      	orrs	r3, r2
 8003518:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800351a:	4b29      	ldr	r3, [pc, #164]	; (80035c0 <HAL_RCC_ClockConfig+0x1ec>)
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	f003 0307 	and.w	r3, r3, #7
 8003522:	683a      	ldr	r2, [r7, #0]
 8003524:	429a      	cmp	r2, r3
 8003526:	d210      	bcs.n	800354a <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003528:	4b25      	ldr	r3, [pc, #148]	; (80035c0 <HAL_RCC_ClockConfig+0x1ec>)
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	f023 0207 	bic.w	r2, r3, #7
 8003530:	4923      	ldr	r1, [pc, #140]	; (80035c0 <HAL_RCC_ClockConfig+0x1ec>)
 8003532:	683b      	ldr	r3, [r7, #0]
 8003534:	4313      	orrs	r3, r2
 8003536:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003538:	4b21      	ldr	r3, [pc, #132]	; (80035c0 <HAL_RCC_ClockConfig+0x1ec>)
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	f003 0307 	and.w	r3, r3, #7
 8003540:	683a      	ldr	r2, [r7, #0]
 8003542:	429a      	cmp	r2, r3
 8003544:	d001      	beq.n	800354a <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8003546:	2301      	movs	r3, #1
 8003548:	e036      	b.n	80035b8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	f003 0304 	and.w	r3, r3, #4
 8003552:	2b00      	cmp	r3, #0
 8003554:	d008      	beq.n	8003568 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003556:	4b1b      	ldr	r3, [pc, #108]	; (80035c4 <HAL_RCC_ClockConfig+0x1f0>)
 8003558:	689b      	ldr	r3, [r3, #8]
 800355a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	68db      	ldr	r3, [r3, #12]
 8003562:	4918      	ldr	r1, [pc, #96]	; (80035c4 <HAL_RCC_ClockConfig+0x1f0>)
 8003564:	4313      	orrs	r3, r2
 8003566:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	f003 0308 	and.w	r3, r3, #8
 8003570:	2b00      	cmp	r3, #0
 8003572:	d009      	beq.n	8003588 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003574:	4b13      	ldr	r3, [pc, #76]	; (80035c4 <HAL_RCC_ClockConfig+0x1f0>)
 8003576:	689b      	ldr	r3, [r3, #8]
 8003578:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	691b      	ldr	r3, [r3, #16]
 8003580:	00db      	lsls	r3, r3, #3
 8003582:	4910      	ldr	r1, [pc, #64]	; (80035c4 <HAL_RCC_ClockConfig+0x1f0>)
 8003584:	4313      	orrs	r3, r2
 8003586:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003588:	f000 f824 	bl	80035d4 <HAL_RCC_GetSysClockFreq>
 800358c:	4602      	mov	r2, r0
 800358e:	4b0d      	ldr	r3, [pc, #52]	; (80035c4 <HAL_RCC_ClockConfig+0x1f0>)
 8003590:	689b      	ldr	r3, [r3, #8]
 8003592:	091b      	lsrs	r3, r3, #4
 8003594:	f003 030f 	and.w	r3, r3, #15
 8003598:	490b      	ldr	r1, [pc, #44]	; (80035c8 <HAL_RCC_ClockConfig+0x1f4>)
 800359a:	5ccb      	ldrb	r3, [r1, r3]
 800359c:	f003 031f 	and.w	r3, r3, #31
 80035a0:	fa22 f303 	lsr.w	r3, r2, r3
 80035a4:	4a09      	ldr	r2, [pc, #36]	; (80035cc <HAL_RCC_ClockConfig+0x1f8>)
 80035a6:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80035a8:	4b09      	ldr	r3, [pc, #36]	; (80035d0 <HAL_RCC_ClockConfig+0x1fc>)
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	4618      	mov	r0, r3
 80035ae:	f7fd ff2b 	bl	8001408 <HAL_InitTick>
 80035b2:	4603      	mov	r3, r0
 80035b4:	72fb      	strb	r3, [r7, #11]

  return status;
 80035b6:	7afb      	ldrb	r3, [r7, #11]
}
 80035b8:	4618      	mov	r0, r3
 80035ba:	3710      	adds	r7, #16
 80035bc:	46bd      	mov	sp, r7
 80035be:	bd80      	pop	{r7, pc}
 80035c0:	40022000 	.word	0x40022000
 80035c4:	40021000 	.word	0x40021000
 80035c8:	080069a4 	.word	0x080069a4
 80035cc:	20000000 	.word	0x20000000
 80035d0:	20000004 	.word	0x20000004

080035d4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80035d4:	b480      	push	{r7}
 80035d6:	b089      	sub	sp, #36	; 0x24
 80035d8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80035da:	2300      	movs	r3, #0
 80035dc:	61fb      	str	r3, [r7, #28]
 80035de:	2300      	movs	r3, #0
 80035e0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80035e2:	4b3e      	ldr	r3, [pc, #248]	; (80036dc <HAL_RCC_GetSysClockFreq+0x108>)
 80035e4:	689b      	ldr	r3, [r3, #8]
 80035e6:	f003 030c 	and.w	r3, r3, #12
 80035ea:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80035ec:	4b3b      	ldr	r3, [pc, #236]	; (80036dc <HAL_RCC_GetSysClockFreq+0x108>)
 80035ee:	68db      	ldr	r3, [r3, #12]
 80035f0:	f003 0303 	and.w	r3, r3, #3
 80035f4:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80035f6:	693b      	ldr	r3, [r7, #16]
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d005      	beq.n	8003608 <HAL_RCC_GetSysClockFreq+0x34>
 80035fc:	693b      	ldr	r3, [r7, #16]
 80035fe:	2b0c      	cmp	r3, #12
 8003600:	d121      	bne.n	8003646 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	2b01      	cmp	r3, #1
 8003606:	d11e      	bne.n	8003646 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003608:	4b34      	ldr	r3, [pc, #208]	; (80036dc <HAL_RCC_GetSysClockFreq+0x108>)
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	f003 0308 	and.w	r3, r3, #8
 8003610:	2b00      	cmp	r3, #0
 8003612:	d107      	bne.n	8003624 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003614:	4b31      	ldr	r3, [pc, #196]	; (80036dc <HAL_RCC_GetSysClockFreq+0x108>)
 8003616:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800361a:	0a1b      	lsrs	r3, r3, #8
 800361c:	f003 030f 	and.w	r3, r3, #15
 8003620:	61fb      	str	r3, [r7, #28]
 8003622:	e005      	b.n	8003630 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003624:	4b2d      	ldr	r3, [pc, #180]	; (80036dc <HAL_RCC_GetSysClockFreq+0x108>)
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	091b      	lsrs	r3, r3, #4
 800362a:	f003 030f 	and.w	r3, r3, #15
 800362e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003630:	4a2b      	ldr	r2, [pc, #172]	; (80036e0 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003632:	69fb      	ldr	r3, [r7, #28]
 8003634:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003638:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800363a:	693b      	ldr	r3, [r7, #16]
 800363c:	2b00      	cmp	r3, #0
 800363e:	d10d      	bne.n	800365c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003640:	69fb      	ldr	r3, [r7, #28]
 8003642:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003644:	e00a      	b.n	800365c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003646:	693b      	ldr	r3, [r7, #16]
 8003648:	2b04      	cmp	r3, #4
 800364a:	d102      	bne.n	8003652 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800364c:	4b25      	ldr	r3, [pc, #148]	; (80036e4 <HAL_RCC_GetSysClockFreq+0x110>)
 800364e:	61bb      	str	r3, [r7, #24]
 8003650:	e004      	b.n	800365c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003652:	693b      	ldr	r3, [r7, #16]
 8003654:	2b08      	cmp	r3, #8
 8003656:	d101      	bne.n	800365c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003658:	4b23      	ldr	r3, [pc, #140]	; (80036e8 <HAL_RCC_GetSysClockFreq+0x114>)
 800365a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800365c:	693b      	ldr	r3, [r7, #16]
 800365e:	2b0c      	cmp	r3, #12
 8003660:	d134      	bne.n	80036cc <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003662:	4b1e      	ldr	r3, [pc, #120]	; (80036dc <HAL_RCC_GetSysClockFreq+0x108>)
 8003664:	68db      	ldr	r3, [r3, #12]
 8003666:	f003 0303 	and.w	r3, r3, #3
 800366a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800366c:	68bb      	ldr	r3, [r7, #8]
 800366e:	2b02      	cmp	r3, #2
 8003670:	d003      	beq.n	800367a <HAL_RCC_GetSysClockFreq+0xa6>
 8003672:	68bb      	ldr	r3, [r7, #8]
 8003674:	2b03      	cmp	r3, #3
 8003676:	d003      	beq.n	8003680 <HAL_RCC_GetSysClockFreq+0xac>
 8003678:	e005      	b.n	8003686 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800367a:	4b1a      	ldr	r3, [pc, #104]	; (80036e4 <HAL_RCC_GetSysClockFreq+0x110>)
 800367c:	617b      	str	r3, [r7, #20]
      break;
 800367e:	e005      	b.n	800368c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003680:	4b19      	ldr	r3, [pc, #100]	; (80036e8 <HAL_RCC_GetSysClockFreq+0x114>)
 8003682:	617b      	str	r3, [r7, #20]
      break;
 8003684:	e002      	b.n	800368c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003686:	69fb      	ldr	r3, [r7, #28]
 8003688:	617b      	str	r3, [r7, #20]
      break;
 800368a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800368c:	4b13      	ldr	r3, [pc, #76]	; (80036dc <HAL_RCC_GetSysClockFreq+0x108>)
 800368e:	68db      	ldr	r3, [r3, #12]
 8003690:	091b      	lsrs	r3, r3, #4
 8003692:	f003 0307 	and.w	r3, r3, #7
 8003696:	3301      	adds	r3, #1
 8003698:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800369a:	4b10      	ldr	r3, [pc, #64]	; (80036dc <HAL_RCC_GetSysClockFreq+0x108>)
 800369c:	68db      	ldr	r3, [r3, #12]
 800369e:	0a1b      	lsrs	r3, r3, #8
 80036a0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80036a4:	697a      	ldr	r2, [r7, #20]
 80036a6:	fb03 f202 	mul.w	r2, r3, r2
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80036b0:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80036b2:	4b0a      	ldr	r3, [pc, #40]	; (80036dc <HAL_RCC_GetSysClockFreq+0x108>)
 80036b4:	68db      	ldr	r3, [r3, #12]
 80036b6:	0e5b      	lsrs	r3, r3, #25
 80036b8:	f003 0303 	and.w	r3, r3, #3
 80036bc:	3301      	adds	r3, #1
 80036be:	005b      	lsls	r3, r3, #1
 80036c0:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80036c2:	697a      	ldr	r2, [r7, #20]
 80036c4:	683b      	ldr	r3, [r7, #0]
 80036c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80036ca:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80036cc:	69bb      	ldr	r3, [r7, #24]
}
 80036ce:	4618      	mov	r0, r3
 80036d0:	3724      	adds	r7, #36	; 0x24
 80036d2:	46bd      	mov	sp, r7
 80036d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d8:	4770      	bx	lr
 80036da:	bf00      	nop
 80036dc:	40021000 	.word	0x40021000
 80036e0:	080069bc 	.word	0x080069bc
 80036e4:	00f42400 	.word	0x00f42400
 80036e8:	007a1200 	.word	0x007a1200

080036ec <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80036ec:	b480      	push	{r7}
 80036ee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80036f0:	4b03      	ldr	r3, [pc, #12]	; (8003700 <HAL_RCC_GetHCLKFreq+0x14>)
 80036f2:	681b      	ldr	r3, [r3, #0]
}
 80036f4:	4618      	mov	r0, r3
 80036f6:	46bd      	mov	sp, r7
 80036f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036fc:	4770      	bx	lr
 80036fe:	bf00      	nop
 8003700:	20000000 	.word	0x20000000

08003704 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003704:	b580      	push	{r7, lr}
 8003706:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003708:	f7ff fff0 	bl	80036ec <HAL_RCC_GetHCLKFreq>
 800370c:	4602      	mov	r2, r0
 800370e:	4b06      	ldr	r3, [pc, #24]	; (8003728 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003710:	689b      	ldr	r3, [r3, #8]
 8003712:	0a1b      	lsrs	r3, r3, #8
 8003714:	f003 0307 	and.w	r3, r3, #7
 8003718:	4904      	ldr	r1, [pc, #16]	; (800372c <HAL_RCC_GetPCLK1Freq+0x28>)
 800371a:	5ccb      	ldrb	r3, [r1, r3]
 800371c:	f003 031f 	and.w	r3, r3, #31
 8003720:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003724:	4618      	mov	r0, r3
 8003726:	bd80      	pop	{r7, pc}
 8003728:	40021000 	.word	0x40021000
 800372c:	080069b4 	.word	0x080069b4

08003730 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003730:	b580      	push	{r7, lr}
 8003732:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003734:	f7ff ffda 	bl	80036ec <HAL_RCC_GetHCLKFreq>
 8003738:	4602      	mov	r2, r0
 800373a:	4b06      	ldr	r3, [pc, #24]	; (8003754 <HAL_RCC_GetPCLK2Freq+0x24>)
 800373c:	689b      	ldr	r3, [r3, #8]
 800373e:	0adb      	lsrs	r3, r3, #11
 8003740:	f003 0307 	and.w	r3, r3, #7
 8003744:	4904      	ldr	r1, [pc, #16]	; (8003758 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003746:	5ccb      	ldrb	r3, [r1, r3]
 8003748:	f003 031f 	and.w	r3, r3, #31
 800374c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003750:	4618      	mov	r0, r3
 8003752:	bd80      	pop	{r7, pc}
 8003754:	40021000 	.word	0x40021000
 8003758:	080069b4 	.word	0x080069b4

0800375c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800375c:	b580      	push	{r7, lr}
 800375e:	b086      	sub	sp, #24
 8003760:	af00      	add	r7, sp, #0
 8003762:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003764:	2300      	movs	r3, #0
 8003766:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003768:	4b2a      	ldr	r3, [pc, #168]	; (8003814 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800376a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800376c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003770:	2b00      	cmp	r3, #0
 8003772:	d003      	beq.n	800377c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003774:	f7ff f9b6 	bl	8002ae4 <HAL_PWREx_GetVoltageRange>
 8003778:	6178      	str	r0, [r7, #20]
 800377a:	e014      	b.n	80037a6 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800377c:	4b25      	ldr	r3, [pc, #148]	; (8003814 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800377e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003780:	4a24      	ldr	r2, [pc, #144]	; (8003814 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003782:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003786:	6593      	str	r3, [r2, #88]	; 0x58
 8003788:	4b22      	ldr	r3, [pc, #136]	; (8003814 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800378a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800378c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003790:	60fb      	str	r3, [r7, #12]
 8003792:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003794:	f7ff f9a6 	bl	8002ae4 <HAL_PWREx_GetVoltageRange>
 8003798:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800379a:	4b1e      	ldr	r3, [pc, #120]	; (8003814 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800379c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800379e:	4a1d      	ldr	r2, [pc, #116]	; (8003814 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80037a0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80037a4:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80037a6:	697b      	ldr	r3, [r7, #20]
 80037a8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80037ac:	d10b      	bne.n	80037c6 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	2b80      	cmp	r3, #128	; 0x80
 80037b2:	d919      	bls.n	80037e8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	2ba0      	cmp	r3, #160	; 0xa0
 80037b8:	d902      	bls.n	80037c0 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80037ba:	2302      	movs	r3, #2
 80037bc:	613b      	str	r3, [r7, #16]
 80037be:	e013      	b.n	80037e8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80037c0:	2301      	movs	r3, #1
 80037c2:	613b      	str	r3, [r7, #16]
 80037c4:	e010      	b.n	80037e8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	2b80      	cmp	r3, #128	; 0x80
 80037ca:	d902      	bls.n	80037d2 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80037cc:	2303      	movs	r3, #3
 80037ce:	613b      	str	r3, [r7, #16]
 80037d0:	e00a      	b.n	80037e8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	2b80      	cmp	r3, #128	; 0x80
 80037d6:	d102      	bne.n	80037de <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80037d8:	2302      	movs	r3, #2
 80037da:	613b      	str	r3, [r7, #16]
 80037dc:	e004      	b.n	80037e8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	2b70      	cmp	r3, #112	; 0x70
 80037e2:	d101      	bne.n	80037e8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80037e4:	2301      	movs	r3, #1
 80037e6:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80037e8:	4b0b      	ldr	r3, [pc, #44]	; (8003818 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	f023 0207 	bic.w	r2, r3, #7
 80037f0:	4909      	ldr	r1, [pc, #36]	; (8003818 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80037f2:	693b      	ldr	r3, [r7, #16]
 80037f4:	4313      	orrs	r3, r2
 80037f6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80037f8:	4b07      	ldr	r3, [pc, #28]	; (8003818 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	f003 0307 	and.w	r3, r3, #7
 8003800:	693a      	ldr	r2, [r7, #16]
 8003802:	429a      	cmp	r2, r3
 8003804:	d001      	beq.n	800380a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8003806:	2301      	movs	r3, #1
 8003808:	e000      	b.n	800380c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800380a:	2300      	movs	r3, #0
}
 800380c:	4618      	mov	r0, r3
 800380e:	3718      	adds	r7, #24
 8003810:	46bd      	mov	sp, r7
 8003812:	bd80      	pop	{r7, pc}
 8003814:	40021000 	.word	0x40021000
 8003818:	40022000 	.word	0x40022000

0800381c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800381c:	b580      	push	{r7, lr}
 800381e:	b086      	sub	sp, #24
 8003820:	af00      	add	r7, sp, #0
 8003822:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003824:	2300      	movs	r3, #0
 8003826:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003828:	2300      	movs	r3, #0
 800382a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003834:	2b00      	cmp	r3, #0
 8003836:	d031      	beq.n	800389c <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800383c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003840:	d01a      	beq.n	8003878 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8003842:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003846:	d814      	bhi.n	8003872 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8003848:	2b00      	cmp	r3, #0
 800384a:	d009      	beq.n	8003860 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800384c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003850:	d10f      	bne.n	8003872 <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8003852:	4b5d      	ldr	r3, [pc, #372]	; (80039c8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003854:	68db      	ldr	r3, [r3, #12]
 8003856:	4a5c      	ldr	r2, [pc, #368]	; (80039c8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003858:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800385c:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800385e:	e00c      	b.n	800387a <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	3304      	adds	r3, #4
 8003864:	2100      	movs	r1, #0
 8003866:	4618      	mov	r0, r3
 8003868:	f000 f9de 	bl	8003c28 <RCCEx_PLLSAI1_Config>
 800386c:	4603      	mov	r3, r0
 800386e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003870:	e003      	b.n	800387a <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003872:	2301      	movs	r3, #1
 8003874:	74fb      	strb	r3, [r7, #19]
      break;
 8003876:	e000      	b.n	800387a <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8003878:	bf00      	nop
    }

    if(ret == HAL_OK)
 800387a:	7cfb      	ldrb	r3, [r7, #19]
 800387c:	2b00      	cmp	r3, #0
 800387e:	d10b      	bne.n	8003898 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003880:	4b51      	ldr	r3, [pc, #324]	; (80039c8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003882:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003886:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800388e:	494e      	ldr	r1, [pc, #312]	; (80039c8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003890:	4313      	orrs	r3, r2
 8003892:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003896:	e001      	b.n	800389c <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003898:	7cfb      	ldrb	r3, [r7, #19]
 800389a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	f000 809e 	beq.w	80039e6 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 80038aa:	2300      	movs	r3, #0
 80038ac:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80038ae:	4b46      	ldr	r3, [pc, #280]	; (80039c8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80038b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d101      	bne.n	80038be <HAL_RCCEx_PeriphCLKConfig+0xa2>
 80038ba:	2301      	movs	r3, #1
 80038bc:	e000      	b.n	80038c0 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 80038be:	2300      	movs	r3, #0
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d00d      	beq.n	80038e0 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80038c4:	4b40      	ldr	r3, [pc, #256]	; (80039c8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80038c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038c8:	4a3f      	ldr	r2, [pc, #252]	; (80039c8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80038ca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80038ce:	6593      	str	r3, [r2, #88]	; 0x58
 80038d0:	4b3d      	ldr	r3, [pc, #244]	; (80039c8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80038d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80038d8:	60bb      	str	r3, [r7, #8]
 80038da:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80038dc:	2301      	movs	r3, #1
 80038de:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80038e0:	4b3a      	ldr	r3, [pc, #232]	; (80039cc <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	4a39      	ldr	r2, [pc, #228]	; (80039cc <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80038e6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80038ea:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80038ec:	f7fd fddc 	bl	80014a8 <HAL_GetTick>
 80038f0:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80038f2:	e009      	b.n	8003908 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80038f4:	f7fd fdd8 	bl	80014a8 <HAL_GetTick>
 80038f8:	4602      	mov	r2, r0
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	1ad3      	subs	r3, r2, r3
 80038fe:	2b02      	cmp	r3, #2
 8003900:	d902      	bls.n	8003908 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8003902:	2303      	movs	r3, #3
 8003904:	74fb      	strb	r3, [r7, #19]
        break;
 8003906:	e005      	b.n	8003914 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003908:	4b30      	ldr	r3, [pc, #192]	; (80039cc <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003910:	2b00      	cmp	r3, #0
 8003912:	d0ef      	beq.n	80038f4 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8003914:	7cfb      	ldrb	r3, [r7, #19]
 8003916:	2b00      	cmp	r3, #0
 8003918:	d15a      	bne.n	80039d0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800391a:	4b2b      	ldr	r3, [pc, #172]	; (80039c8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800391c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003920:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003924:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003926:	697b      	ldr	r3, [r7, #20]
 8003928:	2b00      	cmp	r3, #0
 800392a:	d01e      	beq.n	800396a <HAL_RCCEx_PeriphCLKConfig+0x14e>
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003930:	697a      	ldr	r2, [r7, #20]
 8003932:	429a      	cmp	r2, r3
 8003934:	d019      	beq.n	800396a <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003936:	4b24      	ldr	r3, [pc, #144]	; (80039c8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003938:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800393c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003940:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003942:	4b21      	ldr	r3, [pc, #132]	; (80039c8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003944:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003948:	4a1f      	ldr	r2, [pc, #124]	; (80039c8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800394a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800394e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003952:	4b1d      	ldr	r3, [pc, #116]	; (80039c8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003954:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003958:	4a1b      	ldr	r2, [pc, #108]	; (80039c8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800395a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800395e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003962:	4a19      	ldr	r2, [pc, #100]	; (80039c8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003964:	697b      	ldr	r3, [r7, #20]
 8003966:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800396a:	697b      	ldr	r3, [r7, #20]
 800396c:	f003 0301 	and.w	r3, r3, #1
 8003970:	2b00      	cmp	r3, #0
 8003972:	d016      	beq.n	80039a2 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003974:	f7fd fd98 	bl	80014a8 <HAL_GetTick>
 8003978:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800397a:	e00b      	b.n	8003994 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800397c:	f7fd fd94 	bl	80014a8 <HAL_GetTick>
 8003980:	4602      	mov	r2, r0
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	1ad3      	subs	r3, r2, r3
 8003986:	f241 3288 	movw	r2, #5000	; 0x1388
 800398a:	4293      	cmp	r3, r2
 800398c:	d902      	bls.n	8003994 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 800398e:	2303      	movs	r3, #3
 8003990:	74fb      	strb	r3, [r7, #19]
            break;
 8003992:	e006      	b.n	80039a2 <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003994:	4b0c      	ldr	r3, [pc, #48]	; (80039c8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003996:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800399a:	f003 0302 	and.w	r3, r3, #2
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d0ec      	beq.n	800397c <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 80039a2:	7cfb      	ldrb	r3, [r7, #19]
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d10b      	bne.n	80039c0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80039a8:	4b07      	ldr	r3, [pc, #28]	; (80039c8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80039aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039ae:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80039b6:	4904      	ldr	r1, [pc, #16]	; (80039c8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80039b8:	4313      	orrs	r3, r2
 80039ba:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80039be:	e009      	b.n	80039d4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80039c0:	7cfb      	ldrb	r3, [r7, #19]
 80039c2:	74bb      	strb	r3, [r7, #18]
 80039c4:	e006      	b.n	80039d4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 80039c6:	bf00      	nop
 80039c8:	40021000 	.word	0x40021000
 80039cc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80039d0:	7cfb      	ldrb	r3, [r7, #19]
 80039d2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80039d4:	7c7b      	ldrb	r3, [r7, #17]
 80039d6:	2b01      	cmp	r3, #1
 80039d8:	d105      	bne.n	80039e6 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80039da:	4b8a      	ldr	r3, [pc, #552]	; (8003c04 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80039dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039de:	4a89      	ldr	r2, [pc, #548]	; (8003c04 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80039e0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80039e4:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	f003 0301 	and.w	r3, r3, #1
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d00a      	beq.n	8003a08 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80039f2:	4b84      	ldr	r3, [pc, #528]	; (8003c04 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80039f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039f8:	f023 0203 	bic.w	r2, r3, #3
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	6a1b      	ldr	r3, [r3, #32]
 8003a00:	4980      	ldr	r1, [pc, #512]	; (8003c04 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003a02:	4313      	orrs	r3, r2
 8003a04:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	f003 0302 	and.w	r3, r3, #2
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d00a      	beq.n	8003a2a <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003a14:	4b7b      	ldr	r3, [pc, #492]	; (8003c04 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003a16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a1a:	f023 020c 	bic.w	r2, r3, #12
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a22:	4978      	ldr	r1, [pc, #480]	; (8003c04 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003a24:	4313      	orrs	r3, r2
 8003a26:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	f003 0320 	and.w	r3, r3, #32
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d00a      	beq.n	8003a4c <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003a36:	4b73      	ldr	r3, [pc, #460]	; (8003c04 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003a38:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a3c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a44:	496f      	ldr	r1, [pc, #444]	; (8003c04 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003a46:	4313      	orrs	r3, r2
 8003a48:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d00a      	beq.n	8003a6e <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003a58:	4b6a      	ldr	r3, [pc, #424]	; (8003c04 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003a5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a5e:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a66:	4967      	ldr	r1, [pc, #412]	; (8003c04 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003a68:	4313      	orrs	r3, r2
 8003a6a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d00a      	beq.n	8003a90 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003a7a:	4b62      	ldr	r3, [pc, #392]	; (8003c04 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003a7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a80:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a88:	495e      	ldr	r1, [pc, #376]	; (8003c04 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003a8a:	4313      	orrs	r3, r2
 8003a8c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d00a      	beq.n	8003ab2 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003a9c:	4b59      	ldr	r3, [pc, #356]	; (8003c04 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003a9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003aa2:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003aaa:	4956      	ldr	r1, [pc, #344]	; (8003c04 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003aac:	4313      	orrs	r3, r2
 8003aae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d00a      	beq.n	8003ad4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003abe:	4b51      	ldr	r3, [pc, #324]	; (8003c04 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003ac0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ac4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003acc:	494d      	ldr	r1, [pc, #308]	; (8003c04 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003ace:	4313      	orrs	r3, r2
 8003ad0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d028      	beq.n	8003b32 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003ae0:	4b48      	ldr	r3, [pc, #288]	; (8003c04 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003ae2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ae6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003aee:	4945      	ldr	r1, [pc, #276]	; (8003c04 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003af0:	4313      	orrs	r3, r2
 8003af2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003afa:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003afe:	d106      	bne.n	8003b0e <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003b00:	4b40      	ldr	r3, [pc, #256]	; (8003c04 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003b02:	68db      	ldr	r3, [r3, #12]
 8003b04:	4a3f      	ldr	r2, [pc, #252]	; (8003c04 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003b06:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003b0a:	60d3      	str	r3, [r2, #12]
 8003b0c:	e011      	b.n	8003b32 <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b12:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003b16:	d10c      	bne.n	8003b32 <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	3304      	adds	r3, #4
 8003b1c:	2101      	movs	r1, #1
 8003b1e:	4618      	mov	r0, r3
 8003b20:	f000 f882 	bl	8003c28 <RCCEx_PLLSAI1_Config>
 8003b24:	4603      	mov	r3, r0
 8003b26:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003b28:	7cfb      	ldrb	r3, [r7, #19]
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d001      	beq.n	8003b32 <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 8003b2e:	7cfb      	ldrb	r3, [r7, #19]
 8003b30:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d028      	beq.n	8003b90 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003b3e:	4b31      	ldr	r3, [pc, #196]	; (8003c04 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003b40:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b44:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b4c:	492d      	ldr	r1, [pc, #180]	; (8003c04 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003b4e:	4313      	orrs	r3, r2
 8003b50:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b58:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003b5c:	d106      	bne.n	8003b6c <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003b5e:	4b29      	ldr	r3, [pc, #164]	; (8003c04 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003b60:	68db      	ldr	r3, [r3, #12]
 8003b62:	4a28      	ldr	r2, [pc, #160]	; (8003c04 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003b64:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003b68:	60d3      	str	r3, [r2, #12]
 8003b6a:	e011      	b.n	8003b90 <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b70:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003b74:	d10c      	bne.n	8003b90 <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	3304      	adds	r3, #4
 8003b7a:	2101      	movs	r1, #1
 8003b7c:	4618      	mov	r0, r3
 8003b7e:	f000 f853 	bl	8003c28 <RCCEx_PLLSAI1_Config>
 8003b82:	4603      	mov	r3, r0
 8003b84:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003b86:	7cfb      	ldrb	r3, [r7, #19]
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d001      	beq.n	8003b90 <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 8003b8c:	7cfb      	ldrb	r3, [r7, #19]
 8003b8e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d01c      	beq.n	8003bd6 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003b9c:	4b19      	ldr	r3, [pc, #100]	; (8003c04 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003b9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ba2:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003baa:	4916      	ldr	r1, [pc, #88]	; (8003c04 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003bac:	4313      	orrs	r3, r2
 8003bae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003bb6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003bba:	d10c      	bne.n	8003bd6 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	3304      	adds	r3, #4
 8003bc0:	2102      	movs	r1, #2
 8003bc2:	4618      	mov	r0, r3
 8003bc4:	f000 f830 	bl	8003c28 <RCCEx_PLLSAI1_Config>
 8003bc8:	4603      	mov	r3, r0
 8003bca:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003bcc:	7cfb      	ldrb	r3, [r7, #19]
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d001      	beq.n	8003bd6 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 8003bd2:	7cfb      	ldrb	r3, [r7, #19]
 8003bd4:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d00a      	beq.n	8003bf8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003be2:	4b08      	ldr	r3, [pc, #32]	; (8003c04 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003be4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003be8:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003bf0:	4904      	ldr	r1, [pc, #16]	; (8003c04 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003bf2:	4313      	orrs	r3, r2
 8003bf4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003bf8:	7cbb      	ldrb	r3, [r7, #18]
}
 8003bfa:	4618      	mov	r0, r3
 8003bfc:	3718      	adds	r7, #24
 8003bfe:	46bd      	mov	sp, r7
 8003c00:	bd80      	pop	{r7, pc}
 8003c02:	bf00      	nop
 8003c04:	40021000 	.word	0x40021000

08003c08 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8003c08:	b480      	push	{r7}
 8003c0a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8003c0c:	4b05      	ldr	r3, [pc, #20]	; (8003c24 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	4a04      	ldr	r2, [pc, #16]	; (8003c24 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8003c12:	f043 0304 	orr.w	r3, r3, #4
 8003c16:	6013      	str	r3, [r2, #0]
}
 8003c18:	bf00      	nop
 8003c1a:	46bd      	mov	sp, r7
 8003c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c20:	4770      	bx	lr
 8003c22:	bf00      	nop
 8003c24:	40021000 	.word	0x40021000

08003c28 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003c28:	b580      	push	{r7, lr}
 8003c2a:	b084      	sub	sp, #16
 8003c2c:	af00      	add	r7, sp, #0
 8003c2e:	6078      	str	r0, [r7, #4]
 8003c30:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003c32:	2300      	movs	r3, #0
 8003c34:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003c36:	4b74      	ldr	r3, [pc, #464]	; (8003e08 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003c38:	68db      	ldr	r3, [r3, #12]
 8003c3a:	f003 0303 	and.w	r3, r3, #3
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d018      	beq.n	8003c74 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003c42:	4b71      	ldr	r3, [pc, #452]	; (8003e08 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003c44:	68db      	ldr	r3, [r3, #12]
 8003c46:	f003 0203 	and.w	r2, r3, #3
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	429a      	cmp	r2, r3
 8003c50:	d10d      	bne.n	8003c6e <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
       ||
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d009      	beq.n	8003c6e <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8003c5a:	4b6b      	ldr	r3, [pc, #428]	; (8003e08 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003c5c:	68db      	ldr	r3, [r3, #12]
 8003c5e:	091b      	lsrs	r3, r3, #4
 8003c60:	f003 0307 	and.w	r3, r3, #7
 8003c64:	1c5a      	adds	r2, r3, #1
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	685b      	ldr	r3, [r3, #4]
       ||
 8003c6a:	429a      	cmp	r2, r3
 8003c6c:	d047      	beq.n	8003cfe <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003c6e:	2301      	movs	r3, #1
 8003c70:	73fb      	strb	r3, [r7, #15]
 8003c72:	e044      	b.n	8003cfe <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	2b03      	cmp	r3, #3
 8003c7a:	d018      	beq.n	8003cae <RCCEx_PLLSAI1_Config+0x86>
 8003c7c:	2b03      	cmp	r3, #3
 8003c7e:	d825      	bhi.n	8003ccc <RCCEx_PLLSAI1_Config+0xa4>
 8003c80:	2b01      	cmp	r3, #1
 8003c82:	d002      	beq.n	8003c8a <RCCEx_PLLSAI1_Config+0x62>
 8003c84:	2b02      	cmp	r3, #2
 8003c86:	d009      	beq.n	8003c9c <RCCEx_PLLSAI1_Config+0x74>
 8003c88:	e020      	b.n	8003ccc <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003c8a:	4b5f      	ldr	r3, [pc, #380]	; (8003e08 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	f003 0302 	and.w	r3, r3, #2
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d11d      	bne.n	8003cd2 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8003c96:	2301      	movs	r3, #1
 8003c98:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003c9a:	e01a      	b.n	8003cd2 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003c9c:	4b5a      	ldr	r3, [pc, #360]	; (8003e08 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d116      	bne.n	8003cd6 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8003ca8:	2301      	movs	r3, #1
 8003caa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003cac:	e013      	b.n	8003cd6 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003cae:	4b56      	ldr	r3, [pc, #344]	; (8003e08 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d10f      	bne.n	8003cda <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003cba:	4b53      	ldr	r3, [pc, #332]	; (8003e08 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d109      	bne.n	8003cda <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8003cc6:	2301      	movs	r3, #1
 8003cc8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003cca:	e006      	b.n	8003cda <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003ccc:	2301      	movs	r3, #1
 8003cce:	73fb      	strb	r3, [r7, #15]
      break;
 8003cd0:	e004      	b.n	8003cdc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003cd2:	bf00      	nop
 8003cd4:	e002      	b.n	8003cdc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003cd6:	bf00      	nop
 8003cd8:	e000      	b.n	8003cdc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003cda:	bf00      	nop
    }

    if(status == HAL_OK)
 8003cdc:	7bfb      	ldrb	r3, [r7, #15]
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d10d      	bne.n	8003cfe <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003ce2:	4b49      	ldr	r3, [pc, #292]	; (8003e08 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003ce4:	68db      	ldr	r3, [r3, #12]
 8003ce6:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	6819      	ldr	r1, [r3, #0]
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	685b      	ldr	r3, [r3, #4]
 8003cf2:	3b01      	subs	r3, #1
 8003cf4:	011b      	lsls	r3, r3, #4
 8003cf6:	430b      	orrs	r3, r1
 8003cf8:	4943      	ldr	r1, [pc, #268]	; (8003e08 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003cfa:	4313      	orrs	r3, r2
 8003cfc:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003cfe:	7bfb      	ldrb	r3, [r7, #15]
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d17c      	bne.n	8003dfe <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003d04:	4b40      	ldr	r3, [pc, #256]	; (8003e08 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	4a3f      	ldr	r2, [pc, #252]	; (8003e08 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003d0a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003d0e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003d10:	f7fd fbca 	bl	80014a8 <HAL_GetTick>
 8003d14:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003d16:	e009      	b.n	8003d2c <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003d18:	f7fd fbc6 	bl	80014a8 <HAL_GetTick>
 8003d1c:	4602      	mov	r2, r0
 8003d1e:	68bb      	ldr	r3, [r7, #8]
 8003d20:	1ad3      	subs	r3, r2, r3
 8003d22:	2b02      	cmp	r3, #2
 8003d24:	d902      	bls.n	8003d2c <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003d26:	2303      	movs	r3, #3
 8003d28:	73fb      	strb	r3, [r7, #15]
        break;
 8003d2a:	e005      	b.n	8003d38 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003d2c:	4b36      	ldr	r3, [pc, #216]	; (8003e08 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d1ef      	bne.n	8003d18 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003d38:	7bfb      	ldrb	r3, [r7, #15]
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d15f      	bne.n	8003dfe <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003d3e:	683b      	ldr	r3, [r7, #0]
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d110      	bne.n	8003d66 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003d44:	4b30      	ldr	r3, [pc, #192]	; (8003e08 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003d46:	691b      	ldr	r3, [r3, #16]
 8003d48:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8003d4c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003d50:	687a      	ldr	r2, [r7, #4]
 8003d52:	6892      	ldr	r2, [r2, #8]
 8003d54:	0211      	lsls	r1, r2, #8
 8003d56:	687a      	ldr	r2, [r7, #4]
 8003d58:	68d2      	ldr	r2, [r2, #12]
 8003d5a:	06d2      	lsls	r2, r2, #27
 8003d5c:	430a      	orrs	r2, r1
 8003d5e:	492a      	ldr	r1, [pc, #168]	; (8003e08 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003d60:	4313      	orrs	r3, r2
 8003d62:	610b      	str	r3, [r1, #16]
 8003d64:	e027      	b.n	8003db6 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003d66:	683b      	ldr	r3, [r7, #0]
 8003d68:	2b01      	cmp	r3, #1
 8003d6a:	d112      	bne.n	8003d92 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003d6c:	4b26      	ldr	r3, [pc, #152]	; (8003e08 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003d6e:	691b      	ldr	r3, [r3, #16]
 8003d70:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8003d74:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003d78:	687a      	ldr	r2, [r7, #4]
 8003d7a:	6892      	ldr	r2, [r2, #8]
 8003d7c:	0211      	lsls	r1, r2, #8
 8003d7e:	687a      	ldr	r2, [r7, #4]
 8003d80:	6912      	ldr	r2, [r2, #16]
 8003d82:	0852      	lsrs	r2, r2, #1
 8003d84:	3a01      	subs	r2, #1
 8003d86:	0552      	lsls	r2, r2, #21
 8003d88:	430a      	orrs	r2, r1
 8003d8a:	491f      	ldr	r1, [pc, #124]	; (8003e08 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003d8c:	4313      	orrs	r3, r2
 8003d8e:	610b      	str	r3, [r1, #16]
 8003d90:	e011      	b.n	8003db6 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003d92:	4b1d      	ldr	r3, [pc, #116]	; (8003e08 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003d94:	691b      	ldr	r3, [r3, #16]
 8003d96:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003d9a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003d9e:	687a      	ldr	r2, [r7, #4]
 8003da0:	6892      	ldr	r2, [r2, #8]
 8003da2:	0211      	lsls	r1, r2, #8
 8003da4:	687a      	ldr	r2, [r7, #4]
 8003da6:	6952      	ldr	r2, [r2, #20]
 8003da8:	0852      	lsrs	r2, r2, #1
 8003daa:	3a01      	subs	r2, #1
 8003dac:	0652      	lsls	r2, r2, #25
 8003dae:	430a      	orrs	r2, r1
 8003db0:	4915      	ldr	r1, [pc, #84]	; (8003e08 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003db2:	4313      	orrs	r3, r2
 8003db4:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003db6:	4b14      	ldr	r3, [pc, #80]	; (8003e08 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	4a13      	ldr	r2, [pc, #76]	; (8003e08 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003dbc:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003dc0:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003dc2:	f7fd fb71 	bl	80014a8 <HAL_GetTick>
 8003dc6:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003dc8:	e009      	b.n	8003dde <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003dca:	f7fd fb6d 	bl	80014a8 <HAL_GetTick>
 8003dce:	4602      	mov	r2, r0
 8003dd0:	68bb      	ldr	r3, [r7, #8]
 8003dd2:	1ad3      	subs	r3, r2, r3
 8003dd4:	2b02      	cmp	r3, #2
 8003dd6:	d902      	bls.n	8003dde <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8003dd8:	2303      	movs	r3, #3
 8003dda:	73fb      	strb	r3, [r7, #15]
          break;
 8003ddc:	e005      	b.n	8003dea <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003dde:	4b0a      	ldr	r3, [pc, #40]	; (8003e08 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d0ef      	beq.n	8003dca <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8003dea:	7bfb      	ldrb	r3, [r7, #15]
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d106      	bne.n	8003dfe <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003df0:	4b05      	ldr	r3, [pc, #20]	; (8003e08 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003df2:	691a      	ldr	r2, [r3, #16]
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	699b      	ldr	r3, [r3, #24]
 8003df8:	4903      	ldr	r1, [pc, #12]	; (8003e08 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003dfa:	4313      	orrs	r3, r2
 8003dfc:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003dfe:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e00:	4618      	mov	r0, r3
 8003e02:	3710      	adds	r7, #16
 8003e04:	46bd      	mov	sp, r7
 8003e06:	bd80      	pop	{r7, pc}
 8003e08:	40021000 	.word	0x40021000

08003e0c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003e0c:	b580      	push	{r7, lr}
 8003e0e:	b084      	sub	sp, #16
 8003e10:	af00      	add	r7, sp, #0
 8003e12:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d101      	bne.n	8003e1e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003e1a:	2301      	movs	r3, #1
 8003e1c:	e095      	b.n	8003f4a <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d108      	bne.n	8003e38 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	685b      	ldr	r3, [r3, #4]
 8003e2a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003e2e:	d009      	beq.n	8003e44 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	2200      	movs	r2, #0
 8003e34:	61da      	str	r2, [r3, #28]
 8003e36:	e005      	b.n	8003e44 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	2200      	movs	r2, #0
 8003e3c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	2200      	movs	r2, #0
 8003e42:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	2200      	movs	r2, #0
 8003e48:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003e50:	b2db      	uxtb	r3, r3
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d106      	bne.n	8003e64 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	2200      	movs	r2, #0
 8003e5a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003e5e:	6878      	ldr	r0, [r7, #4]
 8003e60:	f7fd f89e 	bl	8000fa0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	2202      	movs	r2, #2
 8003e68:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	681a      	ldr	r2, [r3, #0]
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003e7a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	68db      	ldr	r3, [r3, #12]
 8003e80:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003e84:	d902      	bls.n	8003e8c <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003e86:	2300      	movs	r3, #0
 8003e88:	60fb      	str	r3, [r7, #12]
 8003e8a:	e002      	b.n	8003e92 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003e8c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003e90:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	68db      	ldr	r3, [r3, #12]
 8003e96:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8003e9a:	d007      	beq.n	8003eac <HAL_SPI_Init+0xa0>
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	68db      	ldr	r3, [r3, #12]
 8003ea0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003ea4:	d002      	beq.n	8003eac <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	2200      	movs	r2, #0
 8003eaa:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	685b      	ldr	r3, [r3, #4]
 8003eb0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	689b      	ldr	r3, [r3, #8]
 8003eb8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003ebc:	431a      	orrs	r2, r3
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	691b      	ldr	r3, [r3, #16]
 8003ec2:	f003 0302 	and.w	r3, r3, #2
 8003ec6:	431a      	orrs	r2, r3
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	695b      	ldr	r3, [r3, #20]
 8003ecc:	f003 0301 	and.w	r3, r3, #1
 8003ed0:	431a      	orrs	r2, r3
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	699b      	ldr	r3, [r3, #24]
 8003ed6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003eda:	431a      	orrs	r2, r3
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	69db      	ldr	r3, [r3, #28]
 8003ee0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003ee4:	431a      	orrs	r2, r3
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	6a1b      	ldr	r3, [r3, #32]
 8003eea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003eee:	ea42 0103 	orr.w	r1, r2, r3
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ef6:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	430a      	orrs	r2, r1
 8003f00:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	699b      	ldr	r3, [r3, #24]
 8003f06:	0c1b      	lsrs	r3, r3, #16
 8003f08:	f003 0204 	and.w	r2, r3, #4
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f10:	f003 0310 	and.w	r3, r3, #16
 8003f14:	431a      	orrs	r2, r3
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f1a:	f003 0308 	and.w	r3, r3, #8
 8003f1e:	431a      	orrs	r2, r3
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	68db      	ldr	r3, [r3, #12]
 8003f24:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8003f28:	ea42 0103 	orr.w	r1, r2, r3
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	430a      	orrs	r2, r1
 8003f38:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	2200      	movs	r2, #0
 8003f3e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	2201      	movs	r2, #1
 8003f44:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8003f48:	2300      	movs	r3, #0
}
 8003f4a:	4618      	mov	r0, r3
 8003f4c:	3710      	adds	r7, #16
 8003f4e:	46bd      	mov	sp, r7
 8003f50:	bd80      	pop	{r7, pc}

08003f52 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003f52:	b580      	push	{r7, lr}
 8003f54:	b088      	sub	sp, #32
 8003f56:	af00      	add	r7, sp, #0
 8003f58:	60f8      	str	r0, [r7, #12]
 8003f5a:	60b9      	str	r1, [r7, #8]
 8003f5c:	603b      	str	r3, [r7, #0]
 8003f5e:	4613      	mov	r3, r2
 8003f60:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003f62:	2300      	movs	r3, #0
 8003f64:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003f6c:	2b01      	cmp	r3, #1
 8003f6e:	d101      	bne.n	8003f74 <HAL_SPI_Transmit+0x22>
 8003f70:	2302      	movs	r3, #2
 8003f72:	e158      	b.n	8004226 <HAL_SPI_Transmit+0x2d4>
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	2201      	movs	r2, #1
 8003f78:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003f7c:	f7fd fa94 	bl	80014a8 <HAL_GetTick>
 8003f80:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8003f82:	88fb      	ldrh	r3, [r7, #6]
 8003f84:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003f8c:	b2db      	uxtb	r3, r3
 8003f8e:	2b01      	cmp	r3, #1
 8003f90:	d002      	beq.n	8003f98 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8003f92:	2302      	movs	r3, #2
 8003f94:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003f96:	e13d      	b.n	8004214 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 8003f98:	68bb      	ldr	r3, [r7, #8]
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d002      	beq.n	8003fa4 <HAL_SPI_Transmit+0x52>
 8003f9e:	88fb      	ldrh	r3, [r7, #6]
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d102      	bne.n	8003faa <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003fa4:	2301      	movs	r3, #1
 8003fa6:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003fa8:	e134      	b.n	8004214 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	2203      	movs	r2, #3
 8003fae:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	2200      	movs	r2, #0
 8003fb6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	68ba      	ldr	r2, [r7, #8]
 8003fbc:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	88fa      	ldrh	r2, [r7, #6]
 8003fc2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	88fa      	ldrh	r2, [r7, #6]
 8003fc8:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	2200      	movs	r2, #0
 8003fce:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	2200      	movs	r2, #0
 8003fd4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	2200      	movs	r2, #0
 8003fdc:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	2200      	movs	r2, #0
 8003fe4:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	2200      	movs	r2, #0
 8003fea:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	689b      	ldr	r3, [r3, #8]
 8003ff0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003ff4:	d10f      	bne.n	8004016 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	681a      	ldr	r2, [r3, #0]
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004004:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	681a      	ldr	r2, [r3, #0]
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004014:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004020:	2b40      	cmp	r3, #64	; 0x40
 8004022:	d007      	beq.n	8004034 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	681a      	ldr	r2, [r3, #0]
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004032:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	68db      	ldr	r3, [r3, #12]
 8004038:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800403c:	d94b      	bls.n	80040d6 <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	685b      	ldr	r3, [r3, #4]
 8004042:	2b00      	cmp	r3, #0
 8004044:	d002      	beq.n	800404c <HAL_SPI_Transmit+0xfa>
 8004046:	8afb      	ldrh	r3, [r7, #22]
 8004048:	2b01      	cmp	r3, #1
 800404a:	d13e      	bne.n	80040ca <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004050:	881a      	ldrh	r2, [r3, #0]
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800405c:	1c9a      	adds	r2, r3, #2
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004066:	b29b      	uxth	r3, r3
 8004068:	3b01      	subs	r3, #1
 800406a:	b29a      	uxth	r2, r3
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004070:	e02b      	b.n	80040ca <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	689b      	ldr	r3, [r3, #8]
 8004078:	f003 0302 	and.w	r3, r3, #2
 800407c:	2b02      	cmp	r3, #2
 800407e:	d112      	bne.n	80040a6 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004084:	881a      	ldrh	r2, [r3, #0]
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004090:	1c9a      	adds	r2, r3, #2
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800409a:	b29b      	uxth	r3, r3
 800409c:	3b01      	subs	r3, #1
 800409e:	b29a      	uxth	r2, r3
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	87da      	strh	r2, [r3, #62]	; 0x3e
 80040a4:	e011      	b.n	80040ca <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80040a6:	f7fd f9ff 	bl	80014a8 <HAL_GetTick>
 80040aa:	4602      	mov	r2, r0
 80040ac:	69bb      	ldr	r3, [r7, #24]
 80040ae:	1ad3      	subs	r3, r2, r3
 80040b0:	683a      	ldr	r2, [r7, #0]
 80040b2:	429a      	cmp	r2, r3
 80040b4:	d803      	bhi.n	80040be <HAL_SPI_Transmit+0x16c>
 80040b6:	683b      	ldr	r3, [r7, #0]
 80040b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040bc:	d102      	bne.n	80040c4 <HAL_SPI_Transmit+0x172>
 80040be:	683b      	ldr	r3, [r7, #0]
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d102      	bne.n	80040ca <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 80040c4:	2303      	movs	r3, #3
 80040c6:	77fb      	strb	r3, [r7, #31]
          goto error;
 80040c8:	e0a4      	b.n	8004214 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80040ce:	b29b      	uxth	r3, r3
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d1ce      	bne.n	8004072 <HAL_SPI_Transmit+0x120>
 80040d4:	e07c      	b.n	80041d0 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	685b      	ldr	r3, [r3, #4]
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d002      	beq.n	80040e4 <HAL_SPI_Transmit+0x192>
 80040de:	8afb      	ldrh	r3, [r7, #22]
 80040e0:	2b01      	cmp	r3, #1
 80040e2:	d170      	bne.n	80041c6 <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80040e8:	b29b      	uxth	r3, r3
 80040ea:	2b01      	cmp	r3, #1
 80040ec:	d912      	bls.n	8004114 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040f2:	881a      	ldrh	r2, [r3, #0]
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040fe:	1c9a      	adds	r2, r3, #2
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004108:	b29b      	uxth	r3, r3
 800410a:	3b02      	subs	r3, #2
 800410c:	b29a      	uxth	r2, r3
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004112:	e058      	b.n	80041c6 <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	330c      	adds	r3, #12
 800411e:	7812      	ldrb	r2, [r2, #0]
 8004120:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004126:	1c5a      	adds	r2, r3, #1
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004130:	b29b      	uxth	r3, r3
 8004132:	3b01      	subs	r3, #1
 8004134:	b29a      	uxth	r2, r3
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 800413a:	e044      	b.n	80041c6 <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	689b      	ldr	r3, [r3, #8]
 8004142:	f003 0302 	and.w	r3, r3, #2
 8004146:	2b02      	cmp	r3, #2
 8004148:	d12b      	bne.n	80041a2 <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800414e:	b29b      	uxth	r3, r3
 8004150:	2b01      	cmp	r3, #1
 8004152:	d912      	bls.n	800417a <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004158:	881a      	ldrh	r2, [r3, #0]
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004164:	1c9a      	adds	r2, r3, #2
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800416e:	b29b      	uxth	r3, r3
 8004170:	3b02      	subs	r3, #2
 8004172:	b29a      	uxth	r2, r3
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004178:	e025      	b.n	80041c6 <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	330c      	adds	r3, #12
 8004184:	7812      	ldrb	r2, [r2, #0]
 8004186:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800418c:	1c5a      	adds	r2, r3, #1
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004196:	b29b      	uxth	r3, r3
 8004198:	3b01      	subs	r3, #1
 800419a:	b29a      	uxth	r2, r3
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	87da      	strh	r2, [r3, #62]	; 0x3e
 80041a0:	e011      	b.n	80041c6 <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80041a2:	f7fd f981 	bl	80014a8 <HAL_GetTick>
 80041a6:	4602      	mov	r2, r0
 80041a8:	69bb      	ldr	r3, [r7, #24]
 80041aa:	1ad3      	subs	r3, r2, r3
 80041ac:	683a      	ldr	r2, [r7, #0]
 80041ae:	429a      	cmp	r2, r3
 80041b0:	d803      	bhi.n	80041ba <HAL_SPI_Transmit+0x268>
 80041b2:	683b      	ldr	r3, [r7, #0]
 80041b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041b8:	d102      	bne.n	80041c0 <HAL_SPI_Transmit+0x26e>
 80041ba:	683b      	ldr	r3, [r7, #0]
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d102      	bne.n	80041c6 <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 80041c0:	2303      	movs	r3, #3
 80041c2:	77fb      	strb	r3, [r7, #31]
          goto error;
 80041c4:	e026      	b.n	8004214 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80041ca:	b29b      	uxth	r3, r3
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d1b5      	bne.n	800413c <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80041d0:	69ba      	ldr	r2, [r7, #24]
 80041d2:	6839      	ldr	r1, [r7, #0]
 80041d4:	68f8      	ldr	r0, [r7, #12]
 80041d6:	f000 f949 	bl	800446c <SPI_EndRxTxTransaction>
 80041da:	4603      	mov	r3, r0
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d002      	beq.n	80041e6 <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	2220      	movs	r2, #32
 80041e4:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	689b      	ldr	r3, [r3, #8]
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d10a      	bne.n	8004204 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80041ee:	2300      	movs	r3, #0
 80041f0:	613b      	str	r3, [r7, #16]
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	68db      	ldr	r3, [r3, #12]
 80041f8:	613b      	str	r3, [r7, #16]
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	689b      	ldr	r3, [r3, #8]
 8004200:	613b      	str	r3, [r7, #16]
 8004202:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004208:	2b00      	cmp	r3, #0
 800420a:	d002      	beq.n	8004212 <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 800420c:	2301      	movs	r3, #1
 800420e:	77fb      	strb	r3, [r7, #31]
 8004210:	e000      	b.n	8004214 <HAL_SPI_Transmit+0x2c2>
  }

error:
 8004212:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	2201      	movs	r2, #1
 8004218:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	2200      	movs	r2, #0
 8004220:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8004224:	7ffb      	ldrb	r3, [r7, #31]
}
 8004226:	4618      	mov	r0, r3
 8004228:	3720      	adds	r7, #32
 800422a:	46bd      	mov	sp, r7
 800422c:	bd80      	pop	{r7, pc}
	...

08004230 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004230:	b580      	push	{r7, lr}
 8004232:	b088      	sub	sp, #32
 8004234:	af00      	add	r7, sp, #0
 8004236:	60f8      	str	r0, [r7, #12]
 8004238:	60b9      	str	r1, [r7, #8]
 800423a:	603b      	str	r3, [r7, #0]
 800423c:	4613      	mov	r3, r2
 800423e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004240:	f7fd f932 	bl	80014a8 <HAL_GetTick>
 8004244:	4602      	mov	r2, r0
 8004246:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004248:	1a9b      	subs	r3, r3, r2
 800424a:	683a      	ldr	r2, [r7, #0]
 800424c:	4413      	add	r3, r2
 800424e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004250:	f7fd f92a 	bl	80014a8 <HAL_GetTick>
 8004254:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004256:	4b39      	ldr	r3, [pc, #228]	; (800433c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	015b      	lsls	r3, r3, #5
 800425c:	0d1b      	lsrs	r3, r3, #20
 800425e:	69fa      	ldr	r2, [r7, #28]
 8004260:	fb02 f303 	mul.w	r3, r2, r3
 8004264:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004266:	e054      	b.n	8004312 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004268:	683b      	ldr	r3, [r7, #0]
 800426a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800426e:	d050      	beq.n	8004312 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004270:	f7fd f91a 	bl	80014a8 <HAL_GetTick>
 8004274:	4602      	mov	r2, r0
 8004276:	69bb      	ldr	r3, [r7, #24]
 8004278:	1ad3      	subs	r3, r2, r3
 800427a:	69fa      	ldr	r2, [r7, #28]
 800427c:	429a      	cmp	r2, r3
 800427e:	d902      	bls.n	8004286 <SPI_WaitFlagStateUntilTimeout+0x56>
 8004280:	69fb      	ldr	r3, [r7, #28]
 8004282:	2b00      	cmp	r3, #0
 8004284:	d13d      	bne.n	8004302 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	685a      	ldr	r2, [r3, #4]
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004294:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	685b      	ldr	r3, [r3, #4]
 800429a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800429e:	d111      	bne.n	80042c4 <SPI_WaitFlagStateUntilTimeout+0x94>
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	689b      	ldr	r3, [r3, #8]
 80042a4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80042a8:	d004      	beq.n	80042b4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	689b      	ldr	r3, [r3, #8]
 80042ae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80042b2:	d107      	bne.n	80042c4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	681a      	ldr	r2, [r3, #0]
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80042c2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042c8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80042cc:	d10f      	bne.n	80042ee <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	681a      	ldr	r2, [r3, #0]
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80042dc:	601a      	str	r2, [r3, #0]
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	681a      	ldr	r2, [r3, #0]
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80042ec:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	2201      	movs	r2, #1
 80042f2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	2200      	movs	r2, #0
 80042fa:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80042fe:	2303      	movs	r3, #3
 8004300:	e017      	b.n	8004332 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004302:	697b      	ldr	r3, [r7, #20]
 8004304:	2b00      	cmp	r3, #0
 8004306:	d101      	bne.n	800430c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004308:	2300      	movs	r3, #0
 800430a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800430c:	697b      	ldr	r3, [r7, #20]
 800430e:	3b01      	subs	r3, #1
 8004310:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	689a      	ldr	r2, [r3, #8]
 8004318:	68bb      	ldr	r3, [r7, #8]
 800431a:	4013      	ands	r3, r2
 800431c:	68ba      	ldr	r2, [r7, #8]
 800431e:	429a      	cmp	r2, r3
 8004320:	bf0c      	ite	eq
 8004322:	2301      	moveq	r3, #1
 8004324:	2300      	movne	r3, #0
 8004326:	b2db      	uxtb	r3, r3
 8004328:	461a      	mov	r2, r3
 800432a:	79fb      	ldrb	r3, [r7, #7]
 800432c:	429a      	cmp	r2, r3
 800432e:	d19b      	bne.n	8004268 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004330:	2300      	movs	r3, #0
}
 8004332:	4618      	mov	r0, r3
 8004334:	3720      	adds	r7, #32
 8004336:	46bd      	mov	sp, r7
 8004338:	bd80      	pop	{r7, pc}
 800433a:	bf00      	nop
 800433c:	20000000 	.word	0x20000000

08004340 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004340:	b580      	push	{r7, lr}
 8004342:	b08a      	sub	sp, #40	; 0x28
 8004344:	af00      	add	r7, sp, #0
 8004346:	60f8      	str	r0, [r7, #12]
 8004348:	60b9      	str	r1, [r7, #8]
 800434a:	607a      	str	r2, [r7, #4]
 800434c:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800434e:	2300      	movs	r3, #0
 8004350:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8004352:	f7fd f8a9 	bl	80014a8 <HAL_GetTick>
 8004356:	4602      	mov	r2, r0
 8004358:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800435a:	1a9b      	subs	r3, r3, r2
 800435c:	683a      	ldr	r2, [r7, #0]
 800435e:	4413      	add	r3, r2
 8004360:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8004362:	f7fd f8a1 	bl	80014a8 <HAL_GetTick>
 8004366:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	330c      	adds	r3, #12
 800436e:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8004370:	4b3d      	ldr	r3, [pc, #244]	; (8004468 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8004372:	681a      	ldr	r2, [r3, #0]
 8004374:	4613      	mov	r3, r2
 8004376:	009b      	lsls	r3, r3, #2
 8004378:	4413      	add	r3, r2
 800437a:	00da      	lsls	r2, r3, #3
 800437c:	1ad3      	subs	r3, r2, r3
 800437e:	0d1b      	lsrs	r3, r3, #20
 8004380:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004382:	fb02 f303 	mul.w	r3, r2, r3
 8004386:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8004388:	e060      	b.n	800444c <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800438a:	68bb      	ldr	r3, [r7, #8]
 800438c:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8004390:	d107      	bne.n	80043a2 <SPI_WaitFifoStateUntilTimeout+0x62>
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	2b00      	cmp	r3, #0
 8004396:	d104      	bne.n	80043a2 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8004398:	69fb      	ldr	r3, [r7, #28]
 800439a:	781b      	ldrb	r3, [r3, #0]
 800439c:	b2db      	uxtb	r3, r3
 800439e:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80043a0:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 80043a2:	683b      	ldr	r3, [r7, #0]
 80043a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043a8:	d050      	beq.n	800444c <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80043aa:	f7fd f87d 	bl	80014a8 <HAL_GetTick>
 80043ae:	4602      	mov	r2, r0
 80043b0:	6a3b      	ldr	r3, [r7, #32]
 80043b2:	1ad3      	subs	r3, r2, r3
 80043b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80043b6:	429a      	cmp	r2, r3
 80043b8:	d902      	bls.n	80043c0 <SPI_WaitFifoStateUntilTimeout+0x80>
 80043ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d13d      	bne.n	800443c <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	685a      	ldr	r2, [r3, #4]
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80043ce:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	685b      	ldr	r3, [r3, #4]
 80043d4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80043d8:	d111      	bne.n	80043fe <SPI_WaitFifoStateUntilTimeout+0xbe>
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	689b      	ldr	r3, [r3, #8]
 80043de:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80043e2:	d004      	beq.n	80043ee <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	689b      	ldr	r3, [r3, #8]
 80043e8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80043ec:	d107      	bne.n	80043fe <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	681a      	ldr	r2, [r3, #0]
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80043fc:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004402:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004406:	d10f      	bne.n	8004428 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	681a      	ldr	r2, [r3, #0]
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004416:	601a      	str	r2, [r3, #0]
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	681a      	ldr	r2, [r3, #0]
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004426:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	2201      	movs	r2, #1
 800442c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	2200      	movs	r2, #0
 8004434:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8004438:	2303      	movs	r3, #3
 800443a:	e010      	b.n	800445e <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800443c:	69bb      	ldr	r3, [r7, #24]
 800443e:	2b00      	cmp	r3, #0
 8004440:	d101      	bne.n	8004446 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8004442:	2300      	movs	r3, #0
 8004444:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8004446:	69bb      	ldr	r3, [r7, #24]
 8004448:	3b01      	subs	r3, #1
 800444a:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	689a      	ldr	r2, [r3, #8]
 8004452:	68bb      	ldr	r3, [r7, #8]
 8004454:	4013      	ands	r3, r2
 8004456:	687a      	ldr	r2, [r7, #4]
 8004458:	429a      	cmp	r2, r3
 800445a:	d196      	bne.n	800438a <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 800445c:	2300      	movs	r3, #0
}
 800445e:	4618      	mov	r0, r3
 8004460:	3728      	adds	r7, #40	; 0x28
 8004462:	46bd      	mov	sp, r7
 8004464:	bd80      	pop	{r7, pc}
 8004466:	bf00      	nop
 8004468:	20000000 	.word	0x20000000

0800446c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800446c:	b580      	push	{r7, lr}
 800446e:	b086      	sub	sp, #24
 8004470:	af02      	add	r7, sp, #8
 8004472:	60f8      	str	r0, [r7, #12]
 8004474:	60b9      	str	r1, [r7, #8]
 8004476:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	9300      	str	r3, [sp, #0]
 800447c:	68bb      	ldr	r3, [r7, #8]
 800447e:	2200      	movs	r2, #0
 8004480:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8004484:	68f8      	ldr	r0, [r7, #12]
 8004486:	f7ff ff5b 	bl	8004340 <SPI_WaitFifoStateUntilTimeout>
 800448a:	4603      	mov	r3, r0
 800448c:	2b00      	cmp	r3, #0
 800448e:	d007      	beq.n	80044a0 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004494:	f043 0220 	orr.w	r2, r3, #32
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800449c:	2303      	movs	r3, #3
 800449e:	e027      	b.n	80044f0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	9300      	str	r3, [sp, #0]
 80044a4:	68bb      	ldr	r3, [r7, #8]
 80044a6:	2200      	movs	r2, #0
 80044a8:	2180      	movs	r1, #128	; 0x80
 80044aa:	68f8      	ldr	r0, [r7, #12]
 80044ac:	f7ff fec0 	bl	8004230 <SPI_WaitFlagStateUntilTimeout>
 80044b0:	4603      	mov	r3, r0
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d007      	beq.n	80044c6 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80044ba:	f043 0220 	orr.w	r2, r3, #32
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80044c2:	2303      	movs	r3, #3
 80044c4:	e014      	b.n	80044f0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	9300      	str	r3, [sp, #0]
 80044ca:	68bb      	ldr	r3, [r7, #8]
 80044cc:	2200      	movs	r2, #0
 80044ce:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80044d2:	68f8      	ldr	r0, [r7, #12]
 80044d4:	f7ff ff34 	bl	8004340 <SPI_WaitFifoStateUntilTimeout>
 80044d8:	4603      	mov	r3, r0
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d007      	beq.n	80044ee <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80044e2:	f043 0220 	orr.w	r2, r3, #32
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80044ea:	2303      	movs	r3, #3
 80044ec:	e000      	b.n	80044f0 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80044ee:	2300      	movs	r3, #0
}
 80044f0:	4618      	mov	r0, r3
 80044f2:	3710      	adds	r7, #16
 80044f4:	46bd      	mov	sp, r7
 80044f6:	bd80      	pop	{r7, pc}

080044f8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80044f8:	b580      	push	{r7, lr}
 80044fa:	b082      	sub	sp, #8
 80044fc:	af00      	add	r7, sp, #0
 80044fe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	2b00      	cmp	r3, #0
 8004504:	d101      	bne.n	800450a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004506:	2301      	movs	r3, #1
 8004508:	e040      	b.n	800458c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800450e:	2b00      	cmp	r3, #0
 8004510:	d106      	bne.n	8004520 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	2200      	movs	r2, #0
 8004516:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800451a:	6878      	ldr	r0, [r7, #4]
 800451c:	f7fc fde8 	bl	80010f0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	2224      	movs	r2, #36	; 0x24
 8004524:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	681a      	ldr	r2, [r3, #0]
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	f022 0201 	bic.w	r2, r2, #1
 8004534:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004536:	6878      	ldr	r0, [r7, #4]
 8004538:	f000 f82c 	bl	8004594 <UART_SetConfig>
 800453c:	4603      	mov	r3, r0
 800453e:	2b01      	cmp	r3, #1
 8004540:	d101      	bne.n	8004546 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004542:	2301      	movs	r3, #1
 8004544:	e022      	b.n	800458c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800454a:	2b00      	cmp	r3, #0
 800454c:	d002      	beq.n	8004554 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800454e:	6878      	ldr	r0, [r7, #4]
 8004550:	f000 fa4c 	bl	80049ec <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	685a      	ldr	r2, [r3, #4]
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004562:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	689a      	ldr	r2, [r3, #8]
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004572:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	681a      	ldr	r2, [r3, #0]
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	f042 0201 	orr.w	r2, r2, #1
 8004582:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004584:	6878      	ldr	r0, [r7, #4]
 8004586:	f000 fad3 	bl	8004b30 <UART_CheckIdleState>
 800458a:	4603      	mov	r3, r0
}
 800458c:	4618      	mov	r0, r3
 800458e:	3708      	adds	r7, #8
 8004590:	46bd      	mov	sp, r7
 8004592:	bd80      	pop	{r7, pc}

08004594 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004594:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004598:	b08a      	sub	sp, #40	; 0x28
 800459a:	af00      	add	r7, sp, #0
 800459c:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800459e:	2300      	movs	r3, #0
 80045a0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	689a      	ldr	r2, [r3, #8]
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	691b      	ldr	r3, [r3, #16]
 80045ac:	431a      	orrs	r2, r3
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	695b      	ldr	r3, [r3, #20]
 80045b2:	431a      	orrs	r2, r3
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	69db      	ldr	r3, [r3, #28]
 80045b8:	4313      	orrs	r3, r2
 80045ba:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	681a      	ldr	r2, [r3, #0]
 80045c2:	4bb4      	ldr	r3, [pc, #720]	; (8004894 <UART_SetConfig+0x300>)
 80045c4:	4013      	ands	r3, r2
 80045c6:	68fa      	ldr	r2, [r7, #12]
 80045c8:	6812      	ldr	r2, [r2, #0]
 80045ca:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80045cc:	430b      	orrs	r3, r1
 80045ce:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	685b      	ldr	r3, [r3, #4]
 80045d6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	68da      	ldr	r2, [r3, #12]
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	430a      	orrs	r2, r1
 80045e4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	699b      	ldr	r3, [r3, #24]
 80045ea:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	4aa9      	ldr	r2, [pc, #676]	; (8004898 <UART_SetConfig+0x304>)
 80045f2:	4293      	cmp	r3, r2
 80045f4:	d004      	beq.n	8004600 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	6a1b      	ldr	r3, [r3, #32]
 80045fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80045fc:	4313      	orrs	r3, r2
 80045fe:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	689b      	ldr	r3, [r3, #8]
 8004606:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004610:	430a      	orrs	r2, r1
 8004612:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	4aa0      	ldr	r2, [pc, #640]	; (800489c <UART_SetConfig+0x308>)
 800461a:	4293      	cmp	r3, r2
 800461c:	d126      	bne.n	800466c <UART_SetConfig+0xd8>
 800461e:	4ba0      	ldr	r3, [pc, #640]	; (80048a0 <UART_SetConfig+0x30c>)
 8004620:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004624:	f003 0303 	and.w	r3, r3, #3
 8004628:	2b03      	cmp	r3, #3
 800462a:	d81b      	bhi.n	8004664 <UART_SetConfig+0xd0>
 800462c:	a201      	add	r2, pc, #4	; (adr r2, 8004634 <UART_SetConfig+0xa0>)
 800462e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004632:	bf00      	nop
 8004634:	08004645 	.word	0x08004645
 8004638:	08004655 	.word	0x08004655
 800463c:	0800464d 	.word	0x0800464d
 8004640:	0800465d 	.word	0x0800465d
 8004644:	2301      	movs	r3, #1
 8004646:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800464a:	e080      	b.n	800474e <UART_SetConfig+0x1ba>
 800464c:	2302      	movs	r3, #2
 800464e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004652:	e07c      	b.n	800474e <UART_SetConfig+0x1ba>
 8004654:	2304      	movs	r3, #4
 8004656:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800465a:	e078      	b.n	800474e <UART_SetConfig+0x1ba>
 800465c:	2308      	movs	r3, #8
 800465e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004662:	e074      	b.n	800474e <UART_SetConfig+0x1ba>
 8004664:	2310      	movs	r3, #16
 8004666:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800466a:	e070      	b.n	800474e <UART_SetConfig+0x1ba>
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	4a8c      	ldr	r2, [pc, #560]	; (80048a4 <UART_SetConfig+0x310>)
 8004672:	4293      	cmp	r3, r2
 8004674:	d138      	bne.n	80046e8 <UART_SetConfig+0x154>
 8004676:	4b8a      	ldr	r3, [pc, #552]	; (80048a0 <UART_SetConfig+0x30c>)
 8004678:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800467c:	f003 030c 	and.w	r3, r3, #12
 8004680:	2b0c      	cmp	r3, #12
 8004682:	d82d      	bhi.n	80046e0 <UART_SetConfig+0x14c>
 8004684:	a201      	add	r2, pc, #4	; (adr r2, 800468c <UART_SetConfig+0xf8>)
 8004686:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800468a:	bf00      	nop
 800468c:	080046c1 	.word	0x080046c1
 8004690:	080046e1 	.word	0x080046e1
 8004694:	080046e1 	.word	0x080046e1
 8004698:	080046e1 	.word	0x080046e1
 800469c:	080046d1 	.word	0x080046d1
 80046a0:	080046e1 	.word	0x080046e1
 80046a4:	080046e1 	.word	0x080046e1
 80046a8:	080046e1 	.word	0x080046e1
 80046ac:	080046c9 	.word	0x080046c9
 80046b0:	080046e1 	.word	0x080046e1
 80046b4:	080046e1 	.word	0x080046e1
 80046b8:	080046e1 	.word	0x080046e1
 80046bc:	080046d9 	.word	0x080046d9
 80046c0:	2300      	movs	r3, #0
 80046c2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80046c6:	e042      	b.n	800474e <UART_SetConfig+0x1ba>
 80046c8:	2302      	movs	r3, #2
 80046ca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80046ce:	e03e      	b.n	800474e <UART_SetConfig+0x1ba>
 80046d0:	2304      	movs	r3, #4
 80046d2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80046d6:	e03a      	b.n	800474e <UART_SetConfig+0x1ba>
 80046d8:	2308      	movs	r3, #8
 80046da:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80046de:	e036      	b.n	800474e <UART_SetConfig+0x1ba>
 80046e0:	2310      	movs	r3, #16
 80046e2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80046e6:	e032      	b.n	800474e <UART_SetConfig+0x1ba>
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	4a6a      	ldr	r2, [pc, #424]	; (8004898 <UART_SetConfig+0x304>)
 80046ee:	4293      	cmp	r3, r2
 80046f0:	d12a      	bne.n	8004748 <UART_SetConfig+0x1b4>
 80046f2:	4b6b      	ldr	r3, [pc, #428]	; (80048a0 <UART_SetConfig+0x30c>)
 80046f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046f8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80046fc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004700:	d01a      	beq.n	8004738 <UART_SetConfig+0x1a4>
 8004702:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004706:	d81b      	bhi.n	8004740 <UART_SetConfig+0x1ac>
 8004708:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800470c:	d00c      	beq.n	8004728 <UART_SetConfig+0x194>
 800470e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004712:	d815      	bhi.n	8004740 <UART_SetConfig+0x1ac>
 8004714:	2b00      	cmp	r3, #0
 8004716:	d003      	beq.n	8004720 <UART_SetConfig+0x18c>
 8004718:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800471c:	d008      	beq.n	8004730 <UART_SetConfig+0x19c>
 800471e:	e00f      	b.n	8004740 <UART_SetConfig+0x1ac>
 8004720:	2300      	movs	r3, #0
 8004722:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004726:	e012      	b.n	800474e <UART_SetConfig+0x1ba>
 8004728:	2302      	movs	r3, #2
 800472a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800472e:	e00e      	b.n	800474e <UART_SetConfig+0x1ba>
 8004730:	2304      	movs	r3, #4
 8004732:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004736:	e00a      	b.n	800474e <UART_SetConfig+0x1ba>
 8004738:	2308      	movs	r3, #8
 800473a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800473e:	e006      	b.n	800474e <UART_SetConfig+0x1ba>
 8004740:	2310      	movs	r3, #16
 8004742:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004746:	e002      	b.n	800474e <UART_SetConfig+0x1ba>
 8004748:	2310      	movs	r3, #16
 800474a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	4a51      	ldr	r2, [pc, #324]	; (8004898 <UART_SetConfig+0x304>)
 8004754:	4293      	cmp	r3, r2
 8004756:	d17a      	bne.n	800484e <UART_SetConfig+0x2ba>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004758:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800475c:	2b08      	cmp	r3, #8
 800475e:	d824      	bhi.n	80047aa <UART_SetConfig+0x216>
 8004760:	a201      	add	r2, pc, #4	; (adr r2, 8004768 <UART_SetConfig+0x1d4>)
 8004762:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004766:	bf00      	nop
 8004768:	0800478d 	.word	0x0800478d
 800476c:	080047ab 	.word	0x080047ab
 8004770:	08004795 	.word	0x08004795
 8004774:	080047ab 	.word	0x080047ab
 8004778:	0800479b 	.word	0x0800479b
 800477c:	080047ab 	.word	0x080047ab
 8004780:	080047ab 	.word	0x080047ab
 8004784:	080047ab 	.word	0x080047ab
 8004788:	080047a3 	.word	0x080047a3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800478c:	f7fe ffba 	bl	8003704 <HAL_RCC_GetPCLK1Freq>
 8004790:	61f8      	str	r0, [r7, #28]
        break;
 8004792:	e010      	b.n	80047b6 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004794:	4b44      	ldr	r3, [pc, #272]	; (80048a8 <UART_SetConfig+0x314>)
 8004796:	61fb      	str	r3, [r7, #28]
        break;
 8004798:	e00d      	b.n	80047b6 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800479a:	f7fe ff1b 	bl	80035d4 <HAL_RCC_GetSysClockFreq>
 800479e:	61f8      	str	r0, [r7, #28]
        break;
 80047a0:	e009      	b.n	80047b6 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80047a2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80047a6:	61fb      	str	r3, [r7, #28]
        break;
 80047a8:	e005      	b.n	80047b6 <UART_SetConfig+0x222>
      default:
        pclk = 0U;
 80047aa:	2300      	movs	r3, #0
 80047ac:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80047ae:	2301      	movs	r3, #1
 80047b0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80047b4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80047b6:	69fb      	ldr	r3, [r7, #28]
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	f000 8107 	beq.w	80049cc <UART_SetConfig+0x438>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	685a      	ldr	r2, [r3, #4]
 80047c2:	4613      	mov	r3, r2
 80047c4:	005b      	lsls	r3, r3, #1
 80047c6:	4413      	add	r3, r2
 80047c8:	69fa      	ldr	r2, [r7, #28]
 80047ca:	429a      	cmp	r2, r3
 80047cc:	d305      	bcc.n	80047da <UART_SetConfig+0x246>
          (pclk > (4096U * huart->Init.BaudRate)))
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	685b      	ldr	r3, [r3, #4]
 80047d2:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80047d4:	69fa      	ldr	r2, [r7, #28]
 80047d6:	429a      	cmp	r2, r3
 80047d8:	d903      	bls.n	80047e2 <UART_SetConfig+0x24e>
      {
        ret = HAL_ERROR;
 80047da:	2301      	movs	r3, #1
 80047dc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80047e0:	e0f4      	b.n	80049cc <UART_SetConfig+0x438>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80047e2:	69fb      	ldr	r3, [r7, #28]
 80047e4:	2200      	movs	r2, #0
 80047e6:	461c      	mov	r4, r3
 80047e8:	4615      	mov	r5, r2
 80047ea:	f04f 0200 	mov.w	r2, #0
 80047ee:	f04f 0300 	mov.w	r3, #0
 80047f2:	022b      	lsls	r3, r5, #8
 80047f4:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80047f8:	0222      	lsls	r2, r4, #8
 80047fa:	68f9      	ldr	r1, [r7, #12]
 80047fc:	6849      	ldr	r1, [r1, #4]
 80047fe:	0849      	lsrs	r1, r1, #1
 8004800:	2000      	movs	r0, #0
 8004802:	4688      	mov	r8, r1
 8004804:	4681      	mov	r9, r0
 8004806:	eb12 0a08 	adds.w	sl, r2, r8
 800480a:	eb43 0b09 	adc.w	fp, r3, r9
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	685b      	ldr	r3, [r3, #4]
 8004812:	2200      	movs	r2, #0
 8004814:	603b      	str	r3, [r7, #0]
 8004816:	607a      	str	r2, [r7, #4]
 8004818:	e9d7 2300 	ldrd	r2, r3, [r7]
 800481c:	4650      	mov	r0, sl
 800481e:	4659      	mov	r1, fp
 8004820:	f7fb fd26 	bl	8000270 <__aeabi_uldivmod>
 8004824:	4602      	mov	r2, r0
 8004826:	460b      	mov	r3, r1
 8004828:	4613      	mov	r3, r2
 800482a:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800482c:	69bb      	ldr	r3, [r7, #24]
 800482e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004832:	d308      	bcc.n	8004846 <UART_SetConfig+0x2b2>
 8004834:	69bb      	ldr	r3, [r7, #24]
 8004836:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800483a:	d204      	bcs.n	8004846 <UART_SetConfig+0x2b2>
        {
          huart->Instance->BRR = usartdiv;
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	69ba      	ldr	r2, [r7, #24]
 8004842:	60da      	str	r2, [r3, #12]
 8004844:	e0c2      	b.n	80049cc <UART_SetConfig+0x438>
        }
        else
        {
          ret = HAL_ERROR;
 8004846:	2301      	movs	r3, #1
 8004848:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800484c:	e0be      	b.n	80049cc <UART_SetConfig+0x438>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	69db      	ldr	r3, [r3, #28]
 8004852:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004856:	d16a      	bne.n	800492e <UART_SetConfig+0x39a>
  {
    switch (clocksource)
 8004858:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800485c:	2b08      	cmp	r3, #8
 800485e:	d834      	bhi.n	80048ca <UART_SetConfig+0x336>
 8004860:	a201      	add	r2, pc, #4	; (adr r2, 8004868 <UART_SetConfig+0x2d4>)
 8004862:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004866:	bf00      	nop
 8004868:	0800488d 	.word	0x0800488d
 800486c:	080048ad 	.word	0x080048ad
 8004870:	080048b5 	.word	0x080048b5
 8004874:	080048cb 	.word	0x080048cb
 8004878:	080048bb 	.word	0x080048bb
 800487c:	080048cb 	.word	0x080048cb
 8004880:	080048cb 	.word	0x080048cb
 8004884:	080048cb 	.word	0x080048cb
 8004888:	080048c3 	.word	0x080048c3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800488c:	f7fe ff3a 	bl	8003704 <HAL_RCC_GetPCLK1Freq>
 8004890:	61f8      	str	r0, [r7, #28]
        break;
 8004892:	e020      	b.n	80048d6 <UART_SetConfig+0x342>
 8004894:	efff69f3 	.word	0xefff69f3
 8004898:	40008000 	.word	0x40008000
 800489c:	40013800 	.word	0x40013800
 80048a0:	40021000 	.word	0x40021000
 80048a4:	40004400 	.word	0x40004400
 80048a8:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80048ac:	f7fe ff40 	bl	8003730 <HAL_RCC_GetPCLK2Freq>
 80048b0:	61f8      	str	r0, [r7, #28]
        break;
 80048b2:	e010      	b.n	80048d6 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80048b4:	4b4c      	ldr	r3, [pc, #304]	; (80049e8 <UART_SetConfig+0x454>)
 80048b6:	61fb      	str	r3, [r7, #28]
        break;
 80048b8:	e00d      	b.n	80048d6 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80048ba:	f7fe fe8b 	bl	80035d4 <HAL_RCC_GetSysClockFreq>
 80048be:	61f8      	str	r0, [r7, #28]
        break;
 80048c0:	e009      	b.n	80048d6 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80048c2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80048c6:	61fb      	str	r3, [r7, #28]
        break;
 80048c8:	e005      	b.n	80048d6 <UART_SetConfig+0x342>
      default:
        pclk = 0U;
 80048ca:	2300      	movs	r3, #0
 80048cc:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80048ce:	2301      	movs	r3, #1
 80048d0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80048d4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80048d6:	69fb      	ldr	r3, [r7, #28]
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d077      	beq.n	80049cc <UART_SetConfig+0x438>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80048dc:	69fb      	ldr	r3, [r7, #28]
 80048de:	005a      	lsls	r2, r3, #1
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	685b      	ldr	r3, [r3, #4]
 80048e4:	085b      	lsrs	r3, r3, #1
 80048e6:	441a      	add	r2, r3
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	685b      	ldr	r3, [r3, #4]
 80048ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80048f0:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80048f2:	69bb      	ldr	r3, [r7, #24]
 80048f4:	2b0f      	cmp	r3, #15
 80048f6:	d916      	bls.n	8004926 <UART_SetConfig+0x392>
 80048f8:	69bb      	ldr	r3, [r7, #24]
 80048fa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80048fe:	d212      	bcs.n	8004926 <UART_SetConfig+0x392>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004900:	69bb      	ldr	r3, [r7, #24]
 8004902:	b29b      	uxth	r3, r3
 8004904:	f023 030f 	bic.w	r3, r3, #15
 8004908:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800490a:	69bb      	ldr	r3, [r7, #24]
 800490c:	085b      	lsrs	r3, r3, #1
 800490e:	b29b      	uxth	r3, r3
 8004910:	f003 0307 	and.w	r3, r3, #7
 8004914:	b29a      	uxth	r2, r3
 8004916:	8afb      	ldrh	r3, [r7, #22]
 8004918:	4313      	orrs	r3, r2
 800491a:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	8afa      	ldrh	r2, [r7, #22]
 8004922:	60da      	str	r2, [r3, #12]
 8004924:	e052      	b.n	80049cc <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 8004926:	2301      	movs	r3, #1
 8004928:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800492c:	e04e      	b.n	80049cc <UART_SetConfig+0x438>
      }
    }
  }
  else
  {
    switch (clocksource)
 800492e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004932:	2b08      	cmp	r3, #8
 8004934:	d827      	bhi.n	8004986 <UART_SetConfig+0x3f2>
 8004936:	a201      	add	r2, pc, #4	; (adr r2, 800493c <UART_SetConfig+0x3a8>)
 8004938:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800493c:	08004961 	.word	0x08004961
 8004940:	08004969 	.word	0x08004969
 8004944:	08004971 	.word	0x08004971
 8004948:	08004987 	.word	0x08004987
 800494c:	08004977 	.word	0x08004977
 8004950:	08004987 	.word	0x08004987
 8004954:	08004987 	.word	0x08004987
 8004958:	08004987 	.word	0x08004987
 800495c:	0800497f 	.word	0x0800497f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004960:	f7fe fed0 	bl	8003704 <HAL_RCC_GetPCLK1Freq>
 8004964:	61f8      	str	r0, [r7, #28]
        break;
 8004966:	e014      	b.n	8004992 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004968:	f7fe fee2 	bl	8003730 <HAL_RCC_GetPCLK2Freq>
 800496c:	61f8      	str	r0, [r7, #28]
        break;
 800496e:	e010      	b.n	8004992 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004970:	4b1d      	ldr	r3, [pc, #116]	; (80049e8 <UART_SetConfig+0x454>)
 8004972:	61fb      	str	r3, [r7, #28]
        break;
 8004974:	e00d      	b.n	8004992 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004976:	f7fe fe2d 	bl	80035d4 <HAL_RCC_GetSysClockFreq>
 800497a:	61f8      	str	r0, [r7, #28]
        break;
 800497c:	e009      	b.n	8004992 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800497e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004982:	61fb      	str	r3, [r7, #28]
        break;
 8004984:	e005      	b.n	8004992 <UART_SetConfig+0x3fe>
      default:
        pclk = 0U;
 8004986:	2300      	movs	r3, #0
 8004988:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800498a:	2301      	movs	r3, #1
 800498c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004990:	bf00      	nop
    }

    if (pclk != 0U)
 8004992:	69fb      	ldr	r3, [r7, #28]
 8004994:	2b00      	cmp	r3, #0
 8004996:	d019      	beq.n	80049cc <UART_SetConfig+0x438>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	685b      	ldr	r3, [r3, #4]
 800499c:	085a      	lsrs	r2, r3, #1
 800499e:	69fb      	ldr	r3, [r7, #28]
 80049a0:	441a      	add	r2, r3
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	685b      	ldr	r3, [r3, #4]
 80049a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80049aa:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80049ac:	69bb      	ldr	r3, [r7, #24]
 80049ae:	2b0f      	cmp	r3, #15
 80049b0:	d909      	bls.n	80049c6 <UART_SetConfig+0x432>
 80049b2:	69bb      	ldr	r3, [r7, #24]
 80049b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80049b8:	d205      	bcs.n	80049c6 <UART_SetConfig+0x432>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80049ba:	69bb      	ldr	r3, [r7, #24]
 80049bc:	b29a      	uxth	r2, r3
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	60da      	str	r2, [r3, #12]
 80049c4:	e002      	b.n	80049cc <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 80049c6:	2301      	movs	r3, #1
 80049c8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	2200      	movs	r2, #0
 80049d0:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	2200      	movs	r2, #0
 80049d6:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80049d8:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 80049dc:	4618      	mov	r0, r3
 80049de:	3728      	adds	r7, #40	; 0x28
 80049e0:	46bd      	mov	sp, r7
 80049e2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80049e6:	bf00      	nop
 80049e8:	00f42400 	.word	0x00f42400

080049ec <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80049ec:	b480      	push	{r7}
 80049ee:	b083      	sub	sp, #12
 80049f0:	af00      	add	r7, sp, #0
 80049f2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049f8:	f003 0301 	and.w	r3, r3, #1
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d00a      	beq.n	8004a16 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	685b      	ldr	r3, [r3, #4]
 8004a06:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	430a      	orrs	r2, r1
 8004a14:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a1a:	f003 0302 	and.w	r3, r3, #2
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d00a      	beq.n	8004a38 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	685b      	ldr	r3, [r3, #4]
 8004a28:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	430a      	orrs	r2, r1
 8004a36:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a3c:	f003 0304 	and.w	r3, r3, #4
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d00a      	beq.n	8004a5a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	685b      	ldr	r3, [r3, #4]
 8004a4a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	430a      	orrs	r2, r1
 8004a58:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a5e:	f003 0308 	and.w	r3, r3, #8
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d00a      	beq.n	8004a7c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	685b      	ldr	r3, [r3, #4]
 8004a6c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	430a      	orrs	r2, r1
 8004a7a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a80:	f003 0310 	and.w	r3, r3, #16
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d00a      	beq.n	8004a9e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	689b      	ldr	r3, [r3, #8]
 8004a8e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	430a      	orrs	r2, r1
 8004a9c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004aa2:	f003 0320 	and.w	r3, r3, #32
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d00a      	beq.n	8004ac0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	689b      	ldr	r3, [r3, #8]
 8004ab0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	430a      	orrs	r2, r1
 8004abe:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ac4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d01a      	beq.n	8004b02 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	685b      	ldr	r3, [r3, #4]
 8004ad2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	430a      	orrs	r2, r1
 8004ae0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ae6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004aea:	d10a      	bne.n	8004b02 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	685b      	ldr	r3, [r3, #4]
 8004af2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	430a      	orrs	r2, r1
 8004b00:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d00a      	beq.n	8004b24 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	685b      	ldr	r3, [r3, #4]
 8004b14:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	430a      	orrs	r2, r1
 8004b22:	605a      	str	r2, [r3, #4]
  }
}
 8004b24:	bf00      	nop
 8004b26:	370c      	adds	r7, #12
 8004b28:	46bd      	mov	sp, r7
 8004b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b2e:	4770      	bx	lr

08004b30 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004b30:	b580      	push	{r7, lr}
 8004b32:	b086      	sub	sp, #24
 8004b34:	af02      	add	r7, sp, #8
 8004b36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	2200      	movs	r2, #0
 8004b3c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004b40:	f7fc fcb2 	bl	80014a8 <HAL_GetTick>
 8004b44:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	f003 0308 	and.w	r3, r3, #8
 8004b50:	2b08      	cmp	r3, #8
 8004b52:	d10e      	bne.n	8004b72 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004b54:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004b58:	9300      	str	r3, [sp, #0]
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	2200      	movs	r2, #0
 8004b5e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004b62:	6878      	ldr	r0, [r7, #4]
 8004b64:	f000 f82d 	bl	8004bc2 <UART_WaitOnFlagUntilTimeout>
 8004b68:	4603      	mov	r3, r0
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d001      	beq.n	8004b72 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004b6e:	2303      	movs	r3, #3
 8004b70:	e023      	b.n	8004bba <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	f003 0304 	and.w	r3, r3, #4
 8004b7c:	2b04      	cmp	r3, #4
 8004b7e:	d10e      	bne.n	8004b9e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004b80:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004b84:	9300      	str	r3, [sp, #0]
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	2200      	movs	r2, #0
 8004b8a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004b8e:	6878      	ldr	r0, [r7, #4]
 8004b90:	f000 f817 	bl	8004bc2 <UART_WaitOnFlagUntilTimeout>
 8004b94:	4603      	mov	r3, r0
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d001      	beq.n	8004b9e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004b9a:	2303      	movs	r3, #3
 8004b9c:	e00d      	b.n	8004bba <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	2220      	movs	r2, #32
 8004ba2:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	2220      	movs	r2, #32
 8004ba8:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	2200      	movs	r2, #0
 8004bae:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	2200      	movs	r2, #0
 8004bb4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8004bb8:	2300      	movs	r3, #0
}
 8004bba:	4618      	mov	r0, r3
 8004bbc:	3710      	adds	r7, #16
 8004bbe:	46bd      	mov	sp, r7
 8004bc0:	bd80      	pop	{r7, pc}

08004bc2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004bc2:	b580      	push	{r7, lr}
 8004bc4:	b09c      	sub	sp, #112	; 0x70
 8004bc6:	af00      	add	r7, sp, #0
 8004bc8:	60f8      	str	r0, [r7, #12]
 8004bca:	60b9      	str	r1, [r7, #8]
 8004bcc:	603b      	str	r3, [r7, #0]
 8004bce:	4613      	mov	r3, r2
 8004bd0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004bd2:	e0a5      	b.n	8004d20 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004bd4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004bd6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004bda:	f000 80a1 	beq.w	8004d20 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004bde:	f7fc fc63 	bl	80014a8 <HAL_GetTick>
 8004be2:	4602      	mov	r2, r0
 8004be4:	683b      	ldr	r3, [r7, #0]
 8004be6:	1ad3      	subs	r3, r2, r3
 8004be8:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8004bea:	429a      	cmp	r2, r3
 8004bec:	d302      	bcc.n	8004bf4 <UART_WaitOnFlagUntilTimeout+0x32>
 8004bee:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d13e      	bne.n	8004c72 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bfa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004bfc:	e853 3f00 	ldrex	r3, [r3]
 8004c00:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8004c02:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004c04:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004c08:	667b      	str	r3, [r7, #100]	; 0x64
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	461a      	mov	r2, r3
 8004c10:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004c12:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004c14:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c16:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004c18:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004c1a:	e841 2300 	strex	r3, r2, [r1]
 8004c1e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8004c20:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d1e6      	bne.n	8004bf4 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	3308      	adds	r3, #8
 8004c2c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c2e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004c30:	e853 3f00 	ldrex	r3, [r3]
 8004c34:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004c36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c38:	f023 0301 	bic.w	r3, r3, #1
 8004c3c:	663b      	str	r3, [r7, #96]	; 0x60
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	3308      	adds	r3, #8
 8004c44:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004c46:	64ba      	str	r2, [r7, #72]	; 0x48
 8004c48:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c4a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004c4c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004c4e:	e841 2300 	strex	r3, r2, [r1]
 8004c52:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004c54:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d1e5      	bne.n	8004c26 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	2220      	movs	r2, #32
 8004c5e:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	2220      	movs	r2, #32
 8004c64:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	2200      	movs	r2, #0
 8004c6a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8004c6e:	2303      	movs	r3, #3
 8004c70:	e067      	b.n	8004d42 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	f003 0304 	and.w	r3, r3, #4
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d04f      	beq.n	8004d20 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	69db      	ldr	r3, [r3, #28]
 8004c86:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004c8a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004c8e:	d147      	bne.n	8004d20 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004c98:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ca0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ca2:	e853 3f00 	ldrex	r3, [r3]
 8004ca6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004ca8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004caa:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004cae:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	461a      	mov	r2, r3
 8004cb6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004cb8:	637b      	str	r3, [r7, #52]	; 0x34
 8004cba:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cbc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004cbe:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004cc0:	e841 2300 	strex	r3, r2, [r1]
 8004cc4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004cc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d1e6      	bne.n	8004c9a <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	3308      	adds	r3, #8
 8004cd2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cd4:	697b      	ldr	r3, [r7, #20]
 8004cd6:	e853 3f00 	ldrex	r3, [r3]
 8004cda:	613b      	str	r3, [r7, #16]
   return(result);
 8004cdc:	693b      	ldr	r3, [r7, #16]
 8004cde:	f023 0301 	bic.w	r3, r3, #1
 8004ce2:	66bb      	str	r3, [r7, #104]	; 0x68
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	3308      	adds	r3, #8
 8004cea:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004cec:	623a      	str	r2, [r7, #32]
 8004cee:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cf0:	69f9      	ldr	r1, [r7, #28]
 8004cf2:	6a3a      	ldr	r2, [r7, #32]
 8004cf4:	e841 2300 	strex	r3, r2, [r1]
 8004cf8:	61bb      	str	r3, [r7, #24]
   return(result);
 8004cfa:	69bb      	ldr	r3, [r7, #24]
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d1e5      	bne.n	8004ccc <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	2220      	movs	r2, #32
 8004d04:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	2220      	movs	r2, #32
 8004d0a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	2220      	movs	r2, #32
 8004d10:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	2200      	movs	r2, #0
 8004d18:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8004d1c:	2303      	movs	r3, #3
 8004d1e:	e010      	b.n	8004d42 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	69da      	ldr	r2, [r3, #28]
 8004d26:	68bb      	ldr	r3, [r7, #8]
 8004d28:	4013      	ands	r3, r2
 8004d2a:	68ba      	ldr	r2, [r7, #8]
 8004d2c:	429a      	cmp	r2, r3
 8004d2e:	bf0c      	ite	eq
 8004d30:	2301      	moveq	r3, #1
 8004d32:	2300      	movne	r3, #0
 8004d34:	b2db      	uxtb	r3, r3
 8004d36:	461a      	mov	r2, r3
 8004d38:	79fb      	ldrb	r3, [r7, #7]
 8004d3a:	429a      	cmp	r2, r3
 8004d3c:	f43f af4a 	beq.w	8004bd4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004d40:	2300      	movs	r3, #0
}
 8004d42:	4618      	mov	r0, r3
 8004d44:	3770      	adds	r7, #112	; 0x70
 8004d46:	46bd      	mov	sp, r7
 8004d48:	bd80      	pop	{r7, pc}
	...

08004d4c <__errno>:
 8004d4c:	4b01      	ldr	r3, [pc, #4]	; (8004d54 <__errno+0x8>)
 8004d4e:	6818      	ldr	r0, [r3, #0]
 8004d50:	4770      	bx	lr
 8004d52:	bf00      	nop
 8004d54:	2000000c 	.word	0x2000000c

08004d58 <__libc_init_array>:
 8004d58:	b570      	push	{r4, r5, r6, lr}
 8004d5a:	4d0d      	ldr	r5, [pc, #52]	; (8004d90 <__libc_init_array+0x38>)
 8004d5c:	4c0d      	ldr	r4, [pc, #52]	; (8004d94 <__libc_init_array+0x3c>)
 8004d5e:	1b64      	subs	r4, r4, r5
 8004d60:	10a4      	asrs	r4, r4, #2
 8004d62:	2600      	movs	r6, #0
 8004d64:	42a6      	cmp	r6, r4
 8004d66:	d109      	bne.n	8004d7c <__libc_init_array+0x24>
 8004d68:	4d0b      	ldr	r5, [pc, #44]	; (8004d98 <__libc_init_array+0x40>)
 8004d6a:	4c0c      	ldr	r4, [pc, #48]	; (8004d9c <__libc_init_array+0x44>)
 8004d6c:	f001 f88e 	bl	8005e8c <_init>
 8004d70:	1b64      	subs	r4, r4, r5
 8004d72:	10a4      	asrs	r4, r4, #2
 8004d74:	2600      	movs	r6, #0
 8004d76:	42a6      	cmp	r6, r4
 8004d78:	d105      	bne.n	8004d86 <__libc_init_array+0x2e>
 8004d7a:	bd70      	pop	{r4, r5, r6, pc}
 8004d7c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004d80:	4798      	blx	r3
 8004d82:	3601      	adds	r6, #1
 8004d84:	e7ee      	b.n	8004d64 <__libc_init_array+0xc>
 8004d86:	f855 3b04 	ldr.w	r3, [r5], #4
 8004d8a:	4798      	blx	r3
 8004d8c:	3601      	adds	r6, #1
 8004d8e:	e7f2      	b.n	8004d76 <__libc_init_array+0x1e>
 8004d90:	08006a8c 	.word	0x08006a8c
 8004d94:	08006a8c 	.word	0x08006a8c
 8004d98:	08006a8c 	.word	0x08006a8c
 8004d9c:	08006a90 	.word	0x08006a90

08004da0 <memset>:
 8004da0:	4402      	add	r2, r0
 8004da2:	4603      	mov	r3, r0
 8004da4:	4293      	cmp	r3, r2
 8004da6:	d100      	bne.n	8004daa <memset+0xa>
 8004da8:	4770      	bx	lr
 8004daa:	f803 1b01 	strb.w	r1, [r3], #1
 8004dae:	e7f9      	b.n	8004da4 <memset+0x4>

08004db0 <_puts_r>:
 8004db0:	b570      	push	{r4, r5, r6, lr}
 8004db2:	460e      	mov	r6, r1
 8004db4:	4605      	mov	r5, r0
 8004db6:	b118      	cbz	r0, 8004dc0 <_puts_r+0x10>
 8004db8:	6983      	ldr	r3, [r0, #24]
 8004dba:	b90b      	cbnz	r3, 8004dc0 <_puts_r+0x10>
 8004dbc:	f000 fa68 	bl	8005290 <__sinit>
 8004dc0:	69ab      	ldr	r3, [r5, #24]
 8004dc2:	68ac      	ldr	r4, [r5, #8]
 8004dc4:	b913      	cbnz	r3, 8004dcc <_puts_r+0x1c>
 8004dc6:	4628      	mov	r0, r5
 8004dc8:	f000 fa62 	bl	8005290 <__sinit>
 8004dcc:	4b2c      	ldr	r3, [pc, #176]	; (8004e80 <_puts_r+0xd0>)
 8004dce:	429c      	cmp	r4, r3
 8004dd0:	d120      	bne.n	8004e14 <_puts_r+0x64>
 8004dd2:	686c      	ldr	r4, [r5, #4]
 8004dd4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004dd6:	07db      	lsls	r3, r3, #31
 8004dd8:	d405      	bmi.n	8004de6 <_puts_r+0x36>
 8004dda:	89a3      	ldrh	r3, [r4, #12]
 8004ddc:	0598      	lsls	r0, r3, #22
 8004dde:	d402      	bmi.n	8004de6 <_puts_r+0x36>
 8004de0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004de2:	f000 faf3 	bl	80053cc <__retarget_lock_acquire_recursive>
 8004de6:	89a3      	ldrh	r3, [r4, #12]
 8004de8:	0719      	lsls	r1, r3, #28
 8004dea:	d51d      	bpl.n	8004e28 <_puts_r+0x78>
 8004dec:	6923      	ldr	r3, [r4, #16]
 8004dee:	b1db      	cbz	r3, 8004e28 <_puts_r+0x78>
 8004df0:	3e01      	subs	r6, #1
 8004df2:	68a3      	ldr	r3, [r4, #8]
 8004df4:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8004df8:	3b01      	subs	r3, #1
 8004dfa:	60a3      	str	r3, [r4, #8]
 8004dfc:	bb39      	cbnz	r1, 8004e4e <_puts_r+0x9e>
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	da38      	bge.n	8004e74 <_puts_r+0xc4>
 8004e02:	4622      	mov	r2, r4
 8004e04:	210a      	movs	r1, #10
 8004e06:	4628      	mov	r0, r5
 8004e08:	f000 f868 	bl	8004edc <__swbuf_r>
 8004e0c:	3001      	adds	r0, #1
 8004e0e:	d011      	beq.n	8004e34 <_puts_r+0x84>
 8004e10:	250a      	movs	r5, #10
 8004e12:	e011      	b.n	8004e38 <_puts_r+0x88>
 8004e14:	4b1b      	ldr	r3, [pc, #108]	; (8004e84 <_puts_r+0xd4>)
 8004e16:	429c      	cmp	r4, r3
 8004e18:	d101      	bne.n	8004e1e <_puts_r+0x6e>
 8004e1a:	68ac      	ldr	r4, [r5, #8]
 8004e1c:	e7da      	b.n	8004dd4 <_puts_r+0x24>
 8004e1e:	4b1a      	ldr	r3, [pc, #104]	; (8004e88 <_puts_r+0xd8>)
 8004e20:	429c      	cmp	r4, r3
 8004e22:	bf08      	it	eq
 8004e24:	68ec      	ldreq	r4, [r5, #12]
 8004e26:	e7d5      	b.n	8004dd4 <_puts_r+0x24>
 8004e28:	4621      	mov	r1, r4
 8004e2a:	4628      	mov	r0, r5
 8004e2c:	f000 f8a8 	bl	8004f80 <__swsetup_r>
 8004e30:	2800      	cmp	r0, #0
 8004e32:	d0dd      	beq.n	8004df0 <_puts_r+0x40>
 8004e34:	f04f 35ff 	mov.w	r5, #4294967295
 8004e38:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004e3a:	07da      	lsls	r2, r3, #31
 8004e3c:	d405      	bmi.n	8004e4a <_puts_r+0x9a>
 8004e3e:	89a3      	ldrh	r3, [r4, #12]
 8004e40:	059b      	lsls	r3, r3, #22
 8004e42:	d402      	bmi.n	8004e4a <_puts_r+0x9a>
 8004e44:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004e46:	f000 fac2 	bl	80053ce <__retarget_lock_release_recursive>
 8004e4a:	4628      	mov	r0, r5
 8004e4c:	bd70      	pop	{r4, r5, r6, pc}
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	da04      	bge.n	8004e5c <_puts_r+0xac>
 8004e52:	69a2      	ldr	r2, [r4, #24]
 8004e54:	429a      	cmp	r2, r3
 8004e56:	dc06      	bgt.n	8004e66 <_puts_r+0xb6>
 8004e58:	290a      	cmp	r1, #10
 8004e5a:	d004      	beq.n	8004e66 <_puts_r+0xb6>
 8004e5c:	6823      	ldr	r3, [r4, #0]
 8004e5e:	1c5a      	adds	r2, r3, #1
 8004e60:	6022      	str	r2, [r4, #0]
 8004e62:	7019      	strb	r1, [r3, #0]
 8004e64:	e7c5      	b.n	8004df2 <_puts_r+0x42>
 8004e66:	4622      	mov	r2, r4
 8004e68:	4628      	mov	r0, r5
 8004e6a:	f000 f837 	bl	8004edc <__swbuf_r>
 8004e6e:	3001      	adds	r0, #1
 8004e70:	d1bf      	bne.n	8004df2 <_puts_r+0x42>
 8004e72:	e7df      	b.n	8004e34 <_puts_r+0x84>
 8004e74:	6823      	ldr	r3, [r4, #0]
 8004e76:	250a      	movs	r5, #10
 8004e78:	1c5a      	adds	r2, r3, #1
 8004e7a:	6022      	str	r2, [r4, #0]
 8004e7c:	701d      	strb	r5, [r3, #0]
 8004e7e:	e7db      	b.n	8004e38 <_puts_r+0x88>
 8004e80:	08006a10 	.word	0x08006a10
 8004e84:	08006a30 	.word	0x08006a30
 8004e88:	080069f0 	.word	0x080069f0

08004e8c <puts>:
 8004e8c:	4b02      	ldr	r3, [pc, #8]	; (8004e98 <puts+0xc>)
 8004e8e:	4601      	mov	r1, r0
 8004e90:	6818      	ldr	r0, [r3, #0]
 8004e92:	f7ff bf8d 	b.w	8004db0 <_puts_r>
 8004e96:	bf00      	nop
 8004e98:	2000000c 	.word	0x2000000c

08004e9c <siprintf>:
 8004e9c:	b40e      	push	{r1, r2, r3}
 8004e9e:	b500      	push	{lr}
 8004ea0:	b09c      	sub	sp, #112	; 0x70
 8004ea2:	ab1d      	add	r3, sp, #116	; 0x74
 8004ea4:	9002      	str	r0, [sp, #8]
 8004ea6:	9006      	str	r0, [sp, #24]
 8004ea8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004eac:	4809      	ldr	r0, [pc, #36]	; (8004ed4 <siprintf+0x38>)
 8004eae:	9107      	str	r1, [sp, #28]
 8004eb0:	9104      	str	r1, [sp, #16]
 8004eb2:	4909      	ldr	r1, [pc, #36]	; (8004ed8 <siprintf+0x3c>)
 8004eb4:	f853 2b04 	ldr.w	r2, [r3], #4
 8004eb8:	9105      	str	r1, [sp, #20]
 8004eba:	6800      	ldr	r0, [r0, #0]
 8004ebc:	9301      	str	r3, [sp, #4]
 8004ebe:	a902      	add	r1, sp, #8
 8004ec0:	f000 fc28 	bl	8005714 <_svfiprintf_r>
 8004ec4:	9b02      	ldr	r3, [sp, #8]
 8004ec6:	2200      	movs	r2, #0
 8004ec8:	701a      	strb	r2, [r3, #0]
 8004eca:	b01c      	add	sp, #112	; 0x70
 8004ecc:	f85d eb04 	ldr.w	lr, [sp], #4
 8004ed0:	b003      	add	sp, #12
 8004ed2:	4770      	bx	lr
 8004ed4:	2000000c 	.word	0x2000000c
 8004ed8:	ffff0208 	.word	0xffff0208

08004edc <__swbuf_r>:
 8004edc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ede:	460e      	mov	r6, r1
 8004ee0:	4614      	mov	r4, r2
 8004ee2:	4605      	mov	r5, r0
 8004ee4:	b118      	cbz	r0, 8004eee <__swbuf_r+0x12>
 8004ee6:	6983      	ldr	r3, [r0, #24]
 8004ee8:	b90b      	cbnz	r3, 8004eee <__swbuf_r+0x12>
 8004eea:	f000 f9d1 	bl	8005290 <__sinit>
 8004eee:	4b21      	ldr	r3, [pc, #132]	; (8004f74 <__swbuf_r+0x98>)
 8004ef0:	429c      	cmp	r4, r3
 8004ef2:	d12b      	bne.n	8004f4c <__swbuf_r+0x70>
 8004ef4:	686c      	ldr	r4, [r5, #4]
 8004ef6:	69a3      	ldr	r3, [r4, #24]
 8004ef8:	60a3      	str	r3, [r4, #8]
 8004efa:	89a3      	ldrh	r3, [r4, #12]
 8004efc:	071a      	lsls	r2, r3, #28
 8004efe:	d52f      	bpl.n	8004f60 <__swbuf_r+0x84>
 8004f00:	6923      	ldr	r3, [r4, #16]
 8004f02:	b36b      	cbz	r3, 8004f60 <__swbuf_r+0x84>
 8004f04:	6923      	ldr	r3, [r4, #16]
 8004f06:	6820      	ldr	r0, [r4, #0]
 8004f08:	1ac0      	subs	r0, r0, r3
 8004f0a:	6963      	ldr	r3, [r4, #20]
 8004f0c:	b2f6      	uxtb	r6, r6
 8004f0e:	4283      	cmp	r3, r0
 8004f10:	4637      	mov	r7, r6
 8004f12:	dc04      	bgt.n	8004f1e <__swbuf_r+0x42>
 8004f14:	4621      	mov	r1, r4
 8004f16:	4628      	mov	r0, r5
 8004f18:	f000 f926 	bl	8005168 <_fflush_r>
 8004f1c:	bb30      	cbnz	r0, 8004f6c <__swbuf_r+0x90>
 8004f1e:	68a3      	ldr	r3, [r4, #8]
 8004f20:	3b01      	subs	r3, #1
 8004f22:	60a3      	str	r3, [r4, #8]
 8004f24:	6823      	ldr	r3, [r4, #0]
 8004f26:	1c5a      	adds	r2, r3, #1
 8004f28:	6022      	str	r2, [r4, #0]
 8004f2a:	701e      	strb	r6, [r3, #0]
 8004f2c:	6963      	ldr	r3, [r4, #20]
 8004f2e:	3001      	adds	r0, #1
 8004f30:	4283      	cmp	r3, r0
 8004f32:	d004      	beq.n	8004f3e <__swbuf_r+0x62>
 8004f34:	89a3      	ldrh	r3, [r4, #12]
 8004f36:	07db      	lsls	r3, r3, #31
 8004f38:	d506      	bpl.n	8004f48 <__swbuf_r+0x6c>
 8004f3a:	2e0a      	cmp	r6, #10
 8004f3c:	d104      	bne.n	8004f48 <__swbuf_r+0x6c>
 8004f3e:	4621      	mov	r1, r4
 8004f40:	4628      	mov	r0, r5
 8004f42:	f000 f911 	bl	8005168 <_fflush_r>
 8004f46:	b988      	cbnz	r0, 8004f6c <__swbuf_r+0x90>
 8004f48:	4638      	mov	r0, r7
 8004f4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004f4c:	4b0a      	ldr	r3, [pc, #40]	; (8004f78 <__swbuf_r+0x9c>)
 8004f4e:	429c      	cmp	r4, r3
 8004f50:	d101      	bne.n	8004f56 <__swbuf_r+0x7a>
 8004f52:	68ac      	ldr	r4, [r5, #8]
 8004f54:	e7cf      	b.n	8004ef6 <__swbuf_r+0x1a>
 8004f56:	4b09      	ldr	r3, [pc, #36]	; (8004f7c <__swbuf_r+0xa0>)
 8004f58:	429c      	cmp	r4, r3
 8004f5a:	bf08      	it	eq
 8004f5c:	68ec      	ldreq	r4, [r5, #12]
 8004f5e:	e7ca      	b.n	8004ef6 <__swbuf_r+0x1a>
 8004f60:	4621      	mov	r1, r4
 8004f62:	4628      	mov	r0, r5
 8004f64:	f000 f80c 	bl	8004f80 <__swsetup_r>
 8004f68:	2800      	cmp	r0, #0
 8004f6a:	d0cb      	beq.n	8004f04 <__swbuf_r+0x28>
 8004f6c:	f04f 37ff 	mov.w	r7, #4294967295
 8004f70:	e7ea      	b.n	8004f48 <__swbuf_r+0x6c>
 8004f72:	bf00      	nop
 8004f74:	08006a10 	.word	0x08006a10
 8004f78:	08006a30 	.word	0x08006a30
 8004f7c:	080069f0 	.word	0x080069f0

08004f80 <__swsetup_r>:
 8004f80:	4b32      	ldr	r3, [pc, #200]	; (800504c <__swsetup_r+0xcc>)
 8004f82:	b570      	push	{r4, r5, r6, lr}
 8004f84:	681d      	ldr	r5, [r3, #0]
 8004f86:	4606      	mov	r6, r0
 8004f88:	460c      	mov	r4, r1
 8004f8a:	b125      	cbz	r5, 8004f96 <__swsetup_r+0x16>
 8004f8c:	69ab      	ldr	r3, [r5, #24]
 8004f8e:	b913      	cbnz	r3, 8004f96 <__swsetup_r+0x16>
 8004f90:	4628      	mov	r0, r5
 8004f92:	f000 f97d 	bl	8005290 <__sinit>
 8004f96:	4b2e      	ldr	r3, [pc, #184]	; (8005050 <__swsetup_r+0xd0>)
 8004f98:	429c      	cmp	r4, r3
 8004f9a:	d10f      	bne.n	8004fbc <__swsetup_r+0x3c>
 8004f9c:	686c      	ldr	r4, [r5, #4]
 8004f9e:	89a3      	ldrh	r3, [r4, #12]
 8004fa0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004fa4:	0719      	lsls	r1, r3, #28
 8004fa6:	d42c      	bmi.n	8005002 <__swsetup_r+0x82>
 8004fa8:	06dd      	lsls	r5, r3, #27
 8004faa:	d411      	bmi.n	8004fd0 <__swsetup_r+0x50>
 8004fac:	2309      	movs	r3, #9
 8004fae:	6033      	str	r3, [r6, #0]
 8004fb0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8004fb4:	81a3      	strh	r3, [r4, #12]
 8004fb6:	f04f 30ff 	mov.w	r0, #4294967295
 8004fba:	e03e      	b.n	800503a <__swsetup_r+0xba>
 8004fbc:	4b25      	ldr	r3, [pc, #148]	; (8005054 <__swsetup_r+0xd4>)
 8004fbe:	429c      	cmp	r4, r3
 8004fc0:	d101      	bne.n	8004fc6 <__swsetup_r+0x46>
 8004fc2:	68ac      	ldr	r4, [r5, #8]
 8004fc4:	e7eb      	b.n	8004f9e <__swsetup_r+0x1e>
 8004fc6:	4b24      	ldr	r3, [pc, #144]	; (8005058 <__swsetup_r+0xd8>)
 8004fc8:	429c      	cmp	r4, r3
 8004fca:	bf08      	it	eq
 8004fcc:	68ec      	ldreq	r4, [r5, #12]
 8004fce:	e7e6      	b.n	8004f9e <__swsetup_r+0x1e>
 8004fd0:	0758      	lsls	r0, r3, #29
 8004fd2:	d512      	bpl.n	8004ffa <__swsetup_r+0x7a>
 8004fd4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004fd6:	b141      	cbz	r1, 8004fea <__swsetup_r+0x6a>
 8004fd8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004fdc:	4299      	cmp	r1, r3
 8004fde:	d002      	beq.n	8004fe6 <__swsetup_r+0x66>
 8004fe0:	4630      	mov	r0, r6
 8004fe2:	f000 fa5b 	bl	800549c <_free_r>
 8004fe6:	2300      	movs	r3, #0
 8004fe8:	6363      	str	r3, [r4, #52]	; 0x34
 8004fea:	89a3      	ldrh	r3, [r4, #12]
 8004fec:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004ff0:	81a3      	strh	r3, [r4, #12]
 8004ff2:	2300      	movs	r3, #0
 8004ff4:	6063      	str	r3, [r4, #4]
 8004ff6:	6923      	ldr	r3, [r4, #16]
 8004ff8:	6023      	str	r3, [r4, #0]
 8004ffa:	89a3      	ldrh	r3, [r4, #12]
 8004ffc:	f043 0308 	orr.w	r3, r3, #8
 8005000:	81a3      	strh	r3, [r4, #12]
 8005002:	6923      	ldr	r3, [r4, #16]
 8005004:	b94b      	cbnz	r3, 800501a <__swsetup_r+0x9a>
 8005006:	89a3      	ldrh	r3, [r4, #12]
 8005008:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800500c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005010:	d003      	beq.n	800501a <__swsetup_r+0x9a>
 8005012:	4621      	mov	r1, r4
 8005014:	4630      	mov	r0, r6
 8005016:	f000 fa01 	bl	800541c <__smakebuf_r>
 800501a:	89a0      	ldrh	r0, [r4, #12]
 800501c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005020:	f010 0301 	ands.w	r3, r0, #1
 8005024:	d00a      	beq.n	800503c <__swsetup_r+0xbc>
 8005026:	2300      	movs	r3, #0
 8005028:	60a3      	str	r3, [r4, #8]
 800502a:	6963      	ldr	r3, [r4, #20]
 800502c:	425b      	negs	r3, r3
 800502e:	61a3      	str	r3, [r4, #24]
 8005030:	6923      	ldr	r3, [r4, #16]
 8005032:	b943      	cbnz	r3, 8005046 <__swsetup_r+0xc6>
 8005034:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8005038:	d1ba      	bne.n	8004fb0 <__swsetup_r+0x30>
 800503a:	bd70      	pop	{r4, r5, r6, pc}
 800503c:	0781      	lsls	r1, r0, #30
 800503e:	bf58      	it	pl
 8005040:	6963      	ldrpl	r3, [r4, #20]
 8005042:	60a3      	str	r3, [r4, #8]
 8005044:	e7f4      	b.n	8005030 <__swsetup_r+0xb0>
 8005046:	2000      	movs	r0, #0
 8005048:	e7f7      	b.n	800503a <__swsetup_r+0xba>
 800504a:	bf00      	nop
 800504c:	2000000c 	.word	0x2000000c
 8005050:	08006a10 	.word	0x08006a10
 8005054:	08006a30 	.word	0x08006a30
 8005058:	080069f0 	.word	0x080069f0

0800505c <__sflush_r>:
 800505c:	898a      	ldrh	r2, [r1, #12]
 800505e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005062:	4605      	mov	r5, r0
 8005064:	0710      	lsls	r0, r2, #28
 8005066:	460c      	mov	r4, r1
 8005068:	d458      	bmi.n	800511c <__sflush_r+0xc0>
 800506a:	684b      	ldr	r3, [r1, #4]
 800506c:	2b00      	cmp	r3, #0
 800506e:	dc05      	bgt.n	800507c <__sflush_r+0x20>
 8005070:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005072:	2b00      	cmp	r3, #0
 8005074:	dc02      	bgt.n	800507c <__sflush_r+0x20>
 8005076:	2000      	movs	r0, #0
 8005078:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800507c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800507e:	2e00      	cmp	r6, #0
 8005080:	d0f9      	beq.n	8005076 <__sflush_r+0x1a>
 8005082:	2300      	movs	r3, #0
 8005084:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005088:	682f      	ldr	r7, [r5, #0]
 800508a:	602b      	str	r3, [r5, #0]
 800508c:	d032      	beq.n	80050f4 <__sflush_r+0x98>
 800508e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005090:	89a3      	ldrh	r3, [r4, #12]
 8005092:	075a      	lsls	r2, r3, #29
 8005094:	d505      	bpl.n	80050a2 <__sflush_r+0x46>
 8005096:	6863      	ldr	r3, [r4, #4]
 8005098:	1ac0      	subs	r0, r0, r3
 800509a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800509c:	b10b      	cbz	r3, 80050a2 <__sflush_r+0x46>
 800509e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80050a0:	1ac0      	subs	r0, r0, r3
 80050a2:	2300      	movs	r3, #0
 80050a4:	4602      	mov	r2, r0
 80050a6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80050a8:	6a21      	ldr	r1, [r4, #32]
 80050aa:	4628      	mov	r0, r5
 80050ac:	47b0      	blx	r6
 80050ae:	1c43      	adds	r3, r0, #1
 80050b0:	89a3      	ldrh	r3, [r4, #12]
 80050b2:	d106      	bne.n	80050c2 <__sflush_r+0x66>
 80050b4:	6829      	ldr	r1, [r5, #0]
 80050b6:	291d      	cmp	r1, #29
 80050b8:	d82c      	bhi.n	8005114 <__sflush_r+0xb8>
 80050ba:	4a2a      	ldr	r2, [pc, #168]	; (8005164 <__sflush_r+0x108>)
 80050bc:	40ca      	lsrs	r2, r1
 80050be:	07d6      	lsls	r6, r2, #31
 80050c0:	d528      	bpl.n	8005114 <__sflush_r+0xb8>
 80050c2:	2200      	movs	r2, #0
 80050c4:	6062      	str	r2, [r4, #4]
 80050c6:	04d9      	lsls	r1, r3, #19
 80050c8:	6922      	ldr	r2, [r4, #16]
 80050ca:	6022      	str	r2, [r4, #0]
 80050cc:	d504      	bpl.n	80050d8 <__sflush_r+0x7c>
 80050ce:	1c42      	adds	r2, r0, #1
 80050d0:	d101      	bne.n	80050d6 <__sflush_r+0x7a>
 80050d2:	682b      	ldr	r3, [r5, #0]
 80050d4:	b903      	cbnz	r3, 80050d8 <__sflush_r+0x7c>
 80050d6:	6560      	str	r0, [r4, #84]	; 0x54
 80050d8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80050da:	602f      	str	r7, [r5, #0]
 80050dc:	2900      	cmp	r1, #0
 80050de:	d0ca      	beq.n	8005076 <__sflush_r+0x1a>
 80050e0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80050e4:	4299      	cmp	r1, r3
 80050e6:	d002      	beq.n	80050ee <__sflush_r+0x92>
 80050e8:	4628      	mov	r0, r5
 80050ea:	f000 f9d7 	bl	800549c <_free_r>
 80050ee:	2000      	movs	r0, #0
 80050f0:	6360      	str	r0, [r4, #52]	; 0x34
 80050f2:	e7c1      	b.n	8005078 <__sflush_r+0x1c>
 80050f4:	6a21      	ldr	r1, [r4, #32]
 80050f6:	2301      	movs	r3, #1
 80050f8:	4628      	mov	r0, r5
 80050fa:	47b0      	blx	r6
 80050fc:	1c41      	adds	r1, r0, #1
 80050fe:	d1c7      	bne.n	8005090 <__sflush_r+0x34>
 8005100:	682b      	ldr	r3, [r5, #0]
 8005102:	2b00      	cmp	r3, #0
 8005104:	d0c4      	beq.n	8005090 <__sflush_r+0x34>
 8005106:	2b1d      	cmp	r3, #29
 8005108:	d001      	beq.n	800510e <__sflush_r+0xb2>
 800510a:	2b16      	cmp	r3, #22
 800510c:	d101      	bne.n	8005112 <__sflush_r+0xb6>
 800510e:	602f      	str	r7, [r5, #0]
 8005110:	e7b1      	b.n	8005076 <__sflush_r+0x1a>
 8005112:	89a3      	ldrh	r3, [r4, #12]
 8005114:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005118:	81a3      	strh	r3, [r4, #12]
 800511a:	e7ad      	b.n	8005078 <__sflush_r+0x1c>
 800511c:	690f      	ldr	r7, [r1, #16]
 800511e:	2f00      	cmp	r7, #0
 8005120:	d0a9      	beq.n	8005076 <__sflush_r+0x1a>
 8005122:	0793      	lsls	r3, r2, #30
 8005124:	680e      	ldr	r6, [r1, #0]
 8005126:	bf08      	it	eq
 8005128:	694b      	ldreq	r3, [r1, #20]
 800512a:	600f      	str	r7, [r1, #0]
 800512c:	bf18      	it	ne
 800512e:	2300      	movne	r3, #0
 8005130:	eba6 0807 	sub.w	r8, r6, r7
 8005134:	608b      	str	r3, [r1, #8]
 8005136:	f1b8 0f00 	cmp.w	r8, #0
 800513a:	dd9c      	ble.n	8005076 <__sflush_r+0x1a>
 800513c:	6a21      	ldr	r1, [r4, #32]
 800513e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005140:	4643      	mov	r3, r8
 8005142:	463a      	mov	r2, r7
 8005144:	4628      	mov	r0, r5
 8005146:	47b0      	blx	r6
 8005148:	2800      	cmp	r0, #0
 800514a:	dc06      	bgt.n	800515a <__sflush_r+0xfe>
 800514c:	89a3      	ldrh	r3, [r4, #12]
 800514e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005152:	81a3      	strh	r3, [r4, #12]
 8005154:	f04f 30ff 	mov.w	r0, #4294967295
 8005158:	e78e      	b.n	8005078 <__sflush_r+0x1c>
 800515a:	4407      	add	r7, r0
 800515c:	eba8 0800 	sub.w	r8, r8, r0
 8005160:	e7e9      	b.n	8005136 <__sflush_r+0xda>
 8005162:	bf00      	nop
 8005164:	20400001 	.word	0x20400001

08005168 <_fflush_r>:
 8005168:	b538      	push	{r3, r4, r5, lr}
 800516a:	690b      	ldr	r3, [r1, #16]
 800516c:	4605      	mov	r5, r0
 800516e:	460c      	mov	r4, r1
 8005170:	b913      	cbnz	r3, 8005178 <_fflush_r+0x10>
 8005172:	2500      	movs	r5, #0
 8005174:	4628      	mov	r0, r5
 8005176:	bd38      	pop	{r3, r4, r5, pc}
 8005178:	b118      	cbz	r0, 8005182 <_fflush_r+0x1a>
 800517a:	6983      	ldr	r3, [r0, #24]
 800517c:	b90b      	cbnz	r3, 8005182 <_fflush_r+0x1a>
 800517e:	f000 f887 	bl	8005290 <__sinit>
 8005182:	4b14      	ldr	r3, [pc, #80]	; (80051d4 <_fflush_r+0x6c>)
 8005184:	429c      	cmp	r4, r3
 8005186:	d11b      	bne.n	80051c0 <_fflush_r+0x58>
 8005188:	686c      	ldr	r4, [r5, #4]
 800518a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800518e:	2b00      	cmp	r3, #0
 8005190:	d0ef      	beq.n	8005172 <_fflush_r+0xa>
 8005192:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005194:	07d0      	lsls	r0, r2, #31
 8005196:	d404      	bmi.n	80051a2 <_fflush_r+0x3a>
 8005198:	0599      	lsls	r1, r3, #22
 800519a:	d402      	bmi.n	80051a2 <_fflush_r+0x3a>
 800519c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800519e:	f000 f915 	bl	80053cc <__retarget_lock_acquire_recursive>
 80051a2:	4628      	mov	r0, r5
 80051a4:	4621      	mov	r1, r4
 80051a6:	f7ff ff59 	bl	800505c <__sflush_r>
 80051aa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80051ac:	07da      	lsls	r2, r3, #31
 80051ae:	4605      	mov	r5, r0
 80051b0:	d4e0      	bmi.n	8005174 <_fflush_r+0xc>
 80051b2:	89a3      	ldrh	r3, [r4, #12]
 80051b4:	059b      	lsls	r3, r3, #22
 80051b6:	d4dd      	bmi.n	8005174 <_fflush_r+0xc>
 80051b8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80051ba:	f000 f908 	bl	80053ce <__retarget_lock_release_recursive>
 80051be:	e7d9      	b.n	8005174 <_fflush_r+0xc>
 80051c0:	4b05      	ldr	r3, [pc, #20]	; (80051d8 <_fflush_r+0x70>)
 80051c2:	429c      	cmp	r4, r3
 80051c4:	d101      	bne.n	80051ca <_fflush_r+0x62>
 80051c6:	68ac      	ldr	r4, [r5, #8]
 80051c8:	e7df      	b.n	800518a <_fflush_r+0x22>
 80051ca:	4b04      	ldr	r3, [pc, #16]	; (80051dc <_fflush_r+0x74>)
 80051cc:	429c      	cmp	r4, r3
 80051ce:	bf08      	it	eq
 80051d0:	68ec      	ldreq	r4, [r5, #12]
 80051d2:	e7da      	b.n	800518a <_fflush_r+0x22>
 80051d4:	08006a10 	.word	0x08006a10
 80051d8:	08006a30 	.word	0x08006a30
 80051dc:	080069f0 	.word	0x080069f0

080051e0 <std>:
 80051e0:	2300      	movs	r3, #0
 80051e2:	b510      	push	{r4, lr}
 80051e4:	4604      	mov	r4, r0
 80051e6:	e9c0 3300 	strd	r3, r3, [r0]
 80051ea:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80051ee:	6083      	str	r3, [r0, #8]
 80051f0:	8181      	strh	r1, [r0, #12]
 80051f2:	6643      	str	r3, [r0, #100]	; 0x64
 80051f4:	81c2      	strh	r2, [r0, #14]
 80051f6:	6183      	str	r3, [r0, #24]
 80051f8:	4619      	mov	r1, r3
 80051fa:	2208      	movs	r2, #8
 80051fc:	305c      	adds	r0, #92	; 0x5c
 80051fe:	f7ff fdcf 	bl	8004da0 <memset>
 8005202:	4b05      	ldr	r3, [pc, #20]	; (8005218 <std+0x38>)
 8005204:	6263      	str	r3, [r4, #36]	; 0x24
 8005206:	4b05      	ldr	r3, [pc, #20]	; (800521c <std+0x3c>)
 8005208:	62a3      	str	r3, [r4, #40]	; 0x28
 800520a:	4b05      	ldr	r3, [pc, #20]	; (8005220 <std+0x40>)
 800520c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800520e:	4b05      	ldr	r3, [pc, #20]	; (8005224 <std+0x44>)
 8005210:	6224      	str	r4, [r4, #32]
 8005212:	6323      	str	r3, [r4, #48]	; 0x30
 8005214:	bd10      	pop	{r4, pc}
 8005216:	bf00      	nop
 8005218:	08005c5d 	.word	0x08005c5d
 800521c:	08005c7f 	.word	0x08005c7f
 8005220:	08005cb7 	.word	0x08005cb7
 8005224:	08005cdb 	.word	0x08005cdb

08005228 <_cleanup_r>:
 8005228:	4901      	ldr	r1, [pc, #4]	; (8005230 <_cleanup_r+0x8>)
 800522a:	f000 b8af 	b.w	800538c <_fwalk_reent>
 800522e:	bf00      	nop
 8005230:	08005169 	.word	0x08005169

08005234 <__sfmoreglue>:
 8005234:	b570      	push	{r4, r5, r6, lr}
 8005236:	2268      	movs	r2, #104	; 0x68
 8005238:	1e4d      	subs	r5, r1, #1
 800523a:	4355      	muls	r5, r2
 800523c:	460e      	mov	r6, r1
 800523e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8005242:	f000 f997 	bl	8005574 <_malloc_r>
 8005246:	4604      	mov	r4, r0
 8005248:	b140      	cbz	r0, 800525c <__sfmoreglue+0x28>
 800524a:	2100      	movs	r1, #0
 800524c:	e9c0 1600 	strd	r1, r6, [r0]
 8005250:	300c      	adds	r0, #12
 8005252:	60a0      	str	r0, [r4, #8]
 8005254:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8005258:	f7ff fda2 	bl	8004da0 <memset>
 800525c:	4620      	mov	r0, r4
 800525e:	bd70      	pop	{r4, r5, r6, pc}

08005260 <__sfp_lock_acquire>:
 8005260:	4801      	ldr	r0, [pc, #4]	; (8005268 <__sfp_lock_acquire+0x8>)
 8005262:	f000 b8b3 	b.w	80053cc <__retarget_lock_acquire_recursive>
 8005266:	bf00      	nop
 8005268:	200001e1 	.word	0x200001e1

0800526c <__sfp_lock_release>:
 800526c:	4801      	ldr	r0, [pc, #4]	; (8005274 <__sfp_lock_release+0x8>)
 800526e:	f000 b8ae 	b.w	80053ce <__retarget_lock_release_recursive>
 8005272:	bf00      	nop
 8005274:	200001e1 	.word	0x200001e1

08005278 <__sinit_lock_acquire>:
 8005278:	4801      	ldr	r0, [pc, #4]	; (8005280 <__sinit_lock_acquire+0x8>)
 800527a:	f000 b8a7 	b.w	80053cc <__retarget_lock_acquire_recursive>
 800527e:	bf00      	nop
 8005280:	200001e2 	.word	0x200001e2

08005284 <__sinit_lock_release>:
 8005284:	4801      	ldr	r0, [pc, #4]	; (800528c <__sinit_lock_release+0x8>)
 8005286:	f000 b8a2 	b.w	80053ce <__retarget_lock_release_recursive>
 800528a:	bf00      	nop
 800528c:	200001e2 	.word	0x200001e2

08005290 <__sinit>:
 8005290:	b510      	push	{r4, lr}
 8005292:	4604      	mov	r4, r0
 8005294:	f7ff fff0 	bl	8005278 <__sinit_lock_acquire>
 8005298:	69a3      	ldr	r3, [r4, #24]
 800529a:	b11b      	cbz	r3, 80052a4 <__sinit+0x14>
 800529c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80052a0:	f7ff bff0 	b.w	8005284 <__sinit_lock_release>
 80052a4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80052a8:	6523      	str	r3, [r4, #80]	; 0x50
 80052aa:	4b13      	ldr	r3, [pc, #76]	; (80052f8 <__sinit+0x68>)
 80052ac:	4a13      	ldr	r2, [pc, #76]	; (80052fc <__sinit+0x6c>)
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	62a2      	str	r2, [r4, #40]	; 0x28
 80052b2:	42a3      	cmp	r3, r4
 80052b4:	bf04      	itt	eq
 80052b6:	2301      	moveq	r3, #1
 80052b8:	61a3      	streq	r3, [r4, #24]
 80052ba:	4620      	mov	r0, r4
 80052bc:	f000 f820 	bl	8005300 <__sfp>
 80052c0:	6060      	str	r0, [r4, #4]
 80052c2:	4620      	mov	r0, r4
 80052c4:	f000 f81c 	bl	8005300 <__sfp>
 80052c8:	60a0      	str	r0, [r4, #8]
 80052ca:	4620      	mov	r0, r4
 80052cc:	f000 f818 	bl	8005300 <__sfp>
 80052d0:	2200      	movs	r2, #0
 80052d2:	60e0      	str	r0, [r4, #12]
 80052d4:	2104      	movs	r1, #4
 80052d6:	6860      	ldr	r0, [r4, #4]
 80052d8:	f7ff ff82 	bl	80051e0 <std>
 80052dc:	68a0      	ldr	r0, [r4, #8]
 80052de:	2201      	movs	r2, #1
 80052e0:	2109      	movs	r1, #9
 80052e2:	f7ff ff7d 	bl	80051e0 <std>
 80052e6:	68e0      	ldr	r0, [r4, #12]
 80052e8:	2202      	movs	r2, #2
 80052ea:	2112      	movs	r1, #18
 80052ec:	f7ff ff78 	bl	80051e0 <std>
 80052f0:	2301      	movs	r3, #1
 80052f2:	61a3      	str	r3, [r4, #24]
 80052f4:	e7d2      	b.n	800529c <__sinit+0xc>
 80052f6:	bf00      	nop
 80052f8:	080069ec 	.word	0x080069ec
 80052fc:	08005229 	.word	0x08005229

08005300 <__sfp>:
 8005300:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005302:	4607      	mov	r7, r0
 8005304:	f7ff ffac 	bl	8005260 <__sfp_lock_acquire>
 8005308:	4b1e      	ldr	r3, [pc, #120]	; (8005384 <__sfp+0x84>)
 800530a:	681e      	ldr	r6, [r3, #0]
 800530c:	69b3      	ldr	r3, [r6, #24]
 800530e:	b913      	cbnz	r3, 8005316 <__sfp+0x16>
 8005310:	4630      	mov	r0, r6
 8005312:	f7ff ffbd 	bl	8005290 <__sinit>
 8005316:	3648      	adds	r6, #72	; 0x48
 8005318:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800531c:	3b01      	subs	r3, #1
 800531e:	d503      	bpl.n	8005328 <__sfp+0x28>
 8005320:	6833      	ldr	r3, [r6, #0]
 8005322:	b30b      	cbz	r3, 8005368 <__sfp+0x68>
 8005324:	6836      	ldr	r6, [r6, #0]
 8005326:	e7f7      	b.n	8005318 <__sfp+0x18>
 8005328:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800532c:	b9d5      	cbnz	r5, 8005364 <__sfp+0x64>
 800532e:	4b16      	ldr	r3, [pc, #88]	; (8005388 <__sfp+0x88>)
 8005330:	60e3      	str	r3, [r4, #12]
 8005332:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8005336:	6665      	str	r5, [r4, #100]	; 0x64
 8005338:	f000 f847 	bl	80053ca <__retarget_lock_init_recursive>
 800533c:	f7ff ff96 	bl	800526c <__sfp_lock_release>
 8005340:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8005344:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8005348:	6025      	str	r5, [r4, #0]
 800534a:	61a5      	str	r5, [r4, #24]
 800534c:	2208      	movs	r2, #8
 800534e:	4629      	mov	r1, r5
 8005350:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8005354:	f7ff fd24 	bl	8004da0 <memset>
 8005358:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800535c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8005360:	4620      	mov	r0, r4
 8005362:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005364:	3468      	adds	r4, #104	; 0x68
 8005366:	e7d9      	b.n	800531c <__sfp+0x1c>
 8005368:	2104      	movs	r1, #4
 800536a:	4638      	mov	r0, r7
 800536c:	f7ff ff62 	bl	8005234 <__sfmoreglue>
 8005370:	4604      	mov	r4, r0
 8005372:	6030      	str	r0, [r6, #0]
 8005374:	2800      	cmp	r0, #0
 8005376:	d1d5      	bne.n	8005324 <__sfp+0x24>
 8005378:	f7ff ff78 	bl	800526c <__sfp_lock_release>
 800537c:	230c      	movs	r3, #12
 800537e:	603b      	str	r3, [r7, #0]
 8005380:	e7ee      	b.n	8005360 <__sfp+0x60>
 8005382:	bf00      	nop
 8005384:	080069ec 	.word	0x080069ec
 8005388:	ffff0001 	.word	0xffff0001

0800538c <_fwalk_reent>:
 800538c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005390:	4606      	mov	r6, r0
 8005392:	4688      	mov	r8, r1
 8005394:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8005398:	2700      	movs	r7, #0
 800539a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800539e:	f1b9 0901 	subs.w	r9, r9, #1
 80053a2:	d505      	bpl.n	80053b0 <_fwalk_reent+0x24>
 80053a4:	6824      	ldr	r4, [r4, #0]
 80053a6:	2c00      	cmp	r4, #0
 80053a8:	d1f7      	bne.n	800539a <_fwalk_reent+0xe>
 80053aa:	4638      	mov	r0, r7
 80053ac:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80053b0:	89ab      	ldrh	r3, [r5, #12]
 80053b2:	2b01      	cmp	r3, #1
 80053b4:	d907      	bls.n	80053c6 <_fwalk_reent+0x3a>
 80053b6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80053ba:	3301      	adds	r3, #1
 80053bc:	d003      	beq.n	80053c6 <_fwalk_reent+0x3a>
 80053be:	4629      	mov	r1, r5
 80053c0:	4630      	mov	r0, r6
 80053c2:	47c0      	blx	r8
 80053c4:	4307      	orrs	r7, r0
 80053c6:	3568      	adds	r5, #104	; 0x68
 80053c8:	e7e9      	b.n	800539e <_fwalk_reent+0x12>

080053ca <__retarget_lock_init_recursive>:
 80053ca:	4770      	bx	lr

080053cc <__retarget_lock_acquire_recursive>:
 80053cc:	4770      	bx	lr

080053ce <__retarget_lock_release_recursive>:
 80053ce:	4770      	bx	lr

080053d0 <__swhatbuf_r>:
 80053d0:	b570      	push	{r4, r5, r6, lr}
 80053d2:	460e      	mov	r6, r1
 80053d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80053d8:	2900      	cmp	r1, #0
 80053da:	b096      	sub	sp, #88	; 0x58
 80053dc:	4614      	mov	r4, r2
 80053de:	461d      	mov	r5, r3
 80053e0:	da08      	bge.n	80053f4 <__swhatbuf_r+0x24>
 80053e2:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80053e6:	2200      	movs	r2, #0
 80053e8:	602a      	str	r2, [r5, #0]
 80053ea:	061a      	lsls	r2, r3, #24
 80053ec:	d410      	bmi.n	8005410 <__swhatbuf_r+0x40>
 80053ee:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80053f2:	e00e      	b.n	8005412 <__swhatbuf_r+0x42>
 80053f4:	466a      	mov	r2, sp
 80053f6:	f000 fc97 	bl	8005d28 <_fstat_r>
 80053fa:	2800      	cmp	r0, #0
 80053fc:	dbf1      	blt.n	80053e2 <__swhatbuf_r+0x12>
 80053fe:	9a01      	ldr	r2, [sp, #4]
 8005400:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8005404:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8005408:	425a      	negs	r2, r3
 800540a:	415a      	adcs	r2, r3
 800540c:	602a      	str	r2, [r5, #0]
 800540e:	e7ee      	b.n	80053ee <__swhatbuf_r+0x1e>
 8005410:	2340      	movs	r3, #64	; 0x40
 8005412:	2000      	movs	r0, #0
 8005414:	6023      	str	r3, [r4, #0]
 8005416:	b016      	add	sp, #88	; 0x58
 8005418:	bd70      	pop	{r4, r5, r6, pc}
	...

0800541c <__smakebuf_r>:
 800541c:	898b      	ldrh	r3, [r1, #12]
 800541e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005420:	079d      	lsls	r5, r3, #30
 8005422:	4606      	mov	r6, r0
 8005424:	460c      	mov	r4, r1
 8005426:	d507      	bpl.n	8005438 <__smakebuf_r+0x1c>
 8005428:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800542c:	6023      	str	r3, [r4, #0]
 800542e:	6123      	str	r3, [r4, #16]
 8005430:	2301      	movs	r3, #1
 8005432:	6163      	str	r3, [r4, #20]
 8005434:	b002      	add	sp, #8
 8005436:	bd70      	pop	{r4, r5, r6, pc}
 8005438:	ab01      	add	r3, sp, #4
 800543a:	466a      	mov	r2, sp
 800543c:	f7ff ffc8 	bl	80053d0 <__swhatbuf_r>
 8005440:	9900      	ldr	r1, [sp, #0]
 8005442:	4605      	mov	r5, r0
 8005444:	4630      	mov	r0, r6
 8005446:	f000 f895 	bl	8005574 <_malloc_r>
 800544a:	b948      	cbnz	r0, 8005460 <__smakebuf_r+0x44>
 800544c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005450:	059a      	lsls	r2, r3, #22
 8005452:	d4ef      	bmi.n	8005434 <__smakebuf_r+0x18>
 8005454:	f023 0303 	bic.w	r3, r3, #3
 8005458:	f043 0302 	orr.w	r3, r3, #2
 800545c:	81a3      	strh	r3, [r4, #12]
 800545e:	e7e3      	b.n	8005428 <__smakebuf_r+0xc>
 8005460:	4b0d      	ldr	r3, [pc, #52]	; (8005498 <__smakebuf_r+0x7c>)
 8005462:	62b3      	str	r3, [r6, #40]	; 0x28
 8005464:	89a3      	ldrh	r3, [r4, #12]
 8005466:	6020      	str	r0, [r4, #0]
 8005468:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800546c:	81a3      	strh	r3, [r4, #12]
 800546e:	9b00      	ldr	r3, [sp, #0]
 8005470:	6163      	str	r3, [r4, #20]
 8005472:	9b01      	ldr	r3, [sp, #4]
 8005474:	6120      	str	r0, [r4, #16]
 8005476:	b15b      	cbz	r3, 8005490 <__smakebuf_r+0x74>
 8005478:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800547c:	4630      	mov	r0, r6
 800547e:	f000 fc65 	bl	8005d4c <_isatty_r>
 8005482:	b128      	cbz	r0, 8005490 <__smakebuf_r+0x74>
 8005484:	89a3      	ldrh	r3, [r4, #12]
 8005486:	f023 0303 	bic.w	r3, r3, #3
 800548a:	f043 0301 	orr.w	r3, r3, #1
 800548e:	81a3      	strh	r3, [r4, #12]
 8005490:	89a0      	ldrh	r0, [r4, #12]
 8005492:	4305      	orrs	r5, r0
 8005494:	81a5      	strh	r5, [r4, #12]
 8005496:	e7cd      	b.n	8005434 <__smakebuf_r+0x18>
 8005498:	08005229 	.word	0x08005229

0800549c <_free_r>:
 800549c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800549e:	2900      	cmp	r1, #0
 80054a0:	d044      	beq.n	800552c <_free_r+0x90>
 80054a2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80054a6:	9001      	str	r0, [sp, #4]
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	f1a1 0404 	sub.w	r4, r1, #4
 80054ae:	bfb8      	it	lt
 80054b0:	18e4      	addlt	r4, r4, r3
 80054b2:	f000 fc95 	bl	8005de0 <__malloc_lock>
 80054b6:	4a1e      	ldr	r2, [pc, #120]	; (8005530 <_free_r+0x94>)
 80054b8:	9801      	ldr	r0, [sp, #4]
 80054ba:	6813      	ldr	r3, [r2, #0]
 80054bc:	b933      	cbnz	r3, 80054cc <_free_r+0x30>
 80054be:	6063      	str	r3, [r4, #4]
 80054c0:	6014      	str	r4, [r2, #0]
 80054c2:	b003      	add	sp, #12
 80054c4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80054c8:	f000 bc90 	b.w	8005dec <__malloc_unlock>
 80054cc:	42a3      	cmp	r3, r4
 80054ce:	d908      	bls.n	80054e2 <_free_r+0x46>
 80054d0:	6825      	ldr	r5, [r4, #0]
 80054d2:	1961      	adds	r1, r4, r5
 80054d4:	428b      	cmp	r3, r1
 80054d6:	bf01      	itttt	eq
 80054d8:	6819      	ldreq	r1, [r3, #0]
 80054da:	685b      	ldreq	r3, [r3, #4]
 80054dc:	1949      	addeq	r1, r1, r5
 80054de:	6021      	streq	r1, [r4, #0]
 80054e0:	e7ed      	b.n	80054be <_free_r+0x22>
 80054e2:	461a      	mov	r2, r3
 80054e4:	685b      	ldr	r3, [r3, #4]
 80054e6:	b10b      	cbz	r3, 80054ec <_free_r+0x50>
 80054e8:	42a3      	cmp	r3, r4
 80054ea:	d9fa      	bls.n	80054e2 <_free_r+0x46>
 80054ec:	6811      	ldr	r1, [r2, #0]
 80054ee:	1855      	adds	r5, r2, r1
 80054f0:	42a5      	cmp	r5, r4
 80054f2:	d10b      	bne.n	800550c <_free_r+0x70>
 80054f4:	6824      	ldr	r4, [r4, #0]
 80054f6:	4421      	add	r1, r4
 80054f8:	1854      	adds	r4, r2, r1
 80054fa:	42a3      	cmp	r3, r4
 80054fc:	6011      	str	r1, [r2, #0]
 80054fe:	d1e0      	bne.n	80054c2 <_free_r+0x26>
 8005500:	681c      	ldr	r4, [r3, #0]
 8005502:	685b      	ldr	r3, [r3, #4]
 8005504:	6053      	str	r3, [r2, #4]
 8005506:	4421      	add	r1, r4
 8005508:	6011      	str	r1, [r2, #0]
 800550a:	e7da      	b.n	80054c2 <_free_r+0x26>
 800550c:	d902      	bls.n	8005514 <_free_r+0x78>
 800550e:	230c      	movs	r3, #12
 8005510:	6003      	str	r3, [r0, #0]
 8005512:	e7d6      	b.n	80054c2 <_free_r+0x26>
 8005514:	6825      	ldr	r5, [r4, #0]
 8005516:	1961      	adds	r1, r4, r5
 8005518:	428b      	cmp	r3, r1
 800551a:	bf04      	itt	eq
 800551c:	6819      	ldreq	r1, [r3, #0]
 800551e:	685b      	ldreq	r3, [r3, #4]
 8005520:	6063      	str	r3, [r4, #4]
 8005522:	bf04      	itt	eq
 8005524:	1949      	addeq	r1, r1, r5
 8005526:	6021      	streq	r1, [r4, #0]
 8005528:	6054      	str	r4, [r2, #4]
 800552a:	e7ca      	b.n	80054c2 <_free_r+0x26>
 800552c:	b003      	add	sp, #12
 800552e:	bd30      	pop	{r4, r5, pc}
 8005530:	200001e4 	.word	0x200001e4

08005534 <sbrk_aligned>:
 8005534:	b570      	push	{r4, r5, r6, lr}
 8005536:	4e0e      	ldr	r6, [pc, #56]	; (8005570 <sbrk_aligned+0x3c>)
 8005538:	460c      	mov	r4, r1
 800553a:	6831      	ldr	r1, [r6, #0]
 800553c:	4605      	mov	r5, r0
 800553e:	b911      	cbnz	r1, 8005546 <sbrk_aligned+0x12>
 8005540:	f000 fb7c 	bl	8005c3c <_sbrk_r>
 8005544:	6030      	str	r0, [r6, #0]
 8005546:	4621      	mov	r1, r4
 8005548:	4628      	mov	r0, r5
 800554a:	f000 fb77 	bl	8005c3c <_sbrk_r>
 800554e:	1c43      	adds	r3, r0, #1
 8005550:	d00a      	beq.n	8005568 <sbrk_aligned+0x34>
 8005552:	1cc4      	adds	r4, r0, #3
 8005554:	f024 0403 	bic.w	r4, r4, #3
 8005558:	42a0      	cmp	r0, r4
 800555a:	d007      	beq.n	800556c <sbrk_aligned+0x38>
 800555c:	1a21      	subs	r1, r4, r0
 800555e:	4628      	mov	r0, r5
 8005560:	f000 fb6c 	bl	8005c3c <_sbrk_r>
 8005564:	3001      	adds	r0, #1
 8005566:	d101      	bne.n	800556c <sbrk_aligned+0x38>
 8005568:	f04f 34ff 	mov.w	r4, #4294967295
 800556c:	4620      	mov	r0, r4
 800556e:	bd70      	pop	{r4, r5, r6, pc}
 8005570:	200001e8 	.word	0x200001e8

08005574 <_malloc_r>:
 8005574:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005578:	1ccd      	adds	r5, r1, #3
 800557a:	f025 0503 	bic.w	r5, r5, #3
 800557e:	3508      	adds	r5, #8
 8005580:	2d0c      	cmp	r5, #12
 8005582:	bf38      	it	cc
 8005584:	250c      	movcc	r5, #12
 8005586:	2d00      	cmp	r5, #0
 8005588:	4607      	mov	r7, r0
 800558a:	db01      	blt.n	8005590 <_malloc_r+0x1c>
 800558c:	42a9      	cmp	r1, r5
 800558e:	d905      	bls.n	800559c <_malloc_r+0x28>
 8005590:	230c      	movs	r3, #12
 8005592:	603b      	str	r3, [r7, #0]
 8005594:	2600      	movs	r6, #0
 8005596:	4630      	mov	r0, r6
 8005598:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800559c:	4e2e      	ldr	r6, [pc, #184]	; (8005658 <_malloc_r+0xe4>)
 800559e:	f000 fc1f 	bl	8005de0 <__malloc_lock>
 80055a2:	6833      	ldr	r3, [r6, #0]
 80055a4:	461c      	mov	r4, r3
 80055a6:	bb34      	cbnz	r4, 80055f6 <_malloc_r+0x82>
 80055a8:	4629      	mov	r1, r5
 80055aa:	4638      	mov	r0, r7
 80055ac:	f7ff ffc2 	bl	8005534 <sbrk_aligned>
 80055b0:	1c43      	adds	r3, r0, #1
 80055b2:	4604      	mov	r4, r0
 80055b4:	d14d      	bne.n	8005652 <_malloc_r+0xde>
 80055b6:	6834      	ldr	r4, [r6, #0]
 80055b8:	4626      	mov	r6, r4
 80055ba:	2e00      	cmp	r6, #0
 80055bc:	d140      	bne.n	8005640 <_malloc_r+0xcc>
 80055be:	6823      	ldr	r3, [r4, #0]
 80055c0:	4631      	mov	r1, r6
 80055c2:	4638      	mov	r0, r7
 80055c4:	eb04 0803 	add.w	r8, r4, r3
 80055c8:	f000 fb38 	bl	8005c3c <_sbrk_r>
 80055cc:	4580      	cmp	r8, r0
 80055ce:	d13a      	bne.n	8005646 <_malloc_r+0xd2>
 80055d0:	6821      	ldr	r1, [r4, #0]
 80055d2:	3503      	adds	r5, #3
 80055d4:	1a6d      	subs	r5, r5, r1
 80055d6:	f025 0503 	bic.w	r5, r5, #3
 80055da:	3508      	adds	r5, #8
 80055dc:	2d0c      	cmp	r5, #12
 80055de:	bf38      	it	cc
 80055e0:	250c      	movcc	r5, #12
 80055e2:	4629      	mov	r1, r5
 80055e4:	4638      	mov	r0, r7
 80055e6:	f7ff ffa5 	bl	8005534 <sbrk_aligned>
 80055ea:	3001      	adds	r0, #1
 80055ec:	d02b      	beq.n	8005646 <_malloc_r+0xd2>
 80055ee:	6823      	ldr	r3, [r4, #0]
 80055f0:	442b      	add	r3, r5
 80055f2:	6023      	str	r3, [r4, #0]
 80055f4:	e00e      	b.n	8005614 <_malloc_r+0xa0>
 80055f6:	6822      	ldr	r2, [r4, #0]
 80055f8:	1b52      	subs	r2, r2, r5
 80055fa:	d41e      	bmi.n	800563a <_malloc_r+0xc6>
 80055fc:	2a0b      	cmp	r2, #11
 80055fe:	d916      	bls.n	800562e <_malloc_r+0xba>
 8005600:	1961      	adds	r1, r4, r5
 8005602:	42a3      	cmp	r3, r4
 8005604:	6025      	str	r5, [r4, #0]
 8005606:	bf18      	it	ne
 8005608:	6059      	strne	r1, [r3, #4]
 800560a:	6863      	ldr	r3, [r4, #4]
 800560c:	bf08      	it	eq
 800560e:	6031      	streq	r1, [r6, #0]
 8005610:	5162      	str	r2, [r4, r5]
 8005612:	604b      	str	r3, [r1, #4]
 8005614:	4638      	mov	r0, r7
 8005616:	f104 060b 	add.w	r6, r4, #11
 800561a:	f000 fbe7 	bl	8005dec <__malloc_unlock>
 800561e:	f026 0607 	bic.w	r6, r6, #7
 8005622:	1d23      	adds	r3, r4, #4
 8005624:	1af2      	subs	r2, r6, r3
 8005626:	d0b6      	beq.n	8005596 <_malloc_r+0x22>
 8005628:	1b9b      	subs	r3, r3, r6
 800562a:	50a3      	str	r3, [r4, r2]
 800562c:	e7b3      	b.n	8005596 <_malloc_r+0x22>
 800562e:	6862      	ldr	r2, [r4, #4]
 8005630:	42a3      	cmp	r3, r4
 8005632:	bf0c      	ite	eq
 8005634:	6032      	streq	r2, [r6, #0]
 8005636:	605a      	strne	r2, [r3, #4]
 8005638:	e7ec      	b.n	8005614 <_malloc_r+0xa0>
 800563a:	4623      	mov	r3, r4
 800563c:	6864      	ldr	r4, [r4, #4]
 800563e:	e7b2      	b.n	80055a6 <_malloc_r+0x32>
 8005640:	4634      	mov	r4, r6
 8005642:	6876      	ldr	r6, [r6, #4]
 8005644:	e7b9      	b.n	80055ba <_malloc_r+0x46>
 8005646:	230c      	movs	r3, #12
 8005648:	603b      	str	r3, [r7, #0]
 800564a:	4638      	mov	r0, r7
 800564c:	f000 fbce 	bl	8005dec <__malloc_unlock>
 8005650:	e7a1      	b.n	8005596 <_malloc_r+0x22>
 8005652:	6025      	str	r5, [r4, #0]
 8005654:	e7de      	b.n	8005614 <_malloc_r+0xa0>
 8005656:	bf00      	nop
 8005658:	200001e4 	.word	0x200001e4

0800565c <__ssputs_r>:
 800565c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005660:	688e      	ldr	r6, [r1, #8]
 8005662:	429e      	cmp	r6, r3
 8005664:	4682      	mov	sl, r0
 8005666:	460c      	mov	r4, r1
 8005668:	4690      	mov	r8, r2
 800566a:	461f      	mov	r7, r3
 800566c:	d838      	bhi.n	80056e0 <__ssputs_r+0x84>
 800566e:	898a      	ldrh	r2, [r1, #12]
 8005670:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005674:	d032      	beq.n	80056dc <__ssputs_r+0x80>
 8005676:	6825      	ldr	r5, [r4, #0]
 8005678:	6909      	ldr	r1, [r1, #16]
 800567a:	eba5 0901 	sub.w	r9, r5, r1
 800567e:	6965      	ldr	r5, [r4, #20]
 8005680:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005684:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005688:	3301      	adds	r3, #1
 800568a:	444b      	add	r3, r9
 800568c:	106d      	asrs	r5, r5, #1
 800568e:	429d      	cmp	r5, r3
 8005690:	bf38      	it	cc
 8005692:	461d      	movcc	r5, r3
 8005694:	0553      	lsls	r3, r2, #21
 8005696:	d531      	bpl.n	80056fc <__ssputs_r+0xa0>
 8005698:	4629      	mov	r1, r5
 800569a:	f7ff ff6b 	bl	8005574 <_malloc_r>
 800569e:	4606      	mov	r6, r0
 80056a0:	b950      	cbnz	r0, 80056b8 <__ssputs_r+0x5c>
 80056a2:	230c      	movs	r3, #12
 80056a4:	f8ca 3000 	str.w	r3, [sl]
 80056a8:	89a3      	ldrh	r3, [r4, #12]
 80056aa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80056ae:	81a3      	strh	r3, [r4, #12]
 80056b0:	f04f 30ff 	mov.w	r0, #4294967295
 80056b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80056b8:	6921      	ldr	r1, [r4, #16]
 80056ba:	464a      	mov	r2, r9
 80056bc:	f000 fb68 	bl	8005d90 <memcpy>
 80056c0:	89a3      	ldrh	r3, [r4, #12]
 80056c2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80056c6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80056ca:	81a3      	strh	r3, [r4, #12]
 80056cc:	6126      	str	r6, [r4, #16]
 80056ce:	6165      	str	r5, [r4, #20]
 80056d0:	444e      	add	r6, r9
 80056d2:	eba5 0509 	sub.w	r5, r5, r9
 80056d6:	6026      	str	r6, [r4, #0]
 80056d8:	60a5      	str	r5, [r4, #8]
 80056da:	463e      	mov	r6, r7
 80056dc:	42be      	cmp	r6, r7
 80056de:	d900      	bls.n	80056e2 <__ssputs_r+0x86>
 80056e0:	463e      	mov	r6, r7
 80056e2:	6820      	ldr	r0, [r4, #0]
 80056e4:	4632      	mov	r2, r6
 80056e6:	4641      	mov	r1, r8
 80056e8:	f000 fb60 	bl	8005dac <memmove>
 80056ec:	68a3      	ldr	r3, [r4, #8]
 80056ee:	1b9b      	subs	r3, r3, r6
 80056f0:	60a3      	str	r3, [r4, #8]
 80056f2:	6823      	ldr	r3, [r4, #0]
 80056f4:	4433      	add	r3, r6
 80056f6:	6023      	str	r3, [r4, #0]
 80056f8:	2000      	movs	r0, #0
 80056fa:	e7db      	b.n	80056b4 <__ssputs_r+0x58>
 80056fc:	462a      	mov	r2, r5
 80056fe:	f000 fb7b 	bl	8005df8 <_realloc_r>
 8005702:	4606      	mov	r6, r0
 8005704:	2800      	cmp	r0, #0
 8005706:	d1e1      	bne.n	80056cc <__ssputs_r+0x70>
 8005708:	6921      	ldr	r1, [r4, #16]
 800570a:	4650      	mov	r0, sl
 800570c:	f7ff fec6 	bl	800549c <_free_r>
 8005710:	e7c7      	b.n	80056a2 <__ssputs_r+0x46>
	...

08005714 <_svfiprintf_r>:
 8005714:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005718:	4698      	mov	r8, r3
 800571a:	898b      	ldrh	r3, [r1, #12]
 800571c:	061b      	lsls	r3, r3, #24
 800571e:	b09d      	sub	sp, #116	; 0x74
 8005720:	4607      	mov	r7, r0
 8005722:	460d      	mov	r5, r1
 8005724:	4614      	mov	r4, r2
 8005726:	d50e      	bpl.n	8005746 <_svfiprintf_r+0x32>
 8005728:	690b      	ldr	r3, [r1, #16]
 800572a:	b963      	cbnz	r3, 8005746 <_svfiprintf_r+0x32>
 800572c:	2140      	movs	r1, #64	; 0x40
 800572e:	f7ff ff21 	bl	8005574 <_malloc_r>
 8005732:	6028      	str	r0, [r5, #0]
 8005734:	6128      	str	r0, [r5, #16]
 8005736:	b920      	cbnz	r0, 8005742 <_svfiprintf_r+0x2e>
 8005738:	230c      	movs	r3, #12
 800573a:	603b      	str	r3, [r7, #0]
 800573c:	f04f 30ff 	mov.w	r0, #4294967295
 8005740:	e0d1      	b.n	80058e6 <_svfiprintf_r+0x1d2>
 8005742:	2340      	movs	r3, #64	; 0x40
 8005744:	616b      	str	r3, [r5, #20]
 8005746:	2300      	movs	r3, #0
 8005748:	9309      	str	r3, [sp, #36]	; 0x24
 800574a:	2320      	movs	r3, #32
 800574c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005750:	f8cd 800c 	str.w	r8, [sp, #12]
 8005754:	2330      	movs	r3, #48	; 0x30
 8005756:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8005900 <_svfiprintf_r+0x1ec>
 800575a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800575e:	f04f 0901 	mov.w	r9, #1
 8005762:	4623      	mov	r3, r4
 8005764:	469a      	mov	sl, r3
 8005766:	f813 2b01 	ldrb.w	r2, [r3], #1
 800576a:	b10a      	cbz	r2, 8005770 <_svfiprintf_r+0x5c>
 800576c:	2a25      	cmp	r2, #37	; 0x25
 800576e:	d1f9      	bne.n	8005764 <_svfiprintf_r+0x50>
 8005770:	ebba 0b04 	subs.w	fp, sl, r4
 8005774:	d00b      	beq.n	800578e <_svfiprintf_r+0x7a>
 8005776:	465b      	mov	r3, fp
 8005778:	4622      	mov	r2, r4
 800577a:	4629      	mov	r1, r5
 800577c:	4638      	mov	r0, r7
 800577e:	f7ff ff6d 	bl	800565c <__ssputs_r>
 8005782:	3001      	adds	r0, #1
 8005784:	f000 80aa 	beq.w	80058dc <_svfiprintf_r+0x1c8>
 8005788:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800578a:	445a      	add	r2, fp
 800578c:	9209      	str	r2, [sp, #36]	; 0x24
 800578e:	f89a 3000 	ldrb.w	r3, [sl]
 8005792:	2b00      	cmp	r3, #0
 8005794:	f000 80a2 	beq.w	80058dc <_svfiprintf_r+0x1c8>
 8005798:	2300      	movs	r3, #0
 800579a:	f04f 32ff 	mov.w	r2, #4294967295
 800579e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80057a2:	f10a 0a01 	add.w	sl, sl, #1
 80057a6:	9304      	str	r3, [sp, #16]
 80057a8:	9307      	str	r3, [sp, #28]
 80057aa:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80057ae:	931a      	str	r3, [sp, #104]	; 0x68
 80057b0:	4654      	mov	r4, sl
 80057b2:	2205      	movs	r2, #5
 80057b4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80057b8:	4851      	ldr	r0, [pc, #324]	; (8005900 <_svfiprintf_r+0x1ec>)
 80057ba:	f7fa fd09 	bl	80001d0 <memchr>
 80057be:	9a04      	ldr	r2, [sp, #16]
 80057c0:	b9d8      	cbnz	r0, 80057fa <_svfiprintf_r+0xe6>
 80057c2:	06d0      	lsls	r0, r2, #27
 80057c4:	bf44      	itt	mi
 80057c6:	2320      	movmi	r3, #32
 80057c8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80057cc:	0711      	lsls	r1, r2, #28
 80057ce:	bf44      	itt	mi
 80057d0:	232b      	movmi	r3, #43	; 0x2b
 80057d2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80057d6:	f89a 3000 	ldrb.w	r3, [sl]
 80057da:	2b2a      	cmp	r3, #42	; 0x2a
 80057dc:	d015      	beq.n	800580a <_svfiprintf_r+0xf6>
 80057de:	9a07      	ldr	r2, [sp, #28]
 80057e0:	4654      	mov	r4, sl
 80057e2:	2000      	movs	r0, #0
 80057e4:	f04f 0c0a 	mov.w	ip, #10
 80057e8:	4621      	mov	r1, r4
 80057ea:	f811 3b01 	ldrb.w	r3, [r1], #1
 80057ee:	3b30      	subs	r3, #48	; 0x30
 80057f0:	2b09      	cmp	r3, #9
 80057f2:	d94e      	bls.n	8005892 <_svfiprintf_r+0x17e>
 80057f4:	b1b0      	cbz	r0, 8005824 <_svfiprintf_r+0x110>
 80057f6:	9207      	str	r2, [sp, #28]
 80057f8:	e014      	b.n	8005824 <_svfiprintf_r+0x110>
 80057fa:	eba0 0308 	sub.w	r3, r0, r8
 80057fe:	fa09 f303 	lsl.w	r3, r9, r3
 8005802:	4313      	orrs	r3, r2
 8005804:	9304      	str	r3, [sp, #16]
 8005806:	46a2      	mov	sl, r4
 8005808:	e7d2      	b.n	80057b0 <_svfiprintf_r+0x9c>
 800580a:	9b03      	ldr	r3, [sp, #12]
 800580c:	1d19      	adds	r1, r3, #4
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	9103      	str	r1, [sp, #12]
 8005812:	2b00      	cmp	r3, #0
 8005814:	bfbb      	ittet	lt
 8005816:	425b      	neglt	r3, r3
 8005818:	f042 0202 	orrlt.w	r2, r2, #2
 800581c:	9307      	strge	r3, [sp, #28]
 800581e:	9307      	strlt	r3, [sp, #28]
 8005820:	bfb8      	it	lt
 8005822:	9204      	strlt	r2, [sp, #16]
 8005824:	7823      	ldrb	r3, [r4, #0]
 8005826:	2b2e      	cmp	r3, #46	; 0x2e
 8005828:	d10c      	bne.n	8005844 <_svfiprintf_r+0x130>
 800582a:	7863      	ldrb	r3, [r4, #1]
 800582c:	2b2a      	cmp	r3, #42	; 0x2a
 800582e:	d135      	bne.n	800589c <_svfiprintf_r+0x188>
 8005830:	9b03      	ldr	r3, [sp, #12]
 8005832:	1d1a      	adds	r2, r3, #4
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	9203      	str	r2, [sp, #12]
 8005838:	2b00      	cmp	r3, #0
 800583a:	bfb8      	it	lt
 800583c:	f04f 33ff 	movlt.w	r3, #4294967295
 8005840:	3402      	adds	r4, #2
 8005842:	9305      	str	r3, [sp, #20]
 8005844:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8005910 <_svfiprintf_r+0x1fc>
 8005848:	7821      	ldrb	r1, [r4, #0]
 800584a:	2203      	movs	r2, #3
 800584c:	4650      	mov	r0, sl
 800584e:	f7fa fcbf 	bl	80001d0 <memchr>
 8005852:	b140      	cbz	r0, 8005866 <_svfiprintf_r+0x152>
 8005854:	2340      	movs	r3, #64	; 0x40
 8005856:	eba0 000a 	sub.w	r0, r0, sl
 800585a:	fa03 f000 	lsl.w	r0, r3, r0
 800585e:	9b04      	ldr	r3, [sp, #16]
 8005860:	4303      	orrs	r3, r0
 8005862:	3401      	adds	r4, #1
 8005864:	9304      	str	r3, [sp, #16]
 8005866:	f814 1b01 	ldrb.w	r1, [r4], #1
 800586a:	4826      	ldr	r0, [pc, #152]	; (8005904 <_svfiprintf_r+0x1f0>)
 800586c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005870:	2206      	movs	r2, #6
 8005872:	f7fa fcad 	bl	80001d0 <memchr>
 8005876:	2800      	cmp	r0, #0
 8005878:	d038      	beq.n	80058ec <_svfiprintf_r+0x1d8>
 800587a:	4b23      	ldr	r3, [pc, #140]	; (8005908 <_svfiprintf_r+0x1f4>)
 800587c:	bb1b      	cbnz	r3, 80058c6 <_svfiprintf_r+0x1b2>
 800587e:	9b03      	ldr	r3, [sp, #12]
 8005880:	3307      	adds	r3, #7
 8005882:	f023 0307 	bic.w	r3, r3, #7
 8005886:	3308      	adds	r3, #8
 8005888:	9303      	str	r3, [sp, #12]
 800588a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800588c:	4433      	add	r3, r6
 800588e:	9309      	str	r3, [sp, #36]	; 0x24
 8005890:	e767      	b.n	8005762 <_svfiprintf_r+0x4e>
 8005892:	fb0c 3202 	mla	r2, ip, r2, r3
 8005896:	460c      	mov	r4, r1
 8005898:	2001      	movs	r0, #1
 800589a:	e7a5      	b.n	80057e8 <_svfiprintf_r+0xd4>
 800589c:	2300      	movs	r3, #0
 800589e:	3401      	adds	r4, #1
 80058a0:	9305      	str	r3, [sp, #20]
 80058a2:	4619      	mov	r1, r3
 80058a4:	f04f 0c0a 	mov.w	ip, #10
 80058a8:	4620      	mov	r0, r4
 80058aa:	f810 2b01 	ldrb.w	r2, [r0], #1
 80058ae:	3a30      	subs	r2, #48	; 0x30
 80058b0:	2a09      	cmp	r2, #9
 80058b2:	d903      	bls.n	80058bc <_svfiprintf_r+0x1a8>
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d0c5      	beq.n	8005844 <_svfiprintf_r+0x130>
 80058b8:	9105      	str	r1, [sp, #20]
 80058ba:	e7c3      	b.n	8005844 <_svfiprintf_r+0x130>
 80058bc:	fb0c 2101 	mla	r1, ip, r1, r2
 80058c0:	4604      	mov	r4, r0
 80058c2:	2301      	movs	r3, #1
 80058c4:	e7f0      	b.n	80058a8 <_svfiprintf_r+0x194>
 80058c6:	ab03      	add	r3, sp, #12
 80058c8:	9300      	str	r3, [sp, #0]
 80058ca:	462a      	mov	r2, r5
 80058cc:	4b0f      	ldr	r3, [pc, #60]	; (800590c <_svfiprintf_r+0x1f8>)
 80058ce:	a904      	add	r1, sp, #16
 80058d0:	4638      	mov	r0, r7
 80058d2:	f3af 8000 	nop.w
 80058d6:	1c42      	adds	r2, r0, #1
 80058d8:	4606      	mov	r6, r0
 80058da:	d1d6      	bne.n	800588a <_svfiprintf_r+0x176>
 80058dc:	89ab      	ldrh	r3, [r5, #12]
 80058de:	065b      	lsls	r3, r3, #25
 80058e0:	f53f af2c 	bmi.w	800573c <_svfiprintf_r+0x28>
 80058e4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80058e6:	b01d      	add	sp, #116	; 0x74
 80058e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80058ec:	ab03      	add	r3, sp, #12
 80058ee:	9300      	str	r3, [sp, #0]
 80058f0:	462a      	mov	r2, r5
 80058f2:	4b06      	ldr	r3, [pc, #24]	; (800590c <_svfiprintf_r+0x1f8>)
 80058f4:	a904      	add	r1, sp, #16
 80058f6:	4638      	mov	r0, r7
 80058f8:	f000 f87a 	bl	80059f0 <_printf_i>
 80058fc:	e7eb      	b.n	80058d6 <_svfiprintf_r+0x1c2>
 80058fe:	bf00      	nop
 8005900:	08006a50 	.word	0x08006a50
 8005904:	08006a5a 	.word	0x08006a5a
 8005908:	00000000 	.word	0x00000000
 800590c:	0800565d 	.word	0x0800565d
 8005910:	08006a56 	.word	0x08006a56

08005914 <_printf_common>:
 8005914:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005918:	4616      	mov	r6, r2
 800591a:	4699      	mov	r9, r3
 800591c:	688a      	ldr	r2, [r1, #8]
 800591e:	690b      	ldr	r3, [r1, #16]
 8005920:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005924:	4293      	cmp	r3, r2
 8005926:	bfb8      	it	lt
 8005928:	4613      	movlt	r3, r2
 800592a:	6033      	str	r3, [r6, #0]
 800592c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005930:	4607      	mov	r7, r0
 8005932:	460c      	mov	r4, r1
 8005934:	b10a      	cbz	r2, 800593a <_printf_common+0x26>
 8005936:	3301      	adds	r3, #1
 8005938:	6033      	str	r3, [r6, #0]
 800593a:	6823      	ldr	r3, [r4, #0]
 800593c:	0699      	lsls	r1, r3, #26
 800593e:	bf42      	ittt	mi
 8005940:	6833      	ldrmi	r3, [r6, #0]
 8005942:	3302      	addmi	r3, #2
 8005944:	6033      	strmi	r3, [r6, #0]
 8005946:	6825      	ldr	r5, [r4, #0]
 8005948:	f015 0506 	ands.w	r5, r5, #6
 800594c:	d106      	bne.n	800595c <_printf_common+0x48>
 800594e:	f104 0a19 	add.w	sl, r4, #25
 8005952:	68e3      	ldr	r3, [r4, #12]
 8005954:	6832      	ldr	r2, [r6, #0]
 8005956:	1a9b      	subs	r3, r3, r2
 8005958:	42ab      	cmp	r3, r5
 800595a:	dc26      	bgt.n	80059aa <_printf_common+0x96>
 800595c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005960:	1e13      	subs	r3, r2, #0
 8005962:	6822      	ldr	r2, [r4, #0]
 8005964:	bf18      	it	ne
 8005966:	2301      	movne	r3, #1
 8005968:	0692      	lsls	r2, r2, #26
 800596a:	d42b      	bmi.n	80059c4 <_printf_common+0xb0>
 800596c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005970:	4649      	mov	r1, r9
 8005972:	4638      	mov	r0, r7
 8005974:	47c0      	blx	r8
 8005976:	3001      	adds	r0, #1
 8005978:	d01e      	beq.n	80059b8 <_printf_common+0xa4>
 800597a:	6823      	ldr	r3, [r4, #0]
 800597c:	68e5      	ldr	r5, [r4, #12]
 800597e:	6832      	ldr	r2, [r6, #0]
 8005980:	f003 0306 	and.w	r3, r3, #6
 8005984:	2b04      	cmp	r3, #4
 8005986:	bf08      	it	eq
 8005988:	1aad      	subeq	r5, r5, r2
 800598a:	68a3      	ldr	r3, [r4, #8]
 800598c:	6922      	ldr	r2, [r4, #16]
 800598e:	bf0c      	ite	eq
 8005990:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005994:	2500      	movne	r5, #0
 8005996:	4293      	cmp	r3, r2
 8005998:	bfc4      	itt	gt
 800599a:	1a9b      	subgt	r3, r3, r2
 800599c:	18ed      	addgt	r5, r5, r3
 800599e:	2600      	movs	r6, #0
 80059a0:	341a      	adds	r4, #26
 80059a2:	42b5      	cmp	r5, r6
 80059a4:	d11a      	bne.n	80059dc <_printf_common+0xc8>
 80059a6:	2000      	movs	r0, #0
 80059a8:	e008      	b.n	80059bc <_printf_common+0xa8>
 80059aa:	2301      	movs	r3, #1
 80059ac:	4652      	mov	r2, sl
 80059ae:	4649      	mov	r1, r9
 80059b0:	4638      	mov	r0, r7
 80059b2:	47c0      	blx	r8
 80059b4:	3001      	adds	r0, #1
 80059b6:	d103      	bne.n	80059c0 <_printf_common+0xac>
 80059b8:	f04f 30ff 	mov.w	r0, #4294967295
 80059bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80059c0:	3501      	adds	r5, #1
 80059c2:	e7c6      	b.n	8005952 <_printf_common+0x3e>
 80059c4:	18e1      	adds	r1, r4, r3
 80059c6:	1c5a      	adds	r2, r3, #1
 80059c8:	2030      	movs	r0, #48	; 0x30
 80059ca:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80059ce:	4422      	add	r2, r4
 80059d0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80059d4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80059d8:	3302      	adds	r3, #2
 80059da:	e7c7      	b.n	800596c <_printf_common+0x58>
 80059dc:	2301      	movs	r3, #1
 80059de:	4622      	mov	r2, r4
 80059e0:	4649      	mov	r1, r9
 80059e2:	4638      	mov	r0, r7
 80059e4:	47c0      	blx	r8
 80059e6:	3001      	adds	r0, #1
 80059e8:	d0e6      	beq.n	80059b8 <_printf_common+0xa4>
 80059ea:	3601      	adds	r6, #1
 80059ec:	e7d9      	b.n	80059a2 <_printf_common+0x8e>
	...

080059f0 <_printf_i>:
 80059f0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80059f4:	7e0f      	ldrb	r7, [r1, #24]
 80059f6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80059f8:	2f78      	cmp	r7, #120	; 0x78
 80059fa:	4691      	mov	r9, r2
 80059fc:	4680      	mov	r8, r0
 80059fe:	460c      	mov	r4, r1
 8005a00:	469a      	mov	sl, r3
 8005a02:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005a06:	d807      	bhi.n	8005a18 <_printf_i+0x28>
 8005a08:	2f62      	cmp	r7, #98	; 0x62
 8005a0a:	d80a      	bhi.n	8005a22 <_printf_i+0x32>
 8005a0c:	2f00      	cmp	r7, #0
 8005a0e:	f000 80d8 	beq.w	8005bc2 <_printf_i+0x1d2>
 8005a12:	2f58      	cmp	r7, #88	; 0x58
 8005a14:	f000 80a3 	beq.w	8005b5e <_printf_i+0x16e>
 8005a18:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005a1c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005a20:	e03a      	b.n	8005a98 <_printf_i+0xa8>
 8005a22:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005a26:	2b15      	cmp	r3, #21
 8005a28:	d8f6      	bhi.n	8005a18 <_printf_i+0x28>
 8005a2a:	a101      	add	r1, pc, #4	; (adr r1, 8005a30 <_printf_i+0x40>)
 8005a2c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005a30:	08005a89 	.word	0x08005a89
 8005a34:	08005a9d 	.word	0x08005a9d
 8005a38:	08005a19 	.word	0x08005a19
 8005a3c:	08005a19 	.word	0x08005a19
 8005a40:	08005a19 	.word	0x08005a19
 8005a44:	08005a19 	.word	0x08005a19
 8005a48:	08005a9d 	.word	0x08005a9d
 8005a4c:	08005a19 	.word	0x08005a19
 8005a50:	08005a19 	.word	0x08005a19
 8005a54:	08005a19 	.word	0x08005a19
 8005a58:	08005a19 	.word	0x08005a19
 8005a5c:	08005ba9 	.word	0x08005ba9
 8005a60:	08005acd 	.word	0x08005acd
 8005a64:	08005b8b 	.word	0x08005b8b
 8005a68:	08005a19 	.word	0x08005a19
 8005a6c:	08005a19 	.word	0x08005a19
 8005a70:	08005bcb 	.word	0x08005bcb
 8005a74:	08005a19 	.word	0x08005a19
 8005a78:	08005acd 	.word	0x08005acd
 8005a7c:	08005a19 	.word	0x08005a19
 8005a80:	08005a19 	.word	0x08005a19
 8005a84:	08005b93 	.word	0x08005b93
 8005a88:	682b      	ldr	r3, [r5, #0]
 8005a8a:	1d1a      	adds	r2, r3, #4
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	602a      	str	r2, [r5, #0]
 8005a90:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005a94:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005a98:	2301      	movs	r3, #1
 8005a9a:	e0a3      	b.n	8005be4 <_printf_i+0x1f4>
 8005a9c:	6820      	ldr	r0, [r4, #0]
 8005a9e:	6829      	ldr	r1, [r5, #0]
 8005aa0:	0606      	lsls	r6, r0, #24
 8005aa2:	f101 0304 	add.w	r3, r1, #4
 8005aa6:	d50a      	bpl.n	8005abe <_printf_i+0xce>
 8005aa8:	680e      	ldr	r6, [r1, #0]
 8005aaa:	602b      	str	r3, [r5, #0]
 8005aac:	2e00      	cmp	r6, #0
 8005aae:	da03      	bge.n	8005ab8 <_printf_i+0xc8>
 8005ab0:	232d      	movs	r3, #45	; 0x2d
 8005ab2:	4276      	negs	r6, r6
 8005ab4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005ab8:	485e      	ldr	r0, [pc, #376]	; (8005c34 <_printf_i+0x244>)
 8005aba:	230a      	movs	r3, #10
 8005abc:	e019      	b.n	8005af2 <_printf_i+0x102>
 8005abe:	680e      	ldr	r6, [r1, #0]
 8005ac0:	602b      	str	r3, [r5, #0]
 8005ac2:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005ac6:	bf18      	it	ne
 8005ac8:	b236      	sxthne	r6, r6
 8005aca:	e7ef      	b.n	8005aac <_printf_i+0xbc>
 8005acc:	682b      	ldr	r3, [r5, #0]
 8005ace:	6820      	ldr	r0, [r4, #0]
 8005ad0:	1d19      	adds	r1, r3, #4
 8005ad2:	6029      	str	r1, [r5, #0]
 8005ad4:	0601      	lsls	r1, r0, #24
 8005ad6:	d501      	bpl.n	8005adc <_printf_i+0xec>
 8005ad8:	681e      	ldr	r6, [r3, #0]
 8005ada:	e002      	b.n	8005ae2 <_printf_i+0xf2>
 8005adc:	0646      	lsls	r6, r0, #25
 8005ade:	d5fb      	bpl.n	8005ad8 <_printf_i+0xe8>
 8005ae0:	881e      	ldrh	r6, [r3, #0]
 8005ae2:	4854      	ldr	r0, [pc, #336]	; (8005c34 <_printf_i+0x244>)
 8005ae4:	2f6f      	cmp	r7, #111	; 0x6f
 8005ae6:	bf0c      	ite	eq
 8005ae8:	2308      	moveq	r3, #8
 8005aea:	230a      	movne	r3, #10
 8005aec:	2100      	movs	r1, #0
 8005aee:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005af2:	6865      	ldr	r5, [r4, #4]
 8005af4:	60a5      	str	r5, [r4, #8]
 8005af6:	2d00      	cmp	r5, #0
 8005af8:	bfa2      	ittt	ge
 8005afa:	6821      	ldrge	r1, [r4, #0]
 8005afc:	f021 0104 	bicge.w	r1, r1, #4
 8005b00:	6021      	strge	r1, [r4, #0]
 8005b02:	b90e      	cbnz	r6, 8005b08 <_printf_i+0x118>
 8005b04:	2d00      	cmp	r5, #0
 8005b06:	d04d      	beq.n	8005ba4 <_printf_i+0x1b4>
 8005b08:	4615      	mov	r5, r2
 8005b0a:	fbb6 f1f3 	udiv	r1, r6, r3
 8005b0e:	fb03 6711 	mls	r7, r3, r1, r6
 8005b12:	5dc7      	ldrb	r7, [r0, r7]
 8005b14:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005b18:	4637      	mov	r7, r6
 8005b1a:	42bb      	cmp	r3, r7
 8005b1c:	460e      	mov	r6, r1
 8005b1e:	d9f4      	bls.n	8005b0a <_printf_i+0x11a>
 8005b20:	2b08      	cmp	r3, #8
 8005b22:	d10b      	bne.n	8005b3c <_printf_i+0x14c>
 8005b24:	6823      	ldr	r3, [r4, #0]
 8005b26:	07de      	lsls	r6, r3, #31
 8005b28:	d508      	bpl.n	8005b3c <_printf_i+0x14c>
 8005b2a:	6923      	ldr	r3, [r4, #16]
 8005b2c:	6861      	ldr	r1, [r4, #4]
 8005b2e:	4299      	cmp	r1, r3
 8005b30:	bfde      	ittt	le
 8005b32:	2330      	movle	r3, #48	; 0x30
 8005b34:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005b38:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005b3c:	1b52      	subs	r2, r2, r5
 8005b3e:	6122      	str	r2, [r4, #16]
 8005b40:	f8cd a000 	str.w	sl, [sp]
 8005b44:	464b      	mov	r3, r9
 8005b46:	aa03      	add	r2, sp, #12
 8005b48:	4621      	mov	r1, r4
 8005b4a:	4640      	mov	r0, r8
 8005b4c:	f7ff fee2 	bl	8005914 <_printf_common>
 8005b50:	3001      	adds	r0, #1
 8005b52:	d14c      	bne.n	8005bee <_printf_i+0x1fe>
 8005b54:	f04f 30ff 	mov.w	r0, #4294967295
 8005b58:	b004      	add	sp, #16
 8005b5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005b5e:	4835      	ldr	r0, [pc, #212]	; (8005c34 <_printf_i+0x244>)
 8005b60:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8005b64:	6829      	ldr	r1, [r5, #0]
 8005b66:	6823      	ldr	r3, [r4, #0]
 8005b68:	f851 6b04 	ldr.w	r6, [r1], #4
 8005b6c:	6029      	str	r1, [r5, #0]
 8005b6e:	061d      	lsls	r5, r3, #24
 8005b70:	d514      	bpl.n	8005b9c <_printf_i+0x1ac>
 8005b72:	07df      	lsls	r7, r3, #31
 8005b74:	bf44      	itt	mi
 8005b76:	f043 0320 	orrmi.w	r3, r3, #32
 8005b7a:	6023      	strmi	r3, [r4, #0]
 8005b7c:	b91e      	cbnz	r6, 8005b86 <_printf_i+0x196>
 8005b7e:	6823      	ldr	r3, [r4, #0]
 8005b80:	f023 0320 	bic.w	r3, r3, #32
 8005b84:	6023      	str	r3, [r4, #0]
 8005b86:	2310      	movs	r3, #16
 8005b88:	e7b0      	b.n	8005aec <_printf_i+0xfc>
 8005b8a:	6823      	ldr	r3, [r4, #0]
 8005b8c:	f043 0320 	orr.w	r3, r3, #32
 8005b90:	6023      	str	r3, [r4, #0]
 8005b92:	2378      	movs	r3, #120	; 0x78
 8005b94:	4828      	ldr	r0, [pc, #160]	; (8005c38 <_printf_i+0x248>)
 8005b96:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005b9a:	e7e3      	b.n	8005b64 <_printf_i+0x174>
 8005b9c:	0659      	lsls	r1, r3, #25
 8005b9e:	bf48      	it	mi
 8005ba0:	b2b6      	uxthmi	r6, r6
 8005ba2:	e7e6      	b.n	8005b72 <_printf_i+0x182>
 8005ba4:	4615      	mov	r5, r2
 8005ba6:	e7bb      	b.n	8005b20 <_printf_i+0x130>
 8005ba8:	682b      	ldr	r3, [r5, #0]
 8005baa:	6826      	ldr	r6, [r4, #0]
 8005bac:	6961      	ldr	r1, [r4, #20]
 8005bae:	1d18      	adds	r0, r3, #4
 8005bb0:	6028      	str	r0, [r5, #0]
 8005bb2:	0635      	lsls	r5, r6, #24
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	d501      	bpl.n	8005bbc <_printf_i+0x1cc>
 8005bb8:	6019      	str	r1, [r3, #0]
 8005bba:	e002      	b.n	8005bc2 <_printf_i+0x1d2>
 8005bbc:	0670      	lsls	r0, r6, #25
 8005bbe:	d5fb      	bpl.n	8005bb8 <_printf_i+0x1c8>
 8005bc0:	8019      	strh	r1, [r3, #0]
 8005bc2:	2300      	movs	r3, #0
 8005bc4:	6123      	str	r3, [r4, #16]
 8005bc6:	4615      	mov	r5, r2
 8005bc8:	e7ba      	b.n	8005b40 <_printf_i+0x150>
 8005bca:	682b      	ldr	r3, [r5, #0]
 8005bcc:	1d1a      	adds	r2, r3, #4
 8005bce:	602a      	str	r2, [r5, #0]
 8005bd0:	681d      	ldr	r5, [r3, #0]
 8005bd2:	6862      	ldr	r2, [r4, #4]
 8005bd4:	2100      	movs	r1, #0
 8005bd6:	4628      	mov	r0, r5
 8005bd8:	f7fa fafa 	bl	80001d0 <memchr>
 8005bdc:	b108      	cbz	r0, 8005be2 <_printf_i+0x1f2>
 8005bde:	1b40      	subs	r0, r0, r5
 8005be0:	6060      	str	r0, [r4, #4]
 8005be2:	6863      	ldr	r3, [r4, #4]
 8005be4:	6123      	str	r3, [r4, #16]
 8005be6:	2300      	movs	r3, #0
 8005be8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005bec:	e7a8      	b.n	8005b40 <_printf_i+0x150>
 8005bee:	6923      	ldr	r3, [r4, #16]
 8005bf0:	462a      	mov	r2, r5
 8005bf2:	4649      	mov	r1, r9
 8005bf4:	4640      	mov	r0, r8
 8005bf6:	47d0      	blx	sl
 8005bf8:	3001      	adds	r0, #1
 8005bfa:	d0ab      	beq.n	8005b54 <_printf_i+0x164>
 8005bfc:	6823      	ldr	r3, [r4, #0]
 8005bfe:	079b      	lsls	r3, r3, #30
 8005c00:	d413      	bmi.n	8005c2a <_printf_i+0x23a>
 8005c02:	68e0      	ldr	r0, [r4, #12]
 8005c04:	9b03      	ldr	r3, [sp, #12]
 8005c06:	4298      	cmp	r0, r3
 8005c08:	bfb8      	it	lt
 8005c0a:	4618      	movlt	r0, r3
 8005c0c:	e7a4      	b.n	8005b58 <_printf_i+0x168>
 8005c0e:	2301      	movs	r3, #1
 8005c10:	4632      	mov	r2, r6
 8005c12:	4649      	mov	r1, r9
 8005c14:	4640      	mov	r0, r8
 8005c16:	47d0      	blx	sl
 8005c18:	3001      	adds	r0, #1
 8005c1a:	d09b      	beq.n	8005b54 <_printf_i+0x164>
 8005c1c:	3501      	adds	r5, #1
 8005c1e:	68e3      	ldr	r3, [r4, #12]
 8005c20:	9903      	ldr	r1, [sp, #12]
 8005c22:	1a5b      	subs	r3, r3, r1
 8005c24:	42ab      	cmp	r3, r5
 8005c26:	dcf2      	bgt.n	8005c0e <_printf_i+0x21e>
 8005c28:	e7eb      	b.n	8005c02 <_printf_i+0x212>
 8005c2a:	2500      	movs	r5, #0
 8005c2c:	f104 0619 	add.w	r6, r4, #25
 8005c30:	e7f5      	b.n	8005c1e <_printf_i+0x22e>
 8005c32:	bf00      	nop
 8005c34:	08006a61 	.word	0x08006a61
 8005c38:	08006a72 	.word	0x08006a72

08005c3c <_sbrk_r>:
 8005c3c:	b538      	push	{r3, r4, r5, lr}
 8005c3e:	4d06      	ldr	r5, [pc, #24]	; (8005c58 <_sbrk_r+0x1c>)
 8005c40:	2300      	movs	r3, #0
 8005c42:	4604      	mov	r4, r0
 8005c44:	4608      	mov	r0, r1
 8005c46:	602b      	str	r3, [r5, #0]
 8005c48:	f7fb fb54 	bl	80012f4 <_sbrk>
 8005c4c:	1c43      	adds	r3, r0, #1
 8005c4e:	d102      	bne.n	8005c56 <_sbrk_r+0x1a>
 8005c50:	682b      	ldr	r3, [r5, #0]
 8005c52:	b103      	cbz	r3, 8005c56 <_sbrk_r+0x1a>
 8005c54:	6023      	str	r3, [r4, #0]
 8005c56:	bd38      	pop	{r3, r4, r5, pc}
 8005c58:	200001ec 	.word	0x200001ec

08005c5c <__sread>:
 8005c5c:	b510      	push	{r4, lr}
 8005c5e:	460c      	mov	r4, r1
 8005c60:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005c64:	f000 f8f8 	bl	8005e58 <_read_r>
 8005c68:	2800      	cmp	r0, #0
 8005c6a:	bfab      	itete	ge
 8005c6c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005c6e:	89a3      	ldrhlt	r3, [r4, #12]
 8005c70:	181b      	addge	r3, r3, r0
 8005c72:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005c76:	bfac      	ite	ge
 8005c78:	6563      	strge	r3, [r4, #84]	; 0x54
 8005c7a:	81a3      	strhlt	r3, [r4, #12]
 8005c7c:	bd10      	pop	{r4, pc}

08005c7e <__swrite>:
 8005c7e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005c82:	461f      	mov	r7, r3
 8005c84:	898b      	ldrh	r3, [r1, #12]
 8005c86:	05db      	lsls	r3, r3, #23
 8005c88:	4605      	mov	r5, r0
 8005c8a:	460c      	mov	r4, r1
 8005c8c:	4616      	mov	r6, r2
 8005c8e:	d505      	bpl.n	8005c9c <__swrite+0x1e>
 8005c90:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005c94:	2302      	movs	r3, #2
 8005c96:	2200      	movs	r2, #0
 8005c98:	f000 f868 	bl	8005d6c <_lseek_r>
 8005c9c:	89a3      	ldrh	r3, [r4, #12]
 8005c9e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005ca2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005ca6:	81a3      	strh	r3, [r4, #12]
 8005ca8:	4632      	mov	r2, r6
 8005caa:	463b      	mov	r3, r7
 8005cac:	4628      	mov	r0, r5
 8005cae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005cb2:	f000 b817 	b.w	8005ce4 <_write_r>

08005cb6 <__sseek>:
 8005cb6:	b510      	push	{r4, lr}
 8005cb8:	460c      	mov	r4, r1
 8005cba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005cbe:	f000 f855 	bl	8005d6c <_lseek_r>
 8005cc2:	1c43      	adds	r3, r0, #1
 8005cc4:	89a3      	ldrh	r3, [r4, #12]
 8005cc6:	bf15      	itete	ne
 8005cc8:	6560      	strne	r0, [r4, #84]	; 0x54
 8005cca:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005cce:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005cd2:	81a3      	strheq	r3, [r4, #12]
 8005cd4:	bf18      	it	ne
 8005cd6:	81a3      	strhne	r3, [r4, #12]
 8005cd8:	bd10      	pop	{r4, pc}

08005cda <__sclose>:
 8005cda:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005cde:	f000 b813 	b.w	8005d08 <_close_r>
	...

08005ce4 <_write_r>:
 8005ce4:	b538      	push	{r3, r4, r5, lr}
 8005ce6:	4d07      	ldr	r5, [pc, #28]	; (8005d04 <_write_r+0x20>)
 8005ce8:	4604      	mov	r4, r0
 8005cea:	4608      	mov	r0, r1
 8005cec:	4611      	mov	r1, r2
 8005cee:	2200      	movs	r2, #0
 8005cf0:	602a      	str	r2, [r5, #0]
 8005cf2:	461a      	mov	r2, r3
 8005cf4:	f7fb faad 	bl	8001252 <_write>
 8005cf8:	1c43      	adds	r3, r0, #1
 8005cfa:	d102      	bne.n	8005d02 <_write_r+0x1e>
 8005cfc:	682b      	ldr	r3, [r5, #0]
 8005cfe:	b103      	cbz	r3, 8005d02 <_write_r+0x1e>
 8005d00:	6023      	str	r3, [r4, #0]
 8005d02:	bd38      	pop	{r3, r4, r5, pc}
 8005d04:	200001ec 	.word	0x200001ec

08005d08 <_close_r>:
 8005d08:	b538      	push	{r3, r4, r5, lr}
 8005d0a:	4d06      	ldr	r5, [pc, #24]	; (8005d24 <_close_r+0x1c>)
 8005d0c:	2300      	movs	r3, #0
 8005d0e:	4604      	mov	r4, r0
 8005d10:	4608      	mov	r0, r1
 8005d12:	602b      	str	r3, [r5, #0]
 8005d14:	f7fb fab9 	bl	800128a <_close>
 8005d18:	1c43      	adds	r3, r0, #1
 8005d1a:	d102      	bne.n	8005d22 <_close_r+0x1a>
 8005d1c:	682b      	ldr	r3, [r5, #0]
 8005d1e:	b103      	cbz	r3, 8005d22 <_close_r+0x1a>
 8005d20:	6023      	str	r3, [r4, #0]
 8005d22:	bd38      	pop	{r3, r4, r5, pc}
 8005d24:	200001ec 	.word	0x200001ec

08005d28 <_fstat_r>:
 8005d28:	b538      	push	{r3, r4, r5, lr}
 8005d2a:	4d07      	ldr	r5, [pc, #28]	; (8005d48 <_fstat_r+0x20>)
 8005d2c:	2300      	movs	r3, #0
 8005d2e:	4604      	mov	r4, r0
 8005d30:	4608      	mov	r0, r1
 8005d32:	4611      	mov	r1, r2
 8005d34:	602b      	str	r3, [r5, #0]
 8005d36:	f7fb fab4 	bl	80012a2 <_fstat>
 8005d3a:	1c43      	adds	r3, r0, #1
 8005d3c:	d102      	bne.n	8005d44 <_fstat_r+0x1c>
 8005d3e:	682b      	ldr	r3, [r5, #0]
 8005d40:	b103      	cbz	r3, 8005d44 <_fstat_r+0x1c>
 8005d42:	6023      	str	r3, [r4, #0]
 8005d44:	bd38      	pop	{r3, r4, r5, pc}
 8005d46:	bf00      	nop
 8005d48:	200001ec 	.word	0x200001ec

08005d4c <_isatty_r>:
 8005d4c:	b538      	push	{r3, r4, r5, lr}
 8005d4e:	4d06      	ldr	r5, [pc, #24]	; (8005d68 <_isatty_r+0x1c>)
 8005d50:	2300      	movs	r3, #0
 8005d52:	4604      	mov	r4, r0
 8005d54:	4608      	mov	r0, r1
 8005d56:	602b      	str	r3, [r5, #0]
 8005d58:	f7fb fab3 	bl	80012c2 <_isatty>
 8005d5c:	1c43      	adds	r3, r0, #1
 8005d5e:	d102      	bne.n	8005d66 <_isatty_r+0x1a>
 8005d60:	682b      	ldr	r3, [r5, #0]
 8005d62:	b103      	cbz	r3, 8005d66 <_isatty_r+0x1a>
 8005d64:	6023      	str	r3, [r4, #0]
 8005d66:	bd38      	pop	{r3, r4, r5, pc}
 8005d68:	200001ec 	.word	0x200001ec

08005d6c <_lseek_r>:
 8005d6c:	b538      	push	{r3, r4, r5, lr}
 8005d6e:	4d07      	ldr	r5, [pc, #28]	; (8005d8c <_lseek_r+0x20>)
 8005d70:	4604      	mov	r4, r0
 8005d72:	4608      	mov	r0, r1
 8005d74:	4611      	mov	r1, r2
 8005d76:	2200      	movs	r2, #0
 8005d78:	602a      	str	r2, [r5, #0]
 8005d7a:	461a      	mov	r2, r3
 8005d7c:	f7fb faac 	bl	80012d8 <_lseek>
 8005d80:	1c43      	adds	r3, r0, #1
 8005d82:	d102      	bne.n	8005d8a <_lseek_r+0x1e>
 8005d84:	682b      	ldr	r3, [r5, #0]
 8005d86:	b103      	cbz	r3, 8005d8a <_lseek_r+0x1e>
 8005d88:	6023      	str	r3, [r4, #0]
 8005d8a:	bd38      	pop	{r3, r4, r5, pc}
 8005d8c:	200001ec 	.word	0x200001ec

08005d90 <memcpy>:
 8005d90:	440a      	add	r2, r1
 8005d92:	4291      	cmp	r1, r2
 8005d94:	f100 33ff 	add.w	r3, r0, #4294967295
 8005d98:	d100      	bne.n	8005d9c <memcpy+0xc>
 8005d9a:	4770      	bx	lr
 8005d9c:	b510      	push	{r4, lr}
 8005d9e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005da2:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005da6:	4291      	cmp	r1, r2
 8005da8:	d1f9      	bne.n	8005d9e <memcpy+0xe>
 8005daa:	bd10      	pop	{r4, pc}

08005dac <memmove>:
 8005dac:	4288      	cmp	r0, r1
 8005dae:	b510      	push	{r4, lr}
 8005db0:	eb01 0402 	add.w	r4, r1, r2
 8005db4:	d902      	bls.n	8005dbc <memmove+0x10>
 8005db6:	4284      	cmp	r4, r0
 8005db8:	4623      	mov	r3, r4
 8005dba:	d807      	bhi.n	8005dcc <memmove+0x20>
 8005dbc:	1e43      	subs	r3, r0, #1
 8005dbe:	42a1      	cmp	r1, r4
 8005dc0:	d008      	beq.n	8005dd4 <memmove+0x28>
 8005dc2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005dc6:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005dca:	e7f8      	b.n	8005dbe <memmove+0x12>
 8005dcc:	4402      	add	r2, r0
 8005dce:	4601      	mov	r1, r0
 8005dd0:	428a      	cmp	r2, r1
 8005dd2:	d100      	bne.n	8005dd6 <memmove+0x2a>
 8005dd4:	bd10      	pop	{r4, pc}
 8005dd6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005dda:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005dde:	e7f7      	b.n	8005dd0 <memmove+0x24>

08005de0 <__malloc_lock>:
 8005de0:	4801      	ldr	r0, [pc, #4]	; (8005de8 <__malloc_lock+0x8>)
 8005de2:	f7ff baf3 	b.w	80053cc <__retarget_lock_acquire_recursive>
 8005de6:	bf00      	nop
 8005de8:	200001e0 	.word	0x200001e0

08005dec <__malloc_unlock>:
 8005dec:	4801      	ldr	r0, [pc, #4]	; (8005df4 <__malloc_unlock+0x8>)
 8005dee:	f7ff baee 	b.w	80053ce <__retarget_lock_release_recursive>
 8005df2:	bf00      	nop
 8005df4:	200001e0 	.word	0x200001e0

08005df8 <_realloc_r>:
 8005df8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005dfc:	4680      	mov	r8, r0
 8005dfe:	4614      	mov	r4, r2
 8005e00:	460e      	mov	r6, r1
 8005e02:	b921      	cbnz	r1, 8005e0e <_realloc_r+0x16>
 8005e04:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005e08:	4611      	mov	r1, r2
 8005e0a:	f7ff bbb3 	b.w	8005574 <_malloc_r>
 8005e0e:	b92a      	cbnz	r2, 8005e1c <_realloc_r+0x24>
 8005e10:	f7ff fb44 	bl	800549c <_free_r>
 8005e14:	4625      	mov	r5, r4
 8005e16:	4628      	mov	r0, r5
 8005e18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005e1c:	f000 f82e 	bl	8005e7c <_malloc_usable_size_r>
 8005e20:	4284      	cmp	r4, r0
 8005e22:	4607      	mov	r7, r0
 8005e24:	d802      	bhi.n	8005e2c <_realloc_r+0x34>
 8005e26:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8005e2a:	d812      	bhi.n	8005e52 <_realloc_r+0x5a>
 8005e2c:	4621      	mov	r1, r4
 8005e2e:	4640      	mov	r0, r8
 8005e30:	f7ff fba0 	bl	8005574 <_malloc_r>
 8005e34:	4605      	mov	r5, r0
 8005e36:	2800      	cmp	r0, #0
 8005e38:	d0ed      	beq.n	8005e16 <_realloc_r+0x1e>
 8005e3a:	42bc      	cmp	r4, r7
 8005e3c:	4622      	mov	r2, r4
 8005e3e:	4631      	mov	r1, r6
 8005e40:	bf28      	it	cs
 8005e42:	463a      	movcs	r2, r7
 8005e44:	f7ff ffa4 	bl	8005d90 <memcpy>
 8005e48:	4631      	mov	r1, r6
 8005e4a:	4640      	mov	r0, r8
 8005e4c:	f7ff fb26 	bl	800549c <_free_r>
 8005e50:	e7e1      	b.n	8005e16 <_realloc_r+0x1e>
 8005e52:	4635      	mov	r5, r6
 8005e54:	e7df      	b.n	8005e16 <_realloc_r+0x1e>
	...

08005e58 <_read_r>:
 8005e58:	b538      	push	{r3, r4, r5, lr}
 8005e5a:	4d07      	ldr	r5, [pc, #28]	; (8005e78 <_read_r+0x20>)
 8005e5c:	4604      	mov	r4, r0
 8005e5e:	4608      	mov	r0, r1
 8005e60:	4611      	mov	r1, r2
 8005e62:	2200      	movs	r2, #0
 8005e64:	602a      	str	r2, [r5, #0]
 8005e66:	461a      	mov	r2, r3
 8005e68:	f7fb f9d6 	bl	8001218 <_read>
 8005e6c:	1c43      	adds	r3, r0, #1
 8005e6e:	d102      	bne.n	8005e76 <_read_r+0x1e>
 8005e70:	682b      	ldr	r3, [r5, #0]
 8005e72:	b103      	cbz	r3, 8005e76 <_read_r+0x1e>
 8005e74:	6023      	str	r3, [r4, #0]
 8005e76:	bd38      	pop	{r3, r4, r5, pc}
 8005e78:	200001ec 	.word	0x200001ec

08005e7c <_malloc_usable_size_r>:
 8005e7c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005e80:	1f18      	subs	r0, r3, #4
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	bfbc      	itt	lt
 8005e86:	580b      	ldrlt	r3, [r1, r0]
 8005e88:	18c0      	addlt	r0, r0, r3
 8005e8a:	4770      	bx	lr

08005e8c <_init>:
 8005e8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e8e:	bf00      	nop
 8005e90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005e92:	bc08      	pop	{r3}
 8005e94:	469e      	mov	lr, r3
 8005e96:	4770      	bx	lr

08005e98 <_fini>:
 8005e98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e9a:	bf00      	nop
 8005e9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005e9e:	bc08      	pop	{r3}
 8005ea0:	469e      	mov	lr, r3
 8005ea2:	4770      	bx	lr
