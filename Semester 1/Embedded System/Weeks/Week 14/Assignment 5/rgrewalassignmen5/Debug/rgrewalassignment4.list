
rgrewalassignment4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000af9c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000127c  0800b130  0800b130  0001b130  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c3ac  0800c3ac  000201e0  2**0
                  CONTENTS
  4 .ARM          00000008  0800c3ac  0800c3ac  0001c3ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c3b4  0800c3b4  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c3b4  0800c3b4  0001c3b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c3b8  0800c3b8  0001c3b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  0800c3bc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000168  200001e0  0800c59c  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000348  0800c59c  00020348  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   000143b6  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002924  00000000  00000000  000345c6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000012a8  00000000  00000000  00036ef0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001188  00000000  00000000  00038198  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000230e7  00000000  00000000  00039320  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015379  00000000  00000000  0005c407  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cf486  00000000  00000000  00071780  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00140c06  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000067c4  00000000  00000000  00140c58  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e0 	.word	0x200001e0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800b114 	.word	0x0800b114

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e4 	.word	0x200001e4
 80001cc:	0800b114 	.word	0x0800b114

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b9aa 	b.w	8000ff4 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	; (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	; (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9d08      	ldr	r5, [sp, #32]
 8000d2a:	4604      	mov	r4, r0
 8000d2c:	468e      	mov	lr, r1
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d14d      	bne.n	8000dce <__udivmoddi4+0xaa>
 8000d32:	428a      	cmp	r2, r1
 8000d34:	4694      	mov	ip, r2
 8000d36:	d969      	bls.n	8000e0c <__udivmoddi4+0xe8>
 8000d38:	fab2 f282 	clz	r2, r2
 8000d3c:	b152      	cbz	r2, 8000d54 <__udivmoddi4+0x30>
 8000d3e:	fa01 f302 	lsl.w	r3, r1, r2
 8000d42:	f1c2 0120 	rsb	r1, r2, #32
 8000d46:	fa20 f101 	lsr.w	r1, r0, r1
 8000d4a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d4e:	ea41 0e03 	orr.w	lr, r1, r3
 8000d52:	4094      	lsls	r4, r2
 8000d54:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d58:	0c21      	lsrs	r1, r4, #16
 8000d5a:	fbbe f6f8 	udiv	r6, lr, r8
 8000d5e:	fa1f f78c 	uxth.w	r7, ip
 8000d62:	fb08 e316 	mls	r3, r8, r6, lr
 8000d66:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d6a:	fb06 f107 	mul.w	r1, r6, r7
 8000d6e:	4299      	cmp	r1, r3
 8000d70:	d90a      	bls.n	8000d88 <__udivmoddi4+0x64>
 8000d72:	eb1c 0303 	adds.w	r3, ip, r3
 8000d76:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d7a:	f080 811f 	bcs.w	8000fbc <__udivmoddi4+0x298>
 8000d7e:	4299      	cmp	r1, r3
 8000d80:	f240 811c 	bls.w	8000fbc <__udivmoddi4+0x298>
 8000d84:	3e02      	subs	r6, #2
 8000d86:	4463      	add	r3, ip
 8000d88:	1a5b      	subs	r3, r3, r1
 8000d8a:	b2a4      	uxth	r4, r4
 8000d8c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d90:	fb08 3310 	mls	r3, r8, r0, r3
 8000d94:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d98:	fb00 f707 	mul.w	r7, r0, r7
 8000d9c:	42a7      	cmp	r7, r4
 8000d9e:	d90a      	bls.n	8000db6 <__udivmoddi4+0x92>
 8000da0:	eb1c 0404 	adds.w	r4, ip, r4
 8000da4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000da8:	f080 810a 	bcs.w	8000fc0 <__udivmoddi4+0x29c>
 8000dac:	42a7      	cmp	r7, r4
 8000dae:	f240 8107 	bls.w	8000fc0 <__udivmoddi4+0x29c>
 8000db2:	4464      	add	r4, ip
 8000db4:	3802      	subs	r0, #2
 8000db6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dba:	1be4      	subs	r4, r4, r7
 8000dbc:	2600      	movs	r6, #0
 8000dbe:	b11d      	cbz	r5, 8000dc8 <__udivmoddi4+0xa4>
 8000dc0:	40d4      	lsrs	r4, r2
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	e9c5 4300 	strd	r4, r3, [r5]
 8000dc8:	4631      	mov	r1, r6
 8000dca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dce:	428b      	cmp	r3, r1
 8000dd0:	d909      	bls.n	8000de6 <__udivmoddi4+0xc2>
 8000dd2:	2d00      	cmp	r5, #0
 8000dd4:	f000 80ef 	beq.w	8000fb6 <__udivmoddi4+0x292>
 8000dd8:	2600      	movs	r6, #0
 8000dda:	e9c5 0100 	strd	r0, r1, [r5]
 8000dde:	4630      	mov	r0, r6
 8000de0:	4631      	mov	r1, r6
 8000de2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000de6:	fab3 f683 	clz	r6, r3
 8000dea:	2e00      	cmp	r6, #0
 8000dec:	d14a      	bne.n	8000e84 <__udivmoddi4+0x160>
 8000dee:	428b      	cmp	r3, r1
 8000df0:	d302      	bcc.n	8000df8 <__udivmoddi4+0xd4>
 8000df2:	4282      	cmp	r2, r0
 8000df4:	f200 80f9 	bhi.w	8000fea <__udivmoddi4+0x2c6>
 8000df8:	1a84      	subs	r4, r0, r2
 8000dfa:	eb61 0303 	sbc.w	r3, r1, r3
 8000dfe:	2001      	movs	r0, #1
 8000e00:	469e      	mov	lr, r3
 8000e02:	2d00      	cmp	r5, #0
 8000e04:	d0e0      	beq.n	8000dc8 <__udivmoddi4+0xa4>
 8000e06:	e9c5 4e00 	strd	r4, lr, [r5]
 8000e0a:	e7dd      	b.n	8000dc8 <__udivmoddi4+0xa4>
 8000e0c:	b902      	cbnz	r2, 8000e10 <__udivmoddi4+0xec>
 8000e0e:	deff      	udf	#255	; 0xff
 8000e10:	fab2 f282 	clz	r2, r2
 8000e14:	2a00      	cmp	r2, #0
 8000e16:	f040 8092 	bne.w	8000f3e <__udivmoddi4+0x21a>
 8000e1a:	eba1 010c 	sub.w	r1, r1, ip
 8000e1e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e22:	fa1f fe8c 	uxth.w	lr, ip
 8000e26:	2601      	movs	r6, #1
 8000e28:	0c20      	lsrs	r0, r4, #16
 8000e2a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e2e:	fb07 1113 	mls	r1, r7, r3, r1
 8000e32:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e36:	fb0e f003 	mul.w	r0, lr, r3
 8000e3a:	4288      	cmp	r0, r1
 8000e3c:	d908      	bls.n	8000e50 <__udivmoddi4+0x12c>
 8000e3e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e42:	f103 38ff 	add.w	r8, r3, #4294967295
 8000e46:	d202      	bcs.n	8000e4e <__udivmoddi4+0x12a>
 8000e48:	4288      	cmp	r0, r1
 8000e4a:	f200 80cb 	bhi.w	8000fe4 <__udivmoddi4+0x2c0>
 8000e4e:	4643      	mov	r3, r8
 8000e50:	1a09      	subs	r1, r1, r0
 8000e52:	b2a4      	uxth	r4, r4
 8000e54:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e58:	fb07 1110 	mls	r1, r7, r0, r1
 8000e5c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e60:	fb0e fe00 	mul.w	lr, lr, r0
 8000e64:	45a6      	cmp	lr, r4
 8000e66:	d908      	bls.n	8000e7a <__udivmoddi4+0x156>
 8000e68:	eb1c 0404 	adds.w	r4, ip, r4
 8000e6c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e70:	d202      	bcs.n	8000e78 <__udivmoddi4+0x154>
 8000e72:	45a6      	cmp	lr, r4
 8000e74:	f200 80bb 	bhi.w	8000fee <__udivmoddi4+0x2ca>
 8000e78:	4608      	mov	r0, r1
 8000e7a:	eba4 040e 	sub.w	r4, r4, lr
 8000e7e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e82:	e79c      	b.n	8000dbe <__udivmoddi4+0x9a>
 8000e84:	f1c6 0720 	rsb	r7, r6, #32
 8000e88:	40b3      	lsls	r3, r6
 8000e8a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e8e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e92:	fa20 f407 	lsr.w	r4, r0, r7
 8000e96:	fa01 f306 	lsl.w	r3, r1, r6
 8000e9a:	431c      	orrs	r4, r3
 8000e9c:	40f9      	lsrs	r1, r7
 8000e9e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ea2:	fa00 f306 	lsl.w	r3, r0, r6
 8000ea6:	fbb1 f8f9 	udiv	r8, r1, r9
 8000eaa:	0c20      	lsrs	r0, r4, #16
 8000eac:	fa1f fe8c 	uxth.w	lr, ip
 8000eb0:	fb09 1118 	mls	r1, r9, r8, r1
 8000eb4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000eb8:	fb08 f00e 	mul.w	r0, r8, lr
 8000ebc:	4288      	cmp	r0, r1
 8000ebe:	fa02 f206 	lsl.w	r2, r2, r6
 8000ec2:	d90b      	bls.n	8000edc <__udivmoddi4+0x1b8>
 8000ec4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ec8:	f108 3aff 	add.w	sl, r8, #4294967295
 8000ecc:	f080 8088 	bcs.w	8000fe0 <__udivmoddi4+0x2bc>
 8000ed0:	4288      	cmp	r0, r1
 8000ed2:	f240 8085 	bls.w	8000fe0 <__udivmoddi4+0x2bc>
 8000ed6:	f1a8 0802 	sub.w	r8, r8, #2
 8000eda:	4461      	add	r1, ip
 8000edc:	1a09      	subs	r1, r1, r0
 8000ede:	b2a4      	uxth	r4, r4
 8000ee0:	fbb1 f0f9 	udiv	r0, r1, r9
 8000ee4:	fb09 1110 	mls	r1, r9, r0, r1
 8000ee8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000eec:	fb00 fe0e 	mul.w	lr, r0, lr
 8000ef0:	458e      	cmp	lr, r1
 8000ef2:	d908      	bls.n	8000f06 <__udivmoddi4+0x1e2>
 8000ef4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ef8:	f100 34ff 	add.w	r4, r0, #4294967295
 8000efc:	d26c      	bcs.n	8000fd8 <__udivmoddi4+0x2b4>
 8000efe:	458e      	cmp	lr, r1
 8000f00:	d96a      	bls.n	8000fd8 <__udivmoddi4+0x2b4>
 8000f02:	3802      	subs	r0, #2
 8000f04:	4461      	add	r1, ip
 8000f06:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000f0a:	fba0 9402 	umull	r9, r4, r0, r2
 8000f0e:	eba1 010e 	sub.w	r1, r1, lr
 8000f12:	42a1      	cmp	r1, r4
 8000f14:	46c8      	mov	r8, r9
 8000f16:	46a6      	mov	lr, r4
 8000f18:	d356      	bcc.n	8000fc8 <__udivmoddi4+0x2a4>
 8000f1a:	d053      	beq.n	8000fc4 <__udivmoddi4+0x2a0>
 8000f1c:	b15d      	cbz	r5, 8000f36 <__udivmoddi4+0x212>
 8000f1e:	ebb3 0208 	subs.w	r2, r3, r8
 8000f22:	eb61 010e 	sbc.w	r1, r1, lr
 8000f26:	fa01 f707 	lsl.w	r7, r1, r7
 8000f2a:	fa22 f306 	lsr.w	r3, r2, r6
 8000f2e:	40f1      	lsrs	r1, r6
 8000f30:	431f      	orrs	r7, r3
 8000f32:	e9c5 7100 	strd	r7, r1, [r5]
 8000f36:	2600      	movs	r6, #0
 8000f38:	4631      	mov	r1, r6
 8000f3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f3e:	f1c2 0320 	rsb	r3, r2, #32
 8000f42:	40d8      	lsrs	r0, r3
 8000f44:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f48:	fa21 f303 	lsr.w	r3, r1, r3
 8000f4c:	4091      	lsls	r1, r2
 8000f4e:	4301      	orrs	r1, r0
 8000f50:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f54:	fa1f fe8c 	uxth.w	lr, ip
 8000f58:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f5c:	fb07 3610 	mls	r6, r7, r0, r3
 8000f60:	0c0b      	lsrs	r3, r1, #16
 8000f62:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f66:	fb00 f60e 	mul.w	r6, r0, lr
 8000f6a:	429e      	cmp	r6, r3
 8000f6c:	fa04 f402 	lsl.w	r4, r4, r2
 8000f70:	d908      	bls.n	8000f84 <__udivmoddi4+0x260>
 8000f72:	eb1c 0303 	adds.w	r3, ip, r3
 8000f76:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f7a:	d22f      	bcs.n	8000fdc <__udivmoddi4+0x2b8>
 8000f7c:	429e      	cmp	r6, r3
 8000f7e:	d92d      	bls.n	8000fdc <__udivmoddi4+0x2b8>
 8000f80:	3802      	subs	r0, #2
 8000f82:	4463      	add	r3, ip
 8000f84:	1b9b      	subs	r3, r3, r6
 8000f86:	b289      	uxth	r1, r1
 8000f88:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f8c:	fb07 3316 	mls	r3, r7, r6, r3
 8000f90:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f94:	fb06 f30e 	mul.w	r3, r6, lr
 8000f98:	428b      	cmp	r3, r1
 8000f9a:	d908      	bls.n	8000fae <__udivmoddi4+0x28a>
 8000f9c:	eb1c 0101 	adds.w	r1, ip, r1
 8000fa0:	f106 38ff 	add.w	r8, r6, #4294967295
 8000fa4:	d216      	bcs.n	8000fd4 <__udivmoddi4+0x2b0>
 8000fa6:	428b      	cmp	r3, r1
 8000fa8:	d914      	bls.n	8000fd4 <__udivmoddi4+0x2b0>
 8000faa:	3e02      	subs	r6, #2
 8000fac:	4461      	add	r1, ip
 8000fae:	1ac9      	subs	r1, r1, r3
 8000fb0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000fb4:	e738      	b.n	8000e28 <__udivmoddi4+0x104>
 8000fb6:	462e      	mov	r6, r5
 8000fb8:	4628      	mov	r0, r5
 8000fba:	e705      	b.n	8000dc8 <__udivmoddi4+0xa4>
 8000fbc:	4606      	mov	r6, r0
 8000fbe:	e6e3      	b.n	8000d88 <__udivmoddi4+0x64>
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	e6f8      	b.n	8000db6 <__udivmoddi4+0x92>
 8000fc4:	454b      	cmp	r3, r9
 8000fc6:	d2a9      	bcs.n	8000f1c <__udivmoddi4+0x1f8>
 8000fc8:	ebb9 0802 	subs.w	r8, r9, r2
 8000fcc:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000fd0:	3801      	subs	r0, #1
 8000fd2:	e7a3      	b.n	8000f1c <__udivmoddi4+0x1f8>
 8000fd4:	4646      	mov	r6, r8
 8000fd6:	e7ea      	b.n	8000fae <__udivmoddi4+0x28a>
 8000fd8:	4620      	mov	r0, r4
 8000fda:	e794      	b.n	8000f06 <__udivmoddi4+0x1e2>
 8000fdc:	4640      	mov	r0, r8
 8000fde:	e7d1      	b.n	8000f84 <__udivmoddi4+0x260>
 8000fe0:	46d0      	mov	r8, sl
 8000fe2:	e77b      	b.n	8000edc <__udivmoddi4+0x1b8>
 8000fe4:	3b02      	subs	r3, #2
 8000fe6:	4461      	add	r1, ip
 8000fe8:	e732      	b.n	8000e50 <__udivmoddi4+0x12c>
 8000fea:	4630      	mov	r0, r6
 8000fec:	e709      	b.n	8000e02 <__udivmoddi4+0xde>
 8000fee:	4464      	add	r4, ip
 8000ff0:	3802      	subs	r0, #2
 8000ff2:	e742      	b.n	8000e7a <__udivmoddi4+0x156>

08000ff4 <__aeabi_idiv0>:
 8000ff4:	4770      	bx	lr
 8000ff6:	bf00      	nop

08000ff8 <deBounceInit>:
#include <stdio.h>
#include "stm32l4xx_hal.h"
#include "stm32l4xx_hal_gpio.h"

void deBounceInit(int16_t pin, char port, int8_t mode)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b088      	sub	sp, #32
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	4603      	mov	r3, r0
 8001000:	80fb      	strh	r3, [r7, #6]
 8001002:	460b      	mov	r3, r1
 8001004:	717b      	strb	r3, [r7, #5]
 8001006:	4613      	mov	r3, r2
 8001008:	713b      	strb	r3, [r7, #4]
	GPIO_InitTypeDef GPIO_InitStruct;
	/*Configure GPIO pin : */
	GPIO_InitStruct.Pin = GPIO_PIN_0;
 800100a:	2301      	movs	r3, #1
 800100c:	60fb      	str	r3, [r7, #12]
	switch(pin)
 800100e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001012:	2b0f      	cmp	r3, #15
 8001014:	d85a      	bhi.n	80010cc <deBounceInit+0xd4>
 8001016:	a201      	add	r2, pc, #4	; (adr r2, 800101c <deBounceInit+0x24>)
 8001018:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800101c:	0800105d 	.word	0x0800105d
 8001020:	08001063 	.word	0x08001063
 8001024:	08001069 	.word	0x08001069
 8001028:	0800106f 	.word	0x0800106f
 800102c:	08001075 	.word	0x08001075
 8001030:	0800107b 	.word	0x0800107b
 8001034:	08001081 	.word	0x08001081
 8001038:	08001087 	.word	0x08001087
 800103c:	0800108d 	.word	0x0800108d
 8001040:	08001095 	.word	0x08001095
 8001044:	0800109d 	.word	0x0800109d
 8001048:	080010a5 	.word	0x080010a5
 800104c:	080010ad 	.word	0x080010ad
 8001050:	080010b5 	.word	0x080010b5
 8001054:	080010bd 	.word	0x080010bd
 8001058:	080010c5 	.word	0x080010c5
	{
		case 0: GPIO_InitStruct.Pin = GPIO_PIN_0; break;
 800105c:	2301      	movs	r3, #1
 800105e:	60fb      	str	r3, [r7, #12]
 8001060:	e038      	b.n	80010d4 <deBounceInit+0xdc>
		case 1: GPIO_InitStruct.Pin = GPIO_PIN_1; break;
 8001062:	2302      	movs	r3, #2
 8001064:	60fb      	str	r3, [r7, #12]
 8001066:	e035      	b.n	80010d4 <deBounceInit+0xdc>
		case 2: GPIO_InitStruct.Pin = GPIO_PIN_2; break;
 8001068:	2304      	movs	r3, #4
 800106a:	60fb      	str	r3, [r7, #12]
 800106c:	e032      	b.n	80010d4 <deBounceInit+0xdc>
		case 3: GPIO_InitStruct.Pin = GPIO_PIN_3; break;
 800106e:	2308      	movs	r3, #8
 8001070:	60fb      	str	r3, [r7, #12]
 8001072:	e02f      	b.n	80010d4 <deBounceInit+0xdc>
		case 4: GPIO_InitStruct.Pin = GPIO_PIN_4; break;
 8001074:	2310      	movs	r3, #16
 8001076:	60fb      	str	r3, [r7, #12]
 8001078:	e02c      	b.n	80010d4 <deBounceInit+0xdc>
		case 5: GPIO_InitStruct.Pin = GPIO_PIN_5; break;
 800107a:	2320      	movs	r3, #32
 800107c:	60fb      	str	r3, [r7, #12]
 800107e:	e029      	b.n	80010d4 <deBounceInit+0xdc>
		case 6: GPIO_InitStruct.Pin = GPIO_PIN_6; break;
 8001080:	2340      	movs	r3, #64	; 0x40
 8001082:	60fb      	str	r3, [r7, #12]
 8001084:	e026      	b.n	80010d4 <deBounceInit+0xdc>
		case 7: GPIO_InitStruct.Pin = GPIO_PIN_7; break;
 8001086:	2380      	movs	r3, #128	; 0x80
 8001088:	60fb      	str	r3, [r7, #12]
 800108a:	e023      	b.n	80010d4 <deBounceInit+0xdc>
		case 8: GPIO_InitStruct.Pin = GPIO_PIN_8; break;
 800108c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001090:	60fb      	str	r3, [r7, #12]
 8001092:	e01f      	b.n	80010d4 <deBounceInit+0xdc>
		case 9: GPIO_InitStruct.Pin = GPIO_PIN_9; break;
 8001094:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001098:	60fb      	str	r3, [r7, #12]
 800109a:	e01b      	b.n	80010d4 <deBounceInit+0xdc>
		case 10: GPIO_InitStruct.Pin = GPIO_PIN_10; break;
 800109c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80010a0:	60fb      	str	r3, [r7, #12]
 80010a2:	e017      	b.n	80010d4 <deBounceInit+0xdc>
		case 11: GPIO_InitStruct.Pin = GPIO_PIN_11; break;
 80010a4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80010a8:	60fb      	str	r3, [r7, #12]
 80010aa:	e013      	b.n	80010d4 <deBounceInit+0xdc>
		case 12: GPIO_InitStruct.Pin = GPIO_PIN_12; break;
 80010ac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80010b0:	60fb      	str	r3, [r7, #12]
 80010b2:	e00f      	b.n	80010d4 <deBounceInit+0xdc>
		case 13: GPIO_InitStruct.Pin = GPIO_PIN_13; break;
 80010b4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80010b8:	60fb      	str	r3, [r7, #12]
 80010ba:	e00b      	b.n	80010d4 <deBounceInit+0xdc>
		case 14: GPIO_InitStruct.Pin = GPIO_PIN_14; break;
 80010bc:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80010c0:	60fb      	str	r3, [r7, #12]
 80010c2:	e007      	b.n	80010d4 <deBounceInit+0xdc>
		case 15: GPIO_InitStruct.Pin = GPIO_PIN_15; break;
 80010c4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80010c8:	60fb      	str	r3, [r7, #12]
 80010ca:	e003      	b.n	80010d4 <deBounceInit+0xdc>
		default:
			printf( "bad gpio pin number in init\n\r");
 80010cc:	4821      	ldr	r0, [pc, #132]	; (8001154 <deBounceInit+0x15c>)
 80010ce:	f005 fbed 	bl	80068ac <iprintf>
			break;
 80010d2:	bf00      	nop
	}
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010d4:	2300      	movs	r3, #0
 80010d6:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80010d8:	2302      	movs	r3, #2
 80010da:	617b      	str	r3, [r7, #20]
	switch (mode)
 80010dc:	f997 3004 	ldrsb.w	r3, [r7, #4]
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d002      	beq.n	80010ea <deBounceInit+0xf2>
 80010e4:	2b01      	cmp	r3, #1
 80010e6:	d003      	beq.n	80010f0 <deBounceInit+0xf8>
 80010e8:	e005      	b.n	80010f6 <deBounceInit+0xfe>
	{
		case 0: GPIO_InitStruct.Pull = GPIO_PULLDOWN; break;
 80010ea:	2302      	movs	r3, #2
 80010ec:	617b      	str	r3, [r7, #20]
 80010ee:	e002      	b.n	80010f6 <deBounceInit+0xfe>
		case 1: GPIO_InitStruct.Pull = GPIO_PULLUP; break;
 80010f0:	2301      	movs	r3, #1
 80010f2:	617b      	str	r3, [r7, #20]
 80010f4:	bf00      	nop
	}
	switch (port)
 80010f6:	797b      	ldrb	r3, [r7, #5]
 80010f8:	2b43      	cmp	r3, #67	; 0x43
 80010fa:	d015      	beq.n	8001128 <deBounceInit+0x130>
 80010fc:	2b43      	cmp	r3, #67	; 0x43
 80010fe:	dc1a      	bgt.n	8001136 <deBounceInit+0x13e>
 8001100:	2b41      	cmp	r3, #65	; 0x41
 8001102:	d002      	beq.n	800110a <deBounceInit+0x112>
 8001104:	2b42      	cmp	r3, #66	; 0x42
 8001106:	d008      	beq.n	800111a <deBounceInit+0x122>
 8001108:	e015      	b.n	8001136 <deBounceInit+0x13e>
	{
		case 'A': HAL_GPIO_Init(GPIOA, &GPIO_InitStruct); break;
 800110a:	f107 030c 	add.w	r3, r7, #12
 800110e:	4619      	mov	r1, r3
 8001110:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001114:	f001 fbae 	bl	8002874 <HAL_GPIO_Init>
 8001118:	e011      	b.n	800113e <deBounceInit+0x146>
		case 'B': HAL_GPIO_Init(GPIOB, &GPIO_InitStruct); break;
 800111a:	f107 030c 	add.w	r3, r7, #12
 800111e:	4619      	mov	r1, r3
 8001120:	480d      	ldr	r0, [pc, #52]	; (8001158 <deBounceInit+0x160>)
 8001122:	f001 fba7 	bl	8002874 <HAL_GPIO_Init>
 8001126:	e00a      	b.n	800113e <deBounceInit+0x146>
		case 'C': HAL_GPIO_Init(GPIOC, &GPIO_InitStruct); break;
 8001128:	f107 030c 	add.w	r3, r7, #12
 800112c:	4619      	mov	r1, r3
 800112e:	480b      	ldr	r0, [pc, #44]	; (800115c <deBounceInit+0x164>)
 8001130:	f001 fba0 	bl	8002874 <HAL_GPIO_Init>
 8001134:	e003      	b.n	800113e <deBounceInit+0x146>
		default:
			printf( "bad gpio port number\n\r");
 8001136:	480a      	ldr	r0, [pc, #40]	; (8001160 <deBounceInit+0x168>)
 8001138:	f005 fbb8 	bl	80068ac <iprintf>
			break;
 800113c:	bf00      	nop
	}
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800113e:	f107 030c 	add.w	r3, r7, #12
 8001142:	4619      	mov	r1, r3
 8001144:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001148:	f001 fb94 	bl	8002874 <HAL_GPIO_Init>
}
 800114c:	bf00      	nop
 800114e:	3720      	adds	r7, #32
 8001150:	46bd      	mov	sp, r7
 8001152:	bd80      	pop	{r7, pc}
 8001154:	0800b130 	.word	0x0800b130
 8001158:	48000400 	.word	0x48000400
 800115c:	48000800 	.word	0x48000800
 8001160:	0800b150 	.word	0x0800b150

08001164 <deBounceReadPin>:

int8_t deBounceReadPin(int16_t pin, char port, int8_t stableInterval)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	b08a      	sub	sp, #40	; 0x28
 8001168:	af00      	add	r7, sp, #0
 800116a:	4603      	mov	r3, r0
 800116c:	80fb      	strh	r3, [r7, #6]
 800116e:	460b      	mov	r3, r1
 8001170:	717b      	strb	r3, [r7, #5]
 8001172:	4613      	mov	r3, r2
 8001174:	713b      	strb	r3, [r7, #4]
	GPIO_PinState pinState = GPIO_PIN_RESET;	//remember variables should be initialized
 8001176:	2300      	movs	r3, #0
 8001178:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	int8_t pinStateWeAreLookingFor = 0;
 800117c:	2300      	movs	r3, #0
 800117e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	int32_t msTimeStamp = HAL_GetTick();		//get a timeStamp in ms
 8001182:	f001 fa61 	bl	8002648 <HAL_GetTick>
 8001186:	4603      	mov	r3, r0
 8001188:	623b      	str	r3, [r7, #32]

	GPIO_InitTypeDef GPIO_InitStruct;
	GPIO_InitStruct.Pin = GPIO_PIN_0;
 800118a:	2301      	movs	r3, #1
 800118c:	60fb      	str	r3, [r7, #12]
		/*Configure GPIO pin : */
		switch(pin)
 800118e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001192:	2b0f      	cmp	r3, #15
 8001194:	d85a      	bhi.n	800124c <deBounceReadPin+0xe8>
 8001196:	a201      	add	r2, pc, #4	; (adr r2, 800119c <deBounceReadPin+0x38>)
 8001198:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800119c:	080011dd 	.word	0x080011dd
 80011a0:	080011e3 	.word	0x080011e3
 80011a4:	080011e9 	.word	0x080011e9
 80011a8:	080011ef 	.word	0x080011ef
 80011ac:	080011f5 	.word	0x080011f5
 80011b0:	080011fb 	.word	0x080011fb
 80011b4:	08001201 	.word	0x08001201
 80011b8:	08001207 	.word	0x08001207
 80011bc:	0800120d 	.word	0x0800120d
 80011c0:	08001215 	.word	0x08001215
 80011c4:	0800121d 	.word	0x0800121d
 80011c8:	08001225 	.word	0x08001225
 80011cc:	0800122d 	.word	0x0800122d
 80011d0:	08001235 	.word	0x08001235
 80011d4:	0800123d 	.word	0x0800123d
 80011d8:	08001245 	.word	0x08001245
		{
			case 0: GPIO_InitStruct.Pin = GPIO_PIN_0; break;
 80011dc:	2301      	movs	r3, #1
 80011de:	60fb      	str	r3, [r7, #12]
 80011e0:	e038      	b.n	8001254 <deBounceReadPin+0xf0>
			case 1: GPIO_InitStruct.Pin = GPIO_PIN_1; break;
 80011e2:	2302      	movs	r3, #2
 80011e4:	60fb      	str	r3, [r7, #12]
 80011e6:	e035      	b.n	8001254 <deBounceReadPin+0xf0>
			case 2: GPIO_InitStruct.Pin = GPIO_PIN_2; break;
 80011e8:	2304      	movs	r3, #4
 80011ea:	60fb      	str	r3, [r7, #12]
 80011ec:	e032      	b.n	8001254 <deBounceReadPin+0xf0>
			case 3: GPIO_InitStruct.Pin = GPIO_PIN_3; break;
 80011ee:	2308      	movs	r3, #8
 80011f0:	60fb      	str	r3, [r7, #12]
 80011f2:	e02f      	b.n	8001254 <deBounceReadPin+0xf0>
			case 4: GPIO_InitStruct.Pin = GPIO_PIN_4; break;
 80011f4:	2310      	movs	r3, #16
 80011f6:	60fb      	str	r3, [r7, #12]
 80011f8:	e02c      	b.n	8001254 <deBounceReadPin+0xf0>
			case 5: GPIO_InitStruct.Pin = GPIO_PIN_5; break;
 80011fa:	2320      	movs	r3, #32
 80011fc:	60fb      	str	r3, [r7, #12]
 80011fe:	e029      	b.n	8001254 <deBounceReadPin+0xf0>
			case 6: GPIO_InitStruct.Pin = GPIO_PIN_6; break;
 8001200:	2340      	movs	r3, #64	; 0x40
 8001202:	60fb      	str	r3, [r7, #12]
 8001204:	e026      	b.n	8001254 <deBounceReadPin+0xf0>
			case 7: GPIO_InitStruct.Pin = GPIO_PIN_7; break;
 8001206:	2380      	movs	r3, #128	; 0x80
 8001208:	60fb      	str	r3, [r7, #12]
 800120a:	e023      	b.n	8001254 <deBounceReadPin+0xf0>
			case 8: GPIO_InitStruct.Pin = GPIO_PIN_8; break;
 800120c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001210:	60fb      	str	r3, [r7, #12]
 8001212:	e01f      	b.n	8001254 <deBounceReadPin+0xf0>
			case 9: GPIO_InitStruct.Pin = GPIO_PIN_9; break;
 8001214:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001218:	60fb      	str	r3, [r7, #12]
 800121a:	e01b      	b.n	8001254 <deBounceReadPin+0xf0>
			case 10: GPIO_InitStruct.Pin = GPIO_PIN_10; break;
 800121c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001220:	60fb      	str	r3, [r7, #12]
 8001222:	e017      	b.n	8001254 <deBounceReadPin+0xf0>
			case 11: GPIO_InitStruct.Pin = GPIO_PIN_11; break;
 8001224:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001228:	60fb      	str	r3, [r7, #12]
 800122a:	e013      	b.n	8001254 <deBounceReadPin+0xf0>
			case 12: GPIO_InitStruct.Pin = GPIO_PIN_12; break;
 800122c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001230:	60fb      	str	r3, [r7, #12]
 8001232:	e00f      	b.n	8001254 <deBounceReadPin+0xf0>
			case 13: GPIO_InitStruct.Pin = GPIO_PIN_13; break;
 8001234:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001238:	60fb      	str	r3, [r7, #12]
 800123a:	e00b      	b.n	8001254 <deBounceReadPin+0xf0>
			case 14: GPIO_InitStruct.Pin = GPIO_PIN_14; break;
 800123c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001240:	60fb      	str	r3, [r7, #12]
 8001242:	e007      	b.n	8001254 <deBounceReadPin+0xf0>
			case 15: GPIO_InitStruct.Pin = GPIO_PIN_15; break;
 8001244:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001248:	60fb      	str	r3, [r7, #12]
 800124a:	e003      	b.n	8001254 <deBounceReadPin+0xf0>
			default:
				printf( "bad gpio pin number in read pin\n\r");
 800124c:	4847      	ldr	r0, [pc, #284]	; (800136c <deBounceReadPin+0x208>)
 800124e:	f005 fb2d 	bl	80068ac <iprintf>
				break;
 8001252:	bf00      	nop
		}


	/* let's do our first read of the pin
	 * and to do that we need to incorporate the port we're going to read*/
	pinState = 0 ;
 8001254:	2300      	movs	r3, #0
 8001256:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	switch (port)
 800125a:	797b      	ldrb	r3, [r7, #5]
 800125c:	2b43      	cmp	r3, #67	; 0x43
 800125e:	d01b      	beq.n	8001298 <deBounceReadPin+0x134>
 8001260:	2b43      	cmp	r3, #67	; 0x43
 8001262:	dc23      	bgt.n	80012ac <deBounceReadPin+0x148>
 8001264:	2b41      	cmp	r3, #65	; 0x41
 8001266:	d002      	beq.n	800126e <deBounceReadPin+0x10a>
 8001268:	2b42      	cmp	r3, #66	; 0x42
 800126a:	d00b      	beq.n	8001284 <deBounceReadPin+0x120>
 800126c:	e01e      	b.n	80012ac <deBounceReadPin+0x148>
	{
		case 'A': pinState = HAL_GPIO_ReadPin(GPIOA, GPIO_InitStruct.Pin); break;
 800126e:	68fb      	ldr	r3, [r7, #12]
 8001270:	b29b      	uxth	r3, r3
 8001272:	4619      	mov	r1, r3
 8001274:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001278:	f001 fc66 	bl	8002b48 <HAL_GPIO_ReadPin>
 800127c:	4603      	mov	r3, r0
 800127e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001282:	e017      	b.n	80012b4 <deBounceReadPin+0x150>
		case 'B': pinState = HAL_GPIO_ReadPin(GPIOB, GPIO_InitStruct.Pin); break;
 8001284:	68fb      	ldr	r3, [r7, #12]
 8001286:	b29b      	uxth	r3, r3
 8001288:	4619      	mov	r1, r3
 800128a:	4839      	ldr	r0, [pc, #228]	; (8001370 <deBounceReadPin+0x20c>)
 800128c:	f001 fc5c 	bl	8002b48 <HAL_GPIO_ReadPin>
 8001290:	4603      	mov	r3, r0
 8001292:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001296:	e00d      	b.n	80012b4 <deBounceReadPin+0x150>
		case 'C': pinState = HAL_GPIO_ReadPin(GPIOC, GPIO_InitStruct.Pin); break;
 8001298:	68fb      	ldr	r3, [r7, #12]
 800129a:	b29b      	uxth	r3, r3
 800129c:	4619      	mov	r1, r3
 800129e:	4835      	ldr	r0, [pc, #212]	; (8001374 <deBounceReadPin+0x210>)
 80012a0:	f001 fc52 	bl	8002b48 <HAL_GPIO_ReadPin>
 80012a4:	4603      	mov	r3, r0
 80012a6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80012aa:	e003      	b.n	80012b4 <deBounceReadPin+0x150>
		default:
			printf( "bad gpio port name in read pin\n\r");
 80012ac:	4832      	ldr	r0, [pc, #200]	; (8001378 <deBounceReadPin+0x214>)
 80012ae:	f005 fafd 	bl	80068ac <iprintf>
			break;
 80012b2:	bf00      	nop
	}
	/* is the GPIO pin high or low 	 */
	if(pinState == GPIO_PIN_RESET )		// if low we're looking for more 0's
 80012b4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d103      	bne.n	80012c4 <deBounceReadPin+0x160>
	{
		pinStateWeAreLookingFor = 0;
 80012bc:	2300      	movs	r3, #0
 80012be:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80012c2:	e043      	b.n	800134c <deBounceReadPin+0x1e8>
	}
	else
	{//we're looking for more 1's
		pinStateWeAreLookingFor = 1;
 80012c4:	2301      	movs	r3, #1
 80012c6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	}

	/* now, let's read the pin again until x stable ms have elapsed */
	while (HAL_GetTick() < (msTimeStamp + stableInterval))
 80012ca:	e03f      	b.n	800134c <deBounceReadPin+0x1e8>
	{

		switch (port)
 80012cc:	797b      	ldrb	r3, [r7, #5]
 80012ce:	2b43      	cmp	r3, #67	; 0x43
 80012d0:	d01b      	beq.n	800130a <deBounceReadPin+0x1a6>
 80012d2:	2b43      	cmp	r3, #67	; 0x43
 80012d4:	dc23      	bgt.n	800131e <deBounceReadPin+0x1ba>
 80012d6:	2b41      	cmp	r3, #65	; 0x41
 80012d8:	d002      	beq.n	80012e0 <deBounceReadPin+0x17c>
 80012da:	2b42      	cmp	r3, #66	; 0x42
 80012dc:	d00b      	beq.n	80012f6 <deBounceReadPin+0x192>
 80012de:	e01e      	b.n	800131e <deBounceReadPin+0x1ba>
		{
			case 'A': pinState = HAL_GPIO_ReadPin(GPIOA, GPIO_InitStruct.Pin); break;
 80012e0:	68fb      	ldr	r3, [r7, #12]
 80012e2:	b29b      	uxth	r3, r3
 80012e4:	4619      	mov	r1, r3
 80012e6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80012ea:	f001 fc2d 	bl	8002b48 <HAL_GPIO_ReadPin>
 80012ee:	4603      	mov	r3, r0
 80012f0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80012f4:	e017      	b.n	8001326 <deBounceReadPin+0x1c2>
			case 'B': pinState = HAL_GPIO_ReadPin(GPIOB, GPIO_InitStruct.Pin); break;
 80012f6:	68fb      	ldr	r3, [r7, #12]
 80012f8:	b29b      	uxth	r3, r3
 80012fa:	4619      	mov	r1, r3
 80012fc:	481c      	ldr	r0, [pc, #112]	; (8001370 <deBounceReadPin+0x20c>)
 80012fe:	f001 fc23 	bl	8002b48 <HAL_GPIO_ReadPin>
 8001302:	4603      	mov	r3, r0
 8001304:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001308:	e00d      	b.n	8001326 <deBounceReadPin+0x1c2>
			case 'C': pinState = HAL_GPIO_ReadPin(GPIOC, GPIO_InitStruct.Pin); break;
 800130a:	68fb      	ldr	r3, [r7, #12]
 800130c:	b29b      	uxth	r3, r3
 800130e:	4619      	mov	r1, r3
 8001310:	4818      	ldr	r0, [pc, #96]	; (8001374 <deBounceReadPin+0x210>)
 8001312:	f001 fc19 	bl	8002b48 <HAL_GPIO_ReadPin>
 8001316:	4603      	mov	r3, r0
 8001318:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800131c:	e003      	b.n	8001326 <deBounceReadPin+0x1c2>
			default:
				printf( "bad gpio port letter in read pin\n\r");
 800131e:	4817      	ldr	r0, [pc, #92]	; (800137c <deBounceReadPin+0x218>)
 8001320:	f005 fac4 	bl	80068ac <iprintf>
				break;
 8001324:	bf00      	nop
		}
		if(pinState != pinStateWeAreLookingFor)
 8001326:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800132a:	f997 3026 	ldrsb.w	r3, [r7, #38]	; 0x26
 800132e:	429a      	cmp	r2, r3
 8001330:	d00c      	beq.n	800134c <deBounceReadPin+0x1e8>
		{
			pinStateWeAreLookingFor = !pinStateWeAreLookingFor;
 8001332:	f997 3026 	ldrsb.w	r3, [r7, #38]	; 0x26
 8001336:	2b00      	cmp	r3, #0
 8001338:	bf0c      	ite	eq
 800133a:	2301      	moveq	r3, #1
 800133c:	2300      	movne	r3, #0
 800133e:	b2db      	uxtb	r3, r3
 8001340:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
			/* reset the timeStamp as we've had a change in state			 */
			msTimeStamp = HAL_GetTick();
 8001344:	f001 f980 	bl	8002648 <HAL_GetTick>
 8001348:	4603      	mov	r3, r0
 800134a:	623b      	str	r3, [r7, #32]
	while (HAL_GetTick() < (msTimeStamp + stableInterval))
 800134c:	f001 f97c 	bl	8002648 <HAL_GetTick>
 8001350:	4601      	mov	r1, r0
 8001352:	f997 2004 	ldrsb.w	r2, [r7, #4]
 8001356:	6a3b      	ldr	r3, [r7, #32]
 8001358:	4413      	add	r3, r2
 800135a:	4299      	cmp	r1, r3
 800135c:	d3b6      	bcc.n	80012cc <deBounceReadPin+0x168>
		}
	}
	return (pinStateWeAreLookingFor);
 800135e:	f997 3026 	ldrsb.w	r3, [r7, #38]	; 0x26
}
 8001362:	4618      	mov	r0, r3
 8001364:	3728      	adds	r7, #40	; 0x28
 8001366:	46bd      	mov	sp, r7
 8001368:	bd80      	pop	{r7, pc}
 800136a:	bf00      	nop
 800136c:	0800b168 	.word	0x0800b168
 8001370:	48000400 	.word	0x48000400
 8001374:	48000800 	.word	0x48000800
 8001378:	0800b18c 	.word	0x0800b18c
 800137c:	0800b1b0 	.word	0x0800b1b0

08001380 <pushButtonInit>:
void pulsePWM(TIM_HandleTypeDef *htim1, int32_t pulseTime){
	HAL_TIMEx_PWMN_Start(htim1, TIM_CHANNEL_1);
	HAL_Delay(pulseTime);
	HAL_TIMEx_PWMN_Stop(htim1, TIM_CHANNEL_1);
}
void pushButtonInit(){
 8001380:	b580      	push	{r7, lr}
 8001382:	af00      	add	r7, sp, #0
	deBounceInit(chequingPbPin, 'A', 1);
 8001384:	2300      	movs	r3, #0
 8001386:	2201      	movs	r2, #1
 8001388:	2141      	movs	r1, #65	; 0x41
 800138a:	4618      	mov	r0, r3
 800138c:	f7ff fe34 	bl	8000ff8 <deBounceInit>
	deBounceInit(savingsPbPin,'A',1);
 8001390:	2301      	movs	r3, #1
 8001392:	2201      	movs	r2, #1
 8001394:	2141      	movs	r1, #65	; 0x41
 8001396:	4618      	mov	r0, r3
 8001398:	f7ff fe2e 	bl	8000ff8 <deBounceInit>
	deBounceInit(okPbPin, 'A',1);
 800139c:	2303      	movs	r3, #3
 800139e:	2201      	movs	r2, #1
 80013a0:	2141      	movs	r1, #65	; 0x41
 80013a2:	4618      	mov	r0, r3
 80013a4:	f7ff fe28 	bl	8000ff8 <deBounceInit>
	deBounceInit(cancelPbPin,'A',1);
 80013a8:	2304      	movs	r3, #4
 80013aa:	2201      	movs	r2, #1
 80013ac:	2141      	movs	r1, #65	; 0x41
 80013ae:	4618      	mov	r0, r3
 80013b0:	f7ff fe22 	bl	8000ff8 <deBounceInit>
}
 80013b4:	bf00      	nop
 80013b6:	bd80      	pop	{r7, pc}

080013b8 <displayWelcome>:
void displayWelcome(void) {
 80013b8:	b580      	push	{r7, lr}
 80013ba:	b086      	sub	sp, #24
 80013bc:	af02      	add	r7, sp, #8
	char stringBuffer[16] = { 0 };
 80013be:	2300      	movs	r3, #0
 80013c0:	603b      	str	r3, [r7, #0]
 80013c2:	1d3b      	adds	r3, r7, #4
 80013c4:	2200      	movs	r2, #0
 80013c6:	601a      	str	r2, [r3, #0]
 80013c8:	605a      	str	r2, [r3, #4]
 80013ca:	609a      	str	r2, [r3, #8]
	ssd1331_clear_screen(BLACK);
 80013cc:	2000      	movs	r0, #0
 80013ce:	f000 fda0 	bl	8001f12 <ssd1331_clear_screen>
	snprintf(stringBuffer, 16, "Welcome ");
 80013d2:	463b      	mov	r3, r7
 80013d4:	4a08      	ldr	r2, [pc, #32]	; (80013f8 <displayWelcome+0x40>)
 80013d6:	2110      	movs	r1, #16
 80013d8:	4618      	mov	r0, r3
 80013da:	f005 fb13 	bl	8006a04 <sniprintf>
	ssd1331_display_string(0, 0, stringBuffer, FONT_1206, WHITE);
 80013de:	463a      	mov	r2, r7
 80013e0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80013e4:	9300      	str	r3, [sp, #0]
 80013e6:	230c      	movs	r3, #12
 80013e8:	2100      	movs	r1, #0
 80013ea:	2000      	movs	r0, #0
 80013ec:	f000 fd48 	bl	8001e80 <ssd1331_display_string>
}
 80013f0:	bf00      	nop
 80013f2:	3710      	adds	r7, #16
 80013f4:	46bd      	mov	sp, r7
 80013f6:	bd80      	pop	{r7, pc}
 80013f8:	0800b1e0 	.word	0x0800b1e0

080013fc <displayAmount>:
void displayAmount(float amount){
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b088      	sub	sp, #32
 8001400:	af02      	add	r7, sp, #8
 8001402:	ed87 0a01 	vstr	s0, [r7, #4]
	char stringBuffer[16];
	ssd1331_clear_screen(BLACK);
 8001406:	2000      	movs	r0, #0
 8001408:	f000 fd83 	bl	8001f12 <ssd1331_clear_screen>
	snprintf(stringBuffer,16, "$%.2f", amount);
 800140c:	6878      	ldr	r0, [r7, #4]
 800140e:	f7ff f89b 	bl	8000548 <__aeabi_f2d>
 8001412:	4602      	mov	r2, r0
 8001414:	460b      	mov	r3, r1
 8001416:	f107 0008 	add.w	r0, r7, #8
 800141a:	e9cd 2300 	strd	r2, r3, [sp]
 800141e:	4a09      	ldr	r2, [pc, #36]	; (8001444 <displayAmount+0x48>)
 8001420:	2110      	movs	r1, #16
 8001422:	f005 faef 	bl	8006a04 <sniprintf>
	ssd1331_display_string(0,0, stringBuffer, FONT_1206, WHITE);
 8001426:	f107 0208 	add.w	r2, r7, #8
 800142a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800142e:	9300      	str	r3, [sp, #0]
 8001430:	230c      	movs	r3, #12
 8001432:	2100      	movs	r1, #0
 8001434:	2000      	movs	r0, #0
 8001436:	f000 fd23 	bl	8001e80 <ssd1331_display_string>
}
 800143a:	bf00      	nop
 800143c:	3718      	adds	r7, #24
 800143e:	46bd      	mov	sp, r7
 8001440:	bd80      	pop	{r7, pc}
 8001442:	bf00      	nop
 8001444:	0800b1ec 	.word	0x0800b1ec

08001448 <displayChequingOrSaving>:
void displayChequingOrSaving(){
 8001448:	b580      	push	{r7, lr}
 800144a:	b08a      	sub	sp, #40	; 0x28
 800144c:	af02      	add	r7, sp, #8
  char stringBuffer[32];
  ssd1331_clear_screen(BLACK);
 800144e:	2000      	movs	r0, #0
 8001450:	f000 fd5f 	bl	8001f12 <ssd1331_clear_screen>
  snprintf(stringBuffer,32,"Chequing Or Saving\r\n");
 8001454:	463b      	mov	r3, r7
 8001456:	4a09      	ldr	r2, [pc, #36]	; (800147c <displayChequingOrSaving+0x34>)
 8001458:	2120      	movs	r1, #32
 800145a:	4618      	mov	r0, r3
 800145c:	f005 fad2 	bl	8006a04 <sniprintf>
  ssd1331_display_string(0,0,stringBuffer,FONT_1206,WHITE);
 8001460:	463a      	mov	r2, r7
 8001462:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001466:	9300      	str	r3, [sp, #0]
 8001468:	230c      	movs	r3, #12
 800146a:	2100      	movs	r1, #0
 800146c:	2000      	movs	r0, #0
 800146e:	f000 fd07 	bl	8001e80 <ssd1331_display_string>
}
 8001472:	bf00      	nop
 8001474:	3720      	adds	r7, #32
 8001476:	46bd      	mov	sp, r7
 8001478:	bd80      	pop	{r7, pc}
 800147a:	bf00      	nop
 800147c:	0800b1f4 	.word	0x0800b1f4

08001480 <displayTransactionCancel>:
void displayTransactionCancel(){
 8001480:	b580      	push	{r7, lr}
 8001482:	b08a      	sub	sp, #40	; 0x28
 8001484:	af02      	add	r7, sp, #8
  char stringBuffer[32];
  ssd1331_clear_screen(BLACK);
 8001486:	2000      	movs	r0, #0
 8001488:	f000 fd43 	bl	8001f12 <ssd1331_clear_screen>
  snprintf(stringBuffer,32,"Transaction Cancelled ");
 800148c:	463b      	mov	r3, r7
 800148e:	4a09      	ldr	r2, [pc, #36]	; (80014b4 <displayTransactionCancel+0x34>)
 8001490:	2120      	movs	r1, #32
 8001492:	4618      	mov	r0, r3
 8001494:	f005 fab6 	bl	8006a04 <sniprintf>
  ssd1331_display_string(0,0,stringBuffer,FONT_1206,WHITE);
 8001498:	463a      	mov	r2, r7
 800149a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800149e:	9300      	str	r3, [sp, #0]
 80014a0:	230c      	movs	r3, #12
 80014a2:	2100      	movs	r1, #0
 80014a4:	2000      	movs	r0, #0
 80014a6:	f000 fceb 	bl	8001e80 <ssd1331_display_string>
}
 80014aa:	bf00      	nop
 80014ac:	3720      	adds	r7, #32
 80014ae:	46bd      	mov	sp, r7
 80014b0:	bd80      	pop	{r7, pc}
 80014b2:	bf00      	nop
 80014b4:	0800b20c 	.word	0x0800b20c

080014b8 <displayEnterPin>:
void displayEnterPin(){
 80014b8:	b580      	push	{r7, lr}
 80014ba:	b086      	sub	sp, #24
 80014bc:	af02      	add	r7, sp, #8
  char stringBuffer[16];
  ssd1331_clear_screen(BLACK);
 80014be:	2000      	movs	r0, #0
 80014c0:	f000 fd27 	bl	8001f12 <ssd1331_clear_screen>
  snprintf(stringBuffer, 16,"Enter PIN....\r\n");
 80014c4:	463b      	mov	r3, r7
 80014c6:	4a09      	ldr	r2, [pc, #36]	; (80014ec <displayEnterPin+0x34>)
 80014c8:	2110      	movs	r1, #16
 80014ca:	4618      	mov	r0, r3
 80014cc:	f005 fa9a 	bl	8006a04 <sniprintf>
  ssd1331_display_string(0,0,stringBuffer,FONT_1206,WHITE);
 80014d0:	463a      	mov	r2, r7
 80014d2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80014d6:	9300      	str	r3, [sp, #0]
 80014d8:	230c      	movs	r3, #12
 80014da:	2100      	movs	r1, #0
 80014dc:	2000      	movs	r0, #0
 80014de:	f000 fccf 	bl	8001e80 <ssd1331_display_string>
}
 80014e2:	bf00      	nop
 80014e4:	3710      	adds	r7, #16
 80014e6:	46bd      	mov	sp, r7
 80014e8:	bd80      	pop	{r7, pc}
 80014ea:	bf00      	nop
 80014ec:	0800b224 	.word	0x0800b224

080014f0 <checkIfAmountRecord>:
float checkIfAmountRecord(){
 80014f0:	b580      	push	{r7, lr}
 80014f2:	b082      	sub	sp, #8
 80014f4:	af00      	add	r7, sp, #0
	float debitAmount = 0;
 80014f6:	f04f 0300 	mov.w	r3, #0
 80014fa:	603b      	str	r3, [r7, #0]
	int16_t result = 0;
 80014fc:	2300      	movs	r3, #0
 80014fe:	80fb      	strh	r3, [r7, #6]
	printf("Waiting for Debit Amount to be recieved on Serial Port\r\n");
 8001500:	480c      	ldr	r0, [pc, #48]	; (8001534 <checkIfAmountRecord+0x44>)
 8001502:	f005 fa59 	bl	80069b8 <puts>
	result = scanf("%f", &debitAmount);
 8001506:	463b      	mov	r3, r7
 8001508:	4619      	mov	r1, r3
 800150a:	480b      	ldr	r0, [pc, #44]	; (8001538 <checkIfAmountRecord+0x48>)
 800150c:	f005 fa5c 	bl	80069c8 <iscanf>
 8001510:	4603      	mov	r3, r0
 8001512:	80fb      	strh	r3, [r7, #6]
	if(result == 0){
 8001514:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001518:	2b00      	cmp	r3, #0
 800151a:	d102      	bne.n	8001522 <checkIfAmountRecord+0x32>
		return 0.0f;
 800151c:	f04f 0300 	mov.w	r3, #0
 8001520:	e000      	b.n	8001524 <checkIfAmountRecord+0x34>
	}
	return debitAmount;
 8001522:	683b      	ldr	r3, [r7, #0]
}
 8001524:	ee07 3a90 	vmov	s15, r3
 8001528:	eeb0 0a67 	vmov.f32	s0, s15
 800152c:	3708      	adds	r7, #8
 800152e:	46bd      	mov	sp, r7
 8001530:	bd80      	pop	{r7, pc}
 8001532:	bf00      	nop
 8001534:	0800b234 	.word	0x0800b234
 8001538:	0800b26c 	.word	0x0800b26c

0800153c <checkOkOrCancel>:
enum pushButton checkOkOrCancel(){
 800153c:	b580      	push	{r7, lr}
 800153e:	af00      	add	r7, sp, #0
	if(deBounceReadPin(cancelPbPin, 'A', 10) == 0){
 8001540:	2304      	movs	r3, #4
 8001542:	220a      	movs	r2, #10
 8001544:	2141      	movs	r1, #65	; 0x41
 8001546:	4618      	mov	r0, r3
 8001548:	f7ff fe0c 	bl	8001164 <deBounceReadPin>
 800154c:	4603      	mov	r3, r0
 800154e:	2b00      	cmp	r3, #0
 8001550:	d101      	bne.n	8001556 <checkOkOrCancel+0x1a>
		return cancel;
 8001552:	2304      	movs	r3, #4
 8001554:	e00b      	b.n	800156e <checkOkOrCancel+0x32>
	}else if(deBounceReadPin(okPbPin,'A',10) == 0){
 8001556:	2303      	movs	r3, #3
 8001558:	220a      	movs	r2, #10
 800155a:	2141      	movs	r1, #65	; 0x41
 800155c:	4618      	mov	r0, r3
 800155e:	f7ff fe01 	bl	8001164 <deBounceReadPin>
 8001562:	4603      	mov	r3, r0
 8001564:	2b00      	cmp	r3, #0
 8001566:	d101      	bne.n	800156c <checkOkOrCancel+0x30>
		return ok;
 8001568:	2303      	movs	r3, #3
 800156a:	e000      	b.n	800156e <checkOkOrCancel+0x32>
	}
	return none;
 800156c:	2300      	movs	r3, #0
}
 800156e:	4618      	mov	r0, r3
 8001570:	bd80      	pop	{r7, pc}

08001572 <BankResponse>:
enum bankResponse BankResponse(uint pin){
 8001572:	b480      	push	{r7}
 8001574:	b083      	sub	sp, #12
 8001576:	af00      	add	r7, sp, #0
 8001578:	6078      	str	r0, [r7, #4]
  if(pin == 1234){
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	f240 42d2 	movw	r2, #1234	; 0x4d2
 8001580:	4293      	cmp	r3, r2
 8001582:	d101      	bne.n	8001588 <BankResponse+0x16>
    return confirm;
 8001584:	2301      	movs	r3, #1
 8001586:	e000      	b.n	800158a <BankResponse+0x18>
  }else{
    return denied;
 8001588:	2300      	movs	r3, #0
  }
}
 800158a:	4618      	mov	r0, r3
 800158c:	370c      	adds	r7, #12
 800158e:	46bd      	mov	sp, r7
 8001590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001594:	4770      	bx	lr
	...

08001598 <printReciet>:
void printReciet(float amount){
 8001598:	b580      	push	{r7, lr}
 800159a:	b082      	sub	sp, #8
 800159c:	af00      	add	r7, sp, #0
 800159e:	ed87 0a01 	vstr	s0, [r7, #4]
	printf("\n\n\n");
 80015a2:	4816      	ldr	r0, [pc, #88]	; (80015fc <printReciet+0x64>)
 80015a4:	f005 fa08 	bl	80069b8 <puts>
	printf("***********************\r\n");
 80015a8:	4815      	ldr	r0, [pc, #84]	; (8001600 <printReciet+0x68>)
 80015aa:	f005 fa05 	bl	80069b8 <puts>
	printf("Shopping Center\r\n");
 80015ae:	4815      	ldr	r0, [pc, #84]	; (8001604 <printReciet+0x6c>)
 80015b0:	f005 fa02 	bl	80069b8 <puts>
	printf("***********************\r\n");
 80015b4:	4812      	ldr	r0, [pc, #72]	; (8001600 <printReciet+0x68>)
 80015b6:	f005 f9ff 	bl	80069b8 <puts>
	printf("Date: 2023-04-01\r\r TIME: 00:00:00\r\n");
 80015ba:	4813      	ldr	r0, [pc, #76]	; (8001608 <printReciet+0x70>)
 80015bc:	f005 f9fc 	bl	80069b8 <puts>
	printf("TOTAL CAD $%f \r\n",amount);
 80015c0:	6878      	ldr	r0, [r7, #4]
 80015c2:	f7fe ffc1 	bl	8000548 <__aeabi_f2d>
 80015c6:	4602      	mov	r2, r0
 80015c8:	460b      	mov	r3, r1
 80015ca:	4810      	ldr	r0, [pc, #64]	; (800160c <printReciet+0x74>)
 80015cc:	f005 f96e 	bl	80068ac <iprintf>
	printf("Approved - Thank You\r\n");
 80015d0:	480f      	ldr	r0, [pc, #60]	; (8001610 <printReciet+0x78>)
 80015d2:	f005 f9f1 	bl	80069b8 <puts>
	printf("NO SIGNITURE TRANSACTION\r\n");
 80015d6:	480f      	ldr	r0, [pc, #60]	; (8001614 <printReciet+0x7c>)
 80015d8:	f005 f9ee 	bl	80069b8 <puts>
	printf("-- IMPORTANT --\r\n");
 80015dc:	480e      	ldr	r0, [pc, #56]	; (8001618 <printReciet+0x80>)
 80015de:	f005 f9eb 	bl	80069b8 <puts>
	printf("Retain This Copy For Your Records\r\n");
 80015e2:	480e      	ldr	r0, [pc, #56]	; (800161c <printReciet+0x84>)
 80015e4:	f005 f9e8 	bl	80069b8 <puts>
	printf("-- Customer Copy --\r\n");
 80015e8:	480d      	ldr	r0, [pc, #52]	; (8001620 <printReciet+0x88>)
 80015ea:	f005 f9e5 	bl	80069b8 <puts>
	printf("\n\n\n");
 80015ee:	4803      	ldr	r0, [pc, #12]	; (80015fc <printReciet+0x64>)
 80015f0:	f005 f9e2 	bl	80069b8 <puts>
}
 80015f4:	bf00      	nop
 80015f6:	3708      	adds	r7, #8
 80015f8:	46bd      	mov	sp, r7
 80015fa:	bd80      	pop	{r7, pc}
 80015fc:	0800b270 	.word	0x0800b270
 8001600:	0800b274 	.word	0x0800b274
 8001604:	0800b290 	.word	0x0800b290
 8001608:	0800b2a4 	.word	0x0800b2a4
 800160c:	0800b2c8 	.word	0x0800b2c8
 8001610:	0800b2dc 	.word	0x0800b2dc
 8001614:	0800b2f4 	.word	0x0800b2f4
 8001618:	0800b310 	.word	0x0800b310
 800161c:	0800b324 	.word	0x0800b324
 8001620:	0800b348 	.word	0x0800b348

08001624 <checkChequingOrSavingPressed>:
enum pushButton checkChequingOrSavingPressed(){
 8001624:	b580      	push	{r7, lr}
 8001626:	af00      	add	r7, sp, #0
  if(deBounceReadPin(chequingPbPin, 'A', 10) == 0){
 8001628:	2300      	movs	r3, #0
 800162a:	220a      	movs	r2, #10
 800162c:	2141      	movs	r1, #65	; 0x41
 800162e:	4618      	mov	r0, r3
 8001630:	f7ff fd98 	bl	8001164 <deBounceReadPin>
 8001634:	4603      	mov	r3, r0
 8001636:	2b00      	cmp	r3, #0
 8001638:	d101      	bne.n	800163e <checkChequingOrSavingPressed+0x1a>
    return chequing;
 800163a:	2301      	movs	r3, #1
 800163c:	e016      	b.n	800166c <checkChequingOrSavingPressed+0x48>
  }else if(deBounceReadPin(savingsPbPin, 'A',10) == 0){
 800163e:	2301      	movs	r3, #1
 8001640:	220a      	movs	r2, #10
 8001642:	2141      	movs	r1, #65	; 0x41
 8001644:	4618      	mov	r0, r3
 8001646:	f7ff fd8d 	bl	8001164 <deBounceReadPin>
 800164a:	4603      	mov	r3, r0
 800164c:	2b00      	cmp	r3, #0
 800164e:	d101      	bne.n	8001654 <checkChequingOrSavingPressed+0x30>
    return savings;
 8001650:	2302      	movs	r3, #2
 8001652:	e00b      	b.n	800166c <checkChequingOrSavingPressed+0x48>
  }else if(deBounceReadPin(cancelPbPin,'A',10) == 0){
 8001654:	2304      	movs	r3, #4
 8001656:	220a      	movs	r2, #10
 8001658:	2141      	movs	r1, #65	; 0x41
 800165a:	4618      	mov	r0, r3
 800165c:	f7ff fd82 	bl	8001164 <deBounceReadPin>
 8001660:	4603      	mov	r3, r0
 8001662:	2b00      	cmp	r3, #0
 8001664:	d101      	bne.n	800166a <checkChequingOrSavingPressed+0x46>
    return cancel;
 8001666:	2304      	movs	r3, #4
 8001668:	e000      	b.n	800166c <checkChequingOrSavingPressed+0x48>
  }
  return none;
 800166a:	2300      	movs	r3, #0
}
 800166c:	4618      	mov	r0, r3
 800166e:	bd80      	pop	{r7, pc}

08001670 <displayOkCancel>:
void displayOkCancel(){
 8001670:	b580      	push	{r7, lr}
 8001672:	b086      	sub	sp, #24
 8001674:	af02      	add	r7, sp, #8
	char stringBuffer[16];
	snprintf(stringBuffer, 16,"Ok or Cancel?");
 8001676:	463b      	mov	r3, r7
 8001678:	4a08      	ldr	r2, [pc, #32]	; (800169c <displayOkCancel+0x2c>)
 800167a:	2110      	movs	r1, #16
 800167c:	4618      	mov	r0, r3
 800167e:	f005 f9c1 	bl	8006a04 <sniprintf>
	ssd1331_display_string(0,10, stringBuffer, FONT_1206, WHITE);
 8001682:	463a      	mov	r2, r7
 8001684:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001688:	9300      	str	r3, [sp, #0]
 800168a:	230c      	movs	r3, #12
 800168c:	210a      	movs	r1, #10
 800168e:	2000      	movs	r0, #0
 8001690:	f000 fbf6 	bl	8001e80 <ssd1331_display_string>
}
 8001694:	bf00      	nop
 8001696:	3710      	adds	r7, #16
 8001698:	46bd      	mov	sp, r7
 800169a:	bd80      	pop	{r7, pc}
 800169c:	0800b360 	.word	0x0800b360

080016a0 <displayWrongPin>:
void displayWrongPin(){
 80016a0:	b580      	push	{r7, lr}
 80016a2:	b08a      	sub	sp, #40	; 0x28
 80016a4:	af02      	add	r7, sp, #8
	char stringBuffer[32];
	ssd1331_clear_screen(BLACK);
 80016a6:	2000      	movs	r0, #0
 80016a8:	f000 fc33 	bl	8001f12 <ssd1331_clear_screen>
	snprintf(stringBuffer, 32, "You have Enter The Wrong Pin!");
 80016ac:	463b      	mov	r3, r7
 80016ae:	4a09      	ldr	r2, [pc, #36]	; (80016d4 <displayWrongPin+0x34>)
 80016b0:	2120      	movs	r1, #32
 80016b2:	4618      	mov	r0, r3
 80016b4:	f005 f9a6 	bl	8006a04 <sniprintf>
	ssd1331_display_string(0,10,stringBuffer,FONT_1206, RED);
 80016b8:	463a      	mov	r2, r7
 80016ba:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80016be:	9300      	str	r3, [sp, #0]
 80016c0:	230c      	movs	r3, #12
 80016c2:	210a      	movs	r1, #10
 80016c4:	2000      	movs	r0, #0
 80016c6:	f000 fbdb 	bl	8001e80 <ssd1331_display_string>
}
 80016ca:	bf00      	nop
 80016cc:	3720      	adds	r7, #32
 80016ce:	46bd      	mov	sp, r7
 80016d0:	bd80      	pop	{r7, pc}
 80016d2:	bf00      	nop
 80016d4:	0800b370 	.word	0x0800b370

080016d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80016d8:	b580      	push	{r7, lr}
 80016da:	b086      	sub	sp, #24
 80016dc:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80016de:	f000 ff4a 	bl	8002576 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80016e2:	f000 f909 	bl	80018f8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80016e6:	f000 fa65 	bl	8001bb4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80016ea:	f000 fa33 	bl	8001b54 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 80016ee:	f000 f9a3 	bl	8001a38 <MX_TIM1_Init>
  MX_SPI1_Init();
 80016f2:	f000 f963 	bl	80019bc <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  ssd1331_init();
 80016f6:	f000 fc31 	bl	8001f5c <ssd1331_init>
  pushButtonInit();
 80016fa:	f7ff fe41 	bl	8001380 <pushButtonInit>
  //displayWelcome();
  int8_t transactionState = 1;
 80016fe:	2301      	movs	r3, #1
 8001700:	73fb      	strb	r3, [r7, #15]
  uint pin = 0;
 8001702:	2300      	movs	r3, #0
 8001704:	603b      	str	r3, [r7, #0]
  float amount = 0;
 8001706:	f04f 0300 	mov.w	r3, #0
 800170a:	60bb      	str	r3, [r7, #8]
  printf("Starting Program\r\n");
 800170c:	4870      	ldr	r0, [pc, #448]	; (80018d0 <main+0x1f8>)
 800170e:	f005 f953 	bl	80069b8 <puts>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	enum pushButton pbPressed = none;
 8001712:	2300      	movs	r3, #0
 8001714:	71fb      	strb	r3, [r7, #7]
	enum bankResponse bankResponse = denied;
 8001716:	2300      	movs	r3, #0
 8001718:	71bb      	strb	r3, [r7, #6]
	switch(transactionState){
 800171a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800171e:	3b01      	subs	r3, #1
 8001720:	2b05      	cmp	r3, #5
 8001722:	f200 80ca 	bhi.w	80018ba <main+0x1e2>
 8001726:	a201      	add	r2, pc, #4	; (adr r2, 800172c <main+0x54>)
 8001728:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800172c:	08001745 	.word	0x08001745
 8001730:	08001781 	.word	0x08001781
 8001734:	080017bb 	.word	0x080017bb
 8001738:	08001823 	.word	0x08001823
 800173c:	08001855 	.word	0x08001855
 8001740:	080018a9 	.word	0x080018a9
	case 1:
		displayWelcome();
 8001744:	f7ff fe38 	bl	80013b8 <displayWelcome>
		amount = checkIfAmountRecord();
 8001748:	f7ff fed2 	bl	80014f0 <checkIfAmountRecord>
 800174c:	ed87 0a02 	vstr	s0, [r7, #8]
		if(amount != 0){
 8001750:	edd7 7a02 	vldr	s15, [r7, #8]
 8001754:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001758:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800175c:	d007      	beq.n	800176e <main+0x96>
			displayAmount(amount);
 800175e:	ed97 0a02 	vldr	s0, [r7, #8]
 8001762:	f7ff fe4b 	bl	80013fc <displayAmount>
			displayOkCancel();
 8001766:	f7ff ff83 	bl	8001670 <displayOkCancel>
			transactionState = 2;
 800176a:	2302      	movs	r3, #2
 800176c:	73fb      	strb	r3, [r7, #15]
		}
		printf("%f \r\n",amount);
 800176e:	68b8      	ldr	r0, [r7, #8]
 8001770:	f7fe feea 	bl	8000548 <__aeabi_f2d>
 8001774:	4602      	mov	r2, r0
 8001776:	460b      	mov	r3, r1
 8001778:	4856      	ldr	r0, [pc, #344]	; (80018d4 <main+0x1fc>)
 800177a:	f005 f897 	bl	80068ac <iprintf>
		break;
 800177e:	e0a5      	b.n	80018cc <main+0x1f4>
	case 2:
		pbPressed = checkOkOrCancel();
 8001780:	f7ff fedc 	bl	800153c <checkOkOrCancel>
 8001784:	4603      	mov	r3, r0
 8001786:	71fb      	strb	r3, [r7, #7]
		if(pbPressed != none){
 8001788:	79fb      	ldrb	r3, [r7, #7]
 800178a:	2b00      	cmp	r3, #0
 800178c:	f000 8097 	beq.w	80018be <main+0x1e6>
			if(pbPressed == cancel){
 8001790:	79fb      	ldrb	r3, [r7, #7]
 8001792:	2b04      	cmp	r3, #4
 8001794:	d105      	bne.n	80017a2 <main+0xca>
				printf("Cancel Pressed\r\n");
 8001796:	4850      	ldr	r0, [pc, #320]	; (80018d8 <main+0x200>)
 8001798:	f005 f90e 	bl	80069b8 <puts>
				transactionState = 6;
 800179c:	2306      	movs	r3, #6
 800179e:	73fb      	strb	r3, [r7, #15]
				printf("OK Pressed\r\n");
				transactionState = 3;
				displayChequingOrSaving();
			}
		}
		break;
 80017a0:	e08d      	b.n	80018be <main+0x1e6>
			}else if(pbPressed == ok){
 80017a2:	79fb      	ldrb	r3, [r7, #7]
 80017a4:	2b03      	cmp	r3, #3
 80017a6:	f040 808a 	bne.w	80018be <main+0x1e6>
				printf("OK Pressed\r\n");
 80017aa:	484c      	ldr	r0, [pc, #304]	; (80018dc <main+0x204>)
 80017ac:	f005 f904 	bl	80069b8 <puts>
				transactionState = 3;
 80017b0:	2303      	movs	r3, #3
 80017b2:	73fb      	strb	r3, [r7, #15]
				displayChequingOrSaving();
 80017b4:	f7ff fe48 	bl	8001448 <displayChequingOrSaving>
		break;
 80017b8:	e081      	b.n	80018be <main+0x1e6>
	case 3:
		pbPressed = checkChequingOrSavingPressed();
 80017ba:	f7ff ff33 	bl	8001624 <checkChequingOrSavingPressed>
 80017be:	4603      	mov	r3, r0
 80017c0:	71fb      	strb	r3, [r7, #7]
		if(pbPressed != none){
 80017c2:	79fb      	ldrb	r3, [r7, #7]
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d07c      	beq.n	80018c2 <main+0x1ea>
			if(pbPressed == chequing){
 80017c8:	79fb      	ldrb	r3, [r7, #7]
 80017ca:	2b01      	cmp	r3, #1
 80017cc:	d10e      	bne.n	80017ec <main+0x114>
				printf("Chequing Pressed\r\n");
 80017ce:	4844      	ldr	r0, [pc, #272]	; (80018e0 <main+0x208>)
 80017d0:	f005 f8f2 	bl	80069b8 <puts>
				transactionState = 4;
 80017d4:	2304      	movs	r3, #4
 80017d6:	73fb      	strb	r3, [r7, #15]
				displayEnterPin();
 80017d8:	f7ff fe6e 	bl	80014b8 <displayEnterPin>
				scanf("%d",&pin);
 80017dc:	463b      	mov	r3, r7
 80017de:	4619      	mov	r1, r3
 80017e0:	4840      	ldr	r0, [pc, #256]	; (80018e4 <main+0x20c>)
 80017e2:	f005 f8f1 	bl	80069c8 <iscanf>
				displayOkCancel();
 80017e6:	f7ff ff43 	bl	8001670 <displayOkCancel>
			}else if(pbPressed == cancel){
				printf("Cancel Pressed\r\n");
				transactionState = 6;
			}
		}
		break;
 80017ea:	e06a      	b.n	80018c2 <main+0x1ea>
			}else if(pbPressed == savings){
 80017ec:	79fb      	ldrb	r3, [r7, #7]
 80017ee:	2b02      	cmp	r3, #2
 80017f0:	d10e      	bne.n	8001810 <main+0x138>
				printf("Saving Pressed\r\n");
 80017f2:	483d      	ldr	r0, [pc, #244]	; (80018e8 <main+0x210>)
 80017f4:	f005 f8e0 	bl	80069b8 <puts>
				transactionState = 4;
 80017f8:	2304      	movs	r3, #4
 80017fa:	73fb      	strb	r3, [r7, #15]
				displayEnterPin();
 80017fc:	f7ff fe5c 	bl	80014b8 <displayEnterPin>
				scanf("%d",&pin);
 8001800:	463b      	mov	r3, r7
 8001802:	4619      	mov	r1, r3
 8001804:	4837      	ldr	r0, [pc, #220]	; (80018e4 <main+0x20c>)
 8001806:	f005 f8df 	bl	80069c8 <iscanf>
				displayOkCancel();
 800180a:	f7ff ff31 	bl	8001670 <displayOkCancel>
		break;
 800180e:	e058      	b.n	80018c2 <main+0x1ea>
			}else if(pbPressed == cancel){
 8001810:	79fb      	ldrb	r3, [r7, #7]
 8001812:	2b04      	cmp	r3, #4
 8001814:	d155      	bne.n	80018c2 <main+0x1ea>
				printf("Cancel Pressed\r\n");
 8001816:	4830      	ldr	r0, [pc, #192]	; (80018d8 <main+0x200>)
 8001818:	f005 f8ce 	bl	80069b8 <puts>
				transactionState = 6;
 800181c:	2306      	movs	r3, #6
 800181e:	73fb      	strb	r3, [r7, #15]
		break;
 8001820:	e04f      	b.n	80018c2 <main+0x1ea>
	case 4:
		pbPressed = checkOkOrCancel();
 8001822:	f7ff fe8b 	bl	800153c <checkOkOrCancel>
 8001826:	4603      	mov	r3, r0
 8001828:	71fb      	strb	r3, [r7, #7]
		if(pbPressed != none){
 800182a:	79fb      	ldrb	r3, [r7, #7]
 800182c:	2b00      	cmp	r3, #0
 800182e:	d04a      	beq.n	80018c6 <main+0x1ee>
			if(pbPressed == cancel){
 8001830:	79fb      	ldrb	r3, [r7, #7]
 8001832:	2b04      	cmp	r3, #4
 8001834:	d105      	bne.n	8001842 <main+0x16a>
				printf("Cancel Pressed\r\n");
 8001836:	4828      	ldr	r0, [pc, #160]	; (80018d8 <main+0x200>)
 8001838:	f005 f8be 	bl	80069b8 <puts>
				transactionState = 6;
 800183c:	2306      	movs	r3, #6
 800183e:	73fb      	strb	r3, [r7, #15]
			}else if(pbPressed == ok){
				printf("Ok Pressed\r\n");
				transactionState = 5;
			}
		}
		break;
 8001840:	e041      	b.n	80018c6 <main+0x1ee>
			}else if(pbPressed == ok){
 8001842:	79fb      	ldrb	r3, [r7, #7]
 8001844:	2b03      	cmp	r3, #3
 8001846:	d13e      	bne.n	80018c6 <main+0x1ee>
				printf("Ok Pressed\r\n");
 8001848:	4828      	ldr	r0, [pc, #160]	; (80018ec <main+0x214>)
 800184a:	f005 f8b5 	bl	80069b8 <puts>
				transactionState = 5;
 800184e:	2305      	movs	r3, #5
 8001850:	73fb      	strb	r3, [r7, #15]
		break;
 8001852:	e038      	b.n	80018c6 <main+0x1ee>
	case 5:
		bankResponse = BankResponse(pin);
 8001854:	683b      	ldr	r3, [r7, #0]
 8001856:	4618      	mov	r0, r3
 8001858:	f7ff fe8b 	bl	8001572 <BankResponse>
 800185c:	4603      	mov	r3, r0
 800185e:	71bb      	strb	r3, [r7, #6]
    	if(bankResponse == confirm){
 8001860:	79bb      	ldrb	r3, [r7, #6]
 8001862:	2b01      	cmp	r3, #1
 8001864:	d112      	bne.n	800188c <main+0x1b4>
    		printReciet(amount);
 8001866:	ed97 0a02 	vldr	s0, [r7, #8]
 800186a:	f7ff fe95 	bl	8001598 <printReciet>
    		ssd1331_display_string(0,0,"Thank you for Shopping With Us",FONT_1206,WHITE);
 800186e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001872:	9300      	str	r3, [sp, #0]
 8001874:	230c      	movs	r3, #12
 8001876:	4a1e      	ldr	r2, [pc, #120]	; (80018f0 <main+0x218>)
 8001878:	2100      	movs	r1, #0
 800187a:	2000      	movs	r0, #0
 800187c:	f000 fb00 	bl	8001e80 <ssd1331_display_string>
    		HAL_Delay(100);
 8001880:	2064      	movs	r0, #100	; 0x64
 8001882:	f000 feed 	bl	8002660 <HAL_Delay>
    		transactionState = 1;
 8001886:	2301      	movs	r3, #1
 8001888:	73fb      	strb	r3, [r7, #15]
    		printf("Enter wrong Pin\r\n");
    		displayWrongPin();
    		HAL_Delay(100);
    		transactionState = 6;
    	}
		break;
 800188a:	e01e      	b.n	80018ca <main+0x1f2>
    	}else if(bankResponse == denied){
 800188c:	79bb      	ldrb	r3, [r7, #6]
 800188e:	2b00      	cmp	r3, #0
 8001890:	d11b      	bne.n	80018ca <main+0x1f2>
    		printf("Enter wrong Pin\r\n");
 8001892:	4818      	ldr	r0, [pc, #96]	; (80018f4 <main+0x21c>)
 8001894:	f005 f890 	bl	80069b8 <puts>
    		displayWrongPin();
 8001898:	f7ff ff02 	bl	80016a0 <displayWrongPin>
    		HAL_Delay(100);
 800189c:	2064      	movs	r0, #100	; 0x64
 800189e:	f000 fedf 	bl	8002660 <HAL_Delay>
    		transactionState = 6;
 80018a2:	2306      	movs	r3, #6
 80018a4:	73fb      	strb	r3, [r7, #15]
		break;
 80018a6:	e010      	b.n	80018ca <main+0x1f2>
	case 6:
		displayTransactionCancel();
 80018a8:	f7ff fdea 	bl	8001480 <displayTransactionCancel>
		HAL_Delay(1000);
 80018ac:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80018b0:	f000 fed6 	bl	8002660 <HAL_Delay>
		transactionState = 1;
 80018b4:	2301      	movs	r3, #1
 80018b6:	73fb      	strb	r3, [r7, #15]
		break;
 80018b8:	e008      	b.n	80018cc <main+0x1f4>
	default:
		break;
 80018ba:	bf00      	nop
 80018bc:	e729      	b.n	8001712 <main+0x3a>
		break;
 80018be:	bf00      	nop
 80018c0:	e727      	b.n	8001712 <main+0x3a>
		break;
 80018c2:	bf00      	nop
 80018c4:	e725      	b.n	8001712 <main+0x3a>
		break;
 80018c6:	bf00      	nop
 80018c8:	e723      	b.n	8001712 <main+0x3a>
		break;
 80018ca:	bf00      	nop
  {
 80018cc:	e721      	b.n	8001712 <main+0x3a>
 80018ce:	bf00      	nop
 80018d0:	0800b390 	.word	0x0800b390
 80018d4:	0800b3a4 	.word	0x0800b3a4
 80018d8:	0800b3ac 	.word	0x0800b3ac
 80018dc:	0800b3bc 	.word	0x0800b3bc
 80018e0:	0800b3c8 	.word	0x0800b3c8
 80018e4:	0800b3dc 	.word	0x0800b3dc
 80018e8:	0800b3e0 	.word	0x0800b3e0
 80018ec:	0800b3f0 	.word	0x0800b3f0
 80018f0:	0800b3fc 	.word	0x0800b3fc
 80018f4:	0800b41c 	.word	0x0800b41c

080018f8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	b096      	sub	sp, #88	; 0x58
 80018fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80018fe:	f107 0314 	add.w	r3, r7, #20
 8001902:	2244      	movs	r2, #68	; 0x44
 8001904:	2100      	movs	r1, #0
 8001906:	4618      	mov	r0, r3
 8001908:	f004 f94e 	bl	8005ba8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800190c:	463b      	mov	r3, r7
 800190e:	2200      	movs	r2, #0
 8001910:	601a      	str	r2, [r3, #0]
 8001912:	605a      	str	r2, [r3, #4]
 8001914:	609a      	str	r2, [r3, #8]
 8001916:	60da      	str	r2, [r3, #12]
 8001918:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800191a:	f44f 7000 	mov.w	r0, #512	; 0x200
 800191e:	f001 f961 	bl	8002be4 <HAL_PWREx_ControlVoltageScaling>
 8001922:	4603      	mov	r3, r0
 8001924:	2b00      	cmp	r3, #0
 8001926:	d001      	beq.n	800192c <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001928:	f000 f9be 	bl	8001ca8 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800192c:	f001 f93c 	bl	8002ba8 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8001930:	4b21      	ldr	r3, [pc, #132]	; (80019b8 <SystemClock_Config+0xc0>)
 8001932:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001936:	4a20      	ldr	r2, [pc, #128]	; (80019b8 <SystemClock_Config+0xc0>)
 8001938:	f023 0318 	bic.w	r3, r3, #24
 800193c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8001940:	2314      	movs	r3, #20
 8001942:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001944:	2301      	movs	r3, #1
 8001946:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001948:	2301      	movs	r3, #1
 800194a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 800194c:	2300      	movs	r3, #0
 800194e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8001950:	2360      	movs	r3, #96	; 0x60
 8001952:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001954:	2302      	movs	r3, #2
 8001956:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8001958:	2301      	movs	r3, #1
 800195a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 800195c:	2301      	movs	r3, #1
 800195e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 16;
 8001960:	2310      	movs	r3, #16
 8001962:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001964:	2307      	movs	r3, #7
 8001966:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001968:	2302      	movs	r3, #2
 800196a:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800196c:	2302      	movs	r3, #2
 800196e:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001970:	f107 0314 	add.w	r3, r7, #20
 8001974:	4618      	mov	r0, r3
 8001976:	f001 f98b 	bl	8002c90 <HAL_RCC_OscConfig>
 800197a:	4603      	mov	r3, r0
 800197c:	2b00      	cmp	r3, #0
 800197e:	d001      	beq.n	8001984 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8001980:	f000 f992 	bl	8001ca8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001984:	230f      	movs	r3, #15
 8001986:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001988:	2303      	movs	r3, #3
 800198a:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800198c:	2300      	movs	r3, #0
 800198e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001990:	2300      	movs	r3, #0
 8001992:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001994:	2300      	movs	r3, #0
 8001996:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001998:	463b      	mov	r3, r7
 800199a:	2101      	movs	r1, #1
 800199c:	4618      	mov	r0, r3
 800199e:	f001 fd8b 	bl	80034b8 <HAL_RCC_ClockConfig>
 80019a2:	4603      	mov	r3, r0
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d001      	beq.n	80019ac <SystemClock_Config+0xb4>
  {
    Error_Handler();
 80019a8:	f000 f97e 	bl	8001ca8 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 80019ac:	f002 f99e 	bl	8003cec <HAL_RCCEx_EnableMSIPLLMode>
}
 80019b0:	bf00      	nop
 80019b2:	3758      	adds	r7, #88	; 0x58
 80019b4:	46bd      	mov	sp, r7
 80019b6:	bd80      	pop	{r7, pc}
 80019b8:	40021000 	.word	0x40021000

080019bc <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80019bc:	b580      	push	{r7, lr}
 80019be:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80019c0:	4b1b      	ldr	r3, [pc, #108]	; (8001a30 <MX_SPI1_Init+0x74>)
 80019c2:	4a1c      	ldr	r2, [pc, #112]	; (8001a34 <MX_SPI1_Init+0x78>)
 80019c4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80019c6:	4b1a      	ldr	r3, [pc, #104]	; (8001a30 <MX_SPI1_Init+0x74>)
 80019c8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80019cc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80019ce:	4b18      	ldr	r3, [pc, #96]	; (8001a30 <MX_SPI1_Init+0x74>)
 80019d0:	2200      	movs	r2, #0
 80019d2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80019d4:	4b16      	ldr	r3, [pc, #88]	; (8001a30 <MX_SPI1_Init+0x74>)
 80019d6:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80019da:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80019dc:	4b14      	ldr	r3, [pc, #80]	; (8001a30 <MX_SPI1_Init+0x74>)
 80019de:	2200      	movs	r2, #0
 80019e0:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80019e2:	4b13      	ldr	r3, [pc, #76]	; (8001a30 <MX_SPI1_Init+0x74>)
 80019e4:	2200      	movs	r2, #0
 80019e6:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80019e8:	4b11      	ldr	r3, [pc, #68]	; (8001a30 <MX_SPI1_Init+0x74>)
 80019ea:	f44f 7200 	mov.w	r2, #512	; 0x200
 80019ee:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 80019f0:	4b0f      	ldr	r3, [pc, #60]	; (8001a30 <MX_SPI1_Init+0x74>)
 80019f2:	2210      	movs	r2, #16
 80019f4:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80019f6:	4b0e      	ldr	r3, [pc, #56]	; (8001a30 <MX_SPI1_Init+0x74>)
 80019f8:	2200      	movs	r2, #0
 80019fa:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80019fc:	4b0c      	ldr	r3, [pc, #48]	; (8001a30 <MX_SPI1_Init+0x74>)
 80019fe:	2200      	movs	r2, #0
 8001a00:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001a02:	4b0b      	ldr	r3, [pc, #44]	; (8001a30 <MX_SPI1_Init+0x74>)
 8001a04:	2200      	movs	r2, #0
 8001a06:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001a08:	4b09      	ldr	r3, [pc, #36]	; (8001a30 <MX_SPI1_Init+0x74>)
 8001a0a:	2207      	movs	r2, #7
 8001a0c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001a0e:	4b08      	ldr	r3, [pc, #32]	; (8001a30 <MX_SPI1_Init+0x74>)
 8001a10:	2200      	movs	r2, #0
 8001a12:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001a14:	4b06      	ldr	r3, [pc, #24]	; (8001a30 <MX_SPI1_Init+0x74>)
 8001a16:	2208      	movs	r2, #8
 8001a18:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001a1a:	4805      	ldr	r0, [pc, #20]	; (8001a30 <MX_SPI1_Init+0x74>)
 8001a1c:	f002 fa68 	bl	8003ef0 <HAL_SPI_Init>
 8001a20:	4603      	mov	r3, r0
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d001      	beq.n	8001a2a <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8001a26:	f000 f93f 	bl	8001ca8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001a2a:	bf00      	nop
 8001a2c:	bd80      	pop	{r7, pc}
 8001a2e:	bf00      	nop
 8001a30:	200001fc 	.word	0x200001fc
 8001a34:	40013000 	.word	0x40013000

08001a38 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	b096      	sub	sp, #88	; 0x58
 8001a3c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a3e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001a42:	2200      	movs	r2, #0
 8001a44:	601a      	str	r2, [r3, #0]
 8001a46:	605a      	str	r2, [r3, #4]
 8001a48:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001a4a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001a4e:	2200      	movs	r2, #0
 8001a50:	601a      	str	r2, [r3, #0]
 8001a52:	605a      	str	r2, [r3, #4]
 8001a54:	609a      	str	r2, [r3, #8]
 8001a56:	60da      	str	r2, [r3, #12]
 8001a58:	611a      	str	r2, [r3, #16]
 8001a5a:	615a      	str	r2, [r3, #20]
 8001a5c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001a5e:	1d3b      	adds	r3, r7, #4
 8001a60:	222c      	movs	r2, #44	; 0x2c
 8001a62:	2100      	movs	r1, #0
 8001a64:	4618      	mov	r0, r3
 8001a66:	f004 f89f 	bl	8005ba8 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001a6a:	4b38      	ldr	r3, [pc, #224]	; (8001b4c <MX_TIM1_Init+0x114>)
 8001a6c:	4a38      	ldr	r2, [pc, #224]	; (8001b50 <MX_TIM1_Init+0x118>)
 8001a6e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001a70:	4b36      	ldr	r3, [pc, #216]	; (8001b4c <MX_TIM1_Init+0x114>)
 8001a72:	2200      	movs	r2, #0
 8001a74:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a76:	4b35      	ldr	r3, [pc, #212]	; (8001b4c <MX_TIM1_Init+0x114>)
 8001a78:	2200      	movs	r2, #0
 8001a7a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 100;
 8001a7c:	4b33      	ldr	r3, [pc, #204]	; (8001b4c <MX_TIM1_Init+0x114>)
 8001a7e:	2264      	movs	r2, #100	; 0x64
 8001a80:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a82:	4b32      	ldr	r3, [pc, #200]	; (8001b4c <MX_TIM1_Init+0x114>)
 8001a84:	2200      	movs	r2, #0
 8001a86:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001a88:	4b30      	ldr	r3, [pc, #192]	; (8001b4c <MX_TIM1_Init+0x114>)
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a8e:	4b2f      	ldr	r3, [pc, #188]	; (8001b4c <MX_TIM1_Init+0x114>)
 8001a90:	2200      	movs	r2, #0
 8001a92:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001a94:	482d      	ldr	r0, [pc, #180]	; (8001b4c <MX_TIM1_Init+0x114>)
 8001a96:	f002 fda1 	bl	80045dc <HAL_TIM_PWM_Init>
 8001a9a:	4603      	mov	r3, r0
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d001      	beq.n	8001aa4 <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 8001aa0:	f000 f902 	bl	8001ca8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001aa4:	2300      	movs	r3, #0
 8001aa6:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001aa8:	2300      	movs	r3, #0
 8001aaa:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001aac:	2300      	movs	r3, #0
 8001aae:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001ab0:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001ab4:	4619      	mov	r1, r3
 8001ab6:	4825      	ldr	r0, [pc, #148]	; (8001b4c <MX_TIM1_Init+0x114>)
 8001ab8:	f003 f9de 	bl	8004e78 <HAL_TIMEx_MasterConfigSynchronization>
 8001abc:	4603      	mov	r3, r0
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d001      	beq.n	8001ac6 <MX_TIM1_Init+0x8e>
  {
    Error_Handler();
 8001ac2:	f000 f8f1 	bl	8001ca8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001ac6:	2360      	movs	r3, #96	; 0x60
 8001ac8:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 8001aca:	2300      	movs	r3, #0
 8001acc:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001ace:	2300      	movs	r3, #0
 8001ad0:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001ada:	2300      	movs	r3, #0
 8001adc:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001ade:	2300      	movs	r3, #0
 8001ae0:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001ae2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001ae6:	2200      	movs	r2, #0
 8001ae8:	4619      	mov	r1, r3
 8001aea:	4818      	ldr	r0, [pc, #96]	; (8001b4c <MX_TIM1_Init+0x114>)
 8001aec:	f002 fdce 	bl	800468c <HAL_TIM_PWM_ConfigChannel>
 8001af0:	4603      	mov	r3, r0
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d001      	beq.n	8001afa <MX_TIM1_Init+0xc2>
  {
    Error_Handler();
 8001af6:	f000 f8d7 	bl	8001ca8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001afa:	2300      	movs	r3, #0
 8001afc:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001afe:	2300      	movs	r3, #0
 8001b00:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001b02:	2300      	movs	r3, #0
 8001b04:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001b06:	2300      	movs	r3, #0
 8001b08:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001b0a:	2300      	movs	r3, #0
 8001b0c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001b0e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001b12:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001b14:	2300      	movs	r3, #0
 8001b16:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001b18:	2300      	movs	r3, #0
 8001b1a:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001b1c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001b20:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001b22:	2300      	movs	r3, #0
 8001b24:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001b26:	2300      	movs	r3, #0
 8001b28:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001b2a:	1d3b      	adds	r3, r7, #4
 8001b2c:	4619      	mov	r1, r3
 8001b2e:	4807      	ldr	r0, [pc, #28]	; (8001b4c <MX_TIM1_Init+0x114>)
 8001b30:	f003 fa08 	bl	8004f44 <HAL_TIMEx_ConfigBreakDeadTime>
 8001b34:	4603      	mov	r3, r0
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d001      	beq.n	8001b3e <MX_TIM1_Init+0x106>
  {
    Error_Handler();
 8001b3a:	f000 f8b5 	bl	8001ca8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001b3e:	4803      	ldr	r0, [pc, #12]	; (8001b4c <MX_TIM1_Init+0x114>)
 8001b40:	f000 fb40 	bl	80021c4 <HAL_TIM_MspPostInit>

}
 8001b44:	bf00      	nop
 8001b46:	3758      	adds	r7, #88	; 0x58
 8001b48:	46bd      	mov	sp, r7
 8001b4a:	bd80      	pop	{r7, pc}
 8001b4c:	20000260 	.word	0x20000260
 8001b50:	40012c00 	.word	0x40012c00

08001b54 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001b54:	b580      	push	{r7, lr}
 8001b56:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001b58:	4b14      	ldr	r3, [pc, #80]	; (8001bac <MX_USART2_UART_Init+0x58>)
 8001b5a:	4a15      	ldr	r2, [pc, #84]	; (8001bb0 <MX_USART2_UART_Init+0x5c>)
 8001b5c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001b5e:	4b13      	ldr	r3, [pc, #76]	; (8001bac <MX_USART2_UART_Init+0x58>)
 8001b60:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001b64:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001b66:	4b11      	ldr	r3, [pc, #68]	; (8001bac <MX_USART2_UART_Init+0x58>)
 8001b68:	2200      	movs	r2, #0
 8001b6a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001b6c:	4b0f      	ldr	r3, [pc, #60]	; (8001bac <MX_USART2_UART_Init+0x58>)
 8001b6e:	2200      	movs	r2, #0
 8001b70:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001b72:	4b0e      	ldr	r3, [pc, #56]	; (8001bac <MX_USART2_UART_Init+0x58>)
 8001b74:	2200      	movs	r2, #0
 8001b76:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001b78:	4b0c      	ldr	r3, [pc, #48]	; (8001bac <MX_USART2_UART_Init+0x58>)
 8001b7a:	220c      	movs	r2, #12
 8001b7c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001b7e:	4b0b      	ldr	r3, [pc, #44]	; (8001bac <MX_USART2_UART_Init+0x58>)
 8001b80:	2200      	movs	r2, #0
 8001b82:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001b84:	4b09      	ldr	r3, [pc, #36]	; (8001bac <MX_USART2_UART_Init+0x58>)
 8001b86:	2200      	movs	r2, #0
 8001b88:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001b8a:	4b08      	ldr	r3, [pc, #32]	; (8001bac <MX_USART2_UART_Init+0x58>)
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001b90:	4b06      	ldr	r3, [pc, #24]	; (8001bac <MX_USART2_UART_Init+0x58>)
 8001b92:	2200      	movs	r2, #0
 8001b94:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001b96:	4805      	ldr	r0, [pc, #20]	; (8001bac <MX_USART2_UART_Init+0x58>)
 8001b98:	f003 fa4c 	bl	8005034 <HAL_UART_Init>
 8001b9c:	4603      	mov	r3, r0
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d001      	beq.n	8001ba6 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001ba2:	f000 f881 	bl	8001ca8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001ba6:	bf00      	nop
 8001ba8:	bd80      	pop	{r7, pc}
 8001baa:	bf00      	nop
 8001bac:	200002ac 	.word	0x200002ac
 8001bb0:	40004400 	.word	0x40004400

08001bb4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	b088      	sub	sp, #32
 8001bb8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bba:	f107 030c 	add.w	r3, r7, #12
 8001bbe:	2200      	movs	r2, #0
 8001bc0:	601a      	str	r2, [r3, #0]
 8001bc2:	605a      	str	r2, [r3, #4]
 8001bc4:	609a      	str	r2, [r3, #8]
 8001bc6:	60da      	str	r2, [r3, #12]
 8001bc8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001bca:	4b35      	ldr	r3, [pc, #212]	; (8001ca0 <MX_GPIO_Init+0xec>)
 8001bcc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bce:	4a34      	ldr	r2, [pc, #208]	; (8001ca0 <MX_GPIO_Init+0xec>)
 8001bd0:	f043 0304 	orr.w	r3, r3, #4
 8001bd4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001bd6:	4b32      	ldr	r3, [pc, #200]	; (8001ca0 <MX_GPIO_Init+0xec>)
 8001bd8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bda:	f003 0304 	and.w	r3, r3, #4
 8001bde:	60bb      	str	r3, [r7, #8]
 8001be0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001be2:	4b2f      	ldr	r3, [pc, #188]	; (8001ca0 <MX_GPIO_Init+0xec>)
 8001be4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001be6:	4a2e      	ldr	r2, [pc, #184]	; (8001ca0 <MX_GPIO_Init+0xec>)
 8001be8:	f043 0301 	orr.w	r3, r3, #1
 8001bec:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001bee:	4b2c      	ldr	r3, [pc, #176]	; (8001ca0 <MX_GPIO_Init+0xec>)
 8001bf0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bf2:	f003 0301 	and.w	r3, r3, #1
 8001bf6:	607b      	str	r3, [r7, #4]
 8001bf8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001bfa:	4b29      	ldr	r3, [pc, #164]	; (8001ca0 <MX_GPIO_Init+0xec>)
 8001bfc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bfe:	4a28      	ldr	r2, [pc, #160]	; (8001ca0 <MX_GPIO_Init+0xec>)
 8001c00:	f043 0302 	orr.w	r3, r3, #2
 8001c04:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001c06:	4b26      	ldr	r3, [pc, #152]	; (8001ca0 <MX_GPIO_Init+0xec>)
 8001c08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c0a:	f003 0302 	and.w	r3, r3, #2
 8001c0e:	603b      	str	r3, [r7, #0]
 8001c10:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|SSD1331_CS_Pin|SSD1331_DC_Pin|SSD1331_RES_Pin, GPIO_PIN_RESET);
 8001c12:	2200      	movs	r2, #0
 8001c14:	2178      	movs	r1, #120	; 0x78
 8001c16:	4823      	ldr	r0, [pc, #140]	; (8001ca4 <MX_GPIO_Init+0xf0>)
 8001c18:	f000 ffae 	bl	8002b78 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : chequing_Pin saving_Pin Ok_Pin Cancel_Pin */
  GPIO_InitStruct.Pin = chequing_Pin|saving_Pin|Ok_Pin|Cancel_Pin;
 8001c1c:	231b      	movs	r3, #27
 8001c1e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c20:	2300      	movs	r3, #0
 8001c22:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c24:	2300      	movs	r3, #0
 8001c26:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c28:	f107 030c 	add.w	r3, r7, #12
 8001c2c:	4619      	mov	r1, r3
 8001c2e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001c32:	f000 fe1f 	bl	8002874 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA5 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_12;
 8001c36:	f44f 5381 	mov.w	r3, #4128	; 0x1020
 8001c3a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c3c:	2302      	movs	r3, #2
 8001c3e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c40:	2300      	movs	r3, #0
 8001c42:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c44:	2303      	movs	r3, #3
 8001c46:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001c48:	2305      	movs	r3, #5
 8001c4a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c4c:	f107 030c 	add.w	r3, r7, #12
 8001c50:	4619      	mov	r1, r3
 8001c52:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001c56:	f000 fe0d 	bl	8002874 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001c5a:	2380      	movs	r3, #128	; 0x80
 8001c5c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c5e:	2302      	movs	r3, #2
 8001c60:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c62:	2300      	movs	r3, #0
 8001c64:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c66:	2300      	movs	r3, #0
 8001c68:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001c6a:	2301      	movs	r3, #1
 8001c6c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c6e:	f107 030c 	add.w	r3, r7, #12
 8001c72:	4619      	mov	r1, r3
 8001c74:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001c78:	f000 fdfc 	bl	8002874 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin SSD1331_CS_Pin SSD1331_DC_Pin SSD1331_RES_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|SSD1331_CS_Pin|SSD1331_DC_Pin|SSD1331_RES_Pin;
 8001c7c:	2378      	movs	r3, #120	; 0x78
 8001c7e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c80:	2301      	movs	r3, #1
 8001c82:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c84:	2300      	movs	r3, #0
 8001c86:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c88:	2300      	movs	r3, #0
 8001c8a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c8c:	f107 030c 	add.w	r3, r7, #12
 8001c90:	4619      	mov	r1, r3
 8001c92:	4804      	ldr	r0, [pc, #16]	; (8001ca4 <MX_GPIO_Init+0xf0>)
 8001c94:	f000 fdee 	bl	8002874 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001c98:	bf00      	nop
 8001c9a:	3720      	adds	r7, #32
 8001c9c:	46bd      	mov	sp, r7
 8001c9e:	bd80      	pop	{r7, pc}
 8001ca0:	40021000 	.word	0x40021000
 8001ca4:	48000400 	.word	0x48000400

08001ca8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001ca8:	b480      	push	{r7}
 8001caa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001cac:	b672      	cpsid	i
}
 8001cae:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001cb0:	e7fe      	b.n	8001cb0 <Error_Handler+0x8>
	...

08001cb4 <ssd1331_write_byte>:
   *						   0: Writes to the command register
   *						   1: Writes to the display data ram
   * @retval None
 **/
static void ssd1331_write_byte(uint8_t chData, uint8_t chCmd) 
{
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	b082      	sub	sp, #8
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	4603      	mov	r3, r0
 8001cbc:	460a      	mov	r2, r1
 8001cbe:	71fb      	strb	r3, [r7, #7]
 8001cc0:	4613      	mov	r3, r2
 8001cc2:	71bb      	strb	r3, [r7, #6]
	if (chCmd) {
 8001cc4:	79bb      	ldrb	r3, [r7, #6]
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d005      	beq.n	8001cd6 <ssd1331_write_byte+0x22>
	 	__SSD1331_DC_SET();
 8001cca:	2201      	movs	r2, #1
 8001ccc:	2120      	movs	r1, #32
 8001cce:	4811      	ldr	r0, [pc, #68]	; (8001d14 <ssd1331_write_byte+0x60>)
 8001cd0:	f000 ff52 	bl	8002b78 <HAL_GPIO_WritePin>
 8001cd4:	e004      	b.n	8001ce0 <ssd1331_write_byte+0x2c>
	} else {
	 	__SSD1331_DC_CLR();
 8001cd6:	2200      	movs	r2, #0
 8001cd8:	2120      	movs	r1, #32
 8001cda:	480e      	ldr	r0, [pc, #56]	; (8001d14 <ssd1331_write_byte+0x60>)
 8001cdc:	f000 ff4c 	bl	8002b78 <HAL_GPIO_WritePin>
	}
	
	__SSD1331_CS_CLR();
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	2110      	movs	r1, #16
 8001ce4:	480b      	ldr	r0, [pc, #44]	; (8001d14 <ssd1331_write_byte+0x60>)
 8001ce6:	f000 ff47 	bl	8002b78 <HAL_GPIO_WritePin>
	__SSD1331_WRITE_BYTE(chData);
 8001cea:	1df9      	adds	r1, r7, #7
 8001cec:	2364      	movs	r3, #100	; 0x64
 8001cee:	2201      	movs	r2, #1
 8001cf0:	4809      	ldr	r0, [pc, #36]	; (8001d18 <ssd1331_write_byte+0x64>)
 8001cf2:	f002 f9a0 	bl	8004036 <HAL_SPI_Transmit>
	
	__SSD1331_CS_SET();
 8001cf6:	2201      	movs	r2, #1
 8001cf8:	2110      	movs	r1, #16
 8001cfa:	4806      	ldr	r0, [pc, #24]	; (8001d14 <ssd1331_write_byte+0x60>)
 8001cfc:	f000 ff3c 	bl	8002b78 <HAL_GPIO_WritePin>
	__SSD1331_DC_SET();
 8001d00:	2201      	movs	r2, #1
 8001d02:	2120      	movs	r1, #32
 8001d04:	4803      	ldr	r0, [pc, #12]	; (8001d14 <ssd1331_write_byte+0x60>)
 8001d06:	f000 ff37 	bl	8002b78 <HAL_GPIO_WritePin>
}
 8001d0a:	bf00      	nop
 8001d0c:	3708      	adds	r7, #8
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	bd80      	pop	{r7, pc}
 8001d12:	bf00      	nop
 8001d14:	48000400 	.word	0x48000400
 8001d18:	200001fc 	.word	0x200001fc

08001d1c <ssd1331_draw_point>:

void ssd1331_draw_point(uint8_t chXpos, uint8_t chYpos, uint16_t hwColor) 
{
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	b082      	sub	sp, #8
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	4603      	mov	r3, r0
 8001d24:	71fb      	strb	r3, [r7, #7]
 8001d26:	460b      	mov	r3, r1
 8001d28:	71bb      	strb	r3, [r7, #6]
 8001d2a:	4613      	mov	r3, r2
 8001d2c:	80bb      	strh	r3, [r7, #4]
	if (chXpos >= OLED_WIDTH || chYpos >= OLED_HEIGHT) {
 8001d2e:	79fb      	ldrb	r3, [r7, #7]
 8001d30:	2b5f      	cmp	r3, #95	; 0x5f
 8001d32:	d82b      	bhi.n	8001d8c <ssd1331_draw_point+0x70>
 8001d34:	79bb      	ldrb	r3, [r7, #6]
 8001d36:	2b3f      	cmp	r3, #63	; 0x3f
 8001d38:	d828      	bhi.n	8001d8c <ssd1331_draw_point+0x70>
		return;
	}

    //set column point
    ssd1331_write_byte(SET_COLUMN_ADDRESS, SSD1331_CMD);
 8001d3a:	2100      	movs	r1, #0
 8001d3c:	2015      	movs	r0, #21
 8001d3e:	f7ff ffb9 	bl	8001cb4 <ssd1331_write_byte>
    ssd1331_write_byte(chXpos, SSD1331_CMD);
 8001d42:	79fb      	ldrb	r3, [r7, #7]
 8001d44:	2100      	movs	r1, #0
 8001d46:	4618      	mov	r0, r3
 8001d48:	f7ff ffb4 	bl	8001cb4 <ssd1331_write_byte>
    ssd1331_write_byte(OLED_WIDTH - 1, SSD1331_CMD);
 8001d4c:	2100      	movs	r1, #0
 8001d4e:	205f      	movs	r0, #95	; 0x5f
 8001d50:	f7ff ffb0 	bl	8001cb4 <ssd1331_write_byte>
    //set row point
    ssd1331_write_byte(SET_ROW_ADDRESS, SSD1331_CMD);
 8001d54:	2100      	movs	r1, #0
 8001d56:	2075      	movs	r0, #117	; 0x75
 8001d58:	f7ff ffac 	bl	8001cb4 <ssd1331_write_byte>
    ssd1331_write_byte(chYpos, SSD1331_CMD);
 8001d5c:	79bb      	ldrb	r3, [r7, #6]
 8001d5e:	2100      	movs	r1, #0
 8001d60:	4618      	mov	r0, r3
 8001d62:	f7ff ffa7 	bl	8001cb4 <ssd1331_write_byte>
    ssd1331_write_byte(OLED_HEIGHT - 1, SSD1331_CMD);
 8001d66:	2100      	movs	r1, #0
 8001d68:	203f      	movs	r0, #63	; 0x3f
 8001d6a:	f7ff ffa3 	bl	8001cb4 <ssd1331_write_byte>
    
    //fill 16bit colour
	ssd1331_write_byte(hwColor >> 8, SSD1331_DATA);
 8001d6e:	88bb      	ldrh	r3, [r7, #4]
 8001d70:	0a1b      	lsrs	r3, r3, #8
 8001d72:	b29b      	uxth	r3, r3
 8001d74:	b2db      	uxtb	r3, r3
 8001d76:	2101      	movs	r1, #1
 8001d78:	4618      	mov	r0, r3
 8001d7a:	f7ff ff9b 	bl	8001cb4 <ssd1331_write_byte>
	ssd1331_write_byte(hwColor, SSD1331_DATA);   
 8001d7e:	88bb      	ldrh	r3, [r7, #4]
 8001d80:	b2db      	uxtb	r3, r3
 8001d82:	2101      	movs	r1, #1
 8001d84:	4618      	mov	r0, r3
 8001d86:	f7ff ff95 	bl	8001cb4 <ssd1331_write_byte>
 8001d8a:	e000      	b.n	8001d8e <ssd1331_draw_point+0x72>
		return;
 8001d8c:	bf00      	nop
}
 8001d8e:	3708      	adds	r7, #8
 8001d90:	46bd      	mov	sp, r7
 8001d92:	bd80      	pop	{r7, pc}

08001d94 <ssd1331_display_char>:
  * @param  chSize: 
  * @param  chMode
  * @retval 
**/
void ssd1331_display_char(uint8_t chXpos, uint8_t chYpos, uint8_t chChr, uint8_t chSize, uint16_t hwColor)
{      	
 8001d94:	b590      	push	{r4, r7, lr}
 8001d96:	b085      	sub	sp, #20
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	4604      	mov	r4, r0
 8001d9c:	4608      	mov	r0, r1
 8001d9e:	4611      	mov	r1, r2
 8001da0:	461a      	mov	r2, r3
 8001da2:	4623      	mov	r3, r4
 8001da4:	71fb      	strb	r3, [r7, #7]
 8001da6:	4603      	mov	r3, r0
 8001da8:	71bb      	strb	r3, [r7, #6]
 8001daa:	460b      	mov	r3, r1
 8001dac:	717b      	strb	r3, [r7, #5]
 8001dae:	4613      	mov	r3, r2
 8001db0:	713b      	strb	r3, [r7, #4]
	uint8_t i, j, chTemp;
	uint8_t chYpos0 = chYpos;
 8001db2:	79bb      	ldrb	r3, [r7, #6]
 8001db4:	733b      	strb	r3, [r7, #12]

	chTemp = 0;
 8001db6:	2300      	movs	r3, #0
 8001db8:	737b      	strb	r3, [r7, #13]
	if (chXpos >= OLED_WIDTH || chYpos >= OLED_HEIGHT) {
 8001dba:	79fb      	ldrb	r3, [r7, #7]
 8001dbc:	2b5f      	cmp	r3, #95	; 0x5f
 8001dbe:	d857      	bhi.n	8001e70 <ssd1331_display_char+0xdc>
 8001dc0:	79bb      	ldrb	r3, [r7, #6]
 8001dc2:	2b3f      	cmp	r3, #63	; 0x3f
 8001dc4:	d854      	bhi.n	8001e70 <ssd1331_display_char+0xdc>
		return;
	}
					   
    for (i = 0; i < chSize; i ++) {   
 8001dc6:	2300      	movs	r3, #0
 8001dc8:	73fb      	strb	r3, [r7, #15]
 8001dca:	e04c      	b.n	8001e66 <ssd1331_display_char+0xd2>
		if (FONT_1206 == chSize) {
 8001dcc:	793b      	ldrb	r3, [r7, #4]
 8001dce:	2b0c      	cmp	r3, #12
 8001dd0:	d10d      	bne.n	8001dee <ssd1331_display_char+0x5a>
			chTemp = c_chFont1206[chChr - 0x20][i];  
 8001dd2:	797b      	ldrb	r3, [r7, #5]
 8001dd4:	f1a3 0220 	sub.w	r2, r3, #32
 8001dd8:	7bf9      	ldrb	r1, [r7, #15]
 8001dda:	4827      	ldr	r0, [pc, #156]	; (8001e78 <ssd1331_display_char+0xe4>)
 8001ddc:	4613      	mov	r3, r2
 8001dde:	005b      	lsls	r3, r3, #1
 8001de0:	4413      	add	r3, r2
 8001de2:	009b      	lsls	r3, r3, #2
 8001de4:	4403      	add	r3, r0
 8001de6:	440b      	add	r3, r1
 8001de8:	781b      	ldrb	r3, [r3, #0]
 8001dea:	737b      	strb	r3, [r7, #13]
 8001dec:	e00c      	b.n	8001e08 <ssd1331_display_char+0x74>
		} else if (FONT_1608 == chSize) { 
 8001dee:	793b      	ldrb	r3, [r7, #4]
 8001df0:	2b10      	cmp	r3, #16
 8001df2:	d109      	bne.n	8001e08 <ssd1331_display_char+0x74>
			chTemp = c_chFont1608[chChr - 0x20][i];
 8001df4:	797b      	ldrb	r3, [r7, #5]
 8001df6:	f1a3 0220 	sub.w	r2, r3, #32
 8001dfa:	7bfb      	ldrb	r3, [r7, #15]
 8001dfc:	491f      	ldr	r1, [pc, #124]	; (8001e7c <ssd1331_display_char+0xe8>)
 8001dfe:	0112      	lsls	r2, r2, #4
 8001e00:	440a      	add	r2, r1
 8001e02:	4413      	add	r3, r2
 8001e04:	781b      	ldrb	r3, [r3, #0]
 8001e06:	737b      	strb	r3, [r7, #13]
		}
		
        for (j = 0; j < 8; j ++) {
 8001e08:	2300      	movs	r3, #0
 8001e0a:	73bb      	strb	r3, [r7, #14]
 8001e0c:	e025      	b.n	8001e5a <ssd1331_display_char+0xc6>
    		if (chTemp & 0x80) {
 8001e0e:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	da06      	bge.n	8001e24 <ssd1331_display_char+0x90>
		  ssd1331_draw_point(chXpos, chYpos, hwColor);
 8001e16:	8c3a      	ldrh	r2, [r7, #32]
 8001e18:	79b9      	ldrb	r1, [r7, #6]
 8001e1a:	79fb      	ldrb	r3, [r7, #7]
 8001e1c:	4618      	mov	r0, r3
 8001e1e:	f7ff ff7d 	bl	8001d1c <ssd1331_draw_point>
 8001e22:	e005      	b.n	8001e30 <ssd1331_display_char+0x9c>
    		} else {
		  ssd1331_draw_point(chXpos, chYpos, 0);
 8001e24:	79b9      	ldrb	r1, [r7, #6]
 8001e26:	79fb      	ldrb	r3, [r7, #7]
 8001e28:	2200      	movs	r2, #0
 8001e2a:	4618      	mov	r0, r3
 8001e2c:	f7ff ff76 	bl	8001d1c <ssd1331_draw_point>
		}		  
			chTemp <<= 1;
 8001e30:	7b7b      	ldrb	r3, [r7, #13]
 8001e32:	005b      	lsls	r3, r3, #1
 8001e34:	737b      	strb	r3, [r7, #13]
			chYpos ++;
 8001e36:	79bb      	ldrb	r3, [r7, #6]
 8001e38:	3301      	adds	r3, #1
 8001e3a:	71bb      	strb	r3, [r7, #6]
			if ((chYpos - chYpos0) == chSize) {
 8001e3c:	79ba      	ldrb	r2, [r7, #6]
 8001e3e:	7b3b      	ldrb	r3, [r7, #12]
 8001e40:	1ad2      	subs	r2, r2, r3
 8001e42:	793b      	ldrb	r3, [r7, #4]
 8001e44:	429a      	cmp	r2, r3
 8001e46:	d105      	bne.n	8001e54 <ssd1331_display_char+0xc0>
				chYpos = chYpos0;
 8001e48:	7b3b      	ldrb	r3, [r7, #12]
 8001e4a:	71bb      	strb	r3, [r7, #6]
				chXpos ++;
 8001e4c:	79fb      	ldrb	r3, [r7, #7]
 8001e4e:	3301      	adds	r3, #1
 8001e50:	71fb      	strb	r3, [r7, #7]
				break;
 8001e52:	e005      	b.n	8001e60 <ssd1331_display_char+0xcc>
        for (j = 0; j < 8; j ++) {
 8001e54:	7bbb      	ldrb	r3, [r7, #14]
 8001e56:	3301      	adds	r3, #1
 8001e58:	73bb      	strb	r3, [r7, #14]
 8001e5a:	7bbb      	ldrb	r3, [r7, #14]
 8001e5c:	2b07      	cmp	r3, #7
 8001e5e:	d9d6      	bls.n	8001e0e <ssd1331_display_char+0x7a>
    for (i = 0; i < chSize; i ++) {   
 8001e60:	7bfb      	ldrb	r3, [r7, #15]
 8001e62:	3301      	adds	r3, #1
 8001e64:	73fb      	strb	r3, [r7, #15]
 8001e66:	7bfa      	ldrb	r2, [r7, #15]
 8001e68:	793b      	ldrb	r3, [r7, #4]
 8001e6a:	429a      	cmp	r2, r3
 8001e6c:	d3ae      	bcc.n	8001dcc <ssd1331_display_char+0x38>
 8001e6e:	e000      	b.n	8001e72 <ssd1331_display_char+0xde>
		return;
 8001e70:	bf00      	nop
			}
		}  	 
    } 
}
 8001e72:	3714      	adds	r7, #20
 8001e74:	46bd      	mov	sp, r7
 8001e76:	bd90      	pop	{r4, r7, pc}
 8001e78:	0800b43c 	.word	0x0800b43c
 8001e7c:	0800b8b0 	.word	0x0800b8b0

08001e80 <ssd1331_display_string>:
  * @param  pchString: Pointer to a string to display on the screen 
  *         
  * @retval  None
**/
void ssd1331_display_string(uint8_t chXpos, uint8_t chYpos, const char *pchString, uint8_t chSize, uint16_t hwColor)
{
 8001e80:	b590      	push	{r4, r7, lr}
 8001e82:	b085      	sub	sp, #20
 8001e84:	af02      	add	r7, sp, #8
 8001e86:	603a      	str	r2, [r7, #0]
 8001e88:	461a      	mov	r2, r3
 8001e8a:	4603      	mov	r3, r0
 8001e8c:	71fb      	strb	r3, [r7, #7]
 8001e8e:	460b      	mov	r3, r1
 8001e90:	71bb      	strb	r3, [r7, #6]
 8001e92:	4613      	mov	r3, r2
 8001e94:	717b      	strb	r3, [r7, #5]
	if (chXpos >= OLED_WIDTH || chYpos >= OLED_HEIGHT) {
 8001e96:	79fb      	ldrb	r3, [r7, #7]
 8001e98:	2b5f      	cmp	r3, #95	; 0x5f
 8001e9a:	d836      	bhi.n	8001f0a <ssd1331_display_string+0x8a>
 8001e9c:	79bb      	ldrb	r3, [r7, #6]
 8001e9e:	2b3f      	cmp	r3, #63	; 0x3f
 8001ea0:	d833      	bhi.n	8001f0a <ssd1331_display_string+0x8a>
		return;
	}
	
    while (*pchString != '\0') {       
 8001ea2:	e02d      	b.n	8001f00 <ssd1331_display_string+0x80>
        if (chXpos > (OLED_WIDTH - chSize / 2)) {
 8001ea4:	79fa      	ldrb	r2, [r7, #7]
 8001ea6:	797b      	ldrb	r3, [r7, #5]
 8001ea8:	085b      	lsrs	r3, r3, #1
 8001eaa:	b2db      	uxtb	r3, r3
 8001eac:	f1c3 0360 	rsb	r3, r3, #96	; 0x60
 8001eb0:	429a      	cmp	r2, r3
 8001eb2:	dd12      	ble.n	8001eda <ssd1331_display_string+0x5a>
			chXpos = 0;
 8001eb4:	2300      	movs	r3, #0
 8001eb6:	71fb      	strb	r3, [r7, #7]
			chYpos += chSize;
 8001eb8:	79ba      	ldrb	r2, [r7, #6]
 8001eba:	797b      	ldrb	r3, [r7, #5]
 8001ebc:	4413      	add	r3, r2
 8001ebe:	71bb      	strb	r3, [r7, #6]
			if (chYpos > (OLED_HEIGHT - chSize)) {
 8001ec0:	79ba      	ldrb	r2, [r7, #6]
 8001ec2:	797b      	ldrb	r3, [r7, #5]
 8001ec4:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 8001ec8:	429a      	cmp	r2, r3
 8001eca:	dd06      	ble.n	8001eda <ssd1331_display_string+0x5a>
				chYpos = chXpos = 0;
 8001ecc:	2300      	movs	r3, #0
 8001ece:	71fb      	strb	r3, [r7, #7]
 8001ed0:	79fb      	ldrb	r3, [r7, #7]
 8001ed2:	71bb      	strb	r3, [r7, #6]
				ssd1331_clear_screen(0x00);
 8001ed4:	2000      	movs	r0, #0
 8001ed6:	f000 f81c 	bl	8001f12 <ssd1331_clear_screen>
			}
		}
		
        ssd1331_display_char(chXpos, chYpos, *pchString, chSize, hwColor);
 8001eda:	683b      	ldr	r3, [r7, #0]
 8001edc:	781a      	ldrb	r2, [r3, #0]
 8001ede:	797c      	ldrb	r4, [r7, #5]
 8001ee0:	79b9      	ldrb	r1, [r7, #6]
 8001ee2:	79f8      	ldrb	r0, [r7, #7]
 8001ee4:	8b3b      	ldrh	r3, [r7, #24]
 8001ee6:	9300      	str	r3, [sp, #0]
 8001ee8:	4623      	mov	r3, r4
 8001eea:	f7ff ff53 	bl	8001d94 <ssd1331_display_char>
        chXpos += chSize / 2;
 8001eee:	797b      	ldrb	r3, [r7, #5]
 8001ef0:	085b      	lsrs	r3, r3, #1
 8001ef2:	b2da      	uxtb	r2, r3
 8001ef4:	79fb      	ldrb	r3, [r7, #7]
 8001ef6:	4413      	add	r3, r2
 8001ef8:	71fb      	strb	r3, [r7, #7]
        pchString ++;
 8001efa:	683b      	ldr	r3, [r7, #0]
 8001efc:	3301      	adds	r3, #1
 8001efe:	603b      	str	r3, [r7, #0]
    while (*pchString != '\0') {       
 8001f00:	683b      	ldr	r3, [r7, #0]
 8001f02:	781b      	ldrb	r3, [r3, #0]
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d1cd      	bne.n	8001ea4 <ssd1331_display_string+0x24>
 8001f08:	e000      	b.n	8001f0c <ssd1331_display_string+0x8c>
		return;
 8001f0a:	bf00      	nop
    } 
}
 8001f0c:	370c      	adds	r7, #12
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	bd90      	pop	{r4, r7, pc}

08001f12 <ssd1331_clear_screen>:
        }
    }
}

void ssd1331_clear_screen(uint16_t hwColor)  
{
 8001f12:	b580      	push	{r7, lr}
 8001f14:	b084      	sub	sp, #16
 8001f16:	af00      	add	r7, sp, #0
 8001f18:	4603      	mov	r3, r0
 8001f1a:	80fb      	strh	r3, [r7, #6]
	uint16_t i, j;
	
	for(i = 0; i < OLED_HEIGHT; i ++){
 8001f1c:	2300      	movs	r3, #0
 8001f1e:	81fb      	strh	r3, [r7, #14]
 8001f20:	e013      	b.n	8001f4a <ssd1331_clear_screen+0x38>
		for(j = 0; j < OLED_WIDTH; j ++){
 8001f22:	2300      	movs	r3, #0
 8001f24:	81bb      	strh	r3, [r7, #12]
 8001f26:	e00a      	b.n	8001f3e <ssd1331_clear_screen+0x2c>
			ssd1331_draw_point(j, i, hwColor);
 8001f28:	89bb      	ldrh	r3, [r7, #12]
 8001f2a:	b2db      	uxtb	r3, r3
 8001f2c:	89fa      	ldrh	r2, [r7, #14]
 8001f2e:	b2d1      	uxtb	r1, r2
 8001f30:	88fa      	ldrh	r2, [r7, #6]
 8001f32:	4618      	mov	r0, r3
 8001f34:	f7ff fef2 	bl	8001d1c <ssd1331_draw_point>
		for(j = 0; j < OLED_WIDTH; j ++){
 8001f38:	89bb      	ldrh	r3, [r7, #12]
 8001f3a:	3301      	adds	r3, #1
 8001f3c:	81bb      	strh	r3, [r7, #12]
 8001f3e:	89bb      	ldrh	r3, [r7, #12]
 8001f40:	2b5f      	cmp	r3, #95	; 0x5f
 8001f42:	d9f1      	bls.n	8001f28 <ssd1331_clear_screen+0x16>
	for(i = 0; i < OLED_HEIGHT; i ++){
 8001f44:	89fb      	ldrh	r3, [r7, #14]
 8001f46:	3301      	adds	r3, #1
 8001f48:	81fb      	strh	r3, [r7, #14]
 8001f4a:	89fb      	ldrh	r3, [r7, #14]
 8001f4c:	2b3f      	cmp	r3, #63	; 0x3f
 8001f4e:	d9e8      	bls.n	8001f22 <ssd1331_clear_screen+0x10>
		}
	}
}
 8001f50:	bf00      	nop
 8001f52:	bf00      	nop
 8001f54:	3710      	adds	r7, #16
 8001f56:	46bd      	mov	sp, r7
 8001f58:	bd80      	pop	{r7, pc}
	...

08001f5c <ssd1331_init>:


void ssd1331_init(void)
{
 8001f5c:	b580      	push	{r7, lr}
 8001f5e:	af00      	add	r7, sp, #0
  __SSD1331_RES_SET();  //RES set
 8001f60:	2201      	movs	r2, #1
 8001f62:	2140      	movs	r1, #64	; 0x40
 8001f64:	4852      	ldr	r0, [pc, #328]	; (80020b0 <ssd1331_init+0x154>)
 8001f66:	f000 fe07 	bl	8002b78 <HAL_GPIO_WritePin>
  __SSD1331_CS_SET();
 8001f6a:	2201      	movs	r2, #1
 8001f6c:	2110      	movs	r1, #16
 8001f6e:	4850      	ldr	r0, [pc, #320]	; (80020b0 <ssd1331_init+0x154>)
 8001f70:	f000 fe02 	bl	8002b78 <HAL_GPIO_WritePin>
	
  ssd1331_write_byte(DISPLAY_OFF, SSD1331_CMD);          //Display Off
 8001f74:	2100      	movs	r1, #0
 8001f76:	20ae      	movs	r0, #174	; 0xae
 8001f78:	f7ff fe9c 	bl	8001cb4 <ssd1331_write_byte>
  ssd1331_write_byte(SET_CONTRAST_A, SSD1331_CMD);       //Set contrast for color A
 8001f7c:	2100      	movs	r1, #0
 8001f7e:	2081      	movs	r0, #129	; 0x81
 8001f80:	f7ff fe98 	bl	8001cb4 <ssd1331_write_byte>
  ssd1331_write_byte(0xFF, SSD1331_CMD);                     //145 0x91
 8001f84:	2100      	movs	r1, #0
 8001f86:	20ff      	movs	r0, #255	; 0xff
 8001f88:	f7ff fe94 	bl	8001cb4 <ssd1331_write_byte>
  ssd1331_write_byte(SET_CONTRAST_B, SSD1331_CMD);       //Set contrast for color B
 8001f8c:	2100      	movs	r1, #0
 8001f8e:	2082      	movs	r0, #130	; 0x82
 8001f90:	f7ff fe90 	bl	8001cb4 <ssd1331_write_byte>
  ssd1331_write_byte(0xFF, SSD1331_CMD);                     //80 0x50
 8001f94:	2100      	movs	r1, #0
 8001f96:	20ff      	movs	r0, #255	; 0xff
 8001f98:	f7ff fe8c 	bl	8001cb4 <ssd1331_write_byte>
  ssd1331_write_byte(SET_CONTRAST_C, SSD1331_CMD);       //Set contrast for color C
 8001f9c:	2100      	movs	r1, #0
 8001f9e:	2083      	movs	r0, #131	; 0x83
 8001fa0:	f7ff fe88 	bl	8001cb4 <ssd1331_write_byte>
  ssd1331_write_byte(0xFF, SSD1331_CMD);                     //125 0x7D
 8001fa4:	2100      	movs	r1, #0
 8001fa6:	20ff      	movs	r0, #255	; 0xff
 8001fa8:	f7ff fe84 	bl	8001cb4 <ssd1331_write_byte>
  ssd1331_write_byte(MASTER_CURRENT_CONTROL, SSD1331_CMD);//master current control
 8001fac:	2100      	movs	r1, #0
 8001fae:	2087      	movs	r0, #135	; 0x87
 8001fb0:	f7ff fe80 	bl	8001cb4 <ssd1331_write_byte>
  ssd1331_write_byte(0x06, SSD1331_CMD);                     //6
 8001fb4:	2100      	movs	r1, #0
 8001fb6:	2006      	movs	r0, #6
 8001fb8:	f7ff fe7c 	bl	8001cb4 <ssd1331_write_byte>
  ssd1331_write_byte(SET_PRECHARGE_SPEED_A, SSD1331_CMD);//Set Second Pre-change Speed For ColorA
 8001fbc:	2100      	movs	r1, #0
 8001fbe:	208a      	movs	r0, #138	; 0x8a
 8001fc0:	f7ff fe78 	bl	8001cb4 <ssd1331_write_byte>
  ssd1331_write_byte(0x64, SSD1331_CMD);                     //100
 8001fc4:	2100      	movs	r1, #0
 8001fc6:	2064      	movs	r0, #100	; 0x64
 8001fc8:	f7ff fe74 	bl	8001cb4 <ssd1331_write_byte>
  ssd1331_write_byte(SET_PRECHARGE_SPEED_B, SSD1331_CMD);//Set Second Pre-change Speed For ColorB
 8001fcc:	2100      	movs	r1, #0
 8001fce:	208b      	movs	r0, #139	; 0x8b
 8001fd0:	f7ff fe70 	bl	8001cb4 <ssd1331_write_byte>
  ssd1331_write_byte(0x78, SSD1331_CMD);                     //120
 8001fd4:	2100      	movs	r1, #0
 8001fd6:	2078      	movs	r0, #120	; 0x78
 8001fd8:	f7ff fe6c 	bl	8001cb4 <ssd1331_write_byte>
  ssd1331_write_byte(SET_PRECHARGE_SPEED_C, SSD1331_CMD);//Set Second Pre-change Speed For ColorC
 8001fdc:	2100      	movs	r1, #0
 8001fde:	208c      	movs	r0, #140	; 0x8c
 8001fe0:	f7ff fe68 	bl	8001cb4 <ssd1331_write_byte>
  ssd1331_write_byte(0x64, SSD1331_CMD);                     //100
 8001fe4:	2100      	movs	r1, #0
 8001fe6:	2064      	movs	r0, #100	; 0x64
 8001fe8:	f7ff fe64 	bl	8001cb4 <ssd1331_write_byte>
  ssd1331_write_byte(SET_REMAP, SSD1331_CMD);            //set remap & data format
 8001fec:	2100      	movs	r1, #0
 8001fee:	20a0      	movs	r0, #160	; 0xa0
 8001ff0:	f7ff fe60 	bl	8001cb4 <ssd1331_write_byte>
  ssd1331_write_byte(0x72, SSD1331_CMD);                     //0x72              
 8001ff4:	2100      	movs	r1, #0
 8001ff6:	2072      	movs	r0, #114	; 0x72
 8001ff8:	f7ff fe5c 	bl	8001cb4 <ssd1331_write_byte>
  ssd1331_write_byte(SET_DISPLAY_START_LINE, SSD1331_CMD);//Set display Start Line
 8001ffc:	2100      	movs	r1, #0
 8001ffe:	20a1      	movs	r0, #161	; 0xa1
 8002000:	f7ff fe58 	bl	8001cb4 <ssd1331_write_byte>
  ssd1331_write_byte(0x0, SSD1331_CMD);
 8002004:	2100      	movs	r1, #0
 8002006:	2000      	movs	r0, #0
 8002008:	f7ff fe54 	bl	8001cb4 <ssd1331_write_byte>
  ssd1331_write_byte(SET_DISPLAY_OFFSET, SSD1331_CMD);   //Set display offset
 800200c:	2100      	movs	r1, #0
 800200e:	20a2      	movs	r0, #162	; 0xa2
 8002010:	f7ff fe50 	bl	8001cb4 <ssd1331_write_byte>
  ssd1331_write_byte(0x0, SSD1331_CMD);
 8002014:	2100      	movs	r1, #0
 8002016:	2000      	movs	r0, #0
 8002018:	f7ff fe4c 	bl	8001cb4 <ssd1331_write_byte>
  ssd1331_write_byte(NORMAL_DISPLAY, SSD1331_CMD);       //Set display mode
 800201c:	2100      	movs	r1, #0
 800201e:	20a4      	movs	r0, #164	; 0xa4
 8002020:	f7ff fe48 	bl	8001cb4 <ssd1331_write_byte>
  ssd1331_write_byte(SET_MULTIPLEX_RATIO, SSD1331_CMD);  //Set multiplex ratio
 8002024:	2100      	movs	r1, #0
 8002026:	20a8      	movs	r0, #168	; 0xa8
 8002028:	f7ff fe44 	bl	8001cb4 <ssd1331_write_byte>
  ssd1331_write_byte(0x3F, SSD1331_CMD);
 800202c:	2100      	movs	r1, #0
 800202e:	203f      	movs	r0, #63	; 0x3f
 8002030:	f7ff fe40 	bl	8001cb4 <ssd1331_write_byte>
  ssd1331_write_byte(SET_MASTER_CONFIGURE, SSD1331_CMD); //Set master configuration
 8002034:	2100      	movs	r1, #0
 8002036:	20ad      	movs	r0, #173	; 0xad
 8002038:	f7ff fe3c 	bl	8001cb4 <ssd1331_write_byte>
  ssd1331_write_byte(0x8E, SSD1331_CMD);
 800203c:	2100      	movs	r1, #0
 800203e:	208e      	movs	r0, #142	; 0x8e
 8002040:	f7ff fe38 	bl	8001cb4 <ssd1331_write_byte>
  ssd1331_write_byte(POWER_SAVE_MODE, SSD1331_CMD);      //Set Power Save Mode
 8002044:	2100      	movs	r1, #0
 8002046:	20b0      	movs	r0, #176	; 0xb0
 8002048:	f7ff fe34 	bl	8001cb4 <ssd1331_write_byte>
  ssd1331_write_byte(0x00, SSD1331_CMD);                     //0x00
 800204c:	2100      	movs	r1, #0
 800204e:	2000      	movs	r0, #0
 8002050:	f7ff fe30 	bl	8001cb4 <ssd1331_write_byte>
  ssd1331_write_byte(PHASE_PERIOD_ADJUSTMENT, SSD1331_CMD);//phase 1 and 2 period adjustment
 8002054:	2100      	movs	r1, #0
 8002056:	20b1      	movs	r0, #177	; 0xb1
 8002058:	f7ff fe2c 	bl	8001cb4 <ssd1331_write_byte>
  ssd1331_write_byte(0x31, SSD1331_CMD);                     //0x31
 800205c:	2100      	movs	r1, #0
 800205e:	2031      	movs	r0, #49	; 0x31
 8002060:	f7ff fe28 	bl	8001cb4 <ssd1331_write_byte>
  ssd1331_write_byte(DISPLAY_CLOCK_DIV, SSD1331_CMD);    //display clock divider/oscillator frequency
 8002064:	2100      	movs	r1, #0
 8002066:	20b3      	movs	r0, #179	; 0xb3
 8002068:	f7ff fe24 	bl	8001cb4 <ssd1331_write_byte>
  ssd1331_write_byte(0xF0, SSD1331_CMD);
 800206c:	2100      	movs	r1, #0
 800206e:	20f0      	movs	r0, #240	; 0xf0
 8002070:	f7ff fe20 	bl	8001cb4 <ssd1331_write_byte>
  ssd1331_write_byte(SET_PRECHARGE_VOLTAGE, SSD1331_CMD);//Set Pre-Change Level
 8002074:	2100      	movs	r1, #0
 8002076:	20bb      	movs	r0, #187	; 0xbb
 8002078:	f7ff fe1c 	bl	8001cb4 <ssd1331_write_byte>
  ssd1331_write_byte(0x3A, SSD1331_CMD);
 800207c:	2100      	movs	r1, #0
 800207e:	203a      	movs	r0, #58	; 0x3a
 8002080:	f7ff fe18 	bl	8001cb4 <ssd1331_write_byte>
  ssd1331_write_byte(SET_V_VOLTAGE, SSD1331_CMD);        //Set vcomH
 8002084:	2100      	movs	r1, #0
 8002086:	20be      	movs	r0, #190	; 0xbe
 8002088:	f7ff fe14 	bl	8001cb4 <ssd1331_write_byte>
  ssd1331_write_byte(0x3E, SSD1331_CMD);
 800208c:	2100      	movs	r1, #0
 800208e:	203e      	movs	r0, #62	; 0x3e
 8002090:	f7ff fe10 	bl	8001cb4 <ssd1331_write_byte>
  ssd1331_write_byte(DEACTIVE_SCROLLING, SSD1331_CMD);   //disable scrolling
 8002094:	2100      	movs	r1, #0
 8002096:	202e      	movs	r0, #46	; 0x2e
 8002098:	f7ff fe0c 	bl	8001cb4 <ssd1331_write_byte>
  ssd1331_write_byte(NORMAL_BRIGHTNESS_DISPLAY_ON, SSD1331_CMD);//set display on
 800209c:	2100      	movs	r1, #0
 800209e:	20af      	movs	r0, #175	; 0xaf
 80020a0:	f7ff fe08 	bl	8001cb4 <ssd1331_write_byte>
  
  //ssd1331_fill_rect(0, 0, 96, 64, 0x0000);
  ssd1331_clear_screen(0x0000);
 80020a4:	2000      	movs	r0, #0
 80020a6:	f7ff ff34 	bl	8001f12 <ssd1331_clear_screen>
}
 80020aa:	bf00      	nop
 80020ac:	bd80      	pop	{r7, pc}
 80020ae:	bf00      	nop
 80020b0:	48000400 	.word	0x48000400

080020b4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80020b4:	b480      	push	{r7}
 80020b6:	b083      	sub	sp, #12
 80020b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80020ba:	4b0f      	ldr	r3, [pc, #60]	; (80020f8 <HAL_MspInit+0x44>)
 80020bc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80020be:	4a0e      	ldr	r2, [pc, #56]	; (80020f8 <HAL_MspInit+0x44>)
 80020c0:	f043 0301 	orr.w	r3, r3, #1
 80020c4:	6613      	str	r3, [r2, #96]	; 0x60
 80020c6:	4b0c      	ldr	r3, [pc, #48]	; (80020f8 <HAL_MspInit+0x44>)
 80020c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80020ca:	f003 0301 	and.w	r3, r3, #1
 80020ce:	607b      	str	r3, [r7, #4]
 80020d0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80020d2:	4b09      	ldr	r3, [pc, #36]	; (80020f8 <HAL_MspInit+0x44>)
 80020d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020d6:	4a08      	ldr	r2, [pc, #32]	; (80020f8 <HAL_MspInit+0x44>)
 80020d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80020dc:	6593      	str	r3, [r2, #88]	; 0x58
 80020de:	4b06      	ldr	r3, [pc, #24]	; (80020f8 <HAL_MspInit+0x44>)
 80020e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020e6:	603b      	str	r3, [r7, #0]
 80020e8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80020ea:	bf00      	nop
 80020ec:	370c      	adds	r7, #12
 80020ee:	46bd      	mov	sp, r7
 80020f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f4:	4770      	bx	lr
 80020f6:	bf00      	nop
 80020f8:	40021000 	.word	0x40021000

080020fc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80020fc:	b580      	push	{r7, lr}
 80020fe:	b08a      	sub	sp, #40	; 0x28
 8002100:	af00      	add	r7, sp, #0
 8002102:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002104:	f107 0314 	add.w	r3, r7, #20
 8002108:	2200      	movs	r2, #0
 800210a:	601a      	str	r2, [r3, #0]
 800210c:	605a      	str	r2, [r3, #4]
 800210e:	609a      	str	r2, [r3, #8]
 8002110:	60da      	str	r2, [r3, #12]
 8002112:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	4a18      	ldr	r2, [pc, #96]	; (800217c <HAL_SPI_MspInit+0x80>)
 800211a:	4293      	cmp	r3, r2
 800211c:	d129      	bne.n	8002172 <HAL_SPI_MspInit+0x76>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800211e:	4b18      	ldr	r3, [pc, #96]	; (8002180 <HAL_SPI_MspInit+0x84>)
 8002120:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002122:	4a17      	ldr	r2, [pc, #92]	; (8002180 <HAL_SPI_MspInit+0x84>)
 8002124:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002128:	6613      	str	r3, [r2, #96]	; 0x60
 800212a:	4b15      	ldr	r3, [pc, #84]	; (8002180 <HAL_SPI_MspInit+0x84>)
 800212c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800212e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002132:	613b      	str	r3, [r7, #16]
 8002134:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002136:	4b12      	ldr	r3, [pc, #72]	; (8002180 <HAL_SPI_MspInit+0x84>)
 8002138:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800213a:	4a11      	ldr	r2, [pc, #68]	; (8002180 <HAL_SPI_MspInit+0x84>)
 800213c:	f043 0301 	orr.w	r3, r3, #1
 8002140:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002142:	4b0f      	ldr	r3, [pc, #60]	; (8002180 <HAL_SPI_MspInit+0x84>)
 8002144:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002146:	f003 0301 	and.w	r3, r3, #1
 800214a:	60fb      	str	r3, [r7, #12]
 800214c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA12     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_12;
 800214e:	f44f 5381 	mov.w	r3, #4128	; 0x1020
 8002152:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002154:	2302      	movs	r3, #2
 8002156:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002158:	2300      	movs	r3, #0
 800215a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800215c:	2303      	movs	r3, #3
 800215e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002160:	2305      	movs	r3, #5
 8002162:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002164:	f107 0314 	add.w	r3, r7, #20
 8002168:	4619      	mov	r1, r3
 800216a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800216e:	f000 fb81 	bl	8002874 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8002172:	bf00      	nop
 8002174:	3728      	adds	r7, #40	; 0x28
 8002176:	46bd      	mov	sp, r7
 8002178:	bd80      	pop	{r7, pc}
 800217a:	bf00      	nop
 800217c:	40013000 	.word	0x40013000
 8002180:	40021000 	.word	0x40021000

08002184 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8002184:	b480      	push	{r7}
 8002186:	b085      	sub	sp, #20
 8002188:	af00      	add	r7, sp, #0
 800218a:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	4a0a      	ldr	r2, [pc, #40]	; (80021bc <HAL_TIM_PWM_MspInit+0x38>)
 8002192:	4293      	cmp	r3, r2
 8002194:	d10b      	bne.n	80021ae <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002196:	4b0a      	ldr	r3, [pc, #40]	; (80021c0 <HAL_TIM_PWM_MspInit+0x3c>)
 8002198:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800219a:	4a09      	ldr	r2, [pc, #36]	; (80021c0 <HAL_TIM_PWM_MspInit+0x3c>)
 800219c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80021a0:	6613      	str	r3, [r2, #96]	; 0x60
 80021a2:	4b07      	ldr	r3, [pc, #28]	; (80021c0 <HAL_TIM_PWM_MspInit+0x3c>)
 80021a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80021a6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80021aa:	60fb      	str	r3, [r7, #12]
 80021ac:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80021ae:	bf00      	nop
 80021b0:	3714      	adds	r7, #20
 80021b2:	46bd      	mov	sp, r7
 80021b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b8:	4770      	bx	lr
 80021ba:	bf00      	nop
 80021bc:	40012c00 	.word	0x40012c00
 80021c0:	40021000 	.word	0x40021000

080021c4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80021c4:	b580      	push	{r7, lr}
 80021c6:	b088      	sub	sp, #32
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021cc:	f107 030c 	add.w	r3, r7, #12
 80021d0:	2200      	movs	r2, #0
 80021d2:	601a      	str	r2, [r3, #0]
 80021d4:	605a      	str	r2, [r3, #4]
 80021d6:	609a      	str	r2, [r3, #8]
 80021d8:	60da      	str	r2, [r3, #12]
 80021da:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	4a11      	ldr	r2, [pc, #68]	; (8002228 <HAL_TIM_MspPostInit+0x64>)
 80021e2:	4293      	cmp	r3, r2
 80021e4:	d11c      	bne.n	8002220 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80021e6:	4b11      	ldr	r3, [pc, #68]	; (800222c <HAL_TIM_MspPostInit+0x68>)
 80021e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021ea:	4a10      	ldr	r2, [pc, #64]	; (800222c <HAL_TIM_MspPostInit+0x68>)
 80021ec:	f043 0301 	orr.w	r3, r3, #1
 80021f0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80021f2:	4b0e      	ldr	r3, [pc, #56]	; (800222c <HAL_TIM_MspPostInit+0x68>)
 80021f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021f6:	f003 0301 	and.w	r3, r3, #1
 80021fa:	60bb      	str	r3, [r7, #8]
 80021fc:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA7     ------> TIM1_CH1N
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80021fe:	2380      	movs	r3, #128	; 0x80
 8002200:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002202:	2302      	movs	r3, #2
 8002204:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002206:	2300      	movs	r3, #0
 8002208:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800220a:	2300      	movs	r3, #0
 800220c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800220e:	2301      	movs	r3, #1
 8002210:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002212:	f107 030c 	add.w	r3, r7, #12
 8002216:	4619      	mov	r1, r3
 8002218:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800221c:	f000 fb2a 	bl	8002874 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8002220:	bf00      	nop
 8002222:	3720      	adds	r7, #32
 8002224:	46bd      	mov	sp, r7
 8002226:	bd80      	pop	{r7, pc}
 8002228:	40012c00 	.word	0x40012c00
 800222c:	40021000 	.word	0x40021000

08002230 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002230:	b580      	push	{r7, lr}
 8002232:	b09e      	sub	sp, #120	; 0x78
 8002234:	af00      	add	r7, sp, #0
 8002236:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002238:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800223c:	2200      	movs	r2, #0
 800223e:	601a      	str	r2, [r3, #0]
 8002240:	605a      	str	r2, [r3, #4]
 8002242:	609a      	str	r2, [r3, #8]
 8002244:	60da      	str	r2, [r3, #12]
 8002246:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002248:	f107 0310 	add.w	r3, r7, #16
 800224c:	2254      	movs	r2, #84	; 0x54
 800224e:	2100      	movs	r1, #0
 8002250:	4618      	mov	r0, r3
 8002252:	f003 fca9 	bl	8005ba8 <memset>
  if(huart->Instance==USART2)
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	4a28      	ldr	r2, [pc, #160]	; (80022fc <HAL_UART_MspInit+0xcc>)
 800225c:	4293      	cmp	r3, r2
 800225e:	d148      	bne.n	80022f2 <HAL_UART_MspInit+0xc2>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8002260:	2302      	movs	r3, #2
 8002262:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8002264:	2300      	movs	r3, #0
 8002266:	637b      	str	r3, [r7, #52]	; 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002268:	f107 0310 	add.w	r3, r7, #16
 800226c:	4618      	mov	r0, r3
 800226e:	f001 fb47 	bl	8003900 <HAL_RCCEx_PeriphCLKConfig>
 8002272:	4603      	mov	r3, r0
 8002274:	2b00      	cmp	r3, #0
 8002276:	d001      	beq.n	800227c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002278:	f7ff fd16 	bl	8001ca8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800227c:	4b20      	ldr	r3, [pc, #128]	; (8002300 <HAL_UART_MspInit+0xd0>)
 800227e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002280:	4a1f      	ldr	r2, [pc, #124]	; (8002300 <HAL_UART_MspInit+0xd0>)
 8002282:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002286:	6593      	str	r3, [r2, #88]	; 0x58
 8002288:	4b1d      	ldr	r3, [pc, #116]	; (8002300 <HAL_UART_MspInit+0xd0>)
 800228a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800228c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002290:	60fb      	str	r3, [r7, #12]
 8002292:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002294:	4b1a      	ldr	r3, [pc, #104]	; (8002300 <HAL_UART_MspInit+0xd0>)
 8002296:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002298:	4a19      	ldr	r2, [pc, #100]	; (8002300 <HAL_UART_MspInit+0xd0>)
 800229a:	f043 0301 	orr.w	r3, r3, #1
 800229e:	64d3      	str	r3, [r2, #76]	; 0x4c
 80022a0:	4b17      	ldr	r3, [pc, #92]	; (8002300 <HAL_UART_MspInit+0xd0>)
 80022a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022a4:	f003 0301 	and.w	r3, r3, #1
 80022a8:	60bb      	str	r3, [r7, #8]
 80022aa:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15 (JTDI)     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 80022ac:	2304      	movs	r3, #4
 80022ae:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022b0:	2302      	movs	r3, #2
 80022b2:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022b4:	2300      	movs	r3, #0
 80022b6:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80022b8:	2303      	movs	r3, #3
 80022ba:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80022bc:	2307      	movs	r3, #7
 80022be:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 80022c0:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80022c4:	4619      	mov	r1, r3
 80022c6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80022ca:	f000 fad3 	bl	8002874 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_RX_Pin;
 80022ce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80022d2:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022d4:	2302      	movs	r3, #2
 80022d6:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022d8:	2300      	movs	r3, #0
 80022da:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80022dc:	2303      	movs	r3, #3
 80022de:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 80022e0:	2303      	movs	r3, #3
 80022e2:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 80022e4:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80022e8:	4619      	mov	r1, r3
 80022ea:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80022ee:	f000 fac1 	bl	8002874 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80022f2:	bf00      	nop
 80022f4:	3778      	adds	r7, #120	; 0x78
 80022f6:	46bd      	mov	sp, r7
 80022f8:	bd80      	pop	{r7, pc}
 80022fa:	bf00      	nop
 80022fc:	40004400 	.word	0x40004400
 8002300:	40021000 	.word	0x40021000

08002304 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002304:	b480      	push	{r7}
 8002306:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002308:	e7fe      	b.n	8002308 <NMI_Handler+0x4>

0800230a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800230a:	b480      	push	{r7}
 800230c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800230e:	e7fe      	b.n	800230e <HardFault_Handler+0x4>

08002310 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002310:	b480      	push	{r7}
 8002312:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002314:	e7fe      	b.n	8002314 <MemManage_Handler+0x4>

08002316 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002316:	b480      	push	{r7}
 8002318:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800231a:	e7fe      	b.n	800231a <BusFault_Handler+0x4>

0800231c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800231c:	b480      	push	{r7}
 800231e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002320:	e7fe      	b.n	8002320 <UsageFault_Handler+0x4>

08002322 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002322:	b480      	push	{r7}
 8002324:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002326:	bf00      	nop
 8002328:	46bd      	mov	sp, r7
 800232a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800232e:	4770      	bx	lr

08002330 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002330:	b480      	push	{r7}
 8002332:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002334:	bf00      	nop
 8002336:	46bd      	mov	sp, r7
 8002338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800233c:	4770      	bx	lr

0800233e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800233e:	b480      	push	{r7}
 8002340:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002342:	bf00      	nop
 8002344:	46bd      	mov	sp, r7
 8002346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800234a:	4770      	bx	lr

0800234c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800234c:	b580      	push	{r7, lr}
 800234e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002350:	f000 f966 	bl	8002620 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002354:	bf00      	nop
 8002356:	bd80      	pop	{r7, pc}

08002358 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002358:	b480      	push	{r7}
 800235a:	af00      	add	r7, sp, #0
	return 1;
 800235c:	2301      	movs	r3, #1
}
 800235e:	4618      	mov	r0, r3
 8002360:	46bd      	mov	sp, r7
 8002362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002366:	4770      	bx	lr

08002368 <_kill>:

int _kill(int pid, int sig)
{
 8002368:	b580      	push	{r7, lr}
 800236a:	b082      	sub	sp, #8
 800236c:	af00      	add	r7, sp, #0
 800236e:	6078      	str	r0, [r7, #4]
 8002370:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002372:	f003 fbef 	bl	8005b54 <__errno>
 8002376:	4603      	mov	r3, r0
 8002378:	2216      	movs	r2, #22
 800237a:	601a      	str	r2, [r3, #0]
	return -1;
 800237c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002380:	4618      	mov	r0, r3
 8002382:	3708      	adds	r7, #8
 8002384:	46bd      	mov	sp, r7
 8002386:	bd80      	pop	{r7, pc}

08002388 <_exit>:

void _exit (int status)
{
 8002388:	b580      	push	{r7, lr}
 800238a:	b082      	sub	sp, #8
 800238c:	af00      	add	r7, sp, #0
 800238e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002390:	f04f 31ff 	mov.w	r1, #4294967295
 8002394:	6878      	ldr	r0, [r7, #4]
 8002396:	f7ff ffe7 	bl	8002368 <_kill>
	while (1) {}		/* Make sure we hang here */
 800239a:	e7fe      	b.n	800239a <_exit+0x12>

0800239c <_read>:
}

int _read (int file, char *ptr, int len)
{
 800239c:	b580      	push	{r7, lr}
 800239e:	b086      	sub	sp, #24
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	60f8      	str	r0, [r7, #12]
 80023a4:	60b9      	str	r1, [r7, #8]
 80023a6:	607a      	str	r2, [r7, #4]
//	}

	// Conestoga College implemented change to cause VCP to be used for stdin
	extern UART_HandleTypeDef huart2;

	int returnVal= 0;
 80023a8:	2300      	movs	r3, #0
 80023aa:	617b      	str	r3, [r7, #20]
	len = 1;						// over ride the read and only get 1 char
 80023ac:	2301      	movs	r3, #1
 80023ae:	607b      	str	r3, [r7, #4]

	returnVal = HAL_UART_Receive(&huart2, (uint8_t *)ptr, len, 0xffffffff);
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	b29a      	uxth	r2, r3
 80023b4:	f04f 33ff 	mov.w	r3, #4294967295
 80023b8:	68b9      	ldr	r1, [r7, #8]
 80023ba:	480a      	ldr	r0, [pc, #40]	; (80023e4 <_read+0x48>)
 80023bc:	f002 ff1c 	bl	80051f8 <HAL_UART_Receive>
 80023c0:	4603      	mov	r3, r0
 80023c2:	617b      	str	r3, [r7, #20]
	if( returnVal == HAL_OK )
 80023c4:	697b      	ldr	r3, [r7, #20]
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d101      	bne.n	80023ce <_read+0x32>
		return len;
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	e006      	b.n	80023dc <_read+0x40>
	else if( returnVal == HAL_TIMEOUT )
 80023ce:	697b      	ldr	r3, [r7, #20]
 80023d0:	2b03      	cmp	r3, #3
 80023d2:	d101      	bne.n	80023d8 <_read+0x3c>
		return 0;
 80023d4:	2300      	movs	r3, #0
 80023d6:	e001      	b.n	80023dc <_read+0x40>
	else
		return EOF;
 80023d8:	f04f 33ff 	mov.w	r3, #4294967295

}
 80023dc:	4618      	mov	r0, r3
 80023de:	3718      	adds	r7, #24
 80023e0:	46bd      	mov	sp, r7
 80023e2:	bd80      	pop	{r7, pc}
 80023e4:	200002ac 	.word	0x200002ac

080023e8 <_write>:

int _write(int file, char *ptr, int len){
 80023e8:	b580      	push	{r7, lr}
 80023ea:	b086      	sub	sp, #24
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	60f8      	str	r0, [r7, #12]
 80023f0:	60b9      	str	r1, [r7, #8]
 80023f2:	607a      	str	r2, [r7, #4]
	extern UART_HandleTypeDef huart2;
	HAL_StatusTypeDef result = HAL_OK;
 80023f4:	2300      	movs	r3, #0
 80023f6:	75fb      	strb	r3, [r7, #23]
	result = HAL_UART_Transmit(&huart2, (uint8_t *)ptr, len, HAL_MAX_DELAY);
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	b29a      	uxth	r2, r3
 80023fc:	f04f 33ff 	mov.w	r3, #4294967295
 8002400:	68b9      	ldr	r1, [r7, #8]
 8002402:	4809      	ldr	r0, [pc, #36]	; (8002428 <_write+0x40>)
 8002404:	f002 fe64 	bl	80050d0 <HAL_UART_Transmit>
 8002408:	4603      	mov	r3, r0
 800240a:	75fb      	strb	r3, [r7, #23]
	if(result == HAL_ERROR || result == HAL_BUSY)
 800240c:	7dfb      	ldrb	r3, [r7, #23]
 800240e:	2b01      	cmp	r3, #1
 8002410:	d002      	beq.n	8002418 <_write+0x30>
 8002412:	7dfb      	ldrb	r3, [r7, #23]
 8002414:	2b02      	cmp	r3, #2
 8002416:	d101      	bne.n	800241c <_write+0x34>
	{
		Error_Handler();
 8002418:	f7ff fc46 	bl	8001ca8 <Error_Handler>
	}

	return len;
 800241c:	687b      	ldr	r3, [r7, #4]
}
 800241e:	4618      	mov	r0, r3
 8002420:	3718      	adds	r7, #24
 8002422:	46bd      	mov	sp, r7
 8002424:	bd80      	pop	{r7, pc}
 8002426:	bf00      	nop
 8002428:	200002ac 	.word	0x200002ac

0800242c <_close>:



int _close(int file)
{
 800242c:	b480      	push	{r7}
 800242e:	b083      	sub	sp, #12
 8002430:	af00      	add	r7, sp, #0
 8002432:	6078      	str	r0, [r7, #4]
	return -1;
 8002434:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002438:	4618      	mov	r0, r3
 800243a:	370c      	adds	r7, #12
 800243c:	46bd      	mov	sp, r7
 800243e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002442:	4770      	bx	lr

08002444 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002444:	b480      	push	{r7}
 8002446:	b083      	sub	sp, #12
 8002448:	af00      	add	r7, sp, #0
 800244a:	6078      	str	r0, [r7, #4]
 800244c:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800244e:	683b      	ldr	r3, [r7, #0]
 8002450:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002454:	605a      	str	r2, [r3, #4]
	return 0;
 8002456:	2300      	movs	r3, #0
}
 8002458:	4618      	mov	r0, r3
 800245a:	370c      	adds	r7, #12
 800245c:	46bd      	mov	sp, r7
 800245e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002462:	4770      	bx	lr

08002464 <_isatty>:

int _isatty(int file)
{
 8002464:	b480      	push	{r7}
 8002466:	b083      	sub	sp, #12
 8002468:	af00      	add	r7, sp, #0
 800246a:	6078      	str	r0, [r7, #4]
	return 1;
 800246c:	2301      	movs	r3, #1
}
 800246e:	4618      	mov	r0, r3
 8002470:	370c      	adds	r7, #12
 8002472:	46bd      	mov	sp, r7
 8002474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002478:	4770      	bx	lr

0800247a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800247a:	b480      	push	{r7}
 800247c:	b085      	sub	sp, #20
 800247e:	af00      	add	r7, sp, #0
 8002480:	60f8      	str	r0, [r7, #12]
 8002482:	60b9      	str	r1, [r7, #8]
 8002484:	607a      	str	r2, [r7, #4]
	return 0;
 8002486:	2300      	movs	r3, #0
}
 8002488:	4618      	mov	r0, r3
 800248a:	3714      	adds	r7, #20
 800248c:	46bd      	mov	sp, r7
 800248e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002492:	4770      	bx	lr

08002494 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002494:	b580      	push	{r7, lr}
 8002496:	b086      	sub	sp, #24
 8002498:	af00      	add	r7, sp, #0
 800249a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800249c:	4a14      	ldr	r2, [pc, #80]	; (80024f0 <_sbrk+0x5c>)
 800249e:	4b15      	ldr	r3, [pc, #84]	; (80024f4 <_sbrk+0x60>)
 80024a0:	1ad3      	subs	r3, r2, r3
 80024a2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80024a4:	697b      	ldr	r3, [r7, #20]
 80024a6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80024a8:	4b13      	ldr	r3, [pc, #76]	; (80024f8 <_sbrk+0x64>)
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d102      	bne.n	80024b6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80024b0:	4b11      	ldr	r3, [pc, #68]	; (80024f8 <_sbrk+0x64>)
 80024b2:	4a12      	ldr	r2, [pc, #72]	; (80024fc <_sbrk+0x68>)
 80024b4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80024b6:	4b10      	ldr	r3, [pc, #64]	; (80024f8 <_sbrk+0x64>)
 80024b8:	681a      	ldr	r2, [r3, #0]
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	4413      	add	r3, r2
 80024be:	693a      	ldr	r2, [r7, #16]
 80024c0:	429a      	cmp	r2, r3
 80024c2:	d207      	bcs.n	80024d4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80024c4:	f003 fb46 	bl	8005b54 <__errno>
 80024c8:	4603      	mov	r3, r0
 80024ca:	220c      	movs	r2, #12
 80024cc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80024ce:	f04f 33ff 	mov.w	r3, #4294967295
 80024d2:	e009      	b.n	80024e8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80024d4:	4b08      	ldr	r3, [pc, #32]	; (80024f8 <_sbrk+0x64>)
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80024da:	4b07      	ldr	r3, [pc, #28]	; (80024f8 <_sbrk+0x64>)
 80024dc:	681a      	ldr	r2, [r3, #0]
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	4413      	add	r3, r2
 80024e2:	4a05      	ldr	r2, [pc, #20]	; (80024f8 <_sbrk+0x64>)
 80024e4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80024e6:	68fb      	ldr	r3, [r7, #12]
}
 80024e8:	4618      	mov	r0, r3
 80024ea:	3718      	adds	r7, #24
 80024ec:	46bd      	mov	sp, r7
 80024ee:	bd80      	pop	{r7, pc}
 80024f0:	20010000 	.word	0x20010000
 80024f4:	00000400 	.word	0x00000400
 80024f8:	20000330 	.word	0x20000330
 80024fc:	20000348 	.word	0x20000348

08002500 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8002500:	b480      	push	{r7}
 8002502:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
  #endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8002504:	4b06      	ldr	r3, [pc, #24]	; (8002520 <SystemInit+0x20>)
 8002506:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800250a:	4a05      	ldr	r2, [pc, #20]	; (8002520 <SystemInit+0x20>)
 800250c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002510:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8002514:	bf00      	nop
 8002516:	46bd      	mov	sp, r7
 8002518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800251c:	4770      	bx	lr
 800251e:	bf00      	nop
 8002520:	e000ed00 	.word	0xe000ed00

08002524 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8002524:	f8df d034 	ldr.w	sp, [pc, #52]	; 800255c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002528:	f7ff ffea 	bl	8002500 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800252c:	480c      	ldr	r0, [pc, #48]	; (8002560 <LoopForever+0x6>)
  ldr r1, =_edata
 800252e:	490d      	ldr	r1, [pc, #52]	; (8002564 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002530:	4a0d      	ldr	r2, [pc, #52]	; (8002568 <LoopForever+0xe>)
  movs r3, #0
 8002532:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002534:	e002      	b.n	800253c <LoopCopyDataInit>

08002536 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002536:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002538:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800253a:	3304      	adds	r3, #4

0800253c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800253c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800253e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002540:	d3f9      	bcc.n	8002536 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002542:	4a0a      	ldr	r2, [pc, #40]	; (800256c <LoopForever+0x12>)
  ldr r4, =_ebss
 8002544:	4c0a      	ldr	r4, [pc, #40]	; (8002570 <LoopForever+0x16>)
  movs r3, #0
 8002546:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002548:	e001      	b.n	800254e <LoopFillZerobss>

0800254a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800254a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800254c:	3204      	adds	r2, #4

0800254e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800254e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002550:	d3fb      	bcc.n	800254a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002552:	f003 fb05 	bl	8005b60 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002556:	f7ff f8bf 	bl	80016d8 <main>

0800255a <LoopForever>:

LoopForever:
    b LoopForever
 800255a:	e7fe      	b.n	800255a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800255c:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8002560:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002564:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 8002568:	0800c3bc 	.word	0x0800c3bc
  ldr r2, =_sbss
 800256c:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8002570:	20000348 	.word	0x20000348

08002574 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002574:	e7fe      	b.n	8002574 <ADC1_IRQHandler>

08002576 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002576:	b580      	push	{r7, lr}
 8002578:	b082      	sub	sp, #8
 800257a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800257c:	2300      	movs	r3, #0
 800257e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002580:	2003      	movs	r0, #3
 8002582:	f000 f943 	bl	800280c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002586:	2000      	movs	r0, #0
 8002588:	f000 f80e 	bl	80025a8 <HAL_InitTick>
 800258c:	4603      	mov	r3, r0
 800258e:	2b00      	cmp	r3, #0
 8002590:	d002      	beq.n	8002598 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002592:	2301      	movs	r3, #1
 8002594:	71fb      	strb	r3, [r7, #7]
 8002596:	e001      	b.n	800259c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002598:	f7ff fd8c 	bl	80020b4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800259c:	79fb      	ldrb	r3, [r7, #7]
}
 800259e:	4618      	mov	r0, r3
 80025a0:	3708      	adds	r7, #8
 80025a2:	46bd      	mov	sp, r7
 80025a4:	bd80      	pop	{r7, pc}
	...

080025a8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80025a8:	b580      	push	{r7, lr}
 80025aa:	b084      	sub	sp, #16
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80025b0:	2300      	movs	r3, #0
 80025b2:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80025b4:	4b17      	ldr	r3, [pc, #92]	; (8002614 <HAL_InitTick+0x6c>)
 80025b6:	781b      	ldrb	r3, [r3, #0]
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d023      	beq.n	8002604 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80025bc:	4b16      	ldr	r3, [pc, #88]	; (8002618 <HAL_InitTick+0x70>)
 80025be:	681a      	ldr	r2, [r3, #0]
 80025c0:	4b14      	ldr	r3, [pc, #80]	; (8002614 <HAL_InitTick+0x6c>)
 80025c2:	781b      	ldrb	r3, [r3, #0]
 80025c4:	4619      	mov	r1, r3
 80025c6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80025ca:	fbb3 f3f1 	udiv	r3, r3, r1
 80025ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80025d2:	4618      	mov	r0, r3
 80025d4:	f000 f941 	bl	800285a <HAL_SYSTICK_Config>
 80025d8:	4603      	mov	r3, r0
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d10f      	bne.n	80025fe <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	2b0f      	cmp	r3, #15
 80025e2:	d809      	bhi.n	80025f8 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80025e4:	2200      	movs	r2, #0
 80025e6:	6879      	ldr	r1, [r7, #4]
 80025e8:	f04f 30ff 	mov.w	r0, #4294967295
 80025ec:	f000 f919 	bl	8002822 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80025f0:	4a0a      	ldr	r2, [pc, #40]	; (800261c <HAL_InitTick+0x74>)
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	6013      	str	r3, [r2, #0]
 80025f6:	e007      	b.n	8002608 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80025f8:	2301      	movs	r3, #1
 80025fa:	73fb      	strb	r3, [r7, #15]
 80025fc:	e004      	b.n	8002608 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80025fe:	2301      	movs	r3, #1
 8002600:	73fb      	strb	r3, [r7, #15]
 8002602:	e001      	b.n	8002608 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002604:	2301      	movs	r3, #1
 8002606:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002608:	7bfb      	ldrb	r3, [r7, #15]
}
 800260a:	4618      	mov	r0, r3
 800260c:	3710      	adds	r7, #16
 800260e:	46bd      	mov	sp, r7
 8002610:	bd80      	pop	{r7, pc}
 8002612:	bf00      	nop
 8002614:	20000008 	.word	0x20000008
 8002618:	20000000 	.word	0x20000000
 800261c:	20000004 	.word	0x20000004

08002620 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002620:	b480      	push	{r7}
 8002622:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002624:	4b06      	ldr	r3, [pc, #24]	; (8002640 <HAL_IncTick+0x20>)
 8002626:	781b      	ldrb	r3, [r3, #0]
 8002628:	461a      	mov	r2, r3
 800262a:	4b06      	ldr	r3, [pc, #24]	; (8002644 <HAL_IncTick+0x24>)
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	4413      	add	r3, r2
 8002630:	4a04      	ldr	r2, [pc, #16]	; (8002644 <HAL_IncTick+0x24>)
 8002632:	6013      	str	r3, [r2, #0]
}
 8002634:	bf00      	nop
 8002636:	46bd      	mov	sp, r7
 8002638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800263c:	4770      	bx	lr
 800263e:	bf00      	nop
 8002640:	20000008 	.word	0x20000008
 8002644:	20000334 	.word	0x20000334

08002648 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002648:	b480      	push	{r7}
 800264a:	af00      	add	r7, sp, #0
  return uwTick;
 800264c:	4b03      	ldr	r3, [pc, #12]	; (800265c <HAL_GetTick+0x14>)
 800264e:	681b      	ldr	r3, [r3, #0]
}
 8002650:	4618      	mov	r0, r3
 8002652:	46bd      	mov	sp, r7
 8002654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002658:	4770      	bx	lr
 800265a:	bf00      	nop
 800265c:	20000334 	.word	0x20000334

08002660 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002660:	b580      	push	{r7, lr}
 8002662:	b084      	sub	sp, #16
 8002664:	af00      	add	r7, sp, #0
 8002666:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002668:	f7ff ffee 	bl	8002648 <HAL_GetTick>
 800266c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002678:	d005      	beq.n	8002686 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800267a:	4b0a      	ldr	r3, [pc, #40]	; (80026a4 <HAL_Delay+0x44>)
 800267c:	781b      	ldrb	r3, [r3, #0]
 800267e:	461a      	mov	r2, r3
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	4413      	add	r3, r2
 8002684:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002686:	bf00      	nop
 8002688:	f7ff ffde 	bl	8002648 <HAL_GetTick>
 800268c:	4602      	mov	r2, r0
 800268e:	68bb      	ldr	r3, [r7, #8]
 8002690:	1ad3      	subs	r3, r2, r3
 8002692:	68fa      	ldr	r2, [r7, #12]
 8002694:	429a      	cmp	r2, r3
 8002696:	d8f7      	bhi.n	8002688 <HAL_Delay+0x28>
  {
  }
}
 8002698:	bf00      	nop
 800269a:	bf00      	nop
 800269c:	3710      	adds	r7, #16
 800269e:	46bd      	mov	sp, r7
 80026a0:	bd80      	pop	{r7, pc}
 80026a2:	bf00      	nop
 80026a4:	20000008 	.word	0x20000008

080026a8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80026a8:	b480      	push	{r7}
 80026aa:	b085      	sub	sp, #20
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	f003 0307 	and.w	r3, r3, #7
 80026b6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80026b8:	4b0c      	ldr	r3, [pc, #48]	; (80026ec <__NVIC_SetPriorityGrouping+0x44>)
 80026ba:	68db      	ldr	r3, [r3, #12]
 80026bc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80026be:	68ba      	ldr	r2, [r7, #8]
 80026c0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80026c4:	4013      	ands	r3, r2
 80026c6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80026cc:	68bb      	ldr	r3, [r7, #8]
 80026ce:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80026d0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80026d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80026d8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80026da:	4a04      	ldr	r2, [pc, #16]	; (80026ec <__NVIC_SetPriorityGrouping+0x44>)
 80026dc:	68bb      	ldr	r3, [r7, #8]
 80026de:	60d3      	str	r3, [r2, #12]
}
 80026e0:	bf00      	nop
 80026e2:	3714      	adds	r7, #20
 80026e4:	46bd      	mov	sp, r7
 80026e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ea:	4770      	bx	lr
 80026ec:	e000ed00 	.word	0xe000ed00

080026f0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80026f0:	b480      	push	{r7}
 80026f2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80026f4:	4b04      	ldr	r3, [pc, #16]	; (8002708 <__NVIC_GetPriorityGrouping+0x18>)
 80026f6:	68db      	ldr	r3, [r3, #12]
 80026f8:	0a1b      	lsrs	r3, r3, #8
 80026fa:	f003 0307 	and.w	r3, r3, #7
}
 80026fe:	4618      	mov	r0, r3
 8002700:	46bd      	mov	sp, r7
 8002702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002706:	4770      	bx	lr
 8002708:	e000ed00 	.word	0xe000ed00

0800270c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800270c:	b480      	push	{r7}
 800270e:	b083      	sub	sp, #12
 8002710:	af00      	add	r7, sp, #0
 8002712:	4603      	mov	r3, r0
 8002714:	6039      	str	r1, [r7, #0]
 8002716:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002718:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800271c:	2b00      	cmp	r3, #0
 800271e:	db0a      	blt.n	8002736 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002720:	683b      	ldr	r3, [r7, #0]
 8002722:	b2da      	uxtb	r2, r3
 8002724:	490c      	ldr	r1, [pc, #48]	; (8002758 <__NVIC_SetPriority+0x4c>)
 8002726:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800272a:	0112      	lsls	r2, r2, #4
 800272c:	b2d2      	uxtb	r2, r2
 800272e:	440b      	add	r3, r1
 8002730:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002734:	e00a      	b.n	800274c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002736:	683b      	ldr	r3, [r7, #0]
 8002738:	b2da      	uxtb	r2, r3
 800273a:	4908      	ldr	r1, [pc, #32]	; (800275c <__NVIC_SetPriority+0x50>)
 800273c:	79fb      	ldrb	r3, [r7, #7]
 800273e:	f003 030f 	and.w	r3, r3, #15
 8002742:	3b04      	subs	r3, #4
 8002744:	0112      	lsls	r2, r2, #4
 8002746:	b2d2      	uxtb	r2, r2
 8002748:	440b      	add	r3, r1
 800274a:	761a      	strb	r2, [r3, #24]
}
 800274c:	bf00      	nop
 800274e:	370c      	adds	r7, #12
 8002750:	46bd      	mov	sp, r7
 8002752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002756:	4770      	bx	lr
 8002758:	e000e100 	.word	0xe000e100
 800275c:	e000ed00 	.word	0xe000ed00

08002760 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002760:	b480      	push	{r7}
 8002762:	b089      	sub	sp, #36	; 0x24
 8002764:	af00      	add	r7, sp, #0
 8002766:	60f8      	str	r0, [r7, #12]
 8002768:	60b9      	str	r1, [r7, #8]
 800276a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	f003 0307 	and.w	r3, r3, #7
 8002772:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002774:	69fb      	ldr	r3, [r7, #28]
 8002776:	f1c3 0307 	rsb	r3, r3, #7
 800277a:	2b04      	cmp	r3, #4
 800277c:	bf28      	it	cs
 800277e:	2304      	movcs	r3, #4
 8002780:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002782:	69fb      	ldr	r3, [r7, #28]
 8002784:	3304      	adds	r3, #4
 8002786:	2b06      	cmp	r3, #6
 8002788:	d902      	bls.n	8002790 <NVIC_EncodePriority+0x30>
 800278a:	69fb      	ldr	r3, [r7, #28]
 800278c:	3b03      	subs	r3, #3
 800278e:	e000      	b.n	8002792 <NVIC_EncodePriority+0x32>
 8002790:	2300      	movs	r3, #0
 8002792:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002794:	f04f 32ff 	mov.w	r2, #4294967295
 8002798:	69bb      	ldr	r3, [r7, #24]
 800279a:	fa02 f303 	lsl.w	r3, r2, r3
 800279e:	43da      	mvns	r2, r3
 80027a0:	68bb      	ldr	r3, [r7, #8]
 80027a2:	401a      	ands	r2, r3
 80027a4:	697b      	ldr	r3, [r7, #20]
 80027a6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80027a8:	f04f 31ff 	mov.w	r1, #4294967295
 80027ac:	697b      	ldr	r3, [r7, #20]
 80027ae:	fa01 f303 	lsl.w	r3, r1, r3
 80027b2:	43d9      	mvns	r1, r3
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80027b8:	4313      	orrs	r3, r2
         );
}
 80027ba:	4618      	mov	r0, r3
 80027bc:	3724      	adds	r7, #36	; 0x24
 80027be:	46bd      	mov	sp, r7
 80027c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c4:	4770      	bx	lr
	...

080027c8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80027c8:	b580      	push	{r7, lr}
 80027ca:	b082      	sub	sp, #8
 80027cc:	af00      	add	r7, sp, #0
 80027ce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	3b01      	subs	r3, #1
 80027d4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80027d8:	d301      	bcc.n	80027de <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80027da:	2301      	movs	r3, #1
 80027dc:	e00f      	b.n	80027fe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80027de:	4a0a      	ldr	r2, [pc, #40]	; (8002808 <SysTick_Config+0x40>)
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	3b01      	subs	r3, #1
 80027e4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80027e6:	210f      	movs	r1, #15
 80027e8:	f04f 30ff 	mov.w	r0, #4294967295
 80027ec:	f7ff ff8e 	bl	800270c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80027f0:	4b05      	ldr	r3, [pc, #20]	; (8002808 <SysTick_Config+0x40>)
 80027f2:	2200      	movs	r2, #0
 80027f4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80027f6:	4b04      	ldr	r3, [pc, #16]	; (8002808 <SysTick_Config+0x40>)
 80027f8:	2207      	movs	r2, #7
 80027fa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80027fc:	2300      	movs	r3, #0
}
 80027fe:	4618      	mov	r0, r3
 8002800:	3708      	adds	r7, #8
 8002802:	46bd      	mov	sp, r7
 8002804:	bd80      	pop	{r7, pc}
 8002806:	bf00      	nop
 8002808:	e000e010 	.word	0xe000e010

0800280c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800280c:	b580      	push	{r7, lr}
 800280e:	b082      	sub	sp, #8
 8002810:	af00      	add	r7, sp, #0
 8002812:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002814:	6878      	ldr	r0, [r7, #4]
 8002816:	f7ff ff47 	bl	80026a8 <__NVIC_SetPriorityGrouping>
}
 800281a:	bf00      	nop
 800281c:	3708      	adds	r7, #8
 800281e:	46bd      	mov	sp, r7
 8002820:	bd80      	pop	{r7, pc}

08002822 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002822:	b580      	push	{r7, lr}
 8002824:	b086      	sub	sp, #24
 8002826:	af00      	add	r7, sp, #0
 8002828:	4603      	mov	r3, r0
 800282a:	60b9      	str	r1, [r7, #8]
 800282c:	607a      	str	r2, [r7, #4]
 800282e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002830:	2300      	movs	r3, #0
 8002832:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002834:	f7ff ff5c 	bl	80026f0 <__NVIC_GetPriorityGrouping>
 8002838:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800283a:	687a      	ldr	r2, [r7, #4]
 800283c:	68b9      	ldr	r1, [r7, #8]
 800283e:	6978      	ldr	r0, [r7, #20]
 8002840:	f7ff ff8e 	bl	8002760 <NVIC_EncodePriority>
 8002844:	4602      	mov	r2, r0
 8002846:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800284a:	4611      	mov	r1, r2
 800284c:	4618      	mov	r0, r3
 800284e:	f7ff ff5d 	bl	800270c <__NVIC_SetPriority>
}
 8002852:	bf00      	nop
 8002854:	3718      	adds	r7, #24
 8002856:	46bd      	mov	sp, r7
 8002858:	bd80      	pop	{r7, pc}

0800285a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800285a:	b580      	push	{r7, lr}
 800285c:	b082      	sub	sp, #8
 800285e:	af00      	add	r7, sp, #0
 8002860:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002862:	6878      	ldr	r0, [r7, #4]
 8002864:	f7ff ffb0 	bl	80027c8 <SysTick_Config>
 8002868:	4603      	mov	r3, r0
}
 800286a:	4618      	mov	r0, r3
 800286c:	3708      	adds	r7, #8
 800286e:	46bd      	mov	sp, r7
 8002870:	bd80      	pop	{r7, pc}
	...

08002874 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002874:	b480      	push	{r7}
 8002876:	b087      	sub	sp, #28
 8002878:	af00      	add	r7, sp, #0
 800287a:	6078      	str	r0, [r7, #4]
 800287c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800287e:	2300      	movs	r3, #0
 8002880:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002882:	e148      	b.n	8002b16 <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002884:	683b      	ldr	r3, [r7, #0]
 8002886:	681a      	ldr	r2, [r3, #0]
 8002888:	2101      	movs	r1, #1
 800288a:	697b      	ldr	r3, [r7, #20]
 800288c:	fa01 f303 	lsl.w	r3, r1, r3
 8002890:	4013      	ands	r3, r2
 8002892:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	2b00      	cmp	r3, #0
 8002898:	f000 813a 	beq.w	8002b10 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800289c:	683b      	ldr	r3, [r7, #0]
 800289e:	685b      	ldr	r3, [r3, #4]
 80028a0:	f003 0303 	and.w	r3, r3, #3
 80028a4:	2b01      	cmp	r3, #1
 80028a6:	d005      	beq.n	80028b4 <HAL_GPIO_Init+0x40>
 80028a8:	683b      	ldr	r3, [r7, #0]
 80028aa:	685b      	ldr	r3, [r3, #4]
 80028ac:	f003 0303 	and.w	r3, r3, #3
 80028b0:	2b02      	cmp	r3, #2
 80028b2:	d130      	bne.n	8002916 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	689b      	ldr	r3, [r3, #8]
 80028b8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80028ba:	697b      	ldr	r3, [r7, #20]
 80028bc:	005b      	lsls	r3, r3, #1
 80028be:	2203      	movs	r2, #3
 80028c0:	fa02 f303 	lsl.w	r3, r2, r3
 80028c4:	43db      	mvns	r3, r3
 80028c6:	693a      	ldr	r2, [r7, #16]
 80028c8:	4013      	ands	r3, r2
 80028ca:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80028cc:	683b      	ldr	r3, [r7, #0]
 80028ce:	68da      	ldr	r2, [r3, #12]
 80028d0:	697b      	ldr	r3, [r7, #20]
 80028d2:	005b      	lsls	r3, r3, #1
 80028d4:	fa02 f303 	lsl.w	r3, r2, r3
 80028d8:	693a      	ldr	r2, [r7, #16]
 80028da:	4313      	orrs	r3, r2
 80028dc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	693a      	ldr	r2, [r7, #16]
 80028e2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	685b      	ldr	r3, [r3, #4]
 80028e8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80028ea:	2201      	movs	r2, #1
 80028ec:	697b      	ldr	r3, [r7, #20]
 80028ee:	fa02 f303 	lsl.w	r3, r2, r3
 80028f2:	43db      	mvns	r3, r3
 80028f4:	693a      	ldr	r2, [r7, #16]
 80028f6:	4013      	ands	r3, r2
 80028f8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80028fa:	683b      	ldr	r3, [r7, #0]
 80028fc:	685b      	ldr	r3, [r3, #4]
 80028fe:	091b      	lsrs	r3, r3, #4
 8002900:	f003 0201 	and.w	r2, r3, #1
 8002904:	697b      	ldr	r3, [r7, #20]
 8002906:	fa02 f303 	lsl.w	r3, r2, r3
 800290a:	693a      	ldr	r2, [r7, #16]
 800290c:	4313      	orrs	r3, r2
 800290e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	693a      	ldr	r2, [r7, #16]
 8002914:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002916:	683b      	ldr	r3, [r7, #0]
 8002918:	685b      	ldr	r3, [r3, #4]
 800291a:	f003 0303 	and.w	r3, r3, #3
 800291e:	2b03      	cmp	r3, #3
 8002920:	d017      	beq.n	8002952 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	68db      	ldr	r3, [r3, #12]
 8002926:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002928:	697b      	ldr	r3, [r7, #20]
 800292a:	005b      	lsls	r3, r3, #1
 800292c:	2203      	movs	r2, #3
 800292e:	fa02 f303 	lsl.w	r3, r2, r3
 8002932:	43db      	mvns	r3, r3
 8002934:	693a      	ldr	r2, [r7, #16]
 8002936:	4013      	ands	r3, r2
 8002938:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800293a:	683b      	ldr	r3, [r7, #0]
 800293c:	689a      	ldr	r2, [r3, #8]
 800293e:	697b      	ldr	r3, [r7, #20]
 8002940:	005b      	lsls	r3, r3, #1
 8002942:	fa02 f303 	lsl.w	r3, r2, r3
 8002946:	693a      	ldr	r2, [r7, #16]
 8002948:	4313      	orrs	r3, r2
 800294a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	693a      	ldr	r2, [r7, #16]
 8002950:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002952:	683b      	ldr	r3, [r7, #0]
 8002954:	685b      	ldr	r3, [r3, #4]
 8002956:	f003 0303 	and.w	r3, r3, #3
 800295a:	2b02      	cmp	r3, #2
 800295c:	d123      	bne.n	80029a6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800295e:	697b      	ldr	r3, [r7, #20]
 8002960:	08da      	lsrs	r2, r3, #3
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	3208      	adds	r2, #8
 8002966:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800296a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800296c:	697b      	ldr	r3, [r7, #20]
 800296e:	f003 0307 	and.w	r3, r3, #7
 8002972:	009b      	lsls	r3, r3, #2
 8002974:	220f      	movs	r2, #15
 8002976:	fa02 f303 	lsl.w	r3, r2, r3
 800297a:	43db      	mvns	r3, r3
 800297c:	693a      	ldr	r2, [r7, #16]
 800297e:	4013      	ands	r3, r2
 8002980:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002982:	683b      	ldr	r3, [r7, #0]
 8002984:	691a      	ldr	r2, [r3, #16]
 8002986:	697b      	ldr	r3, [r7, #20]
 8002988:	f003 0307 	and.w	r3, r3, #7
 800298c:	009b      	lsls	r3, r3, #2
 800298e:	fa02 f303 	lsl.w	r3, r2, r3
 8002992:	693a      	ldr	r2, [r7, #16]
 8002994:	4313      	orrs	r3, r2
 8002996:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002998:	697b      	ldr	r3, [r7, #20]
 800299a:	08da      	lsrs	r2, r3, #3
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	3208      	adds	r2, #8
 80029a0:	6939      	ldr	r1, [r7, #16]
 80029a2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80029ac:	697b      	ldr	r3, [r7, #20]
 80029ae:	005b      	lsls	r3, r3, #1
 80029b0:	2203      	movs	r2, #3
 80029b2:	fa02 f303 	lsl.w	r3, r2, r3
 80029b6:	43db      	mvns	r3, r3
 80029b8:	693a      	ldr	r2, [r7, #16]
 80029ba:	4013      	ands	r3, r2
 80029bc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80029be:	683b      	ldr	r3, [r7, #0]
 80029c0:	685b      	ldr	r3, [r3, #4]
 80029c2:	f003 0203 	and.w	r2, r3, #3
 80029c6:	697b      	ldr	r3, [r7, #20]
 80029c8:	005b      	lsls	r3, r3, #1
 80029ca:	fa02 f303 	lsl.w	r3, r2, r3
 80029ce:	693a      	ldr	r2, [r7, #16]
 80029d0:	4313      	orrs	r3, r2
 80029d2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	693a      	ldr	r2, [r7, #16]
 80029d8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80029da:	683b      	ldr	r3, [r7, #0]
 80029dc:	685b      	ldr	r3, [r3, #4]
 80029de:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	f000 8094 	beq.w	8002b10 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80029e8:	4b52      	ldr	r3, [pc, #328]	; (8002b34 <HAL_GPIO_Init+0x2c0>)
 80029ea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80029ec:	4a51      	ldr	r2, [pc, #324]	; (8002b34 <HAL_GPIO_Init+0x2c0>)
 80029ee:	f043 0301 	orr.w	r3, r3, #1
 80029f2:	6613      	str	r3, [r2, #96]	; 0x60
 80029f4:	4b4f      	ldr	r3, [pc, #316]	; (8002b34 <HAL_GPIO_Init+0x2c0>)
 80029f6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80029f8:	f003 0301 	and.w	r3, r3, #1
 80029fc:	60bb      	str	r3, [r7, #8]
 80029fe:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002a00:	4a4d      	ldr	r2, [pc, #308]	; (8002b38 <HAL_GPIO_Init+0x2c4>)
 8002a02:	697b      	ldr	r3, [r7, #20]
 8002a04:	089b      	lsrs	r3, r3, #2
 8002a06:	3302      	adds	r3, #2
 8002a08:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a0c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002a0e:	697b      	ldr	r3, [r7, #20]
 8002a10:	f003 0303 	and.w	r3, r3, #3
 8002a14:	009b      	lsls	r3, r3, #2
 8002a16:	220f      	movs	r2, #15
 8002a18:	fa02 f303 	lsl.w	r3, r2, r3
 8002a1c:	43db      	mvns	r3, r3
 8002a1e:	693a      	ldr	r2, [r7, #16]
 8002a20:	4013      	ands	r3, r2
 8002a22:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002a2a:	d00d      	beq.n	8002a48 <HAL_GPIO_Init+0x1d4>
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	4a43      	ldr	r2, [pc, #268]	; (8002b3c <HAL_GPIO_Init+0x2c8>)
 8002a30:	4293      	cmp	r3, r2
 8002a32:	d007      	beq.n	8002a44 <HAL_GPIO_Init+0x1d0>
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	4a42      	ldr	r2, [pc, #264]	; (8002b40 <HAL_GPIO_Init+0x2cc>)
 8002a38:	4293      	cmp	r3, r2
 8002a3a:	d101      	bne.n	8002a40 <HAL_GPIO_Init+0x1cc>
 8002a3c:	2302      	movs	r3, #2
 8002a3e:	e004      	b.n	8002a4a <HAL_GPIO_Init+0x1d6>
 8002a40:	2307      	movs	r3, #7
 8002a42:	e002      	b.n	8002a4a <HAL_GPIO_Init+0x1d6>
 8002a44:	2301      	movs	r3, #1
 8002a46:	e000      	b.n	8002a4a <HAL_GPIO_Init+0x1d6>
 8002a48:	2300      	movs	r3, #0
 8002a4a:	697a      	ldr	r2, [r7, #20]
 8002a4c:	f002 0203 	and.w	r2, r2, #3
 8002a50:	0092      	lsls	r2, r2, #2
 8002a52:	4093      	lsls	r3, r2
 8002a54:	693a      	ldr	r2, [r7, #16]
 8002a56:	4313      	orrs	r3, r2
 8002a58:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002a5a:	4937      	ldr	r1, [pc, #220]	; (8002b38 <HAL_GPIO_Init+0x2c4>)
 8002a5c:	697b      	ldr	r3, [r7, #20]
 8002a5e:	089b      	lsrs	r3, r3, #2
 8002a60:	3302      	adds	r3, #2
 8002a62:	693a      	ldr	r2, [r7, #16]
 8002a64:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002a68:	4b36      	ldr	r3, [pc, #216]	; (8002b44 <HAL_GPIO_Init+0x2d0>)
 8002a6a:	689b      	ldr	r3, [r3, #8]
 8002a6c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	43db      	mvns	r3, r3
 8002a72:	693a      	ldr	r2, [r7, #16]
 8002a74:	4013      	ands	r3, r2
 8002a76:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002a78:	683b      	ldr	r3, [r7, #0]
 8002a7a:	685b      	ldr	r3, [r3, #4]
 8002a7c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d003      	beq.n	8002a8c <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8002a84:	693a      	ldr	r2, [r7, #16]
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	4313      	orrs	r3, r2
 8002a8a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002a8c:	4a2d      	ldr	r2, [pc, #180]	; (8002b44 <HAL_GPIO_Init+0x2d0>)
 8002a8e:	693b      	ldr	r3, [r7, #16]
 8002a90:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002a92:	4b2c      	ldr	r3, [pc, #176]	; (8002b44 <HAL_GPIO_Init+0x2d0>)
 8002a94:	68db      	ldr	r3, [r3, #12]
 8002a96:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	43db      	mvns	r3, r3
 8002a9c:	693a      	ldr	r2, [r7, #16]
 8002a9e:	4013      	ands	r3, r2
 8002aa0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002aa2:	683b      	ldr	r3, [r7, #0]
 8002aa4:	685b      	ldr	r3, [r3, #4]
 8002aa6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d003      	beq.n	8002ab6 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8002aae:	693a      	ldr	r2, [r7, #16]
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	4313      	orrs	r3, r2
 8002ab4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002ab6:	4a23      	ldr	r2, [pc, #140]	; (8002b44 <HAL_GPIO_Init+0x2d0>)
 8002ab8:	693b      	ldr	r3, [r7, #16]
 8002aba:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002abc:	4b21      	ldr	r3, [pc, #132]	; (8002b44 <HAL_GPIO_Init+0x2d0>)
 8002abe:	685b      	ldr	r3, [r3, #4]
 8002ac0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	43db      	mvns	r3, r3
 8002ac6:	693a      	ldr	r2, [r7, #16]
 8002ac8:	4013      	ands	r3, r2
 8002aca:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002acc:	683b      	ldr	r3, [r7, #0]
 8002ace:	685b      	ldr	r3, [r3, #4]
 8002ad0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d003      	beq.n	8002ae0 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 8002ad8:	693a      	ldr	r2, [r7, #16]
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	4313      	orrs	r3, r2
 8002ade:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002ae0:	4a18      	ldr	r2, [pc, #96]	; (8002b44 <HAL_GPIO_Init+0x2d0>)
 8002ae2:	693b      	ldr	r3, [r7, #16]
 8002ae4:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002ae6:	4b17      	ldr	r3, [pc, #92]	; (8002b44 <HAL_GPIO_Init+0x2d0>)
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	43db      	mvns	r3, r3
 8002af0:	693a      	ldr	r2, [r7, #16]
 8002af2:	4013      	ands	r3, r2
 8002af4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002af6:	683b      	ldr	r3, [r7, #0]
 8002af8:	685b      	ldr	r3, [r3, #4]
 8002afa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d003      	beq.n	8002b0a <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 8002b02:	693a      	ldr	r2, [r7, #16]
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	4313      	orrs	r3, r2
 8002b08:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002b0a:	4a0e      	ldr	r2, [pc, #56]	; (8002b44 <HAL_GPIO_Init+0x2d0>)
 8002b0c:	693b      	ldr	r3, [r7, #16]
 8002b0e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002b10:	697b      	ldr	r3, [r7, #20]
 8002b12:	3301      	adds	r3, #1
 8002b14:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002b16:	683b      	ldr	r3, [r7, #0]
 8002b18:	681a      	ldr	r2, [r3, #0]
 8002b1a:	697b      	ldr	r3, [r7, #20]
 8002b1c:	fa22 f303 	lsr.w	r3, r2, r3
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	f47f aeaf 	bne.w	8002884 <HAL_GPIO_Init+0x10>
  }
}
 8002b26:	bf00      	nop
 8002b28:	bf00      	nop
 8002b2a:	371c      	adds	r7, #28
 8002b2c:	46bd      	mov	sp, r7
 8002b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b32:	4770      	bx	lr
 8002b34:	40021000 	.word	0x40021000
 8002b38:	40010000 	.word	0x40010000
 8002b3c:	48000400 	.word	0x48000400
 8002b40:	48000800 	.word	0x48000800
 8002b44:	40010400 	.word	0x40010400

08002b48 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002b48:	b480      	push	{r7}
 8002b4a:	b085      	sub	sp, #20
 8002b4c:	af00      	add	r7, sp, #0
 8002b4e:	6078      	str	r0, [r7, #4]
 8002b50:	460b      	mov	r3, r1
 8002b52:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	691a      	ldr	r2, [r3, #16]
 8002b58:	887b      	ldrh	r3, [r7, #2]
 8002b5a:	4013      	ands	r3, r2
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d002      	beq.n	8002b66 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002b60:	2301      	movs	r3, #1
 8002b62:	73fb      	strb	r3, [r7, #15]
 8002b64:	e001      	b.n	8002b6a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002b66:	2300      	movs	r3, #0
 8002b68:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002b6a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b6c:	4618      	mov	r0, r3
 8002b6e:	3714      	adds	r7, #20
 8002b70:	46bd      	mov	sp, r7
 8002b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b76:	4770      	bx	lr

08002b78 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002b78:	b480      	push	{r7}
 8002b7a:	b083      	sub	sp, #12
 8002b7c:	af00      	add	r7, sp, #0
 8002b7e:	6078      	str	r0, [r7, #4]
 8002b80:	460b      	mov	r3, r1
 8002b82:	807b      	strh	r3, [r7, #2]
 8002b84:	4613      	mov	r3, r2
 8002b86:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002b88:	787b      	ldrb	r3, [r7, #1]
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d003      	beq.n	8002b96 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002b8e:	887a      	ldrh	r2, [r7, #2]
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002b94:	e002      	b.n	8002b9c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002b96:	887a      	ldrh	r2, [r7, #2]
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002b9c:	bf00      	nop
 8002b9e:	370c      	adds	r7, #12
 8002ba0:	46bd      	mov	sp, r7
 8002ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba6:	4770      	bx	lr

08002ba8 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002ba8:	b480      	push	{r7}
 8002baa:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002bac:	4b05      	ldr	r3, [pc, #20]	; (8002bc4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	4a04      	ldr	r2, [pc, #16]	; (8002bc4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002bb2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002bb6:	6013      	str	r3, [r2, #0]
}
 8002bb8:	bf00      	nop
 8002bba:	46bd      	mov	sp, r7
 8002bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc0:	4770      	bx	lr
 8002bc2:	bf00      	nop
 8002bc4:	40007000 	.word	0x40007000

08002bc8 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002bc8:	b480      	push	{r7}
 8002bca:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002bcc:	4b04      	ldr	r3, [pc, #16]	; (8002be0 <HAL_PWREx_GetVoltageRange+0x18>)
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8002bd4:	4618      	mov	r0, r3
 8002bd6:	46bd      	mov	sp, r7
 8002bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bdc:	4770      	bx	lr
 8002bde:	bf00      	nop
 8002be0:	40007000 	.word	0x40007000

08002be4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002be4:	b480      	push	{r7}
 8002be6:	b085      	sub	sp, #20
 8002be8:	af00      	add	r7, sp, #0
 8002bea:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002bf2:	d130      	bne.n	8002c56 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002bf4:	4b23      	ldr	r3, [pc, #140]	; (8002c84 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002bfc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002c00:	d038      	beq.n	8002c74 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002c02:	4b20      	ldr	r3, [pc, #128]	; (8002c84 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002c0a:	4a1e      	ldr	r2, [pc, #120]	; (8002c84 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002c0c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002c10:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002c12:	4b1d      	ldr	r3, [pc, #116]	; (8002c88 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	2232      	movs	r2, #50	; 0x32
 8002c18:	fb02 f303 	mul.w	r3, r2, r3
 8002c1c:	4a1b      	ldr	r2, [pc, #108]	; (8002c8c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002c1e:	fba2 2303 	umull	r2, r3, r2, r3
 8002c22:	0c9b      	lsrs	r3, r3, #18
 8002c24:	3301      	adds	r3, #1
 8002c26:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002c28:	e002      	b.n	8002c30 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	3b01      	subs	r3, #1
 8002c2e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002c30:	4b14      	ldr	r3, [pc, #80]	; (8002c84 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002c32:	695b      	ldr	r3, [r3, #20]
 8002c34:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c38:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002c3c:	d102      	bne.n	8002c44 <HAL_PWREx_ControlVoltageScaling+0x60>
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d1f2      	bne.n	8002c2a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002c44:	4b0f      	ldr	r3, [pc, #60]	; (8002c84 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002c46:	695b      	ldr	r3, [r3, #20]
 8002c48:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c4c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002c50:	d110      	bne.n	8002c74 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002c52:	2303      	movs	r3, #3
 8002c54:	e00f      	b.n	8002c76 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002c56:	4b0b      	ldr	r3, [pc, #44]	; (8002c84 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002c5e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002c62:	d007      	beq.n	8002c74 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002c64:	4b07      	ldr	r3, [pc, #28]	; (8002c84 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002c6c:	4a05      	ldr	r2, [pc, #20]	; (8002c84 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002c6e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002c72:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002c74:	2300      	movs	r3, #0
}
 8002c76:	4618      	mov	r0, r3
 8002c78:	3714      	adds	r7, #20
 8002c7a:	46bd      	mov	sp, r7
 8002c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c80:	4770      	bx	lr
 8002c82:	bf00      	nop
 8002c84:	40007000 	.word	0x40007000
 8002c88:	20000000 	.word	0x20000000
 8002c8c:	431bde83 	.word	0x431bde83

08002c90 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002c90:	b580      	push	{r7, lr}
 8002c92:	b088      	sub	sp, #32
 8002c94:	af00      	add	r7, sp, #0
 8002c96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d102      	bne.n	8002ca4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002c9e:	2301      	movs	r3, #1
 8002ca0:	f000 bc02 	b.w	80034a8 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002ca4:	4b96      	ldr	r3, [pc, #600]	; (8002f00 <HAL_RCC_OscConfig+0x270>)
 8002ca6:	689b      	ldr	r3, [r3, #8]
 8002ca8:	f003 030c 	and.w	r3, r3, #12
 8002cac:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002cae:	4b94      	ldr	r3, [pc, #592]	; (8002f00 <HAL_RCC_OscConfig+0x270>)
 8002cb0:	68db      	ldr	r3, [r3, #12]
 8002cb2:	f003 0303 	and.w	r3, r3, #3
 8002cb6:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	f003 0310 	and.w	r3, r3, #16
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	f000 80e4 	beq.w	8002e8e <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002cc6:	69bb      	ldr	r3, [r7, #24]
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d007      	beq.n	8002cdc <HAL_RCC_OscConfig+0x4c>
 8002ccc:	69bb      	ldr	r3, [r7, #24]
 8002cce:	2b0c      	cmp	r3, #12
 8002cd0:	f040 808b 	bne.w	8002dea <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002cd4:	697b      	ldr	r3, [r7, #20]
 8002cd6:	2b01      	cmp	r3, #1
 8002cd8:	f040 8087 	bne.w	8002dea <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002cdc:	4b88      	ldr	r3, [pc, #544]	; (8002f00 <HAL_RCC_OscConfig+0x270>)
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	f003 0302 	and.w	r3, r3, #2
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d005      	beq.n	8002cf4 <HAL_RCC_OscConfig+0x64>
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	699b      	ldr	r3, [r3, #24]
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d101      	bne.n	8002cf4 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8002cf0:	2301      	movs	r3, #1
 8002cf2:	e3d9      	b.n	80034a8 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	6a1a      	ldr	r2, [r3, #32]
 8002cf8:	4b81      	ldr	r3, [pc, #516]	; (8002f00 <HAL_RCC_OscConfig+0x270>)
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	f003 0308 	and.w	r3, r3, #8
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d004      	beq.n	8002d0e <HAL_RCC_OscConfig+0x7e>
 8002d04:	4b7e      	ldr	r3, [pc, #504]	; (8002f00 <HAL_RCC_OscConfig+0x270>)
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002d0c:	e005      	b.n	8002d1a <HAL_RCC_OscConfig+0x8a>
 8002d0e:	4b7c      	ldr	r3, [pc, #496]	; (8002f00 <HAL_RCC_OscConfig+0x270>)
 8002d10:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002d14:	091b      	lsrs	r3, r3, #4
 8002d16:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002d1a:	4293      	cmp	r3, r2
 8002d1c:	d223      	bcs.n	8002d66 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	6a1b      	ldr	r3, [r3, #32]
 8002d22:	4618      	mov	r0, r3
 8002d24:	f000 fd8c 	bl	8003840 <RCC_SetFlashLatencyFromMSIRange>
 8002d28:	4603      	mov	r3, r0
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d001      	beq.n	8002d32 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8002d2e:	2301      	movs	r3, #1
 8002d30:	e3ba      	b.n	80034a8 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002d32:	4b73      	ldr	r3, [pc, #460]	; (8002f00 <HAL_RCC_OscConfig+0x270>)
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	4a72      	ldr	r2, [pc, #456]	; (8002f00 <HAL_RCC_OscConfig+0x270>)
 8002d38:	f043 0308 	orr.w	r3, r3, #8
 8002d3c:	6013      	str	r3, [r2, #0]
 8002d3e:	4b70      	ldr	r3, [pc, #448]	; (8002f00 <HAL_RCC_OscConfig+0x270>)
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	6a1b      	ldr	r3, [r3, #32]
 8002d4a:	496d      	ldr	r1, [pc, #436]	; (8002f00 <HAL_RCC_OscConfig+0x270>)
 8002d4c:	4313      	orrs	r3, r2
 8002d4e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002d50:	4b6b      	ldr	r3, [pc, #428]	; (8002f00 <HAL_RCC_OscConfig+0x270>)
 8002d52:	685b      	ldr	r3, [r3, #4]
 8002d54:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	69db      	ldr	r3, [r3, #28]
 8002d5c:	021b      	lsls	r3, r3, #8
 8002d5e:	4968      	ldr	r1, [pc, #416]	; (8002f00 <HAL_RCC_OscConfig+0x270>)
 8002d60:	4313      	orrs	r3, r2
 8002d62:	604b      	str	r3, [r1, #4]
 8002d64:	e025      	b.n	8002db2 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002d66:	4b66      	ldr	r3, [pc, #408]	; (8002f00 <HAL_RCC_OscConfig+0x270>)
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	4a65      	ldr	r2, [pc, #404]	; (8002f00 <HAL_RCC_OscConfig+0x270>)
 8002d6c:	f043 0308 	orr.w	r3, r3, #8
 8002d70:	6013      	str	r3, [r2, #0]
 8002d72:	4b63      	ldr	r3, [pc, #396]	; (8002f00 <HAL_RCC_OscConfig+0x270>)
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	6a1b      	ldr	r3, [r3, #32]
 8002d7e:	4960      	ldr	r1, [pc, #384]	; (8002f00 <HAL_RCC_OscConfig+0x270>)
 8002d80:	4313      	orrs	r3, r2
 8002d82:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002d84:	4b5e      	ldr	r3, [pc, #376]	; (8002f00 <HAL_RCC_OscConfig+0x270>)
 8002d86:	685b      	ldr	r3, [r3, #4]
 8002d88:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	69db      	ldr	r3, [r3, #28]
 8002d90:	021b      	lsls	r3, r3, #8
 8002d92:	495b      	ldr	r1, [pc, #364]	; (8002f00 <HAL_RCC_OscConfig+0x270>)
 8002d94:	4313      	orrs	r3, r2
 8002d96:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002d98:	69bb      	ldr	r3, [r7, #24]
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d109      	bne.n	8002db2 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	6a1b      	ldr	r3, [r3, #32]
 8002da2:	4618      	mov	r0, r3
 8002da4:	f000 fd4c 	bl	8003840 <RCC_SetFlashLatencyFromMSIRange>
 8002da8:	4603      	mov	r3, r0
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d001      	beq.n	8002db2 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8002dae:	2301      	movs	r3, #1
 8002db0:	e37a      	b.n	80034a8 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002db2:	f000 fc81 	bl	80036b8 <HAL_RCC_GetSysClockFreq>
 8002db6:	4602      	mov	r2, r0
 8002db8:	4b51      	ldr	r3, [pc, #324]	; (8002f00 <HAL_RCC_OscConfig+0x270>)
 8002dba:	689b      	ldr	r3, [r3, #8]
 8002dbc:	091b      	lsrs	r3, r3, #4
 8002dbe:	f003 030f 	and.w	r3, r3, #15
 8002dc2:	4950      	ldr	r1, [pc, #320]	; (8002f04 <HAL_RCC_OscConfig+0x274>)
 8002dc4:	5ccb      	ldrb	r3, [r1, r3]
 8002dc6:	f003 031f 	and.w	r3, r3, #31
 8002dca:	fa22 f303 	lsr.w	r3, r2, r3
 8002dce:	4a4e      	ldr	r2, [pc, #312]	; (8002f08 <HAL_RCC_OscConfig+0x278>)
 8002dd0:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002dd2:	4b4e      	ldr	r3, [pc, #312]	; (8002f0c <HAL_RCC_OscConfig+0x27c>)
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	4618      	mov	r0, r3
 8002dd8:	f7ff fbe6 	bl	80025a8 <HAL_InitTick>
 8002ddc:	4603      	mov	r3, r0
 8002dde:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002de0:	7bfb      	ldrb	r3, [r7, #15]
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d052      	beq.n	8002e8c <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8002de6:	7bfb      	ldrb	r3, [r7, #15]
 8002de8:	e35e      	b.n	80034a8 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	699b      	ldr	r3, [r3, #24]
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d032      	beq.n	8002e58 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002df2:	4b43      	ldr	r3, [pc, #268]	; (8002f00 <HAL_RCC_OscConfig+0x270>)
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	4a42      	ldr	r2, [pc, #264]	; (8002f00 <HAL_RCC_OscConfig+0x270>)
 8002df8:	f043 0301 	orr.w	r3, r3, #1
 8002dfc:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002dfe:	f7ff fc23 	bl	8002648 <HAL_GetTick>
 8002e02:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002e04:	e008      	b.n	8002e18 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002e06:	f7ff fc1f 	bl	8002648 <HAL_GetTick>
 8002e0a:	4602      	mov	r2, r0
 8002e0c:	693b      	ldr	r3, [r7, #16]
 8002e0e:	1ad3      	subs	r3, r2, r3
 8002e10:	2b02      	cmp	r3, #2
 8002e12:	d901      	bls.n	8002e18 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8002e14:	2303      	movs	r3, #3
 8002e16:	e347      	b.n	80034a8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002e18:	4b39      	ldr	r3, [pc, #228]	; (8002f00 <HAL_RCC_OscConfig+0x270>)
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	f003 0302 	and.w	r3, r3, #2
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d0f0      	beq.n	8002e06 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002e24:	4b36      	ldr	r3, [pc, #216]	; (8002f00 <HAL_RCC_OscConfig+0x270>)
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	4a35      	ldr	r2, [pc, #212]	; (8002f00 <HAL_RCC_OscConfig+0x270>)
 8002e2a:	f043 0308 	orr.w	r3, r3, #8
 8002e2e:	6013      	str	r3, [r2, #0]
 8002e30:	4b33      	ldr	r3, [pc, #204]	; (8002f00 <HAL_RCC_OscConfig+0x270>)
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	6a1b      	ldr	r3, [r3, #32]
 8002e3c:	4930      	ldr	r1, [pc, #192]	; (8002f00 <HAL_RCC_OscConfig+0x270>)
 8002e3e:	4313      	orrs	r3, r2
 8002e40:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002e42:	4b2f      	ldr	r3, [pc, #188]	; (8002f00 <HAL_RCC_OscConfig+0x270>)
 8002e44:	685b      	ldr	r3, [r3, #4]
 8002e46:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	69db      	ldr	r3, [r3, #28]
 8002e4e:	021b      	lsls	r3, r3, #8
 8002e50:	492b      	ldr	r1, [pc, #172]	; (8002f00 <HAL_RCC_OscConfig+0x270>)
 8002e52:	4313      	orrs	r3, r2
 8002e54:	604b      	str	r3, [r1, #4]
 8002e56:	e01a      	b.n	8002e8e <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002e58:	4b29      	ldr	r3, [pc, #164]	; (8002f00 <HAL_RCC_OscConfig+0x270>)
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	4a28      	ldr	r2, [pc, #160]	; (8002f00 <HAL_RCC_OscConfig+0x270>)
 8002e5e:	f023 0301 	bic.w	r3, r3, #1
 8002e62:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002e64:	f7ff fbf0 	bl	8002648 <HAL_GetTick>
 8002e68:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002e6a:	e008      	b.n	8002e7e <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002e6c:	f7ff fbec 	bl	8002648 <HAL_GetTick>
 8002e70:	4602      	mov	r2, r0
 8002e72:	693b      	ldr	r3, [r7, #16]
 8002e74:	1ad3      	subs	r3, r2, r3
 8002e76:	2b02      	cmp	r3, #2
 8002e78:	d901      	bls.n	8002e7e <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8002e7a:	2303      	movs	r3, #3
 8002e7c:	e314      	b.n	80034a8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002e7e:	4b20      	ldr	r3, [pc, #128]	; (8002f00 <HAL_RCC_OscConfig+0x270>)
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	f003 0302 	and.w	r3, r3, #2
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d1f0      	bne.n	8002e6c <HAL_RCC_OscConfig+0x1dc>
 8002e8a:	e000      	b.n	8002e8e <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002e8c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	f003 0301 	and.w	r3, r3, #1
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d073      	beq.n	8002f82 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002e9a:	69bb      	ldr	r3, [r7, #24]
 8002e9c:	2b08      	cmp	r3, #8
 8002e9e:	d005      	beq.n	8002eac <HAL_RCC_OscConfig+0x21c>
 8002ea0:	69bb      	ldr	r3, [r7, #24]
 8002ea2:	2b0c      	cmp	r3, #12
 8002ea4:	d10e      	bne.n	8002ec4 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002ea6:	697b      	ldr	r3, [r7, #20]
 8002ea8:	2b03      	cmp	r3, #3
 8002eaa:	d10b      	bne.n	8002ec4 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002eac:	4b14      	ldr	r3, [pc, #80]	; (8002f00 <HAL_RCC_OscConfig+0x270>)
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d063      	beq.n	8002f80 <HAL_RCC_OscConfig+0x2f0>
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	685b      	ldr	r3, [r3, #4]
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d15f      	bne.n	8002f80 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002ec0:	2301      	movs	r3, #1
 8002ec2:	e2f1      	b.n	80034a8 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	685b      	ldr	r3, [r3, #4]
 8002ec8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ecc:	d106      	bne.n	8002edc <HAL_RCC_OscConfig+0x24c>
 8002ece:	4b0c      	ldr	r3, [pc, #48]	; (8002f00 <HAL_RCC_OscConfig+0x270>)
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	4a0b      	ldr	r2, [pc, #44]	; (8002f00 <HAL_RCC_OscConfig+0x270>)
 8002ed4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ed8:	6013      	str	r3, [r2, #0]
 8002eda:	e025      	b.n	8002f28 <HAL_RCC_OscConfig+0x298>
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	685b      	ldr	r3, [r3, #4]
 8002ee0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002ee4:	d114      	bne.n	8002f10 <HAL_RCC_OscConfig+0x280>
 8002ee6:	4b06      	ldr	r3, [pc, #24]	; (8002f00 <HAL_RCC_OscConfig+0x270>)
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	4a05      	ldr	r2, [pc, #20]	; (8002f00 <HAL_RCC_OscConfig+0x270>)
 8002eec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002ef0:	6013      	str	r3, [r2, #0]
 8002ef2:	4b03      	ldr	r3, [pc, #12]	; (8002f00 <HAL_RCC_OscConfig+0x270>)
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	4a02      	ldr	r2, [pc, #8]	; (8002f00 <HAL_RCC_OscConfig+0x270>)
 8002ef8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002efc:	6013      	str	r3, [r2, #0]
 8002efe:	e013      	b.n	8002f28 <HAL_RCC_OscConfig+0x298>
 8002f00:	40021000 	.word	0x40021000
 8002f04:	0800bea0 	.word	0x0800bea0
 8002f08:	20000000 	.word	0x20000000
 8002f0c:	20000004 	.word	0x20000004
 8002f10:	4ba0      	ldr	r3, [pc, #640]	; (8003194 <HAL_RCC_OscConfig+0x504>)
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	4a9f      	ldr	r2, [pc, #636]	; (8003194 <HAL_RCC_OscConfig+0x504>)
 8002f16:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f1a:	6013      	str	r3, [r2, #0]
 8002f1c:	4b9d      	ldr	r3, [pc, #628]	; (8003194 <HAL_RCC_OscConfig+0x504>)
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	4a9c      	ldr	r2, [pc, #624]	; (8003194 <HAL_RCC_OscConfig+0x504>)
 8002f22:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002f26:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	685b      	ldr	r3, [r3, #4]
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d013      	beq.n	8002f58 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f30:	f7ff fb8a 	bl	8002648 <HAL_GetTick>
 8002f34:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002f36:	e008      	b.n	8002f4a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002f38:	f7ff fb86 	bl	8002648 <HAL_GetTick>
 8002f3c:	4602      	mov	r2, r0
 8002f3e:	693b      	ldr	r3, [r7, #16]
 8002f40:	1ad3      	subs	r3, r2, r3
 8002f42:	2b64      	cmp	r3, #100	; 0x64
 8002f44:	d901      	bls.n	8002f4a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002f46:	2303      	movs	r3, #3
 8002f48:	e2ae      	b.n	80034a8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002f4a:	4b92      	ldr	r3, [pc, #584]	; (8003194 <HAL_RCC_OscConfig+0x504>)
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d0f0      	beq.n	8002f38 <HAL_RCC_OscConfig+0x2a8>
 8002f56:	e014      	b.n	8002f82 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f58:	f7ff fb76 	bl	8002648 <HAL_GetTick>
 8002f5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002f5e:	e008      	b.n	8002f72 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002f60:	f7ff fb72 	bl	8002648 <HAL_GetTick>
 8002f64:	4602      	mov	r2, r0
 8002f66:	693b      	ldr	r3, [r7, #16]
 8002f68:	1ad3      	subs	r3, r2, r3
 8002f6a:	2b64      	cmp	r3, #100	; 0x64
 8002f6c:	d901      	bls.n	8002f72 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002f6e:	2303      	movs	r3, #3
 8002f70:	e29a      	b.n	80034a8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002f72:	4b88      	ldr	r3, [pc, #544]	; (8003194 <HAL_RCC_OscConfig+0x504>)
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d1f0      	bne.n	8002f60 <HAL_RCC_OscConfig+0x2d0>
 8002f7e:	e000      	b.n	8002f82 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f80:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	f003 0302 	and.w	r3, r3, #2
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d060      	beq.n	8003050 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002f8e:	69bb      	ldr	r3, [r7, #24]
 8002f90:	2b04      	cmp	r3, #4
 8002f92:	d005      	beq.n	8002fa0 <HAL_RCC_OscConfig+0x310>
 8002f94:	69bb      	ldr	r3, [r7, #24]
 8002f96:	2b0c      	cmp	r3, #12
 8002f98:	d119      	bne.n	8002fce <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002f9a:	697b      	ldr	r3, [r7, #20]
 8002f9c:	2b02      	cmp	r3, #2
 8002f9e:	d116      	bne.n	8002fce <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002fa0:	4b7c      	ldr	r3, [pc, #496]	; (8003194 <HAL_RCC_OscConfig+0x504>)
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d005      	beq.n	8002fb8 <HAL_RCC_OscConfig+0x328>
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	68db      	ldr	r3, [r3, #12]
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d101      	bne.n	8002fb8 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002fb4:	2301      	movs	r3, #1
 8002fb6:	e277      	b.n	80034a8 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002fb8:	4b76      	ldr	r3, [pc, #472]	; (8003194 <HAL_RCC_OscConfig+0x504>)
 8002fba:	685b      	ldr	r3, [r3, #4]
 8002fbc:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	691b      	ldr	r3, [r3, #16]
 8002fc4:	061b      	lsls	r3, r3, #24
 8002fc6:	4973      	ldr	r1, [pc, #460]	; (8003194 <HAL_RCC_OscConfig+0x504>)
 8002fc8:	4313      	orrs	r3, r2
 8002fca:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002fcc:	e040      	b.n	8003050 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	68db      	ldr	r3, [r3, #12]
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d023      	beq.n	800301e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002fd6:	4b6f      	ldr	r3, [pc, #444]	; (8003194 <HAL_RCC_OscConfig+0x504>)
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	4a6e      	ldr	r2, [pc, #440]	; (8003194 <HAL_RCC_OscConfig+0x504>)
 8002fdc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002fe0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fe2:	f7ff fb31 	bl	8002648 <HAL_GetTick>
 8002fe6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002fe8:	e008      	b.n	8002ffc <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002fea:	f7ff fb2d 	bl	8002648 <HAL_GetTick>
 8002fee:	4602      	mov	r2, r0
 8002ff0:	693b      	ldr	r3, [r7, #16]
 8002ff2:	1ad3      	subs	r3, r2, r3
 8002ff4:	2b02      	cmp	r3, #2
 8002ff6:	d901      	bls.n	8002ffc <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002ff8:	2303      	movs	r3, #3
 8002ffa:	e255      	b.n	80034a8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002ffc:	4b65      	ldr	r3, [pc, #404]	; (8003194 <HAL_RCC_OscConfig+0x504>)
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003004:	2b00      	cmp	r3, #0
 8003006:	d0f0      	beq.n	8002fea <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003008:	4b62      	ldr	r3, [pc, #392]	; (8003194 <HAL_RCC_OscConfig+0x504>)
 800300a:	685b      	ldr	r3, [r3, #4]
 800300c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	691b      	ldr	r3, [r3, #16]
 8003014:	061b      	lsls	r3, r3, #24
 8003016:	495f      	ldr	r1, [pc, #380]	; (8003194 <HAL_RCC_OscConfig+0x504>)
 8003018:	4313      	orrs	r3, r2
 800301a:	604b      	str	r3, [r1, #4]
 800301c:	e018      	b.n	8003050 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800301e:	4b5d      	ldr	r3, [pc, #372]	; (8003194 <HAL_RCC_OscConfig+0x504>)
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	4a5c      	ldr	r2, [pc, #368]	; (8003194 <HAL_RCC_OscConfig+0x504>)
 8003024:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003028:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800302a:	f7ff fb0d 	bl	8002648 <HAL_GetTick>
 800302e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003030:	e008      	b.n	8003044 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003032:	f7ff fb09 	bl	8002648 <HAL_GetTick>
 8003036:	4602      	mov	r2, r0
 8003038:	693b      	ldr	r3, [r7, #16]
 800303a:	1ad3      	subs	r3, r2, r3
 800303c:	2b02      	cmp	r3, #2
 800303e:	d901      	bls.n	8003044 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003040:	2303      	movs	r3, #3
 8003042:	e231      	b.n	80034a8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003044:	4b53      	ldr	r3, [pc, #332]	; (8003194 <HAL_RCC_OscConfig+0x504>)
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800304c:	2b00      	cmp	r3, #0
 800304e:	d1f0      	bne.n	8003032 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	f003 0308 	and.w	r3, r3, #8
 8003058:	2b00      	cmp	r3, #0
 800305a:	d03c      	beq.n	80030d6 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	695b      	ldr	r3, [r3, #20]
 8003060:	2b00      	cmp	r3, #0
 8003062:	d01c      	beq.n	800309e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003064:	4b4b      	ldr	r3, [pc, #300]	; (8003194 <HAL_RCC_OscConfig+0x504>)
 8003066:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800306a:	4a4a      	ldr	r2, [pc, #296]	; (8003194 <HAL_RCC_OscConfig+0x504>)
 800306c:	f043 0301 	orr.w	r3, r3, #1
 8003070:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003074:	f7ff fae8 	bl	8002648 <HAL_GetTick>
 8003078:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800307a:	e008      	b.n	800308e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800307c:	f7ff fae4 	bl	8002648 <HAL_GetTick>
 8003080:	4602      	mov	r2, r0
 8003082:	693b      	ldr	r3, [r7, #16]
 8003084:	1ad3      	subs	r3, r2, r3
 8003086:	2b02      	cmp	r3, #2
 8003088:	d901      	bls.n	800308e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800308a:	2303      	movs	r3, #3
 800308c:	e20c      	b.n	80034a8 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800308e:	4b41      	ldr	r3, [pc, #260]	; (8003194 <HAL_RCC_OscConfig+0x504>)
 8003090:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003094:	f003 0302 	and.w	r3, r3, #2
 8003098:	2b00      	cmp	r3, #0
 800309a:	d0ef      	beq.n	800307c <HAL_RCC_OscConfig+0x3ec>
 800309c:	e01b      	b.n	80030d6 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800309e:	4b3d      	ldr	r3, [pc, #244]	; (8003194 <HAL_RCC_OscConfig+0x504>)
 80030a0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80030a4:	4a3b      	ldr	r2, [pc, #236]	; (8003194 <HAL_RCC_OscConfig+0x504>)
 80030a6:	f023 0301 	bic.w	r3, r3, #1
 80030aa:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030ae:	f7ff facb 	bl	8002648 <HAL_GetTick>
 80030b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80030b4:	e008      	b.n	80030c8 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80030b6:	f7ff fac7 	bl	8002648 <HAL_GetTick>
 80030ba:	4602      	mov	r2, r0
 80030bc:	693b      	ldr	r3, [r7, #16]
 80030be:	1ad3      	subs	r3, r2, r3
 80030c0:	2b02      	cmp	r3, #2
 80030c2:	d901      	bls.n	80030c8 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80030c4:	2303      	movs	r3, #3
 80030c6:	e1ef      	b.n	80034a8 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80030c8:	4b32      	ldr	r3, [pc, #200]	; (8003194 <HAL_RCC_OscConfig+0x504>)
 80030ca:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80030ce:	f003 0302 	and.w	r3, r3, #2
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d1ef      	bne.n	80030b6 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	f003 0304 	and.w	r3, r3, #4
 80030de:	2b00      	cmp	r3, #0
 80030e0:	f000 80a6 	beq.w	8003230 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80030e4:	2300      	movs	r3, #0
 80030e6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80030e8:	4b2a      	ldr	r3, [pc, #168]	; (8003194 <HAL_RCC_OscConfig+0x504>)
 80030ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d10d      	bne.n	8003110 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80030f4:	4b27      	ldr	r3, [pc, #156]	; (8003194 <HAL_RCC_OscConfig+0x504>)
 80030f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030f8:	4a26      	ldr	r2, [pc, #152]	; (8003194 <HAL_RCC_OscConfig+0x504>)
 80030fa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80030fe:	6593      	str	r3, [r2, #88]	; 0x58
 8003100:	4b24      	ldr	r3, [pc, #144]	; (8003194 <HAL_RCC_OscConfig+0x504>)
 8003102:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003104:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003108:	60bb      	str	r3, [r7, #8]
 800310a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800310c:	2301      	movs	r3, #1
 800310e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003110:	4b21      	ldr	r3, [pc, #132]	; (8003198 <HAL_RCC_OscConfig+0x508>)
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003118:	2b00      	cmp	r3, #0
 800311a:	d118      	bne.n	800314e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800311c:	4b1e      	ldr	r3, [pc, #120]	; (8003198 <HAL_RCC_OscConfig+0x508>)
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	4a1d      	ldr	r2, [pc, #116]	; (8003198 <HAL_RCC_OscConfig+0x508>)
 8003122:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003126:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003128:	f7ff fa8e 	bl	8002648 <HAL_GetTick>
 800312c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800312e:	e008      	b.n	8003142 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003130:	f7ff fa8a 	bl	8002648 <HAL_GetTick>
 8003134:	4602      	mov	r2, r0
 8003136:	693b      	ldr	r3, [r7, #16]
 8003138:	1ad3      	subs	r3, r2, r3
 800313a:	2b02      	cmp	r3, #2
 800313c:	d901      	bls.n	8003142 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800313e:	2303      	movs	r3, #3
 8003140:	e1b2      	b.n	80034a8 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003142:	4b15      	ldr	r3, [pc, #84]	; (8003198 <HAL_RCC_OscConfig+0x508>)
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800314a:	2b00      	cmp	r3, #0
 800314c:	d0f0      	beq.n	8003130 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	689b      	ldr	r3, [r3, #8]
 8003152:	2b01      	cmp	r3, #1
 8003154:	d108      	bne.n	8003168 <HAL_RCC_OscConfig+0x4d8>
 8003156:	4b0f      	ldr	r3, [pc, #60]	; (8003194 <HAL_RCC_OscConfig+0x504>)
 8003158:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800315c:	4a0d      	ldr	r2, [pc, #52]	; (8003194 <HAL_RCC_OscConfig+0x504>)
 800315e:	f043 0301 	orr.w	r3, r3, #1
 8003162:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003166:	e029      	b.n	80031bc <HAL_RCC_OscConfig+0x52c>
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	689b      	ldr	r3, [r3, #8]
 800316c:	2b05      	cmp	r3, #5
 800316e:	d115      	bne.n	800319c <HAL_RCC_OscConfig+0x50c>
 8003170:	4b08      	ldr	r3, [pc, #32]	; (8003194 <HAL_RCC_OscConfig+0x504>)
 8003172:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003176:	4a07      	ldr	r2, [pc, #28]	; (8003194 <HAL_RCC_OscConfig+0x504>)
 8003178:	f043 0304 	orr.w	r3, r3, #4
 800317c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003180:	4b04      	ldr	r3, [pc, #16]	; (8003194 <HAL_RCC_OscConfig+0x504>)
 8003182:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003186:	4a03      	ldr	r2, [pc, #12]	; (8003194 <HAL_RCC_OscConfig+0x504>)
 8003188:	f043 0301 	orr.w	r3, r3, #1
 800318c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003190:	e014      	b.n	80031bc <HAL_RCC_OscConfig+0x52c>
 8003192:	bf00      	nop
 8003194:	40021000 	.word	0x40021000
 8003198:	40007000 	.word	0x40007000
 800319c:	4b9a      	ldr	r3, [pc, #616]	; (8003408 <HAL_RCC_OscConfig+0x778>)
 800319e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031a2:	4a99      	ldr	r2, [pc, #612]	; (8003408 <HAL_RCC_OscConfig+0x778>)
 80031a4:	f023 0301 	bic.w	r3, r3, #1
 80031a8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80031ac:	4b96      	ldr	r3, [pc, #600]	; (8003408 <HAL_RCC_OscConfig+0x778>)
 80031ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031b2:	4a95      	ldr	r2, [pc, #596]	; (8003408 <HAL_RCC_OscConfig+0x778>)
 80031b4:	f023 0304 	bic.w	r3, r3, #4
 80031b8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	689b      	ldr	r3, [r3, #8]
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d016      	beq.n	80031f2 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031c4:	f7ff fa40 	bl	8002648 <HAL_GetTick>
 80031c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80031ca:	e00a      	b.n	80031e2 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80031cc:	f7ff fa3c 	bl	8002648 <HAL_GetTick>
 80031d0:	4602      	mov	r2, r0
 80031d2:	693b      	ldr	r3, [r7, #16]
 80031d4:	1ad3      	subs	r3, r2, r3
 80031d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80031da:	4293      	cmp	r3, r2
 80031dc:	d901      	bls.n	80031e2 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80031de:	2303      	movs	r3, #3
 80031e0:	e162      	b.n	80034a8 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80031e2:	4b89      	ldr	r3, [pc, #548]	; (8003408 <HAL_RCC_OscConfig+0x778>)
 80031e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031e8:	f003 0302 	and.w	r3, r3, #2
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d0ed      	beq.n	80031cc <HAL_RCC_OscConfig+0x53c>
 80031f0:	e015      	b.n	800321e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031f2:	f7ff fa29 	bl	8002648 <HAL_GetTick>
 80031f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80031f8:	e00a      	b.n	8003210 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80031fa:	f7ff fa25 	bl	8002648 <HAL_GetTick>
 80031fe:	4602      	mov	r2, r0
 8003200:	693b      	ldr	r3, [r7, #16]
 8003202:	1ad3      	subs	r3, r2, r3
 8003204:	f241 3288 	movw	r2, #5000	; 0x1388
 8003208:	4293      	cmp	r3, r2
 800320a:	d901      	bls.n	8003210 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800320c:	2303      	movs	r3, #3
 800320e:	e14b      	b.n	80034a8 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003210:	4b7d      	ldr	r3, [pc, #500]	; (8003408 <HAL_RCC_OscConfig+0x778>)
 8003212:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003216:	f003 0302 	and.w	r3, r3, #2
 800321a:	2b00      	cmp	r3, #0
 800321c:	d1ed      	bne.n	80031fa <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800321e:	7ffb      	ldrb	r3, [r7, #31]
 8003220:	2b01      	cmp	r3, #1
 8003222:	d105      	bne.n	8003230 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003224:	4b78      	ldr	r3, [pc, #480]	; (8003408 <HAL_RCC_OscConfig+0x778>)
 8003226:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003228:	4a77      	ldr	r2, [pc, #476]	; (8003408 <HAL_RCC_OscConfig+0x778>)
 800322a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800322e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	f003 0320 	and.w	r3, r3, #32
 8003238:	2b00      	cmp	r3, #0
 800323a:	d03c      	beq.n	80032b6 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003240:	2b00      	cmp	r3, #0
 8003242:	d01c      	beq.n	800327e <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003244:	4b70      	ldr	r3, [pc, #448]	; (8003408 <HAL_RCC_OscConfig+0x778>)
 8003246:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800324a:	4a6f      	ldr	r2, [pc, #444]	; (8003408 <HAL_RCC_OscConfig+0x778>)
 800324c:	f043 0301 	orr.w	r3, r3, #1
 8003250:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003254:	f7ff f9f8 	bl	8002648 <HAL_GetTick>
 8003258:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800325a:	e008      	b.n	800326e <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800325c:	f7ff f9f4 	bl	8002648 <HAL_GetTick>
 8003260:	4602      	mov	r2, r0
 8003262:	693b      	ldr	r3, [r7, #16]
 8003264:	1ad3      	subs	r3, r2, r3
 8003266:	2b02      	cmp	r3, #2
 8003268:	d901      	bls.n	800326e <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 800326a:	2303      	movs	r3, #3
 800326c:	e11c      	b.n	80034a8 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800326e:	4b66      	ldr	r3, [pc, #408]	; (8003408 <HAL_RCC_OscConfig+0x778>)
 8003270:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003274:	f003 0302 	and.w	r3, r3, #2
 8003278:	2b00      	cmp	r3, #0
 800327a:	d0ef      	beq.n	800325c <HAL_RCC_OscConfig+0x5cc>
 800327c:	e01b      	b.n	80032b6 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800327e:	4b62      	ldr	r3, [pc, #392]	; (8003408 <HAL_RCC_OscConfig+0x778>)
 8003280:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003284:	4a60      	ldr	r2, [pc, #384]	; (8003408 <HAL_RCC_OscConfig+0x778>)
 8003286:	f023 0301 	bic.w	r3, r3, #1
 800328a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800328e:	f7ff f9db 	bl	8002648 <HAL_GetTick>
 8003292:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003294:	e008      	b.n	80032a8 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003296:	f7ff f9d7 	bl	8002648 <HAL_GetTick>
 800329a:	4602      	mov	r2, r0
 800329c:	693b      	ldr	r3, [r7, #16]
 800329e:	1ad3      	subs	r3, r2, r3
 80032a0:	2b02      	cmp	r3, #2
 80032a2:	d901      	bls.n	80032a8 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 80032a4:	2303      	movs	r3, #3
 80032a6:	e0ff      	b.n	80034a8 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80032a8:	4b57      	ldr	r3, [pc, #348]	; (8003408 <HAL_RCC_OscConfig+0x778>)
 80032aa:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80032ae:	f003 0302 	and.w	r3, r3, #2
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d1ef      	bne.n	8003296 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	f000 80f3 	beq.w	80034a6 <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032c4:	2b02      	cmp	r3, #2
 80032c6:	f040 80c9 	bne.w	800345c <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80032ca:	4b4f      	ldr	r3, [pc, #316]	; (8003408 <HAL_RCC_OscConfig+0x778>)
 80032cc:	68db      	ldr	r3, [r3, #12]
 80032ce:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80032d0:	697b      	ldr	r3, [r7, #20]
 80032d2:	f003 0203 	and.w	r2, r3, #3
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032da:	429a      	cmp	r2, r3
 80032dc:	d12c      	bne.n	8003338 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80032de:	697b      	ldr	r3, [r7, #20]
 80032e0:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032e8:	3b01      	subs	r3, #1
 80032ea:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80032ec:	429a      	cmp	r2, r3
 80032ee:	d123      	bne.n	8003338 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80032f0:	697b      	ldr	r3, [r7, #20]
 80032f2:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80032fa:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80032fc:	429a      	cmp	r2, r3
 80032fe:	d11b      	bne.n	8003338 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003300:	697b      	ldr	r3, [r7, #20]
 8003302:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800330a:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800330c:	429a      	cmp	r2, r3
 800330e:	d113      	bne.n	8003338 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003310:	697b      	ldr	r3, [r7, #20]
 8003312:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800331a:	085b      	lsrs	r3, r3, #1
 800331c:	3b01      	subs	r3, #1
 800331e:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003320:	429a      	cmp	r2, r3
 8003322:	d109      	bne.n	8003338 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003324:	697b      	ldr	r3, [r7, #20]
 8003326:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800332e:	085b      	lsrs	r3, r3, #1
 8003330:	3b01      	subs	r3, #1
 8003332:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003334:	429a      	cmp	r2, r3
 8003336:	d06b      	beq.n	8003410 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003338:	69bb      	ldr	r3, [r7, #24]
 800333a:	2b0c      	cmp	r3, #12
 800333c:	d062      	beq.n	8003404 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800333e:	4b32      	ldr	r3, [pc, #200]	; (8003408 <HAL_RCC_OscConfig+0x778>)
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003346:	2b00      	cmp	r3, #0
 8003348:	d001      	beq.n	800334e <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 800334a:	2301      	movs	r3, #1
 800334c:	e0ac      	b.n	80034a8 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800334e:	4b2e      	ldr	r3, [pc, #184]	; (8003408 <HAL_RCC_OscConfig+0x778>)
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	4a2d      	ldr	r2, [pc, #180]	; (8003408 <HAL_RCC_OscConfig+0x778>)
 8003354:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003358:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800335a:	f7ff f975 	bl	8002648 <HAL_GetTick>
 800335e:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003360:	e008      	b.n	8003374 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003362:	f7ff f971 	bl	8002648 <HAL_GetTick>
 8003366:	4602      	mov	r2, r0
 8003368:	693b      	ldr	r3, [r7, #16]
 800336a:	1ad3      	subs	r3, r2, r3
 800336c:	2b02      	cmp	r3, #2
 800336e:	d901      	bls.n	8003374 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8003370:	2303      	movs	r3, #3
 8003372:	e099      	b.n	80034a8 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003374:	4b24      	ldr	r3, [pc, #144]	; (8003408 <HAL_RCC_OscConfig+0x778>)
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800337c:	2b00      	cmp	r3, #0
 800337e:	d1f0      	bne.n	8003362 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003380:	4b21      	ldr	r3, [pc, #132]	; (8003408 <HAL_RCC_OscConfig+0x778>)
 8003382:	68da      	ldr	r2, [r3, #12]
 8003384:	4b21      	ldr	r3, [pc, #132]	; (800340c <HAL_RCC_OscConfig+0x77c>)
 8003386:	4013      	ands	r3, r2
 8003388:	687a      	ldr	r2, [r7, #4]
 800338a:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800338c:	687a      	ldr	r2, [r7, #4]
 800338e:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003390:	3a01      	subs	r2, #1
 8003392:	0112      	lsls	r2, r2, #4
 8003394:	4311      	orrs	r1, r2
 8003396:	687a      	ldr	r2, [r7, #4]
 8003398:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800339a:	0212      	lsls	r2, r2, #8
 800339c:	4311      	orrs	r1, r2
 800339e:	687a      	ldr	r2, [r7, #4]
 80033a0:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80033a2:	0852      	lsrs	r2, r2, #1
 80033a4:	3a01      	subs	r2, #1
 80033a6:	0552      	lsls	r2, r2, #21
 80033a8:	4311      	orrs	r1, r2
 80033aa:	687a      	ldr	r2, [r7, #4]
 80033ac:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80033ae:	0852      	lsrs	r2, r2, #1
 80033b0:	3a01      	subs	r2, #1
 80033b2:	0652      	lsls	r2, r2, #25
 80033b4:	4311      	orrs	r1, r2
 80033b6:	687a      	ldr	r2, [r7, #4]
 80033b8:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80033ba:	06d2      	lsls	r2, r2, #27
 80033bc:	430a      	orrs	r2, r1
 80033be:	4912      	ldr	r1, [pc, #72]	; (8003408 <HAL_RCC_OscConfig+0x778>)
 80033c0:	4313      	orrs	r3, r2
 80033c2:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80033c4:	4b10      	ldr	r3, [pc, #64]	; (8003408 <HAL_RCC_OscConfig+0x778>)
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	4a0f      	ldr	r2, [pc, #60]	; (8003408 <HAL_RCC_OscConfig+0x778>)
 80033ca:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80033ce:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80033d0:	4b0d      	ldr	r3, [pc, #52]	; (8003408 <HAL_RCC_OscConfig+0x778>)
 80033d2:	68db      	ldr	r3, [r3, #12]
 80033d4:	4a0c      	ldr	r2, [pc, #48]	; (8003408 <HAL_RCC_OscConfig+0x778>)
 80033d6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80033da:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80033dc:	f7ff f934 	bl	8002648 <HAL_GetTick>
 80033e0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80033e2:	e008      	b.n	80033f6 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80033e4:	f7ff f930 	bl	8002648 <HAL_GetTick>
 80033e8:	4602      	mov	r2, r0
 80033ea:	693b      	ldr	r3, [r7, #16]
 80033ec:	1ad3      	subs	r3, r2, r3
 80033ee:	2b02      	cmp	r3, #2
 80033f0:	d901      	bls.n	80033f6 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 80033f2:	2303      	movs	r3, #3
 80033f4:	e058      	b.n	80034a8 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80033f6:	4b04      	ldr	r3, [pc, #16]	; (8003408 <HAL_RCC_OscConfig+0x778>)
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d0f0      	beq.n	80033e4 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003402:	e050      	b.n	80034a6 <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003404:	2301      	movs	r3, #1
 8003406:	e04f      	b.n	80034a8 <HAL_RCC_OscConfig+0x818>
 8003408:	40021000 	.word	0x40021000
 800340c:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003410:	4b27      	ldr	r3, [pc, #156]	; (80034b0 <HAL_RCC_OscConfig+0x820>)
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003418:	2b00      	cmp	r3, #0
 800341a:	d144      	bne.n	80034a6 <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800341c:	4b24      	ldr	r3, [pc, #144]	; (80034b0 <HAL_RCC_OscConfig+0x820>)
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	4a23      	ldr	r2, [pc, #140]	; (80034b0 <HAL_RCC_OscConfig+0x820>)
 8003422:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003426:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003428:	4b21      	ldr	r3, [pc, #132]	; (80034b0 <HAL_RCC_OscConfig+0x820>)
 800342a:	68db      	ldr	r3, [r3, #12]
 800342c:	4a20      	ldr	r2, [pc, #128]	; (80034b0 <HAL_RCC_OscConfig+0x820>)
 800342e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003432:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003434:	f7ff f908 	bl	8002648 <HAL_GetTick>
 8003438:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800343a:	e008      	b.n	800344e <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800343c:	f7ff f904 	bl	8002648 <HAL_GetTick>
 8003440:	4602      	mov	r2, r0
 8003442:	693b      	ldr	r3, [r7, #16]
 8003444:	1ad3      	subs	r3, r2, r3
 8003446:	2b02      	cmp	r3, #2
 8003448:	d901      	bls.n	800344e <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 800344a:	2303      	movs	r3, #3
 800344c:	e02c      	b.n	80034a8 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800344e:	4b18      	ldr	r3, [pc, #96]	; (80034b0 <HAL_RCC_OscConfig+0x820>)
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003456:	2b00      	cmp	r3, #0
 8003458:	d0f0      	beq.n	800343c <HAL_RCC_OscConfig+0x7ac>
 800345a:	e024      	b.n	80034a6 <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800345c:	69bb      	ldr	r3, [r7, #24]
 800345e:	2b0c      	cmp	r3, #12
 8003460:	d01f      	beq.n	80034a2 <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003462:	4b13      	ldr	r3, [pc, #76]	; (80034b0 <HAL_RCC_OscConfig+0x820>)
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	4a12      	ldr	r2, [pc, #72]	; (80034b0 <HAL_RCC_OscConfig+0x820>)
 8003468:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800346c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800346e:	f7ff f8eb 	bl	8002648 <HAL_GetTick>
 8003472:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003474:	e008      	b.n	8003488 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003476:	f7ff f8e7 	bl	8002648 <HAL_GetTick>
 800347a:	4602      	mov	r2, r0
 800347c:	693b      	ldr	r3, [r7, #16]
 800347e:	1ad3      	subs	r3, r2, r3
 8003480:	2b02      	cmp	r3, #2
 8003482:	d901      	bls.n	8003488 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8003484:	2303      	movs	r3, #3
 8003486:	e00f      	b.n	80034a8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003488:	4b09      	ldr	r3, [pc, #36]	; (80034b0 <HAL_RCC_OscConfig+0x820>)
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003490:	2b00      	cmp	r3, #0
 8003492:	d1f0      	bne.n	8003476 <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8003494:	4b06      	ldr	r3, [pc, #24]	; (80034b0 <HAL_RCC_OscConfig+0x820>)
 8003496:	68da      	ldr	r2, [r3, #12]
 8003498:	4905      	ldr	r1, [pc, #20]	; (80034b0 <HAL_RCC_OscConfig+0x820>)
 800349a:	4b06      	ldr	r3, [pc, #24]	; (80034b4 <HAL_RCC_OscConfig+0x824>)
 800349c:	4013      	ands	r3, r2
 800349e:	60cb      	str	r3, [r1, #12]
 80034a0:	e001      	b.n	80034a6 <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80034a2:	2301      	movs	r3, #1
 80034a4:	e000      	b.n	80034a8 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 80034a6:	2300      	movs	r3, #0
}
 80034a8:	4618      	mov	r0, r3
 80034aa:	3720      	adds	r7, #32
 80034ac:	46bd      	mov	sp, r7
 80034ae:	bd80      	pop	{r7, pc}
 80034b0:	40021000 	.word	0x40021000
 80034b4:	feeefffc 	.word	0xfeeefffc

080034b8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80034b8:	b580      	push	{r7, lr}
 80034ba:	b084      	sub	sp, #16
 80034bc:	af00      	add	r7, sp, #0
 80034be:	6078      	str	r0, [r7, #4]
 80034c0:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d101      	bne.n	80034cc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80034c8:	2301      	movs	r3, #1
 80034ca:	e0e7      	b.n	800369c <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80034cc:	4b75      	ldr	r3, [pc, #468]	; (80036a4 <HAL_RCC_ClockConfig+0x1ec>)
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	f003 0307 	and.w	r3, r3, #7
 80034d4:	683a      	ldr	r2, [r7, #0]
 80034d6:	429a      	cmp	r2, r3
 80034d8:	d910      	bls.n	80034fc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80034da:	4b72      	ldr	r3, [pc, #456]	; (80036a4 <HAL_RCC_ClockConfig+0x1ec>)
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	f023 0207 	bic.w	r2, r3, #7
 80034e2:	4970      	ldr	r1, [pc, #448]	; (80036a4 <HAL_RCC_ClockConfig+0x1ec>)
 80034e4:	683b      	ldr	r3, [r7, #0]
 80034e6:	4313      	orrs	r3, r2
 80034e8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80034ea:	4b6e      	ldr	r3, [pc, #440]	; (80036a4 <HAL_RCC_ClockConfig+0x1ec>)
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	f003 0307 	and.w	r3, r3, #7
 80034f2:	683a      	ldr	r2, [r7, #0]
 80034f4:	429a      	cmp	r2, r3
 80034f6:	d001      	beq.n	80034fc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80034f8:	2301      	movs	r3, #1
 80034fa:	e0cf      	b.n	800369c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	f003 0302 	and.w	r3, r3, #2
 8003504:	2b00      	cmp	r3, #0
 8003506:	d010      	beq.n	800352a <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	689a      	ldr	r2, [r3, #8]
 800350c:	4b66      	ldr	r3, [pc, #408]	; (80036a8 <HAL_RCC_ClockConfig+0x1f0>)
 800350e:	689b      	ldr	r3, [r3, #8]
 8003510:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003514:	429a      	cmp	r2, r3
 8003516:	d908      	bls.n	800352a <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003518:	4b63      	ldr	r3, [pc, #396]	; (80036a8 <HAL_RCC_ClockConfig+0x1f0>)
 800351a:	689b      	ldr	r3, [r3, #8]
 800351c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	689b      	ldr	r3, [r3, #8]
 8003524:	4960      	ldr	r1, [pc, #384]	; (80036a8 <HAL_RCC_ClockConfig+0x1f0>)
 8003526:	4313      	orrs	r3, r2
 8003528:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	f003 0301 	and.w	r3, r3, #1
 8003532:	2b00      	cmp	r3, #0
 8003534:	d04c      	beq.n	80035d0 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	685b      	ldr	r3, [r3, #4]
 800353a:	2b03      	cmp	r3, #3
 800353c:	d107      	bne.n	800354e <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800353e:	4b5a      	ldr	r3, [pc, #360]	; (80036a8 <HAL_RCC_ClockConfig+0x1f0>)
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003546:	2b00      	cmp	r3, #0
 8003548:	d121      	bne.n	800358e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800354a:	2301      	movs	r3, #1
 800354c:	e0a6      	b.n	800369c <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	685b      	ldr	r3, [r3, #4]
 8003552:	2b02      	cmp	r3, #2
 8003554:	d107      	bne.n	8003566 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003556:	4b54      	ldr	r3, [pc, #336]	; (80036a8 <HAL_RCC_ClockConfig+0x1f0>)
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800355e:	2b00      	cmp	r3, #0
 8003560:	d115      	bne.n	800358e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003562:	2301      	movs	r3, #1
 8003564:	e09a      	b.n	800369c <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	685b      	ldr	r3, [r3, #4]
 800356a:	2b00      	cmp	r3, #0
 800356c:	d107      	bne.n	800357e <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800356e:	4b4e      	ldr	r3, [pc, #312]	; (80036a8 <HAL_RCC_ClockConfig+0x1f0>)
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	f003 0302 	and.w	r3, r3, #2
 8003576:	2b00      	cmp	r3, #0
 8003578:	d109      	bne.n	800358e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800357a:	2301      	movs	r3, #1
 800357c:	e08e      	b.n	800369c <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800357e:	4b4a      	ldr	r3, [pc, #296]	; (80036a8 <HAL_RCC_ClockConfig+0x1f0>)
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003586:	2b00      	cmp	r3, #0
 8003588:	d101      	bne.n	800358e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800358a:	2301      	movs	r3, #1
 800358c:	e086      	b.n	800369c <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800358e:	4b46      	ldr	r3, [pc, #280]	; (80036a8 <HAL_RCC_ClockConfig+0x1f0>)
 8003590:	689b      	ldr	r3, [r3, #8]
 8003592:	f023 0203 	bic.w	r2, r3, #3
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	685b      	ldr	r3, [r3, #4]
 800359a:	4943      	ldr	r1, [pc, #268]	; (80036a8 <HAL_RCC_ClockConfig+0x1f0>)
 800359c:	4313      	orrs	r3, r2
 800359e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80035a0:	f7ff f852 	bl	8002648 <HAL_GetTick>
 80035a4:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80035a6:	e00a      	b.n	80035be <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80035a8:	f7ff f84e 	bl	8002648 <HAL_GetTick>
 80035ac:	4602      	mov	r2, r0
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	1ad3      	subs	r3, r2, r3
 80035b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80035b6:	4293      	cmp	r3, r2
 80035b8:	d901      	bls.n	80035be <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80035ba:	2303      	movs	r3, #3
 80035bc:	e06e      	b.n	800369c <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80035be:	4b3a      	ldr	r3, [pc, #232]	; (80036a8 <HAL_RCC_ClockConfig+0x1f0>)
 80035c0:	689b      	ldr	r3, [r3, #8]
 80035c2:	f003 020c 	and.w	r2, r3, #12
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	685b      	ldr	r3, [r3, #4]
 80035ca:	009b      	lsls	r3, r3, #2
 80035cc:	429a      	cmp	r2, r3
 80035ce:	d1eb      	bne.n	80035a8 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	f003 0302 	and.w	r3, r3, #2
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d010      	beq.n	80035fe <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	689a      	ldr	r2, [r3, #8]
 80035e0:	4b31      	ldr	r3, [pc, #196]	; (80036a8 <HAL_RCC_ClockConfig+0x1f0>)
 80035e2:	689b      	ldr	r3, [r3, #8]
 80035e4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80035e8:	429a      	cmp	r2, r3
 80035ea:	d208      	bcs.n	80035fe <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80035ec:	4b2e      	ldr	r3, [pc, #184]	; (80036a8 <HAL_RCC_ClockConfig+0x1f0>)
 80035ee:	689b      	ldr	r3, [r3, #8]
 80035f0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	689b      	ldr	r3, [r3, #8]
 80035f8:	492b      	ldr	r1, [pc, #172]	; (80036a8 <HAL_RCC_ClockConfig+0x1f0>)
 80035fa:	4313      	orrs	r3, r2
 80035fc:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80035fe:	4b29      	ldr	r3, [pc, #164]	; (80036a4 <HAL_RCC_ClockConfig+0x1ec>)
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	f003 0307 	and.w	r3, r3, #7
 8003606:	683a      	ldr	r2, [r7, #0]
 8003608:	429a      	cmp	r2, r3
 800360a:	d210      	bcs.n	800362e <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800360c:	4b25      	ldr	r3, [pc, #148]	; (80036a4 <HAL_RCC_ClockConfig+0x1ec>)
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	f023 0207 	bic.w	r2, r3, #7
 8003614:	4923      	ldr	r1, [pc, #140]	; (80036a4 <HAL_RCC_ClockConfig+0x1ec>)
 8003616:	683b      	ldr	r3, [r7, #0]
 8003618:	4313      	orrs	r3, r2
 800361a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800361c:	4b21      	ldr	r3, [pc, #132]	; (80036a4 <HAL_RCC_ClockConfig+0x1ec>)
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	f003 0307 	and.w	r3, r3, #7
 8003624:	683a      	ldr	r2, [r7, #0]
 8003626:	429a      	cmp	r2, r3
 8003628:	d001      	beq.n	800362e <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800362a:	2301      	movs	r3, #1
 800362c:	e036      	b.n	800369c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	f003 0304 	and.w	r3, r3, #4
 8003636:	2b00      	cmp	r3, #0
 8003638:	d008      	beq.n	800364c <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800363a:	4b1b      	ldr	r3, [pc, #108]	; (80036a8 <HAL_RCC_ClockConfig+0x1f0>)
 800363c:	689b      	ldr	r3, [r3, #8]
 800363e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	68db      	ldr	r3, [r3, #12]
 8003646:	4918      	ldr	r1, [pc, #96]	; (80036a8 <HAL_RCC_ClockConfig+0x1f0>)
 8003648:	4313      	orrs	r3, r2
 800364a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	f003 0308 	and.w	r3, r3, #8
 8003654:	2b00      	cmp	r3, #0
 8003656:	d009      	beq.n	800366c <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003658:	4b13      	ldr	r3, [pc, #76]	; (80036a8 <HAL_RCC_ClockConfig+0x1f0>)
 800365a:	689b      	ldr	r3, [r3, #8]
 800365c:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	691b      	ldr	r3, [r3, #16]
 8003664:	00db      	lsls	r3, r3, #3
 8003666:	4910      	ldr	r1, [pc, #64]	; (80036a8 <HAL_RCC_ClockConfig+0x1f0>)
 8003668:	4313      	orrs	r3, r2
 800366a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800366c:	f000 f824 	bl	80036b8 <HAL_RCC_GetSysClockFreq>
 8003670:	4602      	mov	r2, r0
 8003672:	4b0d      	ldr	r3, [pc, #52]	; (80036a8 <HAL_RCC_ClockConfig+0x1f0>)
 8003674:	689b      	ldr	r3, [r3, #8]
 8003676:	091b      	lsrs	r3, r3, #4
 8003678:	f003 030f 	and.w	r3, r3, #15
 800367c:	490b      	ldr	r1, [pc, #44]	; (80036ac <HAL_RCC_ClockConfig+0x1f4>)
 800367e:	5ccb      	ldrb	r3, [r1, r3]
 8003680:	f003 031f 	and.w	r3, r3, #31
 8003684:	fa22 f303 	lsr.w	r3, r2, r3
 8003688:	4a09      	ldr	r2, [pc, #36]	; (80036b0 <HAL_RCC_ClockConfig+0x1f8>)
 800368a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800368c:	4b09      	ldr	r3, [pc, #36]	; (80036b4 <HAL_RCC_ClockConfig+0x1fc>)
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	4618      	mov	r0, r3
 8003692:	f7fe ff89 	bl	80025a8 <HAL_InitTick>
 8003696:	4603      	mov	r3, r0
 8003698:	72fb      	strb	r3, [r7, #11]

  return status;
 800369a:	7afb      	ldrb	r3, [r7, #11]
}
 800369c:	4618      	mov	r0, r3
 800369e:	3710      	adds	r7, #16
 80036a0:	46bd      	mov	sp, r7
 80036a2:	bd80      	pop	{r7, pc}
 80036a4:	40022000 	.word	0x40022000
 80036a8:	40021000 	.word	0x40021000
 80036ac:	0800bea0 	.word	0x0800bea0
 80036b0:	20000000 	.word	0x20000000
 80036b4:	20000004 	.word	0x20000004

080036b8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80036b8:	b480      	push	{r7}
 80036ba:	b089      	sub	sp, #36	; 0x24
 80036bc:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80036be:	2300      	movs	r3, #0
 80036c0:	61fb      	str	r3, [r7, #28]
 80036c2:	2300      	movs	r3, #0
 80036c4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80036c6:	4b3e      	ldr	r3, [pc, #248]	; (80037c0 <HAL_RCC_GetSysClockFreq+0x108>)
 80036c8:	689b      	ldr	r3, [r3, #8]
 80036ca:	f003 030c 	and.w	r3, r3, #12
 80036ce:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80036d0:	4b3b      	ldr	r3, [pc, #236]	; (80037c0 <HAL_RCC_GetSysClockFreq+0x108>)
 80036d2:	68db      	ldr	r3, [r3, #12]
 80036d4:	f003 0303 	and.w	r3, r3, #3
 80036d8:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80036da:	693b      	ldr	r3, [r7, #16]
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d005      	beq.n	80036ec <HAL_RCC_GetSysClockFreq+0x34>
 80036e0:	693b      	ldr	r3, [r7, #16]
 80036e2:	2b0c      	cmp	r3, #12
 80036e4:	d121      	bne.n	800372a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	2b01      	cmp	r3, #1
 80036ea:	d11e      	bne.n	800372a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80036ec:	4b34      	ldr	r3, [pc, #208]	; (80037c0 <HAL_RCC_GetSysClockFreq+0x108>)
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	f003 0308 	and.w	r3, r3, #8
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d107      	bne.n	8003708 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80036f8:	4b31      	ldr	r3, [pc, #196]	; (80037c0 <HAL_RCC_GetSysClockFreq+0x108>)
 80036fa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80036fe:	0a1b      	lsrs	r3, r3, #8
 8003700:	f003 030f 	and.w	r3, r3, #15
 8003704:	61fb      	str	r3, [r7, #28]
 8003706:	e005      	b.n	8003714 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003708:	4b2d      	ldr	r3, [pc, #180]	; (80037c0 <HAL_RCC_GetSysClockFreq+0x108>)
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	091b      	lsrs	r3, r3, #4
 800370e:	f003 030f 	and.w	r3, r3, #15
 8003712:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003714:	4a2b      	ldr	r2, [pc, #172]	; (80037c4 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003716:	69fb      	ldr	r3, [r7, #28]
 8003718:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800371c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800371e:	693b      	ldr	r3, [r7, #16]
 8003720:	2b00      	cmp	r3, #0
 8003722:	d10d      	bne.n	8003740 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003724:	69fb      	ldr	r3, [r7, #28]
 8003726:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003728:	e00a      	b.n	8003740 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800372a:	693b      	ldr	r3, [r7, #16]
 800372c:	2b04      	cmp	r3, #4
 800372e:	d102      	bne.n	8003736 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003730:	4b25      	ldr	r3, [pc, #148]	; (80037c8 <HAL_RCC_GetSysClockFreq+0x110>)
 8003732:	61bb      	str	r3, [r7, #24]
 8003734:	e004      	b.n	8003740 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003736:	693b      	ldr	r3, [r7, #16]
 8003738:	2b08      	cmp	r3, #8
 800373a:	d101      	bne.n	8003740 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800373c:	4b23      	ldr	r3, [pc, #140]	; (80037cc <HAL_RCC_GetSysClockFreq+0x114>)
 800373e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003740:	693b      	ldr	r3, [r7, #16]
 8003742:	2b0c      	cmp	r3, #12
 8003744:	d134      	bne.n	80037b0 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003746:	4b1e      	ldr	r3, [pc, #120]	; (80037c0 <HAL_RCC_GetSysClockFreq+0x108>)
 8003748:	68db      	ldr	r3, [r3, #12]
 800374a:	f003 0303 	and.w	r3, r3, #3
 800374e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003750:	68bb      	ldr	r3, [r7, #8]
 8003752:	2b02      	cmp	r3, #2
 8003754:	d003      	beq.n	800375e <HAL_RCC_GetSysClockFreq+0xa6>
 8003756:	68bb      	ldr	r3, [r7, #8]
 8003758:	2b03      	cmp	r3, #3
 800375a:	d003      	beq.n	8003764 <HAL_RCC_GetSysClockFreq+0xac>
 800375c:	e005      	b.n	800376a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800375e:	4b1a      	ldr	r3, [pc, #104]	; (80037c8 <HAL_RCC_GetSysClockFreq+0x110>)
 8003760:	617b      	str	r3, [r7, #20]
      break;
 8003762:	e005      	b.n	8003770 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003764:	4b19      	ldr	r3, [pc, #100]	; (80037cc <HAL_RCC_GetSysClockFreq+0x114>)
 8003766:	617b      	str	r3, [r7, #20]
      break;
 8003768:	e002      	b.n	8003770 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800376a:	69fb      	ldr	r3, [r7, #28]
 800376c:	617b      	str	r3, [r7, #20]
      break;
 800376e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003770:	4b13      	ldr	r3, [pc, #76]	; (80037c0 <HAL_RCC_GetSysClockFreq+0x108>)
 8003772:	68db      	ldr	r3, [r3, #12]
 8003774:	091b      	lsrs	r3, r3, #4
 8003776:	f003 0307 	and.w	r3, r3, #7
 800377a:	3301      	adds	r3, #1
 800377c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800377e:	4b10      	ldr	r3, [pc, #64]	; (80037c0 <HAL_RCC_GetSysClockFreq+0x108>)
 8003780:	68db      	ldr	r3, [r3, #12]
 8003782:	0a1b      	lsrs	r3, r3, #8
 8003784:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003788:	697a      	ldr	r2, [r7, #20]
 800378a:	fb03 f202 	mul.w	r2, r3, r2
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	fbb2 f3f3 	udiv	r3, r2, r3
 8003794:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003796:	4b0a      	ldr	r3, [pc, #40]	; (80037c0 <HAL_RCC_GetSysClockFreq+0x108>)
 8003798:	68db      	ldr	r3, [r3, #12]
 800379a:	0e5b      	lsrs	r3, r3, #25
 800379c:	f003 0303 	and.w	r3, r3, #3
 80037a0:	3301      	adds	r3, #1
 80037a2:	005b      	lsls	r3, r3, #1
 80037a4:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80037a6:	697a      	ldr	r2, [r7, #20]
 80037a8:	683b      	ldr	r3, [r7, #0]
 80037aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80037ae:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80037b0:	69bb      	ldr	r3, [r7, #24]
}
 80037b2:	4618      	mov	r0, r3
 80037b4:	3724      	adds	r7, #36	; 0x24
 80037b6:	46bd      	mov	sp, r7
 80037b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037bc:	4770      	bx	lr
 80037be:	bf00      	nop
 80037c0:	40021000 	.word	0x40021000
 80037c4:	0800beb8 	.word	0x0800beb8
 80037c8:	00f42400 	.word	0x00f42400
 80037cc:	007a1200 	.word	0x007a1200

080037d0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80037d0:	b480      	push	{r7}
 80037d2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80037d4:	4b03      	ldr	r3, [pc, #12]	; (80037e4 <HAL_RCC_GetHCLKFreq+0x14>)
 80037d6:	681b      	ldr	r3, [r3, #0]
}
 80037d8:	4618      	mov	r0, r3
 80037da:	46bd      	mov	sp, r7
 80037dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e0:	4770      	bx	lr
 80037e2:	bf00      	nop
 80037e4:	20000000 	.word	0x20000000

080037e8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80037e8:	b580      	push	{r7, lr}
 80037ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80037ec:	f7ff fff0 	bl	80037d0 <HAL_RCC_GetHCLKFreq>
 80037f0:	4602      	mov	r2, r0
 80037f2:	4b06      	ldr	r3, [pc, #24]	; (800380c <HAL_RCC_GetPCLK1Freq+0x24>)
 80037f4:	689b      	ldr	r3, [r3, #8]
 80037f6:	0a1b      	lsrs	r3, r3, #8
 80037f8:	f003 0307 	and.w	r3, r3, #7
 80037fc:	4904      	ldr	r1, [pc, #16]	; (8003810 <HAL_RCC_GetPCLK1Freq+0x28>)
 80037fe:	5ccb      	ldrb	r3, [r1, r3]
 8003800:	f003 031f 	and.w	r3, r3, #31
 8003804:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003808:	4618      	mov	r0, r3
 800380a:	bd80      	pop	{r7, pc}
 800380c:	40021000 	.word	0x40021000
 8003810:	0800beb0 	.word	0x0800beb0

08003814 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003814:	b580      	push	{r7, lr}
 8003816:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003818:	f7ff ffda 	bl	80037d0 <HAL_RCC_GetHCLKFreq>
 800381c:	4602      	mov	r2, r0
 800381e:	4b06      	ldr	r3, [pc, #24]	; (8003838 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003820:	689b      	ldr	r3, [r3, #8]
 8003822:	0adb      	lsrs	r3, r3, #11
 8003824:	f003 0307 	and.w	r3, r3, #7
 8003828:	4904      	ldr	r1, [pc, #16]	; (800383c <HAL_RCC_GetPCLK2Freq+0x28>)
 800382a:	5ccb      	ldrb	r3, [r1, r3]
 800382c:	f003 031f 	and.w	r3, r3, #31
 8003830:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003834:	4618      	mov	r0, r3
 8003836:	bd80      	pop	{r7, pc}
 8003838:	40021000 	.word	0x40021000
 800383c:	0800beb0 	.word	0x0800beb0

08003840 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003840:	b580      	push	{r7, lr}
 8003842:	b086      	sub	sp, #24
 8003844:	af00      	add	r7, sp, #0
 8003846:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003848:	2300      	movs	r3, #0
 800384a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800384c:	4b2a      	ldr	r3, [pc, #168]	; (80038f8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800384e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003850:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003854:	2b00      	cmp	r3, #0
 8003856:	d003      	beq.n	8003860 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003858:	f7ff f9b6 	bl	8002bc8 <HAL_PWREx_GetVoltageRange>
 800385c:	6178      	str	r0, [r7, #20]
 800385e:	e014      	b.n	800388a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003860:	4b25      	ldr	r3, [pc, #148]	; (80038f8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003862:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003864:	4a24      	ldr	r2, [pc, #144]	; (80038f8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003866:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800386a:	6593      	str	r3, [r2, #88]	; 0x58
 800386c:	4b22      	ldr	r3, [pc, #136]	; (80038f8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800386e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003870:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003874:	60fb      	str	r3, [r7, #12]
 8003876:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003878:	f7ff f9a6 	bl	8002bc8 <HAL_PWREx_GetVoltageRange>
 800387c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800387e:	4b1e      	ldr	r3, [pc, #120]	; (80038f8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003880:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003882:	4a1d      	ldr	r2, [pc, #116]	; (80038f8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003884:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003888:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800388a:	697b      	ldr	r3, [r7, #20]
 800388c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003890:	d10b      	bne.n	80038aa <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	2b80      	cmp	r3, #128	; 0x80
 8003896:	d919      	bls.n	80038cc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	2ba0      	cmp	r3, #160	; 0xa0
 800389c:	d902      	bls.n	80038a4 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800389e:	2302      	movs	r3, #2
 80038a0:	613b      	str	r3, [r7, #16]
 80038a2:	e013      	b.n	80038cc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80038a4:	2301      	movs	r3, #1
 80038a6:	613b      	str	r3, [r7, #16]
 80038a8:	e010      	b.n	80038cc <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	2b80      	cmp	r3, #128	; 0x80
 80038ae:	d902      	bls.n	80038b6 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80038b0:	2303      	movs	r3, #3
 80038b2:	613b      	str	r3, [r7, #16]
 80038b4:	e00a      	b.n	80038cc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	2b80      	cmp	r3, #128	; 0x80
 80038ba:	d102      	bne.n	80038c2 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80038bc:	2302      	movs	r3, #2
 80038be:	613b      	str	r3, [r7, #16]
 80038c0:	e004      	b.n	80038cc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	2b70      	cmp	r3, #112	; 0x70
 80038c6:	d101      	bne.n	80038cc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80038c8:	2301      	movs	r3, #1
 80038ca:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80038cc:	4b0b      	ldr	r3, [pc, #44]	; (80038fc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	f023 0207 	bic.w	r2, r3, #7
 80038d4:	4909      	ldr	r1, [pc, #36]	; (80038fc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80038d6:	693b      	ldr	r3, [r7, #16]
 80038d8:	4313      	orrs	r3, r2
 80038da:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80038dc:	4b07      	ldr	r3, [pc, #28]	; (80038fc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	f003 0307 	and.w	r3, r3, #7
 80038e4:	693a      	ldr	r2, [r7, #16]
 80038e6:	429a      	cmp	r2, r3
 80038e8:	d001      	beq.n	80038ee <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80038ea:	2301      	movs	r3, #1
 80038ec:	e000      	b.n	80038f0 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80038ee:	2300      	movs	r3, #0
}
 80038f0:	4618      	mov	r0, r3
 80038f2:	3718      	adds	r7, #24
 80038f4:	46bd      	mov	sp, r7
 80038f6:	bd80      	pop	{r7, pc}
 80038f8:	40021000 	.word	0x40021000
 80038fc:	40022000 	.word	0x40022000

08003900 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003900:	b580      	push	{r7, lr}
 8003902:	b086      	sub	sp, #24
 8003904:	af00      	add	r7, sp, #0
 8003906:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003908:	2300      	movs	r3, #0
 800390a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800390c:	2300      	movs	r3, #0
 800390e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003918:	2b00      	cmp	r3, #0
 800391a:	d031      	beq.n	8003980 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003920:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003924:	d01a      	beq.n	800395c <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8003926:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800392a:	d814      	bhi.n	8003956 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800392c:	2b00      	cmp	r3, #0
 800392e:	d009      	beq.n	8003944 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003930:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003934:	d10f      	bne.n	8003956 <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8003936:	4b5d      	ldr	r3, [pc, #372]	; (8003aac <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003938:	68db      	ldr	r3, [r3, #12]
 800393a:	4a5c      	ldr	r2, [pc, #368]	; (8003aac <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800393c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003940:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003942:	e00c      	b.n	800395e <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	3304      	adds	r3, #4
 8003948:	2100      	movs	r1, #0
 800394a:	4618      	mov	r0, r3
 800394c:	f000 f9de 	bl	8003d0c <RCCEx_PLLSAI1_Config>
 8003950:	4603      	mov	r3, r0
 8003952:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003954:	e003      	b.n	800395e <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003956:	2301      	movs	r3, #1
 8003958:	74fb      	strb	r3, [r7, #19]
      break;
 800395a:	e000      	b.n	800395e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 800395c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800395e:	7cfb      	ldrb	r3, [r7, #19]
 8003960:	2b00      	cmp	r3, #0
 8003962:	d10b      	bne.n	800397c <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003964:	4b51      	ldr	r3, [pc, #324]	; (8003aac <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003966:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800396a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003972:	494e      	ldr	r1, [pc, #312]	; (8003aac <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003974:	4313      	orrs	r3, r2
 8003976:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800397a:	e001      	b.n	8003980 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800397c:	7cfb      	ldrb	r3, [r7, #19]
 800397e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003988:	2b00      	cmp	r3, #0
 800398a:	f000 809e 	beq.w	8003aca <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 800398e:	2300      	movs	r3, #0
 8003990:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003992:	4b46      	ldr	r3, [pc, #280]	; (8003aac <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003994:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003996:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800399a:	2b00      	cmp	r3, #0
 800399c:	d101      	bne.n	80039a2 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 800399e:	2301      	movs	r3, #1
 80039a0:	e000      	b.n	80039a4 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 80039a2:	2300      	movs	r3, #0
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d00d      	beq.n	80039c4 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80039a8:	4b40      	ldr	r3, [pc, #256]	; (8003aac <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80039aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039ac:	4a3f      	ldr	r2, [pc, #252]	; (8003aac <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80039ae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80039b2:	6593      	str	r3, [r2, #88]	; 0x58
 80039b4:	4b3d      	ldr	r3, [pc, #244]	; (8003aac <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80039b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80039bc:	60bb      	str	r3, [r7, #8]
 80039be:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80039c0:	2301      	movs	r3, #1
 80039c2:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80039c4:	4b3a      	ldr	r3, [pc, #232]	; (8003ab0 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	4a39      	ldr	r2, [pc, #228]	; (8003ab0 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80039ca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80039ce:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80039d0:	f7fe fe3a 	bl	8002648 <HAL_GetTick>
 80039d4:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80039d6:	e009      	b.n	80039ec <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80039d8:	f7fe fe36 	bl	8002648 <HAL_GetTick>
 80039dc:	4602      	mov	r2, r0
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	1ad3      	subs	r3, r2, r3
 80039e2:	2b02      	cmp	r3, #2
 80039e4:	d902      	bls.n	80039ec <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 80039e6:	2303      	movs	r3, #3
 80039e8:	74fb      	strb	r3, [r7, #19]
        break;
 80039ea:	e005      	b.n	80039f8 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80039ec:	4b30      	ldr	r3, [pc, #192]	; (8003ab0 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d0ef      	beq.n	80039d8 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 80039f8:	7cfb      	ldrb	r3, [r7, #19]
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d15a      	bne.n	8003ab4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80039fe:	4b2b      	ldr	r3, [pc, #172]	; (8003aac <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003a00:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a04:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003a08:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003a0a:	697b      	ldr	r3, [r7, #20]
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d01e      	beq.n	8003a4e <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a14:	697a      	ldr	r2, [r7, #20]
 8003a16:	429a      	cmp	r2, r3
 8003a18:	d019      	beq.n	8003a4e <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003a1a:	4b24      	ldr	r3, [pc, #144]	; (8003aac <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003a1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a20:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003a24:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003a26:	4b21      	ldr	r3, [pc, #132]	; (8003aac <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003a28:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a2c:	4a1f      	ldr	r2, [pc, #124]	; (8003aac <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003a2e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a32:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003a36:	4b1d      	ldr	r3, [pc, #116]	; (8003aac <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003a38:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a3c:	4a1b      	ldr	r2, [pc, #108]	; (8003aac <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003a3e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003a42:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003a46:	4a19      	ldr	r2, [pc, #100]	; (8003aac <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003a48:	697b      	ldr	r3, [r7, #20]
 8003a4a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003a4e:	697b      	ldr	r3, [r7, #20]
 8003a50:	f003 0301 	and.w	r3, r3, #1
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d016      	beq.n	8003a86 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a58:	f7fe fdf6 	bl	8002648 <HAL_GetTick>
 8003a5c:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003a5e:	e00b      	b.n	8003a78 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003a60:	f7fe fdf2 	bl	8002648 <HAL_GetTick>
 8003a64:	4602      	mov	r2, r0
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	1ad3      	subs	r3, r2, r3
 8003a6a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a6e:	4293      	cmp	r3, r2
 8003a70:	d902      	bls.n	8003a78 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8003a72:	2303      	movs	r3, #3
 8003a74:	74fb      	strb	r3, [r7, #19]
            break;
 8003a76:	e006      	b.n	8003a86 <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003a78:	4b0c      	ldr	r3, [pc, #48]	; (8003aac <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003a7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a7e:	f003 0302 	and.w	r3, r3, #2
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d0ec      	beq.n	8003a60 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8003a86:	7cfb      	ldrb	r3, [r7, #19]
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d10b      	bne.n	8003aa4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003a8c:	4b07      	ldr	r3, [pc, #28]	; (8003aac <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003a8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a92:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a9a:	4904      	ldr	r1, [pc, #16]	; (8003aac <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003a9c:	4313      	orrs	r3, r2
 8003a9e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003aa2:	e009      	b.n	8003ab8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003aa4:	7cfb      	ldrb	r3, [r7, #19]
 8003aa6:	74bb      	strb	r3, [r7, #18]
 8003aa8:	e006      	b.n	8003ab8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8003aaa:	bf00      	nop
 8003aac:	40021000 	.word	0x40021000
 8003ab0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ab4:	7cfb      	ldrb	r3, [r7, #19]
 8003ab6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003ab8:	7c7b      	ldrb	r3, [r7, #17]
 8003aba:	2b01      	cmp	r3, #1
 8003abc:	d105      	bne.n	8003aca <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003abe:	4b8a      	ldr	r3, [pc, #552]	; (8003ce8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003ac0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ac2:	4a89      	ldr	r2, [pc, #548]	; (8003ce8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003ac4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003ac8:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	f003 0301 	and.w	r3, r3, #1
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d00a      	beq.n	8003aec <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003ad6:	4b84      	ldr	r3, [pc, #528]	; (8003ce8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003ad8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003adc:	f023 0203 	bic.w	r2, r3, #3
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	6a1b      	ldr	r3, [r3, #32]
 8003ae4:	4980      	ldr	r1, [pc, #512]	; (8003ce8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003ae6:	4313      	orrs	r3, r2
 8003ae8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	f003 0302 	and.w	r3, r3, #2
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d00a      	beq.n	8003b0e <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003af8:	4b7b      	ldr	r3, [pc, #492]	; (8003ce8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003afa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003afe:	f023 020c 	bic.w	r2, r3, #12
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b06:	4978      	ldr	r1, [pc, #480]	; (8003ce8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003b08:	4313      	orrs	r3, r2
 8003b0a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	f003 0320 	and.w	r3, r3, #32
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d00a      	beq.n	8003b30 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003b1a:	4b73      	ldr	r3, [pc, #460]	; (8003ce8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003b1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b20:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b28:	496f      	ldr	r1, [pc, #444]	; (8003ce8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003b2a:	4313      	orrs	r3, r2
 8003b2c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d00a      	beq.n	8003b52 <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003b3c:	4b6a      	ldr	r3, [pc, #424]	; (8003ce8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003b3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b42:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b4a:	4967      	ldr	r1, [pc, #412]	; (8003ce8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003b4c:	4313      	orrs	r3, r2
 8003b4e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d00a      	beq.n	8003b74 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003b5e:	4b62      	ldr	r3, [pc, #392]	; (8003ce8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003b60:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b64:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b6c:	495e      	ldr	r1, [pc, #376]	; (8003ce8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003b6e:	4313      	orrs	r3, r2
 8003b70:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d00a      	beq.n	8003b96 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003b80:	4b59      	ldr	r3, [pc, #356]	; (8003ce8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003b82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b86:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b8e:	4956      	ldr	r1, [pc, #344]	; (8003ce8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003b90:	4313      	orrs	r3, r2
 8003b92:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d00a      	beq.n	8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003ba2:	4b51      	ldr	r3, [pc, #324]	; (8003ce8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003ba4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ba8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bb0:	494d      	ldr	r1, [pc, #308]	; (8003ce8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003bb2:	4313      	orrs	r3, r2
 8003bb4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d028      	beq.n	8003c16 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003bc4:	4b48      	ldr	r3, [pc, #288]	; (8003ce8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003bc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003bca:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bd2:	4945      	ldr	r1, [pc, #276]	; (8003ce8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003bd4:	4313      	orrs	r3, r2
 8003bd6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bde:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003be2:	d106      	bne.n	8003bf2 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003be4:	4b40      	ldr	r3, [pc, #256]	; (8003ce8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003be6:	68db      	ldr	r3, [r3, #12]
 8003be8:	4a3f      	ldr	r2, [pc, #252]	; (8003ce8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003bea:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003bee:	60d3      	str	r3, [r2, #12]
 8003bf0:	e011      	b.n	8003c16 <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bf6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003bfa:	d10c      	bne.n	8003c16 <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	3304      	adds	r3, #4
 8003c00:	2101      	movs	r1, #1
 8003c02:	4618      	mov	r0, r3
 8003c04:	f000 f882 	bl	8003d0c <RCCEx_PLLSAI1_Config>
 8003c08:	4603      	mov	r3, r0
 8003c0a:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003c0c:	7cfb      	ldrb	r3, [r7, #19]
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d001      	beq.n	8003c16 <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 8003c12:	7cfb      	ldrb	r3, [r7, #19]
 8003c14:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d028      	beq.n	8003c74 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003c22:	4b31      	ldr	r3, [pc, #196]	; (8003ce8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003c24:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c28:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c30:	492d      	ldr	r1, [pc, #180]	; (8003ce8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003c32:	4313      	orrs	r3, r2
 8003c34:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c3c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003c40:	d106      	bne.n	8003c50 <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003c42:	4b29      	ldr	r3, [pc, #164]	; (8003ce8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003c44:	68db      	ldr	r3, [r3, #12]
 8003c46:	4a28      	ldr	r2, [pc, #160]	; (8003ce8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003c48:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003c4c:	60d3      	str	r3, [r2, #12]
 8003c4e:	e011      	b.n	8003c74 <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c54:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003c58:	d10c      	bne.n	8003c74 <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	3304      	adds	r3, #4
 8003c5e:	2101      	movs	r1, #1
 8003c60:	4618      	mov	r0, r3
 8003c62:	f000 f853 	bl	8003d0c <RCCEx_PLLSAI1_Config>
 8003c66:	4603      	mov	r3, r0
 8003c68:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003c6a:	7cfb      	ldrb	r3, [r7, #19]
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d001      	beq.n	8003c74 <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 8003c70:	7cfb      	ldrb	r3, [r7, #19]
 8003c72:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d01c      	beq.n	8003cba <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003c80:	4b19      	ldr	r3, [pc, #100]	; (8003ce8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003c82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c86:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003c8e:	4916      	ldr	r1, [pc, #88]	; (8003ce8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003c90:	4313      	orrs	r3, r2
 8003c92:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003c9a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003c9e:	d10c      	bne.n	8003cba <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	3304      	adds	r3, #4
 8003ca4:	2102      	movs	r1, #2
 8003ca6:	4618      	mov	r0, r3
 8003ca8:	f000 f830 	bl	8003d0c <RCCEx_PLLSAI1_Config>
 8003cac:	4603      	mov	r3, r0
 8003cae:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003cb0:	7cfb      	ldrb	r3, [r7, #19]
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d001      	beq.n	8003cba <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 8003cb6:	7cfb      	ldrb	r3, [r7, #19]
 8003cb8:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d00a      	beq.n	8003cdc <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003cc6:	4b08      	ldr	r3, [pc, #32]	; (8003ce8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003cc8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ccc:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003cd4:	4904      	ldr	r1, [pc, #16]	; (8003ce8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003cd6:	4313      	orrs	r3, r2
 8003cd8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003cdc:	7cbb      	ldrb	r3, [r7, #18]
}
 8003cde:	4618      	mov	r0, r3
 8003ce0:	3718      	adds	r7, #24
 8003ce2:	46bd      	mov	sp, r7
 8003ce4:	bd80      	pop	{r7, pc}
 8003ce6:	bf00      	nop
 8003ce8:	40021000 	.word	0x40021000

08003cec <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8003cec:	b480      	push	{r7}
 8003cee:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8003cf0:	4b05      	ldr	r3, [pc, #20]	; (8003d08 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	4a04      	ldr	r2, [pc, #16]	; (8003d08 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8003cf6:	f043 0304 	orr.w	r3, r3, #4
 8003cfa:	6013      	str	r3, [r2, #0]
}
 8003cfc:	bf00      	nop
 8003cfe:	46bd      	mov	sp, r7
 8003d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d04:	4770      	bx	lr
 8003d06:	bf00      	nop
 8003d08:	40021000 	.word	0x40021000

08003d0c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003d0c:	b580      	push	{r7, lr}
 8003d0e:	b084      	sub	sp, #16
 8003d10:	af00      	add	r7, sp, #0
 8003d12:	6078      	str	r0, [r7, #4]
 8003d14:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003d16:	2300      	movs	r3, #0
 8003d18:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003d1a:	4b74      	ldr	r3, [pc, #464]	; (8003eec <RCCEx_PLLSAI1_Config+0x1e0>)
 8003d1c:	68db      	ldr	r3, [r3, #12]
 8003d1e:	f003 0303 	and.w	r3, r3, #3
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d018      	beq.n	8003d58 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003d26:	4b71      	ldr	r3, [pc, #452]	; (8003eec <RCCEx_PLLSAI1_Config+0x1e0>)
 8003d28:	68db      	ldr	r3, [r3, #12]
 8003d2a:	f003 0203 	and.w	r2, r3, #3
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	429a      	cmp	r2, r3
 8003d34:	d10d      	bne.n	8003d52 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
       ||
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d009      	beq.n	8003d52 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8003d3e:	4b6b      	ldr	r3, [pc, #428]	; (8003eec <RCCEx_PLLSAI1_Config+0x1e0>)
 8003d40:	68db      	ldr	r3, [r3, #12]
 8003d42:	091b      	lsrs	r3, r3, #4
 8003d44:	f003 0307 	and.w	r3, r3, #7
 8003d48:	1c5a      	adds	r2, r3, #1
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	685b      	ldr	r3, [r3, #4]
       ||
 8003d4e:	429a      	cmp	r2, r3
 8003d50:	d047      	beq.n	8003de2 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003d52:	2301      	movs	r3, #1
 8003d54:	73fb      	strb	r3, [r7, #15]
 8003d56:	e044      	b.n	8003de2 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	2b03      	cmp	r3, #3
 8003d5e:	d018      	beq.n	8003d92 <RCCEx_PLLSAI1_Config+0x86>
 8003d60:	2b03      	cmp	r3, #3
 8003d62:	d825      	bhi.n	8003db0 <RCCEx_PLLSAI1_Config+0xa4>
 8003d64:	2b01      	cmp	r3, #1
 8003d66:	d002      	beq.n	8003d6e <RCCEx_PLLSAI1_Config+0x62>
 8003d68:	2b02      	cmp	r3, #2
 8003d6a:	d009      	beq.n	8003d80 <RCCEx_PLLSAI1_Config+0x74>
 8003d6c:	e020      	b.n	8003db0 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003d6e:	4b5f      	ldr	r3, [pc, #380]	; (8003eec <RCCEx_PLLSAI1_Config+0x1e0>)
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	f003 0302 	and.w	r3, r3, #2
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d11d      	bne.n	8003db6 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8003d7a:	2301      	movs	r3, #1
 8003d7c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003d7e:	e01a      	b.n	8003db6 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003d80:	4b5a      	ldr	r3, [pc, #360]	; (8003eec <RCCEx_PLLSAI1_Config+0x1e0>)
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d116      	bne.n	8003dba <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8003d8c:	2301      	movs	r3, #1
 8003d8e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003d90:	e013      	b.n	8003dba <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003d92:	4b56      	ldr	r3, [pc, #344]	; (8003eec <RCCEx_PLLSAI1_Config+0x1e0>)
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d10f      	bne.n	8003dbe <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003d9e:	4b53      	ldr	r3, [pc, #332]	; (8003eec <RCCEx_PLLSAI1_Config+0x1e0>)
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d109      	bne.n	8003dbe <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8003daa:	2301      	movs	r3, #1
 8003dac:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003dae:	e006      	b.n	8003dbe <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003db0:	2301      	movs	r3, #1
 8003db2:	73fb      	strb	r3, [r7, #15]
      break;
 8003db4:	e004      	b.n	8003dc0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003db6:	bf00      	nop
 8003db8:	e002      	b.n	8003dc0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003dba:	bf00      	nop
 8003dbc:	e000      	b.n	8003dc0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003dbe:	bf00      	nop
    }

    if(status == HAL_OK)
 8003dc0:	7bfb      	ldrb	r3, [r7, #15]
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d10d      	bne.n	8003de2 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003dc6:	4b49      	ldr	r3, [pc, #292]	; (8003eec <RCCEx_PLLSAI1_Config+0x1e0>)
 8003dc8:	68db      	ldr	r3, [r3, #12]
 8003dca:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	6819      	ldr	r1, [r3, #0]
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	685b      	ldr	r3, [r3, #4]
 8003dd6:	3b01      	subs	r3, #1
 8003dd8:	011b      	lsls	r3, r3, #4
 8003dda:	430b      	orrs	r3, r1
 8003ddc:	4943      	ldr	r1, [pc, #268]	; (8003eec <RCCEx_PLLSAI1_Config+0x1e0>)
 8003dde:	4313      	orrs	r3, r2
 8003de0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003de2:	7bfb      	ldrb	r3, [r7, #15]
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d17c      	bne.n	8003ee2 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003de8:	4b40      	ldr	r3, [pc, #256]	; (8003eec <RCCEx_PLLSAI1_Config+0x1e0>)
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	4a3f      	ldr	r2, [pc, #252]	; (8003eec <RCCEx_PLLSAI1_Config+0x1e0>)
 8003dee:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003df2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003df4:	f7fe fc28 	bl	8002648 <HAL_GetTick>
 8003df8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003dfa:	e009      	b.n	8003e10 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003dfc:	f7fe fc24 	bl	8002648 <HAL_GetTick>
 8003e00:	4602      	mov	r2, r0
 8003e02:	68bb      	ldr	r3, [r7, #8]
 8003e04:	1ad3      	subs	r3, r2, r3
 8003e06:	2b02      	cmp	r3, #2
 8003e08:	d902      	bls.n	8003e10 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003e0a:	2303      	movs	r3, #3
 8003e0c:	73fb      	strb	r3, [r7, #15]
        break;
 8003e0e:	e005      	b.n	8003e1c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003e10:	4b36      	ldr	r3, [pc, #216]	; (8003eec <RCCEx_PLLSAI1_Config+0x1e0>)
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d1ef      	bne.n	8003dfc <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003e1c:	7bfb      	ldrb	r3, [r7, #15]
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d15f      	bne.n	8003ee2 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003e22:	683b      	ldr	r3, [r7, #0]
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d110      	bne.n	8003e4a <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003e28:	4b30      	ldr	r3, [pc, #192]	; (8003eec <RCCEx_PLLSAI1_Config+0x1e0>)
 8003e2a:	691b      	ldr	r3, [r3, #16]
 8003e2c:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8003e30:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003e34:	687a      	ldr	r2, [r7, #4]
 8003e36:	6892      	ldr	r2, [r2, #8]
 8003e38:	0211      	lsls	r1, r2, #8
 8003e3a:	687a      	ldr	r2, [r7, #4]
 8003e3c:	68d2      	ldr	r2, [r2, #12]
 8003e3e:	06d2      	lsls	r2, r2, #27
 8003e40:	430a      	orrs	r2, r1
 8003e42:	492a      	ldr	r1, [pc, #168]	; (8003eec <RCCEx_PLLSAI1_Config+0x1e0>)
 8003e44:	4313      	orrs	r3, r2
 8003e46:	610b      	str	r3, [r1, #16]
 8003e48:	e027      	b.n	8003e9a <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003e4a:	683b      	ldr	r3, [r7, #0]
 8003e4c:	2b01      	cmp	r3, #1
 8003e4e:	d112      	bne.n	8003e76 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003e50:	4b26      	ldr	r3, [pc, #152]	; (8003eec <RCCEx_PLLSAI1_Config+0x1e0>)
 8003e52:	691b      	ldr	r3, [r3, #16]
 8003e54:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8003e58:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003e5c:	687a      	ldr	r2, [r7, #4]
 8003e5e:	6892      	ldr	r2, [r2, #8]
 8003e60:	0211      	lsls	r1, r2, #8
 8003e62:	687a      	ldr	r2, [r7, #4]
 8003e64:	6912      	ldr	r2, [r2, #16]
 8003e66:	0852      	lsrs	r2, r2, #1
 8003e68:	3a01      	subs	r2, #1
 8003e6a:	0552      	lsls	r2, r2, #21
 8003e6c:	430a      	orrs	r2, r1
 8003e6e:	491f      	ldr	r1, [pc, #124]	; (8003eec <RCCEx_PLLSAI1_Config+0x1e0>)
 8003e70:	4313      	orrs	r3, r2
 8003e72:	610b      	str	r3, [r1, #16]
 8003e74:	e011      	b.n	8003e9a <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003e76:	4b1d      	ldr	r3, [pc, #116]	; (8003eec <RCCEx_PLLSAI1_Config+0x1e0>)
 8003e78:	691b      	ldr	r3, [r3, #16]
 8003e7a:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003e7e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003e82:	687a      	ldr	r2, [r7, #4]
 8003e84:	6892      	ldr	r2, [r2, #8]
 8003e86:	0211      	lsls	r1, r2, #8
 8003e88:	687a      	ldr	r2, [r7, #4]
 8003e8a:	6952      	ldr	r2, [r2, #20]
 8003e8c:	0852      	lsrs	r2, r2, #1
 8003e8e:	3a01      	subs	r2, #1
 8003e90:	0652      	lsls	r2, r2, #25
 8003e92:	430a      	orrs	r2, r1
 8003e94:	4915      	ldr	r1, [pc, #84]	; (8003eec <RCCEx_PLLSAI1_Config+0x1e0>)
 8003e96:	4313      	orrs	r3, r2
 8003e98:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003e9a:	4b14      	ldr	r3, [pc, #80]	; (8003eec <RCCEx_PLLSAI1_Config+0x1e0>)
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	4a13      	ldr	r2, [pc, #76]	; (8003eec <RCCEx_PLLSAI1_Config+0x1e0>)
 8003ea0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003ea4:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ea6:	f7fe fbcf 	bl	8002648 <HAL_GetTick>
 8003eaa:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003eac:	e009      	b.n	8003ec2 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003eae:	f7fe fbcb 	bl	8002648 <HAL_GetTick>
 8003eb2:	4602      	mov	r2, r0
 8003eb4:	68bb      	ldr	r3, [r7, #8]
 8003eb6:	1ad3      	subs	r3, r2, r3
 8003eb8:	2b02      	cmp	r3, #2
 8003eba:	d902      	bls.n	8003ec2 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8003ebc:	2303      	movs	r3, #3
 8003ebe:	73fb      	strb	r3, [r7, #15]
          break;
 8003ec0:	e005      	b.n	8003ece <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003ec2:	4b0a      	ldr	r3, [pc, #40]	; (8003eec <RCCEx_PLLSAI1_Config+0x1e0>)
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d0ef      	beq.n	8003eae <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8003ece:	7bfb      	ldrb	r3, [r7, #15]
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d106      	bne.n	8003ee2 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003ed4:	4b05      	ldr	r3, [pc, #20]	; (8003eec <RCCEx_PLLSAI1_Config+0x1e0>)
 8003ed6:	691a      	ldr	r2, [r3, #16]
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	699b      	ldr	r3, [r3, #24]
 8003edc:	4903      	ldr	r1, [pc, #12]	; (8003eec <RCCEx_PLLSAI1_Config+0x1e0>)
 8003ede:	4313      	orrs	r3, r2
 8003ee0:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003ee2:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ee4:	4618      	mov	r0, r3
 8003ee6:	3710      	adds	r7, #16
 8003ee8:	46bd      	mov	sp, r7
 8003eea:	bd80      	pop	{r7, pc}
 8003eec:	40021000 	.word	0x40021000

08003ef0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003ef0:	b580      	push	{r7, lr}
 8003ef2:	b084      	sub	sp, #16
 8003ef4:	af00      	add	r7, sp, #0
 8003ef6:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d101      	bne.n	8003f02 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003efe:	2301      	movs	r3, #1
 8003f00:	e095      	b.n	800402e <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d108      	bne.n	8003f1c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	685b      	ldr	r3, [r3, #4]
 8003f0e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003f12:	d009      	beq.n	8003f28 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	2200      	movs	r2, #0
 8003f18:	61da      	str	r2, [r3, #28]
 8003f1a:	e005      	b.n	8003f28 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	2200      	movs	r2, #0
 8003f20:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	2200      	movs	r2, #0
 8003f26:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	2200      	movs	r2, #0
 8003f2c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003f34:	b2db      	uxtb	r3, r3
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d106      	bne.n	8003f48 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	2200      	movs	r2, #0
 8003f3e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003f42:	6878      	ldr	r0, [r7, #4]
 8003f44:	f7fe f8da 	bl	80020fc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	2202      	movs	r2, #2
 8003f4c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	681a      	ldr	r2, [r3, #0]
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003f5e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	68db      	ldr	r3, [r3, #12]
 8003f64:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003f68:	d902      	bls.n	8003f70 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003f6a:	2300      	movs	r3, #0
 8003f6c:	60fb      	str	r3, [r7, #12]
 8003f6e:	e002      	b.n	8003f76 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003f70:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003f74:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	68db      	ldr	r3, [r3, #12]
 8003f7a:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8003f7e:	d007      	beq.n	8003f90 <HAL_SPI_Init+0xa0>
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	68db      	ldr	r3, [r3, #12]
 8003f84:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003f88:	d002      	beq.n	8003f90 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	2200      	movs	r2, #0
 8003f8e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	685b      	ldr	r3, [r3, #4]
 8003f94:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	689b      	ldr	r3, [r3, #8]
 8003f9c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003fa0:	431a      	orrs	r2, r3
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	691b      	ldr	r3, [r3, #16]
 8003fa6:	f003 0302 	and.w	r3, r3, #2
 8003faa:	431a      	orrs	r2, r3
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	695b      	ldr	r3, [r3, #20]
 8003fb0:	f003 0301 	and.w	r3, r3, #1
 8003fb4:	431a      	orrs	r2, r3
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	699b      	ldr	r3, [r3, #24]
 8003fba:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003fbe:	431a      	orrs	r2, r3
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	69db      	ldr	r3, [r3, #28]
 8003fc4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003fc8:	431a      	orrs	r2, r3
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	6a1b      	ldr	r3, [r3, #32]
 8003fce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003fd2:	ea42 0103 	orr.w	r1, r2, r3
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fda:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	430a      	orrs	r2, r1
 8003fe4:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	699b      	ldr	r3, [r3, #24]
 8003fea:	0c1b      	lsrs	r3, r3, #16
 8003fec:	f003 0204 	and.w	r2, r3, #4
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ff4:	f003 0310 	and.w	r3, r3, #16
 8003ff8:	431a      	orrs	r2, r3
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ffe:	f003 0308 	and.w	r3, r3, #8
 8004002:	431a      	orrs	r2, r3
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	68db      	ldr	r3, [r3, #12]
 8004008:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800400c:	ea42 0103 	orr.w	r1, r2, r3
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	430a      	orrs	r2, r1
 800401c:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	2200      	movs	r2, #0
 8004022:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	2201      	movs	r2, #1
 8004028:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800402c:	2300      	movs	r3, #0
}
 800402e:	4618      	mov	r0, r3
 8004030:	3710      	adds	r7, #16
 8004032:	46bd      	mov	sp, r7
 8004034:	bd80      	pop	{r7, pc}

08004036 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004036:	b580      	push	{r7, lr}
 8004038:	b088      	sub	sp, #32
 800403a:	af00      	add	r7, sp, #0
 800403c:	60f8      	str	r0, [r7, #12]
 800403e:	60b9      	str	r1, [r7, #8]
 8004040:	603b      	str	r3, [r7, #0]
 8004042:	4613      	mov	r3, r2
 8004044:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004046:	2300      	movs	r3, #0
 8004048:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004050:	2b01      	cmp	r3, #1
 8004052:	d101      	bne.n	8004058 <HAL_SPI_Transmit+0x22>
 8004054:	2302      	movs	r3, #2
 8004056:	e158      	b.n	800430a <HAL_SPI_Transmit+0x2d4>
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	2201      	movs	r2, #1
 800405c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004060:	f7fe faf2 	bl	8002648 <HAL_GetTick>
 8004064:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8004066:	88fb      	ldrh	r3, [r7, #6]
 8004068:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004070:	b2db      	uxtb	r3, r3
 8004072:	2b01      	cmp	r3, #1
 8004074:	d002      	beq.n	800407c <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8004076:	2302      	movs	r3, #2
 8004078:	77fb      	strb	r3, [r7, #31]
    goto error;
 800407a:	e13d      	b.n	80042f8 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 800407c:	68bb      	ldr	r3, [r7, #8]
 800407e:	2b00      	cmp	r3, #0
 8004080:	d002      	beq.n	8004088 <HAL_SPI_Transmit+0x52>
 8004082:	88fb      	ldrh	r3, [r7, #6]
 8004084:	2b00      	cmp	r3, #0
 8004086:	d102      	bne.n	800408e <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8004088:	2301      	movs	r3, #1
 800408a:	77fb      	strb	r3, [r7, #31]
    goto error;
 800408c:	e134      	b.n	80042f8 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	2203      	movs	r2, #3
 8004092:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	2200      	movs	r2, #0
 800409a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	68ba      	ldr	r2, [r7, #8]
 80040a0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	88fa      	ldrh	r2, [r7, #6]
 80040a6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	88fa      	ldrh	r2, [r7, #6]
 80040ac:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	2200      	movs	r2, #0
 80040b2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	2200      	movs	r2, #0
 80040b8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	2200      	movs	r2, #0
 80040c0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	2200      	movs	r2, #0
 80040c8:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	2200      	movs	r2, #0
 80040ce:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	689b      	ldr	r3, [r3, #8]
 80040d4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80040d8:	d10f      	bne.n	80040fa <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	681a      	ldr	r2, [r3, #0]
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80040e8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	681a      	ldr	r2, [r3, #0]
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80040f8:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004104:	2b40      	cmp	r3, #64	; 0x40
 8004106:	d007      	beq.n	8004118 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	681a      	ldr	r2, [r3, #0]
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004116:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	68db      	ldr	r3, [r3, #12]
 800411c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004120:	d94b      	bls.n	80041ba <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	685b      	ldr	r3, [r3, #4]
 8004126:	2b00      	cmp	r3, #0
 8004128:	d002      	beq.n	8004130 <HAL_SPI_Transmit+0xfa>
 800412a:	8afb      	ldrh	r3, [r7, #22]
 800412c:	2b01      	cmp	r3, #1
 800412e:	d13e      	bne.n	80041ae <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004134:	881a      	ldrh	r2, [r3, #0]
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004140:	1c9a      	adds	r2, r3, #2
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800414a:	b29b      	uxth	r3, r3
 800414c:	3b01      	subs	r3, #1
 800414e:	b29a      	uxth	r2, r3
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004154:	e02b      	b.n	80041ae <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	689b      	ldr	r3, [r3, #8]
 800415c:	f003 0302 	and.w	r3, r3, #2
 8004160:	2b02      	cmp	r3, #2
 8004162:	d112      	bne.n	800418a <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004168:	881a      	ldrh	r2, [r3, #0]
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004174:	1c9a      	adds	r2, r3, #2
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800417e:	b29b      	uxth	r3, r3
 8004180:	3b01      	subs	r3, #1
 8004182:	b29a      	uxth	r2, r3
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004188:	e011      	b.n	80041ae <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800418a:	f7fe fa5d 	bl	8002648 <HAL_GetTick>
 800418e:	4602      	mov	r2, r0
 8004190:	69bb      	ldr	r3, [r7, #24]
 8004192:	1ad3      	subs	r3, r2, r3
 8004194:	683a      	ldr	r2, [r7, #0]
 8004196:	429a      	cmp	r2, r3
 8004198:	d803      	bhi.n	80041a2 <HAL_SPI_Transmit+0x16c>
 800419a:	683b      	ldr	r3, [r7, #0]
 800419c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041a0:	d102      	bne.n	80041a8 <HAL_SPI_Transmit+0x172>
 80041a2:	683b      	ldr	r3, [r7, #0]
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d102      	bne.n	80041ae <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 80041a8:	2303      	movs	r3, #3
 80041aa:	77fb      	strb	r3, [r7, #31]
          goto error;
 80041ac:	e0a4      	b.n	80042f8 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80041b2:	b29b      	uxth	r3, r3
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d1ce      	bne.n	8004156 <HAL_SPI_Transmit+0x120>
 80041b8:	e07c      	b.n	80042b4 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	685b      	ldr	r3, [r3, #4]
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d002      	beq.n	80041c8 <HAL_SPI_Transmit+0x192>
 80041c2:	8afb      	ldrh	r3, [r7, #22]
 80041c4:	2b01      	cmp	r3, #1
 80041c6:	d170      	bne.n	80042aa <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80041cc:	b29b      	uxth	r3, r3
 80041ce:	2b01      	cmp	r3, #1
 80041d0:	d912      	bls.n	80041f8 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041d6:	881a      	ldrh	r2, [r3, #0]
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041e2:	1c9a      	adds	r2, r3, #2
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80041ec:	b29b      	uxth	r3, r3
 80041ee:	3b02      	subs	r3, #2
 80041f0:	b29a      	uxth	r2, r3
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	87da      	strh	r2, [r3, #62]	; 0x3e
 80041f6:	e058      	b.n	80042aa <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	330c      	adds	r3, #12
 8004202:	7812      	ldrb	r2, [r2, #0]
 8004204:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800420a:	1c5a      	adds	r2, r3, #1
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004214:	b29b      	uxth	r3, r3
 8004216:	3b01      	subs	r3, #1
 8004218:	b29a      	uxth	r2, r3
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 800421e:	e044      	b.n	80042aa <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	689b      	ldr	r3, [r3, #8]
 8004226:	f003 0302 	and.w	r3, r3, #2
 800422a:	2b02      	cmp	r3, #2
 800422c:	d12b      	bne.n	8004286 <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004232:	b29b      	uxth	r3, r3
 8004234:	2b01      	cmp	r3, #1
 8004236:	d912      	bls.n	800425e <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800423c:	881a      	ldrh	r2, [r3, #0]
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004248:	1c9a      	adds	r2, r3, #2
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004252:	b29b      	uxth	r3, r3
 8004254:	3b02      	subs	r3, #2
 8004256:	b29a      	uxth	r2, r3
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800425c:	e025      	b.n	80042aa <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	330c      	adds	r3, #12
 8004268:	7812      	ldrb	r2, [r2, #0]
 800426a:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004270:	1c5a      	adds	r2, r3, #1
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800427a:	b29b      	uxth	r3, r3
 800427c:	3b01      	subs	r3, #1
 800427e:	b29a      	uxth	r2, r3
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004284:	e011      	b.n	80042aa <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004286:	f7fe f9df 	bl	8002648 <HAL_GetTick>
 800428a:	4602      	mov	r2, r0
 800428c:	69bb      	ldr	r3, [r7, #24]
 800428e:	1ad3      	subs	r3, r2, r3
 8004290:	683a      	ldr	r2, [r7, #0]
 8004292:	429a      	cmp	r2, r3
 8004294:	d803      	bhi.n	800429e <HAL_SPI_Transmit+0x268>
 8004296:	683b      	ldr	r3, [r7, #0]
 8004298:	f1b3 3fff 	cmp.w	r3, #4294967295
 800429c:	d102      	bne.n	80042a4 <HAL_SPI_Transmit+0x26e>
 800429e:	683b      	ldr	r3, [r7, #0]
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d102      	bne.n	80042aa <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 80042a4:	2303      	movs	r3, #3
 80042a6:	77fb      	strb	r3, [r7, #31]
          goto error;
 80042a8:	e026      	b.n	80042f8 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80042ae:	b29b      	uxth	r3, r3
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d1b5      	bne.n	8004220 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80042b4:	69ba      	ldr	r2, [r7, #24]
 80042b6:	6839      	ldr	r1, [r7, #0]
 80042b8:	68f8      	ldr	r0, [r7, #12]
 80042ba:	f000 f949 	bl	8004550 <SPI_EndRxTxTransaction>
 80042be:	4603      	mov	r3, r0
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d002      	beq.n	80042ca <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	2220      	movs	r2, #32
 80042c8:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	689b      	ldr	r3, [r3, #8]
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d10a      	bne.n	80042e8 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80042d2:	2300      	movs	r3, #0
 80042d4:	613b      	str	r3, [r7, #16]
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	68db      	ldr	r3, [r3, #12]
 80042dc:	613b      	str	r3, [r7, #16]
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	689b      	ldr	r3, [r3, #8]
 80042e4:	613b      	str	r3, [r7, #16]
 80042e6:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d002      	beq.n	80042f6 <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 80042f0:	2301      	movs	r3, #1
 80042f2:	77fb      	strb	r3, [r7, #31]
 80042f4:	e000      	b.n	80042f8 <HAL_SPI_Transmit+0x2c2>
  }

error:
 80042f6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	2201      	movs	r2, #1
 80042fc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	2200      	movs	r2, #0
 8004304:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8004308:	7ffb      	ldrb	r3, [r7, #31]
}
 800430a:	4618      	mov	r0, r3
 800430c:	3720      	adds	r7, #32
 800430e:	46bd      	mov	sp, r7
 8004310:	bd80      	pop	{r7, pc}
	...

08004314 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004314:	b580      	push	{r7, lr}
 8004316:	b088      	sub	sp, #32
 8004318:	af00      	add	r7, sp, #0
 800431a:	60f8      	str	r0, [r7, #12]
 800431c:	60b9      	str	r1, [r7, #8]
 800431e:	603b      	str	r3, [r7, #0]
 8004320:	4613      	mov	r3, r2
 8004322:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004324:	f7fe f990 	bl	8002648 <HAL_GetTick>
 8004328:	4602      	mov	r2, r0
 800432a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800432c:	1a9b      	subs	r3, r3, r2
 800432e:	683a      	ldr	r2, [r7, #0]
 8004330:	4413      	add	r3, r2
 8004332:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004334:	f7fe f988 	bl	8002648 <HAL_GetTick>
 8004338:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800433a:	4b39      	ldr	r3, [pc, #228]	; (8004420 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	015b      	lsls	r3, r3, #5
 8004340:	0d1b      	lsrs	r3, r3, #20
 8004342:	69fa      	ldr	r2, [r7, #28]
 8004344:	fb02 f303 	mul.w	r3, r2, r3
 8004348:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800434a:	e054      	b.n	80043f6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800434c:	683b      	ldr	r3, [r7, #0]
 800434e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004352:	d050      	beq.n	80043f6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004354:	f7fe f978 	bl	8002648 <HAL_GetTick>
 8004358:	4602      	mov	r2, r0
 800435a:	69bb      	ldr	r3, [r7, #24]
 800435c:	1ad3      	subs	r3, r2, r3
 800435e:	69fa      	ldr	r2, [r7, #28]
 8004360:	429a      	cmp	r2, r3
 8004362:	d902      	bls.n	800436a <SPI_WaitFlagStateUntilTimeout+0x56>
 8004364:	69fb      	ldr	r3, [r7, #28]
 8004366:	2b00      	cmp	r3, #0
 8004368:	d13d      	bne.n	80043e6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	685a      	ldr	r2, [r3, #4]
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004378:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	685b      	ldr	r3, [r3, #4]
 800437e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004382:	d111      	bne.n	80043a8 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	689b      	ldr	r3, [r3, #8]
 8004388:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800438c:	d004      	beq.n	8004398 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	689b      	ldr	r3, [r3, #8]
 8004392:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004396:	d107      	bne.n	80043a8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	681a      	ldr	r2, [r3, #0]
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80043a6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043ac:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80043b0:	d10f      	bne.n	80043d2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	681a      	ldr	r2, [r3, #0]
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80043c0:	601a      	str	r2, [r3, #0]
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	681a      	ldr	r2, [r3, #0]
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80043d0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	2201      	movs	r2, #1
 80043d6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	2200      	movs	r2, #0
 80043de:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80043e2:	2303      	movs	r3, #3
 80043e4:	e017      	b.n	8004416 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80043e6:	697b      	ldr	r3, [r7, #20]
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d101      	bne.n	80043f0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80043ec:	2300      	movs	r3, #0
 80043ee:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80043f0:	697b      	ldr	r3, [r7, #20]
 80043f2:	3b01      	subs	r3, #1
 80043f4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	689a      	ldr	r2, [r3, #8]
 80043fc:	68bb      	ldr	r3, [r7, #8]
 80043fe:	4013      	ands	r3, r2
 8004400:	68ba      	ldr	r2, [r7, #8]
 8004402:	429a      	cmp	r2, r3
 8004404:	bf0c      	ite	eq
 8004406:	2301      	moveq	r3, #1
 8004408:	2300      	movne	r3, #0
 800440a:	b2db      	uxtb	r3, r3
 800440c:	461a      	mov	r2, r3
 800440e:	79fb      	ldrb	r3, [r7, #7]
 8004410:	429a      	cmp	r2, r3
 8004412:	d19b      	bne.n	800434c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004414:	2300      	movs	r3, #0
}
 8004416:	4618      	mov	r0, r3
 8004418:	3720      	adds	r7, #32
 800441a:	46bd      	mov	sp, r7
 800441c:	bd80      	pop	{r7, pc}
 800441e:	bf00      	nop
 8004420:	20000000 	.word	0x20000000

08004424 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004424:	b580      	push	{r7, lr}
 8004426:	b08a      	sub	sp, #40	; 0x28
 8004428:	af00      	add	r7, sp, #0
 800442a:	60f8      	str	r0, [r7, #12]
 800442c:	60b9      	str	r1, [r7, #8]
 800442e:	607a      	str	r2, [r7, #4]
 8004430:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8004432:	2300      	movs	r3, #0
 8004434:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8004436:	f7fe f907 	bl	8002648 <HAL_GetTick>
 800443a:	4602      	mov	r2, r0
 800443c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800443e:	1a9b      	subs	r3, r3, r2
 8004440:	683a      	ldr	r2, [r7, #0]
 8004442:	4413      	add	r3, r2
 8004444:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8004446:	f7fe f8ff 	bl	8002648 <HAL_GetTick>
 800444a:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	330c      	adds	r3, #12
 8004452:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8004454:	4b3d      	ldr	r3, [pc, #244]	; (800454c <SPI_WaitFifoStateUntilTimeout+0x128>)
 8004456:	681a      	ldr	r2, [r3, #0]
 8004458:	4613      	mov	r3, r2
 800445a:	009b      	lsls	r3, r3, #2
 800445c:	4413      	add	r3, r2
 800445e:	00da      	lsls	r2, r3, #3
 8004460:	1ad3      	subs	r3, r2, r3
 8004462:	0d1b      	lsrs	r3, r3, #20
 8004464:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004466:	fb02 f303 	mul.w	r3, r2, r3
 800446a:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 800446c:	e060      	b.n	8004530 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800446e:	68bb      	ldr	r3, [r7, #8]
 8004470:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8004474:	d107      	bne.n	8004486 <SPI_WaitFifoStateUntilTimeout+0x62>
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	2b00      	cmp	r3, #0
 800447a:	d104      	bne.n	8004486 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800447c:	69fb      	ldr	r3, [r7, #28]
 800447e:	781b      	ldrb	r3, [r3, #0]
 8004480:	b2db      	uxtb	r3, r3
 8004482:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8004484:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8004486:	683b      	ldr	r3, [r7, #0]
 8004488:	f1b3 3fff 	cmp.w	r3, #4294967295
 800448c:	d050      	beq.n	8004530 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800448e:	f7fe f8db 	bl	8002648 <HAL_GetTick>
 8004492:	4602      	mov	r2, r0
 8004494:	6a3b      	ldr	r3, [r7, #32]
 8004496:	1ad3      	subs	r3, r2, r3
 8004498:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800449a:	429a      	cmp	r2, r3
 800449c:	d902      	bls.n	80044a4 <SPI_WaitFifoStateUntilTimeout+0x80>
 800449e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d13d      	bne.n	8004520 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	685a      	ldr	r2, [r3, #4]
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80044b2:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	685b      	ldr	r3, [r3, #4]
 80044b8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80044bc:	d111      	bne.n	80044e2 <SPI_WaitFifoStateUntilTimeout+0xbe>
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	689b      	ldr	r3, [r3, #8]
 80044c2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80044c6:	d004      	beq.n	80044d2 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	689b      	ldr	r3, [r3, #8]
 80044cc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80044d0:	d107      	bne.n	80044e2 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	681a      	ldr	r2, [r3, #0]
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80044e0:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044e6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80044ea:	d10f      	bne.n	800450c <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	681a      	ldr	r2, [r3, #0]
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80044fa:	601a      	str	r2, [r3, #0]
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	681a      	ldr	r2, [r3, #0]
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800450a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	2201      	movs	r2, #1
 8004510:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	2200      	movs	r2, #0
 8004518:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800451c:	2303      	movs	r3, #3
 800451e:	e010      	b.n	8004542 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004520:	69bb      	ldr	r3, [r7, #24]
 8004522:	2b00      	cmp	r3, #0
 8004524:	d101      	bne.n	800452a <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8004526:	2300      	movs	r3, #0
 8004528:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 800452a:	69bb      	ldr	r3, [r7, #24]
 800452c:	3b01      	subs	r3, #1
 800452e:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	689a      	ldr	r2, [r3, #8]
 8004536:	68bb      	ldr	r3, [r7, #8]
 8004538:	4013      	ands	r3, r2
 800453a:	687a      	ldr	r2, [r7, #4]
 800453c:	429a      	cmp	r2, r3
 800453e:	d196      	bne.n	800446e <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8004540:	2300      	movs	r3, #0
}
 8004542:	4618      	mov	r0, r3
 8004544:	3728      	adds	r7, #40	; 0x28
 8004546:	46bd      	mov	sp, r7
 8004548:	bd80      	pop	{r7, pc}
 800454a:	bf00      	nop
 800454c:	20000000 	.word	0x20000000

08004550 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004550:	b580      	push	{r7, lr}
 8004552:	b086      	sub	sp, #24
 8004554:	af02      	add	r7, sp, #8
 8004556:	60f8      	str	r0, [r7, #12]
 8004558:	60b9      	str	r1, [r7, #8]
 800455a:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	9300      	str	r3, [sp, #0]
 8004560:	68bb      	ldr	r3, [r7, #8]
 8004562:	2200      	movs	r2, #0
 8004564:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8004568:	68f8      	ldr	r0, [r7, #12]
 800456a:	f7ff ff5b 	bl	8004424 <SPI_WaitFifoStateUntilTimeout>
 800456e:	4603      	mov	r3, r0
 8004570:	2b00      	cmp	r3, #0
 8004572:	d007      	beq.n	8004584 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004578:	f043 0220 	orr.w	r2, r3, #32
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004580:	2303      	movs	r3, #3
 8004582:	e027      	b.n	80045d4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	9300      	str	r3, [sp, #0]
 8004588:	68bb      	ldr	r3, [r7, #8]
 800458a:	2200      	movs	r2, #0
 800458c:	2180      	movs	r1, #128	; 0x80
 800458e:	68f8      	ldr	r0, [r7, #12]
 8004590:	f7ff fec0 	bl	8004314 <SPI_WaitFlagStateUntilTimeout>
 8004594:	4603      	mov	r3, r0
 8004596:	2b00      	cmp	r3, #0
 8004598:	d007      	beq.n	80045aa <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800459e:	f043 0220 	orr.w	r2, r3, #32
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80045a6:	2303      	movs	r3, #3
 80045a8:	e014      	b.n	80045d4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	9300      	str	r3, [sp, #0]
 80045ae:	68bb      	ldr	r3, [r7, #8]
 80045b0:	2200      	movs	r2, #0
 80045b2:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80045b6:	68f8      	ldr	r0, [r7, #12]
 80045b8:	f7ff ff34 	bl	8004424 <SPI_WaitFifoStateUntilTimeout>
 80045bc:	4603      	mov	r3, r0
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d007      	beq.n	80045d2 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80045c6:	f043 0220 	orr.w	r2, r3, #32
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80045ce:	2303      	movs	r3, #3
 80045d0:	e000      	b.n	80045d4 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80045d2:	2300      	movs	r3, #0
}
 80045d4:	4618      	mov	r0, r3
 80045d6:	3710      	adds	r7, #16
 80045d8:	46bd      	mov	sp, r7
 80045da:	bd80      	pop	{r7, pc}

080045dc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80045dc:	b580      	push	{r7, lr}
 80045de:	b082      	sub	sp, #8
 80045e0:	af00      	add	r7, sp, #0
 80045e2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d101      	bne.n	80045ee <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80045ea:	2301      	movs	r3, #1
 80045ec:	e049      	b.n	8004682 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80045f4:	b2db      	uxtb	r3, r3
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d106      	bne.n	8004608 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	2200      	movs	r2, #0
 80045fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004602:	6878      	ldr	r0, [r7, #4]
 8004604:	f7fd fdbe 	bl	8002184 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	2202      	movs	r2, #2
 800460c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681a      	ldr	r2, [r3, #0]
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	3304      	adds	r3, #4
 8004618:	4619      	mov	r1, r3
 800461a:	4610      	mov	r0, r2
 800461c:	f000 f94a 	bl	80048b4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	2201      	movs	r2, #1
 8004624:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	2201      	movs	r2, #1
 800462c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	2201      	movs	r2, #1
 8004634:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	2201      	movs	r2, #1
 800463c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	2201      	movs	r2, #1
 8004644:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	2201      	movs	r2, #1
 800464c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	2201      	movs	r2, #1
 8004654:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	2201      	movs	r2, #1
 800465c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	2201      	movs	r2, #1
 8004664:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	2201      	movs	r2, #1
 800466c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	2201      	movs	r2, #1
 8004674:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	2201      	movs	r2, #1
 800467c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004680:	2300      	movs	r3, #0
}
 8004682:	4618      	mov	r0, r3
 8004684:	3708      	adds	r7, #8
 8004686:	46bd      	mov	sp, r7
 8004688:	bd80      	pop	{r7, pc}
	...

0800468c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800468c:	b580      	push	{r7, lr}
 800468e:	b086      	sub	sp, #24
 8004690:	af00      	add	r7, sp, #0
 8004692:	60f8      	str	r0, [r7, #12]
 8004694:	60b9      	str	r1, [r7, #8]
 8004696:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004698:	2300      	movs	r3, #0
 800469a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80046a2:	2b01      	cmp	r3, #1
 80046a4:	d101      	bne.n	80046aa <HAL_TIM_PWM_ConfigChannel+0x1e>
 80046a6:	2302      	movs	r3, #2
 80046a8:	e0ff      	b.n	80048aa <HAL_TIM_PWM_ConfigChannel+0x21e>
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	2201      	movs	r2, #1
 80046ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	2b14      	cmp	r3, #20
 80046b6:	f200 80f0 	bhi.w	800489a <HAL_TIM_PWM_ConfigChannel+0x20e>
 80046ba:	a201      	add	r2, pc, #4	; (adr r2, 80046c0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80046bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046c0:	08004715 	.word	0x08004715
 80046c4:	0800489b 	.word	0x0800489b
 80046c8:	0800489b 	.word	0x0800489b
 80046cc:	0800489b 	.word	0x0800489b
 80046d0:	08004755 	.word	0x08004755
 80046d4:	0800489b 	.word	0x0800489b
 80046d8:	0800489b 	.word	0x0800489b
 80046dc:	0800489b 	.word	0x0800489b
 80046e0:	08004797 	.word	0x08004797
 80046e4:	0800489b 	.word	0x0800489b
 80046e8:	0800489b 	.word	0x0800489b
 80046ec:	0800489b 	.word	0x0800489b
 80046f0:	080047d7 	.word	0x080047d7
 80046f4:	0800489b 	.word	0x0800489b
 80046f8:	0800489b 	.word	0x0800489b
 80046fc:	0800489b 	.word	0x0800489b
 8004700:	08004819 	.word	0x08004819
 8004704:	0800489b 	.word	0x0800489b
 8004708:	0800489b 	.word	0x0800489b
 800470c:	0800489b 	.word	0x0800489b
 8004710:	08004859 	.word	0x08004859
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	68b9      	ldr	r1, [r7, #8]
 800471a:	4618      	mov	r0, r3
 800471c:	f000 f92e 	bl	800497c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	699a      	ldr	r2, [r3, #24]
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	f042 0208 	orr.w	r2, r2, #8
 800472e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	699a      	ldr	r2, [r3, #24]
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	f022 0204 	bic.w	r2, r2, #4
 800473e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	6999      	ldr	r1, [r3, #24]
 8004746:	68bb      	ldr	r3, [r7, #8]
 8004748:	691a      	ldr	r2, [r3, #16]
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	430a      	orrs	r2, r1
 8004750:	619a      	str	r2, [r3, #24]
      break;
 8004752:	e0a5      	b.n	80048a0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	68b9      	ldr	r1, [r7, #8]
 800475a:	4618      	mov	r0, r3
 800475c:	f000 f98a 	bl	8004a74 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	699a      	ldr	r2, [r3, #24]
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800476e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	699a      	ldr	r2, [r3, #24]
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800477e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	6999      	ldr	r1, [r3, #24]
 8004786:	68bb      	ldr	r3, [r7, #8]
 8004788:	691b      	ldr	r3, [r3, #16]
 800478a:	021a      	lsls	r2, r3, #8
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	430a      	orrs	r2, r1
 8004792:	619a      	str	r2, [r3, #24]
      break;
 8004794:	e084      	b.n	80048a0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	68b9      	ldr	r1, [r7, #8]
 800479c:	4618      	mov	r0, r3
 800479e:	f000 f9e3 	bl	8004b68 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	69da      	ldr	r2, [r3, #28]
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	f042 0208 	orr.w	r2, r2, #8
 80047b0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	69da      	ldr	r2, [r3, #28]
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	f022 0204 	bic.w	r2, r2, #4
 80047c0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	69d9      	ldr	r1, [r3, #28]
 80047c8:	68bb      	ldr	r3, [r7, #8]
 80047ca:	691a      	ldr	r2, [r3, #16]
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	430a      	orrs	r2, r1
 80047d2:	61da      	str	r2, [r3, #28]
      break;
 80047d4:	e064      	b.n	80048a0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	68b9      	ldr	r1, [r7, #8]
 80047dc:	4618      	mov	r0, r3
 80047de:	f000 fa3b 	bl	8004c58 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	69da      	ldr	r2, [r3, #28]
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80047f0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	69da      	ldr	r2, [r3, #28]
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004800:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	69d9      	ldr	r1, [r3, #28]
 8004808:	68bb      	ldr	r3, [r7, #8]
 800480a:	691b      	ldr	r3, [r3, #16]
 800480c:	021a      	lsls	r2, r3, #8
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	430a      	orrs	r2, r1
 8004814:	61da      	str	r2, [r3, #28]
      break;
 8004816:	e043      	b.n	80048a0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	68b9      	ldr	r1, [r7, #8]
 800481e:	4618      	mov	r0, r3
 8004820:	f000 fa78 	bl	8004d14 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	f042 0208 	orr.w	r2, r2, #8
 8004832:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	f022 0204 	bic.w	r2, r2, #4
 8004842:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800484a:	68bb      	ldr	r3, [r7, #8]
 800484c:	691a      	ldr	r2, [r3, #16]
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	430a      	orrs	r2, r1
 8004854:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004856:	e023      	b.n	80048a0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	68b9      	ldr	r1, [r7, #8]
 800485e:	4618      	mov	r0, r3
 8004860:	f000 fab0 	bl	8004dc4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004872:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004882:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800488a:	68bb      	ldr	r3, [r7, #8]
 800488c:	691b      	ldr	r3, [r3, #16]
 800488e:	021a      	lsls	r2, r3, #8
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	430a      	orrs	r2, r1
 8004896:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004898:	e002      	b.n	80048a0 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800489a:	2301      	movs	r3, #1
 800489c:	75fb      	strb	r3, [r7, #23]
      break;
 800489e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	2200      	movs	r2, #0
 80048a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80048a8:	7dfb      	ldrb	r3, [r7, #23]
}
 80048aa:	4618      	mov	r0, r3
 80048ac:	3718      	adds	r7, #24
 80048ae:	46bd      	mov	sp, r7
 80048b0:	bd80      	pop	{r7, pc}
 80048b2:	bf00      	nop

080048b4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80048b4:	b480      	push	{r7}
 80048b6:	b085      	sub	sp, #20
 80048b8:	af00      	add	r7, sp, #0
 80048ba:	6078      	str	r0, [r7, #4]
 80048bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	4a2a      	ldr	r2, [pc, #168]	; (8004970 <TIM_Base_SetConfig+0xbc>)
 80048c8:	4293      	cmp	r3, r2
 80048ca:	d003      	beq.n	80048d4 <TIM_Base_SetConfig+0x20>
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80048d2:	d108      	bne.n	80048e6 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80048da:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80048dc:	683b      	ldr	r3, [r7, #0]
 80048de:	685b      	ldr	r3, [r3, #4]
 80048e0:	68fa      	ldr	r2, [r7, #12]
 80048e2:	4313      	orrs	r3, r2
 80048e4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	4a21      	ldr	r2, [pc, #132]	; (8004970 <TIM_Base_SetConfig+0xbc>)
 80048ea:	4293      	cmp	r3, r2
 80048ec:	d00b      	beq.n	8004906 <TIM_Base_SetConfig+0x52>
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80048f4:	d007      	beq.n	8004906 <TIM_Base_SetConfig+0x52>
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	4a1e      	ldr	r2, [pc, #120]	; (8004974 <TIM_Base_SetConfig+0xc0>)
 80048fa:	4293      	cmp	r3, r2
 80048fc:	d003      	beq.n	8004906 <TIM_Base_SetConfig+0x52>
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	4a1d      	ldr	r2, [pc, #116]	; (8004978 <TIM_Base_SetConfig+0xc4>)
 8004902:	4293      	cmp	r3, r2
 8004904:	d108      	bne.n	8004918 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800490c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800490e:	683b      	ldr	r3, [r7, #0]
 8004910:	68db      	ldr	r3, [r3, #12]
 8004912:	68fa      	ldr	r2, [r7, #12]
 8004914:	4313      	orrs	r3, r2
 8004916:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800491e:	683b      	ldr	r3, [r7, #0]
 8004920:	695b      	ldr	r3, [r3, #20]
 8004922:	4313      	orrs	r3, r2
 8004924:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	68fa      	ldr	r2, [r7, #12]
 800492a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800492c:	683b      	ldr	r3, [r7, #0]
 800492e:	689a      	ldr	r2, [r3, #8]
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004934:	683b      	ldr	r3, [r7, #0]
 8004936:	681a      	ldr	r2, [r3, #0]
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	4a0c      	ldr	r2, [pc, #48]	; (8004970 <TIM_Base_SetConfig+0xbc>)
 8004940:	4293      	cmp	r3, r2
 8004942:	d007      	beq.n	8004954 <TIM_Base_SetConfig+0xa0>
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	4a0b      	ldr	r2, [pc, #44]	; (8004974 <TIM_Base_SetConfig+0xc0>)
 8004948:	4293      	cmp	r3, r2
 800494a:	d003      	beq.n	8004954 <TIM_Base_SetConfig+0xa0>
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	4a0a      	ldr	r2, [pc, #40]	; (8004978 <TIM_Base_SetConfig+0xc4>)
 8004950:	4293      	cmp	r3, r2
 8004952:	d103      	bne.n	800495c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004954:	683b      	ldr	r3, [r7, #0]
 8004956:	691a      	ldr	r2, [r3, #16]
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	2201      	movs	r2, #1
 8004960:	615a      	str	r2, [r3, #20]
}
 8004962:	bf00      	nop
 8004964:	3714      	adds	r7, #20
 8004966:	46bd      	mov	sp, r7
 8004968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800496c:	4770      	bx	lr
 800496e:	bf00      	nop
 8004970:	40012c00 	.word	0x40012c00
 8004974:	40014000 	.word	0x40014000
 8004978:	40014400 	.word	0x40014400

0800497c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800497c:	b480      	push	{r7}
 800497e:	b087      	sub	sp, #28
 8004980:	af00      	add	r7, sp, #0
 8004982:	6078      	str	r0, [r7, #4]
 8004984:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	6a1b      	ldr	r3, [r3, #32]
 800498a:	f023 0201 	bic.w	r2, r3, #1
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	6a1b      	ldr	r3, [r3, #32]
 8004996:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	685b      	ldr	r3, [r3, #4]
 800499c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	699b      	ldr	r3, [r3, #24]
 80049a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80049aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80049ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	f023 0303 	bic.w	r3, r3, #3
 80049b6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80049b8:	683b      	ldr	r3, [r7, #0]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	68fa      	ldr	r2, [r7, #12]
 80049be:	4313      	orrs	r3, r2
 80049c0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80049c2:	697b      	ldr	r3, [r7, #20]
 80049c4:	f023 0302 	bic.w	r3, r3, #2
 80049c8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80049ca:	683b      	ldr	r3, [r7, #0]
 80049cc:	689b      	ldr	r3, [r3, #8]
 80049ce:	697a      	ldr	r2, [r7, #20]
 80049d0:	4313      	orrs	r3, r2
 80049d2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	4a24      	ldr	r2, [pc, #144]	; (8004a68 <TIM_OC1_SetConfig+0xec>)
 80049d8:	4293      	cmp	r3, r2
 80049da:	d007      	beq.n	80049ec <TIM_OC1_SetConfig+0x70>
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	4a23      	ldr	r2, [pc, #140]	; (8004a6c <TIM_OC1_SetConfig+0xf0>)
 80049e0:	4293      	cmp	r3, r2
 80049e2:	d003      	beq.n	80049ec <TIM_OC1_SetConfig+0x70>
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	4a22      	ldr	r2, [pc, #136]	; (8004a70 <TIM_OC1_SetConfig+0xf4>)
 80049e8:	4293      	cmp	r3, r2
 80049ea:	d10c      	bne.n	8004a06 <TIM_OC1_SetConfig+0x8a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80049ec:	697b      	ldr	r3, [r7, #20]
 80049ee:	f023 0308 	bic.w	r3, r3, #8
 80049f2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80049f4:	683b      	ldr	r3, [r7, #0]
 80049f6:	68db      	ldr	r3, [r3, #12]
 80049f8:	697a      	ldr	r2, [r7, #20]
 80049fa:	4313      	orrs	r3, r2
 80049fc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80049fe:	697b      	ldr	r3, [r7, #20]
 8004a00:	f023 0304 	bic.w	r3, r3, #4
 8004a04:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	4a17      	ldr	r2, [pc, #92]	; (8004a68 <TIM_OC1_SetConfig+0xec>)
 8004a0a:	4293      	cmp	r3, r2
 8004a0c:	d007      	beq.n	8004a1e <TIM_OC1_SetConfig+0xa2>
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	4a16      	ldr	r2, [pc, #88]	; (8004a6c <TIM_OC1_SetConfig+0xf0>)
 8004a12:	4293      	cmp	r3, r2
 8004a14:	d003      	beq.n	8004a1e <TIM_OC1_SetConfig+0xa2>
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	4a15      	ldr	r2, [pc, #84]	; (8004a70 <TIM_OC1_SetConfig+0xf4>)
 8004a1a:	4293      	cmp	r3, r2
 8004a1c:	d111      	bne.n	8004a42 <TIM_OC1_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004a1e:	693b      	ldr	r3, [r7, #16]
 8004a20:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004a24:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004a26:	693b      	ldr	r3, [r7, #16]
 8004a28:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004a2c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004a2e:	683b      	ldr	r3, [r7, #0]
 8004a30:	695b      	ldr	r3, [r3, #20]
 8004a32:	693a      	ldr	r2, [r7, #16]
 8004a34:	4313      	orrs	r3, r2
 8004a36:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004a38:	683b      	ldr	r3, [r7, #0]
 8004a3a:	699b      	ldr	r3, [r3, #24]
 8004a3c:	693a      	ldr	r2, [r7, #16]
 8004a3e:	4313      	orrs	r3, r2
 8004a40:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	693a      	ldr	r2, [r7, #16]
 8004a46:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	68fa      	ldr	r2, [r7, #12]
 8004a4c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004a4e:	683b      	ldr	r3, [r7, #0]
 8004a50:	685a      	ldr	r2, [r3, #4]
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	697a      	ldr	r2, [r7, #20]
 8004a5a:	621a      	str	r2, [r3, #32]
}
 8004a5c:	bf00      	nop
 8004a5e:	371c      	adds	r7, #28
 8004a60:	46bd      	mov	sp, r7
 8004a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a66:	4770      	bx	lr
 8004a68:	40012c00 	.word	0x40012c00
 8004a6c:	40014000 	.word	0x40014000
 8004a70:	40014400 	.word	0x40014400

08004a74 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004a74:	b480      	push	{r7}
 8004a76:	b087      	sub	sp, #28
 8004a78:	af00      	add	r7, sp, #0
 8004a7a:	6078      	str	r0, [r7, #4]
 8004a7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	6a1b      	ldr	r3, [r3, #32]
 8004a82:	f023 0210 	bic.w	r2, r3, #16
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	6a1b      	ldr	r3, [r3, #32]
 8004a8e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	685b      	ldr	r3, [r3, #4]
 8004a94:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	699b      	ldr	r3, [r3, #24]
 8004a9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004aa2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004aa6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004aae:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004ab0:	683b      	ldr	r3, [r7, #0]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	021b      	lsls	r3, r3, #8
 8004ab6:	68fa      	ldr	r2, [r7, #12]
 8004ab8:	4313      	orrs	r3, r2
 8004aba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004abc:	697b      	ldr	r3, [r7, #20]
 8004abe:	f023 0320 	bic.w	r3, r3, #32
 8004ac2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004ac4:	683b      	ldr	r3, [r7, #0]
 8004ac6:	689b      	ldr	r3, [r3, #8]
 8004ac8:	011b      	lsls	r3, r3, #4
 8004aca:	697a      	ldr	r2, [r7, #20]
 8004acc:	4313      	orrs	r3, r2
 8004ace:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	4a22      	ldr	r2, [pc, #136]	; (8004b5c <TIM_OC2_SetConfig+0xe8>)
 8004ad4:	4293      	cmp	r3, r2
 8004ad6:	d10d      	bne.n	8004af4 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004ad8:	697b      	ldr	r3, [r7, #20]
 8004ada:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004ade:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004ae0:	683b      	ldr	r3, [r7, #0]
 8004ae2:	68db      	ldr	r3, [r3, #12]
 8004ae4:	011b      	lsls	r3, r3, #4
 8004ae6:	697a      	ldr	r2, [r7, #20]
 8004ae8:	4313      	orrs	r3, r2
 8004aea:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004aec:	697b      	ldr	r3, [r7, #20]
 8004aee:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004af2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	4a19      	ldr	r2, [pc, #100]	; (8004b5c <TIM_OC2_SetConfig+0xe8>)
 8004af8:	4293      	cmp	r3, r2
 8004afa:	d007      	beq.n	8004b0c <TIM_OC2_SetConfig+0x98>
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	4a18      	ldr	r2, [pc, #96]	; (8004b60 <TIM_OC2_SetConfig+0xec>)
 8004b00:	4293      	cmp	r3, r2
 8004b02:	d003      	beq.n	8004b0c <TIM_OC2_SetConfig+0x98>
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	4a17      	ldr	r2, [pc, #92]	; (8004b64 <TIM_OC2_SetConfig+0xf0>)
 8004b08:	4293      	cmp	r3, r2
 8004b0a:	d113      	bne.n	8004b34 <TIM_OC2_SetConfig+0xc0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004b0c:	693b      	ldr	r3, [r7, #16]
 8004b0e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004b12:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004b14:	693b      	ldr	r3, [r7, #16]
 8004b16:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004b1a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004b1c:	683b      	ldr	r3, [r7, #0]
 8004b1e:	695b      	ldr	r3, [r3, #20]
 8004b20:	009b      	lsls	r3, r3, #2
 8004b22:	693a      	ldr	r2, [r7, #16]
 8004b24:	4313      	orrs	r3, r2
 8004b26:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004b28:	683b      	ldr	r3, [r7, #0]
 8004b2a:	699b      	ldr	r3, [r3, #24]
 8004b2c:	009b      	lsls	r3, r3, #2
 8004b2e:	693a      	ldr	r2, [r7, #16]
 8004b30:	4313      	orrs	r3, r2
 8004b32:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	693a      	ldr	r2, [r7, #16]
 8004b38:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	68fa      	ldr	r2, [r7, #12]
 8004b3e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004b40:	683b      	ldr	r3, [r7, #0]
 8004b42:	685a      	ldr	r2, [r3, #4]
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	697a      	ldr	r2, [r7, #20]
 8004b4c:	621a      	str	r2, [r3, #32]
}
 8004b4e:	bf00      	nop
 8004b50:	371c      	adds	r7, #28
 8004b52:	46bd      	mov	sp, r7
 8004b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b58:	4770      	bx	lr
 8004b5a:	bf00      	nop
 8004b5c:	40012c00 	.word	0x40012c00
 8004b60:	40014000 	.word	0x40014000
 8004b64:	40014400 	.word	0x40014400

08004b68 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004b68:	b480      	push	{r7}
 8004b6a:	b087      	sub	sp, #28
 8004b6c:	af00      	add	r7, sp, #0
 8004b6e:	6078      	str	r0, [r7, #4]
 8004b70:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	6a1b      	ldr	r3, [r3, #32]
 8004b76:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	6a1b      	ldr	r3, [r3, #32]
 8004b82:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	685b      	ldr	r3, [r3, #4]
 8004b88:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	69db      	ldr	r3, [r3, #28]
 8004b8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004b96:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b9a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	f023 0303 	bic.w	r3, r3, #3
 8004ba2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004ba4:	683b      	ldr	r3, [r7, #0]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	68fa      	ldr	r2, [r7, #12]
 8004baa:	4313      	orrs	r3, r2
 8004bac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004bae:	697b      	ldr	r3, [r7, #20]
 8004bb0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004bb4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004bb6:	683b      	ldr	r3, [r7, #0]
 8004bb8:	689b      	ldr	r3, [r3, #8]
 8004bba:	021b      	lsls	r3, r3, #8
 8004bbc:	697a      	ldr	r2, [r7, #20]
 8004bbe:	4313      	orrs	r3, r2
 8004bc0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	4a21      	ldr	r2, [pc, #132]	; (8004c4c <TIM_OC3_SetConfig+0xe4>)
 8004bc6:	4293      	cmp	r3, r2
 8004bc8:	d10d      	bne.n	8004be6 <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004bca:	697b      	ldr	r3, [r7, #20]
 8004bcc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004bd0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004bd2:	683b      	ldr	r3, [r7, #0]
 8004bd4:	68db      	ldr	r3, [r3, #12]
 8004bd6:	021b      	lsls	r3, r3, #8
 8004bd8:	697a      	ldr	r2, [r7, #20]
 8004bda:	4313      	orrs	r3, r2
 8004bdc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004bde:	697b      	ldr	r3, [r7, #20]
 8004be0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004be4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	4a18      	ldr	r2, [pc, #96]	; (8004c4c <TIM_OC3_SetConfig+0xe4>)
 8004bea:	4293      	cmp	r3, r2
 8004bec:	d007      	beq.n	8004bfe <TIM_OC3_SetConfig+0x96>
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	4a17      	ldr	r2, [pc, #92]	; (8004c50 <TIM_OC3_SetConfig+0xe8>)
 8004bf2:	4293      	cmp	r3, r2
 8004bf4:	d003      	beq.n	8004bfe <TIM_OC3_SetConfig+0x96>
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	4a16      	ldr	r2, [pc, #88]	; (8004c54 <TIM_OC3_SetConfig+0xec>)
 8004bfa:	4293      	cmp	r3, r2
 8004bfc:	d113      	bne.n	8004c26 <TIM_OC3_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004bfe:	693b      	ldr	r3, [r7, #16]
 8004c00:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004c04:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004c06:	693b      	ldr	r3, [r7, #16]
 8004c08:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004c0c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004c0e:	683b      	ldr	r3, [r7, #0]
 8004c10:	695b      	ldr	r3, [r3, #20]
 8004c12:	011b      	lsls	r3, r3, #4
 8004c14:	693a      	ldr	r2, [r7, #16]
 8004c16:	4313      	orrs	r3, r2
 8004c18:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004c1a:	683b      	ldr	r3, [r7, #0]
 8004c1c:	699b      	ldr	r3, [r3, #24]
 8004c1e:	011b      	lsls	r3, r3, #4
 8004c20:	693a      	ldr	r2, [r7, #16]
 8004c22:	4313      	orrs	r3, r2
 8004c24:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	693a      	ldr	r2, [r7, #16]
 8004c2a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	68fa      	ldr	r2, [r7, #12]
 8004c30:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004c32:	683b      	ldr	r3, [r7, #0]
 8004c34:	685a      	ldr	r2, [r3, #4]
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	697a      	ldr	r2, [r7, #20]
 8004c3e:	621a      	str	r2, [r3, #32]
}
 8004c40:	bf00      	nop
 8004c42:	371c      	adds	r7, #28
 8004c44:	46bd      	mov	sp, r7
 8004c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c4a:	4770      	bx	lr
 8004c4c:	40012c00 	.word	0x40012c00
 8004c50:	40014000 	.word	0x40014000
 8004c54:	40014400 	.word	0x40014400

08004c58 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004c58:	b480      	push	{r7}
 8004c5a:	b087      	sub	sp, #28
 8004c5c:	af00      	add	r7, sp, #0
 8004c5e:	6078      	str	r0, [r7, #4]
 8004c60:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	6a1b      	ldr	r3, [r3, #32]
 8004c66:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	6a1b      	ldr	r3, [r3, #32]
 8004c72:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	685b      	ldr	r3, [r3, #4]
 8004c78:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	69db      	ldr	r3, [r3, #28]
 8004c7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004c86:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004c8a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004c92:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004c94:	683b      	ldr	r3, [r7, #0]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	021b      	lsls	r3, r3, #8
 8004c9a:	68fa      	ldr	r2, [r7, #12]
 8004c9c:	4313      	orrs	r3, r2
 8004c9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004ca0:	693b      	ldr	r3, [r7, #16]
 8004ca2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004ca6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004ca8:	683b      	ldr	r3, [r7, #0]
 8004caa:	689b      	ldr	r3, [r3, #8]
 8004cac:	031b      	lsls	r3, r3, #12
 8004cae:	693a      	ldr	r2, [r7, #16]
 8004cb0:	4313      	orrs	r3, r2
 8004cb2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	4a14      	ldr	r2, [pc, #80]	; (8004d08 <TIM_OC4_SetConfig+0xb0>)
 8004cb8:	4293      	cmp	r3, r2
 8004cba:	d007      	beq.n	8004ccc <TIM_OC4_SetConfig+0x74>
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	4a13      	ldr	r2, [pc, #76]	; (8004d0c <TIM_OC4_SetConfig+0xb4>)
 8004cc0:	4293      	cmp	r3, r2
 8004cc2:	d003      	beq.n	8004ccc <TIM_OC4_SetConfig+0x74>
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	4a12      	ldr	r2, [pc, #72]	; (8004d10 <TIM_OC4_SetConfig+0xb8>)
 8004cc8:	4293      	cmp	r3, r2
 8004cca:	d109      	bne.n	8004ce0 <TIM_OC4_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004ccc:	697b      	ldr	r3, [r7, #20]
 8004cce:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004cd2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004cd4:	683b      	ldr	r3, [r7, #0]
 8004cd6:	695b      	ldr	r3, [r3, #20]
 8004cd8:	019b      	lsls	r3, r3, #6
 8004cda:	697a      	ldr	r2, [r7, #20]
 8004cdc:	4313      	orrs	r3, r2
 8004cde:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	697a      	ldr	r2, [r7, #20]
 8004ce4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	68fa      	ldr	r2, [r7, #12]
 8004cea:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004cec:	683b      	ldr	r3, [r7, #0]
 8004cee:	685a      	ldr	r2, [r3, #4]
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	693a      	ldr	r2, [r7, #16]
 8004cf8:	621a      	str	r2, [r3, #32]
}
 8004cfa:	bf00      	nop
 8004cfc:	371c      	adds	r7, #28
 8004cfe:	46bd      	mov	sp, r7
 8004d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d04:	4770      	bx	lr
 8004d06:	bf00      	nop
 8004d08:	40012c00 	.word	0x40012c00
 8004d0c:	40014000 	.word	0x40014000
 8004d10:	40014400 	.word	0x40014400

08004d14 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004d14:	b480      	push	{r7}
 8004d16:	b087      	sub	sp, #28
 8004d18:	af00      	add	r7, sp, #0
 8004d1a:	6078      	str	r0, [r7, #4]
 8004d1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	6a1b      	ldr	r3, [r3, #32]
 8004d22:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	6a1b      	ldr	r3, [r3, #32]
 8004d2e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	685b      	ldr	r3, [r3, #4]
 8004d34:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004d42:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d46:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004d48:	683b      	ldr	r3, [r7, #0]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	68fa      	ldr	r2, [r7, #12]
 8004d4e:	4313      	orrs	r3, r2
 8004d50:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8004d52:	693b      	ldr	r3, [r7, #16]
 8004d54:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8004d58:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8004d5a:	683b      	ldr	r3, [r7, #0]
 8004d5c:	689b      	ldr	r3, [r3, #8]
 8004d5e:	041b      	lsls	r3, r3, #16
 8004d60:	693a      	ldr	r2, [r7, #16]
 8004d62:	4313      	orrs	r3, r2
 8004d64:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	4a13      	ldr	r2, [pc, #76]	; (8004db8 <TIM_OC5_SetConfig+0xa4>)
 8004d6a:	4293      	cmp	r3, r2
 8004d6c:	d007      	beq.n	8004d7e <TIM_OC5_SetConfig+0x6a>
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	4a12      	ldr	r2, [pc, #72]	; (8004dbc <TIM_OC5_SetConfig+0xa8>)
 8004d72:	4293      	cmp	r3, r2
 8004d74:	d003      	beq.n	8004d7e <TIM_OC5_SetConfig+0x6a>
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	4a11      	ldr	r2, [pc, #68]	; (8004dc0 <TIM_OC5_SetConfig+0xac>)
 8004d7a:	4293      	cmp	r3, r2
 8004d7c:	d109      	bne.n	8004d92 <TIM_OC5_SetConfig+0x7e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8004d7e:	697b      	ldr	r3, [r7, #20]
 8004d80:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004d84:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8004d86:	683b      	ldr	r3, [r7, #0]
 8004d88:	695b      	ldr	r3, [r3, #20]
 8004d8a:	021b      	lsls	r3, r3, #8
 8004d8c:	697a      	ldr	r2, [r7, #20]
 8004d8e:	4313      	orrs	r3, r2
 8004d90:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	697a      	ldr	r2, [r7, #20]
 8004d96:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	68fa      	ldr	r2, [r7, #12]
 8004d9c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8004d9e:	683b      	ldr	r3, [r7, #0]
 8004da0:	685a      	ldr	r2, [r3, #4]
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	693a      	ldr	r2, [r7, #16]
 8004daa:	621a      	str	r2, [r3, #32]
}
 8004dac:	bf00      	nop
 8004dae:	371c      	adds	r7, #28
 8004db0:	46bd      	mov	sp, r7
 8004db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004db6:	4770      	bx	lr
 8004db8:	40012c00 	.word	0x40012c00
 8004dbc:	40014000 	.word	0x40014000
 8004dc0:	40014400 	.word	0x40014400

08004dc4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004dc4:	b480      	push	{r7}
 8004dc6:	b087      	sub	sp, #28
 8004dc8:	af00      	add	r7, sp, #0
 8004dca:	6078      	str	r0, [r7, #4]
 8004dcc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	6a1b      	ldr	r3, [r3, #32]
 8004dd2:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	6a1b      	ldr	r3, [r3, #32]
 8004dde:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	685b      	ldr	r3, [r3, #4]
 8004de4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004dea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004df2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004df6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004df8:	683b      	ldr	r3, [r7, #0]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	021b      	lsls	r3, r3, #8
 8004dfe:	68fa      	ldr	r2, [r7, #12]
 8004e00:	4313      	orrs	r3, r2
 8004e02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004e04:	693b      	ldr	r3, [r7, #16]
 8004e06:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004e0a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004e0c:	683b      	ldr	r3, [r7, #0]
 8004e0e:	689b      	ldr	r3, [r3, #8]
 8004e10:	051b      	lsls	r3, r3, #20
 8004e12:	693a      	ldr	r2, [r7, #16]
 8004e14:	4313      	orrs	r3, r2
 8004e16:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	4a14      	ldr	r2, [pc, #80]	; (8004e6c <TIM_OC6_SetConfig+0xa8>)
 8004e1c:	4293      	cmp	r3, r2
 8004e1e:	d007      	beq.n	8004e30 <TIM_OC6_SetConfig+0x6c>
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	4a13      	ldr	r2, [pc, #76]	; (8004e70 <TIM_OC6_SetConfig+0xac>)
 8004e24:	4293      	cmp	r3, r2
 8004e26:	d003      	beq.n	8004e30 <TIM_OC6_SetConfig+0x6c>
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	4a12      	ldr	r2, [pc, #72]	; (8004e74 <TIM_OC6_SetConfig+0xb0>)
 8004e2c:	4293      	cmp	r3, r2
 8004e2e:	d109      	bne.n	8004e44 <TIM_OC6_SetConfig+0x80>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8004e30:	697b      	ldr	r3, [r7, #20]
 8004e32:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004e36:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004e38:	683b      	ldr	r3, [r7, #0]
 8004e3a:	695b      	ldr	r3, [r3, #20]
 8004e3c:	029b      	lsls	r3, r3, #10
 8004e3e:	697a      	ldr	r2, [r7, #20]
 8004e40:	4313      	orrs	r3, r2
 8004e42:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	697a      	ldr	r2, [r7, #20]
 8004e48:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	68fa      	ldr	r2, [r7, #12]
 8004e4e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8004e50:	683b      	ldr	r3, [r7, #0]
 8004e52:	685a      	ldr	r2, [r3, #4]
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	693a      	ldr	r2, [r7, #16]
 8004e5c:	621a      	str	r2, [r3, #32]
}
 8004e5e:	bf00      	nop
 8004e60:	371c      	adds	r7, #28
 8004e62:	46bd      	mov	sp, r7
 8004e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e68:	4770      	bx	lr
 8004e6a:	bf00      	nop
 8004e6c:	40012c00 	.word	0x40012c00
 8004e70:	40014000 	.word	0x40014000
 8004e74:	40014400 	.word	0x40014400

08004e78 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004e78:	b480      	push	{r7}
 8004e7a:	b085      	sub	sp, #20
 8004e7c:	af00      	add	r7, sp, #0
 8004e7e:	6078      	str	r0, [r7, #4]
 8004e80:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004e88:	2b01      	cmp	r3, #1
 8004e8a:	d101      	bne.n	8004e90 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004e8c:	2302      	movs	r3, #2
 8004e8e:	e04f      	b.n	8004f30 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	2201      	movs	r2, #1
 8004e94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	2202      	movs	r2, #2
 8004e9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	685b      	ldr	r3, [r3, #4]
 8004ea6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	689b      	ldr	r3, [r3, #8]
 8004eae:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	4a21      	ldr	r2, [pc, #132]	; (8004f3c <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8004eb6:	4293      	cmp	r3, r2
 8004eb8:	d108      	bne.n	8004ecc <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004ec0:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004ec2:	683b      	ldr	r3, [r7, #0]
 8004ec4:	685b      	ldr	r3, [r3, #4]
 8004ec6:	68fa      	ldr	r2, [r7, #12]
 8004ec8:	4313      	orrs	r3, r2
 8004eca:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ed2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004ed4:	683b      	ldr	r3, [r7, #0]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	68fa      	ldr	r2, [r7, #12]
 8004eda:	4313      	orrs	r3, r2
 8004edc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	68fa      	ldr	r2, [r7, #12]
 8004ee4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	4a14      	ldr	r2, [pc, #80]	; (8004f3c <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8004eec:	4293      	cmp	r3, r2
 8004eee:	d009      	beq.n	8004f04 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ef8:	d004      	beq.n	8004f04 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	4a10      	ldr	r2, [pc, #64]	; (8004f40 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004f00:	4293      	cmp	r3, r2
 8004f02:	d10c      	bne.n	8004f1e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004f04:	68bb      	ldr	r3, [r7, #8]
 8004f06:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004f0a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004f0c:	683b      	ldr	r3, [r7, #0]
 8004f0e:	689b      	ldr	r3, [r3, #8]
 8004f10:	68ba      	ldr	r2, [r7, #8]
 8004f12:	4313      	orrs	r3, r2
 8004f14:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	68ba      	ldr	r2, [r7, #8]
 8004f1c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	2201      	movs	r2, #1
 8004f22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	2200      	movs	r2, #0
 8004f2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004f2e:	2300      	movs	r3, #0
}
 8004f30:	4618      	mov	r0, r3
 8004f32:	3714      	adds	r7, #20
 8004f34:	46bd      	mov	sp, r7
 8004f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f3a:	4770      	bx	lr
 8004f3c:	40012c00 	.word	0x40012c00
 8004f40:	40014000 	.word	0x40014000

08004f44 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004f44:	b480      	push	{r7}
 8004f46:	b085      	sub	sp, #20
 8004f48:	af00      	add	r7, sp, #0
 8004f4a:	6078      	str	r0, [r7, #4]
 8004f4c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004f4e:	2300      	movs	r3, #0
 8004f50:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004f58:	2b01      	cmp	r3, #1
 8004f5a:	d101      	bne.n	8004f60 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004f5c:	2302      	movs	r3, #2
 8004f5e:	e060      	b.n	8005022 <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	2201      	movs	r2, #1
 8004f64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8004f6e:	683b      	ldr	r3, [r7, #0]
 8004f70:	68db      	ldr	r3, [r3, #12]
 8004f72:	4313      	orrs	r3, r2
 8004f74:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004f7c:	683b      	ldr	r3, [r7, #0]
 8004f7e:	689b      	ldr	r3, [r3, #8]
 8004f80:	4313      	orrs	r3, r2
 8004f82:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8004f8a:	683b      	ldr	r3, [r7, #0]
 8004f8c:	685b      	ldr	r3, [r3, #4]
 8004f8e:	4313      	orrs	r3, r2
 8004f90:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8004f98:	683b      	ldr	r3, [r7, #0]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	4313      	orrs	r3, r2
 8004f9e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004fa6:	683b      	ldr	r3, [r7, #0]
 8004fa8:	691b      	ldr	r3, [r3, #16]
 8004faa:	4313      	orrs	r3, r2
 8004fac:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8004fb4:	683b      	ldr	r3, [r7, #0]
 8004fb6:	695b      	ldr	r3, [r3, #20]
 8004fb8:	4313      	orrs	r3, r2
 8004fba:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8004fc2:	683b      	ldr	r3, [r7, #0]
 8004fc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fc6:	4313      	orrs	r3, r2
 8004fc8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8004fd0:	683b      	ldr	r3, [r7, #0]
 8004fd2:	699b      	ldr	r3, [r3, #24]
 8004fd4:	041b      	lsls	r3, r3, #16
 8004fd6:	4313      	orrs	r3, r2
 8004fd8:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	4a14      	ldr	r2, [pc, #80]	; (8005030 <HAL_TIMEx_ConfigBreakDeadTime+0xec>)
 8004fe0:	4293      	cmp	r3, r2
 8004fe2:	d115      	bne.n	8005010 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8004fea:	683b      	ldr	r3, [r7, #0]
 8004fec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fee:	051b      	lsls	r3, r3, #20
 8004ff0:	4313      	orrs	r3, r2
 8004ff2:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8004ffa:	683b      	ldr	r3, [r7, #0]
 8004ffc:	69db      	ldr	r3, [r3, #28]
 8004ffe:	4313      	orrs	r3, r2
 8005000:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8005008:	683b      	ldr	r3, [r7, #0]
 800500a:	6a1b      	ldr	r3, [r3, #32]
 800500c:	4313      	orrs	r3, r2
 800500e:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	68fa      	ldr	r2, [r7, #12]
 8005016:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	2200      	movs	r2, #0
 800501c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005020:	2300      	movs	r3, #0
}
 8005022:	4618      	mov	r0, r3
 8005024:	3714      	adds	r7, #20
 8005026:	46bd      	mov	sp, r7
 8005028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800502c:	4770      	bx	lr
 800502e:	bf00      	nop
 8005030:	40012c00 	.word	0x40012c00

08005034 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005034:	b580      	push	{r7, lr}
 8005036:	b082      	sub	sp, #8
 8005038:	af00      	add	r7, sp, #0
 800503a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	2b00      	cmp	r3, #0
 8005040:	d101      	bne.n	8005046 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005042:	2301      	movs	r3, #1
 8005044:	e040      	b.n	80050c8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800504a:	2b00      	cmp	r3, #0
 800504c:	d106      	bne.n	800505c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	2200      	movs	r2, #0
 8005052:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005056:	6878      	ldr	r0, [r7, #4]
 8005058:	f7fd f8ea 	bl	8002230 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	2224      	movs	r2, #36	; 0x24
 8005060:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	681a      	ldr	r2, [r3, #0]
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	f022 0201 	bic.w	r2, r2, #1
 8005070:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005072:	6878      	ldr	r0, [r7, #4]
 8005074:	f000 f992 	bl	800539c <UART_SetConfig>
 8005078:	4603      	mov	r3, r0
 800507a:	2b01      	cmp	r3, #1
 800507c:	d101      	bne.n	8005082 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800507e:	2301      	movs	r3, #1
 8005080:	e022      	b.n	80050c8 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005086:	2b00      	cmp	r3, #0
 8005088:	d002      	beq.n	8005090 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800508a:	6878      	ldr	r0, [r7, #4]
 800508c:	f000 fbb2 	bl	80057f4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	685a      	ldr	r2, [r3, #4]
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800509e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	689a      	ldr	r2, [r3, #8]
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80050ae:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	681a      	ldr	r2, [r3, #0]
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	f042 0201 	orr.w	r2, r2, #1
 80050be:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80050c0:	6878      	ldr	r0, [r7, #4]
 80050c2:	f000 fc39 	bl	8005938 <UART_CheckIdleState>
 80050c6:	4603      	mov	r3, r0
}
 80050c8:	4618      	mov	r0, r3
 80050ca:	3708      	adds	r7, #8
 80050cc:	46bd      	mov	sp, r7
 80050ce:	bd80      	pop	{r7, pc}

080050d0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80050d0:	b580      	push	{r7, lr}
 80050d2:	b08a      	sub	sp, #40	; 0x28
 80050d4:	af02      	add	r7, sp, #8
 80050d6:	60f8      	str	r0, [r7, #12]
 80050d8:	60b9      	str	r1, [r7, #8]
 80050da:	603b      	str	r3, [r7, #0]
 80050dc:	4613      	mov	r3, r2
 80050de:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80050e4:	2b20      	cmp	r3, #32
 80050e6:	f040 8082 	bne.w	80051ee <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 80050ea:	68bb      	ldr	r3, [r7, #8]
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d002      	beq.n	80050f6 <HAL_UART_Transmit+0x26>
 80050f0:	88fb      	ldrh	r3, [r7, #6]
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d101      	bne.n	80050fa <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80050f6:	2301      	movs	r3, #1
 80050f8:	e07a      	b.n	80051f0 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8005100:	2b01      	cmp	r3, #1
 8005102:	d101      	bne.n	8005108 <HAL_UART_Transmit+0x38>
 8005104:	2302      	movs	r3, #2
 8005106:	e073      	b.n	80051f0 <HAL_UART_Transmit+0x120>
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	2201      	movs	r2, #1
 800510c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	2200      	movs	r2, #0
 8005114:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	2221      	movs	r2, #33	; 0x21
 800511c:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800511e:	f7fd fa93 	bl	8002648 <HAL_GetTick>
 8005122:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	88fa      	ldrh	r2, [r7, #6]
 8005128:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	88fa      	ldrh	r2, [r7, #6]
 8005130:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	689b      	ldr	r3, [r3, #8]
 8005138:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800513c:	d108      	bne.n	8005150 <HAL_UART_Transmit+0x80>
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	691b      	ldr	r3, [r3, #16]
 8005142:	2b00      	cmp	r3, #0
 8005144:	d104      	bne.n	8005150 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8005146:	2300      	movs	r3, #0
 8005148:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800514a:	68bb      	ldr	r3, [r7, #8]
 800514c:	61bb      	str	r3, [r7, #24]
 800514e:	e003      	b.n	8005158 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8005150:	68bb      	ldr	r3, [r7, #8]
 8005152:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005154:	2300      	movs	r3, #0
 8005156:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	2200      	movs	r2, #0
 800515c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8005160:	e02d      	b.n	80051be <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005162:	683b      	ldr	r3, [r7, #0]
 8005164:	9300      	str	r3, [sp, #0]
 8005166:	697b      	ldr	r3, [r7, #20]
 8005168:	2200      	movs	r2, #0
 800516a:	2180      	movs	r1, #128	; 0x80
 800516c:	68f8      	ldr	r0, [r7, #12]
 800516e:	f000 fc2c 	bl	80059ca <UART_WaitOnFlagUntilTimeout>
 8005172:	4603      	mov	r3, r0
 8005174:	2b00      	cmp	r3, #0
 8005176:	d001      	beq.n	800517c <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8005178:	2303      	movs	r3, #3
 800517a:	e039      	b.n	80051f0 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 800517c:	69fb      	ldr	r3, [r7, #28]
 800517e:	2b00      	cmp	r3, #0
 8005180:	d10b      	bne.n	800519a <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005182:	69bb      	ldr	r3, [r7, #24]
 8005184:	881a      	ldrh	r2, [r3, #0]
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800518e:	b292      	uxth	r2, r2
 8005190:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8005192:	69bb      	ldr	r3, [r7, #24]
 8005194:	3302      	adds	r3, #2
 8005196:	61bb      	str	r3, [r7, #24]
 8005198:	e008      	b.n	80051ac <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800519a:	69fb      	ldr	r3, [r7, #28]
 800519c:	781a      	ldrb	r2, [r3, #0]
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	b292      	uxth	r2, r2
 80051a4:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80051a6:	69fb      	ldr	r3, [r7, #28]
 80051a8:	3301      	adds	r3, #1
 80051aa:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80051b2:	b29b      	uxth	r3, r3
 80051b4:	3b01      	subs	r3, #1
 80051b6:	b29a      	uxth	r2, r3
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80051c4:	b29b      	uxth	r3, r3
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d1cb      	bne.n	8005162 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80051ca:	683b      	ldr	r3, [r7, #0]
 80051cc:	9300      	str	r3, [sp, #0]
 80051ce:	697b      	ldr	r3, [r7, #20]
 80051d0:	2200      	movs	r2, #0
 80051d2:	2140      	movs	r1, #64	; 0x40
 80051d4:	68f8      	ldr	r0, [r7, #12]
 80051d6:	f000 fbf8 	bl	80059ca <UART_WaitOnFlagUntilTimeout>
 80051da:	4603      	mov	r3, r0
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d001      	beq.n	80051e4 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 80051e0:	2303      	movs	r3, #3
 80051e2:	e005      	b.n	80051f0 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	2220      	movs	r2, #32
 80051e8:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 80051ea:	2300      	movs	r3, #0
 80051ec:	e000      	b.n	80051f0 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 80051ee:	2302      	movs	r3, #2
  }
}
 80051f0:	4618      	mov	r0, r3
 80051f2:	3720      	adds	r7, #32
 80051f4:	46bd      	mov	sp, r7
 80051f6:	bd80      	pop	{r7, pc}

080051f8 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80051f8:	b580      	push	{r7, lr}
 80051fa:	b08a      	sub	sp, #40	; 0x28
 80051fc:	af02      	add	r7, sp, #8
 80051fe:	60f8      	str	r0, [r7, #12]
 8005200:	60b9      	str	r1, [r7, #8]
 8005202:	603b      	str	r3, [r7, #0]
 8005204:	4613      	mov	r3, r2
 8005206:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800520c:	2b20      	cmp	r3, #32
 800520e:	f040 80bf 	bne.w	8005390 <HAL_UART_Receive+0x198>
  {
    if ((pData == NULL) || (Size == 0U))
 8005212:	68bb      	ldr	r3, [r7, #8]
 8005214:	2b00      	cmp	r3, #0
 8005216:	d002      	beq.n	800521e <HAL_UART_Receive+0x26>
 8005218:	88fb      	ldrh	r3, [r7, #6]
 800521a:	2b00      	cmp	r3, #0
 800521c:	d101      	bne.n	8005222 <HAL_UART_Receive+0x2a>
    {
      return  HAL_ERROR;
 800521e:	2301      	movs	r3, #1
 8005220:	e0b7      	b.n	8005392 <HAL_UART_Receive+0x19a>
    }

    __HAL_LOCK(huart);
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8005228:	2b01      	cmp	r3, #1
 800522a:	d101      	bne.n	8005230 <HAL_UART_Receive+0x38>
 800522c:	2302      	movs	r3, #2
 800522e:	e0b0      	b.n	8005392 <HAL_UART_Receive+0x19a>
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	2201      	movs	r2, #1
 8005234:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	2200      	movs	r2, #0
 800523c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	2222      	movs	r2, #34	; 0x22
 8005244:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	2200      	movs	r2, #0
 800524a:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800524c:	f7fd f9fc 	bl	8002648 <HAL_GetTick>
 8005250:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	88fa      	ldrh	r2, [r7, #6]
 8005256:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	88fa      	ldrh	r2, [r7, #6]
 800525e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	689b      	ldr	r3, [r3, #8]
 8005266:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800526a:	d10e      	bne.n	800528a <HAL_UART_Receive+0x92>
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	691b      	ldr	r3, [r3, #16]
 8005270:	2b00      	cmp	r3, #0
 8005272:	d105      	bne.n	8005280 <HAL_UART_Receive+0x88>
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	f240 12ff 	movw	r2, #511	; 0x1ff
 800527a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800527e:	e02d      	b.n	80052dc <HAL_UART_Receive+0xe4>
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	22ff      	movs	r2, #255	; 0xff
 8005284:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005288:	e028      	b.n	80052dc <HAL_UART_Receive+0xe4>
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	689b      	ldr	r3, [r3, #8]
 800528e:	2b00      	cmp	r3, #0
 8005290:	d10d      	bne.n	80052ae <HAL_UART_Receive+0xb6>
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	691b      	ldr	r3, [r3, #16]
 8005296:	2b00      	cmp	r3, #0
 8005298:	d104      	bne.n	80052a4 <HAL_UART_Receive+0xac>
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	22ff      	movs	r2, #255	; 0xff
 800529e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80052a2:	e01b      	b.n	80052dc <HAL_UART_Receive+0xe4>
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	227f      	movs	r2, #127	; 0x7f
 80052a8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80052ac:	e016      	b.n	80052dc <HAL_UART_Receive+0xe4>
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	689b      	ldr	r3, [r3, #8]
 80052b2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80052b6:	d10d      	bne.n	80052d4 <HAL_UART_Receive+0xdc>
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	691b      	ldr	r3, [r3, #16]
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d104      	bne.n	80052ca <HAL_UART_Receive+0xd2>
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	227f      	movs	r2, #127	; 0x7f
 80052c4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80052c8:	e008      	b.n	80052dc <HAL_UART_Receive+0xe4>
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	223f      	movs	r2, #63	; 0x3f
 80052ce:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80052d2:	e003      	b.n	80052dc <HAL_UART_Receive+0xe4>
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	2200      	movs	r2, #0
 80052d8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80052e2:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	689b      	ldr	r3, [r3, #8]
 80052e8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80052ec:	d108      	bne.n	8005300 <HAL_UART_Receive+0x108>
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	691b      	ldr	r3, [r3, #16]
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d104      	bne.n	8005300 <HAL_UART_Receive+0x108>
    {
      pdata8bits  = NULL;
 80052f6:	2300      	movs	r3, #0
 80052f8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80052fa:	68bb      	ldr	r3, [r7, #8]
 80052fc:	61bb      	str	r3, [r7, #24]
 80052fe:	e003      	b.n	8005308 <HAL_UART_Receive+0x110>
    }
    else
    {
      pdata8bits  = pData;
 8005300:	68bb      	ldr	r3, [r7, #8]
 8005302:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005304:	2300      	movs	r3, #0
 8005306:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	2200      	movs	r2, #0
 800530c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8005310:	e033      	b.n	800537a <HAL_UART_Receive+0x182>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8005312:	683b      	ldr	r3, [r7, #0]
 8005314:	9300      	str	r3, [sp, #0]
 8005316:	697b      	ldr	r3, [r7, #20]
 8005318:	2200      	movs	r2, #0
 800531a:	2120      	movs	r1, #32
 800531c:	68f8      	ldr	r0, [r7, #12]
 800531e:	f000 fb54 	bl	80059ca <UART_WaitOnFlagUntilTimeout>
 8005322:	4603      	mov	r3, r0
 8005324:	2b00      	cmp	r3, #0
 8005326:	d001      	beq.n	800532c <HAL_UART_Receive+0x134>
      {
        return HAL_TIMEOUT;
 8005328:	2303      	movs	r3, #3
 800532a:	e032      	b.n	8005392 <HAL_UART_Receive+0x19a>
      }
      if (pdata8bits == NULL)
 800532c:	69fb      	ldr	r3, [r7, #28]
 800532e:	2b00      	cmp	r3, #0
 8005330:	d10c      	bne.n	800534c <HAL_UART_Receive+0x154>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8005338:	b29a      	uxth	r2, r3
 800533a:	8a7b      	ldrh	r3, [r7, #18]
 800533c:	4013      	ands	r3, r2
 800533e:	b29a      	uxth	r2, r3
 8005340:	69bb      	ldr	r3, [r7, #24]
 8005342:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8005344:	69bb      	ldr	r3, [r7, #24]
 8005346:	3302      	adds	r3, #2
 8005348:	61bb      	str	r3, [r7, #24]
 800534a:	e00d      	b.n	8005368 <HAL_UART_Receive+0x170>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8005352:	b29b      	uxth	r3, r3
 8005354:	b2da      	uxtb	r2, r3
 8005356:	8a7b      	ldrh	r3, [r7, #18]
 8005358:	b2db      	uxtb	r3, r3
 800535a:	4013      	ands	r3, r2
 800535c:	b2da      	uxtb	r2, r3
 800535e:	69fb      	ldr	r3, [r7, #28]
 8005360:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8005362:	69fb      	ldr	r3, [r7, #28]
 8005364:	3301      	adds	r3, #1
 8005366:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800536e:	b29b      	uxth	r3, r3
 8005370:	3b01      	subs	r3, #1
 8005372:	b29a      	uxth	r2, r3
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005380:	b29b      	uxth	r3, r3
 8005382:	2b00      	cmp	r3, #0
 8005384:	d1c5      	bne.n	8005312 <HAL_UART_Receive+0x11a>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	2220      	movs	r2, #32
 800538a:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 800538c:	2300      	movs	r3, #0
 800538e:	e000      	b.n	8005392 <HAL_UART_Receive+0x19a>
  }
  else
  {
    return HAL_BUSY;
 8005390:	2302      	movs	r3, #2
  }
}
 8005392:	4618      	mov	r0, r3
 8005394:	3720      	adds	r7, #32
 8005396:	46bd      	mov	sp, r7
 8005398:	bd80      	pop	{r7, pc}
	...

0800539c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800539c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80053a0:	b08a      	sub	sp, #40	; 0x28
 80053a2:	af00      	add	r7, sp, #0
 80053a4:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80053a6:	2300      	movs	r3, #0
 80053a8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	689a      	ldr	r2, [r3, #8]
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	691b      	ldr	r3, [r3, #16]
 80053b4:	431a      	orrs	r2, r3
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	695b      	ldr	r3, [r3, #20]
 80053ba:	431a      	orrs	r2, r3
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	69db      	ldr	r3, [r3, #28]
 80053c0:	4313      	orrs	r3, r2
 80053c2:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	681a      	ldr	r2, [r3, #0]
 80053ca:	4bb4      	ldr	r3, [pc, #720]	; (800569c <UART_SetConfig+0x300>)
 80053cc:	4013      	ands	r3, r2
 80053ce:	68fa      	ldr	r2, [r7, #12]
 80053d0:	6812      	ldr	r2, [r2, #0]
 80053d2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80053d4:	430b      	orrs	r3, r1
 80053d6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	685b      	ldr	r3, [r3, #4]
 80053de:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	68da      	ldr	r2, [r3, #12]
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	430a      	orrs	r2, r1
 80053ec:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	699b      	ldr	r3, [r3, #24]
 80053f2:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	4aa9      	ldr	r2, [pc, #676]	; (80056a0 <UART_SetConfig+0x304>)
 80053fa:	4293      	cmp	r3, r2
 80053fc:	d004      	beq.n	8005408 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	6a1b      	ldr	r3, [r3, #32]
 8005402:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005404:	4313      	orrs	r3, r2
 8005406:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	689b      	ldr	r3, [r3, #8]
 800540e:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005418:	430a      	orrs	r2, r1
 800541a:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	4aa0      	ldr	r2, [pc, #640]	; (80056a4 <UART_SetConfig+0x308>)
 8005422:	4293      	cmp	r3, r2
 8005424:	d126      	bne.n	8005474 <UART_SetConfig+0xd8>
 8005426:	4ba0      	ldr	r3, [pc, #640]	; (80056a8 <UART_SetConfig+0x30c>)
 8005428:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800542c:	f003 0303 	and.w	r3, r3, #3
 8005430:	2b03      	cmp	r3, #3
 8005432:	d81b      	bhi.n	800546c <UART_SetConfig+0xd0>
 8005434:	a201      	add	r2, pc, #4	; (adr r2, 800543c <UART_SetConfig+0xa0>)
 8005436:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800543a:	bf00      	nop
 800543c:	0800544d 	.word	0x0800544d
 8005440:	0800545d 	.word	0x0800545d
 8005444:	08005455 	.word	0x08005455
 8005448:	08005465 	.word	0x08005465
 800544c:	2301      	movs	r3, #1
 800544e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005452:	e080      	b.n	8005556 <UART_SetConfig+0x1ba>
 8005454:	2302      	movs	r3, #2
 8005456:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800545a:	e07c      	b.n	8005556 <UART_SetConfig+0x1ba>
 800545c:	2304      	movs	r3, #4
 800545e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005462:	e078      	b.n	8005556 <UART_SetConfig+0x1ba>
 8005464:	2308      	movs	r3, #8
 8005466:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800546a:	e074      	b.n	8005556 <UART_SetConfig+0x1ba>
 800546c:	2310      	movs	r3, #16
 800546e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005472:	e070      	b.n	8005556 <UART_SetConfig+0x1ba>
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	4a8c      	ldr	r2, [pc, #560]	; (80056ac <UART_SetConfig+0x310>)
 800547a:	4293      	cmp	r3, r2
 800547c:	d138      	bne.n	80054f0 <UART_SetConfig+0x154>
 800547e:	4b8a      	ldr	r3, [pc, #552]	; (80056a8 <UART_SetConfig+0x30c>)
 8005480:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005484:	f003 030c 	and.w	r3, r3, #12
 8005488:	2b0c      	cmp	r3, #12
 800548a:	d82d      	bhi.n	80054e8 <UART_SetConfig+0x14c>
 800548c:	a201      	add	r2, pc, #4	; (adr r2, 8005494 <UART_SetConfig+0xf8>)
 800548e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005492:	bf00      	nop
 8005494:	080054c9 	.word	0x080054c9
 8005498:	080054e9 	.word	0x080054e9
 800549c:	080054e9 	.word	0x080054e9
 80054a0:	080054e9 	.word	0x080054e9
 80054a4:	080054d9 	.word	0x080054d9
 80054a8:	080054e9 	.word	0x080054e9
 80054ac:	080054e9 	.word	0x080054e9
 80054b0:	080054e9 	.word	0x080054e9
 80054b4:	080054d1 	.word	0x080054d1
 80054b8:	080054e9 	.word	0x080054e9
 80054bc:	080054e9 	.word	0x080054e9
 80054c0:	080054e9 	.word	0x080054e9
 80054c4:	080054e1 	.word	0x080054e1
 80054c8:	2300      	movs	r3, #0
 80054ca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80054ce:	e042      	b.n	8005556 <UART_SetConfig+0x1ba>
 80054d0:	2302      	movs	r3, #2
 80054d2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80054d6:	e03e      	b.n	8005556 <UART_SetConfig+0x1ba>
 80054d8:	2304      	movs	r3, #4
 80054da:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80054de:	e03a      	b.n	8005556 <UART_SetConfig+0x1ba>
 80054e0:	2308      	movs	r3, #8
 80054e2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80054e6:	e036      	b.n	8005556 <UART_SetConfig+0x1ba>
 80054e8:	2310      	movs	r3, #16
 80054ea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80054ee:	e032      	b.n	8005556 <UART_SetConfig+0x1ba>
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	4a6a      	ldr	r2, [pc, #424]	; (80056a0 <UART_SetConfig+0x304>)
 80054f6:	4293      	cmp	r3, r2
 80054f8:	d12a      	bne.n	8005550 <UART_SetConfig+0x1b4>
 80054fa:	4b6b      	ldr	r3, [pc, #428]	; (80056a8 <UART_SetConfig+0x30c>)
 80054fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005500:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005504:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005508:	d01a      	beq.n	8005540 <UART_SetConfig+0x1a4>
 800550a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800550e:	d81b      	bhi.n	8005548 <UART_SetConfig+0x1ac>
 8005510:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005514:	d00c      	beq.n	8005530 <UART_SetConfig+0x194>
 8005516:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800551a:	d815      	bhi.n	8005548 <UART_SetConfig+0x1ac>
 800551c:	2b00      	cmp	r3, #0
 800551e:	d003      	beq.n	8005528 <UART_SetConfig+0x18c>
 8005520:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005524:	d008      	beq.n	8005538 <UART_SetConfig+0x19c>
 8005526:	e00f      	b.n	8005548 <UART_SetConfig+0x1ac>
 8005528:	2300      	movs	r3, #0
 800552a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800552e:	e012      	b.n	8005556 <UART_SetConfig+0x1ba>
 8005530:	2302      	movs	r3, #2
 8005532:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005536:	e00e      	b.n	8005556 <UART_SetConfig+0x1ba>
 8005538:	2304      	movs	r3, #4
 800553a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800553e:	e00a      	b.n	8005556 <UART_SetConfig+0x1ba>
 8005540:	2308      	movs	r3, #8
 8005542:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005546:	e006      	b.n	8005556 <UART_SetConfig+0x1ba>
 8005548:	2310      	movs	r3, #16
 800554a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800554e:	e002      	b.n	8005556 <UART_SetConfig+0x1ba>
 8005550:	2310      	movs	r3, #16
 8005552:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	4a51      	ldr	r2, [pc, #324]	; (80056a0 <UART_SetConfig+0x304>)
 800555c:	4293      	cmp	r3, r2
 800555e:	d17a      	bne.n	8005656 <UART_SetConfig+0x2ba>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005560:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005564:	2b08      	cmp	r3, #8
 8005566:	d824      	bhi.n	80055b2 <UART_SetConfig+0x216>
 8005568:	a201      	add	r2, pc, #4	; (adr r2, 8005570 <UART_SetConfig+0x1d4>)
 800556a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800556e:	bf00      	nop
 8005570:	08005595 	.word	0x08005595
 8005574:	080055b3 	.word	0x080055b3
 8005578:	0800559d 	.word	0x0800559d
 800557c:	080055b3 	.word	0x080055b3
 8005580:	080055a3 	.word	0x080055a3
 8005584:	080055b3 	.word	0x080055b3
 8005588:	080055b3 	.word	0x080055b3
 800558c:	080055b3 	.word	0x080055b3
 8005590:	080055ab 	.word	0x080055ab
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005594:	f7fe f928 	bl	80037e8 <HAL_RCC_GetPCLK1Freq>
 8005598:	61f8      	str	r0, [r7, #28]
        break;
 800559a:	e010      	b.n	80055be <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800559c:	4b44      	ldr	r3, [pc, #272]	; (80056b0 <UART_SetConfig+0x314>)
 800559e:	61fb      	str	r3, [r7, #28]
        break;
 80055a0:	e00d      	b.n	80055be <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80055a2:	f7fe f889 	bl	80036b8 <HAL_RCC_GetSysClockFreq>
 80055a6:	61f8      	str	r0, [r7, #28]
        break;
 80055a8:	e009      	b.n	80055be <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80055aa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80055ae:	61fb      	str	r3, [r7, #28]
        break;
 80055b0:	e005      	b.n	80055be <UART_SetConfig+0x222>
      default:
        pclk = 0U;
 80055b2:	2300      	movs	r3, #0
 80055b4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80055b6:	2301      	movs	r3, #1
 80055b8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80055bc:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80055be:	69fb      	ldr	r3, [r7, #28]
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	f000 8107 	beq.w	80057d4 <UART_SetConfig+0x438>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	685a      	ldr	r2, [r3, #4]
 80055ca:	4613      	mov	r3, r2
 80055cc:	005b      	lsls	r3, r3, #1
 80055ce:	4413      	add	r3, r2
 80055d0:	69fa      	ldr	r2, [r7, #28]
 80055d2:	429a      	cmp	r2, r3
 80055d4:	d305      	bcc.n	80055e2 <UART_SetConfig+0x246>
          (pclk > (4096U * huart->Init.BaudRate)))
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	685b      	ldr	r3, [r3, #4]
 80055da:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80055dc:	69fa      	ldr	r2, [r7, #28]
 80055de:	429a      	cmp	r2, r3
 80055e0:	d903      	bls.n	80055ea <UART_SetConfig+0x24e>
      {
        ret = HAL_ERROR;
 80055e2:	2301      	movs	r3, #1
 80055e4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80055e8:	e0f4      	b.n	80057d4 <UART_SetConfig+0x438>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80055ea:	69fb      	ldr	r3, [r7, #28]
 80055ec:	2200      	movs	r2, #0
 80055ee:	461c      	mov	r4, r3
 80055f0:	4615      	mov	r5, r2
 80055f2:	f04f 0200 	mov.w	r2, #0
 80055f6:	f04f 0300 	mov.w	r3, #0
 80055fa:	022b      	lsls	r3, r5, #8
 80055fc:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8005600:	0222      	lsls	r2, r4, #8
 8005602:	68f9      	ldr	r1, [r7, #12]
 8005604:	6849      	ldr	r1, [r1, #4]
 8005606:	0849      	lsrs	r1, r1, #1
 8005608:	2000      	movs	r0, #0
 800560a:	4688      	mov	r8, r1
 800560c:	4681      	mov	r9, r0
 800560e:	eb12 0a08 	adds.w	sl, r2, r8
 8005612:	eb43 0b09 	adc.w	fp, r3, r9
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	685b      	ldr	r3, [r3, #4]
 800561a:	2200      	movs	r2, #0
 800561c:	603b      	str	r3, [r7, #0]
 800561e:	607a      	str	r2, [r7, #4]
 8005620:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005624:	4650      	mov	r0, sl
 8005626:	4659      	mov	r1, fp
 8005628:	f7fb fb2e 	bl	8000c88 <__aeabi_uldivmod>
 800562c:	4602      	mov	r2, r0
 800562e:	460b      	mov	r3, r1
 8005630:	4613      	mov	r3, r2
 8005632:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005634:	69bb      	ldr	r3, [r7, #24]
 8005636:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800563a:	d308      	bcc.n	800564e <UART_SetConfig+0x2b2>
 800563c:	69bb      	ldr	r3, [r7, #24]
 800563e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005642:	d204      	bcs.n	800564e <UART_SetConfig+0x2b2>
        {
          huart->Instance->BRR = usartdiv;
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	69ba      	ldr	r2, [r7, #24]
 800564a:	60da      	str	r2, [r3, #12]
 800564c:	e0c2      	b.n	80057d4 <UART_SetConfig+0x438>
        }
        else
        {
          ret = HAL_ERROR;
 800564e:	2301      	movs	r3, #1
 8005650:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8005654:	e0be      	b.n	80057d4 <UART_SetConfig+0x438>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	69db      	ldr	r3, [r3, #28]
 800565a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800565e:	d16a      	bne.n	8005736 <UART_SetConfig+0x39a>
  {
    switch (clocksource)
 8005660:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005664:	2b08      	cmp	r3, #8
 8005666:	d834      	bhi.n	80056d2 <UART_SetConfig+0x336>
 8005668:	a201      	add	r2, pc, #4	; (adr r2, 8005670 <UART_SetConfig+0x2d4>)
 800566a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800566e:	bf00      	nop
 8005670:	08005695 	.word	0x08005695
 8005674:	080056b5 	.word	0x080056b5
 8005678:	080056bd 	.word	0x080056bd
 800567c:	080056d3 	.word	0x080056d3
 8005680:	080056c3 	.word	0x080056c3
 8005684:	080056d3 	.word	0x080056d3
 8005688:	080056d3 	.word	0x080056d3
 800568c:	080056d3 	.word	0x080056d3
 8005690:	080056cb 	.word	0x080056cb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005694:	f7fe f8a8 	bl	80037e8 <HAL_RCC_GetPCLK1Freq>
 8005698:	61f8      	str	r0, [r7, #28]
        break;
 800569a:	e020      	b.n	80056de <UART_SetConfig+0x342>
 800569c:	efff69f3 	.word	0xefff69f3
 80056a0:	40008000 	.word	0x40008000
 80056a4:	40013800 	.word	0x40013800
 80056a8:	40021000 	.word	0x40021000
 80056ac:	40004400 	.word	0x40004400
 80056b0:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80056b4:	f7fe f8ae 	bl	8003814 <HAL_RCC_GetPCLK2Freq>
 80056b8:	61f8      	str	r0, [r7, #28]
        break;
 80056ba:	e010      	b.n	80056de <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80056bc:	4b4c      	ldr	r3, [pc, #304]	; (80057f0 <UART_SetConfig+0x454>)
 80056be:	61fb      	str	r3, [r7, #28]
        break;
 80056c0:	e00d      	b.n	80056de <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80056c2:	f7fd fff9 	bl	80036b8 <HAL_RCC_GetSysClockFreq>
 80056c6:	61f8      	str	r0, [r7, #28]
        break;
 80056c8:	e009      	b.n	80056de <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80056ca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80056ce:	61fb      	str	r3, [r7, #28]
        break;
 80056d0:	e005      	b.n	80056de <UART_SetConfig+0x342>
      default:
        pclk = 0U;
 80056d2:	2300      	movs	r3, #0
 80056d4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80056d6:	2301      	movs	r3, #1
 80056d8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80056dc:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80056de:	69fb      	ldr	r3, [r7, #28]
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d077      	beq.n	80057d4 <UART_SetConfig+0x438>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80056e4:	69fb      	ldr	r3, [r7, #28]
 80056e6:	005a      	lsls	r2, r3, #1
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	685b      	ldr	r3, [r3, #4]
 80056ec:	085b      	lsrs	r3, r3, #1
 80056ee:	441a      	add	r2, r3
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	685b      	ldr	r3, [r3, #4]
 80056f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80056f8:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80056fa:	69bb      	ldr	r3, [r7, #24]
 80056fc:	2b0f      	cmp	r3, #15
 80056fe:	d916      	bls.n	800572e <UART_SetConfig+0x392>
 8005700:	69bb      	ldr	r3, [r7, #24]
 8005702:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005706:	d212      	bcs.n	800572e <UART_SetConfig+0x392>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005708:	69bb      	ldr	r3, [r7, #24]
 800570a:	b29b      	uxth	r3, r3
 800570c:	f023 030f 	bic.w	r3, r3, #15
 8005710:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005712:	69bb      	ldr	r3, [r7, #24]
 8005714:	085b      	lsrs	r3, r3, #1
 8005716:	b29b      	uxth	r3, r3
 8005718:	f003 0307 	and.w	r3, r3, #7
 800571c:	b29a      	uxth	r2, r3
 800571e:	8afb      	ldrh	r3, [r7, #22]
 8005720:	4313      	orrs	r3, r2
 8005722:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	8afa      	ldrh	r2, [r7, #22]
 800572a:	60da      	str	r2, [r3, #12]
 800572c:	e052      	b.n	80057d4 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 800572e:	2301      	movs	r3, #1
 8005730:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8005734:	e04e      	b.n	80057d4 <UART_SetConfig+0x438>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005736:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800573a:	2b08      	cmp	r3, #8
 800573c:	d827      	bhi.n	800578e <UART_SetConfig+0x3f2>
 800573e:	a201      	add	r2, pc, #4	; (adr r2, 8005744 <UART_SetConfig+0x3a8>)
 8005740:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005744:	08005769 	.word	0x08005769
 8005748:	08005771 	.word	0x08005771
 800574c:	08005779 	.word	0x08005779
 8005750:	0800578f 	.word	0x0800578f
 8005754:	0800577f 	.word	0x0800577f
 8005758:	0800578f 	.word	0x0800578f
 800575c:	0800578f 	.word	0x0800578f
 8005760:	0800578f 	.word	0x0800578f
 8005764:	08005787 	.word	0x08005787
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005768:	f7fe f83e 	bl	80037e8 <HAL_RCC_GetPCLK1Freq>
 800576c:	61f8      	str	r0, [r7, #28]
        break;
 800576e:	e014      	b.n	800579a <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005770:	f7fe f850 	bl	8003814 <HAL_RCC_GetPCLK2Freq>
 8005774:	61f8      	str	r0, [r7, #28]
        break;
 8005776:	e010      	b.n	800579a <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005778:	4b1d      	ldr	r3, [pc, #116]	; (80057f0 <UART_SetConfig+0x454>)
 800577a:	61fb      	str	r3, [r7, #28]
        break;
 800577c:	e00d      	b.n	800579a <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800577e:	f7fd ff9b 	bl	80036b8 <HAL_RCC_GetSysClockFreq>
 8005782:	61f8      	str	r0, [r7, #28]
        break;
 8005784:	e009      	b.n	800579a <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005786:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800578a:	61fb      	str	r3, [r7, #28]
        break;
 800578c:	e005      	b.n	800579a <UART_SetConfig+0x3fe>
      default:
        pclk = 0U;
 800578e:	2300      	movs	r3, #0
 8005790:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005792:	2301      	movs	r3, #1
 8005794:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8005798:	bf00      	nop
    }

    if (pclk != 0U)
 800579a:	69fb      	ldr	r3, [r7, #28]
 800579c:	2b00      	cmp	r3, #0
 800579e:	d019      	beq.n	80057d4 <UART_SetConfig+0x438>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	685b      	ldr	r3, [r3, #4]
 80057a4:	085a      	lsrs	r2, r3, #1
 80057a6:	69fb      	ldr	r3, [r7, #28]
 80057a8:	441a      	add	r2, r3
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	685b      	ldr	r3, [r3, #4]
 80057ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80057b2:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80057b4:	69bb      	ldr	r3, [r7, #24]
 80057b6:	2b0f      	cmp	r3, #15
 80057b8:	d909      	bls.n	80057ce <UART_SetConfig+0x432>
 80057ba:	69bb      	ldr	r3, [r7, #24]
 80057bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80057c0:	d205      	bcs.n	80057ce <UART_SetConfig+0x432>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80057c2:	69bb      	ldr	r3, [r7, #24]
 80057c4:	b29a      	uxth	r2, r3
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	60da      	str	r2, [r3, #12]
 80057cc:	e002      	b.n	80057d4 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 80057ce:	2301      	movs	r3, #1
 80057d0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	2200      	movs	r2, #0
 80057d8:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	2200      	movs	r2, #0
 80057de:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80057e0:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 80057e4:	4618      	mov	r0, r3
 80057e6:	3728      	adds	r7, #40	; 0x28
 80057e8:	46bd      	mov	sp, r7
 80057ea:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80057ee:	bf00      	nop
 80057f0:	00f42400 	.word	0x00f42400

080057f4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80057f4:	b480      	push	{r7}
 80057f6:	b083      	sub	sp, #12
 80057f8:	af00      	add	r7, sp, #0
 80057fa:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005800:	f003 0301 	and.w	r3, r3, #1
 8005804:	2b00      	cmp	r3, #0
 8005806:	d00a      	beq.n	800581e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	685b      	ldr	r3, [r3, #4]
 800580e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	430a      	orrs	r2, r1
 800581c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005822:	f003 0302 	and.w	r3, r3, #2
 8005826:	2b00      	cmp	r3, #0
 8005828:	d00a      	beq.n	8005840 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	685b      	ldr	r3, [r3, #4]
 8005830:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	430a      	orrs	r2, r1
 800583e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005844:	f003 0304 	and.w	r3, r3, #4
 8005848:	2b00      	cmp	r3, #0
 800584a:	d00a      	beq.n	8005862 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	685b      	ldr	r3, [r3, #4]
 8005852:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	430a      	orrs	r2, r1
 8005860:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005866:	f003 0308 	and.w	r3, r3, #8
 800586a:	2b00      	cmp	r3, #0
 800586c:	d00a      	beq.n	8005884 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	685b      	ldr	r3, [r3, #4]
 8005874:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	430a      	orrs	r2, r1
 8005882:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005888:	f003 0310 	and.w	r3, r3, #16
 800588c:	2b00      	cmp	r3, #0
 800588e:	d00a      	beq.n	80058a6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	689b      	ldr	r3, [r3, #8]
 8005896:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	430a      	orrs	r2, r1
 80058a4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058aa:	f003 0320 	and.w	r3, r3, #32
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d00a      	beq.n	80058c8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	689b      	ldr	r3, [r3, #8]
 80058b8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	430a      	orrs	r2, r1
 80058c6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d01a      	beq.n	800590a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	685b      	ldr	r3, [r3, #4]
 80058da:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	430a      	orrs	r2, r1
 80058e8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058ee:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80058f2:	d10a      	bne.n	800590a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	685b      	ldr	r3, [r3, #4]
 80058fa:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	430a      	orrs	r2, r1
 8005908:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800590e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005912:	2b00      	cmp	r3, #0
 8005914:	d00a      	beq.n	800592c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	685b      	ldr	r3, [r3, #4]
 800591c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	430a      	orrs	r2, r1
 800592a:	605a      	str	r2, [r3, #4]
  }
}
 800592c:	bf00      	nop
 800592e:	370c      	adds	r7, #12
 8005930:	46bd      	mov	sp, r7
 8005932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005936:	4770      	bx	lr

08005938 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005938:	b580      	push	{r7, lr}
 800593a:	b086      	sub	sp, #24
 800593c:	af02      	add	r7, sp, #8
 800593e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	2200      	movs	r2, #0
 8005944:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005948:	f7fc fe7e 	bl	8002648 <HAL_GetTick>
 800594c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	f003 0308 	and.w	r3, r3, #8
 8005958:	2b08      	cmp	r3, #8
 800595a:	d10e      	bne.n	800597a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800595c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005960:	9300      	str	r3, [sp, #0]
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	2200      	movs	r2, #0
 8005966:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800596a:	6878      	ldr	r0, [r7, #4]
 800596c:	f000 f82d 	bl	80059ca <UART_WaitOnFlagUntilTimeout>
 8005970:	4603      	mov	r3, r0
 8005972:	2b00      	cmp	r3, #0
 8005974:	d001      	beq.n	800597a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005976:	2303      	movs	r3, #3
 8005978:	e023      	b.n	80059c2 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	f003 0304 	and.w	r3, r3, #4
 8005984:	2b04      	cmp	r3, #4
 8005986:	d10e      	bne.n	80059a6 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005988:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800598c:	9300      	str	r3, [sp, #0]
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	2200      	movs	r2, #0
 8005992:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005996:	6878      	ldr	r0, [r7, #4]
 8005998:	f000 f817 	bl	80059ca <UART_WaitOnFlagUntilTimeout>
 800599c:	4603      	mov	r3, r0
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d001      	beq.n	80059a6 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80059a2:	2303      	movs	r3, #3
 80059a4:	e00d      	b.n	80059c2 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	2220      	movs	r2, #32
 80059aa:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	2220      	movs	r2, #32
 80059b0:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	2200      	movs	r2, #0
 80059b6:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	2200      	movs	r2, #0
 80059bc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80059c0:	2300      	movs	r3, #0
}
 80059c2:	4618      	mov	r0, r3
 80059c4:	3710      	adds	r7, #16
 80059c6:	46bd      	mov	sp, r7
 80059c8:	bd80      	pop	{r7, pc}

080059ca <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80059ca:	b580      	push	{r7, lr}
 80059cc:	b09c      	sub	sp, #112	; 0x70
 80059ce:	af00      	add	r7, sp, #0
 80059d0:	60f8      	str	r0, [r7, #12]
 80059d2:	60b9      	str	r1, [r7, #8]
 80059d4:	603b      	str	r3, [r7, #0]
 80059d6:	4613      	mov	r3, r2
 80059d8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80059da:	e0a5      	b.n	8005b28 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80059dc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80059de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80059e2:	f000 80a1 	beq.w	8005b28 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80059e6:	f7fc fe2f 	bl	8002648 <HAL_GetTick>
 80059ea:	4602      	mov	r2, r0
 80059ec:	683b      	ldr	r3, [r7, #0]
 80059ee:	1ad3      	subs	r3, r2, r3
 80059f0:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80059f2:	429a      	cmp	r2, r3
 80059f4:	d302      	bcc.n	80059fc <UART_WaitOnFlagUntilTimeout+0x32>
 80059f6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d13e      	bne.n	8005a7a <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a02:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005a04:	e853 3f00 	ldrex	r3, [r3]
 8005a08:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8005a0a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005a0c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005a10:	667b      	str	r3, [r7, #100]	; 0x64
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	461a      	mov	r2, r3
 8005a18:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005a1a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005a1c:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a1e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005a20:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005a22:	e841 2300 	strex	r3, r2, [r1]
 8005a26:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8005a28:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d1e6      	bne.n	80059fc <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	3308      	adds	r3, #8
 8005a34:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a36:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005a38:	e853 3f00 	ldrex	r3, [r3]
 8005a3c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005a3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a40:	f023 0301 	bic.w	r3, r3, #1
 8005a44:	663b      	str	r3, [r7, #96]	; 0x60
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	3308      	adds	r3, #8
 8005a4c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005a4e:	64ba      	str	r2, [r7, #72]	; 0x48
 8005a50:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a52:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005a54:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005a56:	e841 2300 	strex	r3, r2, [r1]
 8005a5a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005a5c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d1e5      	bne.n	8005a2e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	2220      	movs	r2, #32
 8005a66:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	2220      	movs	r2, #32
 8005a6c:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	2200      	movs	r2, #0
 8005a72:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8005a76:	2303      	movs	r3, #3
 8005a78:	e067      	b.n	8005b4a <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	f003 0304 	and.w	r3, r3, #4
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d04f      	beq.n	8005b28 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	69db      	ldr	r3, [r3, #28]
 8005a8e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005a92:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005a96:	d147      	bne.n	8005b28 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005aa0:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005aa8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005aaa:	e853 3f00 	ldrex	r3, [r3]
 8005aae:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005ab0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ab2:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005ab6:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	461a      	mov	r2, r3
 8005abe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005ac0:	637b      	str	r3, [r7, #52]	; 0x34
 8005ac2:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ac4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005ac6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005ac8:	e841 2300 	strex	r3, r2, [r1]
 8005acc:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005ace:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d1e6      	bne.n	8005aa2 <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	3308      	adds	r3, #8
 8005ada:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005adc:	697b      	ldr	r3, [r7, #20]
 8005ade:	e853 3f00 	ldrex	r3, [r3]
 8005ae2:	613b      	str	r3, [r7, #16]
   return(result);
 8005ae4:	693b      	ldr	r3, [r7, #16]
 8005ae6:	f023 0301 	bic.w	r3, r3, #1
 8005aea:	66bb      	str	r3, [r7, #104]	; 0x68
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	3308      	adds	r3, #8
 8005af2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005af4:	623a      	str	r2, [r7, #32]
 8005af6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005af8:	69f9      	ldr	r1, [r7, #28]
 8005afa:	6a3a      	ldr	r2, [r7, #32]
 8005afc:	e841 2300 	strex	r3, r2, [r1]
 8005b00:	61bb      	str	r3, [r7, #24]
   return(result);
 8005b02:	69bb      	ldr	r3, [r7, #24]
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d1e5      	bne.n	8005ad4 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	2220      	movs	r2, #32
 8005b0c:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	2220      	movs	r2, #32
 8005b12:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	2220      	movs	r2, #32
 8005b18:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	2200      	movs	r2, #0
 8005b20:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8005b24:	2303      	movs	r3, #3
 8005b26:	e010      	b.n	8005b4a <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	69da      	ldr	r2, [r3, #28]
 8005b2e:	68bb      	ldr	r3, [r7, #8]
 8005b30:	4013      	ands	r3, r2
 8005b32:	68ba      	ldr	r2, [r7, #8]
 8005b34:	429a      	cmp	r2, r3
 8005b36:	bf0c      	ite	eq
 8005b38:	2301      	moveq	r3, #1
 8005b3a:	2300      	movne	r3, #0
 8005b3c:	b2db      	uxtb	r3, r3
 8005b3e:	461a      	mov	r2, r3
 8005b40:	79fb      	ldrb	r3, [r7, #7]
 8005b42:	429a      	cmp	r2, r3
 8005b44:	f43f af4a 	beq.w	80059dc <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005b48:	2300      	movs	r3, #0
}
 8005b4a:	4618      	mov	r0, r3
 8005b4c:	3770      	adds	r7, #112	; 0x70
 8005b4e:	46bd      	mov	sp, r7
 8005b50:	bd80      	pop	{r7, pc}
	...

08005b54 <__errno>:
 8005b54:	4b01      	ldr	r3, [pc, #4]	; (8005b5c <__errno+0x8>)
 8005b56:	6818      	ldr	r0, [r3, #0]
 8005b58:	4770      	bx	lr
 8005b5a:	bf00      	nop
 8005b5c:	2000000c 	.word	0x2000000c

08005b60 <__libc_init_array>:
 8005b60:	b570      	push	{r4, r5, r6, lr}
 8005b62:	4d0d      	ldr	r5, [pc, #52]	; (8005b98 <__libc_init_array+0x38>)
 8005b64:	4c0d      	ldr	r4, [pc, #52]	; (8005b9c <__libc_init_array+0x3c>)
 8005b66:	1b64      	subs	r4, r4, r5
 8005b68:	10a4      	asrs	r4, r4, #2
 8005b6a:	2600      	movs	r6, #0
 8005b6c:	42a6      	cmp	r6, r4
 8005b6e:	d109      	bne.n	8005b84 <__libc_init_array+0x24>
 8005b70:	4d0b      	ldr	r5, [pc, #44]	; (8005ba0 <__libc_init_array+0x40>)
 8005b72:	4c0c      	ldr	r4, [pc, #48]	; (8005ba4 <__libc_init_array+0x44>)
 8005b74:	f005 face 	bl	800b114 <_init>
 8005b78:	1b64      	subs	r4, r4, r5
 8005b7a:	10a4      	asrs	r4, r4, #2
 8005b7c:	2600      	movs	r6, #0
 8005b7e:	42a6      	cmp	r6, r4
 8005b80:	d105      	bne.n	8005b8e <__libc_init_array+0x2e>
 8005b82:	bd70      	pop	{r4, r5, r6, pc}
 8005b84:	f855 3b04 	ldr.w	r3, [r5], #4
 8005b88:	4798      	blx	r3
 8005b8a:	3601      	adds	r6, #1
 8005b8c:	e7ee      	b.n	8005b6c <__libc_init_array+0xc>
 8005b8e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005b92:	4798      	blx	r3
 8005b94:	3601      	adds	r6, #1
 8005b96:	e7f2      	b.n	8005b7e <__libc_init_array+0x1e>
 8005b98:	0800c3b4 	.word	0x0800c3b4
 8005b9c:	0800c3b4 	.word	0x0800c3b4
 8005ba0:	0800c3b4 	.word	0x0800c3b4
 8005ba4:	0800c3b8 	.word	0x0800c3b8

08005ba8 <memset>:
 8005ba8:	4402      	add	r2, r0
 8005baa:	4603      	mov	r3, r0
 8005bac:	4293      	cmp	r3, r2
 8005bae:	d100      	bne.n	8005bb2 <memset+0xa>
 8005bb0:	4770      	bx	lr
 8005bb2:	f803 1b01 	strb.w	r1, [r3], #1
 8005bb6:	e7f9      	b.n	8005bac <memset+0x4>

08005bb8 <__cvt>:
 8005bb8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005bbc:	ec55 4b10 	vmov	r4, r5, d0
 8005bc0:	2d00      	cmp	r5, #0
 8005bc2:	460e      	mov	r6, r1
 8005bc4:	4619      	mov	r1, r3
 8005bc6:	462b      	mov	r3, r5
 8005bc8:	bfbb      	ittet	lt
 8005bca:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8005bce:	461d      	movlt	r5, r3
 8005bd0:	2300      	movge	r3, #0
 8005bd2:	232d      	movlt	r3, #45	; 0x2d
 8005bd4:	700b      	strb	r3, [r1, #0]
 8005bd6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005bd8:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8005bdc:	4691      	mov	r9, r2
 8005bde:	f023 0820 	bic.w	r8, r3, #32
 8005be2:	bfbc      	itt	lt
 8005be4:	4622      	movlt	r2, r4
 8005be6:	4614      	movlt	r4, r2
 8005be8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005bec:	d005      	beq.n	8005bfa <__cvt+0x42>
 8005bee:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8005bf2:	d100      	bne.n	8005bf6 <__cvt+0x3e>
 8005bf4:	3601      	adds	r6, #1
 8005bf6:	2102      	movs	r1, #2
 8005bf8:	e000      	b.n	8005bfc <__cvt+0x44>
 8005bfa:	2103      	movs	r1, #3
 8005bfc:	ab03      	add	r3, sp, #12
 8005bfe:	9301      	str	r3, [sp, #4]
 8005c00:	ab02      	add	r3, sp, #8
 8005c02:	9300      	str	r3, [sp, #0]
 8005c04:	ec45 4b10 	vmov	d0, r4, r5
 8005c08:	4653      	mov	r3, sl
 8005c0a:	4632      	mov	r2, r6
 8005c0c:	f001 ff48 	bl	8007aa0 <_dtoa_r>
 8005c10:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8005c14:	4607      	mov	r7, r0
 8005c16:	d102      	bne.n	8005c1e <__cvt+0x66>
 8005c18:	f019 0f01 	tst.w	r9, #1
 8005c1c:	d022      	beq.n	8005c64 <__cvt+0xac>
 8005c1e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005c22:	eb07 0906 	add.w	r9, r7, r6
 8005c26:	d110      	bne.n	8005c4a <__cvt+0x92>
 8005c28:	783b      	ldrb	r3, [r7, #0]
 8005c2a:	2b30      	cmp	r3, #48	; 0x30
 8005c2c:	d10a      	bne.n	8005c44 <__cvt+0x8c>
 8005c2e:	2200      	movs	r2, #0
 8005c30:	2300      	movs	r3, #0
 8005c32:	4620      	mov	r0, r4
 8005c34:	4629      	mov	r1, r5
 8005c36:	f7fa ff47 	bl	8000ac8 <__aeabi_dcmpeq>
 8005c3a:	b918      	cbnz	r0, 8005c44 <__cvt+0x8c>
 8005c3c:	f1c6 0601 	rsb	r6, r6, #1
 8005c40:	f8ca 6000 	str.w	r6, [sl]
 8005c44:	f8da 3000 	ldr.w	r3, [sl]
 8005c48:	4499      	add	r9, r3
 8005c4a:	2200      	movs	r2, #0
 8005c4c:	2300      	movs	r3, #0
 8005c4e:	4620      	mov	r0, r4
 8005c50:	4629      	mov	r1, r5
 8005c52:	f7fa ff39 	bl	8000ac8 <__aeabi_dcmpeq>
 8005c56:	b108      	cbz	r0, 8005c5c <__cvt+0xa4>
 8005c58:	f8cd 900c 	str.w	r9, [sp, #12]
 8005c5c:	2230      	movs	r2, #48	; 0x30
 8005c5e:	9b03      	ldr	r3, [sp, #12]
 8005c60:	454b      	cmp	r3, r9
 8005c62:	d307      	bcc.n	8005c74 <__cvt+0xbc>
 8005c64:	9b03      	ldr	r3, [sp, #12]
 8005c66:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005c68:	1bdb      	subs	r3, r3, r7
 8005c6a:	4638      	mov	r0, r7
 8005c6c:	6013      	str	r3, [r2, #0]
 8005c6e:	b004      	add	sp, #16
 8005c70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005c74:	1c59      	adds	r1, r3, #1
 8005c76:	9103      	str	r1, [sp, #12]
 8005c78:	701a      	strb	r2, [r3, #0]
 8005c7a:	e7f0      	b.n	8005c5e <__cvt+0xa6>

08005c7c <__exponent>:
 8005c7c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005c7e:	4603      	mov	r3, r0
 8005c80:	2900      	cmp	r1, #0
 8005c82:	bfb8      	it	lt
 8005c84:	4249      	neglt	r1, r1
 8005c86:	f803 2b02 	strb.w	r2, [r3], #2
 8005c8a:	bfb4      	ite	lt
 8005c8c:	222d      	movlt	r2, #45	; 0x2d
 8005c8e:	222b      	movge	r2, #43	; 0x2b
 8005c90:	2909      	cmp	r1, #9
 8005c92:	7042      	strb	r2, [r0, #1]
 8005c94:	dd2a      	ble.n	8005cec <__exponent+0x70>
 8005c96:	f10d 0407 	add.w	r4, sp, #7
 8005c9a:	46a4      	mov	ip, r4
 8005c9c:	270a      	movs	r7, #10
 8005c9e:	46a6      	mov	lr, r4
 8005ca0:	460a      	mov	r2, r1
 8005ca2:	fb91 f6f7 	sdiv	r6, r1, r7
 8005ca6:	fb07 1516 	mls	r5, r7, r6, r1
 8005caa:	3530      	adds	r5, #48	; 0x30
 8005cac:	2a63      	cmp	r2, #99	; 0x63
 8005cae:	f104 34ff 	add.w	r4, r4, #4294967295
 8005cb2:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8005cb6:	4631      	mov	r1, r6
 8005cb8:	dcf1      	bgt.n	8005c9e <__exponent+0x22>
 8005cba:	3130      	adds	r1, #48	; 0x30
 8005cbc:	f1ae 0502 	sub.w	r5, lr, #2
 8005cc0:	f804 1c01 	strb.w	r1, [r4, #-1]
 8005cc4:	1c44      	adds	r4, r0, #1
 8005cc6:	4629      	mov	r1, r5
 8005cc8:	4561      	cmp	r1, ip
 8005cca:	d30a      	bcc.n	8005ce2 <__exponent+0x66>
 8005ccc:	f10d 0209 	add.w	r2, sp, #9
 8005cd0:	eba2 020e 	sub.w	r2, r2, lr
 8005cd4:	4565      	cmp	r5, ip
 8005cd6:	bf88      	it	hi
 8005cd8:	2200      	movhi	r2, #0
 8005cda:	4413      	add	r3, r2
 8005cdc:	1a18      	subs	r0, r3, r0
 8005cde:	b003      	add	sp, #12
 8005ce0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005ce2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005ce6:	f804 2f01 	strb.w	r2, [r4, #1]!
 8005cea:	e7ed      	b.n	8005cc8 <__exponent+0x4c>
 8005cec:	2330      	movs	r3, #48	; 0x30
 8005cee:	3130      	adds	r1, #48	; 0x30
 8005cf0:	7083      	strb	r3, [r0, #2]
 8005cf2:	70c1      	strb	r1, [r0, #3]
 8005cf4:	1d03      	adds	r3, r0, #4
 8005cf6:	e7f1      	b.n	8005cdc <__exponent+0x60>

08005cf8 <_printf_float>:
 8005cf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005cfc:	ed2d 8b02 	vpush	{d8}
 8005d00:	b08d      	sub	sp, #52	; 0x34
 8005d02:	460c      	mov	r4, r1
 8005d04:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8005d08:	4616      	mov	r6, r2
 8005d0a:	461f      	mov	r7, r3
 8005d0c:	4605      	mov	r5, r0
 8005d0e:	f003 fa0b 	bl	8009128 <_localeconv_r>
 8005d12:	f8d0 a000 	ldr.w	sl, [r0]
 8005d16:	4650      	mov	r0, sl
 8005d18:	f7fa fa5a 	bl	80001d0 <strlen>
 8005d1c:	2300      	movs	r3, #0
 8005d1e:	930a      	str	r3, [sp, #40]	; 0x28
 8005d20:	6823      	ldr	r3, [r4, #0]
 8005d22:	9305      	str	r3, [sp, #20]
 8005d24:	f8d8 3000 	ldr.w	r3, [r8]
 8005d28:	f894 b018 	ldrb.w	fp, [r4, #24]
 8005d2c:	3307      	adds	r3, #7
 8005d2e:	f023 0307 	bic.w	r3, r3, #7
 8005d32:	f103 0208 	add.w	r2, r3, #8
 8005d36:	f8c8 2000 	str.w	r2, [r8]
 8005d3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d3e:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8005d42:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8005d46:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8005d4a:	9307      	str	r3, [sp, #28]
 8005d4c:	f8cd 8018 	str.w	r8, [sp, #24]
 8005d50:	ee08 0a10 	vmov	s16, r0
 8005d54:	4b9f      	ldr	r3, [pc, #636]	; (8005fd4 <_printf_float+0x2dc>)
 8005d56:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005d5a:	f04f 32ff 	mov.w	r2, #4294967295
 8005d5e:	f7fa fee5 	bl	8000b2c <__aeabi_dcmpun>
 8005d62:	bb88      	cbnz	r0, 8005dc8 <_printf_float+0xd0>
 8005d64:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005d68:	4b9a      	ldr	r3, [pc, #616]	; (8005fd4 <_printf_float+0x2dc>)
 8005d6a:	f04f 32ff 	mov.w	r2, #4294967295
 8005d6e:	f7fa febf 	bl	8000af0 <__aeabi_dcmple>
 8005d72:	bb48      	cbnz	r0, 8005dc8 <_printf_float+0xd0>
 8005d74:	2200      	movs	r2, #0
 8005d76:	2300      	movs	r3, #0
 8005d78:	4640      	mov	r0, r8
 8005d7a:	4649      	mov	r1, r9
 8005d7c:	f7fa feae 	bl	8000adc <__aeabi_dcmplt>
 8005d80:	b110      	cbz	r0, 8005d88 <_printf_float+0x90>
 8005d82:	232d      	movs	r3, #45	; 0x2d
 8005d84:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005d88:	4b93      	ldr	r3, [pc, #588]	; (8005fd8 <_printf_float+0x2e0>)
 8005d8a:	4894      	ldr	r0, [pc, #592]	; (8005fdc <_printf_float+0x2e4>)
 8005d8c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8005d90:	bf94      	ite	ls
 8005d92:	4698      	movls	r8, r3
 8005d94:	4680      	movhi	r8, r0
 8005d96:	2303      	movs	r3, #3
 8005d98:	6123      	str	r3, [r4, #16]
 8005d9a:	9b05      	ldr	r3, [sp, #20]
 8005d9c:	f023 0204 	bic.w	r2, r3, #4
 8005da0:	6022      	str	r2, [r4, #0]
 8005da2:	f04f 0900 	mov.w	r9, #0
 8005da6:	9700      	str	r7, [sp, #0]
 8005da8:	4633      	mov	r3, r6
 8005daa:	aa0b      	add	r2, sp, #44	; 0x2c
 8005dac:	4621      	mov	r1, r4
 8005dae:	4628      	mov	r0, r5
 8005db0:	f000 f9d8 	bl	8006164 <_printf_common>
 8005db4:	3001      	adds	r0, #1
 8005db6:	f040 8090 	bne.w	8005eda <_printf_float+0x1e2>
 8005dba:	f04f 30ff 	mov.w	r0, #4294967295
 8005dbe:	b00d      	add	sp, #52	; 0x34
 8005dc0:	ecbd 8b02 	vpop	{d8}
 8005dc4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005dc8:	4642      	mov	r2, r8
 8005dca:	464b      	mov	r3, r9
 8005dcc:	4640      	mov	r0, r8
 8005dce:	4649      	mov	r1, r9
 8005dd0:	f7fa feac 	bl	8000b2c <__aeabi_dcmpun>
 8005dd4:	b140      	cbz	r0, 8005de8 <_printf_float+0xf0>
 8005dd6:	464b      	mov	r3, r9
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	bfbc      	itt	lt
 8005ddc:	232d      	movlt	r3, #45	; 0x2d
 8005dde:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8005de2:	487f      	ldr	r0, [pc, #508]	; (8005fe0 <_printf_float+0x2e8>)
 8005de4:	4b7f      	ldr	r3, [pc, #508]	; (8005fe4 <_printf_float+0x2ec>)
 8005de6:	e7d1      	b.n	8005d8c <_printf_float+0x94>
 8005de8:	6863      	ldr	r3, [r4, #4]
 8005dea:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8005dee:	9206      	str	r2, [sp, #24]
 8005df0:	1c5a      	adds	r2, r3, #1
 8005df2:	d13f      	bne.n	8005e74 <_printf_float+0x17c>
 8005df4:	2306      	movs	r3, #6
 8005df6:	6063      	str	r3, [r4, #4]
 8005df8:	9b05      	ldr	r3, [sp, #20]
 8005dfa:	6861      	ldr	r1, [r4, #4]
 8005dfc:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8005e00:	2300      	movs	r3, #0
 8005e02:	9303      	str	r3, [sp, #12]
 8005e04:	ab0a      	add	r3, sp, #40	; 0x28
 8005e06:	e9cd b301 	strd	fp, r3, [sp, #4]
 8005e0a:	ab09      	add	r3, sp, #36	; 0x24
 8005e0c:	ec49 8b10 	vmov	d0, r8, r9
 8005e10:	9300      	str	r3, [sp, #0]
 8005e12:	6022      	str	r2, [r4, #0]
 8005e14:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8005e18:	4628      	mov	r0, r5
 8005e1a:	f7ff fecd 	bl	8005bb8 <__cvt>
 8005e1e:	9b06      	ldr	r3, [sp, #24]
 8005e20:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005e22:	2b47      	cmp	r3, #71	; 0x47
 8005e24:	4680      	mov	r8, r0
 8005e26:	d108      	bne.n	8005e3a <_printf_float+0x142>
 8005e28:	1cc8      	adds	r0, r1, #3
 8005e2a:	db02      	blt.n	8005e32 <_printf_float+0x13a>
 8005e2c:	6863      	ldr	r3, [r4, #4]
 8005e2e:	4299      	cmp	r1, r3
 8005e30:	dd41      	ble.n	8005eb6 <_printf_float+0x1be>
 8005e32:	f1ab 0b02 	sub.w	fp, fp, #2
 8005e36:	fa5f fb8b 	uxtb.w	fp, fp
 8005e3a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8005e3e:	d820      	bhi.n	8005e82 <_printf_float+0x18a>
 8005e40:	3901      	subs	r1, #1
 8005e42:	465a      	mov	r2, fp
 8005e44:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8005e48:	9109      	str	r1, [sp, #36]	; 0x24
 8005e4a:	f7ff ff17 	bl	8005c7c <__exponent>
 8005e4e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005e50:	1813      	adds	r3, r2, r0
 8005e52:	2a01      	cmp	r2, #1
 8005e54:	4681      	mov	r9, r0
 8005e56:	6123      	str	r3, [r4, #16]
 8005e58:	dc02      	bgt.n	8005e60 <_printf_float+0x168>
 8005e5a:	6822      	ldr	r2, [r4, #0]
 8005e5c:	07d2      	lsls	r2, r2, #31
 8005e5e:	d501      	bpl.n	8005e64 <_printf_float+0x16c>
 8005e60:	3301      	adds	r3, #1
 8005e62:	6123      	str	r3, [r4, #16]
 8005e64:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	d09c      	beq.n	8005da6 <_printf_float+0xae>
 8005e6c:	232d      	movs	r3, #45	; 0x2d
 8005e6e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005e72:	e798      	b.n	8005da6 <_printf_float+0xae>
 8005e74:	9a06      	ldr	r2, [sp, #24]
 8005e76:	2a47      	cmp	r2, #71	; 0x47
 8005e78:	d1be      	bne.n	8005df8 <_printf_float+0x100>
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d1bc      	bne.n	8005df8 <_printf_float+0x100>
 8005e7e:	2301      	movs	r3, #1
 8005e80:	e7b9      	b.n	8005df6 <_printf_float+0xfe>
 8005e82:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8005e86:	d118      	bne.n	8005eba <_printf_float+0x1c2>
 8005e88:	2900      	cmp	r1, #0
 8005e8a:	6863      	ldr	r3, [r4, #4]
 8005e8c:	dd0b      	ble.n	8005ea6 <_printf_float+0x1ae>
 8005e8e:	6121      	str	r1, [r4, #16]
 8005e90:	b913      	cbnz	r3, 8005e98 <_printf_float+0x1a0>
 8005e92:	6822      	ldr	r2, [r4, #0]
 8005e94:	07d0      	lsls	r0, r2, #31
 8005e96:	d502      	bpl.n	8005e9e <_printf_float+0x1a6>
 8005e98:	3301      	adds	r3, #1
 8005e9a:	440b      	add	r3, r1
 8005e9c:	6123      	str	r3, [r4, #16]
 8005e9e:	65a1      	str	r1, [r4, #88]	; 0x58
 8005ea0:	f04f 0900 	mov.w	r9, #0
 8005ea4:	e7de      	b.n	8005e64 <_printf_float+0x16c>
 8005ea6:	b913      	cbnz	r3, 8005eae <_printf_float+0x1b6>
 8005ea8:	6822      	ldr	r2, [r4, #0]
 8005eaa:	07d2      	lsls	r2, r2, #31
 8005eac:	d501      	bpl.n	8005eb2 <_printf_float+0x1ba>
 8005eae:	3302      	adds	r3, #2
 8005eb0:	e7f4      	b.n	8005e9c <_printf_float+0x1a4>
 8005eb2:	2301      	movs	r3, #1
 8005eb4:	e7f2      	b.n	8005e9c <_printf_float+0x1a4>
 8005eb6:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8005eba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005ebc:	4299      	cmp	r1, r3
 8005ebe:	db05      	blt.n	8005ecc <_printf_float+0x1d4>
 8005ec0:	6823      	ldr	r3, [r4, #0]
 8005ec2:	6121      	str	r1, [r4, #16]
 8005ec4:	07d8      	lsls	r0, r3, #31
 8005ec6:	d5ea      	bpl.n	8005e9e <_printf_float+0x1a6>
 8005ec8:	1c4b      	adds	r3, r1, #1
 8005eca:	e7e7      	b.n	8005e9c <_printf_float+0x1a4>
 8005ecc:	2900      	cmp	r1, #0
 8005ece:	bfd4      	ite	le
 8005ed0:	f1c1 0202 	rsble	r2, r1, #2
 8005ed4:	2201      	movgt	r2, #1
 8005ed6:	4413      	add	r3, r2
 8005ed8:	e7e0      	b.n	8005e9c <_printf_float+0x1a4>
 8005eda:	6823      	ldr	r3, [r4, #0]
 8005edc:	055a      	lsls	r2, r3, #21
 8005ede:	d407      	bmi.n	8005ef0 <_printf_float+0x1f8>
 8005ee0:	6923      	ldr	r3, [r4, #16]
 8005ee2:	4642      	mov	r2, r8
 8005ee4:	4631      	mov	r1, r6
 8005ee6:	4628      	mov	r0, r5
 8005ee8:	47b8      	blx	r7
 8005eea:	3001      	adds	r0, #1
 8005eec:	d12c      	bne.n	8005f48 <_printf_float+0x250>
 8005eee:	e764      	b.n	8005dba <_printf_float+0xc2>
 8005ef0:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8005ef4:	f240 80e0 	bls.w	80060b8 <_printf_float+0x3c0>
 8005ef8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005efc:	2200      	movs	r2, #0
 8005efe:	2300      	movs	r3, #0
 8005f00:	f7fa fde2 	bl	8000ac8 <__aeabi_dcmpeq>
 8005f04:	2800      	cmp	r0, #0
 8005f06:	d034      	beq.n	8005f72 <_printf_float+0x27a>
 8005f08:	4a37      	ldr	r2, [pc, #220]	; (8005fe8 <_printf_float+0x2f0>)
 8005f0a:	2301      	movs	r3, #1
 8005f0c:	4631      	mov	r1, r6
 8005f0e:	4628      	mov	r0, r5
 8005f10:	47b8      	blx	r7
 8005f12:	3001      	adds	r0, #1
 8005f14:	f43f af51 	beq.w	8005dba <_printf_float+0xc2>
 8005f18:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005f1c:	429a      	cmp	r2, r3
 8005f1e:	db02      	blt.n	8005f26 <_printf_float+0x22e>
 8005f20:	6823      	ldr	r3, [r4, #0]
 8005f22:	07d8      	lsls	r0, r3, #31
 8005f24:	d510      	bpl.n	8005f48 <_printf_float+0x250>
 8005f26:	ee18 3a10 	vmov	r3, s16
 8005f2a:	4652      	mov	r2, sl
 8005f2c:	4631      	mov	r1, r6
 8005f2e:	4628      	mov	r0, r5
 8005f30:	47b8      	blx	r7
 8005f32:	3001      	adds	r0, #1
 8005f34:	f43f af41 	beq.w	8005dba <_printf_float+0xc2>
 8005f38:	f04f 0800 	mov.w	r8, #0
 8005f3c:	f104 091a 	add.w	r9, r4, #26
 8005f40:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005f42:	3b01      	subs	r3, #1
 8005f44:	4543      	cmp	r3, r8
 8005f46:	dc09      	bgt.n	8005f5c <_printf_float+0x264>
 8005f48:	6823      	ldr	r3, [r4, #0]
 8005f4a:	079b      	lsls	r3, r3, #30
 8005f4c:	f100 8105 	bmi.w	800615a <_printf_float+0x462>
 8005f50:	68e0      	ldr	r0, [r4, #12]
 8005f52:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005f54:	4298      	cmp	r0, r3
 8005f56:	bfb8      	it	lt
 8005f58:	4618      	movlt	r0, r3
 8005f5a:	e730      	b.n	8005dbe <_printf_float+0xc6>
 8005f5c:	2301      	movs	r3, #1
 8005f5e:	464a      	mov	r2, r9
 8005f60:	4631      	mov	r1, r6
 8005f62:	4628      	mov	r0, r5
 8005f64:	47b8      	blx	r7
 8005f66:	3001      	adds	r0, #1
 8005f68:	f43f af27 	beq.w	8005dba <_printf_float+0xc2>
 8005f6c:	f108 0801 	add.w	r8, r8, #1
 8005f70:	e7e6      	b.n	8005f40 <_printf_float+0x248>
 8005f72:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	dc39      	bgt.n	8005fec <_printf_float+0x2f4>
 8005f78:	4a1b      	ldr	r2, [pc, #108]	; (8005fe8 <_printf_float+0x2f0>)
 8005f7a:	2301      	movs	r3, #1
 8005f7c:	4631      	mov	r1, r6
 8005f7e:	4628      	mov	r0, r5
 8005f80:	47b8      	blx	r7
 8005f82:	3001      	adds	r0, #1
 8005f84:	f43f af19 	beq.w	8005dba <_printf_float+0xc2>
 8005f88:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005f8c:	4313      	orrs	r3, r2
 8005f8e:	d102      	bne.n	8005f96 <_printf_float+0x29e>
 8005f90:	6823      	ldr	r3, [r4, #0]
 8005f92:	07d9      	lsls	r1, r3, #31
 8005f94:	d5d8      	bpl.n	8005f48 <_printf_float+0x250>
 8005f96:	ee18 3a10 	vmov	r3, s16
 8005f9a:	4652      	mov	r2, sl
 8005f9c:	4631      	mov	r1, r6
 8005f9e:	4628      	mov	r0, r5
 8005fa0:	47b8      	blx	r7
 8005fa2:	3001      	adds	r0, #1
 8005fa4:	f43f af09 	beq.w	8005dba <_printf_float+0xc2>
 8005fa8:	f04f 0900 	mov.w	r9, #0
 8005fac:	f104 0a1a 	add.w	sl, r4, #26
 8005fb0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005fb2:	425b      	negs	r3, r3
 8005fb4:	454b      	cmp	r3, r9
 8005fb6:	dc01      	bgt.n	8005fbc <_printf_float+0x2c4>
 8005fb8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005fba:	e792      	b.n	8005ee2 <_printf_float+0x1ea>
 8005fbc:	2301      	movs	r3, #1
 8005fbe:	4652      	mov	r2, sl
 8005fc0:	4631      	mov	r1, r6
 8005fc2:	4628      	mov	r0, r5
 8005fc4:	47b8      	blx	r7
 8005fc6:	3001      	adds	r0, #1
 8005fc8:	f43f aef7 	beq.w	8005dba <_printf_float+0xc2>
 8005fcc:	f109 0901 	add.w	r9, r9, #1
 8005fd0:	e7ee      	b.n	8005fb0 <_printf_float+0x2b8>
 8005fd2:	bf00      	nop
 8005fd4:	7fefffff 	.word	0x7fefffff
 8005fd8:	0800beec 	.word	0x0800beec
 8005fdc:	0800bef0 	.word	0x0800bef0
 8005fe0:	0800bef8 	.word	0x0800bef8
 8005fe4:	0800bef4 	.word	0x0800bef4
 8005fe8:	0800c359 	.word	0x0800c359
 8005fec:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005fee:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005ff0:	429a      	cmp	r2, r3
 8005ff2:	bfa8      	it	ge
 8005ff4:	461a      	movge	r2, r3
 8005ff6:	2a00      	cmp	r2, #0
 8005ff8:	4691      	mov	r9, r2
 8005ffa:	dc37      	bgt.n	800606c <_printf_float+0x374>
 8005ffc:	f04f 0b00 	mov.w	fp, #0
 8006000:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006004:	f104 021a 	add.w	r2, r4, #26
 8006008:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800600a:	9305      	str	r3, [sp, #20]
 800600c:	eba3 0309 	sub.w	r3, r3, r9
 8006010:	455b      	cmp	r3, fp
 8006012:	dc33      	bgt.n	800607c <_printf_float+0x384>
 8006014:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006018:	429a      	cmp	r2, r3
 800601a:	db3b      	blt.n	8006094 <_printf_float+0x39c>
 800601c:	6823      	ldr	r3, [r4, #0]
 800601e:	07da      	lsls	r2, r3, #31
 8006020:	d438      	bmi.n	8006094 <_printf_float+0x39c>
 8006022:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006024:	9a05      	ldr	r2, [sp, #20]
 8006026:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006028:	1a9a      	subs	r2, r3, r2
 800602a:	eba3 0901 	sub.w	r9, r3, r1
 800602e:	4591      	cmp	r9, r2
 8006030:	bfa8      	it	ge
 8006032:	4691      	movge	r9, r2
 8006034:	f1b9 0f00 	cmp.w	r9, #0
 8006038:	dc35      	bgt.n	80060a6 <_printf_float+0x3ae>
 800603a:	f04f 0800 	mov.w	r8, #0
 800603e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006042:	f104 0a1a 	add.w	sl, r4, #26
 8006046:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800604a:	1a9b      	subs	r3, r3, r2
 800604c:	eba3 0309 	sub.w	r3, r3, r9
 8006050:	4543      	cmp	r3, r8
 8006052:	f77f af79 	ble.w	8005f48 <_printf_float+0x250>
 8006056:	2301      	movs	r3, #1
 8006058:	4652      	mov	r2, sl
 800605a:	4631      	mov	r1, r6
 800605c:	4628      	mov	r0, r5
 800605e:	47b8      	blx	r7
 8006060:	3001      	adds	r0, #1
 8006062:	f43f aeaa 	beq.w	8005dba <_printf_float+0xc2>
 8006066:	f108 0801 	add.w	r8, r8, #1
 800606a:	e7ec      	b.n	8006046 <_printf_float+0x34e>
 800606c:	4613      	mov	r3, r2
 800606e:	4631      	mov	r1, r6
 8006070:	4642      	mov	r2, r8
 8006072:	4628      	mov	r0, r5
 8006074:	47b8      	blx	r7
 8006076:	3001      	adds	r0, #1
 8006078:	d1c0      	bne.n	8005ffc <_printf_float+0x304>
 800607a:	e69e      	b.n	8005dba <_printf_float+0xc2>
 800607c:	2301      	movs	r3, #1
 800607e:	4631      	mov	r1, r6
 8006080:	4628      	mov	r0, r5
 8006082:	9205      	str	r2, [sp, #20]
 8006084:	47b8      	blx	r7
 8006086:	3001      	adds	r0, #1
 8006088:	f43f ae97 	beq.w	8005dba <_printf_float+0xc2>
 800608c:	9a05      	ldr	r2, [sp, #20]
 800608e:	f10b 0b01 	add.w	fp, fp, #1
 8006092:	e7b9      	b.n	8006008 <_printf_float+0x310>
 8006094:	ee18 3a10 	vmov	r3, s16
 8006098:	4652      	mov	r2, sl
 800609a:	4631      	mov	r1, r6
 800609c:	4628      	mov	r0, r5
 800609e:	47b8      	blx	r7
 80060a0:	3001      	adds	r0, #1
 80060a2:	d1be      	bne.n	8006022 <_printf_float+0x32a>
 80060a4:	e689      	b.n	8005dba <_printf_float+0xc2>
 80060a6:	9a05      	ldr	r2, [sp, #20]
 80060a8:	464b      	mov	r3, r9
 80060aa:	4442      	add	r2, r8
 80060ac:	4631      	mov	r1, r6
 80060ae:	4628      	mov	r0, r5
 80060b0:	47b8      	blx	r7
 80060b2:	3001      	adds	r0, #1
 80060b4:	d1c1      	bne.n	800603a <_printf_float+0x342>
 80060b6:	e680      	b.n	8005dba <_printf_float+0xc2>
 80060b8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80060ba:	2a01      	cmp	r2, #1
 80060bc:	dc01      	bgt.n	80060c2 <_printf_float+0x3ca>
 80060be:	07db      	lsls	r3, r3, #31
 80060c0:	d538      	bpl.n	8006134 <_printf_float+0x43c>
 80060c2:	2301      	movs	r3, #1
 80060c4:	4642      	mov	r2, r8
 80060c6:	4631      	mov	r1, r6
 80060c8:	4628      	mov	r0, r5
 80060ca:	47b8      	blx	r7
 80060cc:	3001      	adds	r0, #1
 80060ce:	f43f ae74 	beq.w	8005dba <_printf_float+0xc2>
 80060d2:	ee18 3a10 	vmov	r3, s16
 80060d6:	4652      	mov	r2, sl
 80060d8:	4631      	mov	r1, r6
 80060da:	4628      	mov	r0, r5
 80060dc:	47b8      	blx	r7
 80060de:	3001      	adds	r0, #1
 80060e0:	f43f ae6b 	beq.w	8005dba <_printf_float+0xc2>
 80060e4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80060e8:	2200      	movs	r2, #0
 80060ea:	2300      	movs	r3, #0
 80060ec:	f7fa fcec 	bl	8000ac8 <__aeabi_dcmpeq>
 80060f0:	b9d8      	cbnz	r0, 800612a <_printf_float+0x432>
 80060f2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80060f4:	f108 0201 	add.w	r2, r8, #1
 80060f8:	3b01      	subs	r3, #1
 80060fa:	4631      	mov	r1, r6
 80060fc:	4628      	mov	r0, r5
 80060fe:	47b8      	blx	r7
 8006100:	3001      	adds	r0, #1
 8006102:	d10e      	bne.n	8006122 <_printf_float+0x42a>
 8006104:	e659      	b.n	8005dba <_printf_float+0xc2>
 8006106:	2301      	movs	r3, #1
 8006108:	4652      	mov	r2, sl
 800610a:	4631      	mov	r1, r6
 800610c:	4628      	mov	r0, r5
 800610e:	47b8      	blx	r7
 8006110:	3001      	adds	r0, #1
 8006112:	f43f ae52 	beq.w	8005dba <_printf_float+0xc2>
 8006116:	f108 0801 	add.w	r8, r8, #1
 800611a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800611c:	3b01      	subs	r3, #1
 800611e:	4543      	cmp	r3, r8
 8006120:	dcf1      	bgt.n	8006106 <_printf_float+0x40e>
 8006122:	464b      	mov	r3, r9
 8006124:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8006128:	e6dc      	b.n	8005ee4 <_printf_float+0x1ec>
 800612a:	f04f 0800 	mov.w	r8, #0
 800612e:	f104 0a1a 	add.w	sl, r4, #26
 8006132:	e7f2      	b.n	800611a <_printf_float+0x422>
 8006134:	2301      	movs	r3, #1
 8006136:	4642      	mov	r2, r8
 8006138:	e7df      	b.n	80060fa <_printf_float+0x402>
 800613a:	2301      	movs	r3, #1
 800613c:	464a      	mov	r2, r9
 800613e:	4631      	mov	r1, r6
 8006140:	4628      	mov	r0, r5
 8006142:	47b8      	blx	r7
 8006144:	3001      	adds	r0, #1
 8006146:	f43f ae38 	beq.w	8005dba <_printf_float+0xc2>
 800614a:	f108 0801 	add.w	r8, r8, #1
 800614e:	68e3      	ldr	r3, [r4, #12]
 8006150:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006152:	1a5b      	subs	r3, r3, r1
 8006154:	4543      	cmp	r3, r8
 8006156:	dcf0      	bgt.n	800613a <_printf_float+0x442>
 8006158:	e6fa      	b.n	8005f50 <_printf_float+0x258>
 800615a:	f04f 0800 	mov.w	r8, #0
 800615e:	f104 0919 	add.w	r9, r4, #25
 8006162:	e7f4      	b.n	800614e <_printf_float+0x456>

08006164 <_printf_common>:
 8006164:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006168:	4616      	mov	r6, r2
 800616a:	4699      	mov	r9, r3
 800616c:	688a      	ldr	r2, [r1, #8]
 800616e:	690b      	ldr	r3, [r1, #16]
 8006170:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006174:	4293      	cmp	r3, r2
 8006176:	bfb8      	it	lt
 8006178:	4613      	movlt	r3, r2
 800617a:	6033      	str	r3, [r6, #0]
 800617c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006180:	4607      	mov	r7, r0
 8006182:	460c      	mov	r4, r1
 8006184:	b10a      	cbz	r2, 800618a <_printf_common+0x26>
 8006186:	3301      	adds	r3, #1
 8006188:	6033      	str	r3, [r6, #0]
 800618a:	6823      	ldr	r3, [r4, #0]
 800618c:	0699      	lsls	r1, r3, #26
 800618e:	bf42      	ittt	mi
 8006190:	6833      	ldrmi	r3, [r6, #0]
 8006192:	3302      	addmi	r3, #2
 8006194:	6033      	strmi	r3, [r6, #0]
 8006196:	6825      	ldr	r5, [r4, #0]
 8006198:	f015 0506 	ands.w	r5, r5, #6
 800619c:	d106      	bne.n	80061ac <_printf_common+0x48>
 800619e:	f104 0a19 	add.w	sl, r4, #25
 80061a2:	68e3      	ldr	r3, [r4, #12]
 80061a4:	6832      	ldr	r2, [r6, #0]
 80061a6:	1a9b      	subs	r3, r3, r2
 80061a8:	42ab      	cmp	r3, r5
 80061aa:	dc26      	bgt.n	80061fa <_printf_common+0x96>
 80061ac:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80061b0:	1e13      	subs	r3, r2, #0
 80061b2:	6822      	ldr	r2, [r4, #0]
 80061b4:	bf18      	it	ne
 80061b6:	2301      	movne	r3, #1
 80061b8:	0692      	lsls	r2, r2, #26
 80061ba:	d42b      	bmi.n	8006214 <_printf_common+0xb0>
 80061bc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80061c0:	4649      	mov	r1, r9
 80061c2:	4638      	mov	r0, r7
 80061c4:	47c0      	blx	r8
 80061c6:	3001      	adds	r0, #1
 80061c8:	d01e      	beq.n	8006208 <_printf_common+0xa4>
 80061ca:	6823      	ldr	r3, [r4, #0]
 80061cc:	68e5      	ldr	r5, [r4, #12]
 80061ce:	6832      	ldr	r2, [r6, #0]
 80061d0:	f003 0306 	and.w	r3, r3, #6
 80061d4:	2b04      	cmp	r3, #4
 80061d6:	bf08      	it	eq
 80061d8:	1aad      	subeq	r5, r5, r2
 80061da:	68a3      	ldr	r3, [r4, #8]
 80061dc:	6922      	ldr	r2, [r4, #16]
 80061de:	bf0c      	ite	eq
 80061e0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80061e4:	2500      	movne	r5, #0
 80061e6:	4293      	cmp	r3, r2
 80061e8:	bfc4      	itt	gt
 80061ea:	1a9b      	subgt	r3, r3, r2
 80061ec:	18ed      	addgt	r5, r5, r3
 80061ee:	2600      	movs	r6, #0
 80061f0:	341a      	adds	r4, #26
 80061f2:	42b5      	cmp	r5, r6
 80061f4:	d11a      	bne.n	800622c <_printf_common+0xc8>
 80061f6:	2000      	movs	r0, #0
 80061f8:	e008      	b.n	800620c <_printf_common+0xa8>
 80061fa:	2301      	movs	r3, #1
 80061fc:	4652      	mov	r2, sl
 80061fe:	4649      	mov	r1, r9
 8006200:	4638      	mov	r0, r7
 8006202:	47c0      	blx	r8
 8006204:	3001      	adds	r0, #1
 8006206:	d103      	bne.n	8006210 <_printf_common+0xac>
 8006208:	f04f 30ff 	mov.w	r0, #4294967295
 800620c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006210:	3501      	adds	r5, #1
 8006212:	e7c6      	b.n	80061a2 <_printf_common+0x3e>
 8006214:	18e1      	adds	r1, r4, r3
 8006216:	1c5a      	adds	r2, r3, #1
 8006218:	2030      	movs	r0, #48	; 0x30
 800621a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800621e:	4422      	add	r2, r4
 8006220:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006224:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006228:	3302      	adds	r3, #2
 800622a:	e7c7      	b.n	80061bc <_printf_common+0x58>
 800622c:	2301      	movs	r3, #1
 800622e:	4622      	mov	r2, r4
 8006230:	4649      	mov	r1, r9
 8006232:	4638      	mov	r0, r7
 8006234:	47c0      	blx	r8
 8006236:	3001      	adds	r0, #1
 8006238:	d0e6      	beq.n	8006208 <_printf_common+0xa4>
 800623a:	3601      	adds	r6, #1
 800623c:	e7d9      	b.n	80061f2 <_printf_common+0x8e>
	...

08006240 <_printf_i>:
 8006240:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006244:	7e0f      	ldrb	r7, [r1, #24]
 8006246:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006248:	2f78      	cmp	r7, #120	; 0x78
 800624a:	4691      	mov	r9, r2
 800624c:	4680      	mov	r8, r0
 800624e:	460c      	mov	r4, r1
 8006250:	469a      	mov	sl, r3
 8006252:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006256:	d807      	bhi.n	8006268 <_printf_i+0x28>
 8006258:	2f62      	cmp	r7, #98	; 0x62
 800625a:	d80a      	bhi.n	8006272 <_printf_i+0x32>
 800625c:	2f00      	cmp	r7, #0
 800625e:	f000 80d8 	beq.w	8006412 <_printf_i+0x1d2>
 8006262:	2f58      	cmp	r7, #88	; 0x58
 8006264:	f000 80a3 	beq.w	80063ae <_printf_i+0x16e>
 8006268:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800626c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006270:	e03a      	b.n	80062e8 <_printf_i+0xa8>
 8006272:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006276:	2b15      	cmp	r3, #21
 8006278:	d8f6      	bhi.n	8006268 <_printf_i+0x28>
 800627a:	a101      	add	r1, pc, #4	; (adr r1, 8006280 <_printf_i+0x40>)
 800627c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006280:	080062d9 	.word	0x080062d9
 8006284:	080062ed 	.word	0x080062ed
 8006288:	08006269 	.word	0x08006269
 800628c:	08006269 	.word	0x08006269
 8006290:	08006269 	.word	0x08006269
 8006294:	08006269 	.word	0x08006269
 8006298:	080062ed 	.word	0x080062ed
 800629c:	08006269 	.word	0x08006269
 80062a0:	08006269 	.word	0x08006269
 80062a4:	08006269 	.word	0x08006269
 80062a8:	08006269 	.word	0x08006269
 80062ac:	080063f9 	.word	0x080063f9
 80062b0:	0800631d 	.word	0x0800631d
 80062b4:	080063db 	.word	0x080063db
 80062b8:	08006269 	.word	0x08006269
 80062bc:	08006269 	.word	0x08006269
 80062c0:	0800641b 	.word	0x0800641b
 80062c4:	08006269 	.word	0x08006269
 80062c8:	0800631d 	.word	0x0800631d
 80062cc:	08006269 	.word	0x08006269
 80062d0:	08006269 	.word	0x08006269
 80062d4:	080063e3 	.word	0x080063e3
 80062d8:	682b      	ldr	r3, [r5, #0]
 80062da:	1d1a      	adds	r2, r3, #4
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	602a      	str	r2, [r5, #0]
 80062e0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80062e4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80062e8:	2301      	movs	r3, #1
 80062ea:	e0a3      	b.n	8006434 <_printf_i+0x1f4>
 80062ec:	6820      	ldr	r0, [r4, #0]
 80062ee:	6829      	ldr	r1, [r5, #0]
 80062f0:	0606      	lsls	r6, r0, #24
 80062f2:	f101 0304 	add.w	r3, r1, #4
 80062f6:	d50a      	bpl.n	800630e <_printf_i+0xce>
 80062f8:	680e      	ldr	r6, [r1, #0]
 80062fa:	602b      	str	r3, [r5, #0]
 80062fc:	2e00      	cmp	r6, #0
 80062fe:	da03      	bge.n	8006308 <_printf_i+0xc8>
 8006300:	232d      	movs	r3, #45	; 0x2d
 8006302:	4276      	negs	r6, r6
 8006304:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006308:	485e      	ldr	r0, [pc, #376]	; (8006484 <_printf_i+0x244>)
 800630a:	230a      	movs	r3, #10
 800630c:	e019      	b.n	8006342 <_printf_i+0x102>
 800630e:	680e      	ldr	r6, [r1, #0]
 8006310:	602b      	str	r3, [r5, #0]
 8006312:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006316:	bf18      	it	ne
 8006318:	b236      	sxthne	r6, r6
 800631a:	e7ef      	b.n	80062fc <_printf_i+0xbc>
 800631c:	682b      	ldr	r3, [r5, #0]
 800631e:	6820      	ldr	r0, [r4, #0]
 8006320:	1d19      	adds	r1, r3, #4
 8006322:	6029      	str	r1, [r5, #0]
 8006324:	0601      	lsls	r1, r0, #24
 8006326:	d501      	bpl.n	800632c <_printf_i+0xec>
 8006328:	681e      	ldr	r6, [r3, #0]
 800632a:	e002      	b.n	8006332 <_printf_i+0xf2>
 800632c:	0646      	lsls	r6, r0, #25
 800632e:	d5fb      	bpl.n	8006328 <_printf_i+0xe8>
 8006330:	881e      	ldrh	r6, [r3, #0]
 8006332:	4854      	ldr	r0, [pc, #336]	; (8006484 <_printf_i+0x244>)
 8006334:	2f6f      	cmp	r7, #111	; 0x6f
 8006336:	bf0c      	ite	eq
 8006338:	2308      	moveq	r3, #8
 800633a:	230a      	movne	r3, #10
 800633c:	2100      	movs	r1, #0
 800633e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006342:	6865      	ldr	r5, [r4, #4]
 8006344:	60a5      	str	r5, [r4, #8]
 8006346:	2d00      	cmp	r5, #0
 8006348:	bfa2      	ittt	ge
 800634a:	6821      	ldrge	r1, [r4, #0]
 800634c:	f021 0104 	bicge.w	r1, r1, #4
 8006350:	6021      	strge	r1, [r4, #0]
 8006352:	b90e      	cbnz	r6, 8006358 <_printf_i+0x118>
 8006354:	2d00      	cmp	r5, #0
 8006356:	d04d      	beq.n	80063f4 <_printf_i+0x1b4>
 8006358:	4615      	mov	r5, r2
 800635a:	fbb6 f1f3 	udiv	r1, r6, r3
 800635e:	fb03 6711 	mls	r7, r3, r1, r6
 8006362:	5dc7      	ldrb	r7, [r0, r7]
 8006364:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006368:	4637      	mov	r7, r6
 800636a:	42bb      	cmp	r3, r7
 800636c:	460e      	mov	r6, r1
 800636e:	d9f4      	bls.n	800635a <_printf_i+0x11a>
 8006370:	2b08      	cmp	r3, #8
 8006372:	d10b      	bne.n	800638c <_printf_i+0x14c>
 8006374:	6823      	ldr	r3, [r4, #0]
 8006376:	07de      	lsls	r6, r3, #31
 8006378:	d508      	bpl.n	800638c <_printf_i+0x14c>
 800637a:	6923      	ldr	r3, [r4, #16]
 800637c:	6861      	ldr	r1, [r4, #4]
 800637e:	4299      	cmp	r1, r3
 8006380:	bfde      	ittt	le
 8006382:	2330      	movle	r3, #48	; 0x30
 8006384:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006388:	f105 35ff 	addle.w	r5, r5, #4294967295
 800638c:	1b52      	subs	r2, r2, r5
 800638e:	6122      	str	r2, [r4, #16]
 8006390:	f8cd a000 	str.w	sl, [sp]
 8006394:	464b      	mov	r3, r9
 8006396:	aa03      	add	r2, sp, #12
 8006398:	4621      	mov	r1, r4
 800639a:	4640      	mov	r0, r8
 800639c:	f7ff fee2 	bl	8006164 <_printf_common>
 80063a0:	3001      	adds	r0, #1
 80063a2:	d14c      	bne.n	800643e <_printf_i+0x1fe>
 80063a4:	f04f 30ff 	mov.w	r0, #4294967295
 80063a8:	b004      	add	sp, #16
 80063aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80063ae:	4835      	ldr	r0, [pc, #212]	; (8006484 <_printf_i+0x244>)
 80063b0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80063b4:	6829      	ldr	r1, [r5, #0]
 80063b6:	6823      	ldr	r3, [r4, #0]
 80063b8:	f851 6b04 	ldr.w	r6, [r1], #4
 80063bc:	6029      	str	r1, [r5, #0]
 80063be:	061d      	lsls	r5, r3, #24
 80063c0:	d514      	bpl.n	80063ec <_printf_i+0x1ac>
 80063c2:	07df      	lsls	r7, r3, #31
 80063c4:	bf44      	itt	mi
 80063c6:	f043 0320 	orrmi.w	r3, r3, #32
 80063ca:	6023      	strmi	r3, [r4, #0]
 80063cc:	b91e      	cbnz	r6, 80063d6 <_printf_i+0x196>
 80063ce:	6823      	ldr	r3, [r4, #0]
 80063d0:	f023 0320 	bic.w	r3, r3, #32
 80063d4:	6023      	str	r3, [r4, #0]
 80063d6:	2310      	movs	r3, #16
 80063d8:	e7b0      	b.n	800633c <_printf_i+0xfc>
 80063da:	6823      	ldr	r3, [r4, #0]
 80063dc:	f043 0320 	orr.w	r3, r3, #32
 80063e0:	6023      	str	r3, [r4, #0]
 80063e2:	2378      	movs	r3, #120	; 0x78
 80063e4:	4828      	ldr	r0, [pc, #160]	; (8006488 <_printf_i+0x248>)
 80063e6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80063ea:	e7e3      	b.n	80063b4 <_printf_i+0x174>
 80063ec:	0659      	lsls	r1, r3, #25
 80063ee:	bf48      	it	mi
 80063f0:	b2b6      	uxthmi	r6, r6
 80063f2:	e7e6      	b.n	80063c2 <_printf_i+0x182>
 80063f4:	4615      	mov	r5, r2
 80063f6:	e7bb      	b.n	8006370 <_printf_i+0x130>
 80063f8:	682b      	ldr	r3, [r5, #0]
 80063fa:	6826      	ldr	r6, [r4, #0]
 80063fc:	6961      	ldr	r1, [r4, #20]
 80063fe:	1d18      	adds	r0, r3, #4
 8006400:	6028      	str	r0, [r5, #0]
 8006402:	0635      	lsls	r5, r6, #24
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	d501      	bpl.n	800640c <_printf_i+0x1cc>
 8006408:	6019      	str	r1, [r3, #0]
 800640a:	e002      	b.n	8006412 <_printf_i+0x1d2>
 800640c:	0670      	lsls	r0, r6, #25
 800640e:	d5fb      	bpl.n	8006408 <_printf_i+0x1c8>
 8006410:	8019      	strh	r1, [r3, #0]
 8006412:	2300      	movs	r3, #0
 8006414:	6123      	str	r3, [r4, #16]
 8006416:	4615      	mov	r5, r2
 8006418:	e7ba      	b.n	8006390 <_printf_i+0x150>
 800641a:	682b      	ldr	r3, [r5, #0]
 800641c:	1d1a      	adds	r2, r3, #4
 800641e:	602a      	str	r2, [r5, #0]
 8006420:	681d      	ldr	r5, [r3, #0]
 8006422:	6862      	ldr	r2, [r4, #4]
 8006424:	2100      	movs	r1, #0
 8006426:	4628      	mov	r0, r5
 8006428:	f7f9 feda 	bl	80001e0 <memchr>
 800642c:	b108      	cbz	r0, 8006432 <_printf_i+0x1f2>
 800642e:	1b40      	subs	r0, r0, r5
 8006430:	6060      	str	r0, [r4, #4]
 8006432:	6863      	ldr	r3, [r4, #4]
 8006434:	6123      	str	r3, [r4, #16]
 8006436:	2300      	movs	r3, #0
 8006438:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800643c:	e7a8      	b.n	8006390 <_printf_i+0x150>
 800643e:	6923      	ldr	r3, [r4, #16]
 8006440:	462a      	mov	r2, r5
 8006442:	4649      	mov	r1, r9
 8006444:	4640      	mov	r0, r8
 8006446:	47d0      	blx	sl
 8006448:	3001      	adds	r0, #1
 800644a:	d0ab      	beq.n	80063a4 <_printf_i+0x164>
 800644c:	6823      	ldr	r3, [r4, #0]
 800644e:	079b      	lsls	r3, r3, #30
 8006450:	d413      	bmi.n	800647a <_printf_i+0x23a>
 8006452:	68e0      	ldr	r0, [r4, #12]
 8006454:	9b03      	ldr	r3, [sp, #12]
 8006456:	4298      	cmp	r0, r3
 8006458:	bfb8      	it	lt
 800645a:	4618      	movlt	r0, r3
 800645c:	e7a4      	b.n	80063a8 <_printf_i+0x168>
 800645e:	2301      	movs	r3, #1
 8006460:	4632      	mov	r2, r6
 8006462:	4649      	mov	r1, r9
 8006464:	4640      	mov	r0, r8
 8006466:	47d0      	blx	sl
 8006468:	3001      	adds	r0, #1
 800646a:	d09b      	beq.n	80063a4 <_printf_i+0x164>
 800646c:	3501      	adds	r5, #1
 800646e:	68e3      	ldr	r3, [r4, #12]
 8006470:	9903      	ldr	r1, [sp, #12]
 8006472:	1a5b      	subs	r3, r3, r1
 8006474:	42ab      	cmp	r3, r5
 8006476:	dcf2      	bgt.n	800645e <_printf_i+0x21e>
 8006478:	e7eb      	b.n	8006452 <_printf_i+0x212>
 800647a:	2500      	movs	r5, #0
 800647c:	f104 0619 	add.w	r6, r4, #25
 8006480:	e7f5      	b.n	800646e <_printf_i+0x22e>
 8006482:	bf00      	nop
 8006484:	0800befc 	.word	0x0800befc
 8006488:	0800bf0d 	.word	0x0800bf0d

0800648c <_scanf_float>:
 800648c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006490:	b087      	sub	sp, #28
 8006492:	4617      	mov	r7, r2
 8006494:	9303      	str	r3, [sp, #12]
 8006496:	688b      	ldr	r3, [r1, #8]
 8006498:	1e5a      	subs	r2, r3, #1
 800649a:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800649e:	bf83      	ittte	hi
 80064a0:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 80064a4:	195b      	addhi	r3, r3, r5
 80064a6:	9302      	strhi	r3, [sp, #8]
 80064a8:	2300      	movls	r3, #0
 80064aa:	bf86      	itte	hi
 80064ac:	f240 135d 	movwhi	r3, #349	; 0x15d
 80064b0:	608b      	strhi	r3, [r1, #8]
 80064b2:	9302      	strls	r3, [sp, #8]
 80064b4:	680b      	ldr	r3, [r1, #0]
 80064b6:	468b      	mov	fp, r1
 80064b8:	2500      	movs	r5, #0
 80064ba:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 80064be:	f84b 3b1c 	str.w	r3, [fp], #28
 80064c2:	e9cd 5504 	strd	r5, r5, [sp, #16]
 80064c6:	4680      	mov	r8, r0
 80064c8:	460c      	mov	r4, r1
 80064ca:	465e      	mov	r6, fp
 80064cc:	46aa      	mov	sl, r5
 80064ce:	46a9      	mov	r9, r5
 80064d0:	9501      	str	r5, [sp, #4]
 80064d2:	68a2      	ldr	r2, [r4, #8]
 80064d4:	b152      	cbz	r2, 80064ec <_scanf_float+0x60>
 80064d6:	683b      	ldr	r3, [r7, #0]
 80064d8:	781b      	ldrb	r3, [r3, #0]
 80064da:	2b4e      	cmp	r3, #78	; 0x4e
 80064dc:	d864      	bhi.n	80065a8 <_scanf_float+0x11c>
 80064de:	2b40      	cmp	r3, #64	; 0x40
 80064e0:	d83c      	bhi.n	800655c <_scanf_float+0xd0>
 80064e2:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 80064e6:	b2c8      	uxtb	r0, r1
 80064e8:	280e      	cmp	r0, #14
 80064ea:	d93a      	bls.n	8006562 <_scanf_float+0xd6>
 80064ec:	f1b9 0f00 	cmp.w	r9, #0
 80064f0:	d003      	beq.n	80064fa <_scanf_float+0x6e>
 80064f2:	6823      	ldr	r3, [r4, #0]
 80064f4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80064f8:	6023      	str	r3, [r4, #0]
 80064fa:	f10a 3aff 	add.w	sl, sl, #4294967295
 80064fe:	f1ba 0f01 	cmp.w	sl, #1
 8006502:	f200 8113 	bhi.w	800672c <_scanf_float+0x2a0>
 8006506:	455e      	cmp	r6, fp
 8006508:	f200 8105 	bhi.w	8006716 <_scanf_float+0x28a>
 800650c:	2501      	movs	r5, #1
 800650e:	4628      	mov	r0, r5
 8006510:	b007      	add	sp, #28
 8006512:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006516:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800651a:	2a0d      	cmp	r2, #13
 800651c:	d8e6      	bhi.n	80064ec <_scanf_float+0x60>
 800651e:	a101      	add	r1, pc, #4	; (adr r1, 8006524 <_scanf_float+0x98>)
 8006520:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8006524:	08006663 	.word	0x08006663
 8006528:	080064ed 	.word	0x080064ed
 800652c:	080064ed 	.word	0x080064ed
 8006530:	080064ed 	.word	0x080064ed
 8006534:	080066c3 	.word	0x080066c3
 8006538:	0800669b 	.word	0x0800669b
 800653c:	080064ed 	.word	0x080064ed
 8006540:	080064ed 	.word	0x080064ed
 8006544:	08006671 	.word	0x08006671
 8006548:	080064ed 	.word	0x080064ed
 800654c:	080064ed 	.word	0x080064ed
 8006550:	080064ed 	.word	0x080064ed
 8006554:	080064ed 	.word	0x080064ed
 8006558:	08006629 	.word	0x08006629
 800655c:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8006560:	e7db      	b.n	800651a <_scanf_float+0x8e>
 8006562:	290e      	cmp	r1, #14
 8006564:	d8c2      	bhi.n	80064ec <_scanf_float+0x60>
 8006566:	a001      	add	r0, pc, #4	; (adr r0, 800656c <_scanf_float+0xe0>)
 8006568:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800656c:	0800661b 	.word	0x0800661b
 8006570:	080064ed 	.word	0x080064ed
 8006574:	0800661b 	.word	0x0800661b
 8006578:	080066af 	.word	0x080066af
 800657c:	080064ed 	.word	0x080064ed
 8006580:	080065c9 	.word	0x080065c9
 8006584:	08006605 	.word	0x08006605
 8006588:	08006605 	.word	0x08006605
 800658c:	08006605 	.word	0x08006605
 8006590:	08006605 	.word	0x08006605
 8006594:	08006605 	.word	0x08006605
 8006598:	08006605 	.word	0x08006605
 800659c:	08006605 	.word	0x08006605
 80065a0:	08006605 	.word	0x08006605
 80065a4:	08006605 	.word	0x08006605
 80065a8:	2b6e      	cmp	r3, #110	; 0x6e
 80065aa:	d809      	bhi.n	80065c0 <_scanf_float+0x134>
 80065ac:	2b60      	cmp	r3, #96	; 0x60
 80065ae:	d8b2      	bhi.n	8006516 <_scanf_float+0x8a>
 80065b0:	2b54      	cmp	r3, #84	; 0x54
 80065b2:	d077      	beq.n	80066a4 <_scanf_float+0x218>
 80065b4:	2b59      	cmp	r3, #89	; 0x59
 80065b6:	d199      	bne.n	80064ec <_scanf_float+0x60>
 80065b8:	2d07      	cmp	r5, #7
 80065ba:	d197      	bne.n	80064ec <_scanf_float+0x60>
 80065bc:	2508      	movs	r5, #8
 80065be:	e029      	b.n	8006614 <_scanf_float+0x188>
 80065c0:	2b74      	cmp	r3, #116	; 0x74
 80065c2:	d06f      	beq.n	80066a4 <_scanf_float+0x218>
 80065c4:	2b79      	cmp	r3, #121	; 0x79
 80065c6:	e7f6      	b.n	80065b6 <_scanf_float+0x12a>
 80065c8:	6821      	ldr	r1, [r4, #0]
 80065ca:	05c8      	lsls	r0, r1, #23
 80065cc:	d51a      	bpl.n	8006604 <_scanf_float+0x178>
 80065ce:	9b02      	ldr	r3, [sp, #8]
 80065d0:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 80065d4:	6021      	str	r1, [r4, #0]
 80065d6:	f109 0901 	add.w	r9, r9, #1
 80065da:	b11b      	cbz	r3, 80065e4 <_scanf_float+0x158>
 80065dc:	3b01      	subs	r3, #1
 80065de:	3201      	adds	r2, #1
 80065e0:	9302      	str	r3, [sp, #8]
 80065e2:	60a2      	str	r2, [r4, #8]
 80065e4:	68a3      	ldr	r3, [r4, #8]
 80065e6:	3b01      	subs	r3, #1
 80065e8:	60a3      	str	r3, [r4, #8]
 80065ea:	6923      	ldr	r3, [r4, #16]
 80065ec:	3301      	adds	r3, #1
 80065ee:	6123      	str	r3, [r4, #16]
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	3b01      	subs	r3, #1
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	607b      	str	r3, [r7, #4]
 80065f8:	f340 8084 	ble.w	8006704 <_scanf_float+0x278>
 80065fc:	683b      	ldr	r3, [r7, #0]
 80065fe:	3301      	adds	r3, #1
 8006600:	603b      	str	r3, [r7, #0]
 8006602:	e766      	b.n	80064d2 <_scanf_float+0x46>
 8006604:	eb1a 0f05 	cmn.w	sl, r5
 8006608:	f47f af70 	bne.w	80064ec <_scanf_float+0x60>
 800660c:	6822      	ldr	r2, [r4, #0]
 800660e:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8006612:	6022      	str	r2, [r4, #0]
 8006614:	f806 3b01 	strb.w	r3, [r6], #1
 8006618:	e7e4      	b.n	80065e4 <_scanf_float+0x158>
 800661a:	6822      	ldr	r2, [r4, #0]
 800661c:	0610      	lsls	r0, r2, #24
 800661e:	f57f af65 	bpl.w	80064ec <_scanf_float+0x60>
 8006622:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006626:	e7f4      	b.n	8006612 <_scanf_float+0x186>
 8006628:	f1ba 0f00 	cmp.w	sl, #0
 800662c:	d10e      	bne.n	800664c <_scanf_float+0x1c0>
 800662e:	f1b9 0f00 	cmp.w	r9, #0
 8006632:	d10e      	bne.n	8006652 <_scanf_float+0x1c6>
 8006634:	6822      	ldr	r2, [r4, #0]
 8006636:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800663a:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800663e:	d108      	bne.n	8006652 <_scanf_float+0x1c6>
 8006640:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8006644:	6022      	str	r2, [r4, #0]
 8006646:	f04f 0a01 	mov.w	sl, #1
 800664a:	e7e3      	b.n	8006614 <_scanf_float+0x188>
 800664c:	f1ba 0f02 	cmp.w	sl, #2
 8006650:	d055      	beq.n	80066fe <_scanf_float+0x272>
 8006652:	2d01      	cmp	r5, #1
 8006654:	d002      	beq.n	800665c <_scanf_float+0x1d0>
 8006656:	2d04      	cmp	r5, #4
 8006658:	f47f af48 	bne.w	80064ec <_scanf_float+0x60>
 800665c:	3501      	adds	r5, #1
 800665e:	b2ed      	uxtb	r5, r5
 8006660:	e7d8      	b.n	8006614 <_scanf_float+0x188>
 8006662:	f1ba 0f01 	cmp.w	sl, #1
 8006666:	f47f af41 	bne.w	80064ec <_scanf_float+0x60>
 800666a:	f04f 0a02 	mov.w	sl, #2
 800666e:	e7d1      	b.n	8006614 <_scanf_float+0x188>
 8006670:	b97d      	cbnz	r5, 8006692 <_scanf_float+0x206>
 8006672:	f1b9 0f00 	cmp.w	r9, #0
 8006676:	f47f af3c 	bne.w	80064f2 <_scanf_float+0x66>
 800667a:	6822      	ldr	r2, [r4, #0]
 800667c:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8006680:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8006684:	f47f af39 	bne.w	80064fa <_scanf_float+0x6e>
 8006688:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800668c:	6022      	str	r2, [r4, #0]
 800668e:	2501      	movs	r5, #1
 8006690:	e7c0      	b.n	8006614 <_scanf_float+0x188>
 8006692:	2d03      	cmp	r5, #3
 8006694:	d0e2      	beq.n	800665c <_scanf_float+0x1d0>
 8006696:	2d05      	cmp	r5, #5
 8006698:	e7de      	b.n	8006658 <_scanf_float+0x1cc>
 800669a:	2d02      	cmp	r5, #2
 800669c:	f47f af26 	bne.w	80064ec <_scanf_float+0x60>
 80066a0:	2503      	movs	r5, #3
 80066a2:	e7b7      	b.n	8006614 <_scanf_float+0x188>
 80066a4:	2d06      	cmp	r5, #6
 80066a6:	f47f af21 	bne.w	80064ec <_scanf_float+0x60>
 80066aa:	2507      	movs	r5, #7
 80066ac:	e7b2      	b.n	8006614 <_scanf_float+0x188>
 80066ae:	6822      	ldr	r2, [r4, #0]
 80066b0:	0591      	lsls	r1, r2, #22
 80066b2:	f57f af1b 	bpl.w	80064ec <_scanf_float+0x60>
 80066b6:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 80066ba:	6022      	str	r2, [r4, #0]
 80066bc:	f8cd 9004 	str.w	r9, [sp, #4]
 80066c0:	e7a8      	b.n	8006614 <_scanf_float+0x188>
 80066c2:	6822      	ldr	r2, [r4, #0]
 80066c4:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 80066c8:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 80066cc:	d006      	beq.n	80066dc <_scanf_float+0x250>
 80066ce:	0550      	lsls	r0, r2, #21
 80066d0:	f57f af0c 	bpl.w	80064ec <_scanf_float+0x60>
 80066d4:	f1b9 0f00 	cmp.w	r9, #0
 80066d8:	f43f af0f 	beq.w	80064fa <_scanf_float+0x6e>
 80066dc:	0591      	lsls	r1, r2, #22
 80066de:	bf58      	it	pl
 80066e0:	9901      	ldrpl	r1, [sp, #4]
 80066e2:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80066e6:	bf58      	it	pl
 80066e8:	eba9 0101 	subpl.w	r1, r9, r1
 80066ec:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 80066f0:	bf58      	it	pl
 80066f2:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 80066f6:	6022      	str	r2, [r4, #0]
 80066f8:	f04f 0900 	mov.w	r9, #0
 80066fc:	e78a      	b.n	8006614 <_scanf_float+0x188>
 80066fe:	f04f 0a03 	mov.w	sl, #3
 8006702:	e787      	b.n	8006614 <_scanf_float+0x188>
 8006704:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8006708:	4639      	mov	r1, r7
 800670a:	4640      	mov	r0, r8
 800670c:	4798      	blx	r3
 800670e:	2800      	cmp	r0, #0
 8006710:	f43f aedf 	beq.w	80064d2 <_scanf_float+0x46>
 8006714:	e6ea      	b.n	80064ec <_scanf_float+0x60>
 8006716:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800671a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800671e:	463a      	mov	r2, r7
 8006720:	4640      	mov	r0, r8
 8006722:	4798      	blx	r3
 8006724:	6923      	ldr	r3, [r4, #16]
 8006726:	3b01      	subs	r3, #1
 8006728:	6123      	str	r3, [r4, #16]
 800672a:	e6ec      	b.n	8006506 <_scanf_float+0x7a>
 800672c:	1e6b      	subs	r3, r5, #1
 800672e:	2b06      	cmp	r3, #6
 8006730:	d825      	bhi.n	800677e <_scanf_float+0x2f2>
 8006732:	2d02      	cmp	r5, #2
 8006734:	d836      	bhi.n	80067a4 <_scanf_float+0x318>
 8006736:	455e      	cmp	r6, fp
 8006738:	f67f aee8 	bls.w	800650c <_scanf_float+0x80>
 800673c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006740:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006744:	463a      	mov	r2, r7
 8006746:	4640      	mov	r0, r8
 8006748:	4798      	blx	r3
 800674a:	6923      	ldr	r3, [r4, #16]
 800674c:	3b01      	subs	r3, #1
 800674e:	6123      	str	r3, [r4, #16]
 8006750:	e7f1      	b.n	8006736 <_scanf_float+0x2aa>
 8006752:	9802      	ldr	r0, [sp, #8]
 8006754:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006758:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 800675c:	9002      	str	r0, [sp, #8]
 800675e:	463a      	mov	r2, r7
 8006760:	4640      	mov	r0, r8
 8006762:	4798      	blx	r3
 8006764:	6923      	ldr	r3, [r4, #16]
 8006766:	3b01      	subs	r3, #1
 8006768:	6123      	str	r3, [r4, #16]
 800676a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800676e:	fa5f fa8a 	uxtb.w	sl, sl
 8006772:	f1ba 0f02 	cmp.w	sl, #2
 8006776:	d1ec      	bne.n	8006752 <_scanf_float+0x2c6>
 8006778:	3d03      	subs	r5, #3
 800677a:	b2ed      	uxtb	r5, r5
 800677c:	1b76      	subs	r6, r6, r5
 800677e:	6823      	ldr	r3, [r4, #0]
 8006780:	05da      	lsls	r2, r3, #23
 8006782:	d52f      	bpl.n	80067e4 <_scanf_float+0x358>
 8006784:	055b      	lsls	r3, r3, #21
 8006786:	d510      	bpl.n	80067aa <_scanf_float+0x31e>
 8006788:	455e      	cmp	r6, fp
 800678a:	f67f aebf 	bls.w	800650c <_scanf_float+0x80>
 800678e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006792:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006796:	463a      	mov	r2, r7
 8006798:	4640      	mov	r0, r8
 800679a:	4798      	blx	r3
 800679c:	6923      	ldr	r3, [r4, #16]
 800679e:	3b01      	subs	r3, #1
 80067a0:	6123      	str	r3, [r4, #16]
 80067a2:	e7f1      	b.n	8006788 <_scanf_float+0x2fc>
 80067a4:	46aa      	mov	sl, r5
 80067a6:	9602      	str	r6, [sp, #8]
 80067a8:	e7df      	b.n	800676a <_scanf_float+0x2de>
 80067aa:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 80067ae:	6923      	ldr	r3, [r4, #16]
 80067b0:	2965      	cmp	r1, #101	; 0x65
 80067b2:	f103 33ff 	add.w	r3, r3, #4294967295
 80067b6:	f106 35ff 	add.w	r5, r6, #4294967295
 80067ba:	6123      	str	r3, [r4, #16]
 80067bc:	d00c      	beq.n	80067d8 <_scanf_float+0x34c>
 80067be:	2945      	cmp	r1, #69	; 0x45
 80067c0:	d00a      	beq.n	80067d8 <_scanf_float+0x34c>
 80067c2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80067c6:	463a      	mov	r2, r7
 80067c8:	4640      	mov	r0, r8
 80067ca:	4798      	blx	r3
 80067cc:	6923      	ldr	r3, [r4, #16]
 80067ce:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 80067d2:	3b01      	subs	r3, #1
 80067d4:	1eb5      	subs	r5, r6, #2
 80067d6:	6123      	str	r3, [r4, #16]
 80067d8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80067dc:	463a      	mov	r2, r7
 80067de:	4640      	mov	r0, r8
 80067e0:	4798      	blx	r3
 80067e2:	462e      	mov	r6, r5
 80067e4:	6825      	ldr	r5, [r4, #0]
 80067e6:	f015 0510 	ands.w	r5, r5, #16
 80067ea:	d159      	bne.n	80068a0 <_scanf_float+0x414>
 80067ec:	7035      	strb	r5, [r6, #0]
 80067ee:	6823      	ldr	r3, [r4, #0]
 80067f0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80067f4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80067f8:	d11b      	bne.n	8006832 <_scanf_float+0x3a6>
 80067fa:	9b01      	ldr	r3, [sp, #4]
 80067fc:	454b      	cmp	r3, r9
 80067fe:	eba3 0209 	sub.w	r2, r3, r9
 8006802:	d123      	bne.n	800684c <_scanf_float+0x3c0>
 8006804:	2200      	movs	r2, #0
 8006806:	4659      	mov	r1, fp
 8006808:	4640      	mov	r0, r8
 800680a:	f000 ff73 	bl	80076f4 <_strtod_r>
 800680e:	6822      	ldr	r2, [r4, #0]
 8006810:	9b03      	ldr	r3, [sp, #12]
 8006812:	f012 0f02 	tst.w	r2, #2
 8006816:	ec57 6b10 	vmov	r6, r7, d0
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	d021      	beq.n	8006862 <_scanf_float+0x3d6>
 800681e:	9903      	ldr	r1, [sp, #12]
 8006820:	1d1a      	adds	r2, r3, #4
 8006822:	600a      	str	r2, [r1, #0]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	e9c3 6700 	strd	r6, r7, [r3]
 800682a:	68e3      	ldr	r3, [r4, #12]
 800682c:	3301      	adds	r3, #1
 800682e:	60e3      	str	r3, [r4, #12]
 8006830:	e66d      	b.n	800650e <_scanf_float+0x82>
 8006832:	9b04      	ldr	r3, [sp, #16]
 8006834:	2b00      	cmp	r3, #0
 8006836:	d0e5      	beq.n	8006804 <_scanf_float+0x378>
 8006838:	9905      	ldr	r1, [sp, #20]
 800683a:	230a      	movs	r3, #10
 800683c:	462a      	mov	r2, r5
 800683e:	3101      	adds	r1, #1
 8006840:	4640      	mov	r0, r8
 8006842:	f000 ffdf 	bl	8007804 <_strtol_r>
 8006846:	9b04      	ldr	r3, [sp, #16]
 8006848:	9e05      	ldr	r6, [sp, #20]
 800684a:	1ac2      	subs	r2, r0, r3
 800684c:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8006850:	429e      	cmp	r6, r3
 8006852:	bf28      	it	cs
 8006854:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8006858:	4912      	ldr	r1, [pc, #72]	; (80068a4 <_scanf_float+0x418>)
 800685a:	4630      	mov	r0, r6
 800685c:	f000 f906 	bl	8006a6c <siprintf>
 8006860:	e7d0      	b.n	8006804 <_scanf_float+0x378>
 8006862:	9903      	ldr	r1, [sp, #12]
 8006864:	f012 0f04 	tst.w	r2, #4
 8006868:	f103 0204 	add.w	r2, r3, #4
 800686c:	600a      	str	r2, [r1, #0]
 800686e:	d1d9      	bne.n	8006824 <_scanf_float+0x398>
 8006870:	f8d3 8000 	ldr.w	r8, [r3]
 8006874:	ee10 2a10 	vmov	r2, s0
 8006878:	ee10 0a10 	vmov	r0, s0
 800687c:	463b      	mov	r3, r7
 800687e:	4639      	mov	r1, r7
 8006880:	f7fa f954 	bl	8000b2c <__aeabi_dcmpun>
 8006884:	b128      	cbz	r0, 8006892 <_scanf_float+0x406>
 8006886:	4808      	ldr	r0, [pc, #32]	; (80068a8 <_scanf_float+0x41c>)
 8006888:	f000 f8b6 	bl	80069f8 <nanf>
 800688c:	ed88 0a00 	vstr	s0, [r8]
 8006890:	e7cb      	b.n	800682a <_scanf_float+0x39e>
 8006892:	4630      	mov	r0, r6
 8006894:	4639      	mov	r1, r7
 8006896:	f7fa f9a7 	bl	8000be8 <__aeabi_d2f>
 800689a:	f8c8 0000 	str.w	r0, [r8]
 800689e:	e7c4      	b.n	800682a <_scanf_float+0x39e>
 80068a0:	2500      	movs	r5, #0
 80068a2:	e634      	b.n	800650e <_scanf_float+0x82>
 80068a4:	0800bf1e 	.word	0x0800bf1e
 80068a8:	0800c3ab 	.word	0x0800c3ab

080068ac <iprintf>:
 80068ac:	b40f      	push	{r0, r1, r2, r3}
 80068ae:	4b0a      	ldr	r3, [pc, #40]	; (80068d8 <iprintf+0x2c>)
 80068b0:	b513      	push	{r0, r1, r4, lr}
 80068b2:	681c      	ldr	r4, [r3, #0]
 80068b4:	b124      	cbz	r4, 80068c0 <iprintf+0x14>
 80068b6:	69a3      	ldr	r3, [r4, #24]
 80068b8:	b913      	cbnz	r3, 80068c0 <iprintf+0x14>
 80068ba:	4620      	mov	r0, r4
 80068bc:	f002 f80a 	bl	80088d4 <__sinit>
 80068c0:	ab05      	add	r3, sp, #20
 80068c2:	9a04      	ldr	r2, [sp, #16]
 80068c4:	68a1      	ldr	r1, [r4, #8]
 80068c6:	9301      	str	r3, [sp, #4]
 80068c8:	4620      	mov	r0, r4
 80068ca:	f003 fbff 	bl	800a0cc <_vfiprintf_r>
 80068ce:	b002      	add	sp, #8
 80068d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80068d4:	b004      	add	sp, #16
 80068d6:	4770      	bx	lr
 80068d8:	2000000c 	.word	0x2000000c

080068dc <_puts_r>:
 80068dc:	b570      	push	{r4, r5, r6, lr}
 80068de:	460e      	mov	r6, r1
 80068e0:	4605      	mov	r5, r0
 80068e2:	b118      	cbz	r0, 80068ec <_puts_r+0x10>
 80068e4:	6983      	ldr	r3, [r0, #24]
 80068e6:	b90b      	cbnz	r3, 80068ec <_puts_r+0x10>
 80068e8:	f001 fff4 	bl	80088d4 <__sinit>
 80068ec:	69ab      	ldr	r3, [r5, #24]
 80068ee:	68ac      	ldr	r4, [r5, #8]
 80068f0:	b913      	cbnz	r3, 80068f8 <_puts_r+0x1c>
 80068f2:	4628      	mov	r0, r5
 80068f4:	f001 ffee 	bl	80088d4 <__sinit>
 80068f8:	4b2c      	ldr	r3, [pc, #176]	; (80069ac <_puts_r+0xd0>)
 80068fa:	429c      	cmp	r4, r3
 80068fc:	d120      	bne.n	8006940 <_puts_r+0x64>
 80068fe:	686c      	ldr	r4, [r5, #4]
 8006900:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006902:	07db      	lsls	r3, r3, #31
 8006904:	d405      	bmi.n	8006912 <_puts_r+0x36>
 8006906:	89a3      	ldrh	r3, [r4, #12]
 8006908:	0598      	lsls	r0, r3, #22
 800690a:	d402      	bmi.n	8006912 <_puts_r+0x36>
 800690c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800690e:	f002 fc10 	bl	8009132 <__retarget_lock_acquire_recursive>
 8006912:	89a3      	ldrh	r3, [r4, #12]
 8006914:	0719      	lsls	r1, r3, #28
 8006916:	d51d      	bpl.n	8006954 <_puts_r+0x78>
 8006918:	6923      	ldr	r3, [r4, #16]
 800691a:	b1db      	cbz	r3, 8006954 <_puts_r+0x78>
 800691c:	3e01      	subs	r6, #1
 800691e:	68a3      	ldr	r3, [r4, #8]
 8006920:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8006924:	3b01      	subs	r3, #1
 8006926:	60a3      	str	r3, [r4, #8]
 8006928:	bb39      	cbnz	r1, 800697a <_puts_r+0x9e>
 800692a:	2b00      	cmp	r3, #0
 800692c:	da38      	bge.n	80069a0 <_puts_r+0xc4>
 800692e:	4622      	mov	r2, r4
 8006930:	210a      	movs	r1, #10
 8006932:	4628      	mov	r0, r5
 8006934:	f000 ff68 	bl	8007808 <__swbuf_r>
 8006938:	3001      	adds	r0, #1
 800693a:	d011      	beq.n	8006960 <_puts_r+0x84>
 800693c:	250a      	movs	r5, #10
 800693e:	e011      	b.n	8006964 <_puts_r+0x88>
 8006940:	4b1b      	ldr	r3, [pc, #108]	; (80069b0 <_puts_r+0xd4>)
 8006942:	429c      	cmp	r4, r3
 8006944:	d101      	bne.n	800694a <_puts_r+0x6e>
 8006946:	68ac      	ldr	r4, [r5, #8]
 8006948:	e7da      	b.n	8006900 <_puts_r+0x24>
 800694a:	4b1a      	ldr	r3, [pc, #104]	; (80069b4 <_puts_r+0xd8>)
 800694c:	429c      	cmp	r4, r3
 800694e:	bf08      	it	eq
 8006950:	68ec      	ldreq	r4, [r5, #12]
 8006952:	e7d5      	b.n	8006900 <_puts_r+0x24>
 8006954:	4621      	mov	r1, r4
 8006956:	4628      	mov	r0, r5
 8006958:	f000 ffa8 	bl	80078ac <__swsetup_r>
 800695c:	2800      	cmp	r0, #0
 800695e:	d0dd      	beq.n	800691c <_puts_r+0x40>
 8006960:	f04f 35ff 	mov.w	r5, #4294967295
 8006964:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006966:	07da      	lsls	r2, r3, #31
 8006968:	d405      	bmi.n	8006976 <_puts_r+0x9a>
 800696a:	89a3      	ldrh	r3, [r4, #12]
 800696c:	059b      	lsls	r3, r3, #22
 800696e:	d402      	bmi.n	8006976 <_puts_r+0x9a>
 8006970:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006972:	f002 fbdf 	bl	8009134 <__retarget_lock_release_recursive>
 8006976:	4628      	mov	r0, r5
 8006978:	bd70      	pop	{r4, r5, r6, pc}
 800697a:	2b00      	cmp	r3, #0
 800697c:	da04      	bge.n	8006988 <_puts_r+0xac>
 800697e:	69a2      	ldr	r2, [r4, #24]
 8006980:	429a      	cmp	r2, r3
 8006982:	dc06      	bgt.n	8006992 <_puts_r+0xb6>
 8006984:	290a      	cmp	r1, #10
 8006986:	d004      	beq.n	8006992 <_puts_r+0xb6>
 8006988:	6823      	ldr	r3, [r4, #0]
 800698a:	1c5a      	adds	r2, r3, #1
 800698c:	6022      	str	r2, [r4, #0]
 800698e:	7019      	strb	r1, [r3, #0]
 8006990:	e7c5      	b.n	800691e <_puts_r+0x42>
 8006992:	4622      	mov	r2, r4
 8006994:	4628      	mov	r0, r5
 8006996:	f000 ff37 	bl	8007808 <__swbuf_r>
 800699a:	3001      	adds	r0, #1
 800699c:	d1bf      	bne.n	800691e <_puts_r+0x42>
 800699e:	e7df      	b.n	8006960 <_puts_r+0x84>
 80069a0:	6823      	ldr	r3, [r4, #0]
 80069a2:	250a      	movs	r5, #10
 80069a4:	1c5a      	adds	r2, r3, #1
 80069a6:	6022      	str	r2, [r4, #0]
 80069a8:	701d      	strb	r5, [r3, #0]
 80069aa:	e7db      	b.n	8006964 <_puts_r+0x88>
 80069ac:	0800c12c 	.word	0x0800c12c
 80069b0:	0800c14c 	.word	0x0800c14c
 80069b4:	0800c10c 	.word	0x0800c10c

080069b8 <puts>:
 80069b8:	4b02      	ldr	r3, [pc, #8]	; (80069c4 <puts+0xc>)
 80069ba:	4601      	mov	r1, r0
 80069bc:	6818      	ldr	r0, [r3, #0]
 80069be:	f7ff bf8d 	b.w	80068dc <_puts_r>
 80069c2:	bf00      	nop
 80069c4:	2000000c 	.word	0x2000000c

080069c8 <iscanf>:
 80069c8:	b40f      	push	{r0, r1, r2, r3}
 80069ca:	4b0a      	ldr	r3, [pc, #40]	; (80069f4 <iscanf+0x2c>)
 80069cc:	b513      	push	{r0, r1, r4, lr}
 80069ce:	681c      	ldr	r4, [r3, #0]
 80069d0:	b124      	cbz	r4, 80069dc <iscanf+0x14>
 80069d2:	69a3      	ldr	r3, [r4, #24]
 80069d4:	b913      	cbnz	r3, 80069dc <iscanf+0x14>
 80069d6:	4620      	mov	r0, r4
 80069d8:	f001 ff7c 	bl	80088d4 <__sinit>
 80069dc:	ab05      	add	r3, sp, #20
 80069de:	9a04      	ldr	r2, [sp, #16]
 80069e0:	6861      	ldr	r1, [r4, #4]
 80069e2:	9301      	str	r3, [sp, #4]
 80069e4:	4620      	mov	r0, r4
 80069e6:	f003 fe47 	bl	800a678 <_vfiscanf_r>
 80069ea:	b002      	add	sp, #8
 80069ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80069f0:	b004      	add	sp, #16
 80069f2:	4770      	bx	lr
 80069f4:	2000000c 	.word	0x2000000c

080069f8 <nanf>:
 80069f8:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8006a00 <nanf+0x8>
 80069fc:	4770      	bx	lr
 80069fe:	bf00      	nop
 8006a00:	7fc00000 	.word	0x7fc00000

08006a04 <sniprintf>:
 8006a04:	b40c      	push	{r2, r3}
 8006a06:	b530      	push	{r4, r5, lr}
 8006a08:	4b17      	ldr	r3, [pc, #92]	; (8006a68 <sniprintf+0x64>)
 8006a0a:	1e0c      	subs	r4, r1, #0
 8006a0c:	681d      	ldr	r5, [r3, #0]
 8006a0e:	b09d      	sub	sp, #116	; 0x74
 8006a10:	da08      	bge.n	8006a24 <sniprintf+0x20>
 8006a12:	238b      	movs	r3, #139	; 0x8b
 8006a14:	602b      	str	r3, [r5, #0]
 8006a16:	f04f 30ff 	mov.w	r0, #4294967295
 8006a1a:	b01d      	add	sp, #116	; 0x74
 8006a1c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006a20:	b002      	add	sp, #8
 8006a22:	4770      	bx	lr
 8006a24:	f44f 7302 	mov.w	r3, #520	; 0x208
 8006a28:	f8ad 3014 	strh.w	r3, [sp, #20]
 8006a2c:	bf14      	ite	ne
 8006a2e:	f104 33ff 	addne.w	r3, r4, #4294967295
 8006a32:	4623      	moveq	r3, r4
 8006a34:	9304      	str	r3, [sp, #16]
 8006a36:	9307      	str	r3, [sp, #28]
 8006a38:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006a3c:	9002      	str	r0, [sp, #8]
 8006a3e:	9006      	str	r0, [sp, #24]
 8006a40:	f8ad 3016 	strh.w	r3, [sp, #22]
 8006a44:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8006a46:	ab21      	add	r3, sp, #132	; 0x84
 8006a48:	a902      	add	r1, sp, #8
 8006a4a:	4628      	mov	r0, r5
 8006a4c:	9301      	str	r3, [sp, #4]
 8006a4e:	f003 fa13 	bl	8009e78 <_svfiprintf_r>
 8006a52:	1c43      	adds	r3, r0, #1
 8006a54:	bfbc      	itt	lt
 8006a56:	238b      	movlt	r3, #139	; 0x8b
 8006a58:	602b      	strlt	r3, [r5, #0]
 8006a5a:	2c00      	cmp	r4, #0
 8006a5c:	d0dd      	beq.n	8006a1a <sniprintf+0x16>
 8006a5e:	9b02      	ldr	r3, [sp, #8]
 8006a60:	2200      	movs	r2, #0
 8006a62:	701a      	strb	r2, [r3, #0]
 8006a64:	e7d9      	b.n	8006a1a <sniprintf+0x16>
 8006a66:	bf00      	nop
 8006a68:	2000000c 	.word	0x2000000c

08006a6c <siprintf>:
 8006a6c:	b40e      	push	{r1, r2, r3}
 8006a6e:	b500      	push	{lr}
 8006a70:	b09c      	sub	sp, #112	; 0x70
 8006a72:	ab1d      	add	r3, sp, #116	; 0x74
 8006a74:	9002      	str	r0, [sp, #8]
 8006a76:	9006      	str	r0, [sp, #24]
 8006a78:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006a7c:	4809      	ldr	r0, [pc, #36]	; (8006aa4 <siprintf+0x38>)
 8006a7e:	9107      	str	r1, [sp, #28]
 8006a80:	9104      	str	r1, [sp, #16]
 8006a82:	4909      	ldr	r1, [pc, #36]	; (8006aa8 <siprintf+0x3c>)
 8006a84:	f853 2b04 	ldr.w	r2, [r3], #4
 8006a88:	9105      	str	r1, [sp, #20]
 8006a8a:	6800      	ldr	r0, [r0, #0]
 8006a8c:	9301      	str	r3, [sp, #4]
 8006a8e:	a902      	add	r1, sp, #8
 8006a90:	f003 f9f2 	bl	8009e78 <_svfiprintf_r>
 8006a94:	9b02      	ldr	r3, [sp, #8]
 8006a96:	2200      	movs	r2, #0
 8006a98:	701a      	strb	r2, [r3, #0]
 8006a9a:	b01c      	add	sp, #112	; 0x70
 8006a9c:	f85d eb04 	ldr.w	lr, [sp], #4
 8006aa0:	b003      	add	sp, #12
 8006aa2:	4770      	bx	lr
 8006aa4:	2000000c 	.word	0x2000000c
 8006aa8:	ffff0208 	.word	0xffff0208

08006aac <sulp>:
 8006aac:	b570      	push	{r4, r5, r6, lr}
 8006aae:	4604      	mov	r4, r0
 8006ab0:	460d      	mov	r5, r1
 8006ab2:	ec45 4b10 	vmov	d0, r4, r5
 8006ab6:	4616      	mov	r6, r2
 8006ab8:	f002 ff3c 	bl	8009934 <__ulp>
 8006abc:	ec51 0b10 	vmov	r0, r1, d0
 8006ac0:	b17e      	cbz	r6, 8006ae2 <sulp+0x36>
 8006ac2:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8006ac6:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	dd09      	ble.n	8006ae2 <sulp+0x36>
 8006ace:	051b      	lsls	r3, r3, #20
 8006ad0:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8006ad4:	2400      	movs	r4, #0
 8006ad6:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8006ada:	4622      	mov	r2, r4
 8006adc:	462b      	mov	r3, r5
 8006ade:	f7f9 fd8b 	bl	80005f8 <__aeabi_dmul>
 8006ae2:	bd70      	pop	{r4, r5, r6, pc}
 8006ae4:	0000      	movs	r0, r0
	...

08006ae8 <_strtod_l>:
 8006ae8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006aec:	ed2d 8b02 	vpush	{d8}
 8006af0:	b09d      	sub	sp, #116	; 0x74
 8006af2:	461f      	mov	r7, r3
 8006af4:	2300      	movs	r3, #0
 8006af6:	9318      	str	r3, [sp, #96]	; 0x60
 8006af8:	4ba2      	ldr	r3, [pc, #648]	; (8006d84 <_strtod_l+0x29c>)
 8006afa:	9213      	str	r2, [sp, #76]	; 0x4c
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	9305      	str	r3, [sp, #20]
 8006b00:	4604      	mov	r4, r0
 8006b02:	4618      	mov	r0, r3
 8006b04:	4688      	mov	r8, r1
 8006b06:	f7f9 fb63 	bl	80001d0 <strlen>
 8006b0a:	f04f 0a00 	mov.w	sl, #0
 8006b0e:	4605      	mov	r5, r0
 8006b10:	f04f 0b00 	mov.w	fp, #0
 8006b14:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8006b18:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006b1a:	781a      	ldrb	r2, [r3, #0]
 8006b1c:	2a2b      	cmp	r2, #43	; 0x2b
 8006b1e:	d04e      	beq.n	8006bbe <_strtod_l+0xd6>
 8006b20:	d83b      	bhi.n	8006b9a <_strtod_l+0xb2>
 8006b22:	2a0d      	cmp	r2, #13
 8006b24:	d834      	bhi.n	8006b90 <_strtod_l+0xa8>
 8006b26:	2a08      	cmp	r2, #8
 8006b28:	d834      	bhi.n	8006b94 <_strtod_l+0xac>
 8006b2a:	2a00      	cmp	r2, #0
 8006b2c:	d03e      	beq.n	8006bac <_strtod_l+0xc4>
 8006b2e:	2300      	movs	r3, #0
 8006b30:	930a      	str	r3, [sp, #40]	; 0x28
 8006b32:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 8006b34:	7833      	ldrb	r3, [r6, #0]
 8006b36:	2b30      	cmp	r3, #48	; 0x30
 8006b38:	f040 80b0 	bne.w	8006c9c <_strtod_l+0x1b4>
 8006b3c:	7873      	ldrb	r3, [r6, #1]
 8006b3e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8006b42:	2b58      	cmp	r3, #88	; 0x58
 8006b44:	d168      	bne.n	8006c18 <_strtod_l+0x130>
 8006b46:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006b48:	9301      	str	r3, [sp, #4]
 8006b4a:	ab18      	add	r3, sp, #96	; 0x60
 8006b4c:	9702      	str	r7, [sp, #8]
 8006b4e:	9300      	str	r3, [sp, #0]
 8006b50:	4a8d      	ldr	r2, [pc, #564]	; (8006d88 <_strtod_l+0x2a0>)
 8006b52:	ab19      	add	r3, sp, #100	; 0x64
 8006b54:	a917      	add	r1, sp, #92	; 0x5c
 8006b56:	4620      	mov	r0, r4
 8006b58:	f001 ffde 	bl	8008b18 <__gethex>
 8006b5c:	f010 0707 	ands.w	r7, r0, #7
 8006b60:	4605      	mov	r5, r0
 8006b62:	d005      	beq.n	8006b70 <_strtod_l+0x88>
 8006b64:	2f06      	cmp	r7, #6
 8006b66:	d12c      	bne.n	8006bc2 <_strtod_l+0xda>
 8006b68:	3601      	adds	r6, #1
 8006b6a:	2300      	movs	r3, #0
 8006b6c:	9617      	str	r6, [sp, #92]	; 0x5c
 8006b6e:	930a      	str	r3, [sp, #40]	; 0x28
 8006b70:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	f040 8590 	bne.w	8007698 <_strtod_l+0xbb0>
 8006b78:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006b7a:	b1eb      	cbz	r3, 8006bb8 <_strtod_l+0xd0>
 8006b7c:	4652      	mov	r2, sl
 8006b7e:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8006b82:	ec43 2b10 	vmov	d0, r2, r3
 8006b86:	b01d      	add	sp, #116	; 0x74
 8006b88:	ecbd 8b02 	vpop	{d8}
 8006b8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006b90:	2a20      	cmp	r2, #32
 8006b92:	d1cc      	bne.n	8006b2e <_strtod_l+0x46>
 8006b94:	3301      	adds	r3, #1
 8006b96:	9317      	str	r3, [sp, #92]	; 0x5c
 8006b98:	e7be      	b.n	8006b18 <_strtod_l+0x30>
 8006b9a:	2a2d      	cmp	r2, #45	; 0x2d
 8006b9c:	d1c7      	bne.n	8006b2e <_strtod_l+0x46>
 8006b9e:	2201      	movs	r2, #1
 8006ba0:	920a      	str	r2, [sp, #40]	; 0x28
 8006ba2:	1c5a      	adds	r2, r3, #1
 8006ba4:	9217      	str	r2, [sp, #92]	; 0x5c
 8006ba6:	785b      	ldrb	r3, [r3, #1]
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	d1c2      	bne.n	8006b32 <_strtod_l+0x4a>
 8006bac:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8006bae:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	f040 856e 	bne.w	8007694 <_strtod_l+0xbac>
 8006bb8:	4652      	mov	r2, sl
 8006bba:	465b      	mov	r3, fp
 8006bbc:	e7e1      	b.n	8006b82 <_strtod_l+0x9a>
 8006bbe:	2200      	movs	r2, #0
 8006bc0:	e7ee      	b.n	8006ba0 <_strtod_l+0xb8>
 8006bc2:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8006bc4:	b13a      	cbz	r2, 8006bd6 <_strtod_l+0xee>
 8006bc6:	2135      	movs	r1, #53	; 0x35
 8006bc8:	a81a      	add	r0, sp, #104	; 0x68
 8006bca:	f002 ffbe 	bl	8009b4a <__copybits>
 8006bce:	9918      	ldr	r1, [sp, #96]	; 0x60
 8006bd0:	4620      	mov	r0, r4
 8006bd2:	f002 fb7d 	bl	80092d0 <_Bfree>
 8006bd6:	3f01      	subs	r7, #1
 8006bd8:	2f04      	cmp	r7, #4
 8006bda:	d806      	bhi.n	8006bea <_strtod_l+0x102>
 8006bdc:	e8df f007 	tbb	[pc, r7]
 8006be0:	1714030a 	.word	0x1714030a
 8006be4:	0a          	.byte	0x0a
 8006be5:	00          	.byte	0x00
 8006be6:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 8006bea:	0728      	lsls	r0, r5, #28
 8006bec:	d5c0      	bpl.n	8006b70 <_strtod_l+0x88>
 8006bee:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8006bf2:	e7bd      	b.n	8006b70 <_strtod_l+0x88>
 8006bf4:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 8006bf8:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8006bfa:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8006bfe:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8006c02:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8006c06:	e7f0      	b.n	8006bea <_strtod_l+0x102>
 8006c08:	f8df b180 	ldr.w	fp, [pc, #384]	; 8006d8c <_strtod_l+0x2a4>
 8006c0c:	e7ed      	b.n	8006bea <_strtod_l+0x102>
 8006c0e:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8006c12:	f04f 3aff 	mov.w	sl, #4294967295
 8006c16:	e7e8      	b.n	8006bea <_strtod_l+0x102>
 8006c18:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006c1a:	1c5a      	adds	r2, r3, #1
 8006c1c:	9217      	str	r2, [sp, #92]	; 0x5c
 8006c1e:	785b      	ldrb	r3, [r3, #1]
 8006c20:	2b30      	cmp	r3, #48	; 0x30
 8006c22:	d0f9      	beq.n	8006c18 <_strtod_l+0x130>
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	d0a3      	beq.n	8006b70 <_strtod_l+0x88>
 8006c28:	2301      	movs	r3, #1
 8006c2a:	f04f 0900 	mov.w	r9, #0
 8006c2e:	9304      	str	r3, [sp, #16]
 8006c30:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006c32:	9308      	str	r3, [sp, #32]
 8006c34:	f8cd 901c 	str.w	r9, [sp, #28]
 8006c38:	464f      	mov	r7, r9
 8006c3a:	220a      	movs	r2, #10
 8006c3c:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8006c3e:	7806      	ldrb	r6, [r0, #0]
 8006c40:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8006c44:	b2d9      	uxtb	r1, r3
 8006c46:	2909      	cmp	r1, #9
 8006c48:	d92a      	bls.n	8006ca0 <_strtod_l+0x1b8>
 8006c4a:	9905      	ldr	r1, [sp, #20]
 8006c4c:	462a      	mov	r2, r5
 8006c4e:	f003 ffb6 	bl	800abbe <strncmp>
 8006c52:	b398      	cbz	r0, 8006cbc <_strtod_l+0x1d4>
 8006c54:	2000      	movs	r0, #0
 8006c56:	4632      	mov	r2, r6
 8006c58:	463d      	mov	r5, r7
 8006c5a:	9005      	str	r0, [sp, #20]
 8006c5c:	4603      	mov	r3, r0
 8006c5e:	2a65      	cmp	r2, #101	; 0x65
 8006c60:	d001      	beq.n	8006c66 <_strtod_l+0x17e>
 8006c62:	2a45      	cmp	r2, #69	; 0x45
 8006c64:	d118      	bne.n	8006c98 <_strtod_l+0x1b0>
 8006c66:	b91d      	cbnz	r5, 8006c70 <_strtod_l+0x188>
 8006c68:	9a04      	ldr	r2, [sp, #16]
 8006c6a:	4302      	orrs	r2, r0
 8006c6c:	d09e      	beq.n	8006bac <_strtod_l+0xc4>
 8006c6e:	2500      	movs	r5, #0
 8006c70:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 8006c74:	f108 0201 	add.w	r2, r8, #1
 8006c78:	9217      	str	r2, [sp, #92]	; 0x5c
 8006c7a:	f898 2001 	ldrb.w	r2, [r8, #1]
 8006c7e:	2a2b      	cmp	r2, #43	; 0x2b
 8006c80:	d075      	beq.n	8006d6e <_strtod_l+0x286>
 8006c82:	2a2d      	cmp	r2, #45	; 0x2d
 8006c84:	d07b      	beq.n	8006d7e <_strtod_l+0x296>
 8006c86:	f04f 0c00 	mov.w	ip, #0
 8006c8a:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8006c8e:	2909      	cmp	r1, #9
 8006c90:	f240 8082 	bls.w	8006d98 <_strtod_l+0x2b0>
 8006c94:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8006c98:	2600      	movs	r6, #0
 8006c9a:	e09d      	b.n	8006dd8 <_strtod_l+0x2f0>
 8006c9c:	2300      	movs	r3, #0
 8006c9e:	e7c4      	b.n	8006c2a <_strtod_l+0x142>
 8006ca0:	2f08      	cmp	r7, #8
 8006ca2:	bfd8      	it	le
 8006ca4:	9907      	ldrle	r1, [sp, #28]
 8006ca6:	f100 0001 	add.w	r0, r0, #1
 8006caa:	bfda      	itte	le
 8006cac:	fb02 3301 	mlale	r3, r2, r1, r3
 8006cb0:	9307      	strle	r3, [sp, #28]
 8006cb2:	fb02 3909 	mlagt	r9, r2, r9, r3
 8006cb6:	3701      	adds	r7, #1
 8006cb8:	9017      	str	r0, [sp, #92]	; 0x5c
 8006cba:	e7bf      	b.n	8006c3c <_strtod_l+0x154>
 8006cbc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006cbe:	195a      	adds	r2, r3, r5
 8006cc0:	9217      	str	r2, [sp, #92]	; 0x5c
 8006cc2:	5d5a      	ldrb	r2, [r3, r5]
 8006cc4:	2f00      	cmp	r7, #0
 8006cc6:	d037      	beq.n	8006d38 <_strtod_l+0x250>
 8006cc8:	9005      	str	r0, [sp, #20]
 8006cca:	463d      	mov	r5, r7
 8006ccc:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8006cd0:	2b09      	cmp	r3, #9
 8006cd2:	d912      	bls.n	8006cfa <_strtod_l+0x212>
 8006cd4:	2301      	movs	r3, #1
 8006cd6:	e7c2      	b.n	8006c5e <_strtod_l+0x176>
 8006cd8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006cda:	1c5a      	adds	r2, r3, #1
 8006cdc:	9217      	str	r2, [sp, #92]	; 0x5c
 8006cde:	785a      	ldrb	r2, [r3, #1]
 8006ce0:	3001      	adds	r0, #1
 8006ce2:	2a30      	cmp	r2, #48	; 0x30
 8006ce4:	d0f8      	beq.n	8006cd8 <_strtod_l+0x1f0>
 8006ce6:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8006cea:	2b08      	cmp	r3, #8
 8006cec:	f200 84d9 	bhi.w	80076a2 <_strtod_l+0xbba>
 8006cf0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006cf2:	9005      	str	r0, [sp, #20]
 8006cf4:	2000      	movs	r0, #0
 8006cf6:	9308      	str	r3, [sp, #32]
 8006cf8:	4605      	mov	r5, r0
 8006cfa:	3a30      	subs	r2, #48	; 0x30
 8006cfc:	f100 0301 	add.w	r3, r0, #1
 8006d00:	d014      	beq.n	8006d2c <_strtod_l+0x244>
 8006d02:	9905      	ldr	r1, [sp, #20]
 8006d04:	4419      	add	r1, r3
 8006d06:	9105      	str	r1, [sp, #20]
 8006d08:	462b      	mov	r3, r5
 8006d0a:	eb00 0e05 	add.w	lr, r0, r5
 8006d0e:	210a      	movs	r1, #10
 8006d10:	4573      	cmp	r3, lr
 8006d12:	d113      	bne.n	8006d3c <_strtod_l+0x254>
 8006d14:	182b      	adds	r3, r5, r0
 8006d16:	2b08      	cmp	r3, #8
 8006d18:	f105 0501 	add.w	r5, r5, #1
 8006d1c:	4405      	add	r5, r0
 8006d1e:	dc1c      	bgt.n	8006d5a <_strtod_l+0x272>
 8006d20:	9907      	ldr	r1, [sp, #28]
 8006d22:	230a      	movs	r3, #10
 8006d24:	fb03 2301 	mla	r3, r3, r1, r2
 8006d28:	9307      	str	r3, [sp, #28]
 8006d2a:	2300      	movs	r3, #0
 8006d2c:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8006d2e:	1c51      	adds	r1, r2, #1
 8006d30:	9117      	str	r1, [sp, #92]	; 0x5c
 8006d32:	7852      	ldrb	r2, [r2, #1]
 8006d34:	4618      	mov	r0, r3
 8006d36:	e7c9      	b.n	8006ccc <_strtod_l+0x1e4>
 8006d38:	4638      	mov	r0, r7
 8006d3a:	e7d2      	b.n	8006ce2 <_strtod_l+0x1fa>
 8006d3c:	2b08      	cmp	r3, #8
 8006d3e:	dc04      	bgt.n	8006d4a <_strtod_l+0x262>
 8006d40:	9e07      	ldr	r6, [sp, #28]
 8006d42:	434e      	muls	r6, r1
 8006d44:	9607      	str	r6, [sp, #28]
 8006d46:	3301      	adds	r3, #1
 8006d48:	e7e2      	b.n	8006d10 <_strtod_l+0x228>
 8006d4a:	f103 0c01 	add.w	ip, r3, #1
 8006d4e:	f1bc 0f10 	cmp.w	ip, #16
 8006d52:	bfd8      	it	le
 8006d54:	fb01 f909 	mulle.w	r9, r1, r9
 8006d58:	e7f5      	b.n	8006d46 <_strtod_l+0x25e>
 8006d5a:	2d10      	cmp	r5, #16
 8006d5c:	bfdc      	itt	le
 8006d5e:	230a      	movle	r3, #10
 8006d60:	fb03 2909 	mlale	r9, r3, r9, r2
 8006d64:	e7e1      	b.n	8006d2a <_strtod_l+0x242>
 8006d66:	2300      	movs	r3, #0
 8006d68:	9305      	str	r3, [sp, #20]
 8006d6a:	2301      	movs	r3, #1
 8006d6c:	e77c      	b.n	8006c68 <_strtod_l+0x180>
 8006d6e:	f04f 0c00 	mov.w	ip, #0
 8006d72:	f108 0202 	add.w	r2, r8, #2
 8006d76:	9217      	str	r2, [sp, #92]	; 0x5c
 8006d78:	f898 2002 	ldrb.w	r2, [r8, #2]
 8006d7c:	e785      	b.n	8006c8a <_strtod_l+0x1a2>
 8006d7e:	f04f 0c01 	mov.w	ip, #1
 8006d82:	e7f6      	b.n	8006d72 <_strtod_l+0x28a>
 8006d84:	0800c1d4 	.word	0x0800c1d4
 8006d88:	0800bf24 	.word	0x0800bf24
 8006d8c:	7ff00000 	.word	0x7ff00000
 8006d90:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8006d92:	1c51      	adds	r1, r2, #1
 8006d94:	9117      	str	r1, [sp, #92]	; 0x5c
 8006d96:	7852      	ldrb	r2, [r2, #1]
 8006d98:	2a30      	cmp	r2, #48	; 0x30
 8006d9a:	d0f9      	beq.n	8006d90 <_strtod_l+0x2a8>
 8006d9c:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8006da0:	2908      	cmp	r1, #8
 8006da2:	f63f af79 	bhi.w	8006c98 <_strtod_l+0x1b0>
 8006da6:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 8006daa:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8006dac:	9206      	str	r2, [sp, #24]
 8006dae:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8006db0:	1c51      	adds	r1, r2, #1
 8006db2:	9117      	str	r1, [sp, #92]	; 0x5c
 8006db4:	7852      	ldrb	r2, [r2, #1]
 8006db6:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 8006dba:	2e09      	cmp	r6, #9
 8006dbc:	d937      	bls.n	8006e2e <_strtod_l+0x346>
 8006dbe:	9e06      	ldr	r6, [sp, #24]
 8006dc0:	1b89      	subs	r1, r1, r6
 8006dc2:	2908      	cmp	r1, #8
 8006dc4:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8006dc8:	dc02      	bgt.n	8006dd0 <_strtod_l+0x2e8>
 8006dca:	4576      	cmp	r6, lr
 8006dcc:	bfa8      	it	ge
 8006dce:	4676      	movge	r6, lr
 8006dd0:	f1bc 0f00 	cmp.w	ip, #0
 8006dd4:	d000      	beq.n	8006dd8 <_strtod_l+0x2f0>
 8006dd6:	4276      	negs	r6, r6
 8006dd8:	2d00      	cmp	r5, #0
 8006dda:	d14d      	bne.n	8006e78 <_strtod_l+0x390>
 8006ddc:	9904      	ldr	r1, [sp, #16]
 8006dde:	4301      	orrs	r1, r0
 8006de0:	f47f aec6 	bne.w	8006b70 <_strtod_l+0x88>
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	f47f aee1 	bne.w	8006bac <_strtod_l+0xc4>
 8006dea:	2a69      	cmp	r2, #105	; 0x69
 8006dec:	d027      	beq.n	8006e3e <_strtod_l+0x356>
 8006dee:	dc24      	bgt.n	8006e3a <_strtod_l+0x352>
 8006df0:	2a49      	cmp	r2, #73	; 0x49
 8006df2:	d024      	beq.n	8006e3e <_strtod_l+0x356>
 8006df4:	2a4e      	cmp	r2, #78	; 0x4e
 8006df6:	f47f aed9 	bne.w	8006bac <_strtod_l+0xc4>
 8006dfa:	499f      	ldr	r1, [pc, #636]	; (8007078 <_strtod_l+0x590>)
 8006dfc:	a817      	add	r0, sp, #92	; 0x5c
 8006dfe:	f002 f8e3 	bl	8008fc8 <__match>
 8006e02:	2800      	cmp	r0, #0
 8006e04:	f43f aed2 	beq.w	8006bac <_strtod_l+0xc4>
 8006e08:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006e0a:	781b      	ldrb	r3, [r3, #0]
 8006e0c:	2b28      	cmp	r3, #40	; 0x28
 8006e0e:	d12d      	bne.n	8006e6c <_strtod_l+0x384>
 8006e10:	499a      	ldr	r1, [pc, #616]	; (800707c <_strtod_l+0x594>)
 8006e12:	aa1a      	add	r2, sp, #104	; 0x68
 8006e14:	a817      	add	r0, sp, #92	; 0x5c
 8006e16:	f002 f8eb 	bl	8008ff0 <__hexnan>
 8006e1a:	2805      	cmp	r0, #5
 8006e1c:	d126      	bne.n	8006e6c <_strtod_l+0x384>
 8006e1e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8006e20:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 8006e24:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8006e28:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8006e2c:	e6a0      	b.n	8006b70 <_strtod_l+0x88>
 8006e2e:	210a      	movs	r1, #10
 8006e30:	fb01 2e0e 	mla	lr, r1, lr, r2
 8006e34:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8006e38:	e7b9      	b.n	8006dae <_strtod_l+0x2c6>
 8006e3a:	2a6e      	cmp	r2, #110	; 0x6e
 8006e3c:	e7db      	b.n	8006df6 <_strtod_l+0x30e>
 8006e3e:	4990      	ldr	r1, [pc, #576]	; (8007080 <_strtod_l+0x598>)
 8006e40:	a817      	add	r0, sp, #92	; 0x5c
 8006e42:	f002 f8c1 	bl	8008fc8 <__match>
 8006e46:	2800      	cmp	r0, #0
 8006e48:	f43f aeb0 	beq.w	8006bac <_strtod_l+0xc4>
 8006e4c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006e4e:	498d      	ldr	r1, [pc, #564]	; (8007084 <_strtod_l+0x59c>)
 8006e50:	3b01      	subs	r3, #1
 8006e52:	a817      	add	r0, sp, #92	; 0x5c
 8006e54:	9317      	str	r3, [sp, #92]	; 0x5c
 8006e56:	f002 f8b7 	bl	8008fc8 <__match>
 8006e5a:	b910      	cbnz	r0, 8006e62 <_strtod_l+0x37a>
 8006e5c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006e5e:	3301      	adds	r3, #1
 8006e60:	9317      	str	r3, [sp, #92]	; 0x5c
 8006e62:	f8df b230 	ldr.w	fp, [pc, #560]	; 8007094 <_strtod_l+0x5ac>
 8006e66:	f04f 0a00 	mov.w	sl, #0
 8006e6a:	e681      	b.n	8006b70 <_strtod_l+0x88>
 8006e6c:	4886      	ldr	r0, [pc, #536]	; (8007088 <_strtod_l+0x5a0>)
 8006e6e:	f003 fe13 	bl	800aa98 <nan>
 8006e72:	ec5b ab10 	vmov	sl, fp, d0
 8006e76:	e67b      	b.n	8006b70 <_strtod_l+0x88>
 8006e78:	9b05      	ldr	r3, [sp, #20]
 8006e7a:	9807      	ldr	r0, [sp, #28]
 8006e7c:	1af3      	subs	r3, r6, r3
 8006e7e:	2f00      	cmp	r7, #0
 8006e80:	bf08      	it	eq
 8006e82:	462f      	moveq	r7, r5
 8006e84:	2d10      	cmp	r5, #16
 8006e86:	9306      	str	r3, [sp, #24]
 8006e88:	46a8      	mov	r8, r5
 8006e8a:	bfa8      	it	ge
 8006e8c:	f04f 0810 	movge.w	r8, #16
 8006e90:	f7f9 fb38 	bl	8000504 <__aeabi_ui2d>
 8006e94:	2d09      	cmp	r5, #9
 8006e96:	4682      	mov	sl, r0
 8006e98:	468b      	mov	fp, r1
 8006e9a:	dd13      	ble.n	8006ec4 <_strtod_l+0x3dc>
 8006e9c:	4b7b      	ldr	r3, [pc, #492]	; (800708c <_strtod_l+0x5a4>)
 8006e9e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8006ea2:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8006ea6:	f7f9 fba7 	bl	80005f8 <__aeabi_dmul>
 8006eaa:	4682      	mov	sl, r0
 8006eac:	4648      	mov	r0, r9
 8006eae:	468b      	mov	fp, r1
 8006eb0:	f7f9 fb28 	bl	8000504 <__aeabi_ui2d>
 8006eb4:	4602      	mov	r2, r0
 8006eb6:	460b      	mov	r3, r1
 8006eb8:	4650      	mov	r0, sl
 8006eba:	4659      	mov	r1, fp
 8006ebc:	f7f9 f9e6 	bl	800028c <__adddf3>
 8006ec0:	4682      	mov	sl, r0
 8006ec2:	468b      	mov	fp, r1
 8006ec4:	2d0f      	cmp	r5, #15
 8006ec6:	dc38      	bgt.n	8006f3a <_strtod_l+0x452>
 8006ec8:	9b06      	ldr	r3, [sp, #24]
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	f43f ae50 	beq.w	8006b70 <_strtod_l+0x88>
 8006ed0:	dd24      	ble.n	8006f1c <_strtod_l+0x434>
 8006ed2:	2b16      	cmp	r3, #22
 8006ed4:	dc0b      	bgt.n	8006eee <_strtod_l+0x406>
 8006ed6:	496d      	ldr	r1, [pc, #436]	; (800708c <_strtod_l+0x5a4>)
 8006ed8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8006edc:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006ee0:	4652      	mov	r2, sl
 8006ee2:	465b      	mov	r3, fp
 8006ee4:	f7f9 fb88 	bl	80005f8 <__aeabi_dmul>
 8006ee8:	4682      	mov	sl, r0
 8006eea:	468b      	mov	fp, r1
 8006eec:	e640      	b.n	8006b70 <_strtod_l+0x88>
 8006eee:	9a06      	ldr	r2, [sp, #24]
 8006ef0:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 8006ef4:	4293      	cmp	r3, r2
 8006ef6:	db20      	blt.n	8006f3a <_strtod_l+0x452>
 8006ef8:	4c64      	ldr	r4, [pc, #400]	; (800708c <_strtod_l+0x5a4>)
 8006efa:	f1c5 050f 	rsb	r5, r5, #15
 8006efe:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8006f02:	4652      	mov	r2, sl
 8006f04:	465b      	mov	r3, fp
 8006f06:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006f0a:	f7f9 fb75 	bl	80005f8 <__aeabi_dmul>
 8006f0e:	9b06      	ldr	r3, [sp, #24]
 8006f10:	1b5d      	subs	r5, r3, r5
 8006f12:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8006f16:	e9d4 2300 	ldrd	r2, r3, [r4]
 8006f1a:	e7e3      	b.n	8006ee4 <_strtod_l+0x3fc>
 8006f1c:	9b06      	ldr	r3, [sp, #24]
 8006f1e:	3316      	adds	r3, #22
 8006f20:	db0b      	blt.n	8006f3a <_strtod_l+0x452>
 8006f22:	9b05      	ldr	r3, [sp, #20]
 8006f24:	1b9e      	subs	r6, r3, r6
 8006f26:	4b59      	ldr	r3, [pc, #356]	; (800708c <_strtod_l+0x5a4>)
 8006f28:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 8006f2c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8006f30:	4650      	mov	r0, sl
 8006f32:	4659      	mov	r1, fp
 8006f34:	f7f9 fc8a 	bl	800084c <__aeabi_ddiv>
 8006f38:	e7d6      	b.n	8006ee8 <_strtod_l+0x400>
 8006f3a:	9b06      	ldr	r3, [sp, #24]
 8006f3c:	eba5 0808 	sub.w	r8, r5, r8
 8006f40:	4498      	add	r8, r3
 8006f42:	f1b8 0f00 	cmp.w	r8, #0
 8006f46:	dd74      	ble.n	8007032 <_strtod_l+0x54a>
 8006f48:	f018 030f 	ands.w	r3, r8, #15
 8006f4c:	d00a      	beq.n	8006f64 <_strtod_l+0x47c>
 8006f4e:	494f      	ldr	r1, [pc, #316]	; (800708c <_strtod_l+0x5a4>)
 8006f50:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8006f54:	4652      	mov	r2, sl
 8006f56:	465b      	mov	r3, fp
 8006f58:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006f5c:	f7f9 fb4c 	bl	80005f8 <__aeabi_dmul>
 8006f60:	4682      	mov	sl, r0
 8006f62:	468b      	mov	fp, r1
 8006f64:	f038 080f 	bics.w	r8, r8, #15
 8006f68:	d04f      	beq.n	800700a <_strtod_l+0x522>
 8006f6a:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8006f6e:	dd22      	ble.n	8006fb6 <_strtod_l+0x4ce>
 8006f70:	2500      	movs	r5, #0
 8006f72:	462e      	mov	r6, r5
 8006f74:	9507      	str	r5, [sp, #28]
 8006f76:	9505      	str	r5, [sp, #20]
 8006f78:	2322      	movs	r3, #34	; 0x22
 8006f7a:	f8df b118 	ldr.w	fp, [pc, #280]	; 8007094 <_strtod_l+0x5ac>
 8006f7e:	6023      	str	r3, [r4, #0]
 8006f80:	f04f 0a00 	mov.w	sl, #0
 8006f84:	9b07      	ldr	r3, [sp, #28]
 8006f86:	2b00      	cmp	r3, #0
 8006f88:	f43f adf2 	beq.w	8006b70 <_strtod_l+0x88>
 8006f8c:	9918      	ldr	r1, [sp, #96]	; 0x60
 8006f8e:	4620      	mov	r0, r4
 8006f90:	f002 f99e 	bl	80092d0 <_Bfree>
 8006f94:	9905      	ldr	r1, [sp, #20]
 8006f96:	4620      	mov	r0, r4
 8006f98:	f002 f99a 	bl	80092d0 <_Bfree>
 8006f9c:	4631      	mov	r1, r6
 8006f9e:	4620      	mov	r0, r4
 8006fa0:	f002 f996 	bl	80092d0 <_Bfree>
 8006fa4:	9907      	ldr	r1, [sp, #28]
 8006fa6:	4620      	mov	r0, r4
 8006fa8:	f002 f992 	bl	80092d0 <_Bfree>
 8006fac:	4629      	mov	r1, r5
 8006fae:	4620      	mov	r0, r4
 8006fb0:	f002 f98e 	bl	80092d0 <_Bfree>
 8006fb4:	e5dc      	b.n	8006b70 <_strtod_l+0x88>
 8006fb6:	4b36      	ldr	r3, [pc, #216]	; (8007090 <_strtod_l+0x5a8>)
 8006fb8:	9304      	str	r3, [sp, #16]
 8006fba:	2300      	movs	r3, #0
 8006fbc:	ea4f 1828 	mov.w	r8, r8, asr #4
 8006fc0:	4650      	mov	r0, sl
 8006fc2:	4659      	mov	r1, fp
 8006fc4:	4699      	mov	r9, r3
 8006fc6:	f1b8 0f01 	cmp.w	r8, #1
 8006fca:	dc21      	bgt.n	8007010 <_strtod_l+0x528>
 8006fcc:	b10b      	cbz	r3, 8006fd2 <_strtod_l+0x4ea>
 8006fce:	4682      	mov	sl, r0
 8006fd0:	468b      	mov	fp, r1
 8006fd2:	4b2f      	ldr	r3, [pc, #188]	; (8007090 <_strtod_l+0x5a8>)
 8006fd4:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8006fd8:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 8006fdc:	4652      	mov	r2, sl
 8006fde:	465b      	mov	r3, fp
 8006fe0:	e9d9 0100 	ldrd	r0, r1, [r9]
 8006fe4:	f7f9 fb08 	bl	80005f8 <__aeabi_dmul>
 8006fe8:	4b2a      	ldr	r3, [pc, #168]	; (8007094 <_strtod_l+0x5ac>)
 8006fea:	460a      	mov	r2, r1
 8006fec:	400b      	ands	r3, r1
 8006fee:	492a      	ldr	r1, [pc, #168]	; (8007098 <_strtod_l+0x5b0>)
 8006ff0:	428b      	cmp	r3, r1
 8006ff2:	4682      	mov	sl, r0
 8006ff4:	d8bc      	bhi.n	8006f70 <_strtod_l+0x488>
 8006ff6:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8006ffa:	428b      	cmp	r3, r1
 8006ffc:	bf86      	itte	hi
 8006ffe:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 800709c <_strtod_l+0x5b4>
 8007002:	f04f 3aff 	movhi.w	sl, #4294967295
 8007006:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800700a:	2300      	movs	r3, #0
 800700c:	9304      	str	r3, [sp, #16]
 800700e:	e084      	b.n	800711a <_strtod_l+0x632>
 8007010:	f018 0f01 	tst.w	r8, #1
 8007014:	d005      	beq.n	8007022 <_strtod_l+0x53a>
 8007016:	9b04      	ldr	r3, [sp, #16]
 8007018:	e9d3 2300 	ldrd	r2, r3, [r3]
 800701c:	f7f9 faec 	bl	80005f8 <__aeabi_dmul>
 8007020:	2301      	movs	r3, #1
 8007022:	9a04      	ldr	r2, [sp, #16]
 8007024:	3208      	adds	r2, #8
 8007026:	f109 0901 	add.w	r9, r9, #1
 800702a:	ea4f 0868 	mov.w	r8, r8, asr #1
 800702e:	9204      	str	r2, [sp, #16]
 8007030:	e7c9      	b.n	8006fc6 <_strtod_l+0x4de>
 8007032:	d0ea      	beq.n	800700a <_strtod_l+0x522>
 8007034:	f1c8 0800 	rsb	r8, r8, #0
 8007038:	f018 020f 	ands.w	r2, r8, #15
 800703c:	d00a      	beq.n	8007054 <_strtod_l+0x56c>
 800703e:	4b13      	ldr	r3, [pc, #76]	; (800708c <_strtod_l+0x5a4>)
 8007040:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007044:	4650      	mov	r0, sl
 8007046:	4659      	mov	r1, fp
 8007048:	e9d3 2300 	ldrd	r2, r3, [r3]
 800704c:	f7f9 fbfe 	bl	800084c <__aeabi_ddiv>
 8007050:	4682      	mov	sl, r0
 8007052:	468b      	mov	fp, r1
 8007054:	ea5f 1828 	movs.w	r8, r8, asr #4
 8007058:	d0d7      	beq.n	800700a <_strtod_l+0x522>
 800705a:	f1b8 0f1f 	cmp.w	r8, #31
 800705e:	dd1f      	ble.n	80070a0 <_strtod_l+0x5b8>
 8007060:	2500      	movs	r5, #0
 8007062:	462e      	mov	r6, r5
 8007064:	9507      	str	r5, [sp, #28]
 8007066:	9505      	str	r5, [sp, #20]
 8007068:	2322      	movs	r3, #34	; 0x22
 800706a:	f04f 0a00 	mov.w	sl, #0
 800706e:	f04f 0b00 	mov.w	fp, #0
 8007072:	6023      	str	r3, [r4, #0]
 8007074:	e786      	b.n	8006f84 <_strtod_l+0x49c>
 8007076:	bf00      	nop
 8007078:	0800bef9 	.word	0x0800bef9
 800707c:	0800bf38 	.word	0x0800bf38
 8007080:	0800bef1 	.word	0x0800bef1
 8007084:	0800c07c 	.word	0x0800c07c
 8007088:	0800c3ab 	.word	0x0800c3ab
 800708c:	0800c270 	.word	0x0800c270
 8007090:	0800c248 	.word	0x0800c248
 8007094:	7ff00000 	.word	0x7ff00000
 8007098:	7ca00000 	.word	0x7ca00000
 800709c:	7fefffff 	.word	0x7fefffff
 80070a0:	f018 0310 	ands.w	r3, r8, #16
 80070a4:	bf18      	it	ne
 80070a6:	236a      	movne	r3, #106	; 0x6a
 80070a8:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 8007458 <_strtod_l+0x970>
 80070ac:	9304      	str	r3, [sp, #16]
 80070ae:	4650      	mov	r0, sl
 80070b0:	4659      	mov	r1, fp
 80070b2:	2300      	movs	r3, #0
 80070b4:	f018 0f01 	tst.w	r8, #1
 80070b8:	d004      	beq.n	80070c4 <_strtod_l+0x5dc>
 80070ba:	e9d9 2300 	ldrd	r2, r3, [r9]
 80070be:	f7f9 fa9b 	bl	80005f8 <__aeabi_dmul>
 80070c2:	2301      	movs	r3, #1
 80070c4:	ea5f 0868 	movs.w	r8, r8, asr #1
 80070c8:	f109 0908 	add.w	r9, r9, #8
 80070cc:	d1f2      	bne.n	80070b4 <_strtod_l+0x5cc>
 80070ce:	b10b      	cbz	r3, 80070d4 <_strtod_l+0x5ec>
 80070d0:	4682      	mov	sl, r0
 80070d2:	468b      	mov	fp, r1
 80070d4:	9b04      	ldr	r3, [sp, #16]
 80070d6:	b1c3      	cbz	r3, 800710a <_strtod_l+0x622>
 80070d8:	f3cb 520a 	ubfx	r2, fp, #20, #11
 80070dc:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 80070e0:	2b00      	cmp	r3, #0
 80070e2:	4659      	mov	r1, fp
 80070e4:	dd11      	ble.n	800710a <_strtod_l+0x622>
 80070e6:	2b1f      	cmp	r3, #31
 80070e8:	f340 8124 	ble.w	8007334 <_strtod_l+0x84c>
 80070ec:	2b34      	cmp	r3, #52	; 0x34
 80070ee:	bfde      	ittt	le
 80070f0:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 80070f4:	f04f 33ff 	movle.w	r3, #4294967295
 80070f8:	fa03 f202 	lslle.w	r2, r3, r2
 80070fc:	f04f 0a00 	mov.w	sl, #0
 8007100:	bfcc      	ite	gt
 8007102:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8007106:	ea02 0b01 	andle.w	fp, r2, r1
 800710a:	2200      	movs	r2, #0
 800710c:	2300      	movs	r3, #0
 800710e:	4650      	mov	r0, sl
 8007110:	4659      	mov	r1, fp
 8007112:	f7f9 fcd9 	bl	8000ac8 <__aeabi_dcmpeq>
 8007116:	2800      	cmp	r0, #0
 8007118:	d1a2      	bne.n	8007060 <_strtod_l+0x578>
 800711a:	9b07      	ldr	r3, [sp, #28]
 800711c:	9300      	str	r3, [sp, #0]
 800711e:	9908      	ldr	r1, [sp, #32]
 8007120:	462b      	mov	r3, r5
 8007122:	463a      	mov	r2, r7
 8007124:	4620      	mov	r0, r4
 8007126:	f002 f93b 	bl	80093a0 <__s2b>
 800712a:	9007      	str	r0, [sp, #28]
 800712c:	2800      	cmp	r0, #0
 800712e:	f43f af1f 	beq.w	8006f70 <_strtod_l+0x488>
 8007132:	9b05      	ldr	r3, [sp, #20]
 8007134:	1b9e      	subs	r6, r3, r6
 8007136:	9b06      	ldr	r3, [sp, #24]
 8007138:	2b00      	cmp	r3, #0
 800713a:	bfb4      	ite	lt
 800713c:	4633      	movlt	r3, r6
 800713e:	2300      	movge	r3, #0
 8007140:	930c      	str	r3, [sp, #48]	; 0x30
 8007142:	9b06      	ldr	r3, [sp, #24]
 8007144:	2500      	movs	r5, #0
 8007146:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800714a:	9312      	str	r3, [sp, #72]	; 0x48
 800714c:	462e      	mov	r6, r5
 800714e:	9b07      	ldr	r3, [sp, #28]
 8007150:	4620      	mov	r0, r4
 8007152:	6859      	ldr	r1, [r3, #4]
 8007154:	f002 f87c 	bl	8009250 <_Balloc>
 8007158:	9005      	str	r0, [sp, #20]
 800715a:	2800      	cmp	r0, #0
 800715c:	f43f af0c 	beq.w	8006f78 <_strtod_l+0x490>
 8007160:	9b07      	ldr	r3, [sp, #28]
 8007162:	691a      	ldr	r2, [r3, #16]
 8007164:	3202      	adds	r2, #2
 8007166:	f103 010c 	add.w	r1, r3, #12
 800716a:	0092      	lsls	r2, r2, #2
 800716c:	300c      	adds	r0, #12
 800716e:	f002 f861 	bl	8009234 <memcpy>
 8007172:	ec4b ab10 	vmov	d0, sl, fp
 8007176:	aa1a      	add	r2, sp, #104	; 0x68
 8007178:	a919      	add	r1, sp, #100	; 0x64
 800717a:	4620      	mov	r0, r4
 800717c:	f002 fc56 	bl	8009a2c <__d2b>
 8007180:	ec4b ab18 	vmov	d8, sl, fp
 8007184:	9018      	str	r0, [sp, #96]	; 0x60
 8007186:	2800      	cmp	r0, #0
 8007188:	f43f aef6 	beq.w	8006f78 <_strtod_l+0x490>
 800718c:	2101      	movs	r1, #1
 800718e:	4620      	mov	r0, r4
 8007190:	f002 f9a0 	bl	80094d4 <__i2b>
 8007194:	4606      	mov	r6, r0
 8007196:	2800      	cmp	r0, #0
 8007198:	f43f aeee 	beq.w	8006f78 <_strtod_l+0x490>
 800719c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800719e:	9904      	ldr	r1, [sp, #16]
 80071a0:	2b00      	cmp	r3, #0
 80071a2:	bfab      	itete	ge
 80071a4:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 80071a6:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 80071a8:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 80071aa:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 80071ae:	bfac      	ite	ge
 80071b0:	eb03 0902 	addge.w	r9, r3, r2
 80071b4:	1ad7      	sublt	r7, r2, r3
 80071b6:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 80071b8:	eba3 0801 	sub.w	r8, r3, r1
 80071bc:	4490      	add	r8, r2
 80071be:	4ba1      	ldr	r3, [pc, #644]	; (8007444 <_strtod_l+0x95c>)
 80071c0:	f108 38ff 	add.w	r8, r8, #4294967295
 80071c4:	4598      	cmp	r8, r3
 80071c6:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 80071ca:	f280 80c7 	bge.w	800735c <_strtod_l+0x874>
 80071ce:	eba3 0308 	sub.w	r3, r3, r8
 80071d2:	2b1f      	cmp	r3, #31
 80071d4:	eba2 0203 	sub.w	r2, r2, r3
 80071d8:	f04f 0101 	mov.w	r1, #1
 80071dc:	f300 80b1 	bgt.w	8007342 <_strtod_l+0x85a>
 80071e0:	fa01 f303 	lsl.w	r3, r1, r3
 80071e4:	930d      	str	r3, [sp, #52]	; 0x34
 80071e6:	2300      	movs	r3, #0
 80071e8:	9308      	str	r3, [sp, #32]
 80071ea:	eb09 0802 	add.w	r8, r9, r2
 80071ee:	9b04      	ldr	r3, [sp, #16]
 80071f0:	45c1      	cmp	r9, r8
 80071f2:	4417      	add	r7, r2
 80071f4:	441f      	add	r7, r3
 80071f6:	464b      	mov	r3, r9
 80071f8:	bfa8      	it	ge
 80071fa:	4643      	movge	r3, r8
 80071fc:	42bb      	cmp	r3, r7
 80071fe:	bfa8      	it	ge
 8007200:	463b      	movge	r3, r7
 8007202:	2b00      	cmp	r3, #0
 8007204:	bfc2      	ittt	gt
 8007206:	eba8 0803 	subgt.w	r8, r8, r3
 800720a:	1aff      	subgt	r7, r7, r3
 800720c:	eba9 0903 	subgt.w	r9, r9, r3
 8007210:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007212:	2b00      	cmp	r3, #0
 8007214:	dd17      	ble.n	8007246 <_strtod_l+0x75e>
 8007216:	4631      	mov	r1, r6
 8007218:	461a      	mov	r2, r3
 800721a:	4620      	mov	r0, r4
 800721c:	f002 fa1a 	bl	8009654 <__pow5mult>
 8007220:	4606      	mov	r6, r0
 8007222:	2800      	cmp	r0, #0
 8007224:	f43f aea8 	beq.w	8006f78 <_strtod_l+0x490>
 8007228:	4601      	mov	r1, r0
 800722a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800722c:	4620      	mov	r0, r4
 800722e:	f002 f967 	bl	8009500 <__multiply>
 8007232:	900b      	str	r0, [sp, #44]	; 0x2c
 8007234:	2800      	cmp	r0, #0
 8007236:	f43f ae9f 	beq.w	8006f78 <_strtod_l+0x490>
 800723a:	9918      	ldr	r1, [sp, #96]	; 0x60
 800723c:	4620      	mov	r0, r4
 800723e:	f002 f847 	bl	80092d0 <_Bfree>
 8007242:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007244:	9318      	str	r3, [sp, #96]	; 0x60
 8007246:	f1b8 0f00 	cmp.w	r8, #0
 800724a:	f300 808c 	bgt.w	8007366 <_strtod_l+0x87e>
 800724e:	9b06      	ldr	r3, [sp, #24]
 8007250:	2b00      	cmp	r3, #0
 8007252:	dd08      	ble.n	8007266 <_strtod_l+0x77e>
 8007254:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8007256:	9905      	ldr	r1, [sp, #20]
 8007258:	4620      	mov	r0, r4
 800725a:	f002 f9fb 	bl	8009654 <__pow5mult>
 800725e:	9005      	str	r0, [sp, #20]
 8007260:	2800      	cmp	r0, #0
 8007262:	f43f ae89 	beq.w	8006f78 <_strtod_l+0x490>
 8007266:	2f00      	cmp	r7, #0
 8007268:	dd08      	ble.n	800727c <_strtod_l+0x794>
 800726a:	9905      	ldr	r1, [sp, #20]
 800726c:	463a      	mov	r2, r7
 800726e:	4620      	mov	r0, r4
 8007270:	f002 fa4a 	bl	8009708 <__lshift>
 8007274:	9005      	str	r0, [sp, #20]
 8007276:	2800      	cmp	r0, #0
 8007278:	f43f ae7e 	beq.w	8006f78 <_strtod_l+0x490>
 800727c:	f1b9 0f00 	cmp.w	r9, #0
 8007280:	dd08      	ble.n	8007294 <_strtod_l+0x7ac>
 8007282:	4631      	mov	r1, r6
 8007284:	464a      	mov	r2, r9
 8007286:	4620      	mov	r0, r4
 8007288:	f002 fa3e 	bl	8009708 <__lshift>
 800728c:	4606      	mov	r6, r0
 800728e:	2800      	cmp	r0, #0
 8007290:	f43f ae72 	beq.w	8006f78 <_strtod_l+0x490>
 8007294:	9a05      	ldr	r2, [sp, #20]
 8007296:	9918      	ldr	r1, [sp, #96]	; 0x60
 8007298:	4620      	mov	r0, r4
 800729a:	f002 fac1 	bl	8009820 <__mdiff>
 800729e:	4605      	mov	r5, r0
 80072a0:	2800      	cmp	r0, #0
 80072a2:	f43f ae69 	beq.w	8006f78 <_strtod_l+0x490>
 80072a6:	68c3      	ldr	r3, [r0, #12]
 80072a8:	930b      	str	r3, [sp, #44]	; 0x2c
 80072aa:	2300      	movs	r3, #0
 80072ac:	60c3      	str	r3, [r0, #12]
 80072ae:	4631      	mov	r1, r6
 80072b0:	f002 fa9a 	bl	80097e8 <__mcmp>
 80072b4:	2800      	cmp	r0, #0
 80072b6:	da60      	bge.n	800737a <_strtod_l+0x892>
 80072b8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80072ba:	ea53 030a 	orrs.w	r3, r3, sl
 80072be:	f040 8082 	bne.w	80073c6 <_strtod_l+0x8de>
 80072c2:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	d17d      	bne.n	80073c6 <_strtod_l+0x8de>
 80072ca:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80072ce:	0d1b      	lsrs	r3, r3, #20
 80072d0:	051b      	lsls	r3, r3, #20
 80072d2:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 80072d6:	d976      	bls.n	80073c6 <_strtod_l+0x8de>
 80072d8:	696b      	ldr	r3, [r5, #20]
 80072da:	b913      	cbnz	r3, 80072e2 <_strtod_l+0x7fa>
 80072dc:	692b      	ldr	r3, [r5, #16]
 80072de:	2b01      	cmp	r3, #1
 80072e0:	dd71      	ble.n	80073c6 <_strtod_l+0x8de>
 80072e2:	4629      	mov	r1, r5
 80072e4:	2201      	movs	r2, #1
 80072e6:	4620      	mov	r0, r4
 80072e8:	f002 fa0e 	bl	8009708 <__lshift>
 80072ec:	4631      	mov	r1, r6
 80072ee:	4605      	mov	r5, r0
 80072f0:	f002 fa7a 	bl	80097e8 <__mcmp>
 80072f4:	2800      	cmp	r0, #0
 80072f6:	dd66      	ble.n	80073c6 <_strtod_l+0x8de>
 80072f8:	9904      	ldr	r1, [sp, #16]
 80072fa:	4a53      	ldr	r2, [pc, #332]	; (8007448 <_strtod_l+0x960>)
 80072fc:	465b      	mov	r3, fp
 80072fe:	2900      	cmp	r1, #0
 8007300:	f000 8081 	beq.w	8007406 <_strtod_l+0x91e>
 8007304:	ea02 010b 	and.w	r1, r2, fp
 8007308:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800730c:	dc7b      	bgt.n	8007406 <_strtod_l+0x91e>
 800730e:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8007312:	f77f aea9 	ble.w	8007068 <_strtod_l+0x580>
 8007316:	4b4d      	ldr	r3, [pc, #308]	; (800744c <_strtod_l+0x964>)
 8007318:	4650      	mov	r0, sl
 800731a:	4659      	mov	r1, fp
 800731c:	2200      	movs	r2, #0
 800731e:	f7f9 f96b 	bl	80005f8 <__aeabi_dmul>
 8007322:	460b      	mov	r3, r1
 8007324:	4303      	orrs	r3, r0
 8007326:	bf08      	it	eq
 8007328:	2322      	moveq	r3, #34	; 0x22
 800732a:	4682      	mov	sl, r0
 800732c:	468b      	mov	fp, r1
 800732e:	bf08      	it	eq
 8007330:	6023      	streq	r3, [r4, #0]
 8007332:	e62b      	b.n	8006f8c <_strtod_l+0x4a4>
 8007334:	f04f 32ff 	mov.w	r2, #4294967295
 8007338:	fa02 f303 	lsl.w	r3, r2, r3
 800733c:	ea03 0a0a 	and.w	sl, r3, sl
 8007340:	e6e3      	b.n	800710a <_strtod_l+0x622>
 8007342:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 8007346:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 800734a:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 800734e:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 8007352:	fa01 f308 	lsl.w	r3, r1, r8
 8007356:	9308      	str	r3, [sp, #32]
 8007358:	910d      	str	r1, [sp, #52]	; 0x34
 800735a:	e746      	b.n	80071ea <_strtod_l+0x702>
 800735c:	2300      	movs	r3, #0
 800735e:	9308      	str	r3, [sp, #32]
 8007360:	2301      	movs	r3, #1
 8007362:	930d      	str	r3, [sp, #52]	; 0x34
 8007364:	e741      	b.n	80071ea <_strtod_l+0x702>
 8007366:	9918      	ldr	r1, [sp, #96]	; 0x60
 8007368:	4642      	mov	r2, r8
 800736a:	4620      	mov	r0, r4
 800736c:	f002 f9cc 	bl	8009708 <__lshift>
 8007370:	9018      	str	r0, [sp, #96]	; 0x60
 8007372:	2800      	cmp	r0, #0
 8007374:	f47f af6b 	bne.w	800724e <_strtod_l+0x766>
 8007378:	e5fe      	b.n	8006f78 <_strtod_l+0x490>
 800737a:	465f      	mov	r7, fp
 800737c:	d16e      	bne.n	800745c <_strtod_l+0x974>
 800737e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007380:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007384:	b342      	cbz	r2, 80073d8 <_strtod_l+0x8f0>
 8007386:	4a32      	ldr	r2, [pc, #200]	; (8007450 <_strtod_l+0x968>)
 8007388:	4293      	cmp	r3, r2
 800738a:	d128      	bne.n	80073de <_strtod_l+0x8f6>
 800738c:	9b04      	ldr	r3, [sp, #16]
 800738e:	4651      	mov	r1, sl
 8007390:	b1eb      	cbz	r3, 80073ce <_strtod_l+0x8e6>
 8007392:	4b2d      	ldr	r3, [pc, #180]	; (8007448 <_strtod_l+0x960>)
 8007394:	403b      	ands	r3, r7
 8007396:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800739a:	f04f 32ff 	mov.w	r2, #4294967295
 800739e:	d819      	bhi.n	80073d4 <_strtod_l+0x8ec>
 80073a0:	0d1b      	lsrs	r3, r3, #20
 80073a2:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80073a6:	fa02 f303 	lsl.w	r3, r2, r3
 80073aa:	4299      	cmp	r1, r3
 80073ac:	d117      	bne.n	80073de <_strtod_l+0x8f6>
 80073ae:	4b29      	ldr	r3, [pc, #164]	; (8007454 <_strtod_l+0x96c>)
 80073b0:	429f      	cmp	r7, r3
 80073b2:	d102      	bne.n	80073ba <_strtod_l+0x8d2>
 80073b4:	3101      	adds	r1, #1
 80073b6:	f43f addf 	beq.w	8006f78 <_strtod_l+0x490>
 80073ba:	4b23      	ldr	r3, [pc, #140]	; (8007448 <_strtod_l+0x960>)
 80073bc:	403b      	ands	r3, r7
 80073be:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 80073c2:	f04f 0a00 	mov.w	sl, #0
 80073c6:	9b04      	ldr	r3, [sp, #16]
 80073c8:	2b00      	cmp	r3, #0
 80073ca:	d1a4      	bne.n	8007316 <_strtod_l+0x82e>
 80073cc:	e5de      	b.n	8006f8c <_strtod_l+0x4a4>
 80073ce:	f04f 33ff 	mov.w	r3, #4294967295
 80073d2:	e7ea      	b.n	80073aa <_strtod_l+0x8c2>
 80073d4:	4613      	mov	r3, r2
 80073d6:	e7e8      	b.n	80073aa <_strtod_l+0x8c2>
 80073d8:	ea53 030a 	orrs.w	r3, r3, sl
 80073dc:	d08c      	beq.n	80072f8 <_strtod_l+0x810>
 80073de:	9b08      	ldr	r3, [sp, #32]
 80073e0:	b1db      	cbz	r3, 800741a <_strtod_l+0x932>
 80073e2:	423b      	tst	r3, r7
 80073e4:	d0ef      	beq.n	80073c6 <_strtod_l+0x8de>
 80073e6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80073e8:	9a04      	ldr	r2, [sp, #16]
 80073ea:	4650      	mov	r0, sl
 80073ec:	4659      	mov	r1, fp
 80073ee:	b1c3      	cbz	r3, 8007422 <_strtod_l+0x93a>
 80073f0:	f7ff fb5c 	bl	8006aac <sulp>
 80073f4:	4602      	mov	r2, r0
 80073f6:	460b      	mov	r3, r1
 80073f8:	ec51 0b18 	vmov	r0, r1, d8
 80073fc:	f7f8 ff46 	bl	800028c <__adddf3>
 8007400:	4682      	mov	sl, r0
 8007402:	468b      	mov	fp, r1
 8007404:	e7df      	b.n	80073c6 <_strtod_l+0x8de>
 8007406:	4013      	ands	r3, r2
 8007408:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800740c:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8007410:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8007414:	f04f 3aff 	mov.w	sl, #4294967295
 8007418:	e7d5      	b.n	80073c6 <_strtod_l+0x8de>
 800741a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800741c:	ea13 0f0a 	tst.w	r3, sl
 8007420:	e7e0      	b.n	80073e4 <_strtod_l+0x8fc>
 8007422:	f7ff fb43 	bl	8006aac <sulp>
 8007426:	4602      	mov	r2, r0
 8007428:	460b      	mov	r3, r1
 800742a:	ec51 0b18 	vmov	r0, r1, d8
 800742e:	f7f8 ff2b 	bl	8000288 <__aeabi_dsub>
 8007432:	2200      	movs	r2, #0
 8007434:	2300      	movs	r3, #0
 8007436:	4682      	mov	sl, r0
 8007438:	468b      	mov	fp, r1
 800743a:	f7f9 fb45 	bl	8000ac8 <__aeabi_dcmpeq>
 800743e:	2800      	cmp	r0, #0
 8007440:	d0c1      	beq.n	80073c6 <_strtod_l+0x8de>
 8007442:	e611      	b.n	8007068 <_strtod_l+0x580>
 8007444:	fffffc02 	.word	0xfffffc02
 8007448:	7ff00000 	.word	0x7ff00000
 800744c:	39500000 	.word	0x39500000
 8007450:	000fffff 	.word	0x000fffff
 8007454:	7fefffff 	.word	0x7fefffff
 8007458:	0800bf50 	.word	0x0800bf50
 800745c:	4631      	mov	r1, r6
 800745e:	4628      	mov	r0, r5
 8007460:	f002 fb40 	bl	8009ae4 <__ratio>
 8007464:	ec59 8b10 	vmov	r8, r9, d0
 8007468:	ee10 0a10 	vmov	r0, s0
 800746c:	2200      	movs	r2, #0
 800746e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8007472:	4649      	mov	r1, r9
 8007474:	f7f9 fb3c 	bl	8000af0 <__aeabi_dcmple>
 8007478:	2800      	cmp	r0, #0
 800747a:	d07a      	beq.n	8007572 <_strtod_l+0xa8a>
 800747c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800747e:	2b00      	cmp	r3, #0
 8007480:	d04a      	beq.n	8007518 <_strtod_l+0xa30>
 8007482:	4b95      	ldr	r3, [pc, #596]	; (80076d8 <_strtod_l+0xbf0>)
 8007484:	2200      	movs	r2, #0
 8007486:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800748a:	f8df 924c 	ldr.w	r9, [pc, #588]	; 80076d8 <_strtod_l+0xbf0>
 800748e:	f04f 0800 	mov.w	r8, #0
 8007492:	4b92      	ldr	r3, [pc, #584]	; (80076dc <_strtod_l+0xbf4>)
 8007494:	403b      	ands	r3, r7
 8007496:	930d      	str	r3, [sp, #52]	; 0x34
 8007498:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800749a:	4b91      	ldr	r3, [pc, #580]	; (80076e0 <_strtod_l+0xbf8>)
 800749c:	429a      	cmp	r2, r3
 800749e:	f040 80b0 	bne.w	8007602 <_strtod_l+0xb1a>
 80074a2:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80074a6:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 80074aa:	ec4b ab10 	vmov	d0, sl, fp
 80074ae:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80074b2:	f002 fa3f 	bl	8009934 <__ulp>
 80074b6:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80074ba:	ec53 2b10 	vmov	r2, r3, d0
 80074be:	f7f9 f89b 	bl	80005f8 <__aeabi_dmul>
 80074c2:	4652      	mov	r2, sl
 80074c4:	465b      	mov	r3, fp
 80074c6:	f7f8 fee1 	bl	800028c <__adddf3>
 80074ca:	460b      	mov	r3, r1
 80074cc:	4983      	ldr	r1, [pc, #524]	; (80076dc <_strtod_l+0xbf4>)
 80074ce:	4a85      	ldr	r2, [pc, #532]	; (80076e4 <_strtod_l+0xbfc>)
 80074d0:	4019      	ands	r1, r3
 80074d2:	4291      	cmp	r1, r2
 80074d4:	4682      	mov	sl, r0
 80074d6:	d960      	bls.n	800759a <_strtod_l+0xab2>
 80074d8:	ee18 3a90 	vmov	r3, s17
 80074dc:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 80074e0:	4293      	cmp	r3, r2
 80074e2:	d104      	bne.n	80074ee <_strtod_l+0xa06>
 80074e4:	ee18 3a10 	vmov	r3, s16
 80074e8:	3301      	adds	r3, #1
 80074ea:	f43f ad45 	beq.w	8006f78 <_strtod_l+0x490>
 80074ee:	f8df b200 	ldr.w	fp, [pc, #512]	; 80076f0 <_strtod_l+0xc08>
 80074f2:	f04f 3aff 	mov.w	sl, #4294967295
 80074f6:	9918      	ldr	r1, [sp, #96]	; 0x60
 80074f8:	4620      	mov	r0, r4
 80074fa:	f001 fee9 	bl	80092d0 <_Bfree>
 80074fe:	9905      	ldr	r1, [sp, #20]
 8007500:	4620      	mov	r0, r4
 8007502:	f001 fee5 	bl	80092d0 <_Bfree>
 8007506:	4631      	mov	r1, r6
 8007508:	4620      	mov	r0, r4
 800750a:	f001 fee1 	bl	80092d0 <_Bfree>
 800750e:	4629      	mov	r1, r5
 8007510:	4620      	mov	r0, r4
 8007512:	f001 fedd 	bl	80092d0 <_Bfree>
 8007516:	e61a      	b.n	800714e <_strtod_l+0x666>
 8007518:	f1ba 0f00 	cmp.w	sl, #0
 800751c:	d11b      	bne.n	8007556 <_strtod_l+0xa6e>
 800751e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007522:	b9f3      	cbnz	r3, 8007562 <_strtod_l+0xa7a>
 8007524:	4b6c      	ldr	r3, [pc, #432]	; (80076d8 <_strtod_l+0xbf0>)
 8007526:	2200      	movs	r2, #0
 8007528:	4640      	mov	r0, r8
 800752a:	4649      	mov	r1, r9
 800752c:	f7f9 fad6 	bl	8000adc <__aeabi_dcmplt>
 8007530:	b9d0      	cbnz	r0, 8007568 <_strtod_l+0xa80>
 8007532:	4640      	mov	r0, r8
 8007534:	4649      	mov	r1, r9
 8007536:	4b6c      	ldr	r3, [pc, #432]	; (80076e8 <_strtod_l+0xc00>)
 8007538:	2200      	movs	r2, #0
 800753a:	f7f9 f85d 	bl	80005f8 <__aeabi_dmul>
 800753e:	4680      	mov	r8, r0
 8007540:	4689      	mov	r9, r1
 8007542:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8007546:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 800754a:	9315      	str	r3, [sp, #84]	; 0x54
 800754c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8007550:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8007554:	e79d      	b.n	8007492 <_strtod_l+0x9aa>
 8007556:	f1ba 0f01 	cmp.w	sl, #1
 800755a:	d102      	bne.n	8007562 <_strtod_l+0xa7a>
 800755c:	2f00      	cmp	r7, #0
 800755e:	f43f ad83 	beq.w	8007068 <_strtod_l+0x580>
 8007562:	4b62      	ldr	r3, [pc, #392]	; (80076ec <_strtod_l+0xc04>)
 8007564:	2200      	movs	r2, #0
 8007566:	e78e      	b.n	8007486 <_strtod_l+0x99e>
 8007568:	f8df 917c 	ldr.w	r9, [pc, #380]	; 80076e8 <_strtod_l+0xc00>
 800756c:	f04f 0800 	mov.w	r8, #0
 8007570:	e7e7      	b.n	8007542 <_strtod_l+0xa5a>
 8007572:	4b5d      	ldr	r3, [pc, #372]	; (80076e8 <_strtod_l+0xc00>)
 8007574:	4640      	mov	r0, r8
 8007576:	4649      	mov	r1, r9
 8007578:	2200      	movs	r2, #0
 800757a:	f7f9 f83d 	bl	80005f8 <__aeabi_dmul>
 800757e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007580:	4680      	mov	r8, r0
 8007582:	4689      	mov	r9, r1
 8007584:	b933      	cbnz	r3, 8007594 <_strtod_l+0xaac>
 8007586:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800758a:	900e      	str	r0, [sp, #56]	; 0x38
 800758c:	930f      	str	r3, [sp, #60]	; 0x3c
 800758e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8007592:	e7dd      	b.n	8007550 <_strtod_l+0xa68>
 8007594:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 8007598:	e7f9      	b.n	800758e <_strtod_l+0xaa6>
 800759a:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800759e:	9b04      	ldr	r3, [sp, #16]
 80075a0:	2b00      	cmp	r3, #0
 80075a2:	d1a8      	bne.n	80074f6 <_strtod_l+0xa0e>
 80075a4:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80075a8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80075aa:	0d1b      	lsrs	r3, r3, #20
 80075ac:	051b      	lsls	r3, r3, #20
 80075ae:	429a      	cmp	r2, r3
 80075b0:	d1a1      	bne.n	80074f6 <_strtod_l+0xa0e>
 80075b2:	4640      	mov	r0, r8
 80075b4:	4649      	mov	r1, r9
 80075b6:	f7f9 fb7f 	bl	8000cb8 <__aeabi_d2lz>
 80075ba:	f7f8 ffef 	bl	800059c <__aeabi_l2d>
 80075be:	4602      	mov	r2, r0
 80075c0:	460b      	mov	r3, r1
 80075c2:	4640      	mov	r0, r8
 80075c4:	4649      	mov	r1, r9
 80075c6:	f7f8 fe5f 	bl	8000288 <__aeabi_dsub>
 80075ca:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80075cc:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80075d0:	ea43 030a 	orr.w	r3, r3, sl
 80075d4:	4313      	orrs	r3, r2
 80075d6:	4680      	mov	r8, r0
 80075d8:	4689      	mov	r9, r1
 80075da:	d055      	beq.n	8007688 <_strtod_l+0xba0>
 80075dc:	a336      	add	r3, pc, #216	; (adr r3, 80076b8 <_strtod_l+0xbd0>)
 80075de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075e2:	f7f9 fa7b 	bl	8000adc <__aeabi_dcmplt>
 80075e6:	2800      	cmp	r0, #0
 80075e8:	f47f acd0 	bne.w	8006f8c <_strtod_l+0x4a4>
 80075ec:	a334      	add	r3, pc, #208	; (adr r3, 80076c0 <_strtod_l+0xbd8>)
 80075ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075f2:	4640      	mov	r0, r8
 80075f4:	4649      	mov	r1, r9
 80075f6:	f7f9 fa8f 	bl	8000b18 <__aeabi_dcmpgt>
 80075fa:	2800      	cmp	r0, #0
 80075fc:	f43f af7b 	beq.w	80074f6 <_strtod_l+0xa0e>
 8007600:	e4c4      	b.n	8006f8c <_strtod_l+0x4a4>
 8007602:	9b04      	ldr	r3, [sp, #16]
 8007604:	b333      	cbz	r3, 8007654 <_strtod_l+0xb6c>
 8007606:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007608:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800760c:	d822      	bhi.n	8007654 <_strtod_l+0xb6c>
 800760e:	a32e      	add	r3, pc, #184	; (adr r3, 80076c8 <_strtod_l+0xbe0>)
 8007610:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007614:	4640      	mov	r0, r8
 8007616:	4649      	mov	r1, r9
 8007618:	f7f9 fa6a 	bl	8000af0 <__aeabi_dcmple>
 800761c:	b1a0      	cbz	r0, 8007648 <_strtod_l+0xb60>
 800761e:	4649      	mov	r1, r9
 8007620:	4640      	mov	r0, r8
 8007622:	f7f9 fac1 	bl	8000ba8 <__aeabi_d2uiz>
 8007626:	2801      	cmp	r0, #1
 8007628:	bf38      	it	cc
 800762a:	2001      	movcc	r0, #1
 800762c:	f7f8 ff6a 	bl	8000504 <__aeabi_ui2d>
 8007630:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007632:	4680      	mov	r8, r0
 8007634:	4689      	mov	r9, r1
 8007636:	bb23      	cbnz	r3, 8007682 <_strtod_l+0xb9a>
 8007638:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800763c:	9010      	str	r0, [sp, #64]	; 0x40
 800763e:	9311      	str	r3, [sp, #68]	; 0x44
 8007640:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8007644:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8007648:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800764a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800764c:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8007650:	1a9b      	subs	r3, r3, r2
 8007652:	9309      	str	r3, [sp, #36]	; 0x24
 8007654:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8007658:	eeb0 0a48 	vmov.f32	s0, s16
 800765c:	eef0 0a68 	vmov.f32	s1, s17
 8007660:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8007664:	f002 f966 	bl	8009934 <__ulp>
 8007668:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800766c:	ec53 2b10 	vmov	r2, r3, d0
 8007670:	f7f8 ffc2 	bl	80005f8 <__aeabi_dmul>
 8007674:	ec53 2b18 	vmov	r2, r3, d8
 8007678:	f7f8 fe08 	bl	800028c <__adddf3>
 800767c:	4682      	mov	sl, r0
 800767e:	468b      	mov	fp, r1
 8007680:	e78d      	b.n	800759e <_strtod_l+0xab6>
 8007682:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 8007686:	e7db      	b.n	8007640 <_strtod_l+0xb58>
 8007688:	a311      	add	r3, pc, #68	; (adr r3, 80076d0 <_strtod_l+0xbe8>)
 800768a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800768e:	f7f9 fa25 	bl	8000adc <__aeabi_dcmplt>
 8007692:	e7b2      	b.n	80075fa <_strtod_l+0xb12>
 8007694:	2300      	movs	r3, #0
 8007696:	930a      	str	r3, [sp, #40]	; 0x28
 8007698:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800769a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800769c:	6013      	str	r3, [r2, #0]
 800769e:	f7ff ba6b 	b.w	8006b78 <_strtod_l+0x90>
 80076a2:	2a65      	cmp	r2, #101	; 0x65
 80076a4:	f43f ab5f 	beq.w	8006d66 <_strtod_l+0x27e>
 80076a8:	2a45      	cmp	r2, #69	; 0x45
 80076aa:	f43f ab5c 	beq.w	8006d66 <_strtod_l+0x27e>
 80076ae:	2301      	movs	r3, #1
 80076b0:	f7ff bb94 	b.w	8006ddc <_strtod_l+0x2f4>
 80076b4:	f3af 8000 	nop.w
 80076b8:	94a03595 	.word	0x94a03595
 80076bc:	3fdfffff 	.word	0x3fdfffff
 80076c0:	35afe535 	.word	0x35afe535
 80076c4:	3fe00000 	.word	0x3fe00000
 80076c8:	ffc00000 	.word	0xffc00000
 80076cc:	41dfffff 	.word	0x41dfffff
 80076d0:	94a03595 	.word	0x94a03595
 80076d4:	3fcfffff 	.word	0x3fcfffff
 80076d8:	3ff00000 	.word	0x3ff00000
 80076dc:	7ff00000 	.word	0x7ff00000
 80076e0:	7fe00000 	.word	0x7fe00000
 80076e4:	7c9fffff 	.word	0x7c9fffff
 80076e8:	3fe00000 	.word	0x3fe00000
 80076ec:	bff00000 	.word	0xbff00000
 80076f0:	7fefffff 	.word	0x7fefffff

080076f4 <_strtod_r>:
 80076f4:	4b01      	ldr	r3, [pc, #4]	; (80076fc <_strtod_r+0x8>)
 80076f6:	f7ff b9f7 	b.w	8006ae8 <_strtod_l>
 80076fa:	bf00      	nop
 80076fc:	20000074 	.word	0x20000074

08007700 <_strtol_l.constprop.0>:
 8007700:	2b01      	cmp	r3, #1
 8007702:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007706:	d001      	beq.n	800770c <_strtol_l.constprop.0+0xc>
 8007708:	2b24      	cmp	r3, #36	; 0x24
 800770a:	d906      	bls.n	800771a <_strtol_l.constprop.0+0x1a>
 800770c:	f7fe fa22 	bl	8005b54 <__errno>
 8007710:	2316      	movs	r3, #22
 8007712:	6003      	str	r3, [r0, #0]
 8007714:	2000      	movs	r0, #0
 8007716:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800771a:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8007800 <_strtol_l.constprop.0+0x100>
 800771e:	460d      	mov	r5, r1
 8007720:	462e      	mov	r6, r5
 8007722:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007726:	f814 700c 	ldrb.w	r7, [r4, ip]
 800772a:	f017 0708 	ands.w	r7, r7, #8
 800772e:	d1f7      	bne.n	8007720 <_strtol_l.constprop.0+0x20>
 8007730:	2c2d      	cmp	r4, #45	; 0x2d
 8007732:	d132      	bne.n	800779a <_strtol_l.constprop.0+0x9a>
 8007734:	782c      	ldrb	r4, [r5, #0]
 8007736:	2701      	movs	r7, #1
 8007738:	1cb5      	adds	r5, r6, #2
 800773a:	2b00      	cmp	r3, #0
 800773c:	d05b      	beq.n	80077f6 <_strtol_l.constprop.0+0xf6>
 800773e:	2b10      	cmp	r3, #16
 8007740:	d109      	bne.n	8007756 <_strtol_l.constprop.0+0x56>
 8007742:	2c30      	cmp	r4, #48	; 0x30
 8007744:	d107      	bne.n	8007756 <_strtol_l.constprop.0+0x56>
 8007746:	782c      	ldrb	r4, [r5, #0]
 8007748:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800774c:	2c58      	cmp	r4, #88	; 0x58
 800774e:	d14d      	bne.n	80077ec <_strtol_l.constprop.0+0xec>
 8007750:	786c      	ldrb	r4, [r5, #1]
 8007752:	2310      	movs	r3, #16
 8007754:	3502      	adds	r5, #2
 8007756:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800775a:	f108 38ff 	add.w	r8, r8, #4294967295
 800775e:	f04f 0c00 	mov.w	ip, #0
 8007762:	fbb8 f9f3 	udiv	r9, r8, r3
 8007766:	4666      	mov	r6, ip
 8007768:	fb03 8a19 	mls	sl, r3, r9, r8
 800776c:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8007770:	f1be 0f09 	cmp.w	lr, #9
 8007774:	d816      	bhi.n	80077a4 <_strtol_l.constprop.0+0xa4>
 8007776:	4674      	mov	r4, lr
 8007778:	42a3      	cmp	r3, r4
 800777a:	dd24      	ble.n	80077c6 <_strtol_l.constprop.0+0xc6>
 800777c:	f1bc 0f00 	cmp.w	ip, #0
 8007780:	db1e      	blt.n	80077c0 <_strtol_l.constprop.0+0xc0>
 8007782:	45b1      	cmp	r9, r6
 8007784:	d31c      	bcc.n	80077c0 <_strtol_l.constprop.0+0xc0>
 8007786:	d101      	bne.n	800778c <_strtol_l.constprop.0+0x8c>
 8007788:	45a2      	cmp	sl, r4
 800778a:	db19      	blt.n	80077c0 <_strtol_l.constprop.0+0xc0>
 800778c:	fb06 4603 	mla	r6, r6, r3, r4
 8007790:	f04f 0c01 	mov.w	ip, #1
 8007794:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007798:	e7e8      	b.n	800776c <_strtol_l.constprop.0+0x6c>
 800779a:	2c2b      	cmp	r4, #43	; 0x2b
 800779c:	bf04      	itt	eq
 800779e:	782c      	ldrbeq	r4, [r5, #0]
 80077a0:	1cb5      	addeq	r5, r6, #2
 80077a2:	e7ca      	b.n	800773a <_strtol_l.constprop.0+0x3a>
 80077a4:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 80077a8:	f1be 0f19 	cmp.w	lr, #25
 80077ac:	d801      	bhi.n	80077b2 <_strtol_l.constprop.0+0xb2>
 80077ae:	3c37      	subs	r4, #55	; 0x37
 80077b0:	e7e2      	b.n	8007778 <_strtol_l.constprop.0+0x78>
 80077b2:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 80077b6:	f1be 0f19 	cmp.w	lr, #25
 80077ba:	d804      	bhi.n	80077c6 <_strtol_l.constprop.0+0xc6>
 80077bc:	3c57      	subs	r4, #87	; 0x57
 80077be:	e7db      	b.n	8007778 <_strtol_l.constprop.0+0x78>
 80077c0:	f04f 3cff 	mov.w	ip, #4294967295
 80077c4:	e7e6      	b.n	8007794 <_strtol_l.constprop.0+0x94>
 80077c6:	f1bc 0f00 	cmp.w	ip, #0
 80077ca:	da05      	bge.n	80077d8 <_strtol_l.constprop.0+0xd8>
 80077cc:	2322      	movs	r3, #34	; 0x22
 80077ce:	6003      	str	r3, [r0, #0]
 80077d0:	4646      	mov	r6, r8
 80077d2:	b942      	cbnz	r2, 80077e6 <_strtol_l.constprop.0+0xe6>
 80077d4:	4630      	mov	r0, r6
 80077d6:	e79e      	b.n	8007716 <_strtol_l.constprop.0+0x16>
 80077d8:	b107      	cbz	r7, 80077dc <_strtol_l.constprop.0+0xdc>
 80077da:	4276      	negs	r6, r6
 80077dc:	2a00      	cmp	r2, #0
 80077de:	d0f9      	beq.n	80077d4 <_strtol_l.constprop.0+0xd4>
 80077e0:	f1bc 0f00 	cmp.w	ip, #0
 80077e4:	d000      	beq.n	80077e8 <_strtol_l.constprop.0+0xe8>
 80077e6:	1e69      	subs	r1, r5, #1
 80077e8:	6011      	str	r1, [r2, #0]
 80077ea:	e7f3      	b.n	80077d4 <_strtol_l.constprop.0+0xd4>
 80077ec:	2430      	movs	r4, #48	; 0x30
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	d1b1      	bne.n	8007756 <_strtol_l.constprop.0+0x56>
 80077f2:	2308      	movs	r3, #8
 80077f4:	e7af      	b.n	8007756 <_strtol_l.constprop.0+0x56>
 80077f6:	2c30      	cmp	r4, #48	; 0x30
 80077f8:	d0a5      	beq.n	8007746 <_strtol_l.constprop.0+0x46>
 80077fa:	230a      	movs	r3, #10
 80077fc:	e7ab      	b.n	8007756 <_strtol_l.constprop.0+0x56>
 80077fe:	bf00      	nop
 8007800:	0800bf79 	.word	0x0800bf79

08007804 <_strtol_r>:
 8007804:	f7ff bf7c 	b.w	8007700 <_strtol_l.constprop.0>

08007808 <__swbuf_r>:
 8007808:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800780a:	460e      	mov	r6, r1
 800780c:	4614      	mov	r4, r2
 800780e:	4605      	mov	r5, r0
 8007810:	b118      	cbz	r0, 800781a <__swbuf_r+0x12>
 8007812:	6983      	ldr	r3, [r0, #24]
 8007814:	b90b      	cbnz	r3, 800781a <__swbuf_r+0x12>
 8007816:	f001 f85d 	bl	80088d4 <__sinit>
 800781a:	4b21      	ldr	r3, [pc, #132]	; (80078a0 <__swbuf_r+0x98>)
 800781c:	429c      	cmp	r4, r3
 800781e:	d12b      	bne.n	8007878 <__swbuf_r+0x70>
 8007820:	686c      	ldr	r4, [r5, #4]
 8007822:	69a3      	ldr	r3, [r4, #24]
 8007824:	60a3      	str	r3, [r4, #8]
 8007826:	89a3      	ldrh	r3, [r4, #12]
 8007828:	071a      	lsls	r2, r3, #28
 800782a:	d52f      	bpl.n	800788c <__swbuf_r+0x84>
 800782c:	6923      	ldr	r3, [r4, #16]
 800782e:	b36b      	cbz	r3, 800788c <__swbuf_r+0x84>
 8007830:	6923      	ldr	r3, [r4, #16]
 8007832:	6820      	ldr	r0, [r4, #0]
 8007834:	1ac0      	subs	r0, r0, r3
 8007836:	6963      	ldr	r3, [r4, #20]
 8007838:	b2f6      	uxtb	r6, r6
 800783a:	4283      	cmp	r3, r0
 800783c:	4637      	mov	r7, r6
 800783e:	dc04      	bgt.n	800784a <__swbuf_r+0x42>
 8007840:	4621      	mov	r1, r4
 8007842:	4628      	mov	r0, r5
 8007844:	f000 ffa0 	bl	8008788 <_fflush_r>
 8007848:	bb30      	cbnz	r0, 8007898 <__swbuf_r+0x90>
 800784a:	68a3      	ldr	r3, [r4, #8]
 800784c:	3b01      	subs	r3, #1
 800784e:	60a3      	str	r3, [r4, #8]
 8007850:	6823      	ldr	r3, [r4, #0]
 8007852:	1c5a      	adds	r2, r3, #1
 8007854:	6022      	str	r2, [r4, #0]
 8007856:	701e      	strb	r6, [r3, #0]
 8007858:	6963      	ldr	r3, [r4, #20]
 800785a:	3001      	adds	r0, #1
 800785c:	4283      	cmp	r3, r0
 800785e:	d004      	beq.n	800786a <__swbuf_r+0x62>
 8007860:	89a3      	ldrh	r3, [r4, #12]
 8007862:	07db      	lsls	r3, r3, #31
 8007864:	d506      	bpl.n	8007874 <__swbuf_r+0x6c>
 8007866:	2e0a      	cmp	r6, #10
 8007868:	d104      	bne.n	8007874 <__swbuf_r+0x6c>
 800786a:	4621      	mov	r1, r4
 800786c:	4628      	mov	r0, r5
 800786e:	f000 ff8b 	bl	8008788 <_fflush_r>
 8007872:	b988      	cbnz	r0, 8007898 <__swbuf_r+0x90>
 8007874:	4638      	mov	r0, r7
 8007876:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007878:	4b0a      	ldr	r3, [pc, #40]	; (80078a4 <__swbuf_r+0x9c>)
 800787a:	429c      	cmp	r4, r3
 800787c:	d101      	bne.n	8007882 <__swbuf_r+0x7a>
 800787e:	68ac      	ldr	r4, [r5, #8]
 8007880:	e7cf      	b.n	8007822 <__swbuf_r+0x1a>
 8007882:	4b09      	ldr	r3, [pc, #36]	; (80078a8 <__swbuf_r+0xa0>)
 8007884:	429c      	cmp	r4, r3
 8007886:	bf08      	it	eq
 8007888:	68ec      	ldreq	r4, [r5, #12]
 800788a:	e7ca      	b.n	8007822 <__swbuf_r+0x1a>
 800788c:	4621      	mov	r1, r4
 800788e:	4628      	mov	r0, r5
 8007890:	f000 f80c 	bl	80078ac <__swsetup_r>
 8007894:	2800      	cmp	r0, #0
 8007896:	d0cb      	beq.n	8007830 <__swbuf_r+0x28>
 8007898:	f04f 37ff 	mov.w	r7, #4294967295
 800789c:	e7ea      	b.n	8007874 <__swbuf_r+0x6c>
 800789e:	bf00      	nop
 80078a0:	0800c12c 	.word	0x0800c12c
 80078a4:	0800c14c 	.word	0x0800c14c
 80078a8:	0800c10c 	.word	0x0800c10c

080078ac <__swsetup_r>:
 80078ac:	4b32      	ldr	r3, [pc, #200]	; (8007978 <__swsetup_r+0xcc>)
 80078ae:	b570      	push	{r4, r5, r6, lr}
 80078b0:	681d      	ldr	r5, [r3, #0]
 80078b2:	4606      	mov	r6, r0
 80078b4:	460c      	mov	r4, r1
 80078b6:	b125      	cbz	r5, 80078c2 <__swsetup_r+0x16>
 80078b8:	69ab      	ldr	r3, [r5, #24]
 80078ba:	b913      	cbnz	r3, 80078c2 <__swsetup_r+0x16>
 80078bc:	4628      	mov	r0, r5
 80078be:	f001 f809 	bl	80088d4 <__sinit>
 80078c2:	4b2e      	ldr	r3, [pc, #184]	; (800797c <__swsetup_r+0xd0>)
 80078c4:	429c      	cmp	r4, r3
 80078c6:	d10f      	bne.n	80078e8 <__swsetup_r+0x3c>
 80078c8:	686c      	ldr	r4, [r5, #4]
 80078ca:	89a3      	ldrh	r3, [r4, #12]
 80078cc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80078d0:	0719      	lsls	r1, r3, #28
 80078d2:	d42c      	bmi.n	800792e <__swsetup_r+0x82>
 80078d4:	06dd      	lsls	r5, r3, #27
 80078d6:	d411      	bmi.n	80078fc <__swsetup_r+0x50>
 80078d8:	2309      	movs	r3, #9
 80078da:	6033      	str	r3, [r6, #0]
 80078dc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80078e0:	81a3      	strh	r3, [r4, #12]
 80078e2:	f04f 30ff 	mov.w	r0, #4294967295
 80078e6:	e03e      	b.n	8007966 <__swsetup_r+0xba>
 80078e8:	4b25      	ldr	r3, [pc, #148]	; (8007980 <__swsetup_r+0xd4>)
 80078ea:	429c      	cmp	r4, r3
 80078ec:	d101      	bne.n	80078f2 <__swsetup_r+0x46>
 80078ee:	68ac      	ldr	r4, [r5, #8]
 80078f0:	e7eb      	b.n	80078ca <__swsetup_r+0x1e>
 80078f2:	4b24      	ldr	r3, [pc, #144]	; (8007984 <__swsetup_r+0xd8>)
 80078f4:	429c      	cmp	r4, r3
 80078f6:	bf08      	it	eq
 80078f8:	68ec      	ldreq	r4, [r5, #12]
 80078fa:	e7e6      	b.n	80078ca <__swsetup_r+0x1e>
 80078fc:	0758      	lsls	r0, r3, #29
 80078fe:	d512      	bpl.n	8007926 <__swsetup_r+0x7a>
 8007900:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007902:	b141      	cbz	r1, 8007916 <__swsetup_r+0x6a>
 8007904:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007908:	4299      	cmp	r1, r3
 800790a:	d002      	beq.n	8007912 <__swsetup_r+0x66>
 800790c:	4630      	mov	r0, r6
 800790e:	f002 f977 	bl	8009c00 <_free_r>
 8007912:	2300      	movs	r3, #0
 8007914:	6363      	str	r3, [r4, #52]	; 0x34
 8007916:	89a3      	ldrh	r3, [r4, #12]
 8007918:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800791c:	81a3      	strh	r3, [r4, #12]
 800791e:	2300      	movs	r3, #0
 8007920:	6063      	str	r3, [r4, #4]
 8007922:	6923      	ldr	r3, [r4, #16]
 8007924:	6023      	str	r3, [r4, #0]
 8007926:	89a3      	ldrh	r3, [r4, #12]
 8007928:	f043 0308 	orr.w	r3, r3, #8
 800792c:	81a3      	strh	r3, [r4, #12]
 800792e:	6923      	ldr	r3, [r4, #16]
 8007930:	b94b      	cbnz	r3, 8007946 <__swsetup_r+0x9a>
 8007932:	89a3      	ldrh	r3, [r4, #12]
 8007934:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007938:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800793c:	d003      	beq.n	8007946 <__swsetup_r+0x9a>
 800793e:	4621      	mov	r1, r4
 8007940:	4630      	mov	r0, r6
 8007942:	f001 fc1d 	bl	8009180 <__smakebuf_r>
 8007946:	89a0      	ldrh	r0, [r4, #12]
 8007948:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800794c:	f010 0301 	ands.w	r3, r0, #1
 8007950:	d00a      	beq.n	8007968 <__swsetup_r+0xbc>
 8007952:	2300      	movs	r3, #0
 8007954:	60a3      	str	r3, [r4, #8]
 8007956:	6963      	ldr	r3, [r4, #20]
 8007958:	425b      	negs	r3, r3
 800795a:	61a3      	str	r3, [r4, #24]
 800795c:	6923      	ldr	r3, [r4, #16]
 800795e:	b943      	cbnz	r3, 8007972 <__swsetup_r+0xc6>
 8007960:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007964:	d1ba      	bne.n	80078dc <__swsetup_r+0x30>
 8007966:	bd70      	pop	{r4, r5, r6, pc}
 8007968:	0781      	lsls	r1, r0, #30
 800796a:	bf58      	it	pl
 800796c:	6963      	ldrpl	r3, [r4, #20]
 800796e:	60a3      	str	r3, [r4, #8]
 8007970:	e7f4      	b.n	800795c <__swsetup_r+0xb0>
 8007972:	2000      	movs	r0, #0
 8007974:	e7f7      	b.n	8007966 <__swsetup_r+0xba>
 8007976:	bf00      	nop
 8007978:	2000000c 	.word	0x2000000c
 800797c:	0800c12c 	.word	0x0800c12c
 8007980:	0800c14c 	.word	0x0800c14c
 8007984:	0800c10c 	.word	0x0800c10c

08007988 <quorem>:
 8007988:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800798c:	6903      	ldr	r3, [r0, #16]
 800798e:	690c      	ldr	r4, [r1, #16]
 8007990:	42a3      	cmp	r3, r4
 8007992:	4607      	mov	r7, r0
 8007994:	f2c0 8081 	blt.w	8007a9a <quorem+0x112>
 8007998:	3c01      	subs	r4, #1
 800799a:	f101 0814 	add.w	r8, r1, #20
 800799e:	f100 0514 	add.w	r5, r0, #20
 80079a2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80079a6:	9301      	str	r3, [sp, #4]
 80079a8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80079ac:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80079b0:	3301      	adds	r3, #1
 80079b2:	429a      	cmp	r2, r3
 80079b4:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80079b8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80079bc:	fbb2 f6f3 	udiv	r6, r2, r3
 80079c0:	d331      	bcc.n	8007a26 <quorem+0x9e>
 80079c2:	f04f 0e00 	mov.w	lr, #0
 80079c6:	4640      	mov	r0, r8
 80079c8:	46ac      	mov	ip, r5
 80079ca:	46f2      	mov	sl, lr
 80079cc:	f850 2b04 	ldr.w	r2, [r0], #4
 80079d0:	b293      	uxth	r3, r2
 80079d2:	fb06 e303 	mla	r3, r6, r3, lr
 80079d6:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80079da:	b29b      	uxth	r3, r3
 80079dc:	ebaa 0303 	sub.w	r3, sl, r3
 80079e0:	f8dc a000 	ldr.w	sl, [ip]
 80079e4:	0c12      	lsrs	r2, r2, #16
 80079e6:	fa13 f38a 	uxtah	r3, r3, sl
 80079ea:	fb06 e202 	mla	r2, r6, r2, lr
 80079ee:	9300      	str	r3, [sp, #0]
 80079f0:	9b00      	ldr	r3, [sp, #0]
 80079f2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80079f6:	b292      	uxth	r2, r2
 80079f8:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80079fc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007a00:	f8bd 3000 	ldrh.w	r3, [sp]
 8007a04:	4581      	cmp	r9, r0
 8007a06:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007a0a:	f84c 3b04 	str.w	r3, [ip], #4
 8007a0e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8007a12:	d2db      	bcs.n	80079cc <quorem+0x44>
 8007a14:	f855 300b 	ldr.w	r3, [r5, fp]
 8007a18:	b92b      	cbnz	r3, 8007a26 <quorem+0x9e>
 8007a1a:	9b01      	ldr	r3, [sp, #4]
 8007a1c:	3b04      	subs	r3, #4
 8007a1e:	429d      	cmp	r5, r3
 8007a20:	461a      	mov	r2, r3
 8007a22:	d32e      	bcc.n	8007a82 <quorem+0xfa>
 8007a24:	613c      	str	r4, [r7, #16]
 8007a26:	4638      	mov	r0, r7
 8007a28:	f001 fede 	bl	80097e8 <__mcmp>
 8007a2c:	2800      	cmp	r0, #0
 8007a2e:	db24      	blt.n	8007a7a <quorem+0xf2>
 8007a30:	3601      	adds	r6, #1
 8007a32:	4628      	mov	r0, r5
 8007a34:	f04f 0c00 	mov.w	ip, #0
 8007a38:	f858 2b04 	ldr.w	r2, [r8], #4
 8007a3c:	f8d0 e000 	ldr.w	lr, [r0]
 8007a40:	b293      	uxth	r3, r2
 8007a42:	ebac 0303 	sub.w	r3, ip, r3
 8007a46:	0c12      	lsrs	r2, r2, #16
 8007a48:	fa13 f38e 	uxtah	r3, r3, lr
 8007a4c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8007a50:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007a54:	b29b      	uxth	r3, r3
 8007a56:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007a5a:	45c1      	cmp	r9, r8
 8007a5c:	f840 3b04 	str.w	r3, [r0], #4
 8007a60:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8007a64:	d2e8      	bcs.n	8007a38 <quorem+0xb0>
 8007a66:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007a6a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007a6e:	b922      	cbnz	r2, 8007a7a <quorem+0xf2>
 8007a70:	3b04      	subs	r3, #4
 8007a72:	429d      	cmp	r5, r3
 8007a74:	461a      	mov	r2, r3
 8007a76:	d30a      	bcc.n	8007a8e <quorem+0x106>
 8007a78:	613c      	str	r4, [r7, #16]
 8007a7a:	4630      	mov	r0, r6
 8007a7c:	b003      	add	sp, #12
 8007a7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007a82:	6812      	ldr	r2, [r2, #0]
 8007a84:	3b04      	subs	r3, #4
 8007a86:	2a00      	cmp	r2, #0
 8007a88:	d1cc      	bne.n	8007a24 <quorem+0x9c>
 8007a8a:	3c01      	subs	r4, #1
 8007a8c:	e7c7      	b.n	8007a1e <quorem+0x96>
 8007a8e:	6812      	ldr	r2, [r2, #0]
 8007a90:	3b04      	subs	r3, #4
 8007a92:	2a00      	cmp	r2, #0
 8007a94:	d1f0      	bne.n	8007a78 <quorem+0xf0>
 8007a96:	3c01      	subs	r4, #1
 8007a98:	e7eb      	b.n	8007a72 <quorem+0xea>
 8007a9a:	2000      	movs	r0, #0
 8007a9c:	e7ee      	b.n	8007a7c <quorem+0xf4>
	...

08007aa0 <_dtoa_r>:
 8007aa0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007aa4:	ed2d 8b04 	vpush	{d8-d9}
 8007aa8:	ec57 6b10 	vmov	r6, r7, d0
 8007aac:	b093      	sub	sp, #76	; 0x4c
 8007aae:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8007ab0:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8007ab4:	9106      	str	r1, [sp, #24]
 8007ab6:	ee10 aa10 	vmov	sl, s0
 8007aba:	4604      	mov	r4, r0
 8007abc:	9209      	str	r2, [sp, #36]	; 0x24
 8007abe:	930c      	str	r3, [sp, #48]	; 0x30
 8007ac0:	46bb      	mov	fp, r7
 8007ac2:	b975      	cbnz	r5, 8007ae2 <_dtoa_r+0x42>
 8007ac4:	2010      	movs	r0, #16
 8007ac6:	f001 fb9b 	bl	8009200 <malloc>
 8007aca:	4602      	mov	r2, r0
 8007acc:	6260      	str	r0, [r4, #36]	; 0x24
 8007ace:	b920      	cbnz	r0, 8007ada <_dtoa_r+0x3a>
 8007ad0:	4ba7      	ldr	r3, [pc, #668]	; (8007d70 <_dtoa_r+0x2d0>)
 8007ad2:	21ea      	movs	r1, #234	; 0xea
 8007ad4:	48a7      	ldr	r0, [pc, #668]	; (8007d74 <_dtoa_r+0x2d4>)
 8007ad6:	f003 f9ed 	bl	800aeb4 <__assert_func>
 8007ada:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8007ade:	6005      	str	r5, [r0, #0]
 8007ae0:	60c5      	str	r5, [r0, #12]
 8007ae2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007ae4:	6819      	ldr	r1, [r3, #0]
 8007ae6:	b151      	cbz	r1, 8007afe <_dtoa_r+0x5e>
 8007ae8:	685a      	ldr	r2, [r3, #4]
 8007aea:	604a      	str	r2, [r1, #4]
 8007aec:	2301      	movs	r3, #1
 8007aee:	4093      	lsls	r3, r2
 8007af0:	608b      	str	r3, [r1, #8]
 8007af2:	4620      	mov	r0, r4
 8007af4:	f001 fbec 	bl	80092d0 <_Bfree>
 8007af8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007afa:	2200      	movs	r2, #0
 8007afc:	601a      	str	r2, [r3, #0]
 8007afe:	1e3b      	subs	r3, r7, #0
 8007b00:	bfaa      	itet	ge
 8007b02:	2300      	movge	r3, #0
 8007b04:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8007b08:	f8c8 3000 	strge.w	r3, [r8]
 8007b0c:	4b9a      	ldr	r3, [pc, #616]	; (8007d78 <_dtoa_r+0x2d8>)
 8007b0e:	bfbc      	itt	lt
 8007b10:	2201      	movlt	r2, #1
 8007b12:	f8c8 2000 	strlt.w	r2, [r8]
 8007b16:	ea33 030b 	bics.w	r3, r3, fp
 8007b1a:	d11b      	bne.n	8007b54 <_dtoa_r+0xb4>
 8007b1c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007b1e:	f242 730f 	movw	r3, #9999	; 0x270f
 8007b22:	6013      	str	r3, [r2, #0]
 8007b24:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007b28:	4333      	orrs	r3, r6
 8007b2a:	f000 8592 	beq.w	8008652 <_dtoa_r+0xbb2>
 8007b2e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007b30:	b963      	cbnz	r3, 8007b4c <_dtoa_r+0xac>
 8007b32:	4b92      	ldr	r3, [pc, #584]	; (8007d7c <_dtoa_r+0x2dc>)
 8007b34:	e022      	b.n	8007b7c <_dtoa_r+0xdc>
 8007b36:	4b92      	ldr	r3, [pc, #584]	; (8007d80 <_dtoa_r+0x2e0>)
 8007b38:	9301      	str	r3, [sp, #4]
 8007b3a:	3308      	adds	r3, #8
 8007b3c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8007b3e:	6013      	str	r3, [r2, #0]
 8007b40:	9801      	ldr	r0, [sp, #4]
 8007b42:	b013      	add	sp, #76	; 0x4c
 8007b44:	ecbd 8b04 	vpop	{d8-d9}
 8007b48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007b4c:	4b8b      	ldr	r3, [pc, #556]	; (8007d7c <_dtoa_r+0x2dc>)
 8007b4e:	9301      	str	r3, [sp, #4]
 8007b50:	3303      	adds	r3, #3
 8007b52:	e7f3      	b.n	8007b3c <_dtoa_r+0x9c>
 8007b54:	2200      	movs	r2, #0
 8007b56:	2300      	movs	r3, #0
 8007b58:	4650      	mov	r0, sl
 8007b5a:	4659      	mov	r1, fp
 8007b5c:	f7f8 ffb4 	bl	8000ac8 <__aeabi_dcmpeq>
 8007b60:	ec4b ab19 	vmov	d9, sl, fp
 8007b64:	4680      	mov	r8, r0
 8007b66:	b158      	cbz	r0, 8007b80 <_dtoa_r+0xe0>
 8007b68:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007b6a:	2301      	movs	r3, #1
 8007b6c:	6013      	str	r3, [r2, #0]
 8007b6e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007b70:	2b00      	cmp	r3, #0
 8007b72:	f000 856b 	beq.w	800864c <_dtoa_r+0xbac>
 8007b76:	4883      	ldr	r0, [pc, #524]	; (8007d84 <_dtoa_r+0x2e4>)
 8007b78:	6018      	str	r0, [r3, #0]
 8007b7a:	1e43      	subs	r3, r0, #1
 8007b7c:	9301      	str	r3, [sp, #4]
 8007b7e:	e7df      	b.n	8007b40 <_dtoa_r+0xa0>
 8007b80:	ec4b ab10 	vmov	d0, sl, fp
 8007b84:	aa10      	add	r2, sp, #64	; 0x40
 8007b86:	a911      	add	r1, sp, #68	; 0x44
 8007b88:	4620      	mov	r0, r4
 8007b8a:	f001 ff4f 	bl	8009a2c <__d2b>
 8007b8e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8007b92:	ee08 0a10 	vmov	s16, r0
 8007b96:	2d00      	cmp	r5, #0
 8007b98:	f000 8084 	beq.w	8007ca4 <_dtoa_r+0x204>
 8007b9c:	ee19 3a90 	vmov	r3, s19
 8007ba0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007ba4:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8007ba8:	4656      	mov	r6, sl
 8007baa:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8007bae:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8007bb2:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8007bb6:	4b74      	ldr	r3, [pc, #464]	; (8007d88 <_dtoa_r+0x2e8>)
 8007bb8:	2200      	movs	r2, #0
 8007bba:	4630      	mov	r0, r6
 8007bbc:	4639      	mov	r1, r7
 8007bbe:	f7f8 fb63 	bl	8000288 <__aeabi_dsub>
 8007bc2:	a365      	add	r3, pc, #404	; (adr r3, 8007d58 <_dtoa_r+0x2b8>)
 8007bc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bc8:	f7f8 fd16 	bl	80005f8 <__aeabi_dmul>
 8007bcc:	a364      	add	r3, pc, #400	; (adr r3, 8007d60 <_dtoa_r+0x2c0>)
 8007bce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bd2:	f7f8 fb5b 	bl	800028c <__adddf3>
 8007bd6:	4606      	mov	r6, r0
 8007bd8:	4628      	mov	r0, r5
 8007bda:	460f      	mov	r7, r1
 8007bdc:	f7f8 fca2 	bl	8000524 <__aeabi_i2d>
 8007be0:	a361      	add	r3, pc, #388	; (adr r3, 8007d68 <_dtoa_r+0x2c8>)
 8007be2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007be6:	f7f8 fd07 	bl	80005f8 <__aeabi_dmul>
 8007bea:	4602      	mov	r2, r0
 8007bec:	460b      	mov	r3, r1
 8007bee:	4630      	mov	r0, r6
 8007bf0:	4639      	mov	r1, r7
 8007bf2:	f7f8 fb4b 	bl	800028c <__adddf3>
 8007bf6:	4606      	mov	r6, r0
 8007bf8:	460f      	mov	r7, r1
 8007bfa:	f7f8 ffad 	bl	8000b58 <__aeabi_d2iz>
 8007bfe:	2200      	movs	r2, #0
 8007c00:	9000      	str	r0, [sp, #0]
 8007c02:	2300      	movs	r3, #0
 8007c04:	4630      	mov	r0, r6
 8007c06:	4639      	mov	r1, r7
 8007c08:	f7f8 ff68 	bl	8000adc <__aeabi_dcmplt>
 8007c0c:	b150      	cbz	r0, 8007c24 <_dtoa_r+0x184>
 8007c0e:	9800      	ldr	r0, [sp, #0]
 8007c10:	f7f8 fc88 	bl	8000524 <__aeabi_i2d>
 8007c14:	4632      	mov	r2, r6
 8007c16:	463b      	mov	r3, r7
 8007c18:	f7f8 ff56 	bl	8000ac8 <__aeabi_dcmpeq>
 8007c1c:	b910      	cbnz	r0, 8007c24 <_dtoa_r+0x184>
 8007c1e:	9b00      	ldr	r3, [sp, #0]
 8007c20:	3b01      	subs	r3, #1
 8007c22:	9300      	str	r3, [sp, #0]
 8007c24:	9b00      	ldr	r3, [sp, #0]
 8007c26:	2b16      	cmp	r3, #22
 8007c28:	d85a      	bhi.n	8007ce0 <_dtoa_r+0x240>
 8007c2a:	9a00      	ldr	r2, [sp, #0]
 8007c2c:	4b57      	ldr	r3, [pc, #348]	; (8007d8c <_dtoa_r+0x2ec>)
 8007c2e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007c32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c36:	ec51 0b19 	vmov	r0, r1, d9
 8007c3a:	f7f8 ff4f 	bl	8000adc <__aeabi_dcmplt>
 8007c3e:	2800      	cmp	r0, #0
 8007c40:	d050      	beq.n	8007ce4 <_dtoa_r+0x244>
 8007c42:	9b00      	ldr	r3, [sp, #0]
 8007c44:	3b01      	subs	r3, #1
 8007c46:	9300      	str	r3, [sp, #0]
 8007c48:	2300      	movs	r3, #0
 8007c4a:	930b      	str	r3, [sp, #44]	; 0x2c
 8007c4c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007c4e:	1b5d      	subs	r5, r3, r5
 8007c50:	1e6b      	subs	r3, r5, #1
 8007c52:	9305      	str	r3, [sp, #20]
 8007c54:	bf45      	ittet	mi
 8007c56:	f1c5 0301 	rsbmi	r3, r5, #1
 8007c5a:	9304      	strmi	r3, [sp, #16]
 8007c5c:	2300      	movpl	r3, #0
 8007c5e:	2300      	movmi	r3, #0
 8007c60:	bf4c      	ite	mi
 8007c62:	9305      	strmi	r3, [sp, #20]
 8007c64:	9304      	strpl	r3, [sp, #16]
 8007c66:	9b00      	ldr	r3, [sp, #0]
 8007c68:	2b00      	cmp	r3, #0
 8007c6a:	db3d      	blt.n	8007ce8 <_dtoa_r+0x248>
 8007c6c:	9b05      	ldr	r3, [sp, #20]
 8007c6e:	9a00      	ldr	r2, [sp, #0]
 8007c70:	920a      	str	r2, [sp, #40]	; 0x28
 8007c72:	4413      	add	r3, r2
 8007c74:	9305      	str	r3, [sp, #20]
 8007c76:	2300      	movs	r3, #0
 8007c78:	9307      	str	r3, [sp, #28]
 8007c7a:	9b06      	ldr	r3, [sp, #24]
 8007c7c:	2b09      	cmp	r3, #9
 8007c7e:	f200 8089 	bhi.w	8007d94 <_dtoa_r+0x2f4>
 8007c82:	2b05      	cmp	r3, #5
 8007c84:	bfc4      	itt	gt
 8007c86:	3b04      	subgt	r3, #4
 8007c88:	9306      	strgt	r3, [sp, #24]
 8007c8a:	9b06      	ldr	r3, [sp, #24]
 8007c8c:	f1a3 0302 	sub.w	r3, r3, #2
 8007c90:	bfcc      	ite	gt
 8007c92:	2500      	movgt	r5, #0
 8007c94:	2501      	movle	r5, #1
 8007c96:	2b03      	cmp	r3, #3
 8007c98:	f200 8087 	bhi.w	8007daa <_dtoa_r+0x30a>
 8007c9c:	e8df f003 	tbb	[pc, r3]
 8007ca0:	59383a2d 	.word	0x59383a2d
 8007ca4:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8007ca8:	441d      	add	r5, r3
 8007caa:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8007cae:	2b20      	cmp	r3, #32
 8007cb0:	bfc1      	itttt	gt
 8007cb2:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8007cb6:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8007cba:	fa0b f303 	lslgt.w	r3, fp, r3
 8007cbe:	fa26 f000 	lsrgt.w	r0, r6, r0
 8007cc2:	bfda      	itte	le
 8007cc4:	f1c3 0320 	rsble	r3, r3, #32
 8007cc8:	fa06 f003 	lslle.w	r0, r6, r3
 8007ccc:	4318      	orrgt	r0, r3
 8007cce:	f7f8 fc19 	bl	8000504 <__aeabi_ui2d>
 8007cd2:	2301      	movs	r3, #1
 8007cd4:	4606      	mov	r6, r0
 8007cd6:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8007cda:	3d01      	subs	r5, #1
 8007cdc:	930e      	str	r3, [sp, #56]	; 0x38
 8007cde:	e76a      	b.n	8007bb6 <_dtoa_r+0x116>
 8007ce0:	2301      	movs	r3, #1
 8007ce2:	e7b2      	b.n	8007c4a <_dtoa_r+0x1aa>
 8007ce4:	900b      	str	r0, [sp, #44]	; 0x2c
 8007ce6:	e7b1      	b.n	8007c4c <_dtoa_r+0x1ac>
 8007ce8:	9b04      	ldr	r3, [sp, #16]
 8007cea:	9a00      	ldr	r2, [sp, #0]
 8007cec:	1a9b      	subs	r3, r3, r2
 8007cee:	9304      	str	r3, [sp, #16]
 8007cf0:	4253      	negs	r3, r2
 8007cf2:	9307      	str	r3, [sp, #28]
 8007cf4:	2300      	movs	r3, #0
 8007cf6:	930a      	str	r3, [sp, #40]	; 0x28
 8007cf8:	e7bf      	b.n	8007c7a <_dtoa_r+0x1da>
 8007cfa:	2300      	movs	r3, #0
 8007cfc:	9308      	str	r3, [sp, #32]
 8007cfe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007d00:	2b00      	cmp	r3, #0
 8007d02:	dc55      	bgt.n	8007db0 <_dtoa_r+0x310>
 8007d04:	2301      	movs	r3, #1
 8007d06:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8007d0a:	461a      	mov	r2, r3
 8007d0c:	9209      	str	r2, [sp, #36]	; 0x24
 8007d0e:	e00c      	b.n	8007d2a <_dtoa_r+0x28a>
 8007d10:	2301      	movs	r3, #1
 8007d12:	e7f3      	b.n	8007cfc <_dtoa_r+0x25c>
 8007d14:	2300      	movs	r3, #0
 8007d16:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007d18:	9308      	str	r3, [sp, #32]
 8007d1a:	9b00      	ldr	r3, [sp, #0]
 8007d1c:	4413      	add	r3, r2
 8007d1e:	9302      	str	r3, [sp, #8]
 8007d20:	3301      	adds	r3, #1
 8007d22:	2b01      	cmp	r3, #1
 8007d24:	9303      	str	r3, [sp, #12]
 8007d26:	bfb8      	it	lt
 8007d28:	2301      	movlt	r3, #1
 8007d2a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8007d2c:	2200      	movs	r2, #0
 8007d2e:	6042      	str	r2, [r0, #4]
 8007d30:	2204      	movs	r2, #4
 8007d32:	f102 0614 	add.w	r6, r2, #20
 8007d36:	429e      	cmp	r6, r3
 8007d38:	6841      	ldr	r1, [r0, #4]
 8007d3a:	d93d      	bls.n	8007db8 <_dtoa_r+0x318>
 8007d3c:	4620      	mov	r0, r4
 8007d3e:	f001 fa87 	bl	8009250 <_Balloc>
 8007d42:	9001      	str	r0, [sp, #4]
 8007d44:	2800      	cmp	r0, #0
 8007d46:	d13b      	bne.n	8007dc0 <_dtoa_r+0x320>
 8007d48:	4b11      	ldr	r3, [pc, #68]	; (8007d90 <_dtoa_r+0x2f0>)
 8007d4a:	4602      	mov	r2, r0
 8007d4c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8007d50:	e6c0      	b.n	8007ad4 <_dtoa_r+0x34>
 8007d52:	2301      	movs	r3, #1
 8007d54:	e7df      	b.n	8007d16 <_dtoa_r+0x276>
 8007d56:	bf00      	nop
 8007d58:	636f4361 	.word	0x636f4361
 8007d5c:	3fd287a7 	.word	0x3fd287a7
 8007d60:	8b60c8b3 	.word	0x8b60c8b3
 8007d64:	3fc68a28 	.word	0x3fc68a28
 8007d68:	509f79fb 	.word	0x509f79fb
 8007d6c:	3fd34413 	.word	0x3fd34413
 8007d70:	0800c086 	.word	0x0800c086
 8007d74:	0800c09d 	.word	0x0800c09d
 8007d78:	7ff00000 	.word	0x7ff00000
 8007d7c:	0800c082 	.word	0x0800c082
 8007d80:	0800c079 	.word	0x0800c079
 8007d84:	0800c35a 	.word	0x0800c35a
 8007d88:	3ff80000 	.word	0x3ff80000
 8007d8c:	0800c270 	.word	0x0800c270
 8007d90:	0800c0f8 	.word	0x0800c0f8
 8007d94:	2501      	movs	r5, #1
 8007d96:	2300      	movs	r3, #0
 8007d98:	9306      	str	r3, [sp, #24]
 8007d9a:	9508      	str	r5, [sp, #32]
 8007d9c:	f04f 33ff 	mov.w	r3, #4294967295
 8007da0:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8007da4:	2200      	movs	r2, #0
 8007da6:	2312      	movs	r3, #18
 8007da8:	e7b0      	b.n	8007d0c <_dtoa_r+0x26c>
 8007daa:	2301      	movs	r3, #1
 8007dac:	9308      	str	r3, [sp, #32]
 8007dae:	e7f5      	b.n	8007d9c <_dtoa_r+0x2fc>
 8007db0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007db2:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8007db6:	e7b8      	b.n	8007d2a <_dtoa_r+0x28a>
 8007db8:	3101      	adds	r1, #1
 8007dba:	6041      	str	r1, [r0, #4]
 8007dbc:	0052      	lsls	r2, r2, #1
 8007dbe:	e7b8      	b.n	8007d32 <_dtoa_r+0x292>
 8007dc0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007dc2:	9a01      	ldr	r2, [sp, #4]
 8007dc4:	601a      	str	r2, [r3, #0]
 8007dc6:	9b03      	ldr	r3, [sp, #12]
 8007dc8:	2b0e      	cmp	r3, #14
 8007dca:	f200 809d 	bhi.w	8007f08 <_dtoa_r+0x468>
 8007dce:	2d00      	cmp	r5, #0
 8007dd0:	f000 809a 	beq.w	8007f08 <_dtoa_r+0x468>
 8007dd4:	9b00      	ldr	r3, [sp, #0]
 8007dd6:	2b00      	cmp	r3, #0
 8007dd8:	dd32      	ble.n	8007e40 <_dtoa_r+0x3a0>
 8007dda:	4ab7      	ldr	r2, [pc, #732]	; (80080b8 <_dtoa_r+0x618>)
 8007ddc:	f003 030f 	and.w	r3, r3, #15
 8007de0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8007de4:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007de8:	9b00      	ldr	r3, [sp, #0]
 8007dea:	05d8      	lsls	r0, r3, #23
 8007dec:	ea4f 1723 	mov.w	r7, r3, asr #4
 8007df0:	d516      	bpl.n	8007e20 <_dtoa_r+0x380>
 8007df2:	4bb2      	ldr	r3, [pc, #712]	; (80080bc <_dtoa_r+0x61c>)
 8007df4:	ec51 0b19 	vmov	r0, r1, d9
 8007df8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007dfc:	f7f8 fd26 	bl	800084c <__aeabi_ddiv>
 8007e00:	f007 070f 	and.w	r7, r7, #15
 8007e04:	4682      	mov	sl, r0
 8007e06:	468b      	mov	fp, r1
 8007e08:	2503      	movs	r5, #3
 8007e0a:	4eac      	ldr	r6, [pc, #688]	; (80080bc <_dtoa_r+0x61c>)
 8007e0c:	b957      	cbnz	r7, 8007e24 <_dtoa_r+0x384>
 8007e0e:	4642      	mov	r2, r8
 8007e10:	464b      	mov	r3, r9
 8007e12:	4650      	mov	r0, sl
 8007e14:	4659      	mov	r1, fp
 8007e16:	f7f8 fd19 	bl	800084c <__aeabi_ddiv>
 8007e1a:	4682      	mov	sl, r0
 8007e1c:	468b      	mov	fp, r1
 8007e1e:	e028      	b.n	8007e72 <_dtoa_r+0x3d2>
 8007e20:	2502      	movs	r5, #2
 8007e22:	e7f2      	b.n	8007e0a <_dtoa_r+0x36a>
 8007e24:	07f9      	lsls	r1, r7, #31
 8007e26:	d508      	bpl.n	8007e3a <_dtoa_r+0x39a>
 8007e28:	4640      	mov	r0, r8
 8007e2a:	4649      	mov	r1, r9
 8007e2c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8007e30:	f7f8 fbe2 	bl	80005f8 <__aeabi_dmul>
 8007e34:	3501      	adds	r5, #1
 8007e36:	4680      	mov	r8, r0
 8007e38:	4689      	mov	r9, r1
 8007e3a:	107f      	asrs	r7, r7, #1
 8007e3c:	3608      	adds	r6, #8
 8007e3e:	e7e5      	b.n	8007e0c <_dtoa_r+0x36c>
 8007e40:	f000 809b 	beq.w	8007f7a <_dtoa_r+0x4da>
 8007e44:	9b00      	ldr	r3, [sp, #0]
 8007e46:	4f9d      	ldr	r7, [pc, #628]	; (80080bc <_dtoa_r+0x61c>)
 8007e48:	425e      	negs	r6, r3
 8007e4a:	4b9b      	ldr	r3, [pc, #620]	; (80080b8 <_dtoa_r+0x618>)
 8007e4c:	f006 020f 	and.w	r2, r6, #15
 8007e50:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007e54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e58:	ec51 0b19 	vmov	r0, r1, d9
 8007e5c:	f7f8 fbcc 	bl	80005f8 <__aeabi_dmul>
 8007e60:	1136      	asrs	r6, r6, #4
 8007e62:	4682      	mov	sl, r0
 8007e64:	468b      	mov	fp, r1
 8007e66:	2300      	movs	r3, #0
 8007e68:	2502      	movs	r5, #2
 8007e6a:	2e00      	cmp	r6, #0
 8007e6c:	d17a      	bne.n	8007f64 <_dtoa_r+0x4c4>
 8007e6e:	2b00      	cmp	r3, #0
 8007e70:	d1d3      	bne.n	8007e1a <_dtoa_r+0x37a>
 8007e72:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007e74:	2b00      	cmp	r3, #0
 8007e76:	f000 8082 	beq.w	8007f7e <_dtoa_r+0x4de>
 8007e7a:	4b91      	ldr	r3, [pc, #580]	; (80080c0 <_dtoa_r+0x620>)
 8007e7c:	2200      	movs	r2, #0
 8007e7e:	4650      	mov	r0, sl
 8007e80:	4659      	mov	r1, fp
 8007e82:	f7f8 fe2b 	bl	8000adc <__aeabi_dcmplt>
 8007e86:	2800      	cmp	r0, #0
 8007e88:	d079      	beq.n	8007f7e <_dtoa_r+0x4de>
 8007e8a:	9b03      	ldr	r3, [sp, #12]
 8007e8c:	2b00      	cmp	r3, #0
 8007e8e:	d076      	beq.n	8007f7e <_dtoa_r+0x4de>
 8007e90:	9b02      	ldr	r3, [sp, #8]
 8007e92:	2b00      	cmp	r3, #0
 8007e94:	dd36      	ble.n	8007f04 <_dtoa_r+0x464>
 8007e96:	9b00      	ldr	r3, [sp, #0]
 8007e98:	4650      	mov	r0, sl
 8007e9a:	4659      	mov	r1, fp
 8007e9c:	1e5f      	subs	r7, r3, #1
 8007e9e:	2200      	movs	r2, #0
 8007ea0:	4b88      	ldr	r3, [pc, #544]	; (80080c4 <_dtoa_r+0x624>)
 8007ea2:	f7f8 fba9 	bl	80005f8 <__aeabi_dmul>
 8007ea6:	9e02      	ldr	r6, [sp, #8]
 8007ea8:	4682      	mov	sl, r0
 8007eaa:	468b      	mov	fp, r1
 8007eac:	3501      	adds	r5, #1
 8007eae:	4628      	mov	r0, r5
 8007eb0:	f7f8 fb38 	bl	8000524 <__aeabi_i2d>
 8007eb4:	4652      	mov	r2, sl
 8007eb6:	465b      	mov	r3, fp
 8007eb8:	f7f8 fb9e 	bl	80005f8 <__aeabi_dmul>
 8007ebc:	4b82      	ldr	r3, [pc, #520]	; (80080c8 <_dtoa_r+0x628>)
 8007ebe:	2200      	movs	r2, #0
 8007ec0:	f7f8 f9e4 	bl	800028c <__adddf3>
 8007ec4:	46d0      	mov	r8, sl
 8007ec6:	46d9      	mov	r9, fp
 8007ec8:	4682      	mov	sl, r0
 8007eca:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8007ece:	2e00      	cmp	r6, #0
 8007ed0:	d158      	bne.n	8007f84 <_dtoa_r+0x4e4>
 8007ed2:	4b7e      	ldr	r3, [pc, #504]	; (80080cc <_dtoa_r+0x62c>)
 8007ed4:	2200      	movs	r2, #0
 8007ed6:	4640      	mov	r0, r8
 8007ed8:	4649      	mov	r1, r9
 8007eda:	f7f8 f9d5 	bl	8000288 <__aeabi_dsub>
 8007ede:	4652      	mov	r2, sl
 8007ee0:	465b      	mov	r3, fp
 8007ee2:	4680      	mov	r8, r0
 8007ee4:	4689      	mov	r9, r1
 8007ee6:	f7f8 fe17 	bl	8000b18 <__aeabi_dcmpgt>
 8007eea:	2800      	cmp	r0, #0
 8007eec:	f040 8295 	bne.w	800841a <_dtoa_r+0x97a>
 8007ef0:	4652      	mov	r2, sl
 8007ef2:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8007ef6:	4640      	mov	r0, r8
 8007ef8:	4649      	mov	r1, r9
 8007efa:	f7f8 fdef 	bl	8000adc <__aeabi_dcmplt>
 8007efe:	2800      	cmp	r0, #0
 8007f00:	f040 8289 	bne.w	8008416 <_dtoa_r+0x976>
 8007f04:	ec5b ab19 	vmov	sl, fp, d9
 8007f08:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007f0a:	2b00      	cmp	r3, #0
 8007f0c:	f2c0 8148 	blt.w	80081a0 <_dtoa_r+0x700>
 8007f10:	9a00      	ldr	r2, [sp, #0]
 8007f12:	2a0e      	cmp	r2, #14
 8007f14:	f300 8144 	bgt.w	80081a0 <_dtoa_r+0x700>
 8007f18:	4b67      	ldr	r3, [pc, #412]	; (80080b8 <_dtoa_r+0x618>)
 8007f1a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007f1e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007f22:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007f24:	2b00      	cmp	r3, #0
 8007f26:	f280 80d5 	bge.w	80080d4 <_dtoa_r+0x634>
 8007f2a:	9b03      	ldr	r3, [sp, #12]
 8007f2c:	2b00      	cmp	r3, #0
 8007f2e:	f300 80d1 	bgt.w	80080d4 <_dtoa_r+0x634>
 8007f32:	f040 826f 	bne.w	8008414 <_dtoa_r+0x974>
 8007f36:	4b65      	ldr	r3, [pc, #404]	; (80080cc <_dtoa_r+0x62c>)
 8007f38:	2200      	movs	r2, #0
 8007f3a:	4640      	mov	r0, r8
 8007f3c:	4649      	mov	r1, r9
 8007f3e:	f7f8 fb5b 	bl	80005f8 <__aeabi_dmul>
 8007f42:	4652      	mov	r2, sl
 8007f44:	465b      	mov	r3, fp
 8007f46:	f7f8 fddd 	bl	8000b04 <__aeabi_dcmpge>
 8007f4a:	9e03      	ldr	r6, [sp, #12]
 8007f4c:	4637      	mov	r7, r6
 8007f4e:	2800      	cmp	r0, #0
 8007f50:	f040 8245 	bne.w	80083de <_dtoa_r+0x93e>
 8007f54:	9d01      	ldr	r5, [sp, #4]
 8007f56:	2331      	movs	r3, #49	; 0x31
 8007f58:	f805 3b01 	strb.w	r3, [r5], #1
 8007f5c:	9b00      	ldr	r3, [sp, #0]
 8007f5e:	3301      	adds	r3, #1
 8007f60:	9300      	str	r3, [sp, #0]
 8007f62:	e240      	b.n	80083e6 <_dtoa_r+0x946>
 8007f64:	07f2      	lsls	r2, r6, #31
 8007f66:	d505      	bpl.n	8007f74 <_dtoa_r+0x4d4>
 8007f68:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007f6c:	f7f8 fb44 	bl	80005f8 <__aeabi_dmul>
 8007f70:	3501      	adds	r5, #1
 8007f72:	2301      	movs	r3, #1
 8007f74:	1076      	asrs	r6, r6, #1
 8007f76:	3708      	adds	r7, #8
 8007f78:	e777      	b.n	8007e6a <_dtoa_r+0x3ca>
 8007f7a:	2502      	movs	r5, #2
 8007f7c:	e779      	b.n	8007e72 <_dtoa_r+0x3d2>
 8007f7e:	9f00      	ldr	r7, [sp, #0]
 8007f80:	9e03      	ldr	r6, [sp, #12]
 8007f82:	e794      	b.n	8007eae <_dtoa_r+0x40e>
 8007f84:	9901      	ldr	r1, [sp, #4]
 8007f86:	4b4c      	ldr	r3, [pc, #304]	; (80080b8 <_dtoa_r+0x618>)
 8007f88:	4431      	add	r1, r6
 8007f8a:	910d      	str	r1, [sp, #52]	; 0x34
 8007f8c:	9908      	ldr	r1, [sp, #32]
 8007f8e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8007f92:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8007f96:	2900      	cmp	r1, #0
 8007f98:	d043      	beq.n	8008022 <_dtoa_r+0x582>
 8007f9a:	494d      	ldr	r1, [pc, #308]	; (80080d0 <_dtoa_r+0x630>)
 8007f9c:	2000      	movs	r0, #0
 8007f9e:	f7f8 fc55 	bl	800084c <__aeabi_ddiv>
 8007fa2:	4652      	mov	r2, sl
 8007fa4:	465b      	mov	r3, fp
 8007fa6:	f7f8 f96f 	bl	8000288 <__aeabi_dsub>
 8007faa:	9d01      	ldr	r5, [sp, #4]
 8007fac:	4682      	mov	sl, r0
 8007fae:	468b      	mov	fp, r1
 8007fb0:	4649      	mov	r1, r9
 8007fb2:	4640      	mov	r0, r8
 8007fb4:	f7f8 fdd0 	bl	8000b58 <__aeabi_d2iz>
 8007fb8:	4606      	mov	r6, r0
 8007fba:	f7f8 fab3 	bl	8000524 <__aeabi_i2d>
 8007fbe:	4602      	mov	r2, r0
 8007fc0:	460b      	mov	r3, r1
 8007fc2:	4640      	mov	r0, r8
 8007fc4:	4649      	mov	r1, r9
 8007fc6:	f7f8 f95f 	bl	8000288 <__aeabi_dsub>
 8007fca:	3630      	adds	r6, #48	; 0x30
 8007fcc:	f805 6b01 	strb.w	r6, [r5], #1
 8007fd0:	4652      	mov	r2, sl
 8007fd2:	465b      	mov	r3, fp
 8007fd4:	4680      	mov	r8, r0
 8007fd6:	4689      	mov	r9, r1
 8007fd8:	f7f8 fd80 	bl	8000adc <__aeabi_dcmplt>
 8007fdc:	2800      	cmp	r0, #0
 8007fde:	d163      	bne.n	80080a8 <_dtoa_r+0x608>
 8007fe0:	4642      	mov	r2, r8
 8007fe2:	464b      	mov	r3, r9
 8007fe4:	4936      	ldr	r1, [pc, #216]	; (80080c0 <_dtoa_r+0x620>)
 8007fe6:	2000      	movs	r0, #0
 8007fe8:	f7f8 f94e 	bl	8000288 <__aeabi_dsub>
 8007fec:	4652      	mov	r2, sl
 8007fee:	465b      	mov	r3, fp
 8007ff0:	f7f8 fd74 	bl	8000adc <__aeabi_dcmplt>
 8007ff4:	2800      	cmp	r0, #0
 8007ff6:	f040 80b5 	bne.w	8008164 <_dtoa_r+0x6c4>
 8007ffa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007ffc:	429d      	cmp	r5, r3
 8007ffe:	d081      	beq.n	8007f04 <_dtoa_r+0x464>
 8008000:	4b30      	ldr	r3, [pc, #192]	; (80080c4 <_dtoa_r+0x624>)
 8008002:	2200      	movs	r2, #0
 8008004:	4650      	mov	r0, sl
 8008006:	4659      	mov	r1, fp
 8008008:	f7f8 faf6 	bl	80005f8 <__aeabi_dmul>
 800800c:	4b2d      	ldr	r3, [pc, #180]	; (80080c4 <_dtoa_r+0x624>)
 800800e:	4682      	mov	sl, r0
 8008010:	468b      	mov	fp, r1
 8008012:	4640      	mov	r0, r8
 8008014:	4649      	mov	r1, r9
 8008016:	2200      	movs	r2, #0
 8008018:	f7f8 faee 	bl	80005f8 <__aeabi_dmul>
 800801c:	4680      	mov	r8, r0
 800801e:	4689      	mov	r9, r1
 8008020:	e7c6      	b.n	8007fb0 <_dtoa_r+0x510>
 8008022:	4650      	mov	r0, sl
 8008024:	4659      	mov	r1, fp
 8008026:	f7f8 fae7 	bl	80005f8 <__aeabi_dmul>
 800802a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800802c:	9d01      	ldr	r5, [sp, #4]
 800802e:	930f      	str	r3, [sp, #60]	; 0x3c
 8008030:	4682      	mov	sl, r0
 8008032:	468b      	mov	fp, r1
 8008034:	4649      	mov	r1, r9
 8008036:	4640      	mov	r0, r8
 8008038:	f7f8 fd8e 	bl	8000b58 <__aeabi_d2iz>
 800803c:	4606      	mov	r6, r0
 800803e:	f7f8 fa71 	bl	8000524 <__aeabi_i2d>
 8008042:	3630      	adds	r6, #48	; 0x30
 8008044:	4602      	mov	r2, r0
 8008046:	460b      	mov	r3, r1
 8008048:	4640      	mov	r0, r8
 800804a:	4649      	mov	r1, r9
 800804c:	f7f8 f91c 	bl	8000288 <__aeabi_dsub>
 8008050:	f805 6b01 	strb.w	r6, [r5], #1
 8008054:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008056:	429d      	cmp	r5, r3
 8008058:	4680      	mov	r8, r0
 800805a:	4689      	mov	r9, r1
 800805c:	f04f 0200 	mov.w	r2, #0
 8008060:	d124      	bne.n	80080ac <_dtoa_r+0x60c>
 8008062:	4b1b      	ldr	r3, [pc, #108]	; (80080d0 <_dtoa_r+0x630>)
 8008064:	4650      	mov	r0, sl
 8008066:	4659      	mov	r1, fp
 8008068:	f7f8 f910 	bl	800028c <__adddf3>
 800806c:	4602      	mov	r2, r0
 800806e:	460b      	mov	r3, r1
 8008070:	4640      	mov	r0, r8
 8008072:	4649      	mov	r1, r9
 8008074:	f7f8 fd50 	bl	8000b18 <__aeabi_dcmpgt>
 8008078:	2800      	cmp	r0, #0
 800807a:	d173      	bne.n	8008164 <_dtoa_r+0x6c4>
 800807c:	4652      	mov	r2, sl
 800807e:	465b      	mov	r3, fp
 8008080:	4913      	ldr	r1, [pc, #76]	; (80080d0 <_dtoa_r+0x630>)
 8008082:	2000      	movs	r0, #0
 8008084:	f7f8 f900 	bl	8000288 <__aeabi_dsub>
 8008088:	4602      	mov	r2, r0
 800808a:	460b      	mov	r3, r1
 800808c:	4640      	mov	r0, r8
 800808e:	4649      	mov	r1, r9
 8008090:	f7f8 fd24 	bl	8000adc <__aeabi_dcmplt>
 8008094:	2800      	cmp	r0, #0
 8008096:	f43f af35 	beq.w	8007f04 <_dtoa_r+0x464>
 800809a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800809c:	1e6b      	subs	r3, r5, #1
 800809e:	930f      	str	r3, [sp, #60]	; 0x3c
 80080a0:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80080a4:	2b30      	cmp	r3, #48	; 0x30
 80080a6:	d0f8      	beq.n	800809a <_dtoa_r+0x5fa>
 80080a8:	9700      	str	r7, [sp, #0]
 80080aa:	e049      	b.n	8008140 <_dtoa_r+0x6a0>
 80080ac:	4b05      	ldr	r3, [pc, #20]	; (80080c4 <_dtoa_r+0x624>)
 80080ae:	f7f8 faa3 	bl	80005f8 <__aeabi_dmul>
 80080b2:	4680      	mov	r8, r0
 80080b4:	4689      	mov	r9, r1
 80080b6:	e7bd      	b.n	8008034 <_dtoa_r+0x594>
 80080b8:	0800c270 	.word	0x0800c270
 80080bc:	0800c248 	.word	0x0800c248
 80080c0:	3ff00000 	.word	0x3ff00000
 80080c4:	40240000 	.word	0x40240000
 80080c8:	401c0000 	.word	0x401c0000
 80080cc:	40140000 	.word	0x40140000
 80080d0:	3fe00000 	.word	0x3fe00000
 80080d4:	9d01      	ldr	r5, [sp, #4]
 80080d6:	4656      	mov	r6, sl
 80080d8:	465f      	mov	r7, fp
 80080da:	4642      	mov	r2, r8
 80080dc:	464b      	mov	r3, r9
 80080de:	4630      	mov	r0, r6
 80080e0:	4639      	mov	r1, r7
 80080e2:	f7f8 fbb3 	bl	800084c <__aeabi_ddiv>
 80080e6:	f7f8 fd37 	bl	8000b58 <__aeabi_d2iz>
 80080ea:	4682      	mov	sl, r0
 80080ec:	f7f8 fa1a 	bl	8000524 <__aeabi_i2d>
 80080f0:	4642      	mov	r2, r8
 80080f2:	464b      	mov	r3, r9
 80080f4:	f7f8 fa80 	bl	80005f8 <__aeabi_dmul>
 80080f8:	4602      	mov	r2, r0
 80080fa:	460b      	mov	r3, r1
 80080fc:	4630      	mov	r0, r6
 80080fe:	4639      	mov	r1, r7
 8008100:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8008104:	f7f8 f8c0 	bl	8000288 <__aeabi_dsub>
 8008108:	f805 6b01 	strb.w	r6, [r5], #1
 800810c:	9e01      	ldr	r6, [sp, #4]
 800810e:	9f03      	ldr	r7, [sp, #12]
 8008110:	1bae      	subs	r6, r5, r6
 8008112:	42b7      	cmp	r7, r6
 8008114:	4602      	mov	r2, r0
 8008116:	460b      	mov	r3, r1
 8008118:	d135      	bne.n	8008186 <_dtoa_r+0x6e6>
 800811a:	f7f8 f8b7 	bl	800028c <__adddf3>
 800811e:	4642      	mov	r2, r8
 8008120:	464b      	mov	r3, r9
 8008122:	4606      	mov	r6, r0
 8008124:	460f      	mov	r7, r1
 8008126:	f7f8 fcf7 	bl	8000b18 <__aeabi_dcmpgt>
 800812a:	b9d0      	cbnz	r0, 8008162 <_dtoa_r+0x6c2>
 800812c:	4642      	mov	r2, r8
 800812e:	464b      	mov	r3, r9
 8008130:	4630      	mov	r0, r6
 8008132:	4639      	mov	r1, r7
 8008134:	f7f8 fcc8 	bl	8000ac8 <__aeabi_dcmpeq>
 8008138:	b110      	cbz	r0, 8008140 <_dtoa_r+0x6a0>
 800813a:	f01a 0f01 	tst.w	sl, #1
 800813e:	d110      	bne.n	8008162 <_dtoa_r+0x6c2>
 8008140:	4620      	mov	r0, r4
 8008142:	ee18 1a10 	vmov	r1, s16
 8008146:	f001 f8c3 	bl	80092d0 <_Bfree>
 800814a:	2300      	movs	r3, #0
 800814c:	9800      	ldr	r0, [sp, #0]
 800814e:	702b      	strb	r3, [r5, #0]
 8008150:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008152:	3001      	adds	r0, #1
 8008154:	6018      	str	r0, [r3, #0]
 8008156:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008158:	2b00      	cmp	r3, #0
 800815a:	f43f acf1 	beq.w	8007b40 <_dtoa_r+0xa0>
 800815e:	601d      	str	r5, [r3, #0]
 8008160:	e4ee      	b.n	8007b40 <_dtoa_r+0xa0>
 8008162:	9f00      	ldr	r7, [sp, #0]
 8008164:	462b      	mov	r3, r5
 8008166:	461d      	mov	r5, r3
 8008168:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800816c:	2a39      	cmp	r2, #57	; 0x39
 800816e:	d106      	bne.n	800817e <_dtoa_r+0x6de>
 8008170:	9a01      	ldr	r2, [sp, #4]
 8008172:	429a      	cmp	r2, r3
 8008174:	d1f7      	bne.n	8008166 <_dtoa_r+0x6c6>
 8008176:	9901      	ldr	r1, [sp, #4]
 8008178:	2230      	movs	r2, #48	; 0x30
 800817a:	3701      	adds	r7, #1
 800817c:	700a      	strb	r2, [r1, #0]
 800817e:	781a      	ldrb	r2, [r3, #0]
 8008180:	3201      	adds	r2, #1
 8008182:	701a      	strb	r2, [r3, #0]
 8008184:	e790      	b.n	80080a8 <_dtoa_r+0x608>
 8008186:	4ba6      	ldr	r3, [pc, #664]	; (8008420 <_dtoa_r+0x980>)
 8008188:	2200      	movs	r2, #0
 800818a:	f7f8 fa35 	bl	80005f8 <__aeabi_dmul>
 800818e:	2200      	movs	r2, #0
 8008190:	2300      	movs	r3, #0
 8008192:	4606      	mov	r6, r0
 8008194:	460f      	mov	r7, r1
 8008196:	f7f8 fc97 	bl	8000ac8 <__aeabi_dcmpeq>
 800819a:	2800      	cmp	r0, #0
 800819c:	d09d      	beq.n	80080da <_dtoa_r+0x63a>
 800819e:	e7cf      	b.n	8008140 <_dtoa_r+0x6a0>
 80081a0:	9a08      	ldr	r2, [sp, #32]
 80081a2:	2a00      	cmp	r2, #0
 80081a4:	f000 80d7 	beq.w	8008356 <_dtoa_r+0x8b6>
 80081a8:	9a06      	ldr	r2, [sp, #24]
 80081aa:	2a01      	cmp	r2, #1
 80081ac:	f300 80ba 	bgt.w	8008324 <_dtoa_r+0x884>
 80081b0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80081b2:	2a00      	cmp	r2, #0
 80081b4:	f000 80b2 	beq.w	800831c <_dtoa_r+0x87c>
 80081b8:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80081bc:	9e07      	ldr	r6, [sp, #28]
 80081be:	9d04      	ldr	r5, [sp, #16]
 80081c0:	9a04      	ldr	r2, [sp, #16]
 80081c2:	441a      	add	r2, r3
 80081c4:	9204      	str	r2, [sp, #16]
 80081c6:	9a05      	ldr	r2, [sp, #20]
 80081c8:	2101      	movs	r1, #1
 80081ca:	441a      	add	r2, r3
 80081cc:	4620      	mov	r0, r4
 80081ce:	9205      	str	r2, [sp, #20]
 80081d0:	f001 f980 	bl	80094d4 <__i2b>
 80081d4:	4607      	mov	r7, r0
 80081d6:	2d00      	cmp	r5, #0
 80081d8:	dd0c      	ble.n	80081f4 <_dtoa_r+0x754>
 80081da:	9b05      	ldr	r3, [sp, #20]
 80081dc:	2b00      	cmp	r3, #0
 80081de:	dd09      	ble.n	80081f4 <_dtoa_r+0x754>
 80081e0:	42ab      	cmp	r3, r5
 80081e2:	9a04      	ldr	r2, [sp, #16]
 80081e4:	bfa8      	it	ge
 80081e6:	462b      	movge	r3, r5
 80081e8:	1ad2      	subs	r2, r2, r3
 80081ea:	9204      	str	r2, [sp, #16]
 80081ec:	9a05      	ldr	r2, [sp, #20]
 80081ee:	1aed      	subs	r5, r5, r3
 80081f0:	1ad3      	subs	r3, r2, r3
 80081f2:	9305      	str	r3, [sp, #20]
 80081f4:	9b07      	ldr	r3, [sp, #28]
 80081f6:	b31b      	cbz	r3, 8008240 <_dtoa_r+0x7a0>
 80081f8:	9b08      	ldr	r3, [sp, #32]
 80081fa:	2b00      	cmp	r3, #0
 80081fc:	f000 80af 	beq.w	800835e <_dtoa_r+0x8be>
 8008200:	2e00      	cmp	r6, #0
 8008202:	dd13      	ble.n	800822c <_dtoa_r+0x78c>
 8008204:	4639      	mov	r1, r7
 8008206:	4632      	mov	r2, r6
 8008208:	4620      	mov	r0, r4
 800820a:	f001 fa23 	bl	8009654 <__pow5mult>
 800820e:	ee18 2a10 	vmov	r2, s16
 8008212:	4601      	mov	r1, r0
 8008214:	4607      	mov	r7, r0
 8008216:	4620      	mov	r0, r4
 8008218:	f001 f972 	bl	8009500 <__multiply>
 800821c:	ee18 1a10 	vmov	r1, s16
 8008220:	4680      	mov	r8, r0
 8008222:	4620      	mov	r0, r4
 8008224:	f001 f854 	bl	80092d0 <_Bfree>
 8008228:	ee08 8a10 	vmov	s16, r8
 800822c:	9b07      	ldr	r3, [sp, #28]
 800822e:	1b9a      	subs	r2, r3, r6
 8008230:	d006      	beq.n	8008240 <_dtoa_r+0x7a0>
 8008232:	ee18 1a10 	vmov	r1, s16
 8008236:	4620      	mov	r0, r4
 8008238:	f001 fa0c 	bl	8009654 <__pow5mult>
 800823c:	ee08 0a10 	vmov	s16, r0
 8008240:	2101      	movs	r1, #1
 8008242:	4620      	mov	r0, r4
 8008244:	f001 f946 	bl	80094d4 <__i2b>
 8008248:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800824a:	2b00      	cmp	r3, #0
 800824c:	4606      	mov	r6, r0
 800824e:	f340 8088 	ble.w	8008362 <_dtoa_r+0x8c2>
 8008252:	461a      	mov	r2, r3
 8008254:	4601      	mov	r1, r0
 8008256:	4620      	mov	r0, r4
 8008258:	f001 f9fc 	bl	8009654 <__pow5mult>
 800825c:	9b06      	ldr	r3, [sp, #24]
 800825e:	2b01      	cmp	r3, #1
 8008260:	4606      	mov	r6, r0
 8008262:	f340 8081 	ble.w	8008368 <_dtoa_r+0x8c8>
 8008266:	f04f 0800 	mov.w	r8, #0
 800826a:	6933      	ldr	r3, [r6, #16]
 800826c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8008270:	6918      	ldr	r0, [r3, #16]
 8008272:	f001 f8df 	bl	8009434 <__hi0bits>
 8008276:	f1c0 0020 	rsb	r0, r0, #32
 800827a:	9b05      	ldr	r3, [sp, #20]
 800827c:	4418      	add	r0, r3
 800827e:	f010 001f 	ands.w	r0, r0, #31
 8008282:	f000 8092 	beq.w	80083aa <_dtoa_r+0x90a>
 8008286:	f1c0 0320 	rsb	r3, r0, #32
 800828a:	2b04      	cmp	r3, #4
 800828c:	f340 808a 	ble.w	80083a4 <_dtoa_r+0x904>
 8008290:	f1c0 001c 	rsb	r0, r0, #28
 8008294:	9b04      	ldr	r3, [sp, #16]
 8008296:	4403      	add	r3, r0
 8008298:	9304      	str	r3, [sp, #16]
 800829a:	9b05      	ldr	r3, [sp, #20]
 800829c:	4403      	add	r3, r0
 800829e:	4405      	add	r5, r0
 80082a0:	9305      	str	r3, [sp, #20]
 80082a2:	9b04      	ldr	r3, [sp, #16]
 80082a4:	2b00      	cmp	r3, #0
 80082a6:	dd07      	ble.n	80082b8 <_dtoa_r+0x818>
 80082a8:	ee18 1a10 	vmov	r1, s16
 80082ac:	461a      	mov	r2, r3
 80082ae:	4620      	mov	r0, r4
 80082b0:	f001 fa2a 	bl	8009708 <__lshift>
 80082b4:	ee08 0a10 	vmov	s16, r0
 80082b8:	9b05      	ldr	r3, [sp, #20]
 80082ba:	2b00      	cmp	r3, #0
 80082bc:	dd05      	ble.n	80082ca <_dtoa_r+0x82a>
 80082be:	4631      	mov	r1, r6
 80082c0:	461a      	mov	r2, r3
 80082c2:	4620      	mov	r0, r4
 80082c4:	f001 fa20 	bl	8009708 <__lshift>
 80082c8:	4606      	mov	r6, r0
 80082ca:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80082cc:	2b00      	cmp	r3, #0
 80082ce:	d06e      	beq.n	80083ae <_dtoa_r+0x90e>
 80082d0:	ee18 0a10 	vmov	r0, s16
 80082d4:	4631      	mov	r1, r6
 80082d6:	f001 fa87 	bl	80097e8 <__mcmp>
 80082da:	2800      	cmp	r0, #0
 80082dc:	da67      	bge.n	80083ae <_dtoa_r+0x90e>
 80082de:	9b00      	ldr	r3, [sp, #0]
 80082e0:	3b01      	subs	r3, #1
 80082e2:	ee18 1a10 	vmov	r1, s16
 80082e6:	9300      	str	r3, [sp, #0]
 80082e8:	220a      	movs	r2, #10
 80082ea:	2300      	movs	r3, #0
 80082ec:	4620      	mov	r0, r4
 80082ee:	f001 f811 	bl	8009314 <__multadd>
 80082f2:	9b08      	ldr	r3, [sp, #32]
 80082f4:	ee08 0a10 	vmov	s16, r0
 80082f8:	2b00      	cmp	r3, #0
 80082fa:	f000 81b1 	beq.w	8008660 <_dtoa_r+0xbc0>
 80082fe:	2300      	movs	r3, #0
 8008300:	4639      	mov	r1, r7
 8008302:	220a      	movs	r2, #10
 8008304:	4620      	mov	r0, r4
 8008306:	f001 f805 	bl	8009314 <__multadd>
 800830a:	9b02      	ldr	r3, [sp, #8]
 800830c:	2b00      	cmp	r3, #0
 800830e:	4607      	mov	r7, r0
 8008310:	f300 808e 	bgt.w	8008430 <_dtoa_r+0x990>
 8008314:	9b06      	ldr	r3, [sp, #24]
 8008316:	2b02      	cmp	r3, #2
 8008318:	dc51      	bgt.n	80083be <_dtoa_r+0x91e>
 800831a:	e089      	b.n	8008430 <_dtoa_r+0x990>
 800831c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800831e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8008322:	e74b      	b.n	80081bc <_dtoa_r+0x71c>
 8008324:	9b03      	ldr	r3, [sp, #12]
 8008326:	1e5e      	subs	r6, r3, #1
 8008328:	9b07      	ldr	r3, [sp, #28]
 800832a:	42b3      	cmp	r3, r6
 800832c:	bfbf      	itttt	lt
 800832e:	9b07      	ldrlt	r3, [sp, #28]
 8008330:	9607      	strlt	r6, [sp, #28]
 8008332:	1af2      	sublt	r2, r6, r3
 8008334:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8008336:	bfb6      	itet	lt
 8008338:	189b      	addlt	r3, r3, r2
 800833a:	1b9e      	subge	r6, r3, r6
 800833c:	930a      	strlt	r3, [sp, #40]	; 0x28
 800833e:	9b03      	ldr	r3, [sp, #12]
 8008340:	bfb8      	it	lt
 8008342:	2600      	movlt	r6, #0
 8008344:	2b00      	cmp	r3, #0
 8008346:	bfb7      	itett	lt
 8008348:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800834c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8008350:	1a9d      	sublt	r5, r3, r2
 8008352:	2300      	movlt	r3, #0
 8008354:	e734      	b.n	80081c0 <_dtoa_r+0x720>
 8008356:	9e07      	ldr	r6, [sp, #28]
 8008358:	9d04      	ldr	r5, [sp, #16]
 800835a:	9f08      	ldr	r7, [sp, #32]
 800835c:	e73b      	b.n	80081d6 <_dtoa_r+0x736>
 800835e:	9a07      	ldr	r2, [sp, #28]
 8008360:	e767      	b.n	8008232 <_dtoa_r+0x792>
 8008362:	9b06      	ldr	r3, [sp, #24]
 8008364:	2b01      	cmp	r3, #1
 8008366:	dc18      	bgt.n	800839a <_dtoa_r+0x8fa>
 8008368:	f1ba 0f00 	cmp.w	sl, #0
 800836c:	d115      	bne.n	800839a <_dtoa_r+0x8fa>
 800836e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008372:	b993      	cbnz	r3, 800839a <_dtoa_r+0x8fa>
 8008374:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8008378:	0d1b      	lsrs	r3, r3, #20
 800837a:	051b      	lsls	r3, r3, #20
 800837c:	b183      	cbz	r3, 80083a0 <_dtoa_r+0x900>
 800837e:	9b04      	ldr	r3, [sp, #16]
 8008380:	3301      	adds	r3, #1
 8008382:	9304      	str	r3, [sp, #16]
 8008384:	9b05      	ldr	r3, [sp, #20]
 8008386:	3301      	adds	r3, #1
 8008388:	9305      	str	r3, [sp, #20]
 800838a:	f04f 0801 	mov.w	r8, #1
 800838e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008390:	2b00      	cmp	r3, #0
 8008392:	f47f af6a 	bne.w	800826a <_dtoa_r+0x7ca>
 8008396:	2001      	movs	r0, #1
 8008398:	e76f      	b.n	800827a <_dtoa_r+0x7da>
 800839a:	f04f 0800 	mov.w	r8, #0
 800839e:	e7f6      	b.n	800838e <_dtoa_r+0x8ee>
 80083a0:	4698      	mov	r8, r3
 80083a2:	e7f4      	b.n	800838e <_dtoa_r+0x8ee>
 80083a4:	f43f af7d 	beq.w	80082a2 <_dtoa_r+0x802>
 80083a8:	4618      	mov	r0, r3
 80083aa:	301c      	adds	r0, #28
 80083ac:	e772      	b.n	8008294 <_dtoa_r+0x7f4>
 80083ae:	9b03      	ldr	r3, [sp, #12]
 80083b0:	2b00      	cmp	r3, #0
 80083b2:	dc37      	bgt.n	8008424 <_dtoa_r+0x984>
 80083b4:	9b06      	ldr	r3, [sp, #24]
 80083b6:	2b02      	cmp	r3, #2
 80083b8:	dd34      	ble.n	8008424 <_dtoa_r+0x984>
 80083ba:	9b03      	ldr	r3, [sp, #12]
 80083bc:	9302      	str	r3, [sp, #8]
 80083be:	9b02      	ldr	r3, [sp, #8]
 80083c0:	b96b      	cbnz	r3, 80083de <_dtoa_r+0x93e>
 80083c2:	4631      	mov	r1, r6
 80083c4:	2205      	movs	r2, #5
 80083c6:	4620      	mov	r0, r4
 80083c8:	f000 ffa4 	bl	8009314 <__multadd>
 80083cc:	4601      	mov	r1, r0
 80083ce:	4606      	mov	r6, r0
 80083d0:	ee18 0a10 	vmov	r0, s16
 80083d4:	f001 fa08 	bl	80097e8 <__mcmp>
 80083d8:	2800      	cmp	r0, #0
 80083da:	f73f adbb 	bgt.w	8007f54 <_dtoa_r+0x4b4>
 80083de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80083e0:	9d01      	ldr	r5, [sp, #4]
 80083e2:	43db      	mvns	r3, r3
 80083e4:	9300      	str	r3, [sp, #0]
 80083e6:	f04f 0800 	mov.w	r8, #0
 80083ea:	4631      	mov	r1, r6
 80083ec:	4620      	mov	r0, r4
 80083ee:	f000 ff6f 	bl	80092d0 <_Bfree>
 80083f2:	2f00      	cmp	r7, #0
 80083f4:	f43f aea4 	beq.w	8008140 <_dtoa_r+0x6a0>
 80083f8:	f1b8 0f00 	cmp.w	r8, #0
 80083fc:	d005      	beq.n	800840a <_dtoa_r+0x96a>
 80083fe:	45b8      	cmp	r8, r7
 8008400:	d003      	beq.n	800840a <_dtoa_r+0x96a>
 8008402:	4641      	mov	r1, r8
 8008404:	4620      	mov	r0, r4
 8008406:	f000 ff63 	bl	80092d0 <_Bfree>
 800840a:	4639      	mov	r1, r7
 800840c:	4620      	mov	r0, r4
 800840e:	f000 ff5f 	bl	80092d0 <_Bfree>
 8008412:	e695      	b.n	8008140 <_dtoa_r+0x6a0>
 8008414:	2600      	movs	r6, #0
 8008416:	4637      	mov	r7, r6
 8008418:	e7e1      	b.n	80083de <_dtoa_r+0x93e>
 800841a:	9700      	str	r7, [sp, #0]
 800841c:	4637      	mov	r7, r6
 800841e:	e599      	b.n	8007f54 <_dtoa_r+0x4b4>
 8008420:	40240000 	.word	0x40240000
 8008424:	9b08      	ldr	r3, [sp, #32]
 8008426:	2b00      	cmp	r3, #0
 8008428:	f000 80ca 	beq.w	80085c0 <_dtoa_r+0xb20>
 800842c:	9b03      	ldr	r3, [sp, #12]
 800842e:	9302      	str	r3, [sp, #8]
 8008430:	2d00      	cmp	r5, #0
 8008432:	dd05      	ble.n	8008440 <_dtoa_r+0x9a0>
 8008434:	4639      	mov	r1, r7
 8008436:	462a      	mov	r2, r5
 8008438:	4620      	mov	r0, r4
 800843a:	f001 f965 	bl	8009708 <__lshift>
 800843e:	4607      	mov	r7, r0
 8008440:	f1b8 0f00 	cmp.w	r8, #0
 8008444:	d05b      	beq.n	80084fe <_dtoa_r+0xa5e>
 8008446:	6879      	ldr	r1, [r7, #4]
 8008448:	4620      	mov	r0, r4
 800844a:	f000 ff01 	bl	8009250 <_Balloc>
 800844e:	4605      	mov	r5, r0
 8008450:	b928      	cbnz	r0, 800845e <_dtoa_r+0x9be>
 8008452:	4b87      	ldr	r3, [pc, #540]	; (8008670 <_dtoa_r+0xbd0>)
 8008454:	4602      	mov	r2, r0
 8008456:	f240 21ea 	movw	r1, #746	; 0x2ea
 800845a:	f7ff bb3b 	b.w	8007ad4 <_dtoa_r+0x34>
 800845e:	693a      	ldr	r2, [r7, #16]
 8008460:	3202      	adds	r2, #2
 8008462:	0092      	lsls	r2, r2, #2
 8008464:	f107 010c 	add.w	r1, r7, #12
 8008468:	300c      	adds	r0, #12
 800846a:	f000 fee3 	bl	8009234 <memcpy>
 800846e:	2201      	movs	r2, #1
 8008470:	4629      	mov	r1, r5
 8008472:	4620      	mov	r0, r4
 8008474:	f001 f948 	bl	8009708 <__lshift>
 8008478:	9b01      	ldr	r3, [sp, #4]
 800847a:	f103 0901 	add.w	r9, r3, #1
 800847e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8008482:	4413      	add	r3, r2
 8008484:	9305      	str	r3, [sp, #20]
 8008486:	f00a 0301 	and.w	r3, sl, #1
 800848a:	46b8      	mov	r8, r7
 800848c:	9304      	str	r3, [sp, #16]
 800848e:	4607      	mov	r7, r0
 8008490:	4631      	mov	r1, r6
 8008492:	ee18 0a10 	vmov	r0, s16
 8008496:	f7ff fa77 	bl	8007988 <quorem>
 800849a:	4641      	mov	r1, r8
 800849c:	9002      	str	r0, [sp, #8]
 800849e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 80084a2:	ee18 0a10 	vmov	r0, s16
 80084a6:	f001 f99f 	bl	80097e8 <__mcmp>
 80084aa:	463a      	mov	r2, r7
 80084ac:	9003      	str	r0, [sp, #12]
 80084ae:	4631      	mov	r1, r6
 80084b0:	4620      	mov	r0, r4
 80084b2:	f001 f9b5 	bl	8009820 <__mdiff>
 80084b6:	68c2      	ldr	r2, [r0, #12]
 80084b8:	f109 3bff 	add.w	fp, r9, #4294967295
 80084bc:	4605      	mov	r5, r0
 80084be:	bb02      	cbnz	r2, 8008502 <_dtoa_r+0xa62>
 80084c0:	4601      	mov	r1, r0
 80084c2:	ee18 0a10 	vmov	r0, s16
 80084c6:	f001 f98f 	bl	80097e8 <__mcmp>
 80084ca:	4602      	mov	r2, r0
 80084cc:	4629      	mov	r1, r5
 80084ce:	4620      	mov	r0, r4
 80084d0:	9207      	str	r2, [sp, #28]
 80084d2:	f000 fefd 	bl	80092d0 <_Bfree>
 80084d6:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 80084da:	ea43 0102 	orr.w	r1, r3, r2
 80084de:	9b04      	ldr	r3, [sp, #16]
 80084e0:	430b      	orrs	r3, r1
 80084e2:	464d      	mov	r5, r9
 80084e4:	d10f      	bne.n	8008506 <_dtoa_r+0xa66>
 80084e6:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80084ea:	d02a      	beq.n	8008542 <_dtoa_r+0xaa2>
 80084ec:	9b03      	ldr	r3, [sp, #12]
 80084ee:	2b00      	cmp	r3, #0
 80084f0:	dd02      	ble.n	80084f8 <_dtoa_r+0xa58>
 80084f2:	9b02      	ldr	r3, [sp, #8]
 80084f4:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 80084f8:	f88b a000 	strb.w	sl, [fp]
 80084fc:	e775      	b.n	80083ea <_dtoa_r+0x94a>
 80084fe:	4638      	mov	r0, r7
 8008500:	e7ba      	b.n	8008478 <_dtoa_r+0x9d8>
 8008502:	2201      	movs	r2, #1
 8008504:	e7e2      	b.n	80084cc <_dtoa_r+0xa2c>
 8008506:	9b03      	ldr	r3, [sp, #12]
 8008508:	2b00      	cmp	r3, #0
 800850a:	db04      	blt.n	8008516 <_dtoa_r+0xa76>
 800850c:	9906      	ldr	r1, [sp, #24]
 800850e:	430b      	orrs	r3, r1
 8008510:	9904      	ldr	r1, [sp, #16]
 8008512:	430b      	orrs	r3, r1
 8008514:	d122      	bne.n	800855c <_dtoa_r+0xabc>
 8008516:	2a00      	cmp	r2, #0
 8008518:	ddee      	ble.n	80084f8 <_dtoa_r+0xa58>
 800851a:	ee18 1a10 	vmov	r1, s16
 800851e:	2201      	movs	r2, #1
 8008520:	4620      	mov	r0, r4
 8008522:	f001 f8f1 	bl	8009708 <__lshift>
 8008526:	4631      	mov	r1, r6
 8008528:	ee08 0a10 	vmov	s16, r0
 800852c:	f001 f95c 	bl	80097e8 <__mcmp>
 8008530:	2800      	cmp	r0, #0
 8008532:	dc03      	bgt.n	800853c <_dtoa_r+0xa9c>
 8008534:	d1e0      	bne.n	80084f8 <_dtoa_r+0xa58>
 8008536:	f01a 0f01 	tst.w	sl, #1
 800853a:	d0dd      	beq.n	80084f8 <_dtoa_r+0xa58>
 800853c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8008540:	d1d7      	bne.n	80084f2 <_dtoa_r+0xa52>
 8008542:	2339      	movs	r3, #57	; 0x39
 8008544:	f88b 3000 	strb.w	r3, [fp]
 8008548:	462b      	mov	r3, r5
 800854a:	461d      	mov	r5, r3
 800854c:	3b01      	subs	r3, #1
 800854e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8008552:	2a39      	cmp	r2, #57	; 0x39
 8008554:	d071      	beq.n	800863a <_dtoa_r+0xb9a>
 8008556:	3201      	adds	r2, #1
 8008558:	701a      	strb	r2, [r3, #0]
 800855a:	e746      	b.n	80083ea <_dtoa_r+0x94a>
 800855c:	2a00      	cmp	r2, #0
 800855e:	dd07      	ble.n	8008570 <_dtoa_r+0xad0>
 8008560:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8008564:	d0ed      	beq.n	8008542 <_dtoa_r+0xaa2>
 8008566:	f10a 0301 	add.w	r3, sl, #1
 800856a:	f88b 3000 	strb.w	r3, [fp]
 800856e:	e73c      	b.n	80083ea <_dtoa_r+0x94a>
 8008570:	9b05      	ldr	r3, [sp, #20]
 8008572:	f809 ac01 	strb.w	sl, [r9, #-1]
 8008576:	4599      	cmp	r9, r3
 8008578:	d047      	beq.n	800860a <_dtoa_r+0xb6a>
 800857a:	ee18 1a10 	vmov	r1, s16
 800857e:	2300      	movs	r3, #0
 8008580:	220a      	movs	r2, #10
 8008582:	4620      	mov	r0, r4
 8008584:	f000 fec6 	bl	8009314 <__multadd>
 8008588:	45b8      	cmp	r8, r7
 800858a:	ee08 0a10 	vmov	s16, r0
 800858e:	f04f 0300 	mov.w	r3, #0
 8008592:	f04f 020a 	mov.w	r2, #10
 8008596:	4641      	mov	r1, r8
 8008598:	4620      	mov	r0, r4
 800859a:	d106      	bne.n	80085aa <_dtoa_r+0xb0a>
 800859c:	f000 feba 	bl	8009314 <__multadd>
 80085a0:	4680      	mov	r8, r0
 80085a2:	4607      	mov	r7, r0
 80085a4:	f109 0901 	add.w	r9, r9, #1
 80085a8:	e772      	b.n	8008490 <_dtoa_r+0x9f0>
 80085aa:	f000 feb3 	bl	8009314 <__multadd>
 80085ae:	4639      	mov	r1, r7
 80085b0:	4680      	mov	r8, r0
 80085b2:	2300      	movs	r3, #0
 80085b4:	220a      	movs	r2, #10
 80085b6:	4620      	mov	r0, r4
 80085b8:	f000 feac 	bl	8009314 <__multadd>
 80085bc:	4607      	mov	r7, r0
 80085be:	e7f1      	b.n	80085a4 <_dtoa_r+0xb04>
 80085c0:	9b03      	ldr	r3, [sp, #12]
 80085c2:	9302      	str	r3, [sp, #8]
 80085c4:	9d01      	ldr	r5, [sp, #4]
 80085c6:	ee18 0a10 	vmov	r0, s16
 80085ca:	4631      	mov	r1, r6
 80085cc:	f7ff f9dc 	bl	8007988 <quorem>
 80085d0:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 80085d4:	9b01      	ldr	r3, [sp, #4]
 80085d6:	f805 ab01 	strb.w	sl, [r5], #1
 80085da:	1aea      	subs	r2, r5, r3
 80085dc:	9b02      	ldr	r3, [sp, #8]
 80085de:	4293      	cmp	r3, r2
 80085e0:	dd09      	ble.n	80085f6 <_dtoa_r+0xb56>
 80085e2:	ee18 1a10 	vmov	r1, s16
 80085e6:	2300      	movs	r3, #0
 80085e8:	220a      	movs	r2, #10
 80085ea:	4620      	mov	r0, r4
 80085ec:	f000 fe92 	bl	8009314 <__multadd>
 80085f0:	ee08 0a10 	vmov	s16, r0
 80085f4:	e7e7      	b.n	80085c6 <_dtoa_r+0xb26>
 80085f6:	9b02      	ldr	r3, [sp, #8]
 80085f8:	2b00      	cmp	r3, #0
 80085fa:	bfc8      	it	gt
 80085fc:	461d      	movgt	r5, r3
 80085fe:	9b01      	ldr	r3, [sp, #4]
 8008600:	bfd8      	it	le
 8008602:	2501      	movle	r5, #1
 8008604:	441d      	add	r5, r3
 8008606:	f04f 0800 	mov.w	r8, #0
 800860a:	ee18 1a10 	vmov	r1, s16
 800860e:	2201      	movs	r2, #1
 8008610:	4620      	mov	r0, r4
 8008612:	f001 f879 	bl	8009708 <__lshift>
 8008616:	4631      	mov	r1, r6
 8008618:	ee08 0a10 	vmov	s16, r0
 800861c:	f001 f8e4 	bl	80097e8 <__mcmp>
 8008620:	2800      	cmp	r0, #0
 8008622:	dc91      	bgt.n	8008548 <_dtoa_r+0xaa8>
 8008624:	d102      	bne.n	800862c <_dtoa_r+0xb8c>
 8008626:	f01a 0f01 	tst.w	sl, #1
 800862a:	d18d      	bne.n	8008548 <_dtoa_r+0xaa8>
 800862c:	462b      	mov	r3, r5
 800862e:	461d      	mov	r5, r3
 8008630:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008634:	2a30      	cmp	r2, #48	; 0x30
 8008636:	d0fa      	beq.n	800862e <_dtoa_r+0xb8e>
 8008638:	e6d7      	b.n	80083ea <_dtoa_r+0x94a>
 800863a:	9a01      	ldr	r2, [sp, #4]
 800863c:	429a      	cmp	r2, r3
 800863e:	d184      	bne.n	800854a <_dtoa_r+0xaaa>
 8008640:	9b00      	ldr	r3, [sp, #0]
 8008642:	3301      	adds	r3, #1
 8008644:	9300      	str	r3, [sp, #0]
 8008646:	2331      	movs	r3, #49	; 0x31
 8008648:	7013      	strb	r3, [r2, #0]
 800864a:	e6ce      	b.n	80083ea <_dtoa_r+0x94a>
 800864c:	4b09      	ldr	r3, [pc, #36]	; (8008674 <_dtoa_r+0xbd4>)
 800864e:	f7ff ba95 	b.w	8007b7c <_dtoa_r+0xdc>
 8008652:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008654:	2b00      	cmp	r3, #0
 8008656:	f47f aa6e 	bne.w	8007b36 <_dtoa_r+0x96>
 800865a:	4b07      	ldr	r3, [pc, #28]	; (8008678 <_dtoa_r+0xbd8>)
 800865c:	f7ff ba8e 	b.w	8007b7c <_dtoa_r+0xdc>
 8008660:	9b02      	ldr	r3, [sp, #8]
 8008662:	2b00      	cmp	r3, #0
 8008664:	dcae      	bgt.n	80085c4 <_dtoa_r+0xb24>
 8008666:	9b06      	ldr	r3, [sp, #24]
 8008668:	2b02      	cmp	r3, #2
 800866a:	f73f aea8 	bgt.w	80083be <_dtoa_r+0x91e>
 800866e:	e7a9      	b.n	80085c4 <_dtoa_r+0xb24>
 8008670:	0800c0f8 	.word	0x0800c0f8
 8008674:	0800c359 	.word	0x0800c359
 8008678:	0800c079 	.word	0x0800c079

0800867c <__sflush_r>:
 800867c:	898a      	ldrh	r2, [r1, #12]
 800867e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008682:	4605      	mov	r5, r0
 8008684:	0710      	lsls	r0, r2, #28
 8008686:	460c      	mov	r4, r1
 8008688:	d458      	bmi.n	800873c <__sflush_r+0xc0>
 800868a:	684b      	ldr	r3, [r1, #4]
 800868c:	2b00      	cmp	r3, #0
 800868e:	dc05      	bgt.n	800869c <__sflush_r+0x20>
 8008690:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008692:	2b00      	cmp	r3, #0
 8008694:	dc02      	bgt.n	800869c <__sflush_r+0x20>
 8008696:	2000      	movs	r0, #0
 8008698:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800869c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800869e:	2e00      	cmp	r6, #0
 80086a0:	d0f9      	beq.n	8008696 <__sflush_r+0x1a>
 80086a2:	2300      	movs	r3, #0
 80086a4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80086a8:	682f      	ldr	r7, [r5, #0]
 80086aa:	602b      	str	r3, [r5, #0]
 80086ac:	d032      	beq.n	8008714 <__sflush_r+0x98>
 80086ae:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80086b0:	89a3      	ldrh	r3, [r4, #12]
 80086b2:	075a      	lsls	r2, r3, #29
 80086b4:	d505      	bpl.n	80086c2 <__sflush_r+0x46>
 80086b6:	6863      	ldr	r3, [r4, #4]
 80086b8:	1ac0      	subs	r0, r0, r3
 80086ba:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80086bc:	b10b      	cbz	r3, 80086c2 <__sflush_r+0x46>
 80086be:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80086c0:	1ac0      	subs	r0, r0, r3
 80086c2:	2300      	movs	r3, #0
 80086c4:	4602      	mov	r2, r0
 80086c6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80086c8:	6a21      	ldr	r1, [r4, #32]
 80086ca:	4628      	mov	r0, r5
 80086cc:	47b0      	blx	r6
 80086ce:	1c43      	adds	r3, r0, #1
 80086d0:	89a3      	ldrh	r3, [r4, #12]
 80086d2:	d106      	bne.n	80086e2 <__sflush_r+0x66>
 80086d4:	6829      	ldr	r1, [r5, #0]
 80086d6:	291d      	cmp	r1, #29
 80086d8:	d82c      	bhi.n	8008734 <__sflush_r+0xb8>
 80086da:	4a2a      	ldr	r2, [pc, #168]	; (8008784 <__sflush_r+0x108>)
 80086dc:	40ca      	lsrs	r2, r1
 80086de:	07d6      	lsls	r6, r2, #31
 80086e0:	d528      	bpl.n	8008734 <__sflush_r+0xb8>
 80086e2:	2200      	movs	r2, #0
 80086e4:	6062      	str	r2, [r4, #4]
 80086e6:	04d9      	lsls	r1, r3, #19
 80086e8:	6922      	ldr	r2, [r4, #16]
 80086ea:	6022      	str	r2, [r4, #0]
 80086ec:	d504      	bpl.n	80086f8 <__sflush_r+0x7c>
 80086ee:	1c42      	adds	r2, r0, #1
 80086f0:	d101      	bne.n	80086f6 <__sflush_r+0x7a>
 80086f2:	682b      	ldr	r3, [r5, #0]
 80086f4:	b903      	cbnz	r3, 80086f8 <__sflush_r+0x7c>
 80086f6:	6560      	str	r0, [r4, #84]	; 0x54
 80086f8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80086fa:	602f      	str	r7, [r5, #0]
 80086fc:	2900      	cmp	r1, #0
 80086fe:	d0ca      	beq.n	8008696 <__sflush_r+0x1a>
 8008700:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008704:	4299      	cmp	r1, r3
 8008706:	d002      	beq.n	800870e <__sflush_r+0x92>
 8008708:	4628      	mov	r0, r5
 800870a:	f001 fa79 	bl	8009c00 <_free_r>
 800870e:	2000      	movs	r0, #0
 8008710:	6360      	str	r0, [r4, #52]	; 0x34
 8008712:	e7c1      	b.n	8008698 <__sflush_r+0x1c>
 8008714:	6a21      	ldr	r1, [r4, #32]
 8008716:	2301      	movs	r3, #1
 8008718:	4628      	mov	r0, r5
 800871a:	47b0      	blx	r6
 800871c:	1c41      	adds	r1, r0, #1
 800871e:	d1c7      	bne.n	80086b0 <__sflush_r+0x34>
 8008720:	682b      	ldr	r3, [r5, #0]
 8008722:	2b00      	cmp	r3, #0
 8008724:	d0c4      	beq.n	80086b0 <__sflush_r+0x34>
 8008726:	2b1d      	cmp	r3, #29
 8008728:	d001      	beq.n	800872e <__sflush_r+0xb2>
 800872a:	2b16      	cmp	r3, #22
 800872c:	d101      	bne.n	8008732 <__sflush_r+0xb6>
 800872e:	602f      	str	r7, [r5, #0]
 8008730:	e7b1      	b.n	8008696 <__sflush_r+0x1a>
 8008732:	89a3      	ldrh	r3, [r4, #12]
 8008734:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008738:	81a3      	strh	r3, [r4, #12]
 800873a:	e7ad      	b.n	8008698 <__sflush_r+0x1c>
 800873c:	690f      	ldr	r7, [r1, #16]
 800873e:	2f00      	cmp	r7, #0
 8008740:	d0a9      	beq.n	8008696 <__sflush_r+0x1a>
 8008742:	0793      	lsls	r3, r2, #30
 8008744:	680e      	ldr	r6, [r1, #0]
 8008746:	bf08      	it	eq
 8008748:	694b      	ldreq	r3, [r1, #20]
 800874a:	600f      	str	r7, [r1, #0]
 800874c:	bf18      	it	ne
 800874e:	2300      	movne	r3, #0
 8008750:	eba6 0807 	sub.w	r8, r6, r7
 8008754:	608b      	str	r3, [r1, #8]
 8008756:	f1b8 0f00 	cmp.w	r8, #0
 800875a:	dd9c      	ble.n	8008696 <__sflush_r+0x1a>
 800875c:	6a21      	ldr	r1, [r4, #32]
 800875e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008760:	4643      	mov	r3, r8
 8008762:	463a      	mov	r2, r7
 8008764:	4628      	mov	r0, r5
 8008766:	47b0      	blx	r6
 8008768:	2800      	cmp	r0, #0
 800876a:	dc06      	bgt.n	800877a <__sflush_r+0xfe>
 800876c:	89a3      	ldrh	r3, [r4, #12]
 800876e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008772:	81a3      	strh	r3, [r4, #12]
 8008774:	f04f 30ff 	mov.w	r0, #4294967295
 8008778:	e78e      	b.n	8008698 <__sflush_r+0x1c>
 800877a:	4407      	add	r7, r0
 800877c:	eba8 0800 	sub.w	r8, r8, r0
 8008780:	e7e9      	b.n	8008756 <__sflush_r+0xda>
 8008782:	bf00      	nop
 8008784:	20400001 	.word	0x20400001

08008788 <_fflush_r>:
 8008788:	b538      	push	{r3, r4, r5, lr}
 800878a:	690b      	ldr	r3, [r1, #16]
 800878c:	4605      	mov	r5, r0
 800878e:	460c      	mov	r4, r1
 8008790:	b913      	cbnz	r3, 8008798 <_fflush_r+0x10>
 8008792:	2500      	movs	r5, #0
 8008794:	4628      	mov	r0, r5
 8008796:	bd38      	pop	{r3, r4, r5, pc}
 8008798:	b118      	cbz	r0, 80087a2 <_fflush_r+0x1a>
 800879a:	6983      	ldr	r3, [r0, #24]
 800879c:	b90b      	cbnz	r3, 80087a2 <_fflush_r+0x1a>
 800879e:	f000 f899 	bl	80088d4 <__sinit>
 80087a2:	4b14      	ldr	r3, [pc, #80]	; (80087f4 <_fflush_r+0x6c>)
 80087a4:	429c      	cmp	r4, r3
 80087a6:	d11b      	bne.n	80087e0 <_fflush_r+0x58>
 80087a8:	686c      	ldr	r4, [r5, #4]
 80087aa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80087ae:	2b00      	cmp	r3, #0
 80087b0:	d0ef      	beq.n	8008792 <_fflush_r+0xa>
 80087b2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80087b4:	07d0      	lsls	r0, r2, #31
 80087b6:	d404      	bmi.n	80087c2 <_fflush_r+0x3a>
 80087b8:	0599      	lsls	r1, r3, #22
 80087ba:	d402      	bmi.n	80087c2 <_fflush_r+0x3a>
 80087bc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80087be:	f000 fcb8 	bl	8009132 <__retarget_lock_acquire_recursive>
 80087c2:	4628      	mov	r0, r5
 80087c4:	4621      	mov	r1, r4
 80087c6:	f7ff ff59 	bl	800867c <__sflush_r>
 80087ca:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80087cc:	07da      	lsls	r2, r3, #31
 80087ce:	4605      	mov	r5, r0
 80087d0:	d4e0      	bmi.n	8008794 <_fflush_r+0xc>
 80087d2:	89a3      	ldrh	r3, [r4, #12]
 80087d4:	059b      	lsls	r3, r3, #22
 80087d6:	d4dd      	bmi.n	8008794 <_fflush_r+0xc>
 80087d8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80087da:	f000 fcab 	bl	8009134 <__retarget_lock_release_recursive>
 80087de:	e7d9      	b.n	8008794 <_fflush_r+0xc>
 80087e0:	4b05      	ldr	r3, [pc, #20]	; (80087f8 <_fflush_r+0x70>)
 80087e2:	429c      	cmp	r4, r3
 80087e4:	d101      	bne.n	80087ea <_fflush_r+0x62>
 80087e6:	68ac      	ldr	r4, [r5, #8]
 80087e8:	e7df      	b.n	80087aa <_fflush_r+0x22>
 80087ea:	4b04      	ldr	r3, [pc, #16]	; (80087fc <_fflush_r+0x74>)
 80087ec:	429c      	cmp	r4, r3
 80087ee:	bf08      	it	eq
 80087f0:	68ec      	ldreq	r4, [r5, #12]
 80087f2:	e7da      	b.n	80087aa <_fflush_r+0x22>
 80087f4:	0800c12c 	.word	0x0800c12c
 80087f8:	0800c14c 	.word	0x0800c14c
 80087fc:	0800c10c 	.word	0x0800c10c

08008800 <fflush>:
 8008800:	4601      	mov	r1, r0
 8008802:	b920      	cbnz	r0, 800880e <fflush+0xe>
 8008804:	4b04      	ldr	r3, [pc, #16]	; (8008818 <fflush+0x18>)
 8008806:	4905      	ldr	r1, [pc, #20]	; (800881c <fflush+0x1c>)
 8008808:	6818      	ldr	r0, [r3, #0]
 800880a:	f000 b8fe 	b.w	8008a0a <_fwalk_reent>
 800880e:	4b04      	ldr	r3, [pc, #16]	; (8008820 <fflush+0x20>)
 8008810:	6818      	ldr	r0, [r3, #0]
 8008812:	f7ff bfb9 	b.w	8008788 <_fflush_r>
 8008816:	bf00      	nop
 8008818:	0800bee8 	.word	0x0800bee8
 800881c:	08008789 	.word	0x08008789
 8008820:	2000000c 	.word	0x2000000c

08008824 <std>:
 8008824:	2300      	movs	r3, #0
 8008826:	b510      	push	{r4, lr}
 8008828:	4604      	mov	r4, r0
 800882a:	e9c0 3300 	strd	r3, r3, [r0]
 800882e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008832:	6083      	str	r3, [r0, #8]
 8008834:	8181      	strh	r1, [r0, #12]
 8008836:	6643      	str	r3, [r0, #100]	; 0x64
 8008838:	81c2      	strh	r2, [r0, #14]
 800883a:	6183      	str	r3, [r0, #24]
 800883c:	4619      	mov	r1, r3
 800883e:	2208      	movs	r2, #8
 8008840:	305c      	adds	r0, #92	; 0x5c
 8008842:	f7fd f9b1 	bl	8005ba8 <memset>
 8008846:	4b05      	ldr	r3, [pc, #20]	; (800885c <std+0x38>)
 8008848:	6263      	str	r3, [r4, #36]	; 0x24
 800884a:	4b05      	ldr	r3, [pc, #20]	; (8008860 <std+0x3c>)
 800884c:	62a3      	str	r3, [r4, #40]	; 0x28
 800884e:	4b05      	ldr	r3, [pc, #20]	; (8008864 <std+0x40>)
 8008850:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008852:	4b05      	ldr	r3, [pc, #20]	; (8008868 <std+0x44>)
 8008854:	6224      	str	r4, [r4, #32]
 8008856:	6323      	str	r3, [r4, #48]	; 0x30
 8008858:	bd10      	pop	{r4, pc}
 800885a:	bf00      	nop
 800885c:	0800ab39 	.word	0x0800ab39
 8008860:	0800ab5b 	.word	0x0800ab5b
 8008864:	0800ab93 	.word	0x0800ab93
 8008868:	0800abb7 	.word	0x0800abb7

0800886c <_cleanup_r>:
 800886c:	4901      	ldr	r1, [pc, #4]	; (8008874 <_cleanup_r+0x8>)
 800886e:	f000 b8cc 	b.w	8008a0a <_fwalk_reent>
 8008872:	bf00      	nop
 8008874:	08008789 	.word	0x08008789

08008878 <__sfmoreglue>:
 8008878:	b570      	push	{r4, r5, r6, lr}
 800887a:	2268      	movs	r2, #104	; 0x68
 800887c:	1e4d      	subs	r5, r1, #1
 800887e:	4355      	muls	r5, r2
 8008880:	460e      	mov	r6, r1
 8008882:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8008886:	f001 fa27 	bl	8009cd8 <_malloc_r>
 800888a:	4604      	mov	r4, r0
 800888c:	b140      	cbz	r0, 80088a0 <__sfmoreglue+0x28>
 800888e:	2100      	movs	r1, #0
 8008890:	e9c0 1600 	strd	r1, r6, [r0]
 8008894:	300c      	adds	r0, #12
 8008896:	60a0      	str	r0, [r4, #8]
 8008898:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800889c:	f7fd f984 	bl	8005ba8 <memset>
 80088a0:	4620      	mov	r0, r4
 80088a2:	bd70      	pop	{r4, r5, r6, pc}

080088a4 <__sfp_lock_acquire>:
 80088a4:	4801      	ldr	r0, [pc, #4]	; (80088ac <__sfp_lock_acquire+0x8>)
 80088a6:	f000 bc44 	b.w	8009132 <__retarget_lock_acquire_recursive>
 80088aa:	bf00      	nop
 80088ac:	20000339 	.word	0x20000339

080088b0 <__sfp_lock_release>:
 80088b0:	4801      	ldr	r0, [pc, #4]	; (80088b8 <__sfp_lock_release+0x8>)
 80088b2:	f000 bc3f 	b.w	8009134 <__retarget_lock_release_recursive>
 80088b6:	bf00      	nop
 80088b8:	20000339 	.word	0x20000339

080088bc <__sinit_lock_acquire>:
 80088bc:	4801      	ldr	r0, [pc, #4]	; (80088c4 <__sinit_lock_acquire+0x8>)
 80088be:	f000 bc38 	b.w	8009132 <__retarget_lock_acquire_recursive>
 80088c2:	bf00      	nop
 80088c4:	2000033a 	.word	0x2000033a

080088c8 <__sinit_lock_release>:
 80088c8:	4801      	ldr	r0, [pc, #4]	; (80088d0 <__sinit_lock_release+0x8>)
 80088ca:	f000 bc33 	b.w	8009134 <__retarget_lock_release_recursive>
 80088ce:	bf00      	nop
 80088d0:	2000033a 	.word	0x2000033a

080088d4 <__sinit>:
 80088d4:	b510      	push	{r4, lr}
 80088d6:	4604      	mov	r4, r0
 80088d8:	f7ff fff0 	bl	80088bc <__sinit_lock_acquire>
 80088dc:	69a3      	ldr	r3, [r4, #24]
 80088de:	b11b      	cbz	r3, 80088e8 <__sinit+0x14>
 80088e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80088e4:	f7ff bff0 	b.w	80088c8 <__sinit_lock_release>
 80088e8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80088ec:	6523      	str	r3, [r4, #80]	; 0x50
 80088ee:	4b13      	ldr	r3, [pc, #76]	; (800893c <__sinit+0x68>)
 80088f0:	4a13      	ldr	r2, [pc, #76]	; (8008940 <__sinit+0x6c>)
 80088f2:	681b      	ldr	r3, [r3, #0]
 80088f4:	62a2      	str	r2, [r4, #40]	; 0x28
 80088f6:	42a3      	cmp	r3, r4
 80088f8:	bf04      	itt	eq
 80088fa:	2301      	moveq	r3, #1
 80088fc:	61a3      	streq	r3, [r4, #24]
 80088fe:	4620      	mov	r0, r4
 8008900:	f000 f820 	bl	8008944 <__sfp>
 8008904:	6060      	str	r0, [r4, #4]
 8008906:	4620      	mov	r0, r4
 8008908:	f000 f81c 	bl	8008944 <__sfp>
 800890c:	60a0      	str	r0, [r4, #8]
 800890e:	4620      	mov	r0, r4
 8008910:	f000 f818 	bl	8008944 <__sfp>
 8008914:	2200      	movs	r2, #0
 8008916:	60e0      	str	r0, [r4, #12]
 8008918:	2104      	movs	r1, #4
 800891a:	6860      	ldr	r0, [r4, #4]
 800891c:	f7ff ff82 	bl	8008824 <std>
 8008920:	68a0      	ldr	r0, [r4, #8]
 8008922:	2201      	movs	r2, #1
 8008924:	2109      	movs	r1, #9
 8008926:	f7ff ff7d 	bl	8008824 <std>
 800892a:	68e0      	ldr	r0, [r4, #12]
 800892c:	2202      	movs	r2, #2
 800892e:	2112      	movs	r1, #18
 8008930:	f7ff ff78 	bl	8008824 <std>
 8008934:	2301      	movs	r3, #1
 8008936:	61a3      	str	r3, [r4, #24]
 8008938:	e7d2      	b.n	80088e0 <__sinit+0xc>
 800893a:	bf00      	nop
 800893c:	0800bee8 	.word	0x0800bee8
 8008940:	0800886d 	.word	0x0800886d

08008944 <__sfp>:
 8008944:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008946:	4607      	mov	r7, r0
 8008948:	f7ff ffac 	bl	80088a4 <__sfp_lock_acquire>
 800894c:	4b1e      	ldr	r3, [pc, #120]	; (80089c8 <__sfp+0x84>)
 800894e:	681e      	ldr	r6, [r3, #0]
 8008950:	69b3      	ldr	r3, [r6, #24]
 8008952:	b913      	cbnz	r3, 800895a <__sfp+0x16>
 8008954:	4630      	mov	r0, r6
 8008956:	f7ff ffbd 	bl	80088d4 <__sinit>
 800895a:	3648      	adds	r6, #72	; 0x48
 800895c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8008960:	3b01      	subs	r3, #1
 8008962:	d503      	bpl.n	800896c <__sfp+0x28>
 8008964:	6833      	ldr	r3, [r6, #0]
 8008966:	b30b      	cbz	r3, 80089ac <__sfp+0x68>
 8008968:	6836      	ldr	r6, [r6, #0]
 800896a:	e7f7      	b.n	800895c <__sfp+0x18>
 800896c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8008970:	b9d5      	cbnz	r5, 80089a8 <__sfp+0x64>
 8008972:	4b16      	ldr	r3, [pc, #88]	; (80089cc <__sfp+0x88>)
 8008974:	60e3      	str	r3, [r4, #12]
 8008976:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800897a:	6665      	str	r5, [r4, #100]	; 0x64
 800897c:	f000 fbd8 	bl	8009130 <__retarget_lock_init_recursive>
 8008980:	f7ff ff96 	bl	80088b0 <__sfp_lock_release>
 8008984:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8008988:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800898c:	6025      	str	r5, [r4, #0]
 800898e:	61a5      	str	r5, [r4, #24]
 8008990:	2208      	movs	r2, #8
 8008992:	4629      	mov	r1, r5
 8008994:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8008998:	f7fd f906 	bl	8005ba8 <memset>
 800899c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80089a0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80089a4:	4620      	mov	r0, r4
 80089a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80089a8:	3468      	adds	r4, #104	; 0x68
 80089aa:	e7d9      	b.n	8008960 <__sfp+0x1c>
 80089ac:	2104      	movs	r1, #4
 80089ae:	4638      	mov	r0, r7
 80089b0:	f7ff ff62 	bl	8008878 <__sfmoreglue>
 80089b4:	4604      	mov	r4, r0
 80089b6:	6030      	str	r0, [r6, #0]
 80089b8:	2800      	cmp	r0, #0
 80089ba:	d1d5      	bne.n	8008968 <__sfp+0x24>
 80089bc:	f7ff ff78 	bl	80088b0 <__sfp_lock_release>
 80089c0:	230c      	movs	r3, #12
 80089c2:	603b      	str	r3, [r7, #0]
 80089c4:	e7ee      	b.n	80089a4 <__sfp+0x60>
 80089c6:	bf00      	nop
 80089c8:	0800bee8 	.word	0x0800bee8
 80089cc:	ffff0001 	.word	0xffff0001

080089d0 <_fwalk>:
 80089d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80089d4:	460f      	mov	r7, r1
 80089d6:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80089da:	2600      	movs	r6, #0
 80089dc:	e9d4 8501 	ldrd	r8, r5, [r4, #4]
 80089e0:	f1b8 0801 	subs.w	r8, r8, #1
 80089e4:	d505      	bpl.n	80089f2 <_fwalk+0x22>
 80089e6:	6824      	ldr	r4, [r4, #0]
 80089e8:	2c00      	cmp	r4, #0
 80089ea:	d1f7      	bne.n	80089dc <_fwalk+0xc>
 80089ec:	4630      	mov	r0, r6
 80089ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80089f2:	89ab      	ldrh	r3, [r5, #12]
 80089f4:	2b01      	cmp	r3, #1
 80089f6:	d906      	bls.n	8008a06 <_fwalk+0x36>
 80089f8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80089fc:	3301      	adds	r3, #1
 80089fe:	d002      	beq.n	8008a06 <_fwalk+0x36>
 8008a00:	4628      	mov	r0, r5
 8008a02:	47b8      	blx	r7
 8008a04:	4306      	orrs	r6, r0
 8008a06:	3568      	adds	r5, #104	; 0x68
 8008a08:	e7ea      	b.n	80089e0 <_fwalk+0x10>

08008a0a <_fwalk_reent>:
 8008a0a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008a0e:	4606      	mov	r6, r0
 8008a10:	4688      	mov	r8, r1
 8008a12:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8008a16:	2700      	movs	r7, #0
 8008a18:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008a1c:	f1b9 0901 	subs.w	r9, r9, #1
 8008a20:	d505      	bpl.n	8008a2e <_fwalk_reent+0x24>
 8008a22:	6824      	ldr	r4, [r4, #0]
 8008a24:	2c00      	cmp	r4, #0
 8008a26:	d1f7      	bne.n	8008a18 <_fwalk_reent+0xe>
 8008a28:	4638      	mov	r0, r7
 8008a2a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008a2e:	89ab      	ldrh	r3, [r5, #12]
 8008a30:	2b01      	cmp	r3, #1
 8008a32:	d907      	bls.n	8008a44 <_fwalk_reent+0x3a>
 8008a34:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008a38:	3301      	adds	r3, #1
 8008a3a:	d003      	beq.n	8008a44 <_fwalk_reent+0x3a>
 8008a3c:	4629      	mov	r1, r5
 8008a3e:	4630      	mov	r0, r6
 8008a40:	47c0      	blx	r8
 8008a42:	4307      	orrs	r7, r0
 8008a44:	3568      	adds	r5, #104	; 0x68
 8008a46:	e7e9      	b.n	8008a1c <_fwalk_reent+0x12>

08008a48 <rshift>:
 8008a48:	6903      	ldr	r3, [r0, #16]
 8008a4a:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8008a4e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008a52:	ea4f 1261 	mov.w	r2, r1, asr #5
 8008a56:	f100 0414 	add.w	r4, r0, #20
 8008a5a:	dd45      	ble.n	8008ae8 <rshift+0xa0>
 8008a5c:	f011 011f 	ands.w	r1, r1, #31
 8008a60:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8008a64:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8008a68:	d10c      	bne.n	8008a84 <rshift+0x3c>
 8008a6a:	f100 0710 	add.w	r7, r0, #16
 8008a6e:	4629      	mov	r1, r5
 8008a70:	42b1      	cmp	r1, r6
 8008a72:	d334      	bcc.n	8008ade <rshift+0x96>
 8008a74:	1a9b      	subs	r3, r3, r2
 8008a76:	009b      	lsls	r3, r3, #2
 8008a78:	1eea      	subs	r2, r5, #3
 8008a7a:	4296      	cmp	r6, r2
 8008a7c:	bf38      	it	cc
 8008a7e:	2300      	movcc	r3, #0
 8008a80:	4423      	add	r3, r4
 8008a82:	e015      	b.n	8008ab0 <rshift+0x68>
 8008a84:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8008a88:	f1c1 0820 	rsb	r8, r1, #32
 8008a8c:	40cf      	lsrs	r7, r1
 8008a8e:	f105 0e04 	add.w	lr, r5, #4
 8008a92:	46a1      	mov	r9, r4
 8008a94:	4576      	cmp	r6, lr
 8008a96:	46f4      	mov	ip, lr
 8008a98:	d815      	bhi.n	8008ac6 <rshift+0x7e>
 8008a9a:	1a9a      	subs	r2, r3, r2
 8008a9c:	0092      	lsls	r2, r2, #2
 8008a9e:	3a04      	subs	r2, #4
 8008aa0:	3501      	adds	r5, #1
 8008aa2:	42ae      	cmp	r6, r5
 8008aa4:	bf38      	it	cc
 8008aa6:	2200      	movcc	r2, #0
 8008aa8:	18a3      	adds	r3, r4, r2
 8008aaa:	50a7      	str	r7, [r4, r2]
 8008aac:	b107      	cbz	r7, 8008ab0 <rshift+0x68>
 8008aae:	3304      	adds	r3, #4
 8008ab0:	1b1a      	subs	r2, r3, r4
 8008ab2:	42a3      	cmp	r3, r4
 8008ab4:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8008ab8:	bf08      	it	eq
 8008aba:	2300      	moveq	r3, #0
 8008abc:	6102      	str	r2, [r0, #16]
 8008abe:	bf08      	it	eq
 8008ac0:	6143      	streq	r3, [r0, #20]
 8008ac2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008ac6:	f8dc c000 	ldr.w	ip, [ip]
 8008aca:	fa0c fc08 	lsl.w	ip, ip, r8
 8008ace:	ea4c 0707 	orr.w	r7, ip, r7
 8008ad2:	f849 7b04 	str.w	r7, [r9], #4
 8008ad6:	f85e 7b04 	ldr.w	r7, [lr], #4
 8008ada:	40cf      	lsrs	r7, r1
 8008adc:	e7da      	b.n	8008a94 <rshift+0x4c>
 8008ade:	f851 cb04 	ldr.w	ip, [r1], #4
 8008ae2:	f847 cf04 	str.w	ip, [r7, #4]!
 8008ae6:	e7c3      	b.n	8008a70 <rshift+0x28>
 8008ae8:	4623      	mov	r3, r4
 8008aea:	e7e1      	b.n	8008ab0 <rshift+0x68>

08008aec <__hexdig_fun>:
 8008aec:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8008af0:	2b09      	cmp	r3, #9
 8008af2:	d802      	bhi.n	8008afa <__hexdig_fun+0xe>
 8008af4:	3820      	subs	r0, #32
 8008af6:	b2c0      	uxtb	r0, r0
 8008af8:	4770      	bx	lr
 8008afa:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8008afe:	2b05      	cmp	r3, #5
 8008b00:	d801      	bhi.n	8008b06 <__hexdig_fun+0x1a>
 8008b02:	3847      	subs	r0, #71	; 0x47
 8008b04:	e7f7      	b.n	8008af6 <__hexdig_fun+0xa>
 8008b06:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8008b0a:	2b05      	cmp	r3, #5
 8008b0c:	d801      	bhi.n	8008b12 <__hexdig_fun+0x26>
 8008b0e:	3827      	subs	r0, #39	; 0x27
 8008b10:	e7f1      	b.n	8008af6 <__hexdig_fun+0xa>
 8008b12:	2000      	movs	r0, #0
 8008b14:	4770      	bx	lr
	...

08008b18 <__gethex>:
 8008b18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008b1c:	ed2d 8b02 	vpush	{d8}
 8008b20:	b089      	sub	sp, #36	; 0x24
 8008b22:	ee08 0a10 	vmov	s16, r0
 8008b26:	9304      	str	r3, [sp, #16]
 8008b28:	4bb4      	ldr	r3, [pc, #720]	; (8008dfc <__gethex+0x2e4>)
 8008b2a:	681b      	ldr	r3, [r3, #0]
 8008b2c:	9301      	str	r3, [sp, #4]
 8008b2e:	4618      	mov	r0, r3
 8008b30:	468b      	mov	fp, r1
 8008b32:	4690      	mov	r8, r2
 8008b34:	f7f7 fb4c 	bl	80001d0 <strlen>
 8008b38:	9b01      	ldr	r3, [sp, #4]
 8008b3a:	f8db 2000 	ldr.w	r2, [fp]
 8008b3e:	4403      	add	r3, r0
 8008b40:	4682      	mov	sl, r0
 8008b42:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8008b46:	9305      	str	r3, [sp, #20]
 8008b48:	1c93      	adds	r3, r2, #2
 8008b4a:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8008b4e:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8008b52:	32fe      	adds	r2, #254	; 0xfe
 8008b54:	18d1      	adds	r1, r2, r3
 8008b56:	461f      	mov	r7, r3
 8008b58:	f813 0b01 	ldrb.w	r0, [r3], #1
 8008b5c:	9100      	str	r1, [sp, #0]
 8008b5e:	2830      	cmp	r0, #48	; 0x30
 8008b60:	d0f8      	beq.n	8008b54 <__gethex+0x3c>
 8008b62:	f7ff ffc3 	bl	8008aec <__hexdig_fun>
 8008b66:	4604      	mov	r4, r0
 8008b68:	2800      	cmp	r0, #0
 8008b6a:	d13a      	bne.n	8008be2 <__gethex+0xca>
 8008b6c:	9901      	ldr	r1, [sp, #4]
 8008b6e:	4652      	mov	r2, sl
 8008b70:	4638      	mov	r0, r7
 8008b72:	f002 f824 	bl	800abbe <strncmp>
 8008b76:	4605      	mov	r5, r0
 8008b78:	2800      	cmp	r0, #0
 8008b7a:	d168      	bne.n	8008c4e <__gethex+0x136>
 8008b7c:	f817 000a 	ldrb.w	r0, [r7, sl]
 8008b80:	eb07 060a 	add.w	r6, r7, sl
 8008b84:	f7ff ffb2 	bl	8008aec <__hexdig_fun>
 8008b88:	2800      	cmp	r0, #0
 8008b8a:	d062      	beq.n	8008c52 <__gethex+0x13a>
 8008b8c:	4633      	mov	r3, r6
 8008b8e:	7818      	ldrb	r0, [r3, #0]
 8008b90:	2830      	cmp	r0, #48	; 0x30
 8008b92:	461f      	mov	r7, r3
 8008b94:	f103 0301 	add.w	r3, r3, #1
 8008b98:	d0f9      	beq.n	8008b8e <__gethex+0x76>
 8008b9a:	f7ff ffa7 	bl	8008aec <__hexdig_fun>
 8008b9e:	2301      	movs	r3, #1
 8008ba0:	fab0 f480 	clz	r4, r0
 8008ba4:	0964      	lsrs	r4, r4, #5
 8008ba6:	4635      	mov	r5, r6
 8008ba8:	9300      	str	r3, [sp, #0]
 8008baa:	463a      	mov	r2, r7
 8008bac:	4616      	mov	r6, r2
 8008bae:	3201      	adds	r2, #1
 8008bb0:	7830      	ldrb	r0, [r6, #0]
 8008bb2:	f7ff ff9b 	bl	8008aec <__hexdig_fun>
 8008bb6:	2800      	cmp	r0, #0
 8008bb8:	d1f8      	bne.n	8008bac <__gethex+0x94>
 8008bba:	9901      	ldr	r1, [sp, #4]
 8008bbc:	4652      	mov	r2, sl
 8008bbe:	4630      	mov	r0, r6
 8008bc0:	f001 fffd 	bl	800abbe <strncmp>
 8008bc4:	b980      	cbnz	r0, 8008be8 <__gethex+0xd0>
 8008bc6:	b94d      	cbnz	r5, 8008bdc <__gethex+0xc4>
 8008bc8:	eb06 050a 	add.w	r5, r6, sl
 8008bcc:	462a      	mov	r2, r5
 8008bce:	4616      	mov	r6, r2
 8008bd0:	3201      	adds	r2, #1
 8008bd2:	7830      	ldrb	r0, [r6, #0]
 8008bd4:	f7ff ff8a 	bl	8008aec <__hexdig_fun>
 8008bd8:	2800      	cmp	r0, #0
 8008bda:	d1f8      	bne.n	8008bce <__gethex+0xb6>
 8008bdc:	1bad      	subs	r5, r5, r6
 8008bde:	00ad      	lsls	r5, r5, #2
 8008be0:	e004      	b.n	8008bec <__gethex+0xd4>
 8008be2:	2400      	movs	r4, #0
 8008be4:	4625      	mov	r5, r4
 8008be6:	e7e0      	b.n	8008baa <__gethex+0x92>
 8008be8:	2d00      	cmp	r5, #0
 8008bea:	d1f7      	bne.n	8008bdc <__gethex+0xc4>
 8008bec:	7833      	ldrb	r3, [r6, #0]
 8008bee:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8008bf2:	2b50      	cmp	r3, #80	; 0x50
 8008bf4:	d13b      	bne.n	8008c6e <__gethex+0x156>
 8008bf6:	7873      	ldrb	r3, [r6, #1]
 8008bf8:	2b2b      	cmp	r3, #43	; 0x2b
 8008bfa:	d02c      	beq.n	8008c56 <__gethex+0x13e>
 8008bfc:	2b2d      	cmp	r3, #45	; 0x2d
 8008bfe:	d02e      	beq.n	8008c5e <__gethex+0x146>
 8008c00:	1c71      	adds	r1, r6, #1
 8008c02:	f04f 0900 	mov.w	r9, #0
 8008c06:	7808      	ldrb	r0, [r1, #0]
 8008c08:	f7ff ff70 	bl	8008aec <__hexdig_fun>
 8008c0c:	1e43      	subs	r3, r0, #1
 8008c0e:	b2db      	uxtb	r3, r3
 8008c10:	2b18      	cmp	r3, #24
 8008c12:	d82c      	bhi.n	8008c6e <__gethex+0x156>
 8008c14:	f1a0 0210 	sub.w	r2, r0, #16
 8008c18:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8008c1c:	f7ff ff66 	bl	8008aec <__hexdig_fun>
 8008c20:	1e43      	subs	r3, r0, #1
 8008c22:	b2db      	uxtb	r3, r3
 8008c24:	2b18      	cmp	r3, #24
 8008c26:	d91d      	bls.n	8008c64 <__gethex+0x14c>
 8008c28:	f1b9 0f00 	cmp.w	r9, #0
 8008c2c:	d000      	beq.n	8008c30 <__gethex+0x118>
 8008c2e:	4252      	negs	r2, r2
 8008c30:	4415      	add	r5, r2
 8008c32:	f8cb 1000 	str.w	r1, [fp]
 8008c36:	b1e4      	cbz	r4, 8008c72 <__gethex+0x15a>
 8008c38:	9b00      	ldr	r3, [sp, #0]
 8008c3a:	2b00      	cmp	r3, #0
 8008c3c:	bf14      	ite	ne
 8008c3e:	2700      	movne	r7, #0
 8008c40:	2706      	moveq	r7, #6
 8008c42:	4638      	mov	r0, r7
 8008c44:	b009      	add	sp, #36	; 0x24
 8008c46:	ecbd 8b02 	vpop	{d8}
 8008c4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008c4e:	463e      	mov	r6, r7
 8008c50:	4625      	mov	r5, r4
 8008c52:	2401      	movs	r4, #1
 8008c54:	e7ca      	b.n	8008bec <__gethex+0xd4>
 8008c56:	f04f 0900 	mov.w	r9, #0
 8008c5a:	1cb1      	adds	r1, r6, #2
 8008c5c:	e7d3      	b.n	8008c06 <__gethex+0xee>
 8008c5e:	f04f 0901 	mov.w	r9, #1
 8008c62:	e7fa      	b.n	8008c5a <__gethex+0x142>
 8008c64:	230a      	movs	r3, #10
 8008c66:	fb03 0202 	mla	r2, r3, r2, r0
 8008c6a:	3a10      	subs	r2, #16
 8008c6c:	e7d4      	b.n	8008c18 <__gethex+0x100>
 8008c6e:	4631      	mov	r1, r6
 8008c70:	e7df      	b.n	8008c32 <__gethex+0x11a>
 8008c72:	1bf3      	subs	r3, r6, r7
 8008c74:	3b01      	subs	r3, #1
 8008c76:	4621      	mov	r1, r4
 8008c78:	2b07      	cmp	r3, #7
 8008c7a:	dc0b      	bgt.n	8008c94 <__gethex+0x17c>
 8008c7c:	ee18 0a10 	vmov	r0, s16
 8008c80:	f000 fae6 	bl	8009250 <_Balloc>
 8008c84:	4604      	mov	r4, r0
 8008c86:	b940      	cbnz	r0, 8008c9a <__gethex+0x182>
 8008c88:	4b5d      	ldr	r3, [pc, #372]	; (8008e00 <__gethex+0x2e8>)
 8008c8a:	4602      	mov	r2, r0
 8008c8c:	21de      	movs	r1, #222	; 0xde
 8008c8e:	485d      	ldr	r0, [pc, #372]	; (8008e04 <__gethex+0x2ec>)
 8008c90:	f002 f910 	bl	800aeb4 <__assert_func>
 8008c94:	3101      	adds	r1, #1
 8008c96:	105b      	asrs	r3, r3, #1
 8008c98:	e7ee      	b.n	8008c78 <__gethex+0x160>
 8008c9a:	f100 0914 	add.w	r9, r0, #20
 8008c9e:	f04f 0b00 	mov.w	fp, #0
 8008ca2:	f1ca 0301 	rsb	r3, sl, #1
 8008ca6:	f8cd 9008 	str.w	r9, [sp, #8]
 8008caa:	f8cd b000 	str.w	fp, [sp]
 8008cae:	9306      	str	r3, [sp, #24]
 8008cb0:	42b7      	cmp	r7, r6
 8008cb2:	d340      	bcc.n	8008d36 <__gethex+0x21e>
 8008cb4:	9802      	ldr	r0, [sp, #8]
 8008cb6:	9b00      	ldr	r3, [sp, #0]
 8008cb8:	f840 3b04 	str.w	r3, [r0], #4
 8008cbc:	eba0 0009 	sub.w	r0, r0, r9
 8008cc0:	1080      	asrs	r0, r0, #2
 8008cc2:	0146      	lsls	r6, r0, #5
 8008cc4:	6120      	str	r0, [r4, #16]
 8008cc6:	4618      	mov	r0, r3
 8008cc8:	f000 fbb4 	bl	8009434 <__hi0bits>
 8008ccc:	1a30      	subs	r0, r6, r0
 8008cce:	f8d8 6000 	ldr.w	r6, [r8]
 8008cd2:	42b0      	cmp	r0, r6
 8008cd4:	dd63      	ble.n	8008d9e <__gethex+0x286>
 8008cd6:	1b87      	subs	r7, r0, r6
 8008cd8:	4639      	mov	r1, r7
 8008cda:	4620      	mov	r0, r4
 8008cdc:	f000 ff58 	bl	8009b90 <__any_on>
 8008ce0:	4682      	mov	sl, r0
 8008ce2:	b1a8      	cbz	r0, 8008d10 <__gethex+0x1f8>
 8008ce4:	1e7b      	subs	r3, r7, #1
 8008ce6:	1159      	asrs	r1, r3, #5
 8008ce8:	f003 021f 	and.w	r2, r3, #31
 8008cec:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8008cf0:	f04f 0a01 	mov.w	sl, #1
 8008cf4:	fa0a f202 	lsl.w	r2, sl, r2
 8008cf8:	420a      	tst	r2, r1
 8008cfa:	d009      	beq.n	8008d10 <__gethex+0x1f8>
 8008cfc:	4553      	cmp	r3, sl
 8008cfe:	dd05      	ble.n	8008d0c <__gethex+0x1f4>
 8008d00:	1eb9      	subs	r1, r7, #2
 8008d02:	4620      	mov	r0, r4
 8008d04:	f000 ff44 	bl	8009b90 <__any_on>
 8008d08:	2800      	cmp	r0, #0
 8008d0a:	d145      	bne.n	8008d98 <__gethex+0x280>
 8008d0c:	f04f 0a02 	mov.w	sl, #2
 8008d10:	4639      	mov	r1, r7
 8008d12:	4620      	mov	r0, r4
 8008d14:	f7ff fe98 	bl	8008a48 <rshift>
 8008d18:	443d      	add	r5, r7
 8008d1a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8008d1e:	42ab      	cmp	r3, r5
 8008d20:	da4c      	bge.n	8008dbc <__gethex+0x2a4>
 8008d22:	ee18 0a10 	vmov	r0, s16
 8008d26:	4621      	mov	r1, r4
 8008d28:	f000 fad2 	bl	80092d0 <_Bfree>
 8008d2c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8008d2e:	2300      	movs	r3, #0
 8008d30:	6013      	str	r3, [r2, #0]
 8008d32:	27a3      	movs	r7, #163	; 0xa3
 8008d34:	e785      	b.n	8008c42 <__gethex+0x12a>
 8008d36:	1e73      	subs	r3, r6, #1
 8008d38:	9a05      	ldr	r2, [sp, #20]
 8008d3a:	9303      	str	r3, [sp, #12]
 8008d3c:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8008d40:	4293      	cmp	r3, r2
 8008d42:	d019      	beq.n	8008d78 <__gethex+0x260>
 8008d44:	f1bb 0f20 	cmp.w	fp, #32
 8008d48:	d107      	bne.n	8008d5a <__gethex+0x242>
 8008d4a:	9b02      	ldr	r3, [sp, #8]
 8008d4c:	9a00      	ldr	r2, [sp, #0]
 8008d4e:	f843 2b04 	str.w	r2, [r3], #4
 8008d52:	9302      	str	r3, [sp, #8]
 8008d54:	2300      	movs	r3, #0
 8008d56:	9300      	str	r3, [sp, #0]
 8008d58:	469b      	mov	fp, r3
 8008d5a:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8008d5e:	f7ff fec5 	bl	8008aec <__hexdig_fun>
 8008d62:	9b00      	ldr	r3, [sp, #0]
 8008d64:	f000 000f 	and.w	r0, r0, #15
 8008d68:	fa00 f00b 	lsl.w	r0, r0, fp
 8008d6c:	4303      	orrs	r3, r0
 8008d6e:	9300      	str	r3, [sp, #0]
 8008d70:	f10b 0b04 	add.w	fp, fp, #4
 8008d74:	9b03      	ldr	r3, [sp, #12]
 8008d76:	e00d      	b.n	8008d94 <__gethex+0x27c>
 8008d78:	9b03      	ldr	r3, [sp, #12]
 8008d7a:	9a06      	ldr	r2, [sp, #24]
 8008d7c:	4413      	add	r3, r2
 8008d7e:	42bb      	cmp	r3, r7
 8008d80:	d3e0      	bcc.n	8008d44 <__gethex+0x22c>
 8008d82:	4618      	mov	r0, r3
 8008d84:	9901      	ldr	r1, [sp, #4]
 8008d86:	9307      	str	r3, [sp, #28]
 8008d88:	4652      	mov	r2, sl
 8008d8a:	f001 ff18 	bl	800abbe <strncmp>
 8008d8e:	9b07      	ldr	r3, [sp, #28]
 8008d90:	2800      	cmp	r0, #0
 8008d92:	d1d7      	bne.n	8008d44 <__gethex+0x22c>
 8008d94:	461e      	mov	r6, r3
 8008d96:	e78b      	b.n	8008cb0 <__gethex+0x198>
 8008d98:	f04f 0a03 	mov.w	sl, #3
 8008d9c:	e7b8      	b.n	8008d10 <__gethex+0x1f8>
 8008d9e:	da0a      	bge.n	8008db6 <__gethex+0x29e>
 8008da0:	1a37      	subs	r7, r6, r0
 8008da2:	4621      	mov	r1, r4
 8008da4:	ee18 0a10 	vmov	r0, s16
 8008da8:	463a      	mov	r2, r7
 8008daa:	f000 fcad 	bl	8009708 <__lshift>
 8008dae:	1bed      	subs	r5, r5, r7
 8008db0:	4604      	mov	r4, r0
 8008db2:	f100 0914 	add.w	r9, r0, #20
 8008db6:	f04f 0a00 	mov.w	sl, #0
 8008dba:	e7ae      	b.n	8008d1a <__gethex+0x202>
 8008dbc:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8008dc0:	42a8      	cmp	r0, r5
 8008dc2:	dd72      	ble.n	8008eaa <__gethex+0x392>
 8008dc4:	1b45      	subs	r5, r0, r5
 8008dc6:	42ae      	cmp	r6, r5
 8008dc8:	dc36      	bgt.n	8008e38 <__gethex+0x320>
 8008dca:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8008dce:	2b02      	cmp	r3, #2
 8008dd0:	d02a      	beq.n	8008e28 <__gethex+0x310>
 8008dd2:	2b03      	cmp	r3, #3
 8008dd4:	d02c      	beq.n	8008e30 <__gethex+0x318>
 8008dd6:	2b01      	cmp	r3, #1
 8008dd8:	d11c      	bne.n	8008e14 <__gethex+0x2fc>
 8008dda:	42ae      	cmp	r6, r5
 8008ddc:	d11a      	bne.n	8008e14 <__gethex+0x2fc>
 8008dde:	2e01      	cmp	r6, #1
 8008de0:	d112      	bne.n	8008e08 <__gethex+0x2f0>
 8008de2:	9a04      	ldr	r2, [sp, #16]
 8008de4:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8008de8:	6013      	str	r3, [r2, #0]
 8008dea:	2301      	movs	r3, #1
 8008dec:	6123      	str	r3, [r4, #16]
 8008dee:	f8c9 3000 	str.w	r3, [r9]
 8008df2:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008df4:	2762      	movs	r7, #98	; 0x62
 8008df6:	601c      	str	r4, [r3, #0]
 8008df8:	e723      	b.n	8008c42 <__gethex+0x12a>
 8008dfa:	bf00      	nop
 8008dfc:	0800c1d4 	.word	0x0800c1d4
 8008e00:	0800c0f8 	.word	0x0800c0f8
 8008e04:	0800c16c 	.word	0x0800c16c
 8008e08:	1e71      	subs	r1, r6, #1
 8008e0a:	4620      	mov	r0, r4
 8008e0c:	f000 fec0 	bl	8009b90 <__any_on>
 8008e10:	2800      	cmp	r0, #0
 8008e12:	d1e6      	bne.n	8008de2 <__gethex+0x2ca>
 8008e14:	ee18 0a10 	vmov	r0, s16
 8008e18:	4621      	mov	r1, r4
 8008e1a:	f000 fa59 	bl	80092d0 <_Bfree>
 8008e1e:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8008e20:	2300      	movs	r3, #0
 8008e22:	6013      	str	r3, [r2, #0]
 8008e24:	2750      	movs	r7, #80	; 0x50
 8008e26:	e70c      	b.n	8008c42 <__gethex+0x12a>
 8008e28:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008e2a:	2b00      	cmp	r3, #0
 8008e2c:	d1f2      	bne.n	8008e14 <__gethex+0x2fc>
 8008e2e:	e7d8      	b.n	8008de2 <__gethex+0x2ca>
 8008e30:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008e32:	2b00      	cmp	r3, #0
 8008e34:	d1d5      	bne.n	8008de2 <__gethex+0x2ca>
 8008e36:	e7ed      	b.n	8008e14 <__gethex+0x2fc>
 8008e38:	1e6f      	subs	r7, r5, #1
 8008e3a:	f1ba 0f00 	cmp.w	sl, #0
 8008e3e:	d131      	bne.n	8008ea4 <__gethex+0x38c>
 8008e40:	b127      	cbz	r7, 8008e4c <__gethex+0x334>
 8008e42:	4639      	mov	r1, r7
 8008e44:	4620      	mov	r0, r4
 8008e46:	f000 fea3 	bl	8009b90 <__any_on>
 8008e4a:	4682      	mov	sl, r0
 8008e4c:	117b      	asrs	r3, r7, #5
 8008e4e:	2101      	movs	r1, #1
 8008e50:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8008e54:	f007 071f 	and.w	r7, r7, #31
 8008e58:	fa01 f707 	lsl.w	r7, r1, r7
 8008e5c:	421f      	tst	r7, r3
 8008e5e:	4629      	mov	r1, r5
 8008e60:	4620      	mov	r0, r4
 8008e62:	bf18      	it	ne
 8008e64:	f04a 0a02 	orrne.w	sl, sl, #2
 8008e68:	1b76      	subs	r6, r6, r5
 8008e6a:	f7ff fded 	bl	8008a48 <rshift>
 8008e6e:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8008e72:	2702      	movs	r7, #2
 8008e74:	f1ba 0f00 	cmp.w	sl, #0
 8008e78:	d048      	beq.n	8008f0c <__gethex+0x3f4>
 8008e7a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8008e7e:	2b02      	cmp	r3, #2
 8008e80:	d015      	beq.n	8008eae <__gethex+0x396>
 8008e82:	2b03      	cmp	r3, #3
 8008e84:	d017      	beq.n	8008eb6 <__gethex+0x39e>
 8008e86:	2b01      	cmp	r3, #1
 8008e88:	d109      	bne.n	8008e9e <__gethex+0x386>
 8008e8a:	f01a 0f02 	tst.w	sl, #2
 8008e8e:	d006      	beq.n	8008e9e <__gethex+0x386>
 8008e90:	f8d9 0000 	ldr.w	r0, [r9]
 8008e94:	ea4a 0a00 	orr.w	sl, sl, r0
 8008e98:	f01a 0f01 	tst.w	sl, #1
 8008e9c:	d10e      	bne.n	8008ebc <__gethex+0x3a4>
 8008e9e:	f047 0710 	orr.w	r7, r7, #16
 8008ea2:	e033      	b.n	8008f0c <__gethex+0x3f4>
 8008ea4:	f04f 0a01 	mov.w	sl, #1
 8008ea8:	e7d0      	b.n	8008e4c <__gethex+0x334>
 8008eaa:	2701      	movs	r7, #1
 8008eac:	e7e2      	b.n	8008e74 <__gethex+0x35c>
 8008eae:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008eb0:	f1c3 0301 	rsb	r3, r3, #1
 8008eb4:	9315      	str	r3, [sp, #84]	; 0x54
 8008eb6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008eb8:	2b00      	cmp	r3, #0
 8008eba:	d0f0      	beq.n	8008e9e <__gethex+0x386>
 8008ebc:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8008ec0:	f104 0314 	add.w	r3, r4, #20
 8008ec4:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8008ec8:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8008ecc:	f04f 0c00 	mov.w	ip, #0
 8008ed0:	4618      	mov	r0, r3
 8008ed2:	f853 2b04 	ldr.w	r2, [r3], #4
 8008ed6:	f1b2 3fff 	cmp.w	r2, #4294967295
 8008eda:	d01c      	beq.n	8008f16 <__gethex+0x3fe>
 8008edc:	3201      	adds	r2, #1
 8008ede:	6002      	str	r2, [r0, #0]
 8008ee0:	2f02      	cmp	r7, #2
 8008ee2:	f104 0314 	add.w	r3, r4, #20
 8008ee6:	d13f      	bne.n	8008f68 <__gethex+0x450>
 8008ee8:	f8d8 2000 	ldr.w	r2, [r8]
 8008eec:	3a01      	subs	r2, #1
 8008eee:	42b2      	cmp	r2, r6
 8008ef0:	d10a      	bne.n	8008f08 <__gethex+0x3f0>
 8008ef2:	1171      	asrs	r1, r6, #5
 8008ef4:	2201      	movs	r2, #1
 8008ef6:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8008efa:	f006 061f 	and.w	r6, r6, #31
 8008efe:	fa02 f606 	lsl.w	r6, r2, r6
 8008f02:	421e      	tst	r6, r3
 8008f04:	bf18      	it	ne
 8008f06:	4617      	movne	r7, r2
 8008f08:	f047 0720 	orr.w	r7, r7, #32
 8008f0c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008f0e:	601c      	str	r4, [r3, #0]
 8008f10:	9b04      	ldr	r3, [sp, #16]
 8008f12:	601d      	str	r5, [r3, #0]
 8008f14:	e695      	b.n	8008c42 <__gethex+0x12a>
 8008f16:	4299      	cmp	r1, r3
 8008f18:	f843 cc04 	str.w	ip, [r3, #-4]
 8008f1c:	d8d8      	bhi.n	8008ed0 <__gethex+0x3b8>
 8008f1e:	68a3      	ldr	r3, [r4, #8]
 8008f20:	459b      	cmp	fp, r3
 8008f22:	db19      	blt.n	8008f58 <__gethex+0x440>
 8008f24:	6861      	ldr	r1, [r4, #4]
 8008f26:	ee18 0a10 	vmov	r0, s16
 8008f2a:	3101      	adds	r1, #1
 8008f2c:	f000 f990 	bl	8009250 <_Balloc>
 8008f30:	4681      	mov	r9, r0
 8008f32:	b918      	cbnz	r0, 8008f3c <__gethex+0x424>
 8008f34:	4b1a      	ldr	r3, [pc, #104]	; (8008fa0 <__gethex+0x488>)
 8008f36:	4602      	mov	r2, r0
 8008f38:	2184      	movs	r1, #132	; 0x84
 8008f3a:	e6a8      	b.n	8008c8e <__gethex+0x176>
 8008f3c:	6922      	ldr	r2, [r4, #16]
 8008f3e:	3202      	adds	r2, #2
 8008f40:	f104 010c 	add.w	r1, r4, #12
 8008f44:	0092      	lsls	r2, r2, #2
 8008f46:	300c      	adds	r0, #12
 8008f48:	f000 f974 	bl	8009234 <memcpy>
 8008f4c:	4621      	mov	r1, r4
 8008f4e:	ee18 0a10 	vmov	r0, s16
 8008f52:	f000 f9bd 	bl	80092d0 <_Bfree>
 8008f56:	464c      	mov	r4, r9
 8008f58:	6923      	ldr	r3, [r4, #16]
 8008f5a:	1c5a      	adds	r2, r3, #1
 8008f5c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8008f60:	6122      	str	r2, [r4, #16]
 8008f62:	2201      	movs	r2, #1
 8008f64:	615a      	str	r2, [r3, #20]
 8008f66:	e7bb      	b.n	8008ee0 <__gethex+0x3c8>
 8008f68:	6922      	ldr	r2, [r4, #16]
 8008f6a:	455a      	cmp	r2, fp
 8008f6c:	dd0b      	ble.n	8008f86 <__gethex+0x46e>
 8008f6e:	2101      	movs	r1, #1
 8008f70:	4620      	mov	r0, r4
 8008f72:	f7ff fd69 	bl	8008a48 <rshift>
 8008f76:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8008f7a:	3501      	adds	r5, #1
 8008f7c:	42ab      	cmp	r3, r5
 8008f7e:	f6ff aed0 	blt.w	8008d22 <__gethex+0x20a>
 8008f82:	2701      	movs	r7, #1
 8008f84:	e7c0      	b.n	8008f08 <__gethex+0x3f0>
 8008f86:	f016 061f 	ands.w	r6, r6, #31
 8008f8a:	d0fa      	beq.n	8008f82 <__gethex+0x46a>
 8008f8c:	4453      	add	r3, sl
 8008f8e:	f1c6 0620 	rsb	r6, r6, #32
 8008f92:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8008f96:	f000 fa4d 	bl	8009434 <__hi0bits>
 8008f9a:	42b0      	cmp	r0, r6
 8008f9c:	dbe7      	blt.n	8008f6e <__gethex+0x456>
 8008f9e:	e7f0      	b.n	8008f82 <__gethex+0x46a>
 8008fa0:	0800c0f8 	.word	0x0800c0f8

08008fa4 <L_shift>:
 8008fa4:	f1c2 0208 	rsb	r2, r2, #8
 8008fa8:	0092      	lsls	r2, r2, #2
 8008faa:	b570      	push	{r4, r5, r6, lr}
 8008fac:	f1c2 0620 	rsb	r6, r2, #32
 8008fb0:	6843      	ldr	r3, [r0, #4]
 8008fb2:	6804      	ldr	r4, [r0, #0]
 8008fb4:	fa03 f506 	lsl.w	r5, r3, r6
 8008fb8:	432c      	orrs	r4, r5
 8008fba:	40d3      	lsrs	r3, r2
 8008fbc:	6004      	str	r4, [r0, #0]
 8008fbe:	f840 3f04 	str.w	r3, [r0, #4]!
 8008fc2:	4288      	cmp	r0, r1
 8008fc4:	d3f4      	bcc.n	8008fb0 <L_shift+0xc>
 8008fc6:	bd70      	pop	{r4, r5, r6, pc}

08008fc8 <__match>:
 8008fc8:	b530      	push	{r4, r5, lr}
 8008fca:	6803      	ldr	r3, [r0, #0]
 8008fcc:	3301      	adds	r3, #1
 8008fce:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008fd2:	b914      	cbnz	r4, 8008fda <__match+0x12>
 8008fd4:	6003      	str	r3, [r0, #0]
 8008fd6:	2001      	movs	r0, #1
 8008fd8:	bd30      	pop	{r4, r5, pc}
 8008fda:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008fde:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8008fe2:	2d19      	cmp	r5, #25
 8008fe4:	bf98      	it	ls
 8008fe6:	3220      	addls	r2, #32
 8008fe8:	42a2      	cmp	r2, r4
 8008fea:	d0f0      	beq.n	8008fce <__match+0x6>
 8008fec:	2000      	movs	r0, #0
 8008fee:	e7f3      	b.n	8008fd8 <__match+0x10>

08008ff0 <__hexnan>:
 8008ff0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ff4:	680b      	ldr	r3, [r1, #0]
 8008ff6:	115e      	asrs	r6, r3, #5
 8008ff8:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8008ffc:	f013 031f 	ands.w	r3, r3, #31
 8009000:	b087      	sub	sp, #28
 8009002:	bf18      	it	ne
 8009004:	3604      	addne	r6, #4
 8009006:	2500      	movs	r5, #0
 8009008:	1f37      	subs	r7, r6, #4
 800900a:	4690      	mov	r8, r2
 800900c:	6802      	ldr	r2, [r0, #0]
 800900e:	9301      	str	r3, [sp, #4]
 8009010:	4682      	mov	sl, r0
 8009012:	f846 5c04 	str.w	r5, [r6, #-4]
 8009016:	46b9      	mov	r9, r7
 8009018:	463c      	mov	r4, r7
 800901a:	9502      	str	r5, [sp, #8]
 800901c:	46ab      	mov	fp, r5
 800901e:	7851      	ldrb	r1, [r2, #1]
 8009020:	1c53      	adds	r3, r2, #1
 8009022:	9303      	str	r3, [sp, #12]
 8009024:	b341      	cbz	r1, 8009078 <__hexnan+0x88>
 8009026:	4608      	mov	r0, r1
 8009028:	9205      	str	r2, [sp, #20]
 800902a:	9104      	str	r1, [sp, #16]
 800902c:	f7ff fd5e 	bl	8008aec <__hexdig_fun>
 8009030:	2800      	cmp	r0, #0
 8009032:	d14f      	bne.n	80090d4 <__hexnan+0xe4>
 8009034:	9904      	ldr	r1, [sp, #16]
 8009036:	9a05      	ldr	r2, [sp, #20]
 8009038:	2920      	cmp	r1, #32
 800903a:	d818      	bhi.n	800906e <__hexnan+0x7e>
 800903c:	9b02      	ldr	r3, [sp, #8]
 800903e:	459b      	cmp	fp, r3
 8009040:	dd13      	ble.n	800906a <__hexnan+0x7a>
 8009042:	454c      	cmp	r4, r9
 8009044:	d206      	bcs.n	8009054 <__hexnan+0x64>
 8009046:	2d07      	cmp	r5, #7
 8009048:	dc04      	bgt.n	8009054 <__hexnan+0x64>
 800904a:	462a      	mov	r2, r5
 800904c:	4649      	mov	r1, r9
 800904e:	4620      	mov	r0, r4
 8009050:	f7ff ffa8 	bl	8008fa4 <L_shift>
 8009054:	4544      	cmp	r4, r8
 8009056:	d950      	bls.n	80090fa <__hexnan+0x10a>
 8009058:	2300      	movs	r3, #0
 800905a:	f1a4 0904 	sub.w	r9, r4, #4
 800905e:	f844 3c04 	str.w	r3, [r4, #-4]
 8009062:	f8cd b008 	str.w	fp, [sp, #8]
 8009066:	464c      	mov	r4, r9
 8009068:	461d      	mov	r5, r3
 800906a:	9a03      	ldr	r2, [sp, #12]
 800906c:	e7d7      	b.n	800901e <__hexnan+0x2e>
 800906e:	2929      	cmp	r1, #41	; 0x29
 8009070:	d156      	bne.n	8009120 <__hexnan+0x130>
 8009072:	3202      	adds	r2, #2
 8009074:	f8ca 2000 	str.w	r2, [sl]
 8009078:	f1bb 0f00 	cmp.w	fp, #0
 800907c:	d050      	beq.n	8009120 <__hexnan+0x130>
 800907e:	454c      	cmp	r4, r9
 8009080:	d206      	bcs.n	8009090 <__hexnan+0xa0>
 8009082:	2d07      	cmp	r5, #7
 8009084:	dc04      	bgt.n	8009090 <__hexnan+0xa0>
 8009086:	462a      	mov	r2, r5
 8009088:	4649      	mov	r1, r9
 800908a:	4620      	mov	r0, r4
 800908c:	f7ff ff8a 	bl	8008fa4 <L_shift>
 8009090:	4544      	cmp	r4, r8
 8009092:	d934      	bls.n	80090fe <__hexnan+0x10e>
 8009094:	f1a8 0204 	sub.w	r2, r8, #4
 8009098:	4623      	mov	r3, r4
 800909a:	f853 1b04 	ldr.w	r1, [r3], #4
 800909e:	f842 1f04 	str.w	r1, [r2, #4]!
 80090a2:	429f      	cmp	r7, r3
 80090a4:	d2f9      	bcs.n	800909a <__hexnan+0xaa>
 80090a6:	1b3b      	subs	r3, r7, r4
 80090a8:	f023 0303 	bic.w	r3, r3, #3
 80090ac:	3304      	adds	r3, #4
 80090ae:	3401      	adds	r4, #1
 80090b0:	3e03      	subs	r6, #3
 80090b2:	42b4      	cmp	r4, r6
 80090b4:	bf88      	it	hi
 80090b6:	2304      	movhi	r3, #4
 80090b8:	4443      	add	r3, r8
 80090ba:	2200      	movs	r2, #0
 80090bc:	f843 2b04 	str.w	r2, [r3], #4
 80090c0:	429f      	cmp	r7, r3
 80090c2:	d2fb      	bcs.n	80090bc <__hexnan+0xcc>
 80090c4:	683b      	ldr	r3, [r7, #0]
 80090c6:	b91b      	cbnz	r3, 80090d0 <__hexnan+0xe0>
 80090c8:	4547      	cmp	r7, r8
 80090ca:	d127      	bne.n	800911c <__hexnan+0x12c>
 80090cc:	2301      	movs	r3, #1
 80090ce:	603b      	str	r3, [r7, #0]
 80090d0:	2005      	movs	r0, #5
 80090d2:	e026      	b.n	8009122 <__hexnan+0x132>
 80090d4:	3501      	adds	r5, #1
 80090d6:	2d08      	cmp	r5, #8
 80090d8:	f10b 0b01 	add.w	fp, fp, #1
 80090dc:	dd06      	ble.n	80090ec <__hexnan+0xfc>
 80090de:	4544      	cmp	r4, r8
 80090e0:	d9c3      	bls.n	800906a <__hexnan+0x7a>
 80090e2:	2300      	movs	r3, #0
 80090e4:	f844 3c04 	str.w	r3, [r4, #-4]
 80090e8:	2501      	movs	r5, #1
 80090ea:	3c04      	subs	r4, #4
 80090ec:	6822      	ldr	r2, [r4, #0]
 80090ee:	f000 000f 	and.w	r0, r0, #15
 80090f2:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 80090f6:	6022      	str	r2, [r4, #0]
 80090f8:	e7b7      	b.n	800906a <__hexnan+0x7a>
 80090fa:	2508      	movs	r5, #8
 80090fc:	e7b5      	b.n	800906a <__hexnan+0x7a>
 80090fe:	9b01      	ldr	r3, [sp, #4]
 8009100:	2b00      	cmp	r3, #0
 8009102:	d0df      	beq.n	80090c4 <__hexnan+0xd4>
 8009104:	f04f 32ff 	mov.w	r2, #4294967295
 8009108:	f1c3 0320 	rsb	r3, r3, #32
 800910c:	fa22 f303 	lsr.w	r3, r2, r3
 8009110:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8009114:	401a      	ands	r2, r3
 8009116:	f846 2c04 	str.w	r2, [r6, #-4]
 800911a:	e7d3      	b.n	80090c4 <__hexnan+0xd4>
 800911c:	3f04      	subs	r7, #4
 800911e:	e7d1      	b.n	80090c4 <__hexnan+0xd4>
 8009120:	2004      	movs	r0, #4
 8009122:	b007      	add	sp, #28
 8009124:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08009128 <_localeconv_r>:
 8009128:	4800      	ldr	r0, [pc, #0]	; (800912c <_localeconv_r+0x4>)
 800912a:	4770      	bx	lr
 800912c:	20000164 	.word	0x20000164

08009130 <__retarget_lock_init_recursive>:
 8009130:	4770      	bx	lr

08009132 <__retarget_lock_acquire_recursive>:
 8009132:	4770      	bx	lr

08009134 <__retarget_lock_release_recursive>:
 8009134:	4770      	bx	lr

08009136 <__swhatbuf_r>:
 8009136:	b570      	push	{r4, r5, r6, lr}
 8009138:	460e      	mov	r6, r1
 800913a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800913e:	2900      	cmp	r1, #0
 8009140:	b096      	sub	sp, #88	; 0x58
 8009142:	4614      	mov	r4, r2
 8009144:	461d      	mov	r5, r3
 8009146:	da08      	bge.n	800915a <__swhatbuf_r+0x24>
 8009148:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800914c:	2200      	movs	r2, #0
 800914e:	602a      	str	r2, [r5, #0]
 8009150:	061a      	lsls	r2, r3, #24
 8009152:	d410      	bmi.n	8009176 <__swhatbuf_r+0x40>
 8009154:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009158:	e00e      	b.n	8009178 <__swhatbuf_r+0x42>
 800915a:	466a      	mov	r2, sp
 800915c:	f001 feea 	bl	800af34 <_fstat_r>
 8009160:	2800      	cmp	r0, #0
 8009162:	dbf1      	blt.n	8009148 <__swhatbuf_r+0x12>
 8009164:	9a01      	ldr	r2, [sp, #4]
 8009166:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800916a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800916e:	425a      	negs	r2, r3
 8009170:	415a      	adcs	r2, r3
 8009172:	602a      	str	r2, [r5, #0]
 8009174:	e7ee      	b.n	8009154 <__swhatbuf_r+0x1e>
 8009176:	2340      	movs	r3, #64	; 0x40
 8009178:	2000      	movs	r0, #0
 800917a:	6023      	str	r3, [r4, #0]
 800917c:	b016      	add	sp, #88	; 0x58
 800917e:	bd70      	pop	{r4, r5, r6, pc}

08009180 <__smakebuf_r>:
 8009180:	898b      	ldrh	r3, [r1, #12]
 8009182:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009184:	079d      	lsls	r5, r3, #30
 8009186:	4606      	mov	r6, r0
 8009188:	460c      	mov	r4, r1
 800918a:	d507      	bpl.n	800919c <__smakebuf_r+0x1c>
 800918c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009190:	6023      	str	r3, [r4, #0]
 8009192:	6123      	str	r3, [r4, #16]
 8009194:	2301      	movs	r3, #1
 8009196:	6163      	str	r3, [r4, #20]
 8009198:	b002      	add	sp, #8
 800919a:	bd70      	pop	{r4, r5, r6, pc}
 800919c:	ab01      	add	r3, sp, #4
 800919e:	466a      	mov	r2, sp
 80091a0:	f7ff ffc9 	bl	8009136 <__swhatbuf_r>
 80091a4:	9900      	ldr	r1, [sp, #0]
 80091a6:	4605      	mov	r5, r0
 80091a8:	4630      	mov	r0, r6
 80091aa:	f000 fd95 	bl	8009cd8 <_malloc_r>
 80091ae:	b948      	cbnz	r0, 80091c4 <__smakebuf_r+0x44>
 80091b0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80091b4:	059a      	lsls	r2, r3, #22
 80091b6:	d4ef      	bmi.n	8009198 <__smakebuf_r+0x18>
 80091b8:	f023 0303 	bic.w	r3, r3, #3
 80091bc:	f043 0302 	orr.w	r3, r3, #2
 80091c0:	81a3      	strh	r3, [r4, #12]
 80091c2:	e7e3      	b.n	800918c <__smakebuf_r+0xc>
 80091c4:	4b0d      	ldr	r3, [pc, #52]	; (80091fc <__smakebuf_r+0x7c>)
 80091c6:	62b3      	str	r3, [r6, #40]	; 0x28
 80091c8:	89a3      	ldrh	r3, [r4, #12]
 80091ca:	6020      	str	r0, [r4, #0]
 80091cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80091d0:	81a3      	strh	r3, [r4, #12]
 80091d2:	9b00      	ldr	r3, [sp, #0]
 80091d4:	6163      	str	r3, [r4, #20]
 80091d6:	9b01      	ldr	r3, [sp, #4]
 80091d8:	6120      	str	r0, [r4, #16]
 80091da:	b15b      	cbz	r3, 80091f4 <__smakebuf_r+0x74>
 80091dc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80091e0:	4630      	mov	r0, r6
 80091e2:	f001 feb9 	bl	800af58 <_isatty_r>
 80091e6:	b128      	cbz	r0, 80091f4 <__smakebuf_r+0x74>
 80091e8:	89a3      	ldrh	r3, [r4, #12]
 80091ea:	f023 0303 	bic.w	r3, r3, #3
 80091ee:	f043 0301 	orr.w	r3, r3, #1
 80091f2:	81a3      	strh	r3, [r4, #12]
 80091f4:	89a0      	ldrh	r0, [r4, #12]
 80091f6:	4305      	orrs	r5, r0
 80091f8:	81a5      	strh	r5, [r4, #12]
 80091fa:	e7cd      	b.n	8009198 <__smakebuf_r+0x18>
 80091fc:	0800886d 	.word	0x0800886d

08009200 <malloc>:
 8009200:	4b02      	ldr	r3, [pc, #8]	; (800920c <malloc+0xc>)
 8009202:	4601      	mov	r1, r0
 8009204:	6818      	ldr	r0, [r3, #0]
 8009206:	f000 bd67 	b.w	8009cd8 <_malloc_r>
 800920a:	bf00      	nop
 800920c:	2000000c 	.word	0x2000000c

08009210 <__ascii_mbtowc>:
 8009210:	b082      	sub	sp, #8
 8009212:	b901      	cbnz	r1, 8009216 <__ascii_mbtowc+0x6>
 8009214:	a901      	add	r1, sp, #4
 8009216:	b142      	cbz	r2, 800922a <__ascii_mbtowc+0x1a>
 8009218:	b14b      	cbz	r3, 800922e <__ascii_mbtowc+0x1e>
 800921a:	7813      	ldrb	r3, [r2, #0]
 800921c:	600b      	str	r3, [r1, #0]
 800921e:	7812      	ldrb	r2, [r2, #0]
 8009220:	1e10      	subs	r0, r2, #0
 8009222:	bf18      	it	ne
 8009224:	2001      	movne	r0, #1
 8009226:	b002      	add	sp, #8
 8009228:	4770      	bx	lr
 800922a:	4610      	mov	r0, r2
 800922c:	e7fb      	b.n	8009226 <__ascii_mbtowc+0x16>
 800922e:	f06f 0001 	mvn.w	r0, #1
 8009232:	e7f8      	b.n	8009226 <__ascii_mbtowc+0x16>

08009234 <memcpy>:
 8009234:	440a      	add	r2, r1
 8009236:	4291      	cmp	r1, r2
 8009238:	f100 33ff 	add.w	r3, r0, #4294967295
 800923c:	d100      	bne.n	8009240 <memcpy+0xc>
 800923e:	4770      	bx	lr
 8009240:	b510      	push	{r4, lr}
 8009242:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009246:	f803 4f01 	strb.w	r4, [r3, #1]!
 800924a:	4291      	cmp	r1, r2
 800924c:	d1f9      	bne.n	8009242 <memcpy+0xe>
 800924e:	bd10      	pop	{r4, pc}

08009250 <_Balloc>:
 8009250:	b570      	push	{r4, r5, r6, lr}
 8009252:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009254:	4604      	mov	r4, r0
 8009256:	460d      	mov	r5, r1
 8009258:	b976      	cbnz	r6, 8009278 <_Balloc+0x28>
 800925a:	2010      	movs	r0, #16
 800925c:	f7ff ffd0 	bl	8009200 <malloc>
 8009260:	4602      	mov	r2, r0
 8009262:	6260      	str	r0, [r4, #36]	; 0x24
 8009264:	b920      	cbnz	r0, 8009270 <_Balloc+0x20>
 8009266:	4b18      	ldr	r3, [pc, #96]	; (80092c8 <_Balloc+0x78>)
 8009268:	4818      	ldr	r0, [pc, #96]	; (80092cc <_Balloc+0x7c>)
 800926a:	2166      	movs	r1, #102	; 0x66
 800926c:	f001 fe22 	bl	800aeb4 <__assert_func>
 8009270:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009274:	6006      	str	r6, [r0, #0]
 8009276:	60c6      	str	r6, [r0, #12]
 8009278:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800927a:	68f3      	ldr	r3, [r6, #12]
 800927c:	b183      	cbz	r3, 80092a0 <_Balloc+0x50>
 800927e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009280:	68db      	ldr	r3, [r3, #12]
 8009282:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8009286:	b9b8      	cbnz	r0, 80092b8 <_Balloc+0x68>
 8009288:	2101      	movs	r1, #1
 800928a:	fa01 f605 	lsl.w	r6, r1, r5
 800928e:	1d72      	adds	r2, r6, #5
 8009290:	0092      	lsls	r2, r2, #2
 8009292:	4620      	mov	r0, r4
 8009294:	f000 fc9d 	bl	8009bd2 <_calloc_r>
 8009298:	b160      	cbz	r0, 80092b4 <_Balloc+0x64>
 800929a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800929e:	e00e      	b.n	80092be <_Balloc+0x6e>
 80092a0:	2221      	movs	r2, #33	; 0x21
 80092a2:	2104      	movs	r1, #4
 80092a4:	4620      	mov	r0, r4
 80092a6:	f000 fc94 	bl	8009bd2 <_calloc_r>
 80092aa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80092ac:	60f0      	str	r0, [r6, #12]
 80092ae:	68db      	ldr	r3, [r3, #12]
 80092b0:	2b00      	cmp	r3, #0
 80092b2:	d1e4      	bne.n	800927e <_Balloc+0x2e>
 80092b4:	2000      	movs	r0, #0
 80092b6:	bd70      	pop	{r4, r5, r6, pc}
 80092b8:	6802      	ldr	r2, [r0, #0]
 80092ba:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80092be:	2300      	movs	r3, #0
 80092c0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80092c4:	e7f7      	b.n	80092b6 <_Balloc+0x66>
 80092c6:	bf00      	nop
 80092c8:	0800c086 	.word	0x0800c086
 80092cc:	0800c1e8 	.word	0x0800c1e8

080092d0 <_Bfree>:
 80092d0:	b570      	push	{r4, r5, r6, lr}
 80092d2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80092d4:	4605      	mov	r5, r0
 80092d6:	460c      	mov	r4, r1
 80092d8:	b976      	cbnz	r6, 80092f8 <_Bfree+0x28>
 80092da:	2010      	movs	r0, #16
 80092dc:	f7ff ff90 	bl	8009200 <malloc>
 80092e0:	4602      	mov	r2, r0
 80092e2:	6268      	str	r0, [r5, #36]	; 0x24
 80092e4:	b920      	cbnz	r0, 80092f0 <_Bfree+0x20>
 80092e6:	4b09      	ldr	r3, [pc, #36]	; (800930c <_Bfree+0x3c>)
 80092e8:	4809      	ldr	r0, [pc, #36]	; (8009310 <_Bfree+0x40>)
 80092ea:	218a      	movs	r1, #138	; 0x8a
 80092ec:	f001 fde2 	bl	800aeb4 <__assert_func>
 80092f0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80092f4:	6006      	str	r6, [r0, #0]
 80092f6:	60c6      	str	r6, [r0, #12]
 80092f8:	b13c      	cbz	r4, 800930a <_Bfree+0x3a>
 80092fa:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80092fc:	6862      	ldr	r2, [r4, #4]
 80092fe:	68db      	ldr	r3, [r3, #12]
 8009300:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009304:	6021      	str	r1, [r4, #0]
 8009306:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800930a:	bd70      	pop	{r4, r5, r6, pc}
 800930c:	0800c086 	.word	0x0800c086
 8009310:	0800c1e8 	.word	0x0800c1e8

08009314 <__multadd>:
 8009314:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009318:	690d      	ldr	r5, [r1, #16]
 800931a:	4607      	mov	r7, r0
 800931c:	460c      	mov	r4, r1
 800931e:	461e      	mov	r6, r3
 8009320:	f101 0c14 	add.w	ip, r1, #20
 8009324:	2000      	movs	r0, #0
 8009326:	f8dc 3000 	ldr.w	r3, [ip]
 800932a:	b299      	uxth	r1, r3
 800932c:	fb02 6101 	mla	r1, r2, r1, r6
 8009330:	0c1e      	lsrs	r6, r3, #16
 8009332:	0c0b      	lsrs	r3, r1, #16
 8009334:	fb02 3306 	mla	r3, r2, r6, r3
 8009338:	b289      	uxth	r1, r1
 800933a:	3001      	adds	r0, #1
 800933c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8009340:	4285      	cmp	r5, r0
 8009342:	f84c 1b04 	str.w	r1, [ip], #4
 8009346:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800934a:	dcec      	bgt.n	8009326 <__multadd+0x12>
 800934c:	b30e      	cbz	r6, 8009392 <__multadd+0x7e>
 800934e:	68a3      	ldr	r3, [r4, #8]
 8009350:	42ab      	cmp	r3, r5
 8009352:	dc19      	bgt.n	8009388 <__multadd+0x74>
 8009354:	6861      	ldr	r1, [r4, #4]
 8009356:	4638      	mov	r0, r7
 8009358:	3101      	adds	r1, #1
 800935a:	f7ff ff79 	bl	8009250 <_Balloc>
 800935e:	4680      	mov	r8, r0
 8009360:	b928      	cbnz	r0, 800936e <__multadd+0x5a>
 8009362:	4602      	mov	r2, r0
 8009364:	4b0c      	ldr	r3, [pc, #48]	; (8009398 <__multadd+0x84>)
 8009366:	480d      	ldr	r0, [pc, #52]	; (800939c <__multadd+0x88>)
 8009368:	21b5      	movs	r1, #181	; 0xb5
 800936a:	f001 fda3 	bl	800aeb4 <__assert_func>
 800936e:	6922      	ldr	r2, [r4, #16]
 8009370:	3202      	adds	r2, #2
 8009372:	f104 010c 	add.w	r1, r4, #12
 8009376:	0092      	lsls	r2, r2, #2
 8009378:	300c      	adds	r0, #12
 800937a:	f7ff ff5b 	bl	8009234 <memcpy>
 800937e:	4621      	mov	r1, r4
 8009380:	4638      	mov	r0, r7
 8009382:	f7ff ffa5 	bl	80092d0 <_Bfree>
 8009386:	4644      	mov	r4, r8
 8009388:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800938c:	3501      	adds	r5, #1
 800938e:	615e      	str	r6, [r3, #20]
 8009390:	6125      	str	r5, [r4, #16]
 8009392:	4620      	mov	r0, r4
 8009394:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009398:	0800c0f8 	.word	0x0800c0f8
 800939c:	0800c1e8 	.word	0x0800c1e8

080093a0 <__s2b>:
 80093a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80093a4:	460c      	mov	r4, r1
 80093a6:	4615      	mov	r5, r2
 80093a8:	461f      	mov	r7, r3
 80093aa:	2209      	movs	r2, #9
 80093ac:	3308      	adds	r3, #8
 80093ae:	4606      	mov	r6, r0
 80093b0:	fb93 f3f2 	sdiv	r3, r3, r2
 80093b4:	2100      	movs	r1, #0
 80093b6:	2201      	movs	r2, #1
 80093b8:	429a      	cmp	r2, r3
 80093ba:	db09      	blt.n	80093d0 <__s2b+0x30>
 80093bc:	4630      	mov	r0, r6
 80093be:	f7ff ff47 	bl	8009250 <_Balloc>
 80093c2:	b940      	cbnz	r0, 80093d6 <__s2b+0x36>
 80093c4:	4602      	mov	r2, r0
 80093c6:	4b19      	ldr	r3, [pc, #100]	; (800942c <__s2b+0x8c>)
 80093c8:	4819      	ldr	r0, [pc, #100]	; (8009430 <__s2b+0x90>)
 80093ca:	21ce      	movs	r1, #206	; 0xce
 80093cc:	f001 fd72 	bl	800aeb4 <__assert_func>
 80093d0:	0052      	lsls	r2, r2, #1
 80093d2:	3101      	adds	r1, #1
 80093d4:	e7f0      	b.n	80093b8 <__s2b+0x18>
 80093d6:	9b08      	ldr	r3, [sp, #32]
 80093d8:	6143      	str	r3, [r0, #20]
 80093da:	2d09      	cmp	r5, #9
 80093dc:	f04f 0301 	mov.w	r3, #1
 80093e0:	6103      	str	r3, [r0, #16]
 80093e2:	dd16      	ble.n	8009412 <__s2b+0x72>
 80093e4:	f104 0909 	add.w	r9, r4, #9
 80093e8:	46c8      	mov	r8, r9
 80093ea:	442c      	add	r4, r5
 80093ec:	f818 3b01 	ldrb.w	r3, [r8], #1
 80093f0:	4601      	mov	r1, r0
 80093f2:	3b30      	subs	r3, #48	; 0x30
 80093f4:	220a      	movs	r2, #10
 80093f6:	4630      	mov	r0, r6
 80093f8:	f7ff ff8c 	bl	8009314 <__multadd>
 80093fc:	45a0      	cmp	r8, r4
 80093fe:	d1f5      	bne.n	80093ec <__s2b+0x4c>
 8009400:	f1a5 0408 	sub.w	r4, r5, #8
 8009404:	444c      	add	r4, r9
 8009406:	1b2d      	subs	r5, r5, r4
 8009408:	1963      	adds	r3, r4, r5
 800940a:	42bb      	cmp	r3, r7
 800940c:	db04      	blt.n	8009418 <__s2b+0x78>
 800940e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009412:	340a      	adds	r4, #10
 8009414:	2509      	movs	r5, #9
 8009416:	e7f6      	b.n	8009406 <__s2b+0x66>
 8009418:	f814 3b01 	ldrb.w	r3, [r4], #1
 800941c:	4601      	mov	r1, r0
 800941e:	3b30      	subs	r3, #48	; 0x30
 8009420:	220a      	movs	r2, #10
 8009422:	4630      	mov	r0, r6
 8009424:	f7ff ff76 	bl	8009314 <__multadd>
 8009428:	e7ee      	b.n	8009408 <__s2b+0x68>
 800942a:	bf00      	nop
 800942c:	0800c0f8 	.word	0x0800c0f8
 8009430:	0800c1e8 	.word	0x0800c1e8

08009434 <__hi0bits>:
 8009434:	0c03      	lsrs	r3, r0, #16
 8009436:	041b      	lsls	r3, r3, #16
 8009438:	b9d3      	cbnz	r3, 8009470 <__hi0bits+0x3c>
 800943a:	0400      	lsls	r0, r0, #16
 800943c:	2310      	movs	r3, #16
 800943e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8009442:	bf04      	itt	eq
 8009444:	0200      	lsleq	r0, r0, #8
 8009446:	3308      	addeq	r3, #8
 8009448:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800944c:	bf04      	itt	eq
 800944e:	0100      	lsleq	r0, r0, #4
 8009450:	3304      	addeq	r3, #4
 8009452:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8009456:	bf04      	itt	eq
 8009458:	0080      	lsleq	r0, r0, #2
 800945a:	3302      	addeq	r3, #2
 800945c:	2800      	cmp	r0, #0
 800945e:	db05      	blt.n	800946c <__hi0bits+0x38>
 8009460:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8009464:	f103 0301 	add.w	r3, r3, #1
 8009468:	bf08      	it	eq
 800946a:	2320      	moveq	r3, #32
 800946c:	4618      	mov	r0, r3
 800946e:	4770      	bx	lr
 8009470:	2300      	movs	r3, #0
 8009472:	e7e4      	b.n	800943e <__hi0bits+0xa>

08009474 <__lo0bits>:
 8009474:	6803      	ldr	r3, [r0, #0]
 8009476:	f013 0207 	ands.w	r2, r3, #7
 800947a:	4601      	mov	r1, r0
 800947c:	d00b      	beq.n	8009496 <__lo0bits+0x22>
 800947e:	07da      	lsls	r2, r3, #31
 8009480:	d423      	bmi.n	80094ca <__lo0bits+0x56>
 8009482:	0798      	lsls	r0, r3, #30
 8009484:	bf49      	itett	mi
 8009486:	085b      	lsrmi	r3, r3, #1
 8009488:	089b      	lsrpl	r3, r3, #2
 800948a:	2001      	movmi	r0, #1
 800948c:	600b      	strmi	r3, [r1, #0]
 800948e:	bf5c      	itt	pl
 8009490:	600b      	strpl	r3, [r1, #0]
 8009492:	2002      	movpl	r0, #2
 8009494:	4770      	bx	lr
 8009496:	b298      	uxth	r0, r3
 8009498:	b9a8      	cbnz	r0, 80094c6 <__lo0bits+0x52>
 800949a:	0c1b      	lsrs	r3, r3, #16
 800949c:	2010      	movs	r0, #16
 800949e:	b2da      	uxtb	r2, r3
 80094a0:	b90a      	cbnz	r2, 80094a6 <__lo0bits+0x32>
 80094a2:	3008      	adds	r0, #8
 80094a4:	0a1b      	lsrs	r3, r3, #8
 80094a6:	071a      	lsls	r2, r3, #28
 80094a8:	bf04      	itt	eq
 80094aa:	091b      	lsreq	r3, r3, #4
 80094ac:	3004      	addeq	r0, #4
 80094ae:	079a      	lsls	r2, r3, #30
 80094b0:	bf04      	itt	eq
 80094b2:	089b      	lsreq	r3, r3, #2
 80094b4:	3002      	addeq	r0, #2
 80094b6:	07da      	lsls	r2, r3, #31
 80094b8:	d403      	bmi.n	80094c2 <__lo0bits+0x4e>
 80094ba:	085b      	lsrs	r3, r3, #1
 80094bc:	f100 0001 	add.w	r0, r0, #1
 80094c0:	d005      	beq.n	80094ce <__lo0bits+0x5a>
 80094c2:	600b      	str	r3, [r1, #0]
 80094c4:	4770      	bx	lr
 80094c6:	4610      	mov	r0, r2
 80094c8:	e7e9      	b.n	800949e <__lo0bits+0x2a>
 80094ca:	2000      	movs	r0, #0
 80094cc:	4770      	bx	lr
 80094ce:	2020      	movs	r0, #32
 80094d0:	4770      	bx	lr
	...

080094d4 <__i2b>:
 80094d4:	b510      	push	{r4, lr}
 80094d6:	460c      	mov	r4, r1
 80094d8:	2101      	movs	r1, #1
 80094da:	f7ff feb9 	bl	8009250 <_Balloc>
 80094de:	4602      	mov	r2, r0
 80094e0:	b928      	cbnz	r0, 80094ee <__i2b+0x1a>
 80094e2:	4b05      	ldr	r3, [pc, #20]	; (80094f8 <__i2b+0x24>)
 80094e4:	4805      	ldr	r0, [pc, #20]	; (80094fc <__i2b+0x28>)
 80094e6:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80094ea:	f001 fce3 	bl	800aeb4 <__assert_func>
 80094ee:	2301      	movs	r3, #1
 80094f0:	6144      	str	r4, [r0, #20]
 80094f2:	6103      	str	r3, [r0, #16]
 80094f4:	bd10      	pop	{r4, pc}
 80094f6:	bf00      	nop
 80094f8:	0800c0f8 	.word	0x0800c0f8
 80094fc:	0800c1e8 	.word	0x0800c1e8

08009500 <__multiply>:
 8009500:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009504:	4691      	mov	r9, r2
 8009506:	690a      	ldr	r2, [r1, #16]
 8009508:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800950c:	429a      	cmp	r2, r3
 800950e:	bfb8      	it	lt
 8009510:	460b      	movlt	r3, r1
 8009512:	460c      	mov	r4, r1
 8009514:	bfbc      	itt	lt
 8009516:	464c      	movlt	r4, r9
 8009518:	4699      	movlt	r9, r3
 800951a:	6927      	ldr	r7, [r4, #16]
 800951c:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8009520:	68a3      	ldr	r3, [r4, #8]
 8009522:	6861      	ldr	r1, [r4, #4]
 8009524:	eb07 060a 	add.w	r6, r7, sl
 8009528:	42b3      	cmp	r3, r6
 800952a:	b085      	sub	sp, #20
 800952c:	bfb8      	it	lt
 800952e:	3101      	addlt	r1, #1
 8009530:	f7ff fe8e 	bl	8009250 <_Balloc>
 8009534:	b930      	cbnz	r0, 8009544 <__multiply+0x44>
 8009536:	4602      	mov	r2, r0
 8009538:	4b44      	ldr	r3, [pc, #272]	; (800964c <__multiply+0x14c>)
 800953a:	4845      	ldr	r0, [pc, #276]	; (8009650 <__multiply+0x150>)
 800953c:	f240 115d 	movw	r1, #349	; 0x15d
 8009540:	f001 fcb8 	bl	800aeb4 <__assert_func>
 8009544:	f100 0514 	add.w	r5, r0, #20
 8009548:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800954c:	462b      	mov	r3, r5
 800954e:	2200      	movs	r2, #0
 8009550:	4543      	cmp	r3, r8
 8009552:	d321      	bcc.n	8009598 <__multiply+0x98>
 8009554:	f104 0314 	add.w	r3, r4, #20
 8009558:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800955c:	f109 0314 	add.w	r3, r9, #20
 8009560:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8009564:	9202      	str	r2, [sp, #8]
 8009566:	1b3a      	subs	r2, r7, r4
 8009568:	3a15      	subs	r2, #21
 800956a:	f022 0203 	bic.w	r2, r2, #3
 800956e:	3204      	adds	r2, #4
 8009570:	f104 0115 	add.w	r1, r4, #21
 8009574:	428f      	cmp	r7, r1
 8009576:	bf38      	it	cc
 8009578:	2204      	movcc	r2, #4
 800957a:	9201      	str	r2, [sp, #4]
 800957c:	9a02      	ldr	r2, [sp, #8]
 800957e:	9303      	str	r3, [sp, #12]
 8009580:	429a      	cmp	r2, r3
 8009582:	d80c      	bhi.n	800959e <__multiply+0x9e>
 8009584:	2e00      	cmp	r6, #0
 8009586:	dd03      	ble.n	8009590 <__multiply+0x90>
 8009588:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800958c:	2b00      	cmp	r3, #0
 800958e:	d05a      	beq.n	8009646 <__multiply+0x146>
 8009590:	6106      	str	r6, [r0, #16]
 8009592:	b005      	add	sp, #20
 8009594:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009598:	f843 2b04 	str.w	r2, [r3], #4
 800959c:	e7d8      	b.n	8009550 <__multiply+0x50>
 800959e:	f8b3 a000 	ldrh.w	sl, [r3]
 80095a2:	f1ba 0f00 	cmp.w	sl, #0
 80095a6:	d024      	beq.n	80095f2 <__multiply+0xf2>
 80095a8:	f104 0e14 	add.w	lr, r4, #20
 80095ac:	46a9      	mov	r9, r5
 80095ae:	f04f 0c00 	mov.w	ip, #0
 80095b2:	f85e 2b04 	ldr.w	r2, [lr], #4
 80095b6:	f8d9 1000 	ldr.w	r1, [r9]
 80095ba:	fa1f fb82 	uxth.w	fp, r2
 80095be:	b289      	uxth	r1, r1
 80095c0:	fb0a 110b 	mla	r1, sl, fp, r1
 80095c4:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 80095c8:	f8d9 2000 	ldr.w	r2, [r9]
 80095cc:	4461      	add	r1, ip
 80095ce:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80095d2:	fb0a c20b 	mla	r2, sl, fp, ip
 80095d6:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80095da:	b289      	uxth	r1, r1
 80095dc:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80095e0:	4577      	cmp	r7, lr
 80095e2:	f849 1b04 	str.w	r1, [r9], #4
 80095e6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80095ea:	d8e2      	bhi.n	80095b2 <__multiply+0xb2>
 80095ec:	9a01      	ldr	r2, [sp, #4]
 80095ee:	f845 c002 	str.w	ip, [r5, r2]
 80095f2:	9a03      	ldr	r2, [sp, #12]
 80095f4:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80095f8:	3304      	adds	r3, #4
 80095fa:	f1b9 0f00 	cmp.w	r9, #0
 80095fe:	d020      	beq.n	8009642 <__multiply+0x142>
 8009600:	6829      	ldr	r1, [r5, #0]
 8009602:	f104 0c14 	add.w	ip, r4, #20
 8009606:	46ae      	mov	lr, r5
 8009608:	f04f 0a00 	mov.w	sl, #0
 800960c:	f8bc b000 	ldrh.w	fp, [ip]
 8009610:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8009614:	fb09 220b 	mla	r2, r9, fp, r2
 8009618:	4492      	add	sl, r2
 800961a:	b289      	uxth	r1, r1
 800961c:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8009620:	f84e 1b04 	str.w	r1, [lr], #4
 8009624:	f85c 2b04 	ldr.w	r2, [ip], #4
 8009628:	f8be 1000 	ldrh.w	r1, [lr]
 800962c:	0c12      	lsrs	r2, r2, #16
 800962e:	fb09 1102 	mla	r1, r9, r2, r1
 8009632:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8009636:	4567      	cmp	r7, ip
 8009638:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800963c:	d8e6      	bhi.n	800960c <__multiply+0x10c>
 800963e:	9a01      	ldr	r2, [sp, #4]
 8009640:	50a9      	str	r1, [r5, r2]
 8009642:	3504      	adds	r5, #4
 8009644:	e79a      	b.n	800957c <__multiply+0x7c>
 8009646:	3e01      	subs	r6, #1
 8009648:	e79c      	b.n	8009584 <__multiply+0x84>
 800964a:	bf00      	nop
 800964c:	0800c0f8 	.word	0x0800c0f8
 8009650:	0800c1e8 	.word	0x0800c1e8

08009654 <__pow5mult>:
 8009654:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009658:	4615      	mov	r5, r2
 800965a:	f012 0203 	ands.w	r2, r2, #3
 800965e:	4606      	mov	r6, r0
 8009660:	460f      	mov	r7, r1
 8009662:	d007      	beq.n	8009674 <__pow5mult+0x20>
 8009664:	4c25      	ldr	r4, [pc, #148]	; (80096fc <__pow5mult+0xa8>)
 8009666:	3a01      	subs	r2, #1
 8009668:	2300      	movs	r3, #0
 800966a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800966e:	f7ff fe51 	bl	8009314 <__multadd>
 8009672:	4607      	mov	r7, r0
 8009674:	10ad      	asrs	r5, r5, #2
 8009676:	d03d      	beq.n	80096f4 <__pow5mult+0xa0>
 8009678:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800967a:	b97c      	cbnz	r4, 800969c <__pow5mult+0x48>
 800967c:	2010      	movs	r0, #16
 800967e:	f7ff fdbf 	bl	8009200 <malloc>
 8009682:	4602      	mov	r2, r0
 8009684:	6270      	str	r0, [r6, #36]	; 0x24
 8009686:	b928      	cbnz	r0, 8009694 <__pow5mult+0x40>
 8009688:	4b1d      	ldr	r3, [pc, #116]	; (8009700 <__pow5mult+0xac>)
 800968a:	481e      	ldr	r0, [pc, #120]	; (8009704 <__pow5mult+0xb0>)
 800968c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8009690:	f001 fc10 	bl	800aeb4 <__assert_func>
 8009694:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009698:	6004      	str	r4, [r0, #0]
 800969a:	60c4      	str	r4, [r0, #12]
 800969c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80096a0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80096a4:	b94c      	cbnz	r4, 80096ba <__pow5mult+0x66>
 80096a6:	f240 2171 	movw	r1, #625	; 0x271
 80096aa:	4630      	mov	r0, r6
 80096ac:	f7ff ff12 	bl	80094d4 <__i2b>
 80096b0:	2300      	movs	r3, #0
 80096b2:	f8c8 0008 	str.w	r0, [r8, #8]
 80096b6:	4604      	mov	r4, r0
 80096b8:	6003      	str	r3, [r0, #0]
 80096ba:	f04f 0900 	mov.w	r9, #0
 80096be:	07eb      	lsls	r3, r5, #31
 80096c0:	d50a      	bpl.n	80096d8 <__pow5mult+0x84>
 80096c2:	4639      	mov	r1, r7
 80096c4:	4622      	mov	r2, r4
 80096c6:	4630      	mov	r0, r6
 80096c8:	f7ff ff1a 	bl	8009500 <__multiply>
 80096cc:	4639      	mov	r1, r7
 80096ce:	4680      	mov	r8, r0
 80096d0:	4630      	mov	r0, r6
 80096d2:	f7ff fdfd 	bl	80092d0 <_Bfree>
 80096d6:	4647      	mov	r7, r8
 80096d8:	106d      	asrs	r5, r5, #1
 80096da:	d00b      	beq.n	80096f4 <__pow5mult+0xa0>
 80096dc:	6820      	ldr	r0, [r4, #0]
 80096de:	b938      	cbnz	r0, 80096f0 <__pow5mult+0x9c>
 80096e0:	4622      	mov	r2, r4
 80096e2:	4621      	mov	r1, r4
 80096e4:	4630      	mov	r0, r6
 80096e6:	f7ff ff0b 	bl	8009500 <__multiply>
 80096ea:	6020      	str	r0, [r4, #0]
 80096ec:	f8c0 9000 	str.w	r9, [r0]
 80096f0:	4604      	mov	r4, r0
 80096f2:	e7e4      	b.n	80096be <__pow5mult+0x6a>
 80096f4:	4638      	mov	r0, r7
 80096f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80096fa:	bf00      	nop
 80096fc:	0800c338 	.word	0x0800c338
 8009700:	0800c086 	.word	0x0800c086
 8009704:	0800c1e8 	.word	0x0800c1e8

08009708 <__lshift>:
 8009708:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800970c:	460c      	mov	r4, r1
 800970e:	6849      	ldr	r1, [r1, #4]
 8009710:	6923      	ldr	r3, [r4, #16]
 8009712:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8009716:	68a3      	ldr	r3, [r4, #8]
 8009718:	4607      	mov	r7, r0
 800971a:	4691      	mov	r9, r2
 800971c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009720:	f108 0601 	add.w	r6, r8, #1
 8009724:	42b3      	cmp	r3, r6
 8009726:	db0b      	blt.n	8009740 <__lshift+0x38>
 8009728:	4638      	mov	r0, r7
 800972a:	f7ff fd91 	bl	8009250 <_Balloc>
 800972e:	4605      	mov	r5, r0
 8009730:	b948      	cbnz	r0, 8009746 <__lshift+0x3e>
 8009732:	4602      	mov	r2, r0
 8009734:	4b2a      	ldr	r3, [pc, #168]	; (80097e0 <__lshift+0xd8>)
 8009736:	482b      	ldr	r0, [pc, #172]	; (80097e4 <__lshift+0xdc>)
 8009738:	f240 11d9 	movw	r1, #473	; 0x1d9
 800973c:	f001 fbba 	bl	800aeb4 <__assert_func>
 8009740:	3101      	adds	r1, #1
 8009742:	005b      	lsls	r3, r3, #1
 8009744:	e7ee      	b.n	8009724 <__lshift+0x1c>
 8009746:	2300      	movs	r3, #0
 8009748:	f100 0114 	add.w	r1, r0, #20
 800974c:	f100 0210 	add.w	r2, r0, #16
 8009750:	4618      	mov	r0, r3
 8009752:	4553      	cmp	r3, sl
 8009754:	db37      	blt.n	80097c6 <__lshift+0xbe>
 8009756:	6920      	ldr	r0, [r4, #16]
 8009758:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800975c:	f104 0314 	add.w	r3, r4, #20
 8009760:	f019 091f 	ands.w	r9, r9, #31
 8009764:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009768:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800976c:	d02f      	beq.n	80097ce <__lshift+0xc6>
 800976e:	f1c9 0e20 	rsb	lr, r9, #32
 8009772:	468a      	mov	sl, r1
 8009774:	f04f 0c00 	mov.w	ip, #0
 8009778:	681a      	ldr	r2, [r3, #0]
 800977a:	fa02 f209 	lsl.w	r2, r2, r9
 800977e:	ea42 020c 	orr.w	r2, r2, ip
 8009782:	f84a 2b04 	str.w	r2, [sl], #4
 8009786:	f853 2b04 	ldr.w	r2, [r3], #4
 800978a:	4298      	cmp	r0, r3
 800978c:	fa22 fc0e 	lsr.w	ip, r2, lr
 8009790:	d8f2      	bhi.n	8009778 <__lshift+0x70>
 8009792:	1b03      	subs	r3, r0, r4
 8009794:	3b15      	subs	r3, #21
 8009796:	f023 0303 	bic.w	r3, r3, #3
 800979a:	3304      	adds	r3, #4
 800979c:	f104 0215 	add.w	r2, r4, #21
 80097a0:	4290      	cmp	r0, r2
 80097a2:	bf38      	it	cc
 80097a4:	2304      	movcc	r3, #4
 80097a6:	f841 c003 	str.w	ip, [r1, r3]
 80097aa:	f1bc 0f00 	cmp.w	ip, #0
 80097ae:	d001      	beq.n	80097b4 <__lshift+0xac>
 80097b0:	f108 0602 	add.w	r6, r8, #2
 80097b4:	3e01      	subs	r6, #1
 80097b6:	4638      	mov	r0, r7
 80097b8:	612e      	str	r6, [r5, #16]
 80097ba:	4621      	mov	r1, r4
 80097bc:	f7ff fd88 	bl	80092d0 <_Bfree>
 80097c0:	4628      	mov	r0, r5
 80097c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80097c6:	f842 0f04 	str.w	r0, [r2, #4]!
 80097ca:	3301      	adds	r3, #1
 80097cc:	e7c1      	b.n	8009752 <__lshift+0x4a>
 80097ce:	3904      	subs	r1, #4
 80097d0:	f853 2b04 	ldr.w	r2, [r3], #4
 80097d4:	f841 2f04 	str.w	r2, [r1, #4]!
 80097d8:	4298      	cmp	r0, r3
 80097da:	d8f9      	bhi.n	80097d0 <__lshift+0xc8>
 80097dc:	e7ea      	b.n	80097b4 <__lshift+0xac>
 80097de:	bf00      	nop
 80097e0:	0800c0f8 	.word	0x0800c0f8
 80097e4:	0800c1e8 	.word	0x0800c1e8

080097e8 <__mcmp>:
 80097e8:	b530      	push	{r4, r5, lr}
 80097ea:	6902      	ldr	r2, [r0, #16]
 80097ec:	690c      	ldr	r4, [r1, #16]
 80097ee:	1b12      	subs	r2, r2, r4
 80097f0:	d10e      	bne.n	8009810 <__mcmp+0x28>
 80097f2:	f100 0314 	add.w	r3, r0, #20
 80097f6:	3114      	adds	r1, #20
 80097f8:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80097fc:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8009800:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8009804:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8009808:	42a5      	cmp	r5, r4
 800980a:	d003      	beq.n	8009814 <__mcmp+0x2c>
 800980c:	d305      	bcc.n	800981a <__mcmp+0x32>
 800980e:	2201      	movs	r2, #1
 8009810:	4610      	mov	r0, r2
 8009812:	bd30      	pop	{r4, r5, pc}
 8009814:	4283      	cmp	r3, r0
 8009816:	d3f3      	bcc.n	8009800 <__mcmp+0x18>
 8009818:	e7fa      	b.n	8009810 <__mcmp+0x28>
 800981a:	f04f 32ff 	mov.w	r2, #4294967295
 800981e:	e7f7      	b.n	8009810 <__mcmp+0x28>

08009820 <__mdiff>:
 8009820:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009824:	460c      	mov	r4, r1
 8009826:	4606      	mov	r6, r0
 8009828:	4611      	mov	r1, r2
 800982a:	4620      	mov	r0, r4
 800982c:	4690      	mov	r8, r2
 800982e:	f7ff ffdb 	bl	80097e8 <__mcmp>
 8009832:	1e05      	subs	r5, r0, #0
 8009834:	d110      	bne.n	8009858 <__mdiff+0x38>
 8009836:	4629      	mov	r1, r5
 8009838:	4630      	mov	r0, r6
 800983a:	f7ff fd09 	bl	8009250 <_Balloc>
 800983e:	b930      	cbnz	r0, 800984e <__mdiff+0x2e>
 8009840:	4b3a      	ldr	r3, [pc, #232]	; (800992c <__mdiff+0x10c>)
 8009842:	4602      	mov	r2, r0
 8009844:	f240 2132 	movw	r1, #562	; 0x232
 8009848:	4839      	ldr	r0, [pc, #228]	; (8009930 <__mdiff+0x110>)
 800984a:	f001 fb33 	bl	800aeb4 <__assert_func>
 800984e:	2301      	movs	r3, #1
 8009850:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8009854:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009858:	bfa4      	itt	ge
 800985a:	4643      	movge	r3, r8
 800985c:	46a0      	movge	r8, r4
 800985e:	4630      	mov	r0, r6
 8009860:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8009864:	bfa6      	itte	ge
 8009866:	461c      	movge	r4, r3
 8009868:	2500      	movge	r5, #0
 800986a:	2501      	movlt	r5, #1
 800986c:	f7ff fcf0 	bl	8009250 <_Balloc>
 8009870:	b920      	cbnz	r0, 800987c <__mdiff+0x5c>
 8009872:	4b2e      	ldr	r3, [pc, #184]	; (800992c <__mdiff+0x10c>)
 8009874:	4602      	mov	r2, r0
 8009876:	f44f 7110 	mov.w	r1, #576	; 0x240
 800987a:	e7e5      	b.n	8009848 <__mdiff+0x28>
 800987c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8009880:	6926      	ldr	r6, [r4, #16]
 8009882:	60c5      	str	r5, [r0, #12]
 8009884:	f104 0914 	add.w	r9, r4, #20
 8009888:	f108 0514 	add.w	r5, r8, #20
 800988c:	f100 0e14 	add.w	lr, r0, #20
 8009890:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8009894:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8009898:	f108 0210 	add.w	r2, r8, #16
 800989c:	46f2      	mov	sl, lr
 800989e:	2100      	movs	r1, #0
 80098a0:	f859 3b04 	ldr.w	r3, [r9], #4
 80098a4:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80098a8:	fa1f f883 	uxth.w	r8, r3
 80098ac:	fa11 f18b 	uxtah	r1, r1, fp
 80098b0:	0c1b      	lsrs	r3, r3, #16
 80098b2:	eba1 0808 	sub.w	r8, r1, r8
 80098b6:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80098ba:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80098be:	fa1f f888 	uxth.w	r8, r8
 80098c2:	1419      	asrs	r1, r3, #16
 80098c4:	454e      	cmp	r6, r9
 80098c6:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80098ca:	f84a 3b04 	str.w	r3, [sl], #4
 80098ce:	d8e7      	bhi.n	80098a0 <__mdiff+0x80>
 80098d0:	1b33      	subs	r3, r6, r4
 80098d2:	3b15      	subs	r3, #21
 80098d4:	f023 0303 	bic.w	r3, r3, #3
 80098d8:	3304      	adds	r3, #4
 80098da:	3415      	adds	r4, #21
 80098dc:	42a6      	cmp	r6, r4
 80098de:	bf38      	it	cc
 80098e0:	2304      	movcc	r3, #4
 80098e2:	441d      	add	r5, r3
 80098e4:	4473      	add	r3, lr
 80098e6:	469e      	mov	lr, r3
 80098e8:	462e      	mov	r6, r5
 80098ea:	4566      	cmp	r6, ip
 80098ec:	d30e      	bcc.n	800990c <__mdiff+0xec>
 80098ee:	f10c 0203 	add.w	r2, ip, #3
 80098f2:	1b52      	subs	r2, r2, r5
 80098f4:	f022 0203 	bic.w	r2, r2, #3
 80098f8:	3d03      	subs	r5, #3
 80098fa:	45ac      	cmp	ip, r5
 80098fc:	bf38      	it	cc
 80098fe:	2200      	movcc	r2, #0
 8009900:	441a      	add	r2, r3
 8009902:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8009906:	b17b      	cbz	r3, 8009928 <__mdiff+0x108>
 8009908:	6107      	str	r7, [r0, #16]
 800990a:	e7a3      	b.n	8009854 <__mdiff+0x34>
 800990c:	f856 8b04 	ldr.w	r8, [r6], #4
 8009910:	fa11 f288 	uxtah	r2, r1, r8
 8009914:	1414      	asrs	r4, r2, #16
 8009916:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800991a:	b292      	uxth	r2, r2
 800991c:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8009920:	f84e 2b04 	str.w	r2, [lr], #4
 8009924:	1421      	asrs	r1, r4, #16
 8009926:	e7e0      	b.n	80098ea <__mdiff+0xca>
 8009928:	3f01      	subs	r7, #1
 800992a:	e7ea      	b.n	8009902 <__mdiff+0xe2>
 800992c:	0800c0f8 	.word	0x0800c0f8
 8009930:	0800c1e8 	.word	0x0800c1e8

08009934 <__ulp>:
 8009934:	b082      	sub	sp, #8
 8009936:	ed8d 0b00 	vstr	d0, [sp]
 800993a:	9b01      	ldr	r3, [sp, #4]
 800993c:	4912      	ldr	r1, [pc, #72]	; (8009988 <__ulp+0x54>)
 800993e:	4019      	ands	r1, r3
 8009940:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 8009944:	2900      	cmp	r1, #0
 8009946:	dd05      	ble.n	8009954 <__ulp+0x20>
 8009948:	2200      	movs	r2, #0
 800994a:	460b      	mov	r3, r1
 800994c:	ec43 2b10 	vmov	d0, r2, r3
 8009950:	b002      	add	sp, #8
 8009952:	4770      	bx	lr
 8009954:	4249      	negs	r1, r1
 8009956:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800995a:	ea4f 5021 	mov.w	r0, r1, asr #20
 800995e:	f04f 0200 	mov.w	r2, #0
 8009962:	f04f 0300 	mov.w	r3, #0
 8009966:	da04      	bge.n	8009972 <__ulp+0x3e>
 8009968:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800996c:	fa41 f300 	asr.w	r3, r1, r0
 8009970:	e7ec      	b.n	800994c <__ulp+0x18>
 8009972:	f1a0 0114 	sub.w	r1, r0, #20
 8009976:	291e      	cmp	r1, #30
 8009978:	bfda      	itte	le
 800997a:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800997e:	fa20 f101 	lsrle.w	r1, r0, r1
 8009982:	2101      	movgt	r1, #1
 8009984:	460a      	mov	r2, r1
 8009986:	e7e1      	b.n	800994c <__ulp+0x18>
 8009988:	7ff00000 	.word	0x7ff00000

0800998c <__b2d>:
 800998c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800998e:	6905      	ldr	r5, [r0, #16]
 8009990:	f100 0714 	add.w	r7, r0, #20
 8009994:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8009998:	1f2e      	subs	r6, r5, #4
 800999a:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800999e:	4620      	mov	r0, r4
 80099a0:	f7ff fd48 	bl	8009434 <__hi0bits>
 80099a4:	f1c0 0320 	rsb	r3, r0, #32
 80099a8:	280a      	cmp	r0, #10
 80099aa:	f8df c07c 	ldr.w	ip, [pc, #124]	; 8009a28 <__b2d+0x9c>
 80099ae:	600b      	str	r3, [r1, #0]
 80099b0:	dc14      	bgt.n	80099dc <__b2d+0x50>
 80099b2:	f1c0 0e0b 	rsb	lr, r0, #11
 80099b6:	fa24 f10e 	lsr.w	r1, r4, lr
 80099ba:	42b7      	cmp	r7, r6
 80099bc:	ea41 030c 	orr.w	r3, r1, ip
 80099c0:	bf34      	ite	cc
 80099c2:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 80099c6:	2100      	movcs	r1, #0
 80099c8:	3015      	adds	r0, #21
 80099ca:	fa04 f000 	lsl.w	r0, r4, r0
 80099ce:	fa21 f10e 	lsr.w	r1, r1, lr
 80099d2:	ea40 0201 	orr.w	r2, r0, r1
 80099d6:	ec43 2b10 	vmov	d0, r2, r3
 80099da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80099dc:	42b7      	cmp	r7, r6
 80099de:	bf3a      	itte	cc
 80099e0:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 80099e4:	f1a5 0608 	subcc.w	r6, r5, #8
 80099e8:	2100      	movcs	r1, #0
 80099ea:	380b      	subs	r0, #11
 80099ec:	d017      	beq.n	8009a1e <__b2d+0x92>
 80099ee:	f1c0 0c20 	rsb	ip, r0, #32
 80099f2:	fa04 f500 	lsl.w	r5, r4, r0
 80099f6:	42be      	cmp	r6, r7
 80099f8:	fa21 f40c 	lsr.w	r4, r1, ip
 80099fc:	ea45 0504 	orr.w	r5, r5, r4
 8009a00:	bf8c      	ite	hi
 8009a02:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8009a06:	2400      	movls	r4, #0
 8009a08:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 8009a0c:	fa01 f000 	lsl.w	r0, r1, r0
 8009a10:	fa24 f40c 	lsr.w	r4, r4, ip
 8009a14:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8009a18:	ea40 0204 	orr.w	r2, r0, r4
 8009a1c:	e7db      	b.n	80099d6 <__b2d+0x4a>
 8009a1e:	ea44 030c 	orr.w	r3, r4, ip
 8009a22:	460a      	mov	r2, r1
 8009a24:	e7d7      	b.n	80099d6 <__b2d+0x4a>
 8009a26:	bf00      	nop
 8009a28:	3ff00000 	.word	0x3ff00000

08009a2c <__d2b>:
 8009a2c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009a30:	4689      	mov	r9, r1
 8009a32:	2101      	movs	r1, #1
 8009a34:	ec57 6b10 	vmov	r6, r7, d0
 8009a38:	4690      	mov	r8, r2
 8009a3a:	f7ff fc09 	bl	8009250 <_Balloc>
 8009a3e:	4604      	mov	r4, r0
 8009a40:	b930      	cbnz	r0, 8009a50 <__d2b+0x24>
 8009a42:	4602      	mov	r2, r0
 8009a44:	4b25      	ldr	r3, [pc, #148]	; (8009adc <__d2b+0xb0>)
 8009a46:	4826      	ldr	r0, [pc, #152]	; (8009ae0 <__d2b+0xb4>)
 8009a48:	f240 310a 	movw	r1, #778	; 0x30a
 8009a4c:	f001 fa32 	bl	800aeb4 <__assert_func>
 8009a50:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8009a54:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8009a58:	bb35      	cbnz	r5, 8009aa8 <__d2b+0x7c>
 8009a5a:	2e00      	cmp	r6, #0
 8009a5c:	9301      	str	r3, [sp, #4]
 8009a5e:	d028      	beq.n	8009ab2 <__d2b+0x86>
 8009a60:	4668      	mov	r0, sp
 8009a62:	9600      	str	r6, [sp, #0]
 8009a64:	f7ff fd06 	bl	8009474 <__lo0bits>
 8009a68:	9900      	ldr	r1, [sp, #0]
 8009a6a:	b300      	cbz	r0, 8009aae <__d2b+0x82>
 8009a6c:	9a01      	ldr	r2, [sp, #4]
 8009a6e:	f1c0 0320 	rsb	r3, r0, #32
 8009a72:	fa02 f303 	lsl.w	r3, r2, r3
 8009a76:	430b      	orrs	r3, r1
 8009a78:	40c2      	lsrs	r2, r0
 8009a7a:	6163      	str	r3, [r4, #20]
 8009a7c:	9201      	str	r2, [sp, #4]
 8009a7e:	9b01      	ldr	r3, [sp, #4]
 8009a80:	61a3      	str	r3, [r4, #24]
 8009a82:	2b00      	cmp	r3, #0
 8009a84:	bf14      	ite	ne
 8009a86:	2202      	movne	r2, #2
 8009a88:	2201      	moveq	r2, #1
 8009a8a:	6122      	str	r2, [r4, #16]
 8009a8c:	b1d5      	cbz	r5, 8009ac4 <__d2b+0x98>
 8009a8e:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8009a92:	4405      	add	r5, r0
 8009a94:	f8c9 5000 	str.w	r5, [r9]
 8009a98:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8009a9c:	f8c8 0000 	str.w	r0, [r8]
 8009aa0:	4620      	mov	r0, r4
 8009aa2:	b003      	add	sp, #12
 8009aa4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009aa8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009aac:	e7d5      	b.n	8009a5a <__d2b+0x2e>
 8009aae:	6161      	str	r1, [r4, #20]
 8009ab0:	e7e5      	b.n	8009a7e <__d2b+0x52>
 8009ab2:	a801      	add	r0, sp, #4
 8009ab4:	f7ff fcde 	bl	8009474 <__lo0bits>
 8009ab8:	9b01      	ldr	r3, [sp, #4]
 8009aba:	6163      	str	r3, [r4, #20]
 8009abc:	2201      	movs	r2, #1
 8009abe:	6122      	str	r2, [r4, #16]
 8009ac0:	3020      	adds	r0, #32
 8009ac2:	e7e3      	b.n	8009a8c <__d2b+0x60>
 8009ac4:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8009ac8:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8009acc:	f8c9 0000 	str.w	r0, [r9]
 8009ad0:	6918      	ldr	r0, [r3, #16]
 8009ad2:	f7ff fcaf 	bl	8009434 <__hi0bits>
 8009ad6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8009ada:	e7df      	b.n	8009a9c <__d2b+0x70>
 8009adc:	0800c0f8 	.word	0x0800c0f8
 8009ae0:	0800c1e8 	.word	0x0800c1e8

08009ae4 <__ratio>:
 8009ae4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009ae8:	4688      	mov	r8, r1
 8009aea:	4669      	mov	r1, sp
 8009aec:	4681      	mov	r9, r0
 8009aee:	f7ff ff4d 	bl	800998c <__b2d>
 8009af2:	a901      	add	r1, sp, #4
 8009af4:	4640      	mov	r0, r8
 8009af6:	ec55 4b10 	vmov	r4, r5, d0
 8009afa:	f7ff ff47 	bl	800998c <__b2d>
 8009afe:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8009b02:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8009b06:	eba3 0c02 	sub.w	ip, r3, r2
 8009b0a:	e9dd 3200 	ldrd	r3, r2, [sp]
 8009b0e:	1a9b      	subs	r3, r3, r2
 8009b10:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8009b14:	ec51 0b10 	vmov	r0, r1, d0
 8009b18:	2b00      	cmp	r3, #0
 8009b1a:	bfd6      	itet	le
 8009b1c:	460a      	movle	r2, r1
 8009b1e:	462a      	movgt	r2, r5
 8009b20:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8009b24:	468b      	mov	fp, r1
 8009b26:	462f      	mov	r7, r5
 8009b28:	bfd4      	ite	le
 8009b2a:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8009b2e:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8009b32:	4620      	mov	r0, r4
 8009b34:	ee10 2a10 	vmov	r2, s0
 8009b38:	465b      	mov	r3, fp
 8009b3a:	4639      	mov	r1, r7
 8009b3c:	f7f6 fe86 	bl	800084c <__aeabi_ddiv>
 8009b40:	ec41 0b10 	vmov	d0, r0, r1
 8009b44:	b003      	add	sp, #12
 8009b46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08009b4a <__copybits>:
 8009b4a:	3901      	subs	r1, #1
 8009b4c:	b570      	push	{r4, r5, r6, lr}
 8009b4e:	1149      	asrs	r1, r1, #5
 8009b50:	6914      	ldr	r4, [r2, #16]
 8009b52:	3101      	adds	r1, #1
 8009b54:	f102 0314 	add.w	r3, r2, #20
 8009b58:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8009b5c:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8009b60:	1f05      	subs	r5, r0, #4
 8009b62:	42a3      	cmp	r3, r4
 8009b64:	d30c      	bcc.n	8009b80 <__copybits+0x36>
 8009b66:	1aa3      	subs	r3, r4, r2
 8009b68:	3b11      	subs	r3, #17
 8009b6a:	f023 0303 	bic.w	r3, r3, #3
 8009b6e:	3211      	adds	r2, #17
 8009b70:	42a2      	cmp	r2, r4
 8009b72:	bf88      	it	hi
 8009b74:	2300      	movhi	r3, #0
 8009b76:	4418      	add	r0, r3
 8009b78:	2300      	movs	r3, #0
 8009b7a:	4288      	cmp	r0, r1
 8009b7c:	d305      	bcc.n	8009b8a <__copybits+0x40>
 8009b7e:	bd70      	pop	{r4, r5, r6, pc}
 8009b80:	f853 6b04 	ldr.w	r6, [r3], #4
 8009b84:	f845 6f04 	str.w	r6, [r5, #4]!
 8009b88:	e7eb      	b.n	8009b62 <__copybits+0x18>
 8009b8a:	f840 3b04 	str.w	r3, [r0], #4
 8009b8e:	e7f4      	b.n	8009b7a <__copybits+0x30>

08009b90 <__any_on>:
 8009b90:	f100 0214 	add.w	r2, r0, #20
 8009b94:	6900      	ldr	r0, [r0, #16]
 8009b96:	114b      	asrs	r3, r1, #5
 8009b98:	4298      	cmp	r0, r3
 8009b9a:	b510      	push	{r4, lr}
 8009b9c:	db11      	blt.n	8009bc2 <__any_on+0x32>
 8009b9e:	dd0a      	ble.n	8009bb6 <__any_on+0x26>
 8009ba0:	f011 011f 	ands.w	r1, r1, #31
 8009ba4:	d007      	beq.n	8009bb6 <__any_on+0x26>
 8009ba6:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8009baa:	fa24 f001 	lsr.w	r0, r4, r1
 8009bae:	fa00 f101 	lsl.w	r1, r0, r1
 8009bb2:	428c      	cmp	r4, r1
 8009bb4:	d10b      	bne.n	8009bce <__any_on+0x3e>
 8009bb6:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8009bba:	4293      	cmp	r3, r2
 8009bbc:	d803      	bhi.n	8009bc6 <__any_on+0x36>
 8009bbe:	2000      	movs	r0, #0
 8009bc0:	bd10      	pop	{r4, pc}
 8009bc2:	4603      	mov	r3, r0
 8009bc4:	e7f7      	b.n	8009bb6 <__any_on+0x26>
 8009bc6:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8009bca:	2900      	cmp	r1, #0
 8009bcc:	d0f5      	beq.n	8009bba <__any_on+0x2a>
 8009bce:	2001      	movs	r0, #1
 8009bd0:	e7f6      	b.n	8009bc0 <__any_on+0x30>

08009bd2 <_calloc_r>:
 8009bd2:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009bd4:	fba1 2402 	umull	r2, r4, r1, r2
 8009bd8:	b94c      	cbnz	r4, 8009bee <_calloc_r+0x1c>
 8009bda:	4611      	mov	r1, r2
 8009bdc:	9201      	str	r2, [sp, #4]
 8009bde:	f000 f87b 	bl	8009cd8 <_malloc_r>
 8009be2:	9a01      	ldr	r2, [sp, #4]
 8009be4:	4605      	mov	r5, r0
 8009be6:	b930      	cbnz	r0, 8009bf6 <_calloc_r+0x24>
 8009be8:	4628      	mov	r0, r5
 8009bea:	b003      	add	sp, #12
 8009bec:	bd30      	pop	{r4, r5, pc}
 8009bee:	220c      	movs	r2, #12
 8009bf0:	6002      	str	r2, [r0, #0]
 8009bf2:	2500      	movs	r5, #0
 8009bf4:	e7f8      	b.n	8009be8 <_calloc_r+0x16>
 8009bf6:	4621      	mov	r1, r4
 8009bf8:	f7fb ffd6 	bl	8005ba8 <memset>
 8009bfc:	e7f4      	b.n	8009be8 <_calloc_r+0x16>
	...

08009c00 <_free_r>:
 8009c00:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009c02:	2900      	cmp	r1, #0
 8009c04:	d044      	beq.n	8009c90 <_free_r+0x90>
 8009c06:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009c0a:	9001      	str	r0, [sp, #4]
 8009c0c:	2b00      	cmp	r3, #0
 8009c0e:	f1a1 0404 	sub.w	r4, r1, #4
 8009c12:	bfb8      	it	lt
 8009c14:	18e4      	addlt	r4, r4, r3
 8009c16:	f001 f9db 	bl	800afd0 <__malloc_lock>
 8009c1a:	4a1e      	ldr	r2, [pc, #120]	; (8009c94 <_free_r+0x94>)
 8009c1c:	9801      	ldr	r0, [sp, #4]
 8009c1e:	6813      	ldr	r3, [r2, #0]
 8009c20:	b933      	cbnz	r3, 8009c30 <_free_r+0x30>
 8009c22:	6063      	str	r3, [r4, #4]
 8009c24:	6014      	str	r4, [r2, #0]
 8009c26:	b003      	add	sp, #12
 8009c28:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009c2c:	f001 b9d6 	b.w	800afdc <__malloc_unlock>
 8009c30:	42a3      	cmp	r3, r4
 8009c32:	d908      	bls.n	8009c46 <_free_r+0x46>
 8009c34:	6825      	ldr	r5, [r4, #0]
 8009c36:	1961      	adds	r1, r4, r5
 8009c38:	428b      	cmp	r3, r1
 8009c3a:	bf01      	itttt	eq
 8009c3c:	6819      	ldreq	r1, [r3, #0]
 8009c3e:	685b      	ldreq	r3, [r3, #4]
 8009c40:	1949      	addeq	r1, r1, r5
 8009c42:	6021      	streq	r1, [r4, #0]
 8009c44:	e7ed      	b.n	8009c22 <_free_r+0x22>
 8009c46:	461a      	mov	r2, r3
 8009c48:	685b      	ldr	r3, [r3, #4]
 8009c4a:	b10b      	cbz	r3, 8009c50 <_free_r+0x50>
 8009c4c:	42a3      	cmp	r3, r4
 8009c4e:	d9fa      	bls.n	8009c46 <_free_r+0x46>
 8009c50:	6811      	ldr	r1, [r2, #0]
 8009c52:	1855      	adds	r5, r2, r1
 8009c54:	42a5      	cmp	r5, r4
 8009c56:	d10b      	bne.n	8009c70 <_free_r+0x70>
 8009c58:	6824      	ldr	r4, [r4, #0]
 8009c5a:	4421      	add	r1, r4
 8009c5c:	1854      	adds	r4, r2, r1
 8009c5e:	42a3      	cmp	r3, r4
 8009c60:	6011      	str	r1, [r2, #0]
 8009c62:	d1e0      	bne.n	8009c26 <_free_r+0x26>
 8009c64:	681c      	ldr	r4, [r3, #0]
 8009c66:	685b      	ldr	r3, [r3, #4]
 8009c68:	6053      	str	r3, [r2, #4]
 8009c6a:	4421      	add	r1, r4
 8009c6c:	6011      	str	r1, [r2, #0]
 8009c6e:	e7da      	b.n	8009c26 <_free_r+0x26>
 8009c70:	d902      	bls.n	8009c78 <_free_r+0x78>
 8009c72:	230c      	movs	r3, #12
 8009c74:	6003      	str	r3, [r0, #0]
 8009c76:	e7d6      	b.n	8009c26 <_free_r+0x26>
 8009c78:	6825      	ldr	r5, [r4, #0]
 8009c7a:	1961      	adds	r1, r4, r5
 8009c7c:	428b      	cmp	r3, r1
 8009c7e:	bf04      	itt	eq
 8009c80:	6819      	ldreq	r1, [r3, #0]
 8009c82:	685b      	ldreq	r3, [r3, #4]
 8009c84:	6063      	str	r3, [r4, #4]
 8009c86:	bf04      	itt	eq
 8009c88:	1949      	addeq	r1, r1, r5
 8009c8a:	6021      	streq	r1, [r4, #0]
 8009c8c:	6054      	str	r4, [r2, #4]
 8009c8e:	e7ca      	b.n	8009c26 <_free_r+0x26>
 8009c90:	b003      	add	sp, #12
 8009c92:	bd30      	pop	{r4, r5, pc}
 8009c94:	2000033c 	.word	0x2000033c

08009c98 <sbrk_aligned>:
 8009c98:	b570      	push	{r4, r5, r6, lr}
 8009c9a:	4e0e      	ldr	r6, [pc, #56]	; (8009cd4 <sbrk_aligned+0x3c>)
 8009c9c:	460c      	mov	r4, r1
 8009c9e:	6831      	ldr	r1, [r6, #0]
 8009ca0:	4605      	mov	r5, r0
 8009ca2:	b911      	cbnz	r1, 8009caa <sbrk_aligned+0x12>
 8009ca4:	f000 ff00 	bl	800aaa8 <_sbrk_r>
 8009ca8:	6030      	str	r0, [r6, #0]
 8009caa:	4621      	mov	r1, r4
 8009cac:	4628      	mov	r0, r5
 8009cae:	f000 fefb 	bl	800aaa8 <_sbrk_r>
 8009cb2:	1c43      	adds	r3, r0, #1
 8009cb4:	d00a      	beq.n	8009ccc <sbrk_aligned+0x34>
 8009cb6:	1cc4      	adds	r4, r0, #3
 8009cb8:	f024 0403 	bic.w	r4, r4, #3
 8009cbc:	42a0      	cmp	r0, r4
 8009cbe:	d007      	beq.n	8009cd0 <sbrk_aligned+0x38>
 8009cc0:	1a21      	subs	r1, r4, r0
 8009cc2:	4628      	mov	r0, r5
 8009cc4:	f000 fef0 	bl	800aaa8 <_sbrk_r>
 8009cc8:	3001      	adds	r0, #1
 8009cca:	d101      	bne.n	8009cd0 <sbrk_aligned+0x38>
 8009ccc:	f04f 34ff 	mov.w	r4, #4294967295
 8009cd0:	4620      	mov	r0, r4
 8009cd2:	bd70      	pop	{r4, r5, r6, pc}
 8009cd4:	20000340 	.word	0x20000340

08009cd8 <_malloc_r>:
 8009cd8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009cdc:	1ccd      	adds	r5, r1, #3
 8009cde:	f025 0503 	bic.w	r5, r5, #3
 8009ce2:	3508      	adds	r5, #8
 8009ce4:	2d0c      	cmp	r5, #12
 8009ce6:	bf38      	it	cc
 8009ce8:	250c      	movcc	r5, #12
 8009cea:	2d00      	cmp	r5, #0
 8009cec:	4607      	mov	r7, r0
 8009cee:	db01      	blt.n	8009cf4 <_malloc_r+0x1c>
 8009cf0:	42a9      	cmp	r1, r5
 8009cf2:	d905      	bls.n	8009d00 <_malloc_r+0x28>
 8009cf4:	230c      	movs	r3, #12
 8009cf6:	603b      	str	r3, [r7, #0]
 8009cf8:	2600      	movs	r6, #0
 8009cfa:	4630      	mov	r0, r6
 8009cfc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009d00:	4e2e      	ldr	r6, [pc, #184]	; (8009dbc <_malloc_r+0xe4>)
 8009d02:	f001 f965 	bl	800afd0 <__malloc_lock>
 8009d06:	6833      	ldr	r3, [r6, #0]
 8009d08:	461c      	mov	r4, r3
 8009d0a:	bb34      	cbnz	r4, 8009d5a <_malloc_r+0x82>
 8009d0c:	4629      	mov	r1, r5
 8009d0e:	4638      	mov	r0, r7
 8009d10:	f7ff ffc2 	bl	8009c98 <sbrk_aligned>
 8009d14:	1c43      	adds	r3, r0, #1
 8009d16:	4604      	mov	r4, r0
 8009d18:	d14d      	bne.n	8009db6 <_malloc_r+0xde>
 8009d1a:	6834      	ldr	r4, [r6, #0]
 8009d1c:	4626      	mov	r6, r4
 8009d1e:	2e00      	cmp	r6, #0
 8009d20:	d140      	bne.n	8009da4 <_malloc_r+0xcc>
 8009d22:	6823      	ldr	r3, [r4, #0]
 8009d24:	4631      	mov	r1, r6
 8009d26:	4638      	mov	r0, r7
 8009d28:	eb04 0803 	add.w	r8, r4, r3
 8009d2c:	f000 febc 	bl	800aaa8 <_sbrk_r>
 8009d30:	4580      	cmp	r8, r0
 8009d32:	d13a      	bne.n	8009daa <_malloc_r+0xd2>
 8009d34:	6821      	ldr	r1, [r4, #0]
 8009d36:	3503      	adds	r5, #3
 8009d38:	1a6d      	subs	r5, r5, r1
 8009d3a:	f025 0503 	bic.w	r5, r5, #3
 8009d3e:	3508      	adds	r5, #8
 8009d40:	2d0c      	cmp	r5, #12
 8009d42:	bf38      	it	cc
 8009d44:	250c      	movcc	r5, #12
 8009d46:	4629      	mov	r1, r5
 8009d48:	4638      	mov	r0, r7
 8009d4a:	f7ff ffa5 	bl	8009c98 <sbrk_aligned>
 8009d4e:	3001      	adds	r0, #1
 8009d50:	d02b      	beq.n	8009daa <_malloc_r+0xd2>
 8009d52:	6823      	ldr	r3, [r4, #0]
 8009d54:	442b      	add	r3, r5
 8009d56:	6023      	str	r3, [r4, #0]
 8009d58:	e00e      	b.n	8009d78 <_malloc_r+0xa0>
 8009d5a:	6822      	ldr	r2, [r4, #0]
 8009d5c:	1b52      	subs	r2, r2, r5
 8009d5e:	d41e      	bmi.n	8009d9e <_malloc_r+0xc6>
 8009d60:	2a0b      	cmp	r2, #11
 8009d62:	d916      	bls.n	8009d92 <_malloc_r+0xba>
 8009d64:	1961      	adds	r1, r4, r5
 8009d66:	42a3      	cmp	r3, r4
 8009d68:	6025      	str	r5, [r4, #0]
 8009d6a:	bf18      	it	ne
 8009d6c:	6059      	strne	r1, [r3, #4]
 8009d6e:	6863      	ldr	r3, [r4, #4]
 8009d70:	bf08      	it	eq
 8009d72:	6031      	streq	r1, [r6, #0]
 8009d74:	5162      	str	r2, [r4, r5]
 8009d76:	604b      	str	r3, [r1, #4]
 8009d78:	4638      	mov	r0, r7
 8009d7a:	f104 060b 	add.w	r6, r4, #11
 8009d7e:	f001 f92d 	bl	800afdc <__malloc_unlock>
 8009d82:	f026 0607 	bic.w	r6, r6, #7
 8009d86:	1d23      	adds	r3, r4, #4
 8009d88:	1af2      	subs	r2, r6, r3
 8009d8a:	d0b6      	beq.n	8009cfa <_malloc_r+0x22>
 8009d8c:	1b9b      	subs	r3, r3, r6
 8009d8e:	50a3      	str	r3, [r4, r2]
 8009d90:	e7b3      	b.n	8009cfa <_malloc_r+0x22>
 8009d92:	6862      	ldr	r2, [r4, #4]
 8009d94:	42a3      	cmp	r3, r4
 8009d96:	bf0c      	ite	eq
 8009d98:	6032      	streq	r2, [r6, #0]
 8009d9a:	605a      	strne	r2, [r3, #4]
 8009d9c:	e7ec      	b.n	8009d78 <_malloc_r+0xa0>
 8009d9e:	4623      	mov	r3, r4
 8009da0:	6864      	ldr	r4, [r4, #4]
 8009da2:	e7b2      	b.n	8009d0a <_malloc_r+0x32>
 8009da4:	4634      	mov	r4, r6
 8009da6:	6876      	ldr	r6, [r6, #4]
 8009da8:	e7b9      	b.n	8009d1e <_malloc_r+0x46>
 8009daa:	230c      	movs	r3, #12
 8009dac:	603b      	str	r3, [r7, #0]
 8009dae:	4638      	mov	r0, r7
 8009db0:	f001 f914 	bl	800afdc <__malloc_unlock>
 8009db4:	e7a1      	b.n	8009cfa <_malloc_r+0x22>
 8009db6:	6025      	str	r5, [r4, #0]
 8009db8:	e7de      	b.n	8009d78 <_malloc_r+0xa0>
 8009dba:	bf00      	nop
 8009dbc:	2000033c 	.word	0x2000033c

08009dc0 <__ssputs_r>:
 8009dc0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009dc4:	688e      	ldr	r6, [r1, #8]
 8009dc6:	429e      	cmp	r6, r3
 8009dc8:	4682      	mov	sl, r0
 8009dca:	460c      	mov	r4, r1
 8009dcc:	4690      	mov	r8, r2
 8009dce:	461f      	mov	r7, r3
 8009dd0:	d838      	bhi.n	8009e44 <__ssputs_r+0x84>
 8009dd2:	898a      	ldrh	r2, [r1, #12]
 8009dd4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009dd8:	d032      	beq.n	8009e40 <__ssputs_r+0x80>
 8009dda:	6825      	ldr	r5, [r4, #0]
 8009ddc:	6909      	ldr	r1, [r1, #16]
 8009dde:	eba5 0901 	sub.w	r9, r5, r1
 8009de2:	6965      	ldr	r5, [r4, #20]
 8009de4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009de8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009dec:	3301      	adds	r3, #1
 8009dee:	444b      	add	r3, r9
 8009df0:	106d      	asrs	r5, r5, #1
 8009df2:	429d      	cmp	r5, r3
 8009df4:	bf38      	it	cc
 8009df6:	461d      	movcc	r5, r3
 8009df8:	0553      	lsls	r3, r2, #21
 8009dfa:	d531      	bpl.n	8009e60 <__ssputs_r+0xa0>
 8009dfc:	4629      	mov	r1, r5
 8009dfe:	f7ff ff6b 	bl	8009cd8 <_malloc_r>
 8009e02:	4606      	mov	r6, r0
 8009e04:	b950      	cbnz	r0, 8009e1c <__ssputs_r+0x5c>
 8009e06:	230c      	movs	r3, #12
 8009e08:	f8ca 3000 	str.w	r3, [sl]
 8009e0c:	89a3      	ldrh	r3, [r4, #12]
 8009e0e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009e12:	81a3      	strh	r3, [r4, #12]
 8009e14:	f04f 30ff 	mov.w	r0, #4294967295
 8009e18:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009e1c:	6921      	ldr	r1, [r4, #16]
 8009e1e:	464a      	mov	r2, r9
 8009e20:	f7ff fa08 	bl	8009234 <memcpy>
 8009e24:	89a3      	ldrh	r3, [r4, #12]
 8009e26:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009e2a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009e2e:	81a3      	strh	r3, [r4, #12]
 8009e30:	6126      	str	r6, [r4, #16]
 8009e32:	6165      	str	r5, [r4, #20]
 8009e34:	444e      	add	r6, r9
 8009e36:	eba5 0509 	sub.w	r5, r5, r9
 8009e3a:	6026      	str	r6, [r4, #0]
 8009e3c:	60a5      	str	r5, [r4, #8]
 8009e3e:	463e      	mov	r6, r7
 8009e40:	42be      	cmp	r6, r7
 8009e42:	d900      	bls.n	8009e46 <__ssputs_r+0x86>
 8009e44:	463e      	mov	r6, r7
 8009e46:	6820      	ldr	r0, [r4, #0]
 8009e48:	4632      	mov	r2, r6
 8009e4a:	4641      	mov	r1, r8
 8009e4c:	f001 f8a6 	bl	800af9c <memmove>
 8009e50:	68a3      	ldr	r3, [r4, #8]
 8009e52:	1b9b      	subs	r3, r3, r6
 8009e54:	60a3      	str	r3, [r4, #8]
 8009e56:	6823      	ldr	r3, [r4, #0]
 8009e58:	4433      	add	r3, r6
 8009e5a:	6023      	str	r3, [r4, #0]
 8009e5c:	2000      	movs	r0, #0
 8009e5e:	e7db      	b.n	8009e18 <__ssputs_r+0x58>
 8009e60:	462a      	mov	r2, r5
 8009e62:	f001 f8c1 	bl	800afe8 <_realloc_r>
 8009e66:	4606      	mov	r6, r0
 8009e68:	2800      	cmp	r0, #0
 8009e6a:	d1e1      	bne.n	8009e30 <__ssputs_r+0x70>
 8009e6c:	6921      	ldr	r1, [r4, #16]
 8009e6e:	4650      	mov	r0, sl
 8009e70:	f7ff fec6 	bl	8009c00 <_free_r>
 8009e74:	e7c7      	b.n	8009e06 <__ssputs_r+0x46>
	...

08009e78 <_svfiprintf_r>:
 8009e78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009e7c:	4698      	mov	r8, r3
 8009e7e:	898b      	ldrh	r3, [r1, #12]
 8009e80:	061b      	lsls	r3, r3, #24
 8009e82:	b09d      	sub	sp, #116	; 0x74
 8009e84:	4607      	mov	r7, r0
 8009e86:	460d      	mov	r5, r1
 8009e88:	4614      	mov	r4, r2
 8009e8a:	d50e      	bpl.n	8009eaa <_svfiprintf_r+0x32>
 8009e8c:	690b      	ldr	r3, [r1, #16]
 8009e8e:	b963      	cbnz	r3, 8009eaa <_svfiprintf_r+0x32>
 8009e90:	2140      	movs	r1, #64	; 0x40
 8009e92:	f7ff ff21 	bl	8009cd8 <_malloc_r>
 8009e96:	6028      	str	r0, [r5, #0]
 8009e98:	6128      	str	r0, [r5, #16]
 8009e9a:	b920      	cbnz	r0, 8009ea6 <_svfiprintf_r+0x2e>
 8009e9c:	230c      	movs	r3, #12
 8009e9e:	603b      	str	r3, [r7, #0]
 8009ea0:	f04f 30ff 	mov.w	r0, #4294967295
 8009ea4:	e0d1      	b.n	800a04a <_svfiprintf_r+0x1d2>
 8009ea6:	2340      	movs	r3, #64	; 0x40
 8009ea8:	616b      	str	r3, [r5, #20]
 8009eaa:	2300      	movs	r3, #0
 8009eac:	9309      	str	r3, [sp, #36]	; 0x24
 8009eae:	2320      	movs	r3, #32
 8009eb0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009eb4:	f8cd 800c 	str.w	r8, [sp, #12]
 8009eb8:	2330      	movs	r3, #48	; 0x30
 8009eba:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800a064 <_svfiprintf_r+0x1ec>
 8009ebe:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009ec2:	f04f 0901 	mov.w	r9, #1
 8009ec6:	4623      	mov	r3, r4
 8009ec8:	469a      	mov	sl, r3
 8009eca:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009ece:	b10a      	cbz	r2, 8009ed4 <_svfiprintf_r+0x5c>
 8009ed0:	2a25      	cmp	r2, #37	; 0x25
 8009ed2:	d1f9      	bne.n	8009ec8 <_svfiprintf_r+0x50>
 8009ed4:	ebba 0b04 	subs.w	fp, sl, r4
 8009ed8:	d00b      	beq.n	8009ef2 <_svfiprintf_r+0x7a>
 8009eda:	465b      	mov	r3, fp
 8009edc:	4622      	mov	r2, r4
 8009ede:	4629      	mov	r1, r5
 8009ee0:	4638      	mov	r0, r7
 8009ee2:	f7ff ff6d 	bl	8009dc0 <__ssputs_r>
 8009ee6:	3001      	adds	r0, #1
 8009ee8:	f000 80aa 	beq.w	800a040 <_svfiprintf_r+0x1c8>
 8009eec:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009eee:	445a      	add	r2, fp
 8009ef0:	9209      	str	r2, [sp, #36]	; 0x24
 8009ef2:	f89a 3000 	ldrb.w	r3, [sl]
 8009ef6:	2b00      	cmp	r3, #0
 8009ef8:	f000 80a2 	beq.w	800a040 <_svfiprintf_r+0x1c8>
 8009efc:	2300      	movs	r3, #0
 8009efe:	f04f 32ff 	mov.w	r2, #4294967295
 8009f02:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009f06:	f10a 0a01 	add.w	sl, sl, #1
 8009f0a:	9304      	str	r3, [sp, #16]
 8009f0c:	9307      	str	r3, [sp, #28]
 8009f0e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009f12:	931a      	str	r3, [sp, #104]	; 0x68
 8009f14:	4654      	mov	r4, sl
 8009f16:	2205      	movs	r2, #5
 8009f18:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009f1c:	4851      	ldr	r0, [pc, #324]	; (800a064 <_svfiprintf_r+0x1ec>)
 8009f1e:	f7f6 f95f 	bl	80001e0 <memchr>
 8009f22:	9a04      	ldr	r2, [sp, #16]
 8009f24:	b9d8      	cbnz	r0, 8009f5e <_svfiprintf_r+0xe6>
 8009f26:	06d0      	lsls	r0, r2, #27
 8009f28:	bf44      	itt	mi
 8009f2a:	2320      	movmi	r3, #32
 8009f2c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009f30:	0711      	lsls	r1, r2, #28
 8009f32:	bf44      	itt	mi
 8009f34:	232b      	movmi	r3, #43	; 0x2b
 8009f36:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009f3a:	f89a 3000 	ldrb.w	r3, [sl]
 8009f3e:	2b2a      	cmp	r3, #42	; 0x2a
 8009f40:	d015      	beq.n	8009f6e <_svfiprintf_r+0xf6>
 8009f42:	9a07      	ldr	r2, [sp, #28]
 8009f44:	4654      	mov	r4, sl
 8009f46:	2000      	movs	r0, #0
 8009f48:	f04f 0c0a 	mov.w	ip, #10
 8009f4c:	4621      	mov	r1, r4
 8009f4e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009f52:	3b30      	subs	r3, #48	; 0x30
 8009f54:	2b09      	cmp	r3, #9
 8009f56:	d94e      	bls.n	8009ff6 <_svfiprintf_r+0x17e>
 8009f58:	b1b0      	cbz	r0, 8009f88 <_svfiprintf_r+0x110>
 8009f5a:	9207      	str	r2, [sp, #28]
 8009f5c:	e014      	b.n	8009f88 <_svfiprintf_r+0x110>
 8009f5e:	eba0 0308 	sub.w	r3, r0, r8
 8009f62:	fa09 f303 	lsl.w	r3, r9, r3
 8009f66:	4313      	orrs	r3, r2
 8009f68:	9304      	str	r3, [sp, #16]
 8009f6a:	46a2      	mov	sl, r4
 8009f6c:	e7d2      	b.n	8009f14 <_svfiprintf_r+0x9c>
 8009f6e:	9b03      	ldr	r3, [sp, #12]
 8009f70:	1d19      	adds	r1, r3, #4
 8009f72:	681b      	ldr	r3, [r3, #0]
 8009f74:	9103      	str	r1, [sp, #12]
 8009f76:	2b00      	cmp	r3, #0
 8009f78:	bfbb      	ittet	lt
 8009f7a:	425b      	neglt	r3, r3
 8009f7c:	f042 0202 	orrlt.w	r2, r2, #2
 8009f80:	9307      	strge	r3, [sp, #28]
 8009f82:	9307      	strlt	r3, [sp, #28]
 8009f84:	bfb8      	it	lt
 8009f86:	9204      	strlt	r2, [sp, #16]
 8009f88:	7823      	ldrb	r3, [r4, #0]
 8009f8a:	2b2e      	cmp	r3, #46	; 0x2e
 8009f8c:	d10c      	bne.n	8009fa8 <_svfiprintf_r+0x130>
 8009f8e:	7863      	ldrb	r3, [r4, #1]
 8009f90:	2b2a      	cmp	r3, #42	; 0x2a
 8009f92:	d135      	bne.n	800a000 <_svfiprintf_r+0x188>
 8009f94:	9b03      	ldr	r3, [sp, #12]
 8009f96:	1d1a      	adds	r2, r3, #4
 8009f98:	681b      	ldr	r3, [r3, #0]
 8009f9a:	9203      	str	r2, [sp, #12]
 8009f9c:	2b00      	cmp	r3, #0
 8009f9e:	bfb8      	it	lt
 8009fa0:	f04f 33ff 	movlt.w	r3, #4294967295
 8009fa4:	3402      	adds	r4, #2
 8009fa6:	9305      	str	r3, [sp, #20]
 8009fa8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800a074 <_svfiprintf_r+0x1fc>
 8009fac:	7821      	ldrb	r1, [r4, #0]
 8009fae:	2203      	movs	r2, #3
 8009fb0:	4650      	mov	r0, sl
 8009fb2:	f7f6 f915 	bl	80001e0 <memchr>
 8009fb6:	b140      	cbz	r0, 8009fca <_svfiprintf_r+0x152>
 8009fb8:	2340      	movs	r3, #64	; 0x40
 8009fba:	eba0 000a 	sub.w	r0, r0, sl
 8009fbe:	fa03 f000 	lsl.w	r0, r3, r0
 8009fc2:	9b04      	ldr	r3, [sp, #16]
 8009fc4:	4303      	orrs	r3, r0
 8009fc6:	3401      	adds	r4, #1
 8009fc8:	9304      	str	r3, [sp, #16]
 8009fca:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009fce:	4826      	ldr	r0, [pc, #152]	; (800a068 <_svfiprintf_r+0x1f0>)
 8009fd0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009fd4:	2206      	movs	r2, #6
 8009fd6:	f7f6 f903 	bl	80001e0 <memchr>
 8009fda:	2800      	cmp	r0, #0
 8009fdc:	d038      	beq.n	800a050 <_svfiprintf_r+0x1d8>
 8009fde:	4b23      	ldr	r3, [pc, #140]	; (800a06c <_svfiprintf_r+0x1f4>)
 8009fe0:	bb1b      	cbnz	r3, 800a02a <_svfiprintf_r+0x1b2>
 8009fe2:	9b03      	ldr	r3, [sp, #12]
 8009fe4:	3307      	adds	r3, #7
 8009fe6:	f023 0307 	bic.w	r3, r3, #7
 8009fea:	3308      	adds	r3, #8
 8009fec:	9303      	str	r3, [sp, #12]
 8009fee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009ff0:	4433      	add	r3, r6
 8009ff2:	9309      	str	r3, [sp, #36]	; 0x24
 8009ff4:	e767      	b.n	8009ec6 <_svfiprintf_r+0x4e>
 8009ff6:	fb0c 3202 	mla	r2, ip, r2, r3
 8009ffa:	460c      	mov	r4, r1
 8009ffc:	2001      	movs	r0, #1
 8009ffe:	e7a5      	b.n	8009f4c <_svfiprintf_r+0xd4>
 800a000:	2300      	movs	r3, #0
 800a002:	3401      	adds	r4, #1
 800a004:	9305      	str	r3, [sp, #20]
 800a006:	4619      	mov	r1, r3
 800a008:	f04f 0c0a 	mov.w	ip, #10
 800a00c:	4620      	mov	r0, r4
 800a00e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a012:	3a30      	subs	r2, #48	; 0x30
 800a014:	2a09      	cmp	r2, #9
 800a016:	d903      	bls.n	800a020 <_svfiprintf_r+0x1a8>
 800a018:	2b00      	cmp	r3, #0
 800a01a:	d0c5      	beq.n	8009fa8 <_svfiprintf_r+0x130>
 800a01c:	9105      	str	r1, [sp, #20]
 800a01e:	e7c3      	b.n	8009fa8 <_svfiprintf_r+0x130>
 800a020:	fb0c 2101 	mla	r1, ip, r1, r2
 800a024:	4604      	mov	r4, r0
 800a026:	2301      	movs	r3, #1
 800a028:	e7f0      	b.n	800a00c <_svfiprintf_r+0x194>
 800a02a:	ab03      	add	r3, sp, #12
 800a02c:	9300      	str	r3, [sp, #0]
 800a02e:	462a      	mov	r2, r5
 800a030:	4b0f      	ldr	r3, [pc, #60]	; (800a070 <_svfiprintf_r+0x1f8>)
 800a032:	a904      	add	r1, sp, #16
 800a034:	4638      	mov	r0, r7
 800a036:	f7fb fe5f 	bl	8005cf8 <_printf_float>
 800a03a:	1c42      	adds	r2, r0, #1
 800a03c:	4606      	mov	r6, r0
 800a03e:	d1d6      	bne.n	8009fee <_svfiprintf_r+0x176>
 800a040:	89ab      	ldrh	r3, [r5, #12]
 800a042:	065b      	lsls	r3, r3, #25
 800a044:	f53f af2c 	bmi.w	8009ea0 <_svfiprintf_r+0x28>
 800a048:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a04a:	b01d      	add	sp, #116	; 0x74
 800a04c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a050:	ab03      	add	r3, sp, #12
 800a052:	9300      	str	r3, [sp, #0]
 800a054:	462a      	mov	r2, r5
 800a056:	4b06      	ldr	r3, [pc, #24]	; (800a070 <_svfiprintf_r+0x1f8>)
 800a058:	a904      	add	r1, sp, #16
 800a05a:	4638      	mov	r0, r7
 800a05c:	f7fc f8f0 	bl	8006240 <_printf_i>
 800a060:	e7eb      	b.n	800a03a <_svfiprintf_r+0x1c2>
 800a062:	bf00      	nop
 800a064:	0800c344 	.word	0x0800c344
 800a068:	0800c34e 	.word	0x0800c34e
 800a06c:	08005cf9 	.word	0x08005cf9
 800a070:	08009dc1 	.word	0x08009dc1
 800a074:	0800c34a 	.word	0x0800c34a

0800a078 <__sfputc_r>:
 800a078:	6893      	ldr	r3, [r2, #8]
 800a07a:	3b01      	subs	r3, #1
 800a07c:	2b00      	cmp	r3, #0
 800a07e:	b410      	push	{r4}
 800a080:	6093      	str	r3, [r2, #8]
 800a082:	da08      	bge.n	800a096 <__sfputc_r+0x1e>
 800a084:	6994      	ldr	r4, [r2, #24]
 800a086:	42a3      	cmp	r3, r4
 800a088:	db01      	blt.n	800a08e <__sfputc_r+0x16>
 800a08a:	290a      	cmp	r1, #10
 800a08c:	d103      	bne.n	800a096 <__sfputc_r+0x1e>
 800a08e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a092:	f7fd bbb9 	b.w	8007808 <__swbuf_r>
 800a096:	6813      	ldr	r3, [r2, #0]
 800a098:	1c58      	adds	r0, r3, #1
 800a09a:	6010      	str	r0, [r2, #0]
 800a09c:	7019      	strb	r1, [r3, #0]
 800a09e:	4608      	mov	r0, r1
 800a0a0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a0a4:	4770      	bx	lr

0800a0a6 <__sfputs_r>:
 800a0a6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a0a8:	4606      	mov	r6, r0
 800a0aa:	460f      	mov	r7, r1
 800a0ac:	4614      	mov	r4, r2
 800a0ae:	18d5      	adds	r5, r2, r3
 800a0b0:	42ac      	cmp	r4, r5
 800a0b2:	d101      	bne.n	800a0b8 <__sfputs_r+0x12>
 800a0b4:	2000      	movs	r0, #0
 800a0b6:	e007      	b.n	800a0c8 <__sfputs_r+0x22>
 800a0b8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a0bc:	463a      	mov	r2, r7
 800a0be:	4630      	mov	r0, r6
 800a0c0:	f7ff ffda 	bl	800a078 <__sfputc_r>
 800a0c4:	1c43      	adds	r3, r0, #1
 800a0c6:	d1f3      	bne.n	800a0b0 <__sfputs_r+0xa>
 800a0c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a0cc <_vfiprintf_r>:
 800a0cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a0d0:	460d      	mov	r5, r1
 800a0d2:	b09d      	sub	sp, #116	; 0x74
 800a0d4:	4614      	mov	r4, r2
 800a0d6:	4698      	mov	r8, r3
 800a0d8:	4606      	mov	r6, r0
 800a0da:	b118      	cbz	r0, 800a0e4 <_vfiprintf_r+0x18>
 800a0dc:	6983      	ldr	r3, [r0, #24]
 800a0de:	b90b      	cbnz	r3, 800a0e4 <_vfiprintf_r+0x18>
 800a0e0:	f7fe fbf8 	bl	80088d4 <__sinit>
 800a0e4:	4b89      	ldr	r3, [pc, #548]	; (800a30c <_vfiprintf_r+0x240>)
 800a0e6:	429d      	cmp	r5, r3
 800a0e8:	d11b      	bne.n	800a122 <_vfiprintf_r+0x56>
 800a0ea:	6875      	ldr	r5, [r6, #4]
 800a0ec:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a0ee:	07d9      	lsls	r1, r3, #31
 800a0f0:	d405      	bmi.n	800a0fe <_vfiprintf_r+0x32>
 800a0f2:	89ab      	ldrh	r3, [r5, #12]
 800a0f4:	059a      	lsls	r2, r3, #22
 800a0f6:	d402      	bmi.n	800a0fe <_vfiprintf_r+0x32>
 800a0f8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a0fa:	f7ff f81a 	bl	8009132 <__retarget_lock_acquire_recursive>
 800a0fe:	89ab      	ldrh	r3, [r5, #12]
 800a100:	071b      	lsls	r3, r3, #28
 800a102:	d501      	bpl.n	800a108 <_vfiprintf_r+0x3c>
 800a104:	692b      	ldr	r3, [r5, #16]
 800a106:	b9eb      	cbnz	r3, 800a144 <_vfiprintf_r+0x78>
 800a108:	4629      	mov	r1, r5
 800a10a:	4630      	mov	r0, r6
 800a10c:	f7fd fbce 	bl	80078ac <__swsetup_r>
 800a110:	b1c0      	cbz	r0, 800a144 <_vfiprintf_r+0x78>
 800a112:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a114:	07dc      	lsls	r4, r3, #31
 800a116:	d50e      	bpl.n	800a136 <_vfiprintf_r+0x6a>
 800a118:	f04f 30ff 	mov.w	r0, #4294967295
 800a11c:	b01d      	add	sp, #116	; 0x74
 800a11e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a122:	4b7b      	ldr	r3, [pc, #492]	; (800a310 <_vfiprintf_r+0x244>)
 800a124:	429d      	cmp	r5, r3
 800a126:	d101      	bne.n	800a12c <_vfiprintf_r+0x60>
 800a128:	68b5      	ldr	r5, [r6, #8]
 800a12a:	e7df      	b.n	800a0ec <_vfiprintf_r+0x20>
 800a12c:	4b79      	ldr	r3, [pc, #484]	; (800a314 <_vfiprintf_r+0x248>)
 800a12e:	429d      	cmp	r5, r3
 800a130:	bf08      	it	eq
 800a132:	68f5      	ldreq	r5, [r6, #12]
 800a134:	e7da      	b.n	800a0ec <_vfiprintf_r+0x20>
 800a136:	89ab      	ldrh	r3, [r5, #12]
 800a138:	0598      	lsls	r0, r3, #22
 800a13a:	d4ed      	bmi.n	800a118 <_vfiprintf_r+0x4c>
 800a13c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a13e:	f7fe fff9 	bl	8009134 <__retarget_lock_release_recursive>
 800a142:	e7e9      	b.n	800a118 <_vfiprintf_r+0x4c>
 800a144:	2300      	movs	r3, #0
 800a146:	9309      	str	r3, [sp, #36]	; 0x24
 800a148:	2320      	movs	r3, #32
 800a14a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a14e:	f8cd 800c 	str.w	r8, [sp, #12]
 800a152:	2330      	movs	r3, #48	; 0x30
 800a154:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800a318 <_vfiprintf_r+0x24c>
 800a158:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a15c:	f04f 0901 	mov.w	r9, #1
 800a160:	4623      	mov	r3, r4
 800a162:	469a      	mov	sl, r3
 800a164:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a168:	b10a      	cbz	r2, 800a16e <_vfiprintf_r+0xa2>
 800a16a:	2a25      	cmp	r2, #37	; 0x25
 800a16c:	d1f9      	bne.n	800a162 <_vfiprintf_r+0x96>
 800a16e:	ebba 0b04 	subs.w	fp, sl, r4
 800a172:	d00b      	beq.n	800a18c <_vfiprintf_r+0xc0>
 800a174:	465b      	mov	r3, fp
 800a176:	4622      	mov	r2, r4
 800a178:	4629      	mov	r1, r5
 800a17a:	4630      	mov	r0, r6
 800a17c:	f7ff ff93 	bl	800a0a6 <__sfputs_r>
 800a180:	3001      	adds	r0, #1
 800a182:	f000 80aa 	beq.w	800a2da <_vfiprintf_r+0x20e>
 800a186:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a188:	445a      	add	r2, fp
 800a18a:	9209      	str	r2, [sp, #36]	; 0x24
 800a18c:	f89a 3000 	ldrb.w	r3, [sl]
 800a190:	2b00      	cmp	r3, #0
 800a192:	f000 80a2 	beq.w	800a2da <_vfiprintf_r+0x20e>
 800a196:	2300      	movs	r3, #0
 800a198:	f04f 32ff 	mov.w	r2, #4294967295
 800a19c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a1a0:	f10a 0a01 	add.w	sl, sl, #1
 800a1a4:	9304      	str	r3, [sp, #16]
 800a1a6:	9307      	str	r3, [sp, #28]
 800a1a8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a1ac:	931a      	str	r3, [sp, #104]	; 0x68
 800a1ae:	4654      	mov	r4, sl
 800a1b0:	2205      	movs	r2, #5
 800a1b2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a1b6:	4858      	ldr	r0, [pc, #352]	; (800a318 <_vfiprintf_r+0x24c>)
 800a1b8:	f7f6 f812 	bl	80001e0 <memchr>
 800a1bc:	9a04      	ldr	r2, [sp, #16]
 800a1be:	b9d8      	cbnz	r0, 800a1f8 <_vfiprintf_r+0x12c>
 800a1c0:	06d1      	lsls	r1, r2, #27
 800a1c2:	bf44      	itt	mi
 800a1c4:	2320      	movmi	r3, #32
 800a1c6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a1ca:	0713      	lsls	r3, r2, #28
 800a1cc:	bf44      	itt	mi
 800a1ce:	232b      	movmi	r3, #43	; 0x2b
 800a1d0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a1d4:	f89a 3000 	ldrb.w	r3, [sl]
 800a1d8:	2b2a      	cmp	r3, #42	; 0x2a
 800a1da:	d015      	beq.n	800a208 <_vfiprintf_r+0x13c>
 800a1dc:	9a07      	ldr	r2, [sp, #28]
 800a1de:	4654      	mov	r4, sl
 800a1e0:	2000      	movs	r0, #0
 800a1e2:	f04f 0c0a 	mov.w	ip, #10
 800a1e6:	4621      	mov	r1, r4
 800a1e8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a1ec:	3b30      	subs	r3, #48	; 0x30
 800a1ee:	2b09      	cmp	r3, #9
 800a1f0:	d94e      	bls.n	800a290 <_vfiprintf_r+0x1c4>
 800a1f2:	b1b0      	cbz	r0, 800a222 <_vfiprintf_r+0x156>
 800a1f4:	9207      	str	r2, [sp, #28]
 800a1f6:	e014      	b.n	800a222 <_vfiprintf_r+0x156>
 800a1f8:	eba0 0308 	sub.w	r3, r0, r8
 800a1fc:	fa09 f303 	lsl.w	r3, r9, r3
 800a200:	4313      	orrs	r3, r2
 800a202:	9304      	str	r3, [sp, #16]
 800a204:	46a2      	mov	sl, r4
 800a206:	e7d2      	b.n	800a1ae <_vfiprintf_r+0xe2>
 800a208:	9b03      	ldr	r3, [sp, #12]
 800a20a:	1d19      	adds	r1, r3, #4
 800a20c:	681b      	ldr	r3, [r3, #0]
 800a20e:	9103      	str	r1, [sp, #12]
 800a210:	2b00      	cmp	r3, #0
 800a212:	bfbb      	ittet	lt
 800a214:	425b      	neglt	r3, r3
 800a216:	f042 0202 	orrlt.w	r2, r2, #2
 800a21a:	9307      	strge	r3, [sp, #28]
 800a21c:	9307      	strlt	r3, [sp, #28]
 800a21e:	bfb8      	it	lt
 800a220:	9204      	strlt	r2, [sp, #16]
 800a222:	7823      	ldrb	r3, [r4, #0]
 800a224:	2b2e      	cmp	r3, #46	; 0x2e
 800a226:	d10c      	bne.n	800a242 <_vfiprintf_r+0x176>
 800a228:	7863      	ldrb	r3, [r4, #1]
 800a22a:	2b2a      	cmp	r3, #42	; 0x2a
 800a22c:	d135      	bne.n	800a29a <_vfiprintf_r+0x1ce>
 800a22e:	9b03      	ldr	r3, [sp, #12]
 800a230:	1d1a      	adds	r2, r3, #4
 800a232:	681b      	ldr	r3, [r3, #0]
 800a234:	9203      	str	r2, [sp, #12]
 800a236:	2b00      	cmp	r3, #0
 800a238:	bfb8      	it	lt
 800a23a:	f04f 33ff 	movlt.w	r3, #4294967295
 800a23e:	3402      	adds	r4, #2
 800a240:	9305      	str	r3, [sp, #20]
 800a242:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800a328 <_vfiprintf_r+0x25c>
 800a246:	7821      	ldrb	r1, [r4, #0]
 800a248:	2203      	movs	r2, #3
 800a24a:	4650      	mov	r0, sl
 800a24c:	f7f5 ffc8 	bl	80001e0 <memchr>
 800a250:	b140      	cbz	r0, 800a264 <_vfiprintf_r+0x198>
 800a252:	2340      	movs	r3, #64	; 0x40
 800a254:	eba0 000a 	sub.w	r0, r0, sl
 800a258:	fa03 f000 	lsl.w	r0, r3, r0
 800a25c:	9b04      	ldr	r3, [sp, #16]
 800a25e:	4303      	orrs	r3, r0
 800a260:	3401      	adds	r4, #1
 800a262:	9304      	str	r3, [sp, #16]
 800a264:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a268:	482c      	ldr	r0, [pc, #176]	; (800a31c <_vfiprintf_r+0x250>)
 800a26a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a26e:	2206      	movs	r2, #6
 800a270:	f7f5 ffb6 	bl	80001e0 <memchr>
 800a274:	2800      	cmp	r0, #0
 800a276:	d03f      	beq.n	800a2f8 <_vfiprintf_r+0x22c>
 800a278:	4b29      	ldr	r3, [pc, #164]	; (800a320 <_vfiprintf_r+0x254>)
 800a27a:	bb1b      	cbnz	r3, 800a2c4 <_vfiprintf_r+0x1f8>
 800a27c:	9b03      	ldr	r3, [sp, #12]
 800a27e:	3307      	adds	r3, #7
 800a280:	f023 0307 	bic.w	r3, r3, #7
 800a284:	3308      	adds	r3, #8
 800a286:	9303      	str	r3, [sp, #12]
 800a288:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a28a:	443b      	add	r3, r7
 800a28c:	9309      	str	r3, [sp, #36]	; 0x24
 800a28e:	e767      	b.n	800a160 <_vfiprintf_r+0x94>
 800a290:	fb0c 3202 	mla	r2, ip, r2, r3
 800a294:	460c      	mov	r4, r1
 800a296:	2001      	movs	r0, #1
 800a298:	e7a5      	b.n	800a1e6 <_vfiprintf_r+0x11a>
 800a29a:	2300      	movs	r3, #0
 800a29c:	3401      	adds	r4, #1
 800a29e:	9305      	str	r3, [sp, #20]
 800a2a0:	4619      	mov	r1, r3
 800a2a2:	f04f 0c0a 	mov.w	ip, #10
 800a2a6:	4620      	mov	r0, r4
 800a2a8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a2ac:	3a30      	subs	r2, #48	; 0x30
 800a2ae:	2a09      	cmp	r2, #9
 800a2b0:	d903      	bls.n	800a2ba <_vfiprintf_r+0x1ee>
 800a2b2:	2b00      	cmp	r3, #0
 800a2b4:	d0c5      	beq.n	800a242 <_vfiprintf_r+0x176>
 800a2b6:	9105      	str	r1, [sp, #20]
 800a2b8:	e7c3      	b.n	800a242 <_vfiprintf_r+0x176>
 800a2ba:	fb0c 2101 	mla	r1, ip, r1, r2
 800a2be:	4604      	mov	r4, r0
 800a2c0:	2301      	movs	r3, #1
 800a2c2:	e7f0      	b.n	800a2a6 <_vfiprintf_r+0x1da>
 800a2c4:	ab03      	add	r3, sp, #12
 800a2c6:	9300      	str	r3, [sp, #0]
 800a2c8:	462a      	mov	r2, r5
 800a2ca:	4b16      	ldr	r3, [pc, #88]	; (800a324 <_vfiprintf_r+0x258>)
 800a2cc:	a904      	add	r1, sp, #16
 800a2ce:	4630      	mov	r0, r6
 800a2d0:	f7fb fd12 	bl	8005cf8 <_printf_float>
 800a2d4:	4607      	mov	r7, r0
 800a2d6:	1c78      	adds	r0, r7, #1
 800a2d8:	d1d6      	bne.n	800a288 <_vfiprintf_r+0x1bc>
 800a2da:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a2dc:	07d9      	lsls	r1, r3, #31
 800a2de:	d405      	bmi.n	800a2ec <_vfiprintf_r+0x220>
 800a2e0:	89ab      	ldrh	r3, [r5, #12]
 800a2e2:	059a      	lsls	r2, r3, #22
 800a2e4:	d402      	bmi.n	800a2ec <_vfiprintf_r+0x220>
 800a2e6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a2e8:	f7fe ff24 	bl	8009134 <__retarget_lock_release_recursive>
 800a2ec:	89ab      	ldrh	r3, [r5, #12]
 800a2ee:	065b      	lsls	r3, r3, #25
 800a2f0:	f53f af12 	bmi.w	800a118 <_vfiprintf_r+0x4c>
 800a2f4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a2f6:	e711      	b.n	800a11c <_vfiprintf_r+0x50>
 800a2f8:	ab03      	add	r3, sp, #12
 800a2fa:	9300      	str	r3, [sp, #0]
 800a2fc:	462a      	mov	r2, r5
 800a2fe:	4b09      	ldr	r3, [pc, #36]	; (800a324 <_vfiprintf_r+0x258>)
 800a300:	a904      	add	r1, sp, #16
 800a302:	4630      	mov	r0, r6
 800a304:	f7fb ff9c 	bl	8006240 <_printf_i>
 800a308:	e7e4      	b.n	800a2d4 <_vfiprintf_r+0x208>
 800a30a:	bf00      	nop
 800a30c:	0800c12c 	.word	0x0800c12c
 800a310:	0800c14c 	.word	0x0800c14c
 800a314:	0800c10c 	.word	0x0800c10c
 800a318:	0800c344 	.word	0x0800c344
 800a31c:	0800c34e 	.word	0x0800c34e
 800a320:	08005cf9 	.word	0x08005cf9
 800a324:	0800a0a7 	.word	0x0800a0a7
 800a328:	0800c34a 	.word	0x0800c34a

0800a32c <__svfiscanf_r>:
 800a32c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a330:	461d      	mov	r5, r3
 800a332:	6e4b      	ldr	r3, [r1, #100]	; 0x64
 800a334:	07df      	lsls	r7, r3, #31
 800a336:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 800a33a:	4606      	mov	r6, r0
 800a33c:	460c      	mov	r4, r1
 800a33e:	4692      	mov	sl, r2
 800a340:	d405      	bmi.n	800a34e <__svfiscanf_r+0x22>
 800a342:	898b      	ldrh	r3, [r1, #12]
 800a344:	0598      	lsls	r0, r3, #22
 800a346:	d402      	bmi.n	800a34e <__svfiscanf_r+0x22>
 800a348:	6d88      	ldr	r0, [r1, #88]	; 0x58
 800a34a:	f7fe fef2 	bl	8009132 <__retarget_lock_acquire_recursive>
 800a34e:	2300      	movs	r3, #0
 800a350:	e9cd 3344 	strd	r3, r3, [sp, #272]	; 0x110
 800a354:	4ba6      	ldr	r3, [pc, #664]	; (800a5f0 <__svfiscanf_r+0x2c4>)
 800a356:	93a0      	str	r3, [sp, #640]	; 0x280
 800a358:	f10d 0804 	add.w	r8, sp, #4
 800a35c:	4ba5      	ldr	r3, [pc, #660]	; (800a5f4 <__svfiscanf_r+0x2c8>)
 800a35e:	4fa6      	ldr	r7, [pc, #664]	; (800a5f8 <__svfiscanf_r+0x2cc>)
 800a360:	f8df 9298 	ldr.w	r9, [pc, #664]	; 800a5fc <__svfiscanf_r+0x2d0>
 800a364:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 800a368:	93a1      	str	r3, [sp, #644]	; 0x284
 800a36a:	9500      	str	r5, [sp, #0]
 800a36c:	f89a 3000 	ldrb.w	r3, [sl]
 800a370:	2b00      	cmp	r3, #0
 800a372:	f000 8173 	beq.w	800a65c <__svfiscanf_r+0x330>
 800a376:	5dd9      	ldrb	r1, [r3, r7]
 800a378:	f011 0108 	ands.w	r1, r1, #8
 800a37c:	f10a 0501 	add.w	r5, sl, #1
 800a380:	d019      	beq.n	800a3b6 <__svfiscanf_r+0x8a>
 800a382:	6863      	ldr	r3, [r4, #4]
 800a384:	2b00      	cmp	r3, #0
 800a386:	dd0f      	ble.n	800a3a8 <__svfiscanf_r+0x7c>
 800a388:	6823      	ldr	r3, [r4, #0]
 800a38a:	781a      	ldrb	r2, [r3, #0]
 800a38c:	5cba      	ldrb	r2, [r7, r2]
 800a38e:	0711      	lsls	r1, r2, #28
 800a390:	d401      	bmi.n	800a396 <__svfiscanf_r+0x6a>
 800a392:	46aa      	mov	sl, r5
 800a394:	e7ea      	b.n	800a36c <__svfiscanf_r+0x40>
 800a396:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800a398:	3201      	adds	r2, #1
 800a39a:	9245      	str	r2, [sp, #276]	; 0x114
 800a39c:	6862      	ldr	r2, [r4, #4]
 800a39e:	3301      	adds	r3, #1
 800a3a0:	3a01      	subs	r2, #1
 800a3a2:	6062      	str	r2, [r4, #4]
 800a3a4:	6023      	str	r3, [r4, #0]
 800a3a6:	e7ec      	b.n	800a382 <__svfiscanf_r+0x56>
 800a3a8:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800a3aa:	4621      	mov	r1, r4
 800a3ac:	4630      	mov	r0, r6
 800a3ae:	4798      	blx	r3
 800a3b0:	2800      	cmp	r0, #0
 800a3b2:	d0e9      	beq.n	800a388 <__svfiscanf_r+0x5c>
 800a3b4:	e7ed      	b.n	800a392 <__svfiscanf_r+0x66>
 800a3b6:	2b25      	cmp	r3, #37	; 0x25
 800a3b8:	d012      	beq.n	800a3e0 <__svfiscanf_r+0xb4>
 800a3ba:	469a      	mov	sl, r3
 800a3bc:	6863      	ldr	r3, [r4, #4]
 800a3be:	2b00      	cmp	r3, #0
 800a3c0:	f340 8095 	ble.w	800a4ee <__svfiscanf_r+0x1c2>
 800a3c4:	6822      	ldr	r2, [r4, #0]
 800a3c6:	7813      	ldrb	r3, [r2, #0]
 800a3c8:	4553      	cmp	r3, sl
 800a3ca:	f040 8147 	bne.w	800a65c <__svfiscanf_r+0x330>
 800a3ce:	6863      	ldr	r3, [r4, #4]
 800a3d0:	3b01      	subs	r3, #1
 800a3d2:	6063      	str	r3, [r4, #4]
 800a3d4:	9b45      	ldr	r3, [sp, #276]	; 0x114
 800a3d6:	3201      	adds	r2, #1
 800a3d8:	3301      	adds	r3, #1
 800a3da:	6022      	str	r2, [r4, #0]
 800a3dc:	9345      	str	r3, [sp, #276]	; 0x114
 800a3de:	e7d8      	b.n	800a392 <__svfiscanf_r+0x66>
 800a3e0:	9141      	str	r1, [sp, #260]	; 0x104
 800a3e2:	9143      	str	r1, [sp, #268]	; 0x10c
 800a3e4:	f89a 3001 	ldrb.w	r3, [sl, #1]
 800a3e8:	2b2a      	cmp	r3, #42	; 0x2a
 800a3ea:	bf02      	ittt	eq
 800a3ec:	2310      	moveq	r3, #16
 800a3ee:	9341      	streq	r3, [sp, #260]	; 0x104
 800a3f0:	f10a 0502 	addeq.w	r5, sl, #2
 800a3f4:	220a      	movs	r2, #10
 800a3f6:	46aa      	mov	sl, r5
 800a3f8:	f81a 1b01 	ldrb.w	r1, [sl], #1
 800a3fc:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 800a400:	2b09      	cmp	r3, #9
 800a402:	d91e      	bls.n	800a442 <__svfiscanf_r+0x116>
 800a404:	487d      	ldr	r0, [pc, #500]	; (800a5fc <__svfiscanf_r+0x2d0>)
 800a406:	2203      	movs	r2, #3
 800a408:	f7f5 feea 	bl	80001e0 <memchr>
 800a40c:	b140      	cbz	r0, 800a420 <__svfiscanf_r+0xf4>
 800a40e:	2301      	movs	r3, #1
 800a410:	eba0 0009 	sub.w	r0, r0, r9
 800a414:	fa03 f000 	lsl.w	r0, r3, r0
 800a418:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800a41a:	4318      	orrs	r0, r3
 800a41c:	9041      	str	r0, [sp, #260]	; 0x104
 800a41e:	4655      	mov	r5, sl
 800a420:	f815 3b01 	ldrb.w	r3, [r5], #1
 800a424:	2b78      	cmp	r3, #120	; 0x78
 800a426:	d807      	bhi.n	800a438 <__svfiscanf_r+0x10c>
 800a428:	2b57      	cmp	r3, #87	; 0x57
 800a42a:	d811      	bhi.n	800a450 <__svfiscanf_r+0x124>
 800a42c:	2b25      	cmp	r3, #37	; 0x25
 800a42e:	d0c4      	beq.n	800a3ba <__svfiscanf_r+0x8e>
 800a430:	d858      	bhi.n	800a4e4 <__svfiscanf_r+0x1b8>
 800a432:	2b00      	cmp	r3, #0
 800a434:	f000 80c8 	beq.w	800a5c8 <__svfiscanf_r+0x29c>
 800a438:	2303      	movs	r3, #3
 800a43a:	9347      	str	r3, [sp, #284]	; 0x11c
 800a43c:	230a      	movs	r3, #10
 800a43e:	9342      	str	r3, [sp, #264]	; 0x108
 800a440:	e07c      	b.n	800a53c <__svfiscanf_r+0x210>
 800a442:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 800a444:	fb02 1103 	mla	r1, r2, r3, r1
 800a448:	3930      	subs	r1, #48	; 0x30
 800a44a:	9143      	str	r1, [sp, #268]	; 0x10c
 800a44c:	4655      	mov	r5, sl
 800a44e:	e7d2      	b.n	800a3f6 <__svfiscanf_r+0xca>
 800a450:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 800a454:	2a20      	cmp	r2, #32
 800a456:	d8ef      	bhi.n	800a438 <__svfiscanf_r+0x10c>
 800a458:	a101      	add	r1, pc, #4	; (adr r1, 800a460 <__svfiscanf_r+0x134>)
 800a45a:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800a45e:	bf00      	nop
 800a460:	0800a527 	.word	0x0800a527
 800a464:	0800a439 	.word	0x0800a439
 800a468:	0800a439 	.word	0x0800a439
 800a46c:	0800a585 	.word	0x0800a585
 800a470:	0800a439 	.word	0x0800a439
 800a474:	0800a439 	.word	0x0800a439
 800a478:	0800a439 	.word	0x0800a439
 800a47c:	0800a439 	.word	0x0800a439
 800a480:	0800a439 	.word	0x0800a439
 800a484:	0800a439 	.word	0x0800a439
 800a488:	0800a439 	.word	0x0800a439
 800a48c:	0800a59b 	.word	0x0800a59b
 800a490:	0800a571 	.word	0x0800a571
 800a494:	0800a4eb 	.word	0x0800a4eb
 800a498:	0800a4eb 	.word	0x0800a4eb
 800a49c:	0800a4eb 	.word	0x0800a4eb
 800a4a0:	0800a439 	.word	0x0800a439
 800a4a4:	0800a575 	.word	0x0800a575
 800a4a8:	0800a439 	.word	0x0800a439
 800a4ac:	0800a439 	.word	0x0800a439
 800a4b0:	0800a439 	.word	0x0800a439
 800a4b4:	0800a439 	.word	0x0800a439
 800a4b8:	0800a5ab 	.word	0x0800a5ab
 800a4bc:	0800a57d 	.word	0x0800a57d
 800a4c0:	0800a51f 	.word	0x0800a51f
 800a4c4:	0800a439 	.word	0x0800a439
 800a4c8:	0800a439 	.word	0x0800a439
 800a4cc:	0800a5a7 	.word	0x0800a5a7
 800a4d0:	0800a439 	.word	0x0800a439
 800a4d4:	0800a571 	.word	0x0800a571
 800a4d8:	0800a439 	.word	0x0800a439
 800a4dc:	0800a439 	.word	0x0800a439
 800a4e0:	0800a527 	.word	0x0800a527
 800a4e4:	3b45      	subs	r3, #69	; 0x45
 800a4e6:	2b02      	cmp	r3, #2
 800a4e8:	d8a6      	bhi.n	800a438 <__svfiscanf_r+0x10c>
 800a4ea:	2305      	movs	r3, #5
 800a4ec:	e025      	b.n	800a53a <__svfiscanf_r+0x20e>
 800a4ee:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800a4f0:	4621      	mov	r1, r4
 800a4f2:	4630      	mov	r0, r6
 800a4f4:	4798      	blx	r3
 800a4f6:	2800      	cmp	r0, #0
 800a4f8:	f43f af64 	beq.w	800a3c4 <__svfiscanf_r+0x98>
 800a4fc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a4fe:	07da      	lsls	r2, r3, #31
 800a500:	f140 80a4 	bpl.w	800a64c <__svfiscanf_r+0x320>
 800a504:	9844      	ldr	r0, [sp, #272]	; 0x110
 800a506:	2800      	cmp	r0, #0
 800a508:	d067      	beq.n	800a5da <__svfiscanf_r+0x2ae>
 800a50a:	89a3      	ldrh	r3, [r4, #12]
 800a50c:	f013 0f40 	tst.w	r3, #64	; 0x40
 800a510:	bf18      	it	ne
 800a512:	f04f 30ff 	movne.w	r0, #4294967295
 800a516:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 800a51a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a51e:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800a520:	f042 0220 	orr.w	r2, r2, #32
 800a524:	9241      	str	r2, [sp, #260]	; 0x104
 800a526:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800a528:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a52c:	9241      	str	r2, [sp, #260]	; 0x104
 800a52e:	2210      	movs	r2, #16
 800a530:	2b6f      	cmp	r3, #111	; 0x6f
 800a532:	9242      	str	r2, [sp, #264]	; 0x108
 800a534:	bf34      	ite	cc
 800a536:	2303      	movcc	r3, #3
 800a538:	2304      	movcs	r3, #4
 800a53a:	9347      	str	r3, [sp, #284]	; 0x11c
 800a53c:	6863      	ldr	r3, [r4, #4]
 800a53e:	2b00      	cmp	r3, #0
 800a540:	dd4e      	ble.n	800a5e0 <__svfiscanf_r+0x2b4>
 800a542:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800a544:	065b      	lsls	r3, r3, #25
 800a546:	d404      	bmi.n	800a552 <__svfiscanf_r+0x226>
 800a548:	6823      	ldr	r3, [r4, #0]
 800a54a:	781a      	ldrb	r2, [r3, #0]
 800a54c:	5cba      	ldrb	r2, [r7, r2]
 800a54e:	0710      	lsls	r0, r2, #28
 800a550:	d456      	bmi.n	800a600 <__svfiscanf_r+0x2d4>
 800a552:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 800a554:	2b02      	cmp	r3, #2
 800a556:	dc65      	bgt.n	800a624 <__svfiscanf_r+0x2f8>
 800a558:	466b      	mov	r3, sp
 800a55a:	4622      	mov	r2, r4
 800a55c:	a941      	add	r1, sp, #260	; 0x104
 800a55e:	4630      	mov	r0, r6
 800a560:	f000 f8b2 	bl	800a6c8 <_scanf_chars>
 800a564:	2801      	cmp	r0, #1
 800a566:	d079      	beq.n	800a65c <__svfiscanf_r+0x330>
 800a568:	2802      	cmp	r0, #2
 800a56a:	f47f af12 	bne.w	800a392 <__svfiscanf_r+0x66>
 800a56e:	e7c5      	b.n	800a4fc <__svfiscanf_r+0x1d0>
 800a570:	220a      	movs	r2, #10
 800a572:	e7dd      	b.n	800a530 <__svfiscanf_r+0x204>
 800a574:	2300      	movs	r3, #0
 800a576:	9342      	str	r3, [sp, #264]	; 0x108
 800a578:	2303      	movs	r3, #3
 800a57a:	e7de      	b.n	800a53a <__svfiscanf_r+0x20e>
 800a57c:	2308      	movs	r3, #8
 800a57e:	9342      	str	r3, [sp, #264]	; 0x108
 800a580:	2304      	movs	r3, #4
 800a582:	e7da      	b.n	800a53a <__svfiscanf_r+0x20e>
 800a584:	4629      	mov	r1, r5
 800a586:	4640      	mov	r0, r8
 800a588:	f000 fa9e 	bl	800aac8 <__sccl>
 800a58c:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800a58e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a592:	9341      	str	r3, [sp, #260]	; 0x104
 800a594:	4605      	mov	r5, r0
 800a596:	2301      	movs	r3, #1
 800a598:	e7cf      	b.n	800a53a <__svfiscanf_r+0x20e>
 800a59a:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800a59c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a5a0:	9341      	str	r3, [sp, #260]	; 0x104
 800a5a2:	2300      	movs	r3, #0
 800a5a4:	e7c9      	b.n	800a53a <__svfiscanf_r+0x20e>
 800a5a6:	2302      	movs	r3, #2
 800a5a8:	e7c7      	b.n	800a53a <__svfiscanf_r+0x20e>
 800a5aa:	9841      	ldr	r0, [sp, #260]	; 0x104
 800a5ac:	06c3      	lsls	r3, r0, #27
 800a5ae:	f53f aef0 	bmi.w	800a392 <__svfiscanf_r+0x66>
 800a5b2:	9b00      	ldr	r3, [sp, #0]
 800a5b4:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800a5b6:	1d19      	adds	r1, r3, #4
 800a5b8:	9100      	str	r1, [sp, #0]
 800a5ba:	681b      	ldr	r3, [r3, #0]
 800a5bc:	f010 0f01 	tst.w	r0, #1
 800a5c0:	bf14      	ite	ne
 800a5c2:	801a      	strhne	r2, [r3, #0]
 800a5c4:	601a      	streq	r2, [r3, #0]
 800a5c6:	e6e4      	b.n	800a392 <__svfiscanf_r+0x66>
 800a5c8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a5ca:	07d8      	lsls	r0, r3, #31
 800a5cc:	d405      	bmi.n	800a5da <__svfiscanf_r+0x2ae>
 800a5ce:	89a3      	ldrh	r3, [r4, #12]
 800a5d0:	0599      	lsls	r1, r3, #22
 800a5d2:	d402      	bmi.n	800a5da <__svfiscanf_r+0x2ae>
 800a5d4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a5d6:	f7fe fdad 	bl	8009134 <__retarget_lock_release_recursive>
 800a5da:	f04f 30ff 	mov.w	r0, #4294967295
 800a5de:	e79a      	b.n	800a516 <__svfiscanf_r+0x1ea>
 800a5e0:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800a5e2:	4621      	mov	r1, r4
 800a5e4:	4630      	mov	r0, r6
 800a5e6:	4798      	blx	r3
 800a5e8:	2800      	cmp	r0, #0
 800a5ea:	d0aa      	beq.n	800a542 <__svfiscanf_r+0x216>
 800a5ec:	e786      	b.n	800a4fc <__svfiscanf_r+0x1d0>
 800a5ee:	bf00      	nop
 800a5f0:	0800ad45 	.word	0x0800ad45
 800a5f4:	0800a981 	.word	0x0800a981
 800a5f8:	0800bf79 	.word	0x0800bf79
 800a5fc:	0800c34a 	.word	0x0800c34a
 800a600:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800a602:	3201      	adds	r2, #1
 800a604:	9245      	str	r2, [sp, #276]	; 0x114
 800a606:	6862      	ldr	r2, [r4, #4]
 800a608:	3a01      	subs	r2, #1
 800a60a:	2a00      	cmp	r2, #0
 800a60c:	6062      	str	r2, [r4, #4]
 800a60e:	dd02      	ble.n	800a616 <__svfiscanf_r+0x2ea>
 800a610:	3301      	adds	r3, #1
 800a612:	6023      	str	r3, [r4, #0]
 800a614:	e798      	b.n	800a548 <__svfiscanf_r+0x21c>
 800a616:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800a618:	4621      	mov	r1, r4
 800a61a:	4630      	mov	r0, r6
 800a61c:	4798      	blx	r3
 800a61e:	2800      	cmp	r0, #0
 800a620:	d092      	beq.n	800a548 <__svfiscanf_r+0x21c>
 800a622:	e76b      	b.n	800a4fc <__svfiscanf_r+0x1d0>
 800a624:	2b04      	cmp	r3, #4
 800a626:	dc06      	bgt.n	800a636 <__svfiscanf_r+0x30a>
 800a628:	466b      	mov	r3, sp
 800a62a:	4622      	mov	r2, r4
 800a62c:	a941      	add	r1, sp, #260	; 0x104
 800a62e:	4630      	mov	r0, r6
 800a630:	f000 f8a4 	bl	800a77c <_scanf_i>
 800a634:	e796      	b.n	800a564 <__svfiscanf_r+0x238>
 800a636:	4b0f      	ldr	r3, [pc, #60]	; (800a674 <__svfiscanf_r+0x348>)
 800a638:	2b00      	cmp	r3, #0
 800a63a:	f43f aeaa 	beq.w	800a392 <__svfiscanf_r+0x66>
 800a63e:	466b      	mov	r3, sp
 800a640:	4622      	mov	r2, r4
 800a642:	a941      	add	r1, sp, #260	; 0x104
 800a644:	4630      	mov	r0, r6
 800a646:	f7fb ff21 	bl	800648c <_scanf_float>
 800a64a:	e78b      	b.n	800a564 <__svfiscanf_r+0x238>
 800a64c:	89a3      	ldrh	r3, [r4, #12]
 800a64e:	0599      	lsls	r1, r3, #22
 800a650:	f53f af58 	bmi.w	800a504 <__svfiscanf_r+0x1d8>
 800a654:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a656:	f7fe fd6d 	bl	8009134 <__retarget_lock_release_recursive>
 800a65a:	e753      	b.n	800a504 <__svfiscanf_r+0x1d8>
 800a65c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a65e:	07da      	lsls	r2, r3, #31
 800a660:	d405      	bmi.n	800a66e <__svfiscanf_r+0x342>
 800a662:	89a3      	ldrh	r3, [r4, #12]
 800a664:	059b      	lsls	r3, r3, #22
 800a666:	d402      	bmi.n	800a66e <__svfiscanf_r+0x342>
 800a668:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a66a:	f7fe fd63 	bl	8009134 <__retarget_lock_release_recursive>
 800a66e:	9844      	ldr	r0, [sp, #272]	; 0x110
 800a670:	e751      	b.n	800a516 <__svfiscanf_r+0x1ea>
 800a672:	bf00      	nop
 800a674:	0800648d 	.word	0x0800648d

0800a678 <_vfiscanf_r>:
 800a678:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a67a:	460c      	mov	r4, r1
 800a67c:	4605      	mov	r5, r0
 800a67e:	b138      	cbz	r0, 800a690 <_vfiscanf_r+0x18>
 800a680:	6981      	ldr	r1, [r0, #24]
 800a682:	b929      	cbnz	r1, 800a690 <_vfiscanf_r+0x18>
 800a684:	e9cd 2300 	strd	r2, r3, [sp]
 800a688:	f7fe f924 	bl	80088d4 <__sinit>
 800a68c:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a690:	490a      	ldr	r1, [pc, #40]	; (800a6bc <_vfiscanf_r+0x44>)
 800a692:	428c      	cmp	r4, r1
 800a694:	d107      	bne.n	800a6a6 <_vfiscanf_r+0x2e>
 800a696:	686c      	ldr	r4, [r5, #4]
 800a698:	4621      	mov	r1, r4
 800a69a:	4628      	mov	r0, r5
 800a69c:	b003      	add	sp, #12
 800a69e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a6a2:	f7ff be43 	b.w	800a32c <__svfiscanf_r>
 800a6a6:	4906      	ldr	r1, [pc, #24]	; (800a6c0 <_vfiscanf_r+0x48>)
 800a6a8:	428c      	cmp	r4, r1
 800a6aa:	d101      	bne.n	800a6b0 <_vfiscanf_r+0x38>
 800a6ac:	68ac      	ldr	r4, [r5, #8]
 800a6ae:	e7f3      	b.n	800a698 <_vfiscanf_r+0x20>
 800a6b0:	4904      	ldr	r1, [pc, #16]	; (800a6c4 <_vfiscanf_r+0x4c>)
 800a6b2:	428c      	cmp	r4, r1
 800a6b4:	bf08      	it	eq
 800a6b6:	68ec      	ldreq	r4, [r5, #12]
 800a6b8:	e7ee      	b.n	800a698 <_vfiscanf_r+0x20>
 800a6ba:	bf00      	nop
 800a6bc:	0800c12c 	.word	0x0800c12c
 800a6c0:	0800c14c 	.word	0x0800c14c
 800a6c4:	0800c10c 	.word	0x0800c10c

0800a6c8 <_scanf_chars>:
 800a6c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a6cc:	4615      	mov	r5, r2
 800a6ce:	688a      	ldr	r2, [r1, #8]
 800a6d0:	4680      	mov	r8, r0
 800a6d2:	460c      	mov	r4, r1
 800a6d4:	b932      	cbnz	r2, 800a6e4 <_scanf_chars+0x1c>
 800a6d6:	698a      	ldr	r2, [r1, #24]
 800a6d8:	2a00      	cmp	r2, #0
 800a6da:	bf0c      	ite	eq
 800a6dc:	2201      	moveq	r2, #1
 800a6de:	f04f 32ff 	movne.w	r2, #4294967295
 800a6e2:	608a      	str	r2, [r1, #8]
 800a6e4:	6822      	ldr	r2, [r4, #0]
 800a6e6:	f8df 9090 	ldr.w	r9, [pc, #144]	; 800a778 <_scanf_chars+0xb0>
 800a6ea:	06d1      	lsls	r1, r2, #27
 800a6ec:	bf5f      	itttt	pl
 800a6ee:	681a      	ldrpl	r2, [r3, #0]
 800a6f0:	1d11      	addpl	r1, r2, #4
 800a6f2:	6019      	strpl	r1, [r3, #0]
 800a6f4:	6816      	ldrpl	r6, [r2, #0]
 800a6f6:	2700      	movs	r7, #0
 800a6f8:	69a0      	ldr	r0, [r4, #24]
 800a6fa:	b188      	cbz	r0, 800a720 <_scanf_chars+0x58>
 800a6fc:	2801      	cmp	r0, #1
 800a6fe:	d107      	bne.n	800a710 <_scanf_chars+0x48>
 800a700:	682a      	ldr	r2, [r5, #0]
 800a702:	7811      	ldrb	r1, [r2, #0]
 800a704:	6962      	ldr	r2, [r4, #20]
 800a706:	5c52      	ldrb	r2, [r2, r1]
 800a708:	b952      	cbnz	r2, 800a720 <_scanf_chars+0x58>
 800a70a:	2f00      	cmp	r7, #0
 800a70c:	d031      	beq.n	800a772 <_scanf_chars+0xaa>
 800a70e:	e022      	b.n	800a756 <_scanf_chars+0x8e>
 800a710:	2802      	cmp	r0, #2
 800a712:	d120      	bne.n	800a756 <_scanf_chars+0x8e>
 800a714:	682b      	ldr	r3, [r5, #0]
 800a716:	781b      	ldrb	r3, [r3, #0]
 800a718:	f813 3009 	ldrb.w	r3, [r3, r9]
 800a71c:	071b      	lsls	r3, r3, #28
 800a71e:	d41a      	bmi.n	800a756 <_scanf_chars+0x8e>
 800a720:	6823      	ldr	r3, [r4, #0]
 800a722:	06da      	lsls	r2, r3, #27
 800a724:	bf5e      	ittt	pl
 800a726:	682b      	ldrpl	r3, [r5, #0]
 800a728:	781b      	ldrbpl	r3, [r3, #0]
 800a72a:	f806 3b01 	strbpl.w	r3, [r6], #1
 800a72e:	682a      	ldr	r2, [r5, #0]
 800a730:	686b      	ldr	r3, [r5, #4]
 800a732:	3201      	adds	r2, #1
 800a734:	602a      	str	r2, [r5, #0]
 800a736:	68a2      	ldr	r2, [r4, #8]
 800a738:	3b01      	subs	r3, #1
 800a73a:	3a01      	subs	r2, #1
 800a73c:	606b      	str	r3, [r5, #4]
 800a73e:	3701      	adds	r7, #1
 800a740:	60a2      	str	r2, [r4, #8]
 800a742:	b142      	cbz	r2, 800a756 <_scanf_chars+0x8e>
 800a744:	2b00      	cmp	r3, #0
 800a746:	dcd7      	bgt.n	800a6f8 <_scanf_chars+0x30>
 800a748:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800a74c:	4629      	mov	r1, r5
 800a74e:	4640      	mov	r0, r8
 800a750:	4798      	blx	r3
 800a752:	2800      	cmp	r0, #0
 800a754:	d0d0      	beq.n	800a6f8 <_scanf_chars+0x30>
 800a756:	6823      	ldr	r3, [r4, #0]
 800a758:	f013 0310 	ands.w	r3, r3, #16
 800a75c:	d105      	bne.n	800a76a <_scanf_chars+0xa2>
 800a75e:	68e2      	ldr	r2, [r4, #12]
 800a760:	3201      	adds	r2, #1
 800a762:	60e2      	str	r2, [r4, #12]
 800a764:	69a2      	ldr	r2, [r4, #24]
 800a766:	b102      	cbz	r2, 800a76a <_scanf_chars+0xa2>
 800a768:	7033      	strb	r3, [r6, #0]
 800a76a:	6923      	ldr	r3, [r4, #16]
 800a76c:	443b      	add	r3, r7
 800a76e:	6123      	str	r3, [r4, #16]
 800a770:	2000      	movs	r0, #0
 800a772:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a776:	bf00      	nop
 800a778:	0800bf79 	.word	0x0800bf79

0800a77c <_scanf_i>:
 800a77c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a780:	4698      	mov	r8, r3
 800a782:	4b76      	ldr	r3, [pc, #472]	; (800a95c <_scanf_i+0x1e0>)
 800a784:	460c      	mov	r4, r1
 800a786:	4682      	mov	sl, r0
 800a788:	4616      	mov	r6, r2
 800a78a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800a78e:	b087      	sub	sp, #28
 800a790:	ab03      	add	r3, sp, #12
 800a792:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800a796:	4b72      	ldr	r3, [pc, #456]	; (800a960 <_scanf_i+0x1e4>)
 800a798:	69a1      	ldr	r1, [r4, #24]
 800a79a:	4a72      	ldr	r2, [pc, #456]	; (800a964 <_scanf_i+0x1e8>)
 800a79c:	2903      	cmp	r1, #3
 800a79e:	bf18      	it	ne
 800a7a0:	461a      	movne	r2, r3
 800a7a2:	68a3      	ldr	r3, [r4, #8]
 800a7a4:	9201      	str	r2, [sp, #4]
 800a7a6:	1e5a      	subs	r2, r3, #1
 800a7a8:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800a7ac:	bf88      	it	hi
 800a7ae:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800a7b2:	4627      	mov	r7, r4
 800a7b4:	bf82      	ittt	hi
 800a7b6:	eb03 0905 	addhi.w	r9, r3, r5
 800a7ba:	f240 135d 	movwhi	r3, #349	; 0x15d
 800a7be:	60a3      	strhi	r3, [r4, #8]
 800a7c0:	f857 3b1c 	ldr.w	r3, [r7], #28
 800a7c4:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 800a7c8:	bf98      	it	ls
 800a7ca:	f04f 0900 	movls.w	r9, #0
 800a7ce:	6023      	str	r3, [r4, #0]
 800a7d0:	463d      	mov	r5, r7
 800a7d2:	f04f 0b00 	mov.w	fp, #0
 800a7d6:	6831      	ldr	r1, [r6, #0]
 800a7d8:	ab03      	add	r3, sp, #12
 800a7da:	7809      	ldrb	r1, [r1, #0]
 800a7dc:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 800a7e0:	2202      	movs	r2, #2
 800a7e2:	f7f5 fcfd 	bl	80001e0 <memchr>
 800a7e6:	b328      	cbz	r0, 800a834 <_scanf_i+0xb8>
 800a7e8:	f1bb 0f01 	cmp.w	fp, #1
 800a7ec:	d159      	bne.n	800a8a2 <_scanf_i+0x126>
 800a7ee:	6862      	ldr	r2, [r4, #4]
 800a7f0:	b92a      	cbnz	r2, 800a7fe <_scanf_i+0x82>
 800a7f2:	6822      	ldr	r2, [r4, #0]
 800a7f4:	2308      	movs	r3, #8
 800a7f6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a7fa:	6063      	str	r3, [r4, #4]
 800a7fc:	6022      	str	r2, [r4, #0]
 800a7fe:	6822      	ldr	r2, [r4, #0]
 800a800:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 800a804:	6022      	str	r2, [r4, #0]
 800a806:	68a2      	ldr	r2, [r4, #8]
 800a808:	1e51      	subs	r1, r2, #1
 800a80a:	60a1      	str	r1, [r4, #8]
 800a80c:	b192      	cbz	r2, 800a834 <_scanf_i+0xb8>
 800a80e:	6832      	ldr	r2, [r6, #0]
 800a810:	1c51      	adds	r1, r2, #1
 800a812:	6031      	str	r1, [r6, #0]
 800a814:	7812      	ldrb	r2, [r2, #0]
 800a816:	f805 2b01 	strb.w	r2, [r5], #1
 800a81a:	6872      	ldr	r2, [r6, #4]
 800a81c:	3a01      	subs	r2, #1
 800a81e:	2a00      	cmp	r2, #0
 800a820:	6072      	str	r2, [r6, #4]
 800a822:	dc07      	bgt.n	800a834 <_scanf_i+0xb8>
 800a824:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 800a828:	4631      	mov	r1, r6
 800a82a:	4650      	mov	r0, sl
 800a82c:	4790      	blx	r2
 800a82e:	2800      	cmp	r0, #0
 800a830:	f040 8085 	bne.w	800a93e <_scanf_i+0x1c2>
 800a834:	f10b 0b01 	add.w	fp, fp, #1
 800a838:	f1bb 0f03 	cmp.w	fp, #3
 800a83c:	d1cb      	bne.n	800a7d6 <_scanf_i+0x5a>
 800a83e:	6863      	ldr	r3, [r4, #4]
 800a840:	b90b      	cbnz	r3, 800a846 <_scanf_i+0xca>
 800a842:	230a      	movs	r3, #10
 800a844:	6063      	str	r3, [r4, #4]
 800a846:	6863      	ldr	r3, [r4, #4]
 800a848:	4947      	ldr	r1, [pc, #284]	; (800a968 <_scanf_i+0x1ec>)
 800a84a:	6960      	ldr	r0, [r4, #20]
 800a84c:	1ac9      	subs	r1, r1, r3
 800a84e:	f000 f93b 	bl	800aac8 <__sccl>
 800a852:	f04f 0b00 	mov.w	fp, #0
 800a856:	68a3      	ldr	r3, [r4, #8]
 800a858:	6822      	ldr	r2, [r4, #0]
 800a85a:	2b00      	cmp	r3, #0
 800a85c:	d03d      	beq.n	800a8da <_scanf_i+0x15e>
 800a85e:	6831      	ldr	r1, [r6, #0]
 800a860:	6960      	ldr	r0, [r4, #20]
 800a862:	f891 c000 	ldrb.w	ip, [r1]
 800a866:	f810 000c 	ldrb.w	r0, [r0, ip]
 800a86a:	2800      	cmp	r0, #0
 800a86c:	d035      	beq.n	800a8da <_scanf_i+0x15e>
 800a86e:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 800a872:	d124      	bne.n	800a8be <_scanf_i+0x142>
 800a874:	0510      	lsls	r0, r2, #20
 800a876:	d522      	bpl.n	800a8be <_scanf_i+0x142>
 800a878:	f10b 0b01 	add.w	fp, fp, #1
 800a87c:	f1b9 0f00 	cmp.w	r9, #0
 800a880:	d003      	beq.n	800a88a <_scanf_i+0x10e>
 800a882:	3301      	adds	r3, #1
 800a884:	f109 39ff 	add.w	r9, r9, #4294967295
 800a888:	60a3      	str	r3, [r4, #8]
 800a88a:	6873      	ldr	r3, [r6, #4]
 800a88c:	3b01      	subs	r3, #1
 800a88e:	2b00      	cmp	r3, #0
 800a890:	6073      	str	r3, [r6, #4]
 800a892:	dd1b      	ble.n	800a8cc <_scanf_i+0x150>
 800a894:	6833      	ldr	r3, [r6, #0]
 800a896:	3301      	adds	r3, #1
 800a898:	6033      	str	r3, [r6, #0]
 800a89a:	68a3      	ldr	r3, [r4, #8]
 800a89c:	3b01      	subs	r3, #1
 800a89e:	60a3      	str	r3, [r4, #8]
 800a8a0:	e7d9      	b.n	800a856 <_scanf_i+0xda>
 800a8a2:	f1bb 0f02 	cmp.w	fp, #2
 800a8a6:	d1ae      	bne.n	800a806 <_scanf_i+0x8a>
 800a8a8:	6822      	ldr	r2, [r4, #0]
 800a8aa:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 800a8ae:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800a8b2:	d1bf      	bne.n	800a834 <_scanf_i+0xb8>
 800a8b4:	2310      	movs	r3, #16
 800a8b6:	6063      	str	r3, [r4, #4]
 800a8b8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a8bc:	e7a2      	b.n	800a804 <_scanf_i+0x88>
 800a8be:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 800a8c2:	6022      	str	r2, [r4, #0]
 800a8c4:	780b      	ldrb	r3, [r1, #0]
 800a8c6:	f805 3b01 	strb.w	r3, [r5], #1
 800a8ca:	e7de      	b.n	800a88a <_scanf_i+0x10e>
 800a8cc:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800a8d0:	4631      	mov	r1, r6
 800a8d2:	4650      	mov	r0, sl
 800a8d4:	4798      	blx	r3
 800a8d6:	2800      	cmp	r0, #0
 800a8d8:	d0df      	beq.n	800a89a <_scanf_i+0x11e>
 800a8da:	6823      	ldr	r3, [r4, #0]
 800a8dc:	05db      	lsls	r3, r3, #23
 800a8de:	d50d      	bpl.n	800a8fc <_scanf_i+0x180>
 800a8e0:	42bd      	cmp	r5, r7
 800a8e2:	d909      	bls.n	800a8f8 <_scanf_i+0x17c>
 800a8e4:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800a8e8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a8ec:	4632      	mov	r2, r6
 800a8ee:	4650      	mov	r0, sl
 800a8f0:	4798      	blx	r3
 800a8f2:	f105 39ff 	add.w	r9, r5, #4294967295
 800a8f6:	464d      	mov	r5, r9
 800a8f8:	42bd      	cmp	r5, r7
 800a8fa:	d02d      	beq.n	800a958 <_scanf_i+0x1dc>
 800a8fc:	6822      	ldr	r2, [r4, #0]
 800a8fe:	f012 0210 	ands.w	r2, r2, #16
 800a902:	d113      	bne.n	800a92c <_scanf_i+0x1b0>
 800a904:	702a      	strb	r2, [r5, #0]
 800a906:	6863      	ldr	r3, [r4, #4]
 800a908:	9e01      	ldr	r6, [sp, #4]
 800a90a:	4639      	mov	r1, r7
 800a90c:	4650      	mov	r0, sl
 800a90e:	47b0      	blx	r6
 800a910:	6821      	ldr	r1, [r4, #0]
 800a912:	f8d8 3000 	ldr.w	r3, [r8]
 800a916:	f011 0f20 	tst.w	r1, #32
 800a91a:	d013      	beq.n	800a944 <_scanf_i+0x1c8>
 800a91c:	1d1a      	adds	r2, r3, #4
 800a91e:	f8c8 2000 	str.w	r2, [r8]
 800a922:	681b      	ldr	r3, [r3, #0]
 800a924:	6018      	str	r0, [r3, #0]
 800a926:	68e3      	ldr	r3, [r4, #12]
 800a928:	3301      	adds	r3, #1
 800a92a:	60e3      	str	r3, [r4, #12]
 800a92c:	1bed      	subs	r5, r5, r7
 800a92e:	44ab      	add	fp, r5
 800a930:	6925      	ldr	r5, [r4, #16]
 800a932:	445d      	add	r5, fp
 800a934:	6125      	str	r5, [r4, #16]
 800a936:	2000      	movs	r0, #0
 800a938:	b007      	add	sp, #28
 800a93a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a93e:	f04f 0b00 	mov.w	fp, #0
 800a942:	e7ca      	b.n	800a8da <_scanf_i+0x15e>
 800a944:	1d1a      	adds	r2, r3, #4
 800a946:	f8c8 2000 	str.w	r2, [r8]
 800a94a:	681b      	ldr	r3, [r3, #0]
 800a94c:	f011 0f01 	tst.w	r1, #1
 800a950:	bf14      	ite	ne
 800a952:	8018      	strhne	r0, [r3, #0]
 800a954:	6018      	streq	r0, [r3, #0]
 800a956:	e7e6      	b.n	800a926 <_scanf_i+0x1aa>
 800a958:	2001      	movs	r0, #1
 800a95a:	e7ed      	b.n	800a938 <_scanf_i+0x1bc>
 800a95c:	0800b430 	.word	0x0800b430
 800a960:	0800accd 	.word	0x0800accd
 800a964:	08007805 	.word	0x08007805
 800a968:	0800c36e 	.word	0x0800c36e

0800a96c <lflush>:
 800a96c:	8983      	ldrh	r3, [r0, #12]
 800a96e:	f003 0309 	and.w	r3, r3, #9
 800a972:	2b09      	cmp	r3, #9
 800a974:	d101      	bne.n	800a97a <lflush+0xe>
 800a976:	f7fd bf43 	b.w	8008800 <fflush>
 800a97a:	2000      	movs	r0, #0
 800a97c:	4770      	bx	lr
	...

0800a980 <__srefill_r>:
 800a980:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a982:	460c      	mov	r4, r1
 800a984:	4605      	mov	r5, r0
 800a986:	b118      	cbz	r0, 800a990 <__srefill_r+0x10>
 800a988:	6983      	ldr	r3, [r0, #24]
 800a98a:	b90b      	cbnz	r3, 800a990 <__srefill_r+0x10>
 800a98c:	f7fd ffa2 	bl	80088d4 <__sinit>
 800a990:	4b3b      	ldr	r3, [pc, #236]	; (800aa80 <__srefill_r+0x100>)
 800a992:	429c      	cmp	r4, r3
 800a994:	d10a      	bne.n	800a9ac <__srefill_r+0x2c>
 800a996:	686c      	ldr	r4, [r5, #4]
 800a998:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a99c:	2300      	movs	r3, #0
 800a99e:	6063      	str	r3, [r4, #4]
 800a9a0:	89a3      	ldrh	r3, [r4, #12]
 800a9a2:	069e      	lsls	r6, r3, #26
 800a9a4:	d50c      	bpl.n	800a9c0 <__srefill_r+0x40>
 800a9a6:	f04f 30ff 	mov.w	r0, #4294967295
 800a9aa:	e066      	b.n	800aa7a <__srefill_r+0xfa>
 800a9ac:	4b35      	ldr	r3, [pc, #212]	; (800aa84 <__srefill_r+0x104>)
 800a9ae:	429c      	cmp	r4, r3
 800a9b0:	d101      	bne.n	800a9b6 <__srefill_r+0x36>
 800a9b2:	68ac      	ldr	r4, [r5, #8]
 800a9b4:	e7f0      	b.n	800a998 <__srefill_r+0x18>
 800a9b6:	4b34      	ldr	r3, [pc, #208]	; (800aa88 <__srefill_r+0x108>)
 800a9b8:	429c      	cmp	r4, r3
 800a9ba:	bf08      	it	eq
 800a9bc:	68ec      	ldreq	r4, [r5, #12]
 800a9be:	e7eb      	b.n	800a998 <__srefill_r+0x18>
 800a9c0:	0758      	lsls	r0, r3, #29
 800a9c2:	d448      	bmi.n	800aa56 <__srefill_r+0xd6>
 800a9c4:	06d9      	lsls	r1, r3, #27
 800a9c6:	d405      	bmi.n	800a9d4 <__srefill_r+0x54>
 800a9c8:	2309      	movs	r3, #9
 800a9ca:	602b      	str	r3, [r5, #0]
 800a9cc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800a9d0:	81a3      	strh	r3, [r4, #12]
 800a9d2:	e7e8      	b.n	800a9a6 <__srefill_r+0x26>
 800a9d4:	071a      	lsls	r2, r3, #28
 800a9d6:	d50b      	bpl.n	800a9f0 <__srefill_r+0x70>
 800a9d8:	4621      	mov	r1, r4
 800a9da:	4628      	mov	r0, r5
 800a9dc:	f7fd fed4 	bl	8008788 <_fflush_r>
 800a9e0:	2800      	cmp	r0, #0
 800a9e2:	d1e0      	bne.n	800a9a6 <__srefill_r+0x26>
 800a9e4:	89a3      	ldrh	r3, [r4, #12]
 800a9e6:	60a0      	str	r0, [r4, #8]
 800a9e8:	f023 0308 	bic.w	r3, r3, #8
 800a9ec:	81a3      	strh	r3, [r4, #12]
 800a9ee:	61a0      	str	r0, [r4, #24]
 800a9f0:	89a3      	ldrh	r3, [r4, #12]
 800a9f2:	f043 0304 	orr.w	r3, r3, #4
 800a9f6:	81a3      	strh	r3, [r4, #12]
 800a9f8:	6923      	ldr	r3, [r4, #16]
 800a9fa:	b91b      	cbnz	r3, 800aa04 <__srefill_r+0x84>
 800a9fc:	4621      	mov	r1, r4
 800a9fe:	4628      	mov	r0, r5
 800aa00:	f7fe fbbe 	bl	8009180 <__smakebuf_r>
 800aa04:	89a6      	ldrh	r6, [r4, #12]
 800aa06:	f9b4 700c 	ldrsh.w	r7, [r4, #12]
 800aa0a:	07b3      	lsls	r3, r6, #30
 800aa0c:	d00f      	beq.n	800aa2e <__srefill_r+0xae>
 800aa0e:	2301      	movs	r3, #1
 800aa10:	81a3      	strh	r3, [r4, #12]
 800aa12:	4b1e      	ldr	r3, [pc, #120]	; (800aa8c <__srefill_r+0x10c>)
 800aa14:	491e      	ldr	r1, [pc, #120]	; (800aa90 <__srefill_r+0x110>)
 800aa16:	6818      	ldr	r0, [r3, #0]
 800aa18:	f006 0609 	and.w	r6, r6, #9
 800aa1c:	f7fd ffd8 	bl	80089d0 <_fwalk>
 800aa20:	2e09      	cmp	r6, #9
 800aa22:	81a7      	strh	r7, [r4, #12]
 800aa24:	d103      	bne.n	800aa2e <__srefill_r+0xae>
 800aa26:	4621      	mov	r1, r4
 800aa28:	4628      	mov	r0, r5
 800aa2a:	f7fd fe27 	bl	800867c <__sflush_r>
 800aa2e:	6922      	ldr	r2, [r4, #16]
 800aa30:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800aa32:	6963      	ldr	r3, [r4, #20]
 800aa34:	6a21      	ldr	r1, [r4, #32]
 800aa36:	6022      	str	r2, [r4, #0]
 800aa38:	4628      	mov	r0, r5
 800aa3a:	47b0      	blx	r6
 800aa3c:	2800      	cmp	r0, #0
 800aa3e:	6060      	str	r0, [r4, #4]
 800aa40:	dc1c      	bgt.n	800aa7c <__srefill_r+0xfc>
 800aa42:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800aa46:	bf17      	itett	ne
 800aa48:	2200      	movne	r2, #0
 800aa4a:	f043 0320 	orreq.w	r3, r3, #32
 800aa4e:	6062      	strne	r2, [r4, #4]
 800aa50:	f043 0340 	orrne.w	r3, r3, #64	; 0x40
 800aa54:	e7bc      	b.n	800a9d0 <__srefill_r+0x50>
 800aa56:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800aa58:	2900      	cmp	r1, #0
 800aa5a:	d0cd      	beq.n	800a9f8 <__srefill_r+0x78>
 800aa5c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800aa60:	4299      	cmp	r1, r3
 800aa62:	d002      	beq.n	800aa6a <__srefill_r+0xea>
 800aa64:	4628      	mov	r0, r5
 800aa66:	f7ff f8cb 	bl	8009c00 <_free_r>
 800aa6a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800aa6c:	6063      	str	r3, [r4, #4]
 800aa6e:	2000      	movs	r0, #0
 800aa70:	6360      	str	r0, [r4, #52]	; 0x34
 800aa72:	2b00      	cmp	r3, #0
 800aa74:	d0c0      	beq.n	800a9f8 <__srefill_r+0x78>
 800aa76:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800aa78:	6023      	str	r3, [r4, #0]
 800aa7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800aa7c:	2000      	movs	r0, #0
 800aa7e:	e7fc      	b.n	800aa7a <__srefill_r+0xfa>
 800aa80:	0800c12c 	.word	0x0800c12c
 800aa84:	0800c14c 	.word	0x0800c14c
 800aa88:	0800c10c 	.word	0x0800c10c
 800aa8c:	0800bee8 	.word	0x0800bee8
 800aa90:	0800a96d 	.word	0x0800a96d
 800aa94:	00000000 	.word	0x00000000

0800aa98 <nan>:
 800aa98:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800aaa0 <nan+0x8>
 800aa9c:	4770      	bx	lr
 800aa9e:	bf00      	nop
 800aaa0:	00000000 	.word	0x00000000
 800aaa4:	7ff80000 	.word	0x7ff80000

0800aaa8 <_sbrk_r>:
 800aaa8:	b538      	push	{r3, r4, r5, lr}
 800aaaa:	4d06      	ldr	r5, [pc, #24]	; (800aac4 <_sbrk_r+0x1c>)
 800aaac:	2300      	movs	r3, #0
 800aaae:	4604      	mov	r4, r0
 800aab0:	4608      	mov	r0, r1
 800aab2:	602b      	str	r3, [r5, #0]
 800aab4:	f7f7 fcee 	bl	8002494 <_sbrk>
 800aab8:	1c43      	adds	r3, r0, #1
 800aaba:	d102      	bne.n	800aac2 <_sbrk_r+0x1a>
 800aabc:	682b      	ldr	r3, [r5, #0]
 800aabe:	b103      	cbz	r3, 800aac2 <_sbrk_r+0x1a>
 800aac0:	6023      	str	r3, [r4, #0]
 800aac2:	bd38      	pop	{r3, r4, r5, pc}
 800aac4:	20000344 	.word	0x20000344

0800aac8 <__sccl>:
 800aac8:	b570      	push	{r4, r5, r6, lr}
 800aaca:	780b      	ldrb	r3, [r1, #0]
 800aacc:	4604      	mov	r4, r0
 800aace:	2b5e      	cmp	r3, #94	; 0x5e
 800aad0:	bf0b      	itete	eq
 800aad2:	784b      	ldrbeq	r3, [r1, #1]
 800aad4:	1c48      	addne	r0, r1, #1
 800aad6:	1c88      	addeq	r0, r1, #2
 800aad8:	2200      	movne	r2, #0
 800aada:	bf08      	it	eq
 800aadc:	2201      	moveq	r2, #1
 800aade:	1e61      	subs	r1, r4, #1
 800aae0:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 800aae4:	f801 2f01 	strb.w	r2, [r1, #1]!
 800aae8:	42a9      	cmp	r1, r5
 800aaea:	d1fb      	bne.n	800aae4 <__sccl+0x1c>
 800aaec:	b90b      	cbnz	r3, 800aaf2 <__sccl+0x2a>
 800aaee:	3801      	subs	r0, #1
 800aaf0:	bd70      	pop	{r4, r5, r6, pc}
 800aaf2:	f082 0201 	eor.w	r2, r2, #1
 800aaf6:	54e2      	strb	r2, [r4, r3]
 800aaf8:	4605      	mov	r5, r0
 800aafa:	4628      	mov	r0, r5
 800aafc:	f810 1b01 	ldrb.w	r1, [r0], #1
 800ab00:	292d      	cmp	r1, #45	; 0x2d
 800ab02:	d006      	beq.n	800ab12 <__sccl+0x4a>
 800ab04:	295d      	cmp	r1, #93	; 0x5d
 800ab06:	d0f3      	beq.n	800aaf0 <__sccl+0x28>
 800ab08:	b909      	cbnz	r1, 800ab0e <__sccl+0x46>
 800ab0a:	4628      	mov	r0, r5
 800ab0c:	e7f0      	b.n	800aaf0 <__sccl+0x28>
 800ab0e:	460b      	mov	r3, r1
 800ab10:	e7f1      	b.n	800aaf6 <__sccl+0x2e>
 800ab12:	786e      	ldrb	r6, [r5, #1]
 800ab14:	2e5d      	cmp	r6, #93	; 0x5d
 800ab16:	d0fa      	beq.n	800ab0e <__sccl+0x46>
 800ab18:	42b3      	cmp	r3, r6
 800ab1a:	dcf8      	bgt.n	800ab0e <__sccl+0x46>
 800ab1c:	3502      	adds	r5, #2
 800ab1e:	4619      	mov	r1, r3
 800ab20:	3101      	adds	r1, #1
 800ab22:	428e      	cmp	r6, r1
 800ab24:	5462      	strb	r2, [r4, r1]
 800ab26:	dcfb      	bgt.n	800ab20 <__sccl+0x58>
 800ab28:	1af1      	subs	r1, r6, r3
 800ab2a:	3901      	subs	r1, #1
 800ab2c:	1c58      	adds	r0, r3, #1
 800ab2e:	42b3      	cmp	r3, r6
 800ab30:	bfa8      	it	ge
 800ab32:	2100      	movge	r1, #0
 800ab34:	1843      	adds	r3, r0, r1
 800ab36:	e7e0      	b.n	800aafa <__sccl+0x32>

0800ab38 <__sread>:
 800ab38:	b510      	push	{r4, lr}
 800ab3a:	460c      	mov	r4, r1
 800ab3c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ab40:	f000 fa82 	bl	800b048 <_read_r>
 800ab44:	2800      	cmp	r0, #0
 800ab46:	bfab      	itete	ge
 800ab48:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800ab4a:	89a3      	ldrhlt	r3, [r4, #12]
 800ab4c:	181b      	addge	r3, r3, r0
 800ab4e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800ab52:	bfac      	ite	ge
 800ab54:	6563      	strge	r3, [r4, #84]	; 0x54
 800ab56:	81a3      	strhlt	r3, [r4, #12]
 800ab58:	bd10      	pop	{r4, pc}

0800ab5a <__swrite>:
 800ab5a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ab5e:	461f      	mov	r7, r3
 800ab60:	898b      	ldrh	r3, [r1, #12]
 800ab62:	05db      	lsls	r3, r3, #23
 800ab64:	4605      	mov	r5, r0
 800ab66:	460c      	mov	r4, r1
 800ab68:	4616      	mov	r6, r2
 800ab6a:	d505      	bpl.n	800ab78 <__swrite+0x1e>
 800ab6c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ab70:	2302      	movs	r3, #2
 800ab72:	2200      	movs	r2, #0
 800ab74:	f000 fa00 	bl	800af78 <_lseek_r>
 800ab78:	89a3      	ldrh	r3, [r4, #12]
 800ab7a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ab7e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800ab82:	81a3      	strh	r3, [r4, #12]
 800ab84:	4632      	mov	r2, r6
 800ab86:	463b      	mov	r3, r7
 800ab88:	4628      	mov	r0, r5
 800ab8a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ab8e:	f000 b97f 	b.w	800ae90 <_write_r>

0800ab92 <__sseek>:
 800ab92:	b510      	push	{r4, lr}
 800ab94:	460c      	mov	r4, r1
 800ab96:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ab9a:	f000 f9ed 	bl	800af78 <_lseek_r>
 800ab9e:	1c43      	adds	r3, r0, #1
 800aba0:	89a3      	ldrh	r3, [r4, #12]
 800aba2:	bf15      	itete	ne
 800aba4:	6560      	strne	r0, [r4, #84]	; 0x54
 800aba6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800abaa:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800abae:	81a3      	strheq	r3, [r4, #12]
 800abb0:	bf18      	it	ne
 800abb2:	81a3      	strhne	r3, [r4, #12]
 800abb4:	bd10      	pop	{r4, pc}

0800abb6 <__sclose>:
 800abb6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800abba:	f000 b999 	b.w	800aef0 <_close_r>

0800abbe <strncmp>:
 800abbe:	b510      	push	{r4, lr}
 800abc0:	b17a      	cbz	r2, 800abe2 <strncmp+0x24>
 800abc2:	4603      	mov	r3, r0
 800abc4:	3901      	subs	r1, #1
 800abc6:	1884      	adds	r4, r0, r2
 800abc8:	f813 0b01 	ldrb.w	r0, [r3], #1
 800abcc:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800abd0:	4290      	cmp	r0, r2
 800abd2:	d101      	bne.n	800abd8 <strncmp+0x1a>
 800abd4:	42a3      	cmp	r3, r4
 800abd6:	d101      	bne.n	800abdc <strncmp+0x1e>
 800abd8:	1a80      	subs	r0, r0, r2
 800abda:	bd10      	pop	{r4, pc}
 800abdc:	2800      	cmp	r0, #0
 800abde:	d1f3      	bne.n	800abc8 <strncmp+0xa>
 800abe0:	e7fa      	b.n	800abd8 <strncmp+0x1a>
 800abe2:	4610      	mov	r0, r2
 800abe4:	e7f9      	b.n	800abda <strncmp+0x1c>
	...

0800abe8 <_strtoul_l.constprop.0>:
 800abe8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800abec:	4f36      	ldr	r7, [pc, #216]	; (800acc8 <_strtoul_l.constprop.0+0xe0>)
 800abee:	4686      	mov	lr, r0
 800abf0:	460d      	mov	r5, r1
 800abf2:	4628      	mov	r0, r5
 800abf4:	f815 4b01 	ldrb.w	r4, [r5], #1
 800abf8:	5de6      	ldrb	r6, [r4, r7]
 800abfa:	f016 0608 	ands.w	r6, r6, #8
 800abfe:	d1f8      	bne.n	800abf2 <_strtoul_l.constprop.0+0xa>
 800ac00:	2c2d      	cmp	r4, #45	; 0x2d
 800ac02:	d12f      	bne.n	800ac64 <_strtoul_l.constprop.0+0x7c>
 800ac04:	782c      	ldrb	r4, [r5, #0]
 800ac06:	2601      	movs	r6, #1
 800ac08:	1c85      	adds	r5, r0, #2
 800ac0a:	2b00      	cmp	r3, #0
 800ac0c:	d057      	beq.n	800acbe <_strtoul_l.constprop.0+0xd6>
 800ac0e:	2b10      	cmp	r3, #16
 800ac10:	d109      	bne.n	800ac26 <_strtoul_l.constprop.0+0x3e>
 800ac12:	2c30      	cmp	r4, #48	; 0x30
 800ac14:	d107      	bne.n	800ac26 <_strtoul_l.constprop.0+0x3e>
 800ac16:	7828      	ldrb	r0, [r5, #0]
 800ac18:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800ac1c:	2858      	cmp	r0, #88	; 0x58
 800ac1e:	d149      	bne.n	800acb4 <_strtoul_l.constprop.0+0xcc>
 800ac20:	786c      	ldrb	r4, [r5, #1]
 800ac22:	2310      	movs	r3, #16
 800ac24:	3502      	adds	r5, #2
 800ac26:	f04f 38ff 	mov.w	r8, #4294967295
 800ac2a:	2700      	movs	r7, #0
 800ac2c:	fbb8 f8f3 	udiv	r8, r8, r3
 800ac30:	fb03 f908 	mul.w	r9, r3, r8
 800ac34:	ea6f 0909 	mvn.w	r9, r9
 800ac38:	4638      	mov	r0, r7
 800ac3a:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800ac3e:	f1bc 0f09 	cmp.w	ip, #9
 800ac42:	d814      	bhi.n	800ac6e <_strtoul_l.constprop.0+0x86>
 800ac44:	4664      	mov	r4, ip
 800ac46:	42a3      	cmp	r3, r4
 800ac48:	dd22      	ble.n	800ac90 <_strtoul_l.constprop.0+0xa8>
 800ac4a:	2f00      	cmp	r7, #0
 800ac4c:	db1d      	blt.n	800ac8a <_strtoul_l.constprop.0+0xa2>
 800ac4e:	4580      	cmp	r8, r0
 800ac50:	d31b      	bcc.n	800ac8a <_strtoul_l.constprop.0+0xa2>
 800ac52:	d101      	bne.n	800ac58 <_strtoul_l.constprop.0+0x70>
 800ac54:	45a1      	cmp	r9, r4
 800ac56:	db18      	blt.n	800ac8a <_strtoul_l.constprop.0+0xa2>
 800ac58:	fb00 4003 	mla	r0, r0, r3, r4
 800ac5c:	2701      	movs	r7, #1
 800ac5e:	f815 4b01 	ldrb.w	r4, [r5], #1
 800ac62:	e7ea      	b.n	800ac3a <_strtoul_l.constprop.0+0x52>
 800ac64:	2c2b      	cmp	r4, #43	; 0x2b
 800ac66:	bf04      	itt	eq
 800ac68:	782c      	ldrbeq	r4, [r5, #0]
 800ac6a:	1c85      	addeq	r5, r0, #2
 800ac6c:	e7cd      	b.n	800ac0a <_strtoul_l.constprop.0+0x22>
 800ac6e:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800ac72:	f1bc 0f19 	cmp.w	ip, #25
 800ac76:	d801      	bhi.n	800ac7c <_strtoul_l.constprop.0+0x94>
 800ac78:	3c37      	subs	r4, #55	; 0x37
 800ac7a:	e7e4      	b.n	800ac46 <_strtoul_l.constprop.0+0x5e>
 800ac7c:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800ac80:	f1bc 0f19 	cmp.w	ip, #25
 800ac84:	d804      	bhi.n	800ac90 <_strtoul_l.constprop.0+0xa8>
 800ac86:	3c57      	subs	r4, #87	; 0x57
 800ac88:	e7dd      	b.n	800ac46 <_strtoul_l.constprop.0+0x5e>
 800ac8a:	f04f 37ff 	mov.w	r7, #4294967295
 800ac8e:	e7e6      	b.n	800ac5e <_strtoul_l.constprop.0+0x76>
 800ac90:	2f00      	cmp	r7, #0
 800ac92:	da07      	bge.n	800aca4 <_strtoul_l.constprop.0+0xbc>
 800ac94:	2322      	movs	r3, #34	; 0x22
 800ac96:	f8ce 3000 	str.w	r3, [lr]
 800ac9a:	f04f 30ff 	mov.w	r0, #4294967295
 800ac9e:	b932      	cbnz	r2, 800acae <_strtoul_l.constprop.0+0xc6>
 800aca0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800aca4:	b106      	cbz	r6, 800aca8 <_strtoul_l.constprop.0+0xc0>
 800aca6:	4240      	negs	r0, r0
 800aca8:	2a00      	cmp	r2, #0
 800acaa:	d0f9      	beq.n	800aca0 <_strtoul_l.constprop.0+0xb8>
 800acac:	b107      	cbz	r7, 800acb0 <_strtoul_l.constprop.0+0xc8>
 800acae:	1e69      	subs	r1, r5, #1
 800acb0:	6011      	str	r1, [r2, #0]
 800acb2:	e7f5      	b.n	800aca0 <_strtoul_l.constprop.0+0xb8>
 800acb4:	2430      	movs	r4, #48	; 0x30
 800acb6:	2b00      	cmp	r3, #0
 800acb8:	d1b5      	bne.n	800ac26 <_strtoul_l.constprop.0+0x3e>
 800acba:	2308      	movs	r3, #8
 800acbc:	e7b3      	b.n	800ac26 <_strtoul_l.constprop.0+0x3e>
 800acbe:	2c30      	cmp	r4, #48	; 0x30
 800acc0:	d0a9      	beq.n	800ac16 <_strtoul_l.constprop.0+0x2e>
 800acc2:	230a      	movs	r3, #10
 800acc4:	e7af      	b.n	800ac26 <_strtoul_l.constprop.0+0x3e>
 800acc6:	bf00      	nop
 800acc8:	0800bf79 	.word	0x0800bf79

0800accc <_strtoul_r>:
 800accc:	f7ff bf8c 	b.w	800abe8 <_strtoul_l.constprop.0>

0800acd0 <__submore>:
 800acd0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800acd4:	460c      	mov	r4, r1
 800acd6:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800acd8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800acdc:	4299      	cmp	r1, r3
 800acde:	d11d      	bne.n	800ad1c <__submore+0x4c>
 800ace0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800ace4:	f7fe fff8 	bl	8009cd8 <_malloc_r>
 800ace8:	b918      	cbnz	r0, 800acf2 <__submore+0x22>
 800acea:	f04f 30ff 	mov.w	r0, #4294967295
 800acee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800acf2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800acf6:	63a3      	str	r3, [r4, #56]	; 0x38
 800acf8:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 800acfc:	6360      	str	r0, [r4, #52]	; 0x34
 800acfe:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 800ad02:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800ad06:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 800ad0a:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800ad0e:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 800ad12:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 800ad16:	6020      	str	r0, [r4, #0]
 800ad18:	2000      	movs	r0, #0
 800ad1a:	e7e8      	b.n	800acee <__submore+0x1e>
 800ad1c:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 800ad1e:	0077      	lsls	r7, r6, #1
 800ad20:	463a      	mov	r2, r7
 800ad22:	f000 f961 	bl	800afe8 <_realloc_r>
 800ad26:	4605      	mov	r5, r0
 800ad28:	2800      	cmp	r0, #0
 800ad2a:	d0de      	beq.n	800acea <__submore+0x1a>
 800ad2c:	eb00 0806 	add.w	r8, r0, r6
 800ad30:	4601      	mov	r1, r0
 800ad32:	4632      	mov	r2, r6
 800ad34:	4640      	mov	r0, r8
 800ad36:	f7fe fa7d 	bl	8009234 <memcpy>
 800ad3a:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 800ad3e:	f8c4 8000 	str.w	r8, [r4]
 800ad42:	e7e9      	b.n	800ad18 <__submore+0x48>

0800ad44 <_ungetc_r>:
 800ad44:	b570      	push	{r4, r5, r6, lr}
 800ad46:	4614      	mov	r4, r2
 800ad48:	1c4a      	adds	r2, r1, #1
 800ad4a:	4606      	mov	r6, r0
 800ad4c:	460d      	mov	r5, r1
 800ad4e:	d103      	bne.n	800ad58 <_ungetc_r+0x14>
 800ad50:	f04f 35ff 	mov.w	r5, #4294967295
 800ad54:	4628      	mov	r0, r5
 800ad56:	bd70      	pop	{r4, r5, r6, pc}
 800ad58:	b118      	cbz	r0, 800ad62 <_ungetc_r+0x1e>
 800ad5a:	6983      	ldr	r3, [r0, #24]
 800ad5c:	b90b      	cbnz	r3, 800ad62 <_ungetc_r+0x1e>
 800ad5e:	f7fd fdb9 	bl	80088d4 <__sinit>
 800ad62:	4b41      	ldr	r3, [pc, #260]	; (800ae68 <_ungetc_r+0x124>)
 800ad64:	429c      	cmp	r4, r3
 800ad66:	d11d      	bne.n	800ada4 <_ungetc_r+0x60>
 800ad68:	6874      	ldr	r4, [r6, #4]
 800ad6a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ad6c:	07db      	lsls	r3, r3, #31
 800ad6e:	d405      	bmi.n	800ad7c <_ungetc_r+0x38>
 800ad70:	89a3      	ldrh	r3, [r4, #12]
 800ad72:	0598      	lsls	r0, r3, #22
 800ad74:	d402      	bmi.n	800ad7c <_ungetc_r+0x38>
 800ad76:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ad78:	f7fe f9db 	bl	8009132 <__retarget_lock_acquire_recursive>
 800ad7c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ad80:	f023 0320 	bic.w	r3, r3, #32
 800ad84:	0759      	lsls	r1, r3, #29
 800ad86:	81a3      	strh	r3, [r4, #12]
 800ad88:	b29a      	uxth	r2, r3
 800ad8a:	d42d      	bmi.n	800ade8 <_ungetc_r+0xa4>
 800ad8c:	06d3      	lsls	r3, r2, #27
 800ad8e:	d413      	bmi.n	800adb8 <_ungetc_r+0x74>
 800ad90:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ad92:	07dd      	lsls	r5, r3, #31
 800ad94:	d4dc      	bmi.n	800ad50 <_ungetc_r+0xc>
 800ad96:	f412 7f00 	tst.w	r2, #512	; 0x200
 800ad9a:	d1d9      	bne.n	800ad50 <_ungetc_r+0xc>
 800ad9c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ad9e:	f7fe f9c9 	bl	8009134 <__retarget_lock_release_recursive>
 800ada2:	e7d5      	b.n	800ad50 <_ungetc_r+0xc>
 800ada4:	4b31      	ldr	r3, [pc, #196]	; (800ae6c <_ungetc_r+0x128>)
 800ada6:	429c      	cmp	r4, r3
 800ada8:	d101      	bne.n	800adae <_ungetc_r+0x6a>
 800adaa:	68b4      	ldr	r4, [r6, #8]
 800adac:	e7dd      	b.n	800ad6a <_ungetc_r+0x26>
 800adae:	4b30      	ldr	r3, [pc, #192]	; (800ae70 <_ungetc_r+0x12c>)
 800adb0:	429c      	cmp	r4, r3
 800adb2:	bf08      	it	eq
 800adb4:	68f4      	ldreq	r4, [r6, #12]
 800adb6:	e7d8      	b.n	800ad6a <_ungetc_r+0x26>
 800adb8:	0710      	lsls	r0, r2, #28
 800adba:	d511      	bpl.n	800ade0 <_ungetc_r+0x9c>
 800adbc:	4621      	mov	r1, r4
 800adbe:	4630      	mov	r0, r6
 800adc0:	f7fd fce2 	bl	8008788 <_fflush_r>
 800adc4:	b130      	cbz	r0, 800add4 <_ungetc_r+0x90>
 800adc6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800adc8:	07d9      	lsls	r1, r3, #31
 800adca:	d4c1      	bmi.n	800ad50 <_ungetc_r+0xc>
 800adcc:	89a3      	ldrh	r3, [r4, #12]
 800adce:	f413 7f00 	tst.w	r3, #512	; 0x200
 800add2:	e7e2      	b.n	800ad9a <_ungetc_r+0x56>
 800add4:	89a3      	ldrh	r3, [r4, #12]
 800add6:	60a0      	str	r0, [r4, #8]
 800add8:	f023 0308 	bic.w	r3, r3, #8
 800addc:	81a3      	strh	r3, [r4, #12]
 800adde:	61a0      	str	r0, [r4, #24]
 800ade0:	89a3      	ldrh	r3, [r4, #12]
 800ade2:	f043 0304 	orr.w	r3, r3, #4
 800ade6:	81a3      	strh	r3, [r4, #12]
 800ade8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800adea:	6862      	ldr	r2, [r4, #4]
 800adec:	b2ed      	uxtb	r5, r5
 800adee:	b1d3      	cbz	r3, 800ae26 <_ungetc_r+0xe2>
 800adf0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800adf2:	4293      	cmp	r3, r2
 800adf4:	dc05      	bgt.n	800ae02 <_ungetc_r+0xbe>
 800adf6:	4621      	mov	r1, r4
 800adf8:	4630      	mov	r0, r6
 800adfa:	f7ff ff69 	bl	800acd0 <__submore>
 800adfe:	2800      	cmp	r0, #0
 800ae00:	d1e1      	bne.n	800adc6 <_ungetc_r+0x82>
 800ae02:	6823      	ldr	r3, [r4, #0]
 800ae04:	1e5a      	subs	r2, r3, #1
 800ae06:	6022      	str	r2, [r4, #0]
 800ae08:	f803 5c01 	strb.w	r5, [r3, #-1]
 800ae0c:	6863      	ldr	r3, [r4, #4]
 800ae0e:	3301      	adds	r3, #1
 800ae10:	6063      	str	r3, [r4, #4]
 800ae12:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ae14:	07da      	lsls	r2, r3, #31
 800ae16:	d49d      	bmi.n	800ad54 <_ungetc_r+0x10>
 800ae18:	89a3      	ldrh	r3, [r4, #12]
 800ae1a:	059b      	lsls	r3, r3, #22
 800ae1c:	d49a      	bmi.n	800ad54 <_ungetc_r+0x10>
 800ae1e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ae20:	f7fe f988 	bl	8009134 <__retarget_lock_release_recursive>
 800ae24:	e796      	b.n	800ad54 <_ungetc_r+0x10>
 800ae26:	6e61      	ldr	r1, [r4, #100]	; 0x64
 800ae28:	6920      	ldr	r0, [r4, #16]
 800ae2a:	6823      	ldr	r3, [r4, #0]
 800ae2c:	f001 0101 	and.w	r1, r1, #1
 800ae30:	b160      	cbz	r0, 800ae4c <_ungetc_r+0x108>
 800ae32:	4298      	cmp	r0, r3
 800ae34:	d20a      	bcs.n	800ae4c <_ungetc_r+0x108>
 800ae36:	f813 0c01 	ldrb.w	r0, [r3, #-1]
 800ae3a:	42a8      	cmp	r0, r5
 800ae3c:	d106      	bne.n	800ae4c <_ungetc_r+0x108>
 800ae3e:	3b01      	subs	r3, #1
 800ae40:	3201      	adds	r2, #1
 800ae42:	6023      	str	r3, [r4, #0]
 800ae44:	6062      	str	r2, [r4, #4]
 800ae46:	2900      	cmp	r1, #0
 800ae48:	d184      	bne.n	800ad54 <_ungetc_r+0x10>
 800ae4a:	e7e5      	b.n	800ae18 <_ungetc_r+0xd4>
 800ae4c:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 800ae50:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ae54:	6363      	str	r3, [r4, #52]	; 0x34
 800ae56:	2303      	movs	r3, #3
 800ae58:	63a3      	str	r3, [r4, #56]	; 0x38
 800ae5a:	4623      	mov	r3, r4
 800ae5c:	f803 5f46 	strb.w	r5, [r3, #70]!
 800ae60:	6023      	str	r3, [r4, #0]
 800ae62:	2301      	movs	r3, #1
 800ae64:	6063      	str	r3, [r4, #4]
 800ae66:	e7ee      	b.n	800ae46 <_ungetc_r+0x102>
 800ae68:	0800c12c 	.word	0x0800c12c
 800ae6c:	0800c14c 	.word	0x0800c14c
 800ae70:	0800c10c 	.word	0x0800c10c

0800ae74 <__ascii_wctomb>:
 800ae74:	b149      	cbz	r1, 800ae8a <__ascii_wctomb+0x16>
 800ae76:	2aff      	cmp	r2, #255	; 0xff
 800ae78:	bf85      	ittet	hi
 800ae7a:	238a      	movhi	r3, #138	; 0x8a
 800ae7c:	6003      	strhi	r3, [r0, #0]
 800ae7e:	700a      	strbls	r2, [r1, #0]
 800ae80:	f04f 30ff 	movhi.w	r0, #4294967295
 800ae84:	bf98      	it	ls
 800ae86:	2001      	movls	r0, #1
 800ae88:	4770      	bx	lr
 800ae8a:	4608      	mov	r0, r1
 800ae8c:	4770      	bx	lr
	...

0800ae90 <_write_r>:
 800ae90:	b538      	push	{r3, r4, r5, lr}
 800ae92:	4d07      	ldr	r5, [pc, #28]	; (800aeb0 <_write_r+0x20>)
 800ae94:	4604      	mov	r4, r0
 800ae96:	4608      	mov	r0, r1
 800ae98:	4611      	mov	r1, r2
 800ae9a:	2200      	movs	r2, #0
 800ae9c:	602a      	str	r2, [r5, #0]
 800ae9e:	461a      	mov	r2, r3
 800aea0:	f7f7 faa2 	bl	80023e8 <_write>
 800aea4:	1c43      	adds	r3, r0, #1
 800aea6:	d102      	bne.n	800aeae <_write_r+0x1e>
 800aea8:	682b      	ldr	r3, [r5, #0]
 800aeaa:	b103      	cbz	r3, 800aeae <_write_r+0x1e>
 800aeac:	6023      	str	r3, [r4, #0]
 800aeae:	bd38      	pop	{r3, r4, r5, pc}
 800aeb0:	20000344 	.word	0x20000344

0800aeb4 <__assert_func>:
 800aeb4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800aeb6:	4614      	mov	r4, r2
 800aeb8:	461a      	mov	r2, r3
 800aeba:	4b09      	ldr	r3, [pc, #36]	; (800aee0 <__assert_func+0x2c>)
 800aebc:	681b      	ldr	r3, [r3, #0]
 800aebe:	4605      	mov	r5, r0
 800aec0:	68d8      	ldr	r0, [r3, #12]
 800aec2:	b14c      	cbz	r4, 800aed8 <__assert_func+0x24>
 800aec4:	4b07      	ldr	r3, [pc, #28]	; (800aee4 <__assert_func+0x30>)
 800aec6:	9100      	str	r1, [sp, #0]
 800aec8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800aecc:	4906      	ldr	r1, [pc, #24]	; (800aee8 <__assert_func+0x34>)
 800aece:	462b      	mov	r3, r5
 800aed0:	f000 f81e 	bl	800af10 <fiprintf>
 800aed4:	f000 f8ca 	bl	800b06c <abort>
 800aed8:	4b04      	ldr	r3, [pc, #16]	; (800aeec <__assert_func+0x38>)
 800aeda:	461c      	mov	r4, r3
 800aedc:	e7f3      	b.n	800aec6 <__assert_func+0x12>
 800aede:	bf00      	nop
 800aee0:	2000000c 	.word	0x2000000c
 800aee4:	0800c370 	.word	0x0800c370
 800aee8:	0800c37d 	.word	0x0800c37d
 800aeec:	0800c3ab 	.word	0x0800c3ab

0800aef0 <_close_r>:
 800aef0:	b538      	push	{r3, r4, r5, lr}
 800aef2:	4d06      	ldr	r5, [pc, #24]	; (800af0c <_close_r+0x1c>)
 800aef4:	2300      	movs	r3, #0
 800aef6:	4604      	mov	r4, r0
 800aef8:	4608      	mov	r0, r1
 800aefa:	602b      	str	r3, [r5, #0]
 800aefc:	f7f7 fa96 	bl	800242c <_close>
 800af00:	1c43      	adds	r3, r0, #1
 800af02:	d102      	bne.n	800af0a <_close_r+0x1a>
 800af04:	682b      	ldr	r3, [r5, #0]
 800af06:	b103      	cbz	r3, 800af0a <_close_r+0x1a>
 800af08:	6023      	str	r3, [r4, #0]
 800af0a:	bd38      	pop	{r3, r4, r5, pc}
 800af0c:	20000344 	.word	0x20000344

0800af10 <fiprintf>:
 800af10:	b40e      	push	{r1, r2, r3}
 800af12:	b503      	push	{r0, r1, lr}
 800af14:	4601      	mov	r1, r0
 800af16:	ab03      	add	r3, sp, #12
 800af18:	4805      	ldr	r0, [pc, #20]	; (800af30 <fiprintf+0x20>)
 800af1a:	f853 2b04 	ldr.w	r2, [r3], #4
 800af1e:	6800      	ldr	r0, [r0, #0]
 800af20:	9301      	str	r3, [sp, #4]
 800af22:	f7ff f8d3 	bl	800a0cc <_vfiprintf_r>
 800af26:	b002      	add	sp, #8
 800af28:	f85d eb04 	ldr.w	lr, [sp], #4
 800af2c:	b003      	add	sp, #12
 800af2e:	4770      	bx	lr
 800af30:	2000000c 	.word	0x2000000c

0800af34 <_fstat_r>:
 800af34:	b538      	push	{r3, r4, r5, lr}
 800af36:	4d07      	ldr	r5, [pc, #28]	; (800af54 <_fstat_r+0x20>)
 800af38:	2300      	movs	r3, #0
 800af3a:	4604      	mov	r4, r0
 800af3c:	4608      	mov	r0, r1
 800af3e:	4611      	mov	r1, r2
 800af40:	602b      	str	r3, [r5, #0]
 800af42:	f7f7 fa7f 	bl	8002444 <_fstat>
 800af46:	1c43      	adds	r3, r0, #1
 800af48:	d102      	bne.n	800af50 <_fstat_r+0x1c>
 800af4a:	682b      	ldr	r3, [r5, #0]
 800af4c:	b103      	cbz	r3, 800af50 <_fstat_r+0x1c>
 800af4e:	6023      	str	r3, [r4, #0]
 800af50:	bd38      	pop	{r3, r4, r5, pc}
 800af52:	bf00      	nop
 800af54:	20000344 	.word	0x20000344

0800af58 <_isatty_r>:
 800af58:	b538      	push	{r3, r4, r5, lr}
 800af5a:	4d06      	ldr	r5, [pc, #24]	; (800af74 <_isatty_r+0x1c>)
 800af5c:	2300      	movs	r3, #0
 800af5e:	4604      	mov	r4, r0
 800af60:	4608      	mov	r0, r1
 800af62:	602b      	str	r3, [r5, #0]
 800af64:	f7f7 fa7e 	bl	8002464 <_isatty>
 800af68:	1c43      	adds	r3, r0, #1
 800af6a:	d102      	bne.n	800af72 <_isatty_r+0x1a>
 800af6c:	682b      	ldr	r3, [r5, #0]
 800af6e:	b103      	cbz	r3, 800af72 <_isatty_r+0x1a>
 800af70:	6023      	str	r3, [r4, #0]
 800af72:	bd38      	pop	{r3, r4, r5, pc}
 800af74:	20000344 	.word	0x20000344

0800af78 <_lseek_r>:
 800af78:	b538      	push	{r3, r4, r5, lr}
 800af7a:	4d07      	ldr	r5, [pc, #28]	; (800af98 <_lseek_r+0x20>)
 800af7c:	4604      	mov	r4, r0
 800af7e:	4608      	mov	r0, r1
 800af80:	4611      	mov	r1, r2
 800af82:	2200      	movs	r2, #0
 800af84:	602a      	str	r2, [r5, #0]
 800af86:	461a      	mov	r2, r3
 800af88:	f7f7 fa77 	bl	800247a <_lseek>
 800af8c:	1c43      	adds	r3, r0, #1
 800af8e:	d102      	bne.n	800af96 <_lseek_r+0x1e>
 800af90:	682b      	ldr	r3, [r5, #0]
 800af92:	b103      	cbz	r3, 800af96 <_lseek_r+0x1e>
 800af94:	6023      	str	r3, [r4, #0]
 800af96:	bd38      	pop	{r3, r4, r5, pc}
 800af98:	20000344 	.word	0x20000344

0800af9c <memmove>:
 800af9c:	4288      	cmp	r0, r1
 800af9e:	b510      	push	{r4, lr}
 800afa0:	eb01 0402 	add.w	r4, r1, r2
 800afa4:	d902      	bls.n	800afac <memmove+0x10>
 800afa6:	4284      	cmp	r4, r0
 800afa8:	4623      	mov	r3, r4
 800afaa:	d807      	bhi.n	800afbc <memmove+0x20>
 800afac:	1e43      	subs	r3, r0, #1
 800afae:	42a1      	cmp	r1, r4
 800afb0:	d008      	beq.n	800afc4 <memmove+0x28>
 800afb2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800afb6:	f803 2f01 	strb.w	r2, [r3, #1]!
 800afba:	e7f8      	b.n	800afae <memmove+0x12>
 800afbc:	4402      	add	r2, r0
 800afbe:	4601      	mov	r1, r0
 800afc0:	428a      	cmp	r2, r1
 800afc2:	d100      	bne.n	800afc6 <memmove+0x2a>
 800afc4:	bd10      	pop	{r4, pc}
 800afc6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800afca:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800afce:	e7f7      	b.n	800afc0 <memmove+0x24>

0800afd0 <__malloc_lock>:
 800afd0:	4801      	ldr	r0, [pc, #4]	; (800afd8 <__malloc_lock+0x8>)
 800afd2:	f7fe b8ae 	b.w	8009132 <__retarget_lock_acquire_recursive>
 800afd6:	bf00      	nop
 800afd8:	20000338 	.word	0x20000338

0800afdc <__malloc_unlock>:
 800afdc:	4801      	ldr	r0, [pc, #4]	; (800afe4 <__malloc_unlock+0x8>)
 800afde:	f7fe b8a9 	b.w	8009134 <__retarget_lock_release_recursive>
 800afe2:	bf00      	nop
 800afe4:	20000338 	.word	0x20000338

0800afe8 <_realloc_r>:
 800afe8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800afec:	4680      	mov	r8, r0
 800afee:	4614      	mov	r4, r2
 800aff0:	460e      	mov	r6, r1
 800aff2:	b921      	cbnz	r1, 800affe <_realloc_r+0x16>
 800aff4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800aff8:	4611      	mov	r1, r2
 800affa:	f7fe be6d 	b.w	8009cd8 <_malloc_r>
 800affe:	b92a      	cbnz	r2, 800b00c <_realloc_r+0x24>
 800b000:	f7fe fdfe 	bl	8009c00 <_free_r>
 800b004:	4625      	mov	r5, r4
 800b006:	4628      	mov	r0, r5
 800b008:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b00c:	f000 f835 	bl	800b07a <_malloc_usable_size_r>
 800b010:	4284      	cmp	r4, r0
 800b012:	4607      	mov	r7, r0
 800b014:	d802      	bhi.n	800b01c <_realloc_r+0x34>
 800b016:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800b01a:	d812      	bhi.n	800b042 <_realloc_r+0x5a>
 800b01c:	4621      	mov	r1, r4
 800b01e:	4640      	mov	r0, r8
 800b020:	f7fe fe5a 	bl	8009cd8 <_malloc_r>
 800b024:	4605      	mov	r5, r0
 800b026:	2800      	cmp	r0, #0
 800b028:	d0ed      	beq.n	800b006 <_realloc_r+0x1e>
 800b02a:	42bc      	cmp	r4, r7
 800b02c:	4622      	mov	r2, r4
 800b02e:	4631      	mov	r1, r6
 800b030:	bf28      	it	cs
 800b032:	463a      	movcs	r2, r7
 800b034:	f7fe f8fe 	bl	8009234 <memcpy>
 800b038:	4631      	mov	r1, r6
 800b03a:	4640      	mov	r0, r8
 800b03c:	f7fe fde0 	bl	8009c00 <_free_r>
 800b040:	e7e1      	b.n	800b006 <_realloc_r+0x1e>
 800b042:	4635      	mov	r5, r6
 800b044:	e7df      	b.n	800b006 <_realloc_r+0x1e>
	...

0800b048 <_read_r>:
 800b048:	b538      	push	{r3, r4, r5, lr}
 800b04a:	4d07      	ldr	r5, [pc, #28]	; (800b068 <_read_r+0x20>)
 800b04c:	4604      	mov	r4, r0
 800b04e:	4608      	mov	r0, r1
 800b050:	4611      	mov	r1, r2
 800b052:	2200      	movs	r2, #0
 800b054:	602a      	str	r2, [r5, #0]
 800b056:	461a      	mov	r2, r3
 800b058:	f7f7 f9a0 	bl	800239c <_read>
 800b05c:	1c43      	adds	r3, r0, #1
 800b05e:	d102      	bne.n	800b066 <_read_r+0x1e>
 800b060:	682b      	ldr	r3, [r5, #0]
 800b062:	b103      	cbz	r3, 800b066 <_read_r+0x1e>
 800b064:	6023      	str	r3, [r4, #0]
 800b066:	bd38      	pop	{r3, r4, r5, pc}
 800b068:	20000344 	.word	0x20000344

0800b06c <abort>:
 800b06c:	b508      	push	{r3, lr}
 800b06e:	2006      	movs	r0, #6
 800b070:	f000 f834 	bl	800b0dc <raise>
 800b074:	2001      	movs	r0, #1
 800b076:	f7f7 f987 	bl	8002388 <_exit>

0800b07a <_malloc_usable_size_r>:
 800b07a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b07e:	1f18      	subs	r0, r3, #4
 800b080:	2b00      	cmp	r3, #0
 800b082:	bfbc      	itt	lt
 800b084:	580b      	ldrlt	r3, [r1, r0]
 800b086:	18c0      	addlt	r0, r0, r3
 800b088:	4770      	bx	lr

0800b08a <_raise_r>:
 800b08a:	291f      	cmp	r1, #31
 800b08c:	b538      	push	{r3, r4, r5, lr}
 800b08e:	4604      	mov	r4, r0
 800b090:	460d      	mov	r5, r1
 800b092:	d904      	bls.n	800b09e <_raise_r+0x14>
 800b094:	2316      	movs	r3, #22
 800b096:	6003      	str	r3, [r0, #0]
 800b098:	f04f 30ff 	mov.w	r0, #4294967295
 800b09c:	bd38      	pop	{r3, r4, r5, pc}
 800b09e:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800b0a0:	b112      	cbz	r2, 800b0a8 <_raise_r+0x1e>
 800b0a2:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b0a6:	b94b      	cbnz	r3, 800b0bc <_raise_r+0x32>
 800b0a8:	4620      	mov	r0, r4
 800b0aa:	f000 f831 	bl	800b110 <_getpid_r>
 800b0ae:	462a      	mov	r2, r5
 800b0b0:	4601      	mov	r1, r0
 800b0b2:	4620      	mov	r0, r4
 800b0b4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b0b8:	f000 b818 	b.w	800b0ec <_kill_r>
 800b0bc:	2b01      	cmp	r3, #1
 800b0be:	d00a      	beq.n	800b0d6 <_raise_r+0x4c>
 800b0c0:	1c59      	adds	r1, r3, #1
 800b0c2:	d103      	bne.n	800b0cc <_raise_r+0x42>
 800b0c4:	2316      	movs	r3, #22
 800b0c6:	6003      	str	r3, [r0, #0]
 800b0c8:	2001      	movs	r0, #1
 800b0ca:	e7e7      	b.n	800b09c <_raise_r+0x12>
 800b0cc:	2400      	movs	r4, #0
 800b0ce:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800b0d2:	4628      	mov	r0, r5
 800b0d4:	4798      	blx	r3
 800b0d6:	2000      	movs	r0, #0
 800b0d8:	e7e0      	b.n	800b09c <_raise_r+0x12>
	...

0800b0dc <raise>:
 800b0dc:	4b02      	ldr	r3, [pc, #8]	; (800b0e8 <raise+0xc>)
 800b0de:	4601      	mov	r1, r0
 800b0e0:	6818      	ldr	r0, [r3, #0]
 800b0e2:	f7ff bfd2 	b.w	800b08a <_raise_r>
 800b0e6:	bf00      	nop
 800b0e8:	2000000c 	.word	0x2000000c

0800b0ec <_kill_r>:
 800b0ec:	b538      	push	{r3, r4, r5, lr}
 800b0ee:	4d07      	ldr	r5, [pc, #28]	; (800b10c <_kill_r+0x20>)
 800b0f0:	2300      	movs	r3, #0
 800b0f2:	4604      	mov	r4, r0
 800b0f4:	4608      	mov	r0, r1
 800b0f6:	4611      	mov	r1, r2
 800b0f8:	602b      	str	r3, [r5, #0]
 800b0fa:	f7f7 f935 	bl	8002368 <_kill>
 800b0fe:	1c43      	adds	r3, r0, #1
 800b100:	d102      	bne.n	800b108 <_kill_r+0x1c>
 800b102:	682b      	ldr	r3, [r5, #0]
 800b104:	b103      	cbz	r3, 800b108 <_kill_r+0x1c>
 800b106:	6023      	str	r3, [r4, #0]
 800b108:	bd38      	pop	{r3, r4, r5, pc}
 800b10a:	bf00      	nop
 800b10c:	20000344 	.word	0x20000344

0800b110 <_getpid_r>:
 800b110:	f7f7 b922 	b.w	8002358 <_getpid>

0800b114 <_init>:
 800b114:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b116:	bf00      	nop
 800b118:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b11a:	bc08      	pop	{r3}
 800b11c:	469e      	mov	lr, r3
 800b11e:	4770      	bx	lr

0800b120 <_fini>:
 800b120:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b122:	bf00      	nop
 800b124:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b126:	bc08      	pop	{r3}
 800b128:	469e      	mov	lr, r3
 800b12a:	4770      	bx	lr
